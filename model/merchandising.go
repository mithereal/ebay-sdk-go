package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckValue string

const (

	//
	// The request was processed successfully without errors or warnings.
	//
	AckValueSuccess AckValue = "Success"

	//
	// Errors occurred that prevented the request from being processed
	// successfully.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request was processed successfully, but some warnings were returned.
	//
	AckValueWarning AckValue = "Warning"

	//
	// Reserved for future use.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type PriceTreatmentEnum string

const (

	//
	// Strike through price
	//
	PriceTreatmentEnumSTP PriceTreatmentEnum = "STP"

	//
	// Miminum Advertised Price
	//
	PriceTreatmentEnumMAP PriceTreatmentEnum = "MAP"

	//
	// None
	//
	PriceTreatmentEnumNONE PriceTreatmentEnum = "NONE"
)

type ItemFilterType string

const (

	//
	// If true, returns only items listed in the World of Good marketplace.
	// Defaults to false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="../types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeWorldOfGoodOnly ItemFilterType = "WorldOfGoodOnly"
)

type ErrorSeverity string

const (

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user. For example, eBay may have changed a
	// value the user sent in. In this case, eBay returns a normal, successful
	// response and also returns the warning.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side, such as a
	// database or server down. An application can retry the request as-is a
	// reasonable number of times (eBay recommends twice). If the error
	// persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, such as missing or
	// invalid fields. The problem must be corrected before the request can be
	// made again. If the problem is due to something in the application (such
	// as a missing required field), the application must be changed. Once the
	// problem in the application or data is resolved, resend the corrected
	// request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, such as invalid or
	// missing data. The problem must be corrected before the request can be
	// made again. If the problem is a result of end-user data, the application
	// must alert the end-user to the problem and provide the means for the
	// end-user to correct the data. Once the problem in the data is resolved,
	// resend the request to eBay with the corrected data.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type GetVersionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetVersionRequest"`

	*BaseServiceRequest
}

type GetVersionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetVersionResponse"`

	*BaseServiceResponse
}

type BaseServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceRequest"`
}

type BaseMerchandisingServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseMerchandisingServiceRequest"`

	*BaseServiceRequest

	//
	// Specifies the maximum number of entries to return in a single call.
	// If the number of entries that can be returned is less than the value
	// you specify, the lower number is returned. Values less than 1 or
	// greater than 50 (or 20 in the case of
	// <b class="con">getTopSellingProduct</b>s) will be
	// ignored.
	//
	MaxResults int32 `xml:"maxResults,omitempty"`

	//
	// Container for affiliate details. eBay uses the specified affiliate
	// details to build a View Item URL and Product URL string in the
	// response that includes your affiliate tracking information in the
	// correct format. When a user clicks through these URLs to eBay and
	// performs certain tasks, you may get an affiliate commission.
	// <br><br>
	// See the <a href="https://www.ebaypartnernetwork.com/"
	// target="_blank">eBay Partner Network</a> for information
	// about commissions.
	//
	Affiliate *Affiliate `xml:"affiliate,omitempty"`
}

type GetMostWatchedItemsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetMostWatchedItemsRequest"`

	*BaseMerchandisingServiceRequest

	//
	// Specifies the category from which to retrieve item listings. This
	// field takes the same category ID data as used with other eBay APIs.
	// <br><br>
	// Category IDs are site-specific. If the specified category ID doesn't
	// match an existing category for the site, an invalid-category error
	// message is returned. To determine valid categories, you can use
	// either the Shopping API or the Trading API. In the Shopping API, use
	// the <b class="con">FindItemsAdvanced</b> call with the
	// CategoryHistogram value in the <b
	// class="con">IncludeSelector</b> field to retrieve matching
	// category information. In the Trading API, use calls like <b
	// class="con">GetCategories</b> and <b class="con">
	// GetCategoryFeatures</b> to determine valid values for the site.
	//
	CategoryId string `xml:"categoryId,omitempty"`
}

type GetTopSellingProductsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetTopSellingProductsRequest"`

	*BaseMerchandisingServiceRequest
}

type GetRelatedCategoryItemsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetRelatedCategoryItemsRequest"`

	*BaseMerchandisingServiceRequest

	//
	// The ID of an active item listing. Related categories are determined
	// from the primary category in which the item is listed. If both
	// categoryId is also specified, it takes precedence.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// Specifies the category used to determine related categories from
	// which to retrieve item listings. This field takes the same category
	// ID data as used with other eBay APIs.
	// <br><br>
	// Category IDs are site-specific. If the specified category ID doesn't
	// match an existing category for the site, an invalid-category error
	// message is returned. To determine valid categories, you can use
	// either the Shopping API or the Trading API. In the Shopping API, use
	// the <b class="con">FindItemsAdvanced</b> call with the
	// CategoryHistogram value in the <b
	// class="con">IncludeSelector</b> field to retrieve matching
	// category information. In the Trading API, use calls like <b
	// class="con">GetCategories</b> and <b class="con">
	// GetCategoryFeatures</b> to determine valid values for the site.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// Filters items based on the allowed set of name value pairs.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`
}

type GetDealsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetDealsRequest"`

	*BaseMerchandisingServiceRequest

	//
	// A query string for searching titles of items on eBay. The query is
	// limited to a maximum of 7 space-delimited terms. Any additional terms
	// will be ignored. Results must match all terms in the query.
	// <br><br>
	// The keywords field does not support wildcards, such as asterisks
	// ("*") or question marks ("?"), or Boolean search operators, such as
	// "AND" (or the plus sign "+"), "OR," or "NOT" (or the minus sign "-").
	// Search wildcard or operator characters (e.g., "*" or "+") will be
	// ignored. The words "and" and "or" and "not" are treated like any
	// other word, and should be used only if you are searching for listings
	// containing these words.
	// <br><br>
	// <b>Note:</b> If you are using an HTTP GET (i.e., URL)
	// request, use "%20" to delimit terms specified in keywords. For
	// example, use Harry%20Potter to search for items containing those
	// words in any order.
	//
	Keywords string `xml:"keywords,omitempty"`
}

type GetSimilarItemsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetSimilarItemsRequest"`

	*BaseMerchandisingServiceRequest

	//
	// The ID of an active item listing or a listing that has ended less
	// than two weeks ago.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// Results are limited to items from the specified category only. Up to
	// three category IDs can be specified. You cannot specify both
	// categoryId and categoryIdExclude in the same request.
	//
	CategoryId []string `xml:"categoryId,omitempty"`

	//
	// Items from the specified category are excluded from the results. Up
	// to three category IDs can be specified. You cannot specify both
	// categoryId and categoryIdExclude in the same request.
	//
	CategoryIdExclude []string `xml:"categoryIdExclude,omitempty"`

	//
	// Filters items based on the format of the listing.
	// If listingType is not specified, all listing types can be returned
	// unless another relevant filter is specified.
	// <br><br>
	// <dl>
	// <lh>Applicable values:<br></lh>
	// <dt>AdType</dt>
	// <dd>Advertisement to solicit inquiries on listings such as real
	// estate. Permits no bidding on that item, service, or property. To
	// express interest, a buyer fills out a contact form that eBay forwards
	// to the the seller as a lead. This format does not enable buyers and
	// sellers to transact online through eBay, and eBay Feedback is not
	// available for ad format listings.</dd>
	// <dt>Chinese</dt>
	// <dd>Single-quantity online auction format. A Chinese auction
	// has a Quantity of 1. Buyers engage in competitive bidding, although
	// Buy It Now may be offered as long as no bids have been placed. Online
	// auctions are listed on eBay.com, and they are also listed in the
	// seller's eBay Store if the seller is a Store owner.</dd>
	// <dt>Dutch</dt>
	// <dd>Multiple-quantity online auction format. A Dutch auction
	// has a Quantity greater than 1. Buyers engage in competitive bidding.
	// Some sites also offer Buy It Now for Dutch auctions. Online auctions
	// are listed on eBay.com, and they are also listed in the seller's eBay
	// Store if the seller is a Store owner.</dd>
	// <dt>FixedPriceItem</dt>
	// <dd>A basic fixed-price item format. Bids do not occur. The
	// quantity of items is one or more. Also known as Buy It Now Only on
	// some sites (not to be confused with the BuyItNow option that is
	// available for Chinese auctions). Fixed-price listings are listed on
	// eBay.com, and they are listed in the seller's eBay Store if the
	// seller is a Store owner. </dd>
	// <dt>LeadGeneration</dt>
	// <dd>Lead Generation format (advertisement-style listing to
	// solicit inquiries or offers, no bidding or fixed price, listed on
	// eBay). </dd>
	// <dt>StoresFixedPrice</dt>
	// <dd>A fixed-price format for eBay Store sellers. Store
	// Inventory listings appear after other listings in regular browse and
	// search item lists on eBay. They have a lower Insertion Fee and longer
	// listing durations. Only available to sellers who have an eBay Store.
	// Store Inventory listings are listed on eBay.com, and they are also
	// listed in the seller's eBay Store. Starting in early June 2008, on
	// the Italy site, stores fixed price items will be treated as basic
	// fixed-price items; please see the documentation for FixedPriceItem
	// (that is, for the basic fixed-price item format).</dd>
	// </dl>
	//
	ListingType string `xml:"listingType,omitempty"`

	//
	// Limits the results to items ending before the specified time.
	// within a time range. If you are specifying a time range with
	// EndTimeFrom, EndTimeFrom must be specified (with a value equal
	// to or earlier than EndTimeTo). Specify the time in GMT.
	//
	EndTimeTo time.Time `xml:"endTimeTo,omitempty"`

	//
	// Limits the results to items ending after the specified time.
	// Specify a time in the future. If you specify a time in the past,
	// the current time is used. Specify the time in GMT.
	//
	EndTimeFrom time.Time `xml:"endTimeFrom,omitempty"`

	//
	// Specifies the maximum current price an item can have to be included
	// in the response. The currencyId you specify must match the currency
	// corresponding to the global ID value passed in the request. If no
	// global ID is specified, you must specify USD.
	//
	MaxPrice *Amount `xml:"maxPrice,omitempty"`

	//
	// Filters items based on the allowed set of name value pairs.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`
}

type BaseServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceResponse"`

	//
	// Indicates whether there are any errors or warnings associated with the
	// processing of the request.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that occurred when eBay processed the
	// request. Not returned when responseStatus is Success. See <a
	// href="http://developer.ebay.com/DevZone/merchandising/docs/CallRef/Errors/ErrorMessages.html"
	// title="All error messages by code number">Errors by Number</a>
	// for a list of errors and warnings that can be returned by Merchandising
	// API calls.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The version of the response payload schema. Indicates the version of the
	// schema that eBay used to process the request. Developer Technical Support
	// may ask you for the version value when you work with them to troubleshoot
	// issues.
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the
	// request. The time zone of this value is <a
	// href="types/simpleTypes.html#dateTime">GMT</a>
	// and the format is the ISO 8601 date and time format
	// (YYYY-MM-DDTHH:MM:SS.SSSZ). See the "dateTime" type for information about
	// this time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type BaseMerchandisingServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseMerchandisingServiceResponse"`

	*BaseServiceResponse
}

type MerchandisingServiceItemResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services MerchandisingServiceItemResponse"`

	*BaseMerchandisingServiceResponse

	//
	// A list of items matching the given criteria. Item sort order is
	// different for each call. Returned when there are items that match the
	// search criteria.
	//
	ItemRecommendations *ItemRecommendations `xml:"itemRecommendations,omitempty"`
}

type MerchandisingServiceProductResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services MerchandisingServiceProductResponse"`

	*BaseMerchandisingServiceResponse

	//
	// Array of products. Recommendations. Returned when there are products
	// that match the search criteria.
	//
	ProductRecommendations *ProductRecommendations `xml:"productRecommendations,omitempty"`
}

type ItemRecommendations struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ItemRecommendations"`

	//
	// Contains details for a single recommended item. Returned when there is
	// at least one item that matches the search criteria.
	//
	Item []*Item `xml:"item,omitempty"`
}

type ProductRecommendations struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ProductRecommendations"`

	//
	// An eBay catalog product. This contains stock information about a
	// particular DVD, camera, set of golf clubs, or other product. Returned
	// when there is at least one product that matches the search criteria.
	//
	Product []*Product `xml:"product,omitempty"`
}

type Item struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services Item"`

	//
	// The ID that uniquely identifies the item listing. The ID is generated by
	// eBay after an item is listed. You cannot choose or revise this value.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// Name of the item as it appears in the listing or search results.
	//
	Title string `xml:"title,omitempty"`

	//
	// The URL of the web page where a user can view the listing. On the US
	// site, this is called the "View Item" page. If you enabled affiliate
	// tracking in the call, viewItemURL contains a string that includes
	// affiliate tracking information (see the
	// <a href="https://www.ebaypartnernetwork.com/">eBay Partner
	// Network</a>).
	//
	ViewItemURL *AnyURI `xml:"viewItemURL,omitempty"`

	//
	// For competitive-bidding listings (Chinese and Dutch auctions), current
	// minimum asking price (start price) or the current highest bid for the
	// item if bids have been placed. Shows minimum bid if no bids have been
	// placed on the item. For Basic Fixed-Price, Store Inventory, or Ad type
	// listings, this returns the original price specified when the item was
	// listed/re-listed or the revised price if the item was revised.
	//
	CurrentPrice *Amount `xml:"currentPrice,omitempty"`

	//
	// Original price of an item whose price a seller has reduced with the
	// Promotional Price Display feature. Only returned if the price has been
	// revised.
	//
	OriginalPrice *Amount `xml:"originalPrice,omitempty"`

	//
	// The site upon which the item is listed. Returns a Global ID, which is a
	// unique identifier for combinations of site, language, and territory.
	// <br><br>
	// For a list of possible enumeration values and how they map to eBay sites,
	// see <a href="Enums/GlobalIdList.html">Global ID Values</a>.
	//
	GlobalId string `xml:"globalId,omitempty"`

	//
	// Time left before the item listing ends. The duration is represented in
	// the ISO 8601 duration format (PnDTnHnMnS). For ended listings, the time
	// left is P0DT0H0M0S (zero days, zero hours, zero minutes, and zero
	// seconds).
	//
	TimeLeft *Duration `xml:"timeLeft,omitempty"`

	//
	// Numeric ID of the first (or only) category in which the item is listed.
	// (Listings can appear in more than one category.)<br>
	// <span class="tablenote"><b>Note:</b> Currently, the
	// Merchandising API calls do not return a listing's secondary category, if
	// any.</span>
	//
	PrimaryCategoryId string `xml:"primaryCategoryId,omitempty"`

	//
	// Display name of the first (or only) category in which the item is listed.
	// This is a fully qualified category breadcrumb (e.g., Computers &
	// Networking:Laptops, Notebooks).
	//
	PrimaryCategoryName string `xml:"primaryCategoryName,omitempty"`

	//
	// Subtitle of the item. Only returned if the seller included a subtitle for
	// the listing.
	//
	Subtitle string `xml:"subtitle,omitempty"`

	//
	// The number of bids that have been placed on the item.
	//
	BidCount int32 `xml:"bidCount,omitempty"`

	//
	// The Buy It Now Price of the item (if any), in the currency of the site on
	// which the item was listed.
	// <br><br>
	// For Chinese auctions (Quantity=1, competitive bidding online auctions),
	// Buy It Now lets a user purchase the item at a fixed price and end the
	// auction immediately. On most sites, after a Chinese auction has bids, the
	// listing is no longer eligible for Buy It Now. However, calls can still
	// return the Buy It Now Price that the seller set for the listing. Use the
	// item.bidCount field to determine whether an auction with Buy It Now has
	// bids or not.
	// <br><br>
	// Some eBay sites also support Buy It Now for Dutch auctions (multi-
	// quantity, competitive bidding), where you can buy multiple items from the
	// same listing at a fixed price, instead of bidding. On some sites, the Buy
	// It Now option remains available for Dutch auctions even after there are
	// bids.
	// <br><br>
	// For fixed-price (FixedPriceItem) and Store Inventory listings
	// (StoresFixedPrice), see currentPrice instead.
	// <br><br>
	// Only returned if an item was listed with Buy It Now.
	//
	BuyItNowPrice *Amount `xml:"buyItNowPrice,omitempty"`

	//
	// Two-letter ISO 3166 country code to indicate the country where the item
	// is located. For English names that correspond to each code (e.g.,
	// KY="Cayman Islands"), see the ISO site: <a
	// href="http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html">
	// http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html</a>.
	//
	Country string `xml:"country,omitempty"`

	//
	// URL for a picture used as the Gallery thumbnail, if any. The image uses
	// one of the following graphics formats: JPEG, BMP, TIF, or GIF. Only
	// returned if the seller chose to show a gallery image.
	//
	ImageURL *AnyURI `xml:"imageURL,omitempty"`

	//
	// The shipping cost associated with the first shipping service. Only
	// returned when shipping type is flat.
	//
	ShippingCost *Amount `xml:"shippingCost,omitempty"`

	//
	// The shipping cost model offered by the seller.
	// <br><br>
	// <dl>
	// <lh>Applicable values:</lh>
	// <dt>Calculated</dt>
	// <dd>
	// Calculated shipping model: the cost of shipping is determined in large
	// part by the seller-offered and buyer-selected shipping service. The
	// seller might assess an additional fee via PackagingHandlingCosts.
	// </dd>
	// <dt>CalculatedDomesticFlatInternational</dt>
	// <dd>
	// The seller specified one or more calculated domestic shipping
	// services and one or more flat international shipping services.
	// </dd>
	// <dt>Flat</dt>
	// <dd>
	// Flat shipping model: the seller establishes the cost of shipping and
	// cost of shipping insurance, regardless of what any buyer-selected
	// shipping service might charge the seller.
	// </dd>
	// <dt>FlatDomesticCalculatedInternational</dt>
	// <dd>
	// The seller specified one or more flat domestic shipping services and
	// one or more calculated international shipping services.
	// </dd>
	// <dt>Free</dt>
	// <dd>
	// Free shipping: Seller has specified free shipping for the item. The
	// cost of shipping is zero for the first domestic shipping service (for
	// flat or calculated shipping).
	// </dd>
	// <dt>Freight</dt>
	// <dd>
	// Freight shipping model: The cost of shipping is determined by a third
	// party, FreightQuote.com, based on the item location (zip code).
	// </dd>
	// <dt>NotSpecified</dt>
	// <dd>
	// The seller did not specify the shipping type.
	// </dd>
	// </dl>
	//
	ShippingType string `xml:"shippingType,omitempty"`

	//
	// The number of watches placed on this item from buyers' My eBay accounts.
	//
	WatchCount int32 `xml:"watchCount,omitempty"`

	//
	// This container provides information for an item that has a Strikethrough Price (STP) or a Minimum Advertised Price
	// (MAP) discount pricing treatment. STP and MAP apply only to fixed-price listings and auction listings with the Buy
	// It Now opton. STP is available on the US, UK, and German (DE) sites, while MAP is available only on the US site.
	// <br /> <br />
	// Discount pricing is available to qualified sellers (and their associated developers) who
	// participate in the Discount Pricing Program. Once qualified, sellers receive a
	// "special account flag" (SAF) that allows them to apply Discount Pricing to both single-variation and multi-variation
	// items. Sellers should contact their account manager or Customer Service to
	// see if they qualify for the Strikethrough Pricing program.
	// <br><br>
	// As a seller listing Discount Price items, you are required to maintain records of your discount
	// pricing in the event you are called upon to substantiate your item pricing. The following
	// link details your legal obligations when you utilize Discount Pricing to sell items: <a href=
	// "http://pages.ebay.com/help/sell/strike-through.html">Strikethrough Pricing Requirements
	// </a>
	// <br><br>
	// <b>For AddFixedPriceItem, RelistFixedPriceItem, ReviseFixedPriceItem, and
	// VerifyAddFixedPriceItem:</b>
	// If you are listing variations (MSKU items), use Variation.DiscountPriceInfo for each variation.
	//
	DiscountPriceInfo *DiscountPriceInfo `xml:"discountPriceInfo,omitempty"`
}

type DiscountPriceInfo struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services DiscountPriceInfo"`

	//
	// The actual retail price set by the manufacturer (OEM). eBay does not maintain
	// or validate the OriginalRetailPrice supplied by the seller. OriginalRetailPrice
	// should always be more than StartPrice. Compare the StartPrice/BuyItNowPrice to
	// OriginalRetailPrice to determine the amount of savings to the buyer.
	//
	OriginalRetailPrice *Amount `xml:"originalRetailPrice,omitempty"`

	//
	// Based on OriginalRetailPrice, MinimumAdvertisedPrice, and StartPrice values, eBay
	// identifies whether the listing falls under MAP or STP (aka OriginalRetailPrice).
	// GetItem returns this for items listed with one of these discount pricing treatments.
	// GetSellerList returns the DiscountPriceInfo container. This field is not applicable for
	// Add/Revise/Relist calls.
	//
	PricingTreatment *PriceTreatmentEnum `xml:"pricingTreatment,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this flag indicates that the discount price
	// (specified as StartPrice) is the price for which the seller offered the same (or similar) item
	// for sale on a Web site or offline store other than eBay in the previous 30 days. The discount
	// price is always in reference to the seller's own price for the item.
	// <br/><br/>
	// If this field is set to 'true', eBay displays 'Was*' in the UK and 'Ursprunglich*' in
	// Germany, next to the discounted price of the item. In the event both SoldOffeBay and
	// SoldOneBay fields are set, SoldOneBay takes precedence.
	//
	SoldOnEbay bool `xml:"soldOnEbay,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this flag indicates that the discount price
	// (specified as StartPrice) is the price for which the seller offered the same (or similar)
	// item for sale on a Web site or offline store other than eBay in the previous 30 days.
	// The discount price is always in reference to the seller's own price for the item.
	// <br/><br/>
	// If this field is set to 'true', eBay displays 'Was*' in the UK and 'Ursprunglich*'
	// in Germany, next to the discounted price of the item. In the event both SoldOffeBay and
	// SoldOneBay fields are set, SoldOneBay takes precedence.
	//
	SoldOffEbay bool `xml:"soldOffEbay,omitempty"`
}

type Product struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services Product"`

	//
	// The eBay or external IDs associated with the product. Use the Reference
	// value as input to search for the same product in the future, or use the
	// ISBN, EAN, or UPC value (if returned). The productId values can be used
	// as input for calls in the Shopping and Trading APIs to retrieve products,
	// item listings, or guides and reviews. <br> The ISBN, EAN, and UPC
	// values can also be useful as keys if your application is comparing
	// products across different sites.
	//
	ProductId *ProductId `xml:"productId,omitempty"`

	//
	// The title of the product, as specified in the catalog. Always returned
	// when Product is returned.
	//
	Title string `xml:"title,omitempty"`

	//
	// Fully qualified URL for optional information about the product, such as a
	// movie's description or film credits. This information is hosted through
	// the eBay Web site and it cannot be edited. Portions of the content are
	// protected by copyright. Applications can include this URL as a link in
	// product search results so that end users can view additional descriptive
	// details about the product. This is usually always returned when Product
	// is returned, but it may be safest to check for the existence of this
	// field.
	//
	ProductURL *AnyURI `xml:"productURL,omitempty"`

	//
	// Name of the catalog the product is in. Only returned if product is in a
	// catalog.
	//
	CatalogName string `xml:"catalogName,omitempty"`

	//
	// Fully qualified URL for a stock image (if any) associated with the eBay
	// catalog product. The URL is for the image eBay usually displays in
	// product search results (usually 70px tall). It may be helpful to
	// calculate the dimensions of the photo programmatically before displaying
	// it. Only returned if a URL is available for the product.
	//
	ImageURL *AnyURI `xml:"imageURL,omitempty"`

	//
	// The total number of reviews available for this product on the eBay Web
	// site. Always returned when product is returned.
	//
	ReviewCount int64 `xml:"reviewCount,omitempty"`

	//
	// The lowest price for items listed as this product.
	//
	PriceRangeMin *Amount `xml:"priceRangeMin,omitempty"`

	//
	// The highest price for items listed as this product.
	//
	PriceRangeMax *Amount `xml:"priceRangeMax,omitempty"`
}

type Amount struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services Amount"`

	Value float64

	//
	// Currency in which the monetary amount is specified.
	// <br><br>
	// For a list of possible enumeration values, see
	// <a href="Enums/currencyIdList.html">currencyId Values</a>.
	//
	CurrencyId string `xml:"currencyId,attr,omitempty"`
}

type Affiliate struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services Affiliate"`

	//
	// The value you specify is obtained from your tracking partner. For eBay
	// Partner Network, the TrackingID is the Campaign ID ("campid") provided by
	// eBay Partner Network. A Campaign ID is a 10-digit, unique number to be
	// used for associating traffic. A Campaign ID is valid across all programs
	// to which you have been accepted. Another example is the Affiliate ID
	// given to you by TradeDoubler.
	//
	TrackingId string `xml:"trackingId,omitempty"`

	//
	// Specifies your tracking partner for affiliate commissions. Affiliates
	// earn money from eBay for driving traffic to eBay. Required if you specify
	// a TrackingID. Depending on your tracking partner, specify one of the
	// following values. Not all partners are valid for all sites. For
	// PlaceOffer, only eBay Partner Network and Mediaplex are valid:
	// <br>2 = Be Free
	// <br>3 = Affilinet
	// <br>4 = TradeDoubler
	// <br>5 = Mediaplex
	// <br>6 = DoubleClick
	// <br>7 = Allyes
	// <br>8 = BJMT
	// <br>9 = eBay Partner Network
	// For information about commissions, see the
	// <a href="https://www.ebaypartnernetwork.com/">
	// eBay Partner Network</a>.
	//
	NetworkId string `xml:"networkId,omitempty"`

	//
	// Need not be specified. You can define an AffiliateUserID (up to 256
	// characters) if you want to leverage it to better monitor your marketing
	// efforts. If you are using the eBay Partner Network, and you provide an
	// AffiliateUserID, the tracking URL returned by eBay Partner Network will
	// contain the AffiliateUserID, but it will be referred to as a "customid".
	//
	CustomId string `xml:"customId,omitempty"`
}

type ProductId struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ProductId"`

	Value string

	//
	// Defines the type of ProductId.
	// <dl>
	// <lh>Enumeration Values:</lh>
	// <dt>
	// EAN
	// </dt>
	// <dd>
	// EAN value for books. (This is used more commonly in European
	// countries.) If you know a book's EAN, you can use this instead of the
	// eBay CatalogItem or Reference ID to search for that book.
	// <br><br>
	// <b>Max length of corresponding value: 13</b>
	// </dd>
	// <dt>
	// ISBN
	// </dt>
	// <dd>
	// ISBN-10 or ISBN-13 value for books. (The string length of ProductID
	// indicates whether the ID is 10 or 13 characters.) If you know a
	// book's ISBN, you can use this instead of the eBay CatalogItem or
	// Reference ID to search for that book.
	// <br><br>
	// <b>Max length of corresponding value: 13</b>
	// </dd>
	// <dt>
	// Reference
	// </dt>
	// <dd>
	// The global reference ID for an eBay catalog product. A reference ID
	// is a fixed reference to a product (regardless of version). Use this
	// instead of CatalogItem when you know a product's reference ID
	// (because older CatalogItem IDs are more likely to become obsolete
	// over time.) One reference ID can be associated with multiple
	// CatalogItem IDs. To determine valid reference IDs for products, first
	// call FindProducts with QueryKeywords (or ProductID). Each product in
	// the response includes a reference ID.
	// </dd>
	// <dt>
	// UPC
	// </dt>
	// <dd>
	// UPC value for products in Music (e.g., CDs), DVDs & Movies, and
	// Video Games categories (or domains). If you know a product's UPC, you
	// can use this instead of the eBay CatalogItem or Reference ID to
	// search for that product.
	// <br><br>
	// <b>Max length of corresponding value: 12</b>
	// </dd>
	// </dl>
	//
	Type string `xml:"type,attr,omitempty"`
}

type ItemFilter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ItemFilter"`

	//
	// In addition to filter Name/Value pairs, some item filters use an
	// additional parameter Name/Value pair.
	// <br><br>
	// For example, if you use the WorldOfGoodOnly item filter, you can
	// optionally specify a parameter name of WOGCategory with a parameter value
	// that specifies the World of Good category. This restricts the item
	// recommendations to items available in the specified World of Good
	// category only.
	// <p class="tablenote"><b>Note:</b>
	// To locate a specific World of Good category, go to the
	// worldofgood.ebay.com home page. Top-level categories are listed under
	// Shop by Category on the left-hand side of the page. Click the category
	// you want to use to restrict your search results. The resultant URL
	// contains the category ID as a numeric value, appearing before "/list" at
	// the end of the URL (e.g.,
	// http://worldofgood.ebay.com/Belts-Hats-Scarves-Shawls/<b>40</b>/list).
	// If a category has children categories, they will be displayed under the
	// Category on the left-hand side of the page. The numeric category ID can
	// be determined from the URL for child categories in the same fashion.
	// </p>
	//
	ParamName string `xml:"paramName,omitempty"`

	//
	// The value for the parameter name used in an item filter.
	// <br><br>
	// For example, if your item filter is WorldOfGoodOnly (true), you can
	// further restrict the item recommendations in the response to items
	// available in a specific World of Good category. In this case, the
	// paramter name is set to WOGCategory and the parameter values is a numeric
	// World of Good category ID.
	//
	ParamValue string `xml:"paramValue,omitempty"`

	//
	// Name of the item filter from the set of allowed filters. The
	// Merchandising API supports a World of Good item filter only.
	//
	Name *ItemFilterType `xml:"name,omitempty"`

	//
	// The value associated with the respective item filter name.
	//
	Value []string `xml:"value,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that
	// occurred. Your application can use error codes as identifiers in your
	// customized error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain upon which the error occurred.
	// <dl>
	// <lh>Domains include:</lh>
	// <dt>
	// Marketplace
	// </dt>
	// <dd>
	// A business or validation error occurred for the Merchandising Service.
	// </dd>
	// <dt>
	// SOA
	// </dt>
	// <dd>
	// An exception occurred in the Service Oriented Architecture (SOA)
	// framework.
	// </dd>
	// </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Indicates whether the error caused the request to fail (Error) or not
	// (Warning).
	// <br><br>
	// If the request fails and the source of the problem is within the
	// application (such as a missing required element), please change the
	// application before you retry the request. If the problem is due to end-
	// user input data, please alert the end-user to the problem and provide the
	// means for them to correct the data. Once the problem in the application
	// or data is resolved, you can attempt to re- send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request
	// as-is a reasonable number of times (eBay recommends twice). If the error
	// persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	// <br><br>
	// When a warning occurs, the error is returned in addition to the business
	// data. In this case, you do not need to retry the request (as the original
	// request was successful). However, depending on the cause or nature of the
	// warning, you might need to contact either the end user or eBay to effect
	// a long term solution to the problem to prevent it from reoccurring in the
	// future.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application errors,
	// and system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that resulted in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Name of the subdomain upon which the error occurred.
	// <dl>
	// <lh>Subdomains include:</lh>
	// <dt>
	// Merchandising
	// </dt>
	// <dd>
	// The error is specific to the Merchandising service.
	// </dd>
	// <dt>
	// MarketplaceCommon
	// </dt>
	// <dd>
	// The error is common to all Marketplace services.
	// </dd>
	// </dl>
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Some warning and error messages return one or more variables that contain
	// contextual information about the error. This is often the field or value
	// that triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorParameter"`

	Value string

	//
	// The name of the parameter in the list of parameter types returned
	// within the error type.
	//
	Name string `xml:"name,attr,omitempty"`
}

type MerchandisingServicePort struct {
	client *gowsdl.SoapClient
}

func NewMerchandisingServicePort(url string, tls bool) *MerchandisingServicePort {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &MerchandisingServicePort{
		client: client,
	}
}

func (service *MerchandisingServicePort) GetRelatedCategoryItems(request *GetRelatedCategoryItemsRequest) (*MerchandisingServiceItemResponse, error) {
	response := &MerchandisingServiceItemResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *MerchandisingServicePort) GetMostWatchedItems(request *GetMostWatchedItemsRequest) (*MerchandisingServiceItemResponse, error) {
	response := &MerchandisingServiceItemResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *MerchandisingServicePort) GetTopSellingProducts(request *GetTopSellingProductsRequest) (*MerchandisingServiceProductResponse, error) {
	response := &MerchandisingServiceProductResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *MerchandisingServicePort) GetDeals(request *GetDealsRequest) (*MerchandisingServiceItemResponse, error) {
	response := &MerchandisingServiceItemResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *MerchandisingServicePort) GetSimilarItems(request *GetSimilarItemsRequest) (*MerchandisingServiceItemResponse, error) {
	response := &MerchandisingServiceItemResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *MerchandisingServicePort) GetVersion(request *GetVersionRequest) (*GetVersionResponse, error) {
	response := &GetVersionResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
