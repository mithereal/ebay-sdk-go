package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckValue string

const (

	//
	// eBay successfully processed the request and the business data is returned in
	// the response. Note that it is possible for a response to return Success, but
	// still not contain the expected data in the result.
	//
	AckValueSuccess AckValue = "Success"

	//
	// eBay encountered a fatal error during the processing of the request, causing
	// the request to fail. When a serious application-level error occurs, the error
	// is returned instead of the business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was processed successfully but with
	// one or more warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// eBay successfully processed the request, but one or more non-fatal errors
	// occurred during the processing. Inspect the message details and resolve any
	// problems before resubmitting the request.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side. For example, a
	// database or server could be down. Inspect the error message to find the cause
	// of the problem. If the problem is on the eBay side, an application can retry
	// the request a reasonable number of times (eBay recommends twice). If the
	// error persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being the application sending the request. For example, the request is
	// missing a required data element or it contains an invalid field. The problem
	// must be corrected before the request can be resent. Inspect the error message
	// to find the cause of the problem. If the problem is due to an application
	// error, modify the application and resend the request. If the error is due to
	// invalid data, the source of the data must be corrected before you resend the
	// resend request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being missing or invalid data in the request. The problem must be
	// corrected before the request can be retried. Inspect the error message to
	// find the cause of the problem. If the problem is a result of end-user data,
	// alert the end-user to the problem and provide the means for them to correct
	// the problem. Once the problem is resolved, resend the request to eBay.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type ErrorSeverity string

const (

	//
	// eBay encountered a fatal error during the processing of the request, causing the request to fail. When eBay encounters an error, it returns error data instead of the requested business data. Inspect the error details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was successfully processed, but eBay encountered a non-fatal error during the processing that could affect the data returned. For example, eBay might have changed the value of an input field. In this Return, eBay returns a successful response, but it also returns a warning. For best results, requests should return without warnings. Inspect the warning details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type UserFilterRoleType string

const (

	//
	// This value is specified in the <b>otherUserFilter.role</b> field to
	// retrieve returns where the other user's role is buyer.
	//
	UserFilterRoleTypeBUYER UserFilterRoleType = "BUYER"

	//
	// This value is specified in the <b>otherUserFilter.role</b> field to
	// retrieve returns where the other user's role is seller.
	//
	UserFilterRoleTypeSELLER UserFilterRoleType = "SELLER"

	//
	// This value is specified in the <b>otherUserFilter.role</b> field to
	// retrieve returns where the other user's role is buyer or seller.
	//
	UserFilterRoleTypeBUYERORSELLER UserFilterRoleType = "BUYERORSELLER"
)

type ReturnSortType string

const (

	//
	// If this value is specified, returns are sorted based on the filing date of the return.
	// If <b>sortOrder</b> is set to <b>Descending</b>, the most recent
	// returns will appear first in the results set. If <b>sortOrder</b> is set
	// to <b>Ascending</b>, the oldest returns will appear first in the results
	// set. <b>FilingDate</b> is the default value, so returns will be sorted by
	// filing date if a <b>sortOrder</b> value is not specified in the
	// <b>getUserReturns</b> request.
	//
	ReturnSortTypeFilingDate ReturnSortType = "FilingDate"

	//
	// If this value is specified, returns are sorted based on the estimated amount of the
	// return. If <b>sortOrder</b> is set to <b>Descending</b>, the
	// highest value returns will appear first in the results set. If <b>sortOrder</b>
	// is set to <b>Ascending</b>, the lowest value returns will appear first
	// in the results set. <b>FilingDate</b> is the default value, so returns
	// will be sorted by filing date if a <b>sortOrder</b> value is not specified
	// in the <b>getUserReturns</b> request.
	//
	ReturnSortTypeEstimatedAmount ReturnSortType = "EstimatedAmount"

	//
	// If this value is specified, returns are sorted alphabetically based on the buyer's
	// eBay login name. If <b>sortOrder</b> is set to <b>Ascending</b>,
	// returns are sorted in alphabetical order according to eBay login name. If
	// <b>sortOrder</b> is set to <b>Descending</b>, returns are
	// sorted in reverse alphabetical order according to eBay login name.
	// <b>FilingDate</b> is the default value, so returns will be sorted by
	// filing date if a <b>sortOrder</b> value is not specified in the <b>
	// getUserReturns</b> request.
	//
	ReturnSortTypeBuyerLoginName ReturnSortType = "BuyerLoginName"

	//
	// If this value is specified, returns are sorted based on the refund due date. If
	// <b>sortOrder</b> is set to <b>Descending</b>, returns with
	// refund due dates the furthest in the future will appear first in the results set. If
	// <b>sortOrder</b> is set to <b>Ascending</b>, returns with
	// refund due dates the nearest in the future will appear first in the results set.
	// <b>FilingDate</b> is the default value, so returns will be sorted by
	// filing date if a <b>sortOrder</b> value is not specified in the
	// <b>getUserReturns</b> request.
	//
	ReturnSortTypeRefundDueDate ReturnSortType = "RefundDueDate"
)

type TrackingStatusType string

const (

	//
	// This value indicates that the package has been delivered.
	//
	TrackingStatusTypeDELIEVERED TrackingStatusType = "DELIEVERED"

	//
	// This value indicates that the package is in transit.
	//
	TrackingStatusTypeINTRANSIT TrackingStatusType = "INTRANSIT"

	//
	// This value indicates that the shipping status of the package is unknown.
	//
	TrackingStatusTypeUNKNOWN TrackingStatusType = "UNKNOWN"
)

type MetadataEntryType string

const (

	//
	// If this value is passed in, only information related to specific metadata is returned in
	// the <b>getReturnMetadata</b> response.
	//
	MetadataEntryTypeMETADATACODE MetadataEntryType = "METADATACODE"

	//
	// If this value is passed in, all metadata information is returned in the
	// <b>getReturnMetadata</b> response. <b>ALL</b> is the default
	// value if the <b>metadataEntryType</b> field is not used in the <b>getReturnMetadata</b>
	// request.
	//
	MetadataEntryTypeALL MetadataEntryType = "ALL"
)

type MetadataCodeType string

const (

	//
	// This value is passed into the <b>metadataEntryCode</b> field of the <b>getReturnMetadata</b>
	// request to retrieve the maximum number of business days a seller has to issue a refund to the buyer upon
	// receiving the returned item. The number of days can be found in the
	// <b>metadataCodeValues.value</b> field of the <b>getReturnMetadata</b>
	// response. A refund can be issued to the buyer through the <b>issueRefund</b>
	// call.
	//
	MetadataCodeTypeREFUNDDUEUPONITEMARRIVAL MetadataCodeType = "REFUNDDUEUPONITEMARRIVAL"

	//
	// This value is passed into the <b>metadataEntryCode</b> field of the <b>getReturnMetadata</b>
	// request to retrieve the maximum number of business days after the return filing date that a seller
	// has to provide an Return Merchandise Authorization number (if requested) to the buyer.
	// The number of days can be found in the <b>metadataCodeValues.value</b> field
	// of the <b>getReturnMetadata</b> response. An RMA can be provided to the buyer
	// through the <b>provideSellerInfo</b> call.
	//
	MetadataCodeTypeRMADUEUPONRETURNSTART MetadataCodeType = "RMADUEUPONRETURNSTART"

	//
	// This value is passed into the <b>metadataEntryCode</b> field of the <b>getReturnMetadata</b>
	// request to retrieve the reason the buyer is returning the item. The return reasons
	// are found in the <b>metadataCodeValues.value</b>
	// field of the <b>getReturnMetadata</b> response.
	//
	MetadataCodeTypeRETURNREASONS MetadataCodeType = "RETURNREASONS"
)

type ReturnStatusInputType string

const (

	//
	// This value is passed into the <b>ReturnStatusFilter.ReturnStatus</b> field of
	// the <b>getUserReturns</b> request to retrieve all open returns. If
	// <b>RETURN_STARTED</b> is used as a filter, returns in the following
	// states (these values are indicated in the <b>Returns.ReturnSummary.status</b>
	// field) are returned:
	// <ul>
	// <li>MY_PAYMENT_DUE</li>
	// <li>MY_RESPONSE_DUE</li>
	// <li>OTHER_PARTY_CONTACTED_CS_AWAITING_RESPONSE</li>
	// <li>OTHER_PARTY_RESPONSE_DUE</li>
	// <li>PAID</li>
	// <li>WAITING_DELIVERY</li>
	// <li>YOU_CONTACTED_CS_AWAITING_RESPONSE</li>
	// </ul>
	//
	ReturnStatusInputTypeRETURNSTARTED ReturnStatusInputType = "RETURNSTARTED"

	//
	// This value is passed into the <b>ReturnStatusFilter.ReturnStatus</b> field of
	// the <b>getUserReturns</b> request to retrieve all closed returns. If
	// <b>CLOSED</b> is used as a filter, returns in the following
	// states (these values are indicated in the <b>Returns.ReturnSummary.status</b>
	// field) are returned:
	// <ul>
	// <li>CLOSED</li>
	// <li>CS_CLOSED</li>
	// <li>EXPIRED</li>
	// <li>YOU_CONTACTED_CS_ABOUT_CLOSED_Return</li>
	// </ul>
	//
	ReturnStatusInputTypeCLOSED ReturnStatusInputType = "CLOSED"

	//
	// This value is passed into the <b>ReturnStatusFilter.ReturnStatus</b> field of
	// the <b>getUserReturns</b> request to retrieve all returns with the
	// status of WAITING_DELIVERY. Return status values are indicated in the
	// <b>Returns.ReturnSummary.status</b> field.
	//
	ReturnStatusInputTypeITEMSHIPPED ReturnStatusInputType = "ITEMSHIPPED"

	//
	// This value is passed into the <b>ReturnStatusFilter.ReturnStatus</b> field of
	// the <b>getUserReturns</b> request to retrieve all returns in which the
	// seller's response is due. The two applicable return status values returned in the
	// <b>Returns.ReturnSummary.status</b> field are MY_PAYMENT_DUE and
	// MY_RESPONSE_DUE. The MY_PAYMENT_DUE value indicates that the seller is expected to issue
	// a refund to the buyer. The MY_RESPONSE_DUE value can indicate that the seller must
	// provide an RMA number to the buyer, or the seller must contact eBay customer support.
	//
	ReturnStatusInputTypeMYRESPONSEDUE ReturnStatusInputType = "MYRESPONSEDUE"

	//
	// This value is passed into the <b>ReturnStatusFilter.ReturnStatus</b> field of
	// the <b>getUserReturns</b> request to retrieve all returns in which the
	// other party's response is due. The only applicable return status value returned in
	// <b>Returns.ReturnSummary.status</b> field is OTHER_PARTY_RESPONSE_DUE.
	//
	ReturnStatusInputTypeOTHERPARTYRESPONSEDUE ReturnStatusInputType = "OTHERPARTYRESPONSEDUE"
)

type ReturnSortOrderType string

const (

	//
	// This value is passed into the <b>sortOrderType</b> field of the
	// <b>getUserReturns</b> call to display all retrieved returns in ascending
	// order. See the <b>ReturnSortType</b> documentation to get an idea about how
	// <b>Ascending</b> affects the four different sort types.
	//
	ReturnSortOrderTypeAscending ReturnSortOrderType = "Ascending"

	//
	// This value is passed into the <b>sortOrderType</b> field of the
	// <b>getUserReturns</b> call to display all retrieved returns in descending
	// order. See the <b>ReturnSortType</b> documentation to get an idea about how
	// <b>Descending</b> affects the four different sort types. <b>Descending</b>
	// is the default value and will be used if the <b>sortOrderType</b> field is not
	// included in the <b>getUserReturns</b> request.
	//
	ReturnSortOrderTypeDescending ReturnSortOrderType = "Descending"
)

type ReturnType string

const (

	//
	// This value indicates that the buyer is returning/has returned the item for a refund.
	//
	ReturnTypeMONEYBACK ReturnType = "MONEYBACK"

	//
	// This value indicates that the buyer is requesting/has received a replacement item for the original item.
	//
	ReturnTypeREPLACEMENT ReturnType = "REPLACEMENT"

	//
	// This value is only returned if client/user is running a version of the Return Management API that is out-of-date, and does not contain the latest values of <b>ReturnType</b>.
	//
	ReturnTypeUNKNOWN ReturnType = "UNKNOWN"
)

type ReturnUserRoleType string

const (

	//
	// This value indicates that the user's role in the return is buyer.
	//
	ReturnUserRoleTypeBUYER ReturnUserRoleType = "BUYER"

	//
	// This value indicates that the user's role in the return is seller.
	//
	ReturnUserRoleTypeSELLER ReturnUserRoleType = "SELLER"

	//
	// This value indicates that the user's role in the return is eBay.
	//
	ReturnUserRoleTypeEBAY ReturnUserRoleType = "EBAY"

	//
	// This value indicates that the user's role in the return is system.
	//
	ReturnUserRoleTypeSYSTEM ReturnUserRoleType = "SYSTEM"

	//
	// This value is reserved for future use.
	//
	ReturnUserRoleTypeOTHER ReturnUserRoleType = "OTHER"
)

type ShipmentStatusType string

const (

	//
	// This value indicates that the buyer is waiting for an Return Merchandise Authorization
	// (RMA) number and/or an alternative return shipping address before returning the item to the seller. A seller can provide a buyer with this
	// information by using the <b>provideSellerInfo</b> call.
	//
	ShipmentStatusTypeWAITINGFORSELLERINFO ShipmentStatusType = "WAITINGFORSELLERINFO"

	//
	// This value indicates that the item is ready to be return shipped by the buyer.
	//
	ShipmentStatusTypeREADYFORSHIPPING ShipmentStatusType = "READYFORSHIPPING"

	//
	// This value indicates that the item has been shipped by the buyer.
	//
	ShipmentStatusTypeITEMSHIPPED ShipmentStatusType = "ITEMSHIPPED"

	//
	// This value indicates that the returned item has been received by the seller.
	//
	ShipmentStatusTypeITEMDELIVERED ShipmentStatusType = "ITEMDELIVERED"

	//
	// This value is reserved for future use.
	//
	ShipmentStatusTypeOTHER ShipmentStatusType = "OTHER"
)

type StatusType string

const (

	//
	// This value indicates that the seller's refund to the buyer was successful.
	//
	StatusTypeSUCCESS StatusType = "SUCCESS"

	//
	// This value indicates that the seller's refund to the buyer failed.
	//
	StatusTypeFAILED StatusType = "FAILED"
)

type RefundStatusType string

const (

	//
	// This value indicates that the seller's refund to the buyer was successful.
	//
	RefundStatusTypeSUCCESS RefundStatusType = "SUCCESS"

	//
	// This value indicates that the seller's refund to the buyer is pending. This value is
	// commonly returned if the payment method was eCheck.
	//
	RefundStatusTypePENDING RefundStatusType = "PENDING"

	//
	// This value indicates that the seller's refund to the buyer failed.
	//
	RefundStatusTypeFAILED RefundStatusType = "FAILED"
)

type CloseReturnReasonType string

const (

	//
	// This value indicates that the seller has refunded the buyer and the return has
	// been closed.
	//
	CloseReturnReasonTypeCLOSEDUPONREFUND CloseReturnReasonType = "CLOSEDUPONREFUND"

	//
	// This value indicates that the return expiration date has been reached, so the return
	// has been closed.
	//
	CloseReturnReasonTypeEXPIRED CloseReturnReasonType = "EXPIRED"

	//
	// This value indicates that customer service has closed the return.
	//
	CloseReturnReasonTypeCSCLOSED CloseReturnReasonType = "CSCLOSED"

	//
	// This value indicates that the return has been closed due to the buyer opening up
	// an eBay Buyer Protection case against the item.
	//
	CloseReturnReasonTypeCLOSEDUPONESCALATION CloseReturnReasonType = "CLOSEDUPONESCALATION"

	//
	// This value is reserved for future use.
	//
	CloseReturnReasonTypeOTHER CloseReturnReasonType = "OTHER"
)

type CaseType string

const (

	//
	// This value indicates that the eBay Buyer Protection case involves a "significantly not as
	// described" item.
	//
	CaseTypeEBPSNAD CaseType = "EBPSNAD"

	//
	// This value is reserved for future use.
	//
	CaseTypeOTHER CaseType = "OTHER"
)

type RefundFeeType string

const (

	//
	// This value indicates that the refund to the buyer is for the purchase price of the item,
	// or items (for multiple quantity purchases).
	//
	RefundFeeTypePURCHASEPRICE RefundFeeType = "PURCHASEPRICE"

	//
	// This value indicates that the refund to the buyer is for the original shipping costs of
	// the item, or items (for multiple quantity purchases).
	//
	RefundFeeTypeORIGINALSHIPPING RefundFeeType = "ORIGINALSHIPPING"

	//
	// This is the only <b>RefundFeeType</b> value that will be a negative
	// dollar value, as a restocking fee is a charge against the buyer for returning the
	// item. In order to enforce a restocking fee on an item, the seller must include a
	// restocking fee value as part of the listing's return policy. In the listing APIs,
	// this field is <b>Item.ReturnPolicy.RestockingFeeValue</b>.
	//
	RefundFeeTypeRESTOCKINGFEE RefundFeeType = "RESTOCKINGFEE"

	//
	// This value is reserved for future use.
	//
	RefundFeeTypeOTHER RefundFeeType = "OTHER"
)

type ActivityOptionType string

const (

	//
	// This value indicates that the seller's next action is to issue a refund to the buyer through the <b>issueRefund</b> call.
	//
	ActivityOptionTypeISSUEREFUND ActivityOptionType = "ISSUEREFUND"

	//
	// This value indicates that the seller's next action is to provide an RMA (Return Merchandise Authorization) number to the buyer through the <b>provideSellerInfo</b> call.
	//
	ActivityOptionTypePROVIDESELLERINFO ActivityOptionType = "PROVIDESELLERINFO"

	//
	// This value indicates that the seller's next action is to print a shipping label for the replacement item
	//
	ActivityOptionTypeSELLERPRINTSHIPPINGLABEL ActivityOptionType = "SELLERPRINTSHIPPINGLABEL"

	//
	// This value indicates that the seller's next action is to upload a tracking number for the replacement item through the <b>provideTrackingInfo</b> call.
	//
	ActivityOptionTypeSELLERPROVIDETRACKINGINFO ActivityOptionType = "SELLERPROVIDETRACKINGINFO"

	//
	// This value indicates that the seller's next action is to mark the returned item as received through the <b>setItemAsReceived</b> call.
	//
	ActivityOptionTypeSELLERMARKASRECEIVED ActivityOptionType = "SELLERMARKASRECEIVED"

	//
	// This value is reserved for future use.
	//
	ActivityOptionTypeOTHER ActivityOptionType = "OTHER"
)

type ReturnStatusType string

const (

	//
	// This value indicates that the the buyer is expecting to receive an RMA (Return
	// Merchandise Authorization) number and/or an alternative return shipping address from
	// the seller before the item is shipped back to the seller.
	//
	ReturnStatusTypeWAITINGFORSELLERINFO ReturnStatusType = "WAITINGFORSELLERINFO"

	//
	// This value indicates that the buyer is cleared to ship the item back to the seller.
	//
	ReturnStatusTypeREADYFORSHIPPING ReturnStatusType = "READYFORSHIPPING"

	//
	// This value indicates that the buyer has shipped the item back to the seller.
	//
	ReturnStatusTypeITEMSHIPPED ReturnStatusType = "ITEMSHIPPED"

	//
	// This value indicates that the returned item has been received by the seller.
	//
	ReturnStatusTypeITEMDELIVERED ReturnStatusType = "ITEMDELIVERED"

	//
	// This value indicates that the return has been closed.
	//
	ReturnStatusTypeCLOSED ReturnStatusType = "CLOSED"

	//
	// This value indicates that the buyer has escalated the
	// return to an eBay Buyer Protection case. When a return is escalated to an eBay
	// Buyer Protection case, the return is closed.
	//
	ReturnStatusTypeESCALATED ReturnStatusType = "ESCALATED"

	//
	// This value indicates that the status of the return is unknown.
	//
	ReturnStatusTypeUNKNOWN ReturnStatusType = "UNKNOWN"
)

type NotificationEventNameType string

const (

	//
	// This notification type is sent to the subscribed user or application when a return
	// is created by the buyer.
	//
	NotificationEventNameTypeReturnCreated NotificationEventNameType = "ReturnCreated"

	//
	// This notification type is sent to the subscribed user or application when a return
	// is waiting for the seller to provide an RMA number to the buyer.
	//
	NotificationEventNameTypeReturnWaitingForSellerInfo NotificationEventNameType = "ReturnWaitingForSellerInfo"

	//
	// This notification type is sent to the subscribed user or application when the due date
	// for an RMA is overdue.
	//
	NotificationEventNameTypeReturnSellerInfoOverdue NotificationEventNameType = "ReturnSellerInfoOverdue"

	//
	// This notification type is sent to the subscribed user or application when the item
	// associated with a return is shipped back to the seller.
	//
	NotificationEventNameTypeReturnShipped NotificationEventNameType = "ReturnShipped"

	//
	// This notification type is sent to the subscribed user or application when the item
	// associated with a return has been delivered to the seller.
	//
	NotificationEventNameTypeReturnDelivered NotificationEventNameType = "ReturnDelivered"

	//
	// This notification type is sent to the subscribed user or application when the refund to
	// the buyer is overdue.
	//
	NotificationEventNameTypeReturnRefundOverdue NotificationEventNameType = "ReturnRefundOverdue"

	//
	// This notification type is sent to the subscribed user or application when a return
	// is closed by the system.
	//
	NotificationEventNameTypeReturnClosed NotificationEventNameType = "ReturnClosed"

	//
	// This notification type is sent to the subscribed user or application when a (SNAD)
	// return is escalated to the eBay Buyer Protection system.
	//
	NotificationEventNameTypeReturnEscalated NotificationEventNameType = "ReturnEscalated"
)

type BaseRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services BaseRequest"`

	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type BaseResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services BaseResponse"`

	//
	// A token representing the application-level acknowledgement code that indicates the response status, such as "Success". The <b>AckValue</b> enumeration type specifies the possible values for <b>ack</b>.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that occurred when eBay processed the
	// request. This field is not returned if the <b>ack</b> value is <b>Success</b>.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The version of the response payload schema. Indicates the version of the schema that eBay used to process the request.
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the request. The time zone of this value is GMT and the format is the ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ). See Time Values in the eBay Features Guide for information about this time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`

	//
	// Reserved for future use.
	//
	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain in which the error occurred.
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Name of the subdomain in which the error occurred.
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Indicates whether the reported problem is fatal (an error) or is less severe (a warning). Review the error message details for information on the cause.
	// <br>
	// <br>
	// If the request fails and the application is the source of the error (for example, a required element is missing), update the application before you retry the request. If the problem is due to incorrect user data, alert the end user to the problem and provide the means for them to correct the data. Once the problem in the application or data is resolved, resend the request to eBay.
	// <br>
	// <br>
	// If the source of the problem is on eBay's side, you can retry the request a reasonable number of times (eBay recommends you try the request twice). If the error persists, contact Developer Technical Support. Once the problem has been resolved, you can resend the request in its original form.
	// <br>
	// <br>
	// If a warning occurs, warning information is returned in addition to the business data. Normally, you do not need to resend the request (as the original request was successful). However, depending on the cause of the warning, you might need to contact the end user, or eBay, to effect a long term solution to the problem.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application errors, and system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that caused the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Various warning and error messages return one or more variables that contain contextual information about the error. This is often the field or value that triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ErrorParameter"`

	Value string

	//
	// The name of the input parameter returned with the error. Inspecting the parameter (or its input value) will often aid in understanding the cause of the error. Not all error messages contain this value.
	//
	Name string `xml:"name,attr,omitempty"`
}

type ExtensionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ExtensionType"`

	//
	// Reserved for future use.
	//
	Id *PositiveInteger `xml:"id,omitempty"`

	//
	// Reserved for future use.
	//
	Version string `xml:"version,omitempty"`

	//
	// Reserved for future use.
	//
	ContentType string `xml:"contentType,omitempty"`

	//
	// Reserved for future use.
	//
	Value string `xml:"value,omitempty"`
}

type GetVersionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services GetVersionRequest"`

	*BaseRequest
}

type GetVersionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services GetVersionResponse"`

	*BaseResponse
}

type GetUserReturnsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services getUserReturnsRequest"`

	*BaseRequest

	//
	// Container used to retrieve all returns related to a specific eBay listing, or to
	// retrieve a return related to a specific order line item. Boolean OR logic is used if an
	// eBay Item ID and Transaction ID are both specified.
	// <br><br>
	// If more than one filter type is used in one call, boolean AND logic is applied to the
	// result set.
	//
	ItemFilter *ItemFilterType `xml:"itemFilter,omitempty"`

	//
	// A unique identifier of an eBay order. This field will accept an eBay-generated
	// <b>OrderID</b> value or an <b>OrderLineItemID</b> value,
	// which is a concatenation of <b>ItemID</b> and <b>TransactionID</b>
	// with a hyphen separating these two IDs.
	// <br><br>
	// If an <b>orderId</b> value is specified, any return filed against
	// this order is retrieved. It is possible that multiple returns can be retrieved
	// if the order has multiple line items, and the buyer filed a return against more
	// than one of these order line items.
	//
	OrderId string `xml:"orderId,omitempty"`

	//
	// Container used to restrict results to returns created within a specified date
	// range. The specified date range is inclusive. The maximum date range that can be
	// specified with this filter is 90 days. Returns with creation dates dating back
	// more than 18 months cannot be retrieved. To retrieve returns for a period longer
	// than 90 days, multiple <b>getUserReturns</b> calls must be made using
	// this filter and specifying different date ranges in each subsequent call.
	// <br><br>
	// If more than one filter type is used in one call, boolean AND logic is applied to the
	// result set.
	//
	CreationDateRangeFilter *DateRangeFilterType `xml:"creationDateRangeFilter,omitempty"`

	//
	// Container consisting of one or more <b>ReturnStatus</b> filters. If one
	// or more <b>ReturnStatus</b> filters are used, results are restricted to
	// returns in the specified states. If return status filtering is not used, returns
	// in all states are retrieved. The <b>ReturnStatusFilter</b>
	// container uses Boolean OR logic, which means that all returns matching the
	// specified states are retrieved.
	// <br><br>
	// If more than one filter type is used in one call, boolean AND logic is applied to the
	// result set.
	//
	ReturnStatusFilter *ReturnStatusFilterType `xml:"ReturnStatusFilter,omitempty"`

	//
	// Container used to retrieve all returns related to a specific eBay member, who is
	// identified by role and either by user ID or login name or both. This other user
	// must be on the other side of one or more returns from the calling user.
	// <br><br>
	// If more than one filter type is used in one call, boolean AND logic is applied to the
	// result set.
	//
	OtherUserFilter *UserFilterType `xml:"otherUserFilter,omitempty"`

	//
	// Container used to control the pagination of the result set, including the number of
	// returns to retrieve per page and the page number you want to retrieve in the output.
	// Pagination is typically used when the result set is expected to be large. The caller
	// can then use subsequent <b>getUserReturns</b> calls to retrieve results
	// page by page by incrementing the <b>pageNumber</b> value in the request
	// each time. The caller will know the total number of pages that need to be retrieved
	// by looking at the <b>paginationOutput.totalPages</b> value in the
	// response.
	// <br><br>
	// If the <b>paginationInput</b> container is not used, all returns
	// matching the filter criteria are retrieved and displayed on one "page" of the
	// response.
	//
	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`

	//
	// This field is used to sort returns in the response based on either return filing
	// date, estimated refund amount, refund due date, or buyer login name. If this field is
	// not used, returns are sorted by filing date.
	//
	SortType *ReturnSortType `xml:"sortType,omitempty"`

	//
	// This field is used to sort returns in the response in descending or ascending
	// order. So, if <b>FilingDate</b> is the <b>sortType</b> being
	// used, and <b>sortOrderType</b> is set to <b>Descending</b>,
	// returns are sorted in the response from the most recent filing date to the
	// oldest filing date. <b>Descending</b> is the default value, so here is
	// how the results will appear for each <b>sortType</b>:
	// <ul>
	// <li><b>BuyerLoginName</b>: Results are sorted based on name from Z to A</li>
	// <li><b>EstimatedAmount</b>: Results are sorted based on dollar amount from highest to lowest value</li>
	// <li><b>FilingDate</b>: Results are sorted based on filing date from most recent to oldest</li>
	// <li><b>RefundDueDate</b>: Results are sorted based on the date a refund is due to the seller from a date further in the future to a date less further in the future</li>
	// </ul>
	//
	SortOrderType *ReturnSortOrderType `xml:"sortOrderType,omitempty"`
}

type GetUserReturnsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services getUserReturnsResponse"`

	*BaseResponse

	//
	// Container consisting of high-level information for each return matching the
	// input criteria. This information includes the creation and modification dates for the
	// return, the reason for the return, item information, response date, and the
	// current status of the return.
	//
	Returns []*ReturnSummaryType `xml:"returns,omitempty"`

	//
	// Pagination container consisting of fields that indicate the total number
	// of pages and returns that match the input criteria, the number of returns per
	// page, and the current page number being viewed. The <b>paginationOutput</b>
	// container is always returned even if pagination values are not specified in the
	// request.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`
}

type UserFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services UserFilterType"`

	//
	// The eBay user ID for the other party involved in the return. Either a <b>userId</b>
	// or a <b>userLoginName</b> value must be specified in the <b>otherUserFilter</b>
	// container.
	//
	UserId string `xml:"userId,omitempty"`

	//
	// The eBay user login name for the other party involved in the return. Either a <b>userId</b>
	// or a <b>userLoginName</b> value must be specified in the <b>otherUserFilter</b>
	// container.
	//
	UserLoginName string `xml:"userLoginName,omitempty"`

	//
	// The role (such as buyer or seller) of the other party involved in the return. This
	// field is required if the <b>otherUserFilter</b> container is used.
	//
	Role *UserFilterRoleType `xml:"role,omitempty"`
}

type ReturnIdType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnIdType"`

	//
	// This string value is the unique identifier for a return, and is returned in the
	// responses of <b>getUserReturns</b> and <b>getReturnDetail</b>.
	// For <b>getReturnDetail</b>, <b>getActivityOptions</b>,
	// <b>issueRefund</b>, <b>provideSellerInfo</b>, <b>provideTrackingInfo</b>, and <b>setItemAsReceived</b>, a <b>ReturnId</b> value
	// is a required input field.
	//
	Id string `xml:"id,omitempty"`
}

type GetReturnDetailRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services getReturnDetailRequest"`

	*BaseRequest

	//
	// Container consisting of the unique identifier for a return. A return ID value is
	// the only input parameter for <b>getReturnDetail</b>, and is required.
	// Return ID values are returned in the <b>ReturnId.id</b> field of each
	// <b>ReturnSummary</b> container returned in the
	// <b>getUserReturns</b> response.
	//
	ReturnId *ReturnIdType `xml:"ReturnId,omitempty"`
}

type GetReturnDetailResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services getReturnDetailResponse"`

	*BaseResponse

	//
	// Container consisting of high-level information for the return matching the
	// return ID specified in the request. This information includes the creation and
	// modification dates for the return, the estimated refund amount, the reason for
	// the return, item information, response date, and the current status of the return.
	//
	ReturnSummary *ReturnSummaryType `xml:"ReturnSummary,omitempty"`

	//
	// Container consisting of detailed, dynamic information for the return matching
	// the return ID specified in the request. This information includes
	// the return status, return activity log, returned item status, return
	// shipping information (including an RMA if applicable), refund details, and eBay Buyer
	// Protection case information (if applicable).
	//
	ReturnDetail *ReturnDetailType `xml:"ReturnDetail,omitempty"`
}

type GetActivityOptionsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services GetActivityOptionsRequest"`

	*BaseRequest

	//
	// Container consisting of the unique identifier for a return. A return ID value is the only input parameter for <b>getActivityOptions</b>, and is required. Return ID values are returned in the <b>ReturnId.id</b> field of each
	// <b>ReturnSummary</b> container returned in the
	// <b>getUserReturns</b> response.
	//
	ReturnId *ReturnIdType `xml:"ReturnId,omitempty"`
}

type GetActivityOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services GetActivityOptionsResponse"`

	*BaseResponse

	//
	// The returned value indicates the next possible action that a seller can take to
	// resolve a return. If <b>ISSUE_REFUND</b> is returned, the
	// next logical step would be to call <b>issueRefund</b>. If
	// <b>PROVIDE_SELLER_INFO</b> is returned, the next logical step would be
	// to call <b>provideSellerInfo</b>. The value that is returned is dependent on
	// the status of the return.
	//
	ActivityOptions []*ActivityOptionType `xml:"activityOptions,omitempty"`
}

type IssueRefundRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services IssueRefundRequest"`

	*BaseRequest

	//
	// Container consisting of the unique identifier for a return. A return ID value is
	// required and the seller should take all precautions to make sure this value is
	// correct before making the call. Return ID values are returned in the <b>ReturnId.id</b>
	// field of each <b>ReturnSummary</b> container returned in the
	// <b>getUserReturns</b> response.
	//
	ReturnId *ReturnIdType `xml:"ReturnId,omitempty"`

	//
	// Container consisting of details related to the type and amount of the refund to
	// the buyer.
	//
	RefundDetail *RefundDetailType `xml:"refundDetail,omitempty"`

	//
	// In this optional field, the seller can include a message to the buyer regarding the
	// refund.
	//
	Comments string `xml:"comments,omitempty"`
}

type IssueRefundResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services IssueRefundResponse"`

	*BaseResponse

	//
	// The returned value indicates the result of the attempted refund. The three possible
	// values are 'SUCCESS', 'FAILED', or 'PENDING'.
	//
	RefundStatus *RefundStatusType `xml:"RefundStatus,omitempty"`
}

type ProvideSellerInfoRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ProvideSellerInfoRequest"`

	*BaseRequest

	//
	// Container consisting of the unique identifier for a return. A return ID value is
	// required and the seller should take all precautions to make sure this value and the
	// Return Merchandise Authorization number match before making the call. Return ID values
	// are returned in the <b>ReturnId.id</b> field of each <b>ReturnSummary</b>
	// container returned in the <b>getUserReturns</b> response.
	//
	ReturnId *ReturnIdType `xml:"ReturnId,omitempty"`

	//
	// The Return Merchandise Authorization number associated with the item to be returned.
	// An RMA number is a unique identifier that is provided by a manufacturer and
	// authorizes the return of an item.
	//
	ReturnMerchandiseAuthorization string `xml:"returnMerchandiseAuthorization,omitempty"`

	//
	// This optional container allows the seller to provide an alternative return shipping address to
	// the buyer. If not provided, the seller's primary return address on record is used as
	// the return address.
	//
	ReturnAddress *Address `xml:"returnAddress,omitempty"`
}

type ProvideSellerInfoResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ProvideSellerInfoResponse"`

	*BaseResponse
}

type ProvideTrackingInfoRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ProvideTrackingInfoRequest"`

	*BaseRequest

	//
	// Container consisting of the unique identifier for a return case. A return ID value is
	// required and the seller should take all precautions to make sure this value and the
	// shipping tracking number match before making the call. Return IDs
	// are returned in the <b>ReturnId.id</b> field of each <b>ReturnSummary</b>
	// container returned in the <b>getUserReturns</b> response.
	//
	ReturnId *ReturnIdType `xml:"ReturnId,omitempty"`

	//
	// The tracking number assigned by the shipping carrier to the item shipment. This value should be passed in without hyphens or spaces. The seller is responsible for the accuracy of this value, as eBay can only validate that the format is consistent with the format that is used by the specified shipping carrier.
	//
	TrackingNumber string `xml:"trackingNumber,omitempty"`

	//
	// The shipping carrier that is used to ship the item, such as 'FedEx', 'UPS', or 'USPS'.
	//
	CarrierUsed string `xml:"carrierUsed,omitempty"`

	//
	// This field is optional and can be used to provide additional information about the shipment and/or the status of the return.
	//
	Comments string `xml:"comments,omitempty"`
}

type ProvideTrackingInfoResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ProvideTrackingInfoResponse"`

	*BaseResponse

	//
	// This field indicates the status of the shipment identified by the tracking number in the request.
	//
	DeliveryStatus *TrackingStatusType `xml:"deliveryStatus,omitempty"`
}

type SetItemAsReceivedRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services SetItemAsReceivedRequest"`

	*BaseRequest

	//
	// Container consisting of the unique identifier for a return. The <b>ReturnId.id</b> value is
	// required and will indicate the eBay-Managed return that is being marked as received. Return IDs
	// are returned in the <b>ReturnId.id</b> field of each <b>ReturnSummary</b>
	// container returned in the <b>getUserReturns</b> response.
	//
	ReturnId *ReturnIdType `xml:"ReturnId,omitempty"`
}

type SetItemAsReceivedResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services SetItemAsReceivedResponse"`

	*BaseResponse
}

type GetReturnMetadataRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services GetReturnMetadataRequest"`

	*BaseRequest

	//
	// This optional, repeatable filter allows the seller to control which return metadata
	// is retrieved in the response. If no filter is used, all return metadata is retrieved in the
	// response.
	//
	MetadataEntryCode []*MetadataCodeType `xml:"metadataEntryCode,omitempty"`
}

type GetReturnMetadataResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services GetReturnMetadataResponse"`

	*BaseResponse

	//
	// Container consisting of a return metadata type and value. The return metadata that
	// is retrieved is dependent on the <b>metadataEntryCode</b> value(s)
	// that are passed in the request. If no <b>metadataEntryCode</b> value(s)
	// are passed in the request, all return metadata is retrieved.
	//
	MetadataCodeValues []*MetaDataCodeResultType `xml:"metadataCodeValues,omitempty"`
}

type ItemFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ItemFilterType"`

	//
	// The unique identifier for an eBay listing. If specified, all returns filed
	// against any of this listing's order line items are retrieved.
	// <br><br>
	// An <b>itemId</b> value is required if the <b>itemFilter</b>
	// container is used. If a <b>transactionId</b> value is used to identify a
	// specific eBay order line item, that <b>transactionId</b> value must be
	// associated with the <b>itemId</b> value or an error occurs.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// The unique identifier for an eBay order line item. If a <b>transactionId</b>
	// value is specified, any return filed against this order line item is retrieved. The
	// <b>transactionId</b> value must be associated with the
	// <b>itemId</b> value or an error occurs.
	//
	TransactionId string `xml:"transactionId,omitempty"`
}

type DateRangeFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services DateRangeFilterType"`

	//
	// The starting date for the date range. The <b>fromDate</b> must be older than
	// the <b>toDate</b>, and it cannot be set back more than 18 months in the past.
	// This field is required if the <b>dateRangeFilter</b> container is used.
	// <br><br>
	// If more than one filter type is used in one call, boolean AND logic is applied to the
	// result set.
	//
	FromDate time.Time `xml:"fromDate,omitempty"`

	//
	// The ending date for the date range. The <b>toDate</b> must be
	// more recent than the <b>fromDate</b>. This field is optional. If
	// it is omitted, all returns created from the <b>fromDate</b> up to
	// the present (system date) are returned, unless the range specified by the
	// <b>fromDate</b> and the present date is greater than 90 days, in
	// which case the <b>toDate</b> defaults to 90 days forward from the
	// <b>fromDate</b>.
	//
	ToDate time.Time `xml:"toDate,omitempty"`
}

type ReturnStatusFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnStatusFilterType"`

	//
	// To retrieve returns in a specific state (such as open, closed, item shipped, etc.),
	// pass in a <b>ReturnStatusInputType</b> value. At least one <b>ReturnStatus</b>
	// field is required if the <b>ReturnStatusFilter</b> container is used, and
	// multiple <b>ReturnStatus</b> values are allowed.
	//
	ReturnStatus []*ReturnStatusInputType `xml:"ReturnStatus,omitempty"`
}

type MetaDataCodeResultType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services MetaDataCodeResultType"`

	//
	// Either <b>RETURN_REASONS</b>, <b>REFUND_DUE_UPON_ITEM_ARRIVAL</b>,
	// or <b>RMA_DUE_UPON_RETURN_START</b> is returned in this field, based on the
	// use (or omittance) of the <b>metadataEntryCode</b> field of the
	// <b>getReturnMetadata</b> request.
	//
	CodeName *MetadataCodeType `xml:"codeName,omitempty"`

	//
	// The string (token) value that appears here is associated with the <b>codeName</b>
	// value.
	// <br/><br/>
	// For <b>RETURN_REASONS</b>, values include <b>CHANGED_MY_MIND</b>,
	// <b>ARRIVED_DAMAGED</b>, and <b>NOT_AS_DESCRIBED</b>. These
	// values are dependent on the return reason the buyer selects when the return is opened.
	// <br/><br/>
	// For <b>REFUND_DUE_UPON_ITEM_ARRIVAL</b>, the value indicates the maximum number
	// of business days a seller has to issue a refund to the buyer after the seller receives the returned item.
	// <br/><br/>
	// For <b>RMA_DUE_UPON_RETURN_START</b>, the value indicates the maximum number of
	// business days a seller has to provide a Return Merchandise Authorization number (if an RMA is
	// requested) to the buyer once a return is opened.
	//
	Value []string `xml:"value,omitempty"`
}

type ReturnArrayType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnArrayType"`

	//
	// Container consisting of high-level information for a return. A <b>ReturnSummary</b>
	// containerg is returned in the <b>getUserReturns</b> request for each return
	// matching the input criteria. This information includes the creation and modification
	// dates for the return, the estimated refund amount, the reason for the return, item
	// information, response date, and the current status of the return.
	//
	ReturnSummary []*ReturnSummaryType `xml:"ReturnSummary,omitempty"`
}

type ReturnResponseDueType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnResponseDueType"`

	//
	// Container that identifies the party whose response is due. The party is identified by
	// eBay user ID and role (BUYER or SELLER).
	//
	Party *ReturnUserType `xml:"party,omitempty"`

	//
	// This date indicates the due date of the party's response.
	//
	RespondByDate time.Time `xml:"respondByDate,omitempty"`
}

type ReturnSummaryType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnSummaryType"`

	//
	// Container consisting of the unique identifier for a return. Return ID values
	// are returned in the <b>ReturnId.id</b> field of each <b>ReturnSummary</b>
	// container returned in the <b>getUserReturns</b> and <b>getReturnDetail</b>
	// calls.
	//
	ReturnId *ReturnIdType `xml:"ReturnId,omitempty"`

	//
	// This field indicates the return type. Through the Return Center, the buyer selects whether he/she wants to be refunded for the purchase or wants a replacement item.
	//
	ReturnType *ReturnType `xml:"ReturnType,omitempty"`

	//
	// Container that identifies the other party involved in the return. The party is
	// identified by eBay user ID and role (BUYER or SELLER).
	//
	OtherParty *ReturnUserType `xml:"otherParty,omitempty"`

	//
	// Container consisting of details on the item being returned and the return reason.
	//
	ReturnRequest *ReturnRequestType `xml:"returnRequest,omitempty"`

	//
	// This field indicates the current status of the return. This value will often give
	// the seller a good idea about the next step to take in the return.
	//
	Status *ReturnStatusType `xml:"status,omitempty"`

	//
	// This container consists of the party whose response is due and the due date of that response.
	// This container is only returned in the requests of the <b>getUserReturns</b>
	// and <b>getReturnDetail</b> calls if a response is due from the seller or
	// other party involved in the return.
	//
	ResponseDue *ReturnResponseDueType `xml:"responseDue,omitempty"`

	//
	// This date indicates the date on which the return was created.
	//
	CreationDate time.Time `xml:"creationDate,omitempty"`

	//
	// This date indicates the date on which the return was last modified.
	//
	LastModifiedDate time.Time `xml:"lastModifiedDate,omitempty"`
}

type ReturnUserType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnUserType"`

	//
	// The eBay user ID for the party involved in the return.
	//
	UserId string `xml:"userId,omitempty"`

	//
	// The role (such as buyer or seller) of the party involved in the return.
	//
	Role *ReturnUserRoleType `xml:"role,omitempty"`
}

type ReturnReasonType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnReasonType"`

	*EnumerationDetailType
}

type ReturnItemType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnItemType"`

	//
	// The unique identifier for an eBay listing.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// The unique identifier for an eBay order line item.
	//
	TransactionId string `xml:"transactionId,omitempty"`

	//
	// This value indicates the quantity of items to be returned. This value is usually
	// '1' unless multiple identical items were purchased by the buyer.
	//
	ReturnQuantity int32 `xml:"returnQuantity,omitempty"`
}

type Amount struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services Amount"`

	Value float64

	//
	// This attribute identifies the currency in which the monetary amount is
	// specified.
	//
	CurrencyId string `xml:"currencyId,attr,omitempty"`
}

type TotalRefundAmountType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services TotalRefundAmountType"`

	//
	// This field contains the estimated refund amount for the return. The estimated refund amount is based on the subtotal value of the order line item.
	//
	EstimatedRefundAmount *Amount `xml:"estimatedRefundAmount,omitempty"`

	//
	// This field contains the actual refund amount for the return. This value reads '0.0'
	// until a refund is actually issued by the seller to the buyer.
	//
	ActualRefundAmount *Amount `xml:"actualRefundAmount,omitempty"`
}

type ReturnRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnRequestType"`

	//
	// Container consisting of the eBay Item ID, the Transaction ID, and quantity of the
	// item being returned to the seller. The <b>returnItem</b> container is
	// returned in the <b>getUserReturns</b> and <b>getReturnDetail</b>
	// calls.
	//
	ReturnItem []*ReturnItemType `xml:"returnItem,omitempty"`

	//
	// This value indicates the buyer's reason for returning an item. Possible values include
	// I_DONT_WANT_IT (buyer remorse) and SNAD (item Significantly Not As Described).
	//
	ReturnReason *ReturnReasonType `xml:"returnReason,omitempty"`

	//
	// This field contains any comments posted by the buyer upon opening the return.
	// For a SNAD case, the buyer might state the discrepancies between the actual item received
	// and the item described in the listing.
	//
	Comments string `xml:"comments,omitempty"`
}

type ReturnDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnDetailType"`

	//
	// Unique identifier of the eBay site (such as 'EBAY-US') where the order occurred.
	//
	GlobalId string `xml:"globalId,omitempty"`

	//
	// Repeatable container consisting of details related to each activity in a return.
	// A <b>returnHistory</b> node is returned for each activity that has occurred
	// with the return, and each node contains the type of activity, the timestamp for the
	// activity, the initiator of the activity, and any notes related to the return. Additionally,
	// if the activity is related to a money movement transaction, a <b>ReturnDetail.returnHistory.attributes</b>
	// container is returned providing more information on the transaction.
	//
	ReturnHistory []*ReturnResponseHistoryType `xml:"returnHistory,omitempty"`

	//
	// Container consisting of details and values related to estimated, actual, and itemized
	// refunds to the buyer.
	//
	RefundInfo *RefundInfoType `xml:"refundInfo,omitempty"`

	//
	// Container consisting of flags which indicate whether the seller is willing to
	// provide the buyer a Return Merchandise Authorization number (if requested), and if the
	// seller accepts returns to more than one address. These return policy preferences are set
	// by the seller in the Return Center. This container will only be returned if at least one
	// of the flags is turned on.
	//
	ReturnPolicy *ReturnPolicyInfoType `xml:"returnPolicy,omitempty"`

	//
	// <b>This field is deprecated</b>. Please see the <b>shipmentInfo</b> container to obtain both seller and buyer shipping information.
	//
	BuyerReturnShipment *ShipmentType `xml:"buyerReturnShipment,omitempty"`

	//
	// Container consisting of details related to the buyer and/or seller shipments.
	// Information in the <b>shipmentInfo</b> container includes the destination shipping address on record, the expected delivery date, the shipping carrier used, the tracking number, and the delivery status.
	//
	ShipmentInfo []*ShipmentType `xml:"shipmentInfo,omitempty"`

	//
	// Container consisting of the eBay Buyer Protection case ID and case type. This container
	// is only returned if a return is escalated to the eBay Buyer Protection system and
	// accepted as an eBP case.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`
}

type CaseIdType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services CaseIdType"`

	//
	// Unique identifier of an eBay Buyer Protection case.
	//
	Id string `xml:"id,omitempty"`

	//
	// This value indicates the type of eBay Buyer Protection case. For an escalated return
	// case, the value will most likely be EBP_SNAD (item Significantly Not As Described).
	//
	Type_ *CaseType `xml:"type,omitempty"`
}

type RefundInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services RefundInfoType"`

	//
	// This field indicates the refund due date, and will only appear if a refund to the
	// buyer has not been issued by the seller.
	//
	RefundDue time.Time `xml:"refundDue,omitempty"`

	//
	// Container consisting of the estimated amount of a seller's refund to the buyer. The
	// <b>estimatedRefundDetail</b> container will contain one <b>itemizedRefund</b>
	// container for each refund fee type due to the buyer (such as purchase price or
	// original shipping). Similarly, if the seller elects to issue additional refund(s)
	// beyond what is required, one <b>itemizedOptionalRefund</b>
	// container will be present for each optional refund issued to the buyer.
	//
	EstimatedRefundDetail *EstimatedRefundDetailType `xml:"estimatedRefundDetail,omitempty"`

	//
	// Container consisting of the actual amount of a seller's refund to the buyer. The
	// <b>actualRefundDetail</b> container will contain one <b>itemizedRefund</b>
	// container for each refund fee type issued to the buyer (such as purchase price or
	// original shipping). Similarly, one <b>itemizedOptionalRefund</b>
	// container will be present for each optional refund fee type that a seller can issue
	// to a buyer.
	//
	ActualRefundDetail *ActualRefundDetailType `xml:"actualRefundDetail,omitempty"`
}

type ReturnPolicyInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnPolicyInfoType"`

	//
	// This field indicates that the seller has agreed to provide a Return Merchandise
	// Authorization (RMA) number to buyers upon request. A seller can provide an RMA to the
	// buyer by using the <b>returnMerchandiseAuthorization</b> field of the
	// <b>provideSellerInfo</b> call. A seller will use the
	// <b>provideSellerInfo</b> call to provide an RMA to the buyer when the
	// status of the return is 'WAITING_FOR_SELLER_INFO'. This field is only returned if
	// 'true'.
	//
	OptedForRMA bool `xml:"optedForRMA,omitempty"`

	//
	// This field indicates that the seller has agreed to accept returns at multiple return
	// addresses. A seller can provide an alternative return address to the buyer by using the
	// <b>returnAddress</b> container of the <b>provideSellerInfo</b>
	// call. A seller will use the <b>provideSellerInfo</b> call to provide an
	// alternative return address to the buyer when the status of the return is
	// 'WAITING_FOR_SELLER_INFO'. This field is only returned if 'true'. If the seller has
	// not agreed to accept returns at multiple return addresses, the seller's primary return
	// address in My eBay is used.
	//
	OptedForMultipleReturnAddress bool `xml:"optedForMultipleReturnAddress,omitempty"`
}

type RefundDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services RefundDetailType"`

	//
	// This dollar value indicates the total amount of actual refunds issued by the seller to
	// the buyer. This is a dynamic value while the return is open. The <b>refundDetail.totalAmount</b>
	// value is required in the <b>issueRefund</b> call and it should match the
	// <b>refundDetail.itemizedRefundAmount</b> value (if only one refund type is
	// being issued by the seller) or the composite value of multiple <b>refundDetail.itemizedRefundAmount</b>
	// values (if multiple refund types are being issued by the seller).
	//
	TotalAmount *Amount `xml:"totalAmount,omitempty"`

	//
	// Container used to track estimated and actual individual refund amounts by fee type (such as
	// purchase price, original shipping, or restocking fee). At least one
	// <b>itemizedRefund</b> container is required when the seller is issuing a
	// refund to the buyer through the <b>issueRefund</b> call.
	//
	ItemizedRefund []*ItemizedRefundDetailType `xml:"itemizedRefund,omitempty"`
}

type ActualRefundDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ActualRefundDetailType"`

	//
	// Container consisting of the total refund amount awarded to the buyer and one or more
	// <b>itemizedRefund</b> containers. One <b>itemizedRefund</b> container
	// will be present for each refund fee type (such as purchase price or original shipping).
	// This container is only returned if a refund has been issued by the seller.
	//
	ActualRefund *RefundDetailType `xml:"actualRefund,omitempty"`

	//
	// This value indicates the result of the seller's refund attempt. The two valid
	// values are <b>SUCCESS</b> or <b>FAILED</b>. <b>PENDING</b>
	// is for future use.
	//
	RefundStatus *RefundStatusType `xml:"refundStatus,omitempty"`

	//
	// This date indicates the date of the seller's refund to the buyer. This field is
	// only returned if a refund has been issued by the seller.
	//
	RefundDate time.Time `xml:"refundDate,omitempty"`
}

type EstimatedRefundDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services EstimatedRefundDetailType"`

	//
	// Container consisting of the total estimated refund amount due to the buyer and one or more
	// <b>itemizedRefund</b> containers. One <b>itemizedRefund</b>
	// container will be present for each refund fee type (such as purchase price or original
	// shipping).
	//
	EstimatedRefund *RefundDetailType `xml:"estimatedRefund,omitempty"`

	//
	// One <b>itemizedOptionalRefund</b> container will be present for each optional
	// refund fee type that a seller can issue to a buyer.
	//
	ItemizedOptionalRefund []*ItemizedRefundDetailType `xml:"itemizedOptionalRefund,omitempty"`
}

type ItemizedRefundDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ItemizedRefundDetailType"`

	//
	// This value indicates the type of refund fee, such as purchase price or original
	// shipping.
	//
	RefundFeeType *RefundFeeType `xml:"refundFeeType,omitempty"`

	//
	// This dollar amount indicates the amount of the corresponding refund fee type.
	//
	Amount *Amount `xml:"amount,omitempty"`
}

type ReturnResponseHistoryType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ReturnResponseHistoryType"`

	//
	// This field is returned if the party initiating the action included a note. The text
	// in this field will mirror any text input into the text box in the Return Management
	// Center.
	//
	Note string `xml:"note,omitempty"`

	//
	// Container that identifies the initiator of the action by eBay user ID and role in the
	// return.
	//
	Author *ReturnUserType `xml:"author,omitempty"`

	//
	// This container consists of the enumeration ID value and description of the return
	// activity. Note that the <b>content</b> element of this container is reserved
	// for future use.
	//
	ActivityDetail *ActivityDetailType `xml:"activityDetail,omitempty"`

	//
	// The timestamp of the return activity.
	//
	CreationDate time.Time `xml:"creationDate,omitempty"`
}

type ShipmentType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ShipmentType"`

	//
	// This value indicates the current shipping status of the item.
	//
	ShipmentStatus *ShipmentStatusType `xml:"shipmentStatus,omitempty"`

	//
	// This value is the tracking number used by the shipping carrier.
	//
	TrackingNumber string `xml:"trackingNumber,omitempty"`

	//
	// This value is the name of the shipping carrier.
	//
	CarrierUsed string `xml:"carrierUsed,omitempty"`

	//
	// This value indicates the actual date of delivery for the returned item. This field is
	// only returned after the seller has received the returned item from the buyer.
	//
	DeliveryDate time.Time `xml:"deliveryDate,omitempty"`

	//
	// This dollar value indicates the total shipping costs incurred by the buyer to ship the
	// returned item.
	//
	ShippingCost *Amount `xml:"shippingCost,omitempty"`

	//
	// This container consists of the seller's primary return address in My eBay, or the return
	// address provided by the seller through the <b>provideSellerInfo</b> call.
	//
	ShippingAddress *Address `xml:"shippingAddress,omitempty"`

	//
	// This value is the Return Merchandize Authorization (RMA) number associated with the item.
	// The RMA number for an item is expected to be provided by the seller to the buyer upon
	// request. This field is only returned if the buyer requests an RMA number and it is
	// provided by the seller.
	//
	ReturnMerchandiseAuthorization string `xml:"returnMerchandiseAuthorization,omitempty"`

	//
	// This date is the earliest date that the seller can expect to receive a returned item from
	// the buyer.
	//
	MinEstDeliveryDate time.Time `xml:"minEstDeliveryDate,omitempty"`

	//
	// This date is the latest date that the seller can expect to receive a returned item from
	// the buyer.
	//
	MaxEstDeliveryDate time.Time `xml:"maxEstDeliveryDate,omitempty"`
}

type Address struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services Address"`

	//
	// The name on record for the seller's shipping address.
	//
	Name string `xml:"name,omitempty"`

	//
	// The street address on record for the seller's shipping address. If a seller is updating a
	// shipping address using the <b>provideSellerInfo</b> call, this field is required.
	//
	Street1 string `xml:"street1,omitempty"`

	//
	// The second line of the street address on record for the seller's shipping address.
	// This field is not always used, but it should be provided (if applicable) if a seller is
	// updating a shipping address using the <b>provideSellerInfo</b> call.
	//
	Street2 string `xml:"street2,omitempty"`

	//
	// The city on record for the seller's shipping address. If a seller is updating a
	// shipping address using the <b>provideSellerInfo</b> call, this field is required.
	//
	City string `xml:"city,omitempty"`

	//
	// The county on record for the seller's shipping address. This field is not always used,
	// but it should be provided (if applicable) if a seller is updating a shipping address
	// using the <b>provideSellerInfo</b> call.
	//
	County string `xml:"county,omitempty"`

	//
	// The state or province on record for the seller's shipping address. If a seller is
	// updating a shipping address using the <b>provideSellerInfo</b> call, this field is
	// required.
	//
	StateOrProvince string `xml:"stateOrProvince,omitempty"`

	//
	// The country on record for the seller's shipping address. If a seller is updating a
	// shipping address using the <b>provideSellerInfo</b> call, this field is required.
	//
	Country string `xml:"country,omitempty"`

	//
	// The postal code on record for the seller's shipping address. If a seller is updating a
	// shipping address using the <b>provideSellerInfo</b> call, this field is required.
	//
	PostalCode string `xml:"postalCode,omitempty"`
}

type PaginationInput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services PaginationInput"`

	//
	// This integer value is used to specify the "page" of data to return in the call response.
	// The total number of result pages is determined by the total number of returns
	// (returned in <b>paginationOutput.totalEntries</b>) matching the request
	// criteria divided by the number of returns to display per page of data (specified in
	// <b>entriesPerPage</b>). This value defaults to '1' if not specified. If there
	// are multiple pages of returns (see <b>paginationOutput.totalPages</b>)
	// to view, multiple <b>getUserReturns</b> calls can be made to view all returns,
	// and the <b>pageNumber</b> value can be incremented by 1 in each
	// subsequent call.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// This integer value is used to specify the maximum number of returns to display in a
	// single "page" of data. This value, along with the number of returns that match the
	// input criteria, will determine the total pages (see <b>paginationOutput.totalPages</b>)
	// in the result set. This value defaults to '200' (the maximum allowed value) if not
	// specified.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`
}

type PaginationOutput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services PaginationOutput"`

	//
	// This integer value indicate the "page" number of the results set. The total number of
	// result pages is determined by the total number of returns (returned in <b>paginationOutput.totalEntries</b>)
	// matching the request criteria divided by the number of returns to display per page
	// of data (indicated in <b>paginationOutput.entriesPerPage</b>). If there are
	// multiple pages of returns (see <b>paginationOutput.totalPages</b>) to
	// view, multiple <b>getUserReturns</b> calls can be made to view all returns,
	// and the <b>paginationInput.pageNumber</b> value can be incremented by
	// 1 in each subsequent call.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// This integer value indicates the maximum number of returns to return in a single
	// "page" of data. This value, along with the number of returns that match the input
	// criteria, determines the total pages (see <b>paginationOutput.totalPages</b>)
	// in the result set.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`

	//
	// This value indicates the total number of result pages that exist based on the current
	// input criteria, including the <b>paginationInput</b> fields. If
	// <b>totalPages</b> is more than 1, multiple <b>getUserReturns</b>
	// calls must be made to view all result pages, with the <b>paginationInput.pageNumber</b>
	// value being incremented by 1 in each subsequent call.
	//
	TotalPages int32 `xml:"totalPages,omitempty"`

	//
	// This value indicates the total number of returns that exist based on the current
	// input criteria. Once this value is known, the caller may want to considering tweaking the
	// <b>paginationInput</b> fields in the <b>getUserReturns</b>
	// request and making another call.
	//
	TotalEntries int32 `xml:"totalEntries,omitempty"`
}

type EnumerationDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services EnumerationDetailType"`

	//
	// Unique identifier of the enumeration value.
	//
	Code string `xml:"code,omitempty"`

	//
	// A description of the enumeration value.
	//
	Description string `xml:"description,omitempty"`

	//
	// Reserved for future use.
	//
	Content string `xml:"content,omitempty"`
}

type BaseActivityOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services BaseActivityOptionType"`

	//
	// This field indicates the action that the buyer is seeking from the seller. This field is
	// only returned for the activity option if it is 'true'.
	// <br/><br/>
	// Only one activity option returned to a seller in the <b>getActivityOptions</b>
	// response can be the buyer's preference. In other words, the <b>buyerPreference</b>
	// field can only be 'true' for one activity option returned to the seller in the response.
	// Typically, the <b>buyerPreference</b> field is returned 'true' for the
	// <b>IssueRefundOptionType</b> field, but if the buyer is requesting an RMA
	// number, the <b>buyerPreference</b> field is returned 'true' for the
	// <b>ProvideSellerInfoOptionType</b> field instead.
	//
	BuyerPreference bool `xml:"buyerPreference,omitempty"`
}

type IssueRefundOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services IssueRefundOptionType"`

	*BaseActivityOptionType

	//
	// This integer value indicates the maximum number of business days that a seller has
	// to issue a refund to the buyer once the seller has received the returned item.
	//
	DaysToRefundBuyer int32 `xml:"daysToRefundBuyer,omitempty"`
}

type ProvideSellerInfoOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ProvideSellerInfoOptionType"`

	*BaseActivityOptionType
}

type ActivityOptionListType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ActivityOptionListType"`

	//
	// This value is returned in the <b>activityOptions</b> field if the seller's
	// next action is to issue a refund to the buyer. A selller can issue a refund to a buyer by
	// using the <b>issueRefund</b> call.
	//
	IssueRefund *IssueRefundOptionType `xml:"issueRefund,omitempty"`

	//
	// This value is returned in the <b>activityOptions</b> field if the seller's
	// next action is to provide an RMA to the buyer. A selller can provide an RMA (Return
	// Merchandise Authorization) number to a buyer by using the <b>provideSellerInfo</b>
	// call.
	//
	ProvideSellerInfo *ProvideSellerInfoOptionType `xml:"provideSellerInfo,omitempty"`
}

type ActivityDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services ActivityDetailType"`

	*EnumerationDetailType
}

type NotificationEventType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/returns/v1/services NotificationEventType"`

	//
	// One of the eight possible Platform Notification events for the Return
	// Management API. See also http://developer.ebay.com/devzone/xml/docs/reference/ebay/SetNotificationPreferences.html#Request.EventProperty.EventType
	//
	NotificationEventName *NotificationEventNameType `xml:"NotificationEventName,omitempty"`

	//
	// The user ID of the eBay user subscribed to Platform Notifications.
	//
	RecipientUserID string `xml:"RecipientUserID,omitempty"`

	//
	// Echo back of user data. See also http://developer.ebay.com/devzone/xml/docs/reference/ebay/SetNotificationPreferences.html#Request.UserData.ExternalUserData
	//
	ExternalUserData string `xml:"ExternalUserData,omitempty"`

	//
	// The unique identifier of an eBay Return.
	//
	ReturnId string `xml:"ReturnId,omitempty"`

	//
	// Timestamp for the creation of the Platform Notification (in UTC).
	//
	CreationDate time.Time `xml:"CreationDate,omitempty"`

	//
	// The eBay user ID of the other party involved in the return.
	//
	OtherPartyId string `xml:"OtherPartyId,omitempty"`

	//
	// The other party's role in the return.
	//
	OtherPartyRole *ReturnUserRoleType `xml:"OtherPartyRole,omitempty"`

	//
	// The current return status of the item in the return.
	//
	ReturnStatus string `xml:"ReturnStatus,omitempty"`

	//
	// Global ID (such as EBAY-US) of the eBay site where the order occurred.
	//
	ReturnGlobalId string `xml:"ReturnGlobalId,omitempty"`
}

type ReturnManagementServicePort struct {
	client *gowsdl.SoapClient
}

func NewReturnManagementServicePort(url string, tls bool) *ReturnManagementServicePort {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &ReturnManagementServicePort{
		client: client,
	}
}

/*
	Get current service version.
*/
func (service *ReturnManagementServicePort) GetVersion(request *GetVersionRequest) (*GetVersionResponse, error) {
	response := &GetVersionResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Get list of Returns for an eBay member.
*/
func (service *ReturnManagementServicePort) GetUserReturns(request *GetUserReturnsRequest) (*GetUserReturnsResponse, error) {
	response := &GetUserReturnsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Gets details on a specific Return.
*/
func (service *ReturnManagementServicePort) GetReturnDetail(request *GetReturnDetailRequest) (*GetReturnDetailResponse, error) {
	response := &GetReturnDetailResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Get activity options for the current state of the Return.
*/
func (service *ReturnManagementServicePort) GetActivityOptions(request *GetActivityOptionsRequest) (*GetActivityOptionsResponse, error) {
	response := &GetActivityOptionsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Issues full refund.
*/
func (service *ReturnManagementServicePort) IssueRefund(request *IssueRefundRequest) (*IssueRefundResponse, error) {
	response := &IssueRefundResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Allow seller to provide the RMA and return address information.
*/
func (service *ReturnManagementServicePort) ProvideSellerInfo(request *ProvideSellerInfoRequest) (*ProvideSellerInfoResponse, error) {
	response := &ProvideSellerInfoResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Allows third party developers to get the details of return management system.
*/
func (service *ReturnManagementServicePort) GetReturnMetadata(request *GetReturnMetadataRequest) (*GetReturnMetadataResponse, error) {
	response := &GetReturnMetadataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Accepts the tracking info and associate the tracking info to the Return.
*/
func (service *ReturnManagementServicePort) ProvideTrackingInfo(request *ProvideTrackingInfoRequest) (*ProvideTrackingInfoResponse, error) {
	response := &ProvideTrackingInfoResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Operation to set the item as received by seller or buyer
*/
func (service *ReturnManagementServicePort) SetItemAsReceived(request *SetItemAsReceivedRequest) (*SetItemAsReceivedResponse, error) {
	response := &SetItemAsReceivedResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
