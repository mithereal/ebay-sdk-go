package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckValue string

const (

	//
	// The request was processed successfully, but
	// something occurred that may affect your
	// application or the user.
	//
	AckValueSuccess AckValue = "Success"

	//
	// The request that triggered the error was not
	// processed successfully. When a serious
	// application-level error occurs, the error is
	// returned instead of the business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was
	// processed successfully but with some warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// The request that triggered the error was
	// processed successfully but with some warnings.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type BundleStatusEnum string

const (

	//
	// Specifies that the bundle is ready to be
	// changed to active
	//
	BundleStatusEnumScheduled BundleStatusEnum = "Scheduled"

	//
	// Specifies that the bundle is active.
	//
	BundleStatusEnumActive BundleStatusEnum = "Active"

	//
	// Specifies that the bundle is no more active.
	//
	BundleStatusEnumEnded BundleStatusEnum = "Ended"

	//
	// Specifies that the bundle is disabled.
	//
	BundleStatusEnumDisabled BundleStatusEnum = "Disabled"
)

type BundleDetailEnum string

const (

	//
	// Specifies that the full bundle details should
	// be returned in the findBundles response.
	//
	BundleDetailEnumDetails BundleDetailEnum = "Details"

	//
	// Specifies that the bundle summary should be
	// returned in the findBundles response.
	//
	BundleDetailEnumSummary BundleDetailEnum = "Summary"
)

type DiscountTypeEnum string

const (

	//
	// Specifies discount type as percentage.
	//
	DiscountTypeEnumPercentage DiscountTypeEnum = "Percentage"

	//
	// Specifies discount type as a fixed amount.
	// Discount will be in the currency of the
	// original listing.
	//
	DiscountTypeEnumAmount DiscountTypeEnum = "Amount"
)

type ErrorCategory string

const (
	ErrorCategorySystem ErrorCategory = "System"

	ErrorCategoryApplication ErrorCategory = "Application"

	ErrorCategoryRequest ErrorCategory = "Request"
)

type ErrorSeverity string

const (
	ErrorSeverityError ErrorSeverity = "Error"

	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type GlobalId string

const ()

type CreateBundlesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services CreateBundlesRequest"`

	*BaseRequest

	//
	// Contains details of the Bundle to be
	// created.
	//
	Bundle []*Bundle `xml:"bundle,omitempty"`
}

type CreateBundlesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services CreateBundlesResponse"`

	*BaseResponse

	//
	// Bundle response, with bundle id if
	// successful.
	//
	BundleStatus []*BundleStatus `xml:"bundleStatus,omitempty"`
}

type BundleStatus struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services BundleStatus"`

	//
	// The name of the Bundle.
	//
	BundleName string `xml:"bundleName,omitempty"`

	//
	// A SKU (stock keeping unit) is an identifier
	// defined by a seller.
	// This is primary SKU defines, on which item
	// the configurator should be enabled.
	// All the items which matches this SKU field,
	// will be eligible for bundling, when item ids are
	// not part of bundle request.
	//
	PrimarySKU []string `xml:"primarySKU,omitempty"`

	//
	// Bundle id, for primary SKU, if bundle creation
	// is successful.
	//
	BundleID int64 `xml:"bundleID,omitempty"`

	//
	// Response status for bundle creation.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that
	// occurred when eBay processed the request.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`
}

type UpdateBundlesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services UpdateBundlesRequest"`

	*BaseRequest

	//
	// Contains details of Bundle to be updated
	//
	Bundle []*Bundle `xml:"bundle,omitempty"`
}

type UpdateBundlesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services UpdateBundlesResponse"`

	*BaseResponse

	//
	// Bundle response, with bundle id if
	// successful.
	//
	BundleStatus []*BundleStatus `xml:"bundleStatus,omitempty"`
}

type UpdateBundleStatusRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services UpdateBundleStatusRequest"`

	*BaseRequest

	//
	// Specifies the bundleID and status of the bundle to be updated.
	// Valid values for BundleStatus - SCHEDULED, ACTIVE, DISABLED
	//
	BundleStatusMap []*BundleStatusMap `xml:"bundleStatusMap,omitempty"`
}

type BundleStatusMap struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services BundleStatusMap"`

	//
	// Id of the bundle to which status will be updated.
	//
	BundleID int64 `xml:"bundleID,omitempty"`

	//
	// Specifies the bundle status that needs to be updated.
	// Only SCHEDULED, ACTIVE or DISABLED status update is
	// allowed at this time from this service.
	//
	BundleStatus *BundleStatusEnum `xml:"bundleStatus,omitempty"`
}

type UpdateBundleStatusResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services UpdateBundleStatusResponse"`

	*BaseResponse

	//
	// Bundle response, with bundle id if successful.
	//
	BundleStatus []*BundleStatus `xml:"bundleStatus,omitempty"`
}

type DeleteBundlesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services DeleteBundlesRequest"`

	*BaseRequest

	//
	// The bundle id of the bundle to delete.
	//
	BundleID []int64 `xml:"bundleID,omitempty"`
}

type DeleteBundlesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services DeleteBundlesResponse"`

	*BaseResponse

	//
	// Bundle response, with bundle id if
	// successful.
	//
	BundleStatus []*BundleStatus `xml:"bundleStatus,omitempty"`
}

type FindBundlesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services FindBundlesRequest"`

	*BaseRequest

	//
	// Specifies whether summary or full bundle
	// details needs to be retrieved.
	//
	BundleDetailSelector *BundleDetailEnum `xml:"bundleDetailSelector,omitempty"`

	//
	// Specifies the status of the bundle
	// needs to be retrieved.
	//
	FindAllByStatus *BundleStatusEnum `xml:"findAllByStatus,omitempty"`

	//
	// Specifies the primarySKU and/or bundleID
	// matching which the bundle needs to be
	// retrieved.
	//
	BundleFilter []*BundleFilter `xml:"bundleFilter,omitempty"`
}

type BundleFilter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services BundleFilter"`

	//
	// If this is set then the operation will return
	// the list of all bundles with matching PrimarySKU
	//
	PrimarySKU string `xml:"primarySKU,omitempty"`

	//
	// If this is set then the operation will return
	// the bundles details matching the BundleID.
	//
	BundleID int64 `xml:"bundleID,omitempty"`
}

type FindBundlesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services FindBundlesResponse"`

	*BaseResponse

	//
	// Object containing the details of the
	// bundle retrieved.
	//
	Bundle []*Bundle `xml:"bundle,omitempty"`
}

type GetBundlesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services GetBundlesRequest"`

	*BaseRequest

	//
	// Id of the bundle to be retireved.
	//
	BundleID []int64 `xml:"bundleID,omitempty"`
}

type GetBundlesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services GetBundlesResponse"`

	*BaseResponse

	//
	// Contains details of the Bundle retrieved
	//
	Bundle []*Bundle `xml:"bundle,omitempty"`
}

type Amount struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services Amount"`

	Value float64

	CurrencyId string `xml:"currencyId,attr,omitempty"`
}

type BaseRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services BaseRequest"`

	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type BaseResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services BaseResponse"`

	//
	// A token representing the application-level
	// acknowledgement code that indicates the
	// response status (e.g., success).
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that
	// occurred when eBay processed the request.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The version of the response payload schema.
	// Indicates the version of the schema that eBay
	// used to process the request.
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when
	// eBay processed the request.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`

	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type Discount struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services Discount"`

	//
	// Seller related product discount, for bundling
	// with primary.
	//
	DiscountAmount *Amount `xml:"discountAmount,omitempty"`

	//
	// Specifies which type of discount needs to be
	// applied on the bundling.
	//
	DiscountType *DiscountTypeEnum `xml:"discountType,omitempty"`

	//
	// Discount as percent.
	//
	DiscountPercent float64 `xml:"discountPercent,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services ErrorData"`

	ErrorId int64 `xml:"errorId,omitempty"`

	Domain string `xml:"domain,omitempty"`

	Subdomain string `xml:"subdomain,omitempty"`

	Severity *ErrorSeverity `xml:"severity,omitempty"`

	Category *ErrorCategory `xml:"category,omitempty"`

	Message string `xml:"message,omitempty"`

	ExceptionId string `xml:"exceptionId,omitempty"`

	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services ErrorMessage"`

	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services ErrorParameter"`

	Value string

	Name string `xml:"name,attr,omitempty"`
}

type ExtensionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services ExtensionType"`

	Id *PositiveInteger `xml:"id,omitempty"`

	Version string `xml:"version,omitempty"`

	ContentType string `xml:"contentType,omitempty"`

	Value string `xml:"value,omitempty"`
}

type RelatedProductGroup struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services RelatedProductGroup"`

	//
	// List of related products for a primary SKU for
	// bundling.
	//
	RelatedProduct []*RelatedProduct `xml:"relatedProduct,omitempty"`

	//
	// Specifies the Group Name as provided by
	// the Seller.
	//
	GroupName string `xml:"groupName,omitempty"`

	//
	// Specifies the order in which the group needs
	// to be displayed.
	//
	Rank int32 `xml:"rank,omitempty"`

	//
	// Specifies whether the buyer can select multiple
	// options from the Group. Displays realted SKU
	// item as radio button (single select) instead
	// of check box (multi select).
	//
	SingleRelatedSKUPurchaseOnly bool `xml:"singleRelatedSKUPurchaseOnly,omitempty"`
}

type RelatedProduct struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services RelatedProduct"`

	//
	// Seller SKU, for bundling with primary.
	//
	SKU string `xml:"SKU,omitempty"`

	//
	// Discounts on the specified related product, for
	// the bundling.
	//
	Discount *Discount `xml:"discount,omitempty"`

	//
	// Specifies the order in which the related product
	// needs to be displayed.
	//
	Rank int32 `xml:"rank,omitempty"`

	//
	// Related product title.
	//
	Title string `xml:"title,omitempty"`

	//
	// Specifies the max quantity of the related SKU purchase that the
	// Seller offers at discounted price per primary SKU purchase.
	//
	MaxQtyForSinglePrimary int32 `xml:"maxQtyForSinglePrimary,omitempty"`
}

type Bundle struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services Bundle"`

	//
	// Unique Identifier for the bundle.
	//
	BundleID int64 `xml:"bundleID,omitempty"`

	//
	// Bundle name to display in UI, maximum 50
	// characters.
	//
	BundleName string `xml:"bundleName,omitempty"`

	//
	// A SKU (stock keeping unit) is an identifier
	// defined by a seller. This is primary SKU
	// defines, on which item the
	// configurator should
	// be enabled. All the items which matches this
	// SKU
	// field, will be eligible for bundling.
	//
	PrimarySKU []string `xml:"primarySKU,omitempty"`

	//
	// Allows the user to specify the time that the
	// bundling will becomes active on eBay. To
	// schedule the start time,
	// specify a time in the
	// future in YYYY-mm-DDTHH:MM:SS format
	//
	ScheduledStartTime time.Time `xml:"scheduledStartTime,omitempty"`

	//
	// Allows the user to specify the time that the
	// bundling will becomes de-activated on eBay. To
	// schedule the
	// expiration time, specify a time in
	// the future in YYYY-mm-DDTHH:MM:SS format.
	//
	ScheduledEndTime time.Time `xml:"scheduledEndTime,omitempty"`

	RelatedProductGroup []*RelatedProductGroup `xml:"relatedProductGroup,omitempty"`

	BundleStatus *BundleStatusEnum `xml:"bundleStatus,omitempty"`

	IsoCurrencyCode int32 `xml:"isoCurrencyCode,omitempty"`

	Site *GlobalId `xml:"site,omitempty"`
}

type GetVersionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services GetVersionRequest"`

	*BaseRequest
}

type GetVersionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/sellerinventory/v1/services GetVersionResponse"`

	*BaseResponse
}

type BundleManagementServicePort struct {
	client *gowsdl.SoapClient
}

func NewBundleManagementServicePort(url string, tls bool) *BundleManagementServicePort {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &BundleManagementServicePort{
		client: client,
	}
}

func (service *BundleManagementServicePort) CreateBundles(request *CreateBundlesRequest) (*CreateBundlesResponse, error) {
	response := &CreateBundlesResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/sellerinventory/v1/services/createBundles", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *BundleManagementServicePort) FindBundles(request *FindBundlesRequest) (*FindBundlesResponse, error) {
	response := &FindBundlesResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/sellerinventory/v1/services/findBundles", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *BundleManagementServicePort) GetBundles(request *GetBundlesRequest) (*GetBundlesResponse, error) {
	response := &GetBundlesResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/sellerinventory/v1/services/getBundles", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *BundleManagementServicePort) UpdateBundles(request *UpdateBundlesRequest) (*UpdateBundlesResponse, error) {
	response := &UpdateBundlesResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/sellerinventory/v1/services/updateBundles", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *BundleManagementServicePort) UpdateBundleStatus(request *UpdateBundleStatusRequest) (*UpdateBundleStatusResponse, error) {
	response := &UpdateBundleStatusResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/sellerinventory/v1/services/updateBundleStatus", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *BundleManagementServicePort) DeleteBundles(request *DeleteBundlesRequest) (*DeleteBundlesResponse, error) {
	response := &DeleteBundlesResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/sellerinventory/v1/services/deleteBundles", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *BundleManagementServicePort) GetVersion(request *GetVersionRequest) (*GetVersionResponse, error) {
	response := &GetVersionResponse{}
	err := service.client.Call("urn:getVersion", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
