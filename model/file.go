package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckValue string

const (

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user.
	//
	AckValueSuccess AckValue = "Success"

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was processed successfully but with some
	// warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// The request that triggered the error was processed successfully but there is
	// some error in the application or data.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type ErrorSeverity string

const (

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user. For example, eBay may have changed a
	// value the user sent in. In this case, eBay returns a normal, successful
	// response and also returns the warning.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side, such as a
	// database or server outage. An application can retry the request a
	// reasonable number of times (eBay recommends twice). If the error
	// persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, such as missing or
	// invalid fields. The problem must be corrected before the request can be
	// made again. If the problem is due to something in the application (such
	// as a missing required field), the application must be changed. Once the
	// problem in the application or data is resolved, resend the corrected
	// request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, such as invalid or
	// missing data. The problem must be corrected before the request can be
	// made again. If the problem is a result of end-user data, the application
	// must alert the end-user to the problem and provide the means for the
	// end-user to correct the data. Once the problem in the data is resolved,
	// resend the request to eBay with the corrected data.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type UploadFileRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services UploadFileRequest"`

	*BaseServiceRequest

	//
	// This is an external identifier used by a service that interacts with the
	// File Transfer Service.
	// <br><br>
	// For instance, the Bulk Data Exchange Service uses a job ID as a primary
	// identifier, so, if you're using the Bulk Data Exchange Service, enter the
	// job ID as the taskReferenceId.
	//
	TaskReferenceId string `xml:"taskReferenceId,omitempty"`

	//
	// A unique ID assigned to a file by the Bulk Data Exchange service
	// when createUploadJobRequest is called.
	// <br>
	// <br>
	// Pass the fileReferenceId into a File Transfer service uploadFile call.
	// The File Transfer Service uses this identifier to
	// keep track of the files that are uploaded.
	//
	FileReferenceId string `xml:"fileReferenceId,omitempty"`

	//
	// Specifies the format of the file being uploaded.
	// <dl>
	// <dt>
	// gzip
	// </dt>
	// <dd>
	// It specifies that the file to be uploaded is in gzip format
	// </dd>
	// <dt>
	// zip
	// </dt>
	// <dd>
	// It specifies that the file to be uploaded is in zip format.
	// </dd>
	// </dl>
	//
	FileFormat string `xml:"fileFormat,omitempty"`

	//
	// The zipped report file that is encoded in Base64 Binary format and included
	// in the request according to the SOAP MTOM standard.
	//
	FileAttachment *FileAttachment `xml:"fileAttachment,omitempty"`
}

type DownloadFileRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services DownloadFileRequest"`

	*BaseServiceRequest

	//
	// This is ID is determimed by a service (or API) that interacts with the
	// File Transfer API.
	// <br><br>
	// For instance, the Bulk Data Exchange API uses a job ID as a primary
	// identifier, so, if you're using the Bulk Data Exchange API, enter the
	// job ID as the taskReferenceId.
	//
	TaskReferenceId string `xml:"taskReferenceId,omitempty"`

	//
	// A unique Id assigned to a file. For example, the Bulk Data Exchange API
	// assigns this ID to a file when startDownloadJob is called and then it
	// creates the file.
	// <br>lt;br>
	// Pass the fileReferenceId into a File Transfer service downloadFile call.
	// The File Transfer API uses this identifier to
	// keep track of the files that are downloaded.
	//
	FileReferenceId string `xml:"fileReferenceId,omitempty"`
}

type UploadFileResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services UploadFileResponse"`

	*BaseServiceResponse
}

type DownloadFileResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services DownloadFileResponse"`

	*BaseServiceResponse

	//
	// A zipped report file that is encoded in Base64 Binary format and included
	// in the response according to the SOAP MTOM standard.
	//
	FileAttachment *FileAttachment `xml:"fileAttachment,omitempty"`
}

type BaseServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceRequest"`
}

type BaseServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceResponse"`

	//
	// Indicates the success or failure of transferring data to eBay's servers.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that occurred when eBay processed the
	// request.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The version of the schema that your WSDL is based on.
	//
	Version string `xml:"version,omitempty"`

	//
	// The date and time that the response was sent.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that occurred.
	// Your application can use error codes as identifiers in your customized
	// error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain upon which the error occurred.
	// <dl>
	// <lh>Domains include:</lh>
	// <dt>
	// Marketplace
	// </dt>
	// <dd>
	// A business or validation error occurred for the Merchandising Service.
	// </dd>
	// <dt>
	// SOA
	// </dt>
	// <dd>
	// An exception occurred in the Service Oriented Architecture (SOA) framework.
	// </dd>
	// </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Indicates whether the error caused the request to fail (Error) or not
	// (Warning).
	// <br><br>
	// If the request fails and the source of the problem is within the application
	// (such as a missing required element), please change the application before you
	// retry the request. If the problem is due to end-user input data, please alert
	// the end-user to the problem and provide the means for them to correct the data.
	// Once the problem in the application or data is resolved, you can attempt to re-
	// send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request as-is
	// a reasonable number of times (eBay recommends twice). If the error persists,
	// contact Developer Technical Support. Once the problem has been resolved, the
	// request may be resent in its original form.
	// <br><br>
	// When a warning occurs, the error is returned in addition to the business data.
	// In this case, you do not need to retry the request (as the original request was
	// successful). However, depending on the cause or nature of the warning, you
	// might need to contact either the end user or eBay to effect a long term
	// solution to the problem to prevent it from reoccurring in the future.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application errors, and
	// system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that resulted in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Name of the subdomain upon which the error occurred.
	// <dl>
	// <lh>Subdomains include:</lh>
	// <dt>
	// Merchandising
	// </dt>
	// <dd>
	// The error is specific to the Merchandising service.
	// </dd>
	// <dt>
	// MarketplaceCommon
	// </dt>
	// <dd>
	// The error is common to all Marketplace services.
	// </dd>
	// </dl>
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Some warning and error messages return one or more variables that contain
	// contextual information about the error. This is often the field or value that
	// triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorParameter"`

	Value string

	//
	// The name of the parameter in the list of parameter types returned
	// within the error type.
	//
	Name string `xml:"name,attr,omitempty"`
}

type FileAttachment struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services FileAttachment"`

	//
	// This is the size of the file you are attaching (that contains the Merchant Data API
	// or Trading API requests that you want to upload) or of the file you are receiving
	// as a download.
	// <br><br>
	// The default maximum size for a
	// data file attachment in the File Transfer uploadJob call is 15MB,
	// If you have a large call limit and you want to send more calls than would fit in
	// a 15MB file, you will have to divide your data into multiple uploads.
	//
	Size int64 `xml:"Size,omitempty"`

	//
	// The data in the attached file. When this is returned in
	// downloadFile and you are working with Large Merchant Services or
	// GetCategorySpecifics, the attached file is a .zip file.
	//
	Data []byte `xml:"Data,omitempty"`
}

type FileTransferServicePort struct {
	client *gowsdl.SoapClient
}

func NewFileTransferServicePort(url string, tls bool) *FileTransferServicePort {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &FileTransferServicePort{
		client: client,
	}
}

func (service *FileTransferServicePort) UploadFile(request *UploadFileRequest) (*UploadFileResponse, error) {
	response := &UploadFileResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FileTransferServicePort) DownloadFile(request *DownloadFileRequest) (*DownloadFileResponse, error) {
	response := &DownloadFileResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
