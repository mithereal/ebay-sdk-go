package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckCodeType string

const (

	//
	// (out) Request processing succeeded
	//
	AckCodeTypeSuccess AckCodeType = "Success"

	//
	// (out) Request processing failed
	//
	AckCodeTypeFailure AckCodeType = "Failure"

	//
	// (out) Request processing completed with warning information
	// being included in the response message
	//
	AckCodeTypeWarning AckCodeType = "Warning"

	//
	// (out) Request processing completed with some failures.
	// See the Errors data to determine which portions of the request failed.
	//
	AckCodeTypePartialFailure AckCodeType = "PartialFailure"

	//
	// (out) Reserved for internal or future use.
	//
	AckCodeTypeCustomCode AckCodeType = "CustomCode"
)

type CommentTypeCodeType string

const (

	//
	// Positive feedback. Increases total feedback score.
	//
	CommentTypeCodeTypePositive CommentTypeCodeType = "Positive"

	//
	// Neutral feedback. No effect on total feedback score.
	//
	CommentTypeCodeTypeNeutral CommentTypeCodeType = "Neutral"

	//
	// Negative feedback. Decreases total feedback score.
	//
	CommentTypeCodeTypeNegative CommentTypeCodeType = "Negative"

	//
	// Withdrawn feedback. Removes the effect of the original
	// feedback on total feedback score. Comments from withdrawn feedback
	// are still visible.
	//
	CommentTypeCodeTypeWithdrawn CommentTypeCodeType = "Withdrawn"

	//
	// Applies to the eBay Motors site only. Feedback is withdrawn based on
	// the decision of a third party.
	//
	CommentTypeCodeTypeIndependentlyWithdrawn CommentTypeCodeType = "IndependentlyWithdrawn"

	//
	// Reserved for internal or future use.
	//
	CommentTypeCodeTypeCustomCode CommentTypeCodeType = "CustomCode"
)

type CurrencyCodeType string

const (
	CurrencyCodeTypeAFA CurrencyCodeType = "AFA"

	CurrencyCodeTypeALL CurrencyCodeType = "ALL"

	CurrencyCodeTypeDZD CurrencyCodeType = "DZD"

	CurrencyCodeTypeADP CurrencyCodeType = "ADP"

	CurrencyCodeTypeAOA CurrencyCodeType = "AOA"

	CurrencyCodeTypeARS CurrencyCodeType = "ARS"

	CurrencyCodeTypeAMD CurrencyCodeType = "AMD"

	CurrencyCodeTypeAWG CurrencyCodeType = "AWG"

	CurrencyCodeTypeAZM CurrencyCodeType = "AZM"

	CurrencyCodeTypeBSD CurrencyCodeType = "BSD"

	CurrencyCodeTypeBHD CurrencyCodeType = "BHD"

	CurrencyCodeTypeBDT CurrencyCodeType = "BDT"

	CurrencyCodeTypeBBD CurrencyCodeType = "BBD"

	CurrencyCodeTypeBYR CurrencyCodeType = "BYR"

	CurrencyCodeTypeBZD CurrencyCodeType = "BZD"

	CurrencyCodeTypeBMD CurrencyCodeType = "BMD"

	CurrencyCodeTypeBTN CurrencyCodeType = "BTN"

	//
	// Indian Rupee.
	// Applicable to listings on the India site (site ID 203).
	//
	CurrencyCodeTypeINR CurrencyCodeType = "INR"

	CurrencyCodeTypeBOV CurrencyCodeType = "BOV"

	CurrencyCodeTypeBOB CurrencyCodeType = "BOB"

	CurrencyCodeTypeBAM CurrencyCodeType = "BAM"

	CurrencyCodeTypeBWP CurrencyCodeType = "BWP"

	CurrencyCodeTypeBRL CurrencyCodeType = "BRL"

	CurrencyCodeTypeBND CurrencyCodeType = "BND"

	CurrencyCodeTypeBGL CurrencyCodeType = "BGL"

	CurrencyCodeTypeBGN CurrencyCodeType = "BGN"

	CurrencyCodeTypeBIF CurrencyCodeType = "BIF"

	CurrencyCodeTypeKHR CurrencyCodeType = "KHR"

	//
	// Canadian Dollar.
	// Applicable to listings on the Canada site (site ID 2)
	// (Items listed on the Canada site can also specify USD.)
	//
	CurrencyCodeTypeCAD CurrencyCodeType = "CAD"

	CurrencyCodeTypeCVE CurrencyCodeType = "CVE"

	CurrencyCodeTypeKYD CurrencyCodeType = "KYD"

	CurrencyCodeTypeXAF CurrencyCodeType = "XAF"

	CurrencyCodeTypeCLF CurrencyCodeType = "CLF"

	CurrencyCodeTypeCLP CurrencyCodeType = "CLP"

	//
	// Chinese Yuan Renminbi.
	//
	CurrencyCodeTypeCNY CurrencyCodeType = "CNY"

	CurrencyCodeTypeCOP CurrencyCodeType = "COP"

	CurrencyCodeTypeKMF CurrencyCodeType = "KMF"

	CurrencyCodeTypeCDF CurrencyCodeType = "CDF"

	CurrencyCodeTypeCRC CurrencyCodeType = "CRC"

	CurrencyCodeTypeHRK CurrencyCodeType = "HRK"

	CurrencyCodeTypeCUP CurrencyCodeType = "CUP"

	CurrencyCodeTypeCYP CurrencyCodeType = "CYP"

	CurrencyCodeTypeCZK CurrencyCodeType = "CZK"

	CurrencyCodeTypeDKK CurrencyCodeType = "DKK"

	CurrencyCodeTypeDJF CurrencyCodeType = "DJF"

	CurrencyCodeTypeDOP CurrencyCodeType = "DOP"

	CurrencyCodeTypeTPE CurrencyCodeType = "TPE"

	CurrencyCodeTypeECV CurrencyCodeType = "ECV"

	CurrencyCodeTypeECS CurrencyCodeType = "ECS"

	CurrencyCodeTypeEGP CurrencyCodeType = "EGP"

	CurrencyCodeTypeSVC CurrencyCodeType = "SVC"

	CurrencyCodeTypeERN CurrencyCodeType = "ERN"

	CurrencyCodeTypeEEK CurrencyCodeType = "EEK"

	CurrencyCodeTypeETB CurrencyCodeType = "ETB"

	CurrencyCodeTypeFKP CurrencyCodeType = "FKP"

	CurrencyCodeTypeFJD CurrencyCodeType = "FJD"

	CurrencyCodeTypeGMD CurrencyCodeType = "GMD"

	CurrencyCodeTypeGEL CurrencyCodeType = "GEL"

	CurrencyCodeTypeGHC CurrencyCodeType = "GHC"

	CurrencyCodeTypeGIP CurrencyCodeType = "GIP"

	CurrencyCodeTypeGTQ CurrencyCodeType = "GTQ"

	CurrencyCodeTypeGNF CurrencyCodeType = "GNF"

	CurrencyCodeTypeGWP CurrencyCodeType = "GWP"

	CurrencyCodeTypeGYD CurrencyCodeType = "GYD"

	CurrencyCodeTypeHTG CurrencyCodeType = "HTG"

	CurrencyCodeTypeHNL CurrencyCodeType = "HNL"

	//
	// Hong Kong Dollar.
	// Applicable to listings on the Hong Kong site (site ID 201).
	//
	CurrencyCodeTypeHKD CurrencyCodeType = "HKD"

	CurrencyCodeTypeHUF CurrencyCodeType = "HUF"

	CurrencyCodeTypeISK CurrencyCodeType = "ISK"

	CurrencyCodeTypeIDR CurrencyCodeType = "IDR"

	CurrencyCodeTypeIRR CurrencyCodeType = "IRR"

	CurrencyCodeTypeIQD CurrencyCodeType = "IQD"

	CurrencyCodeTypeILS CurrencyCodeType = "ILS"

	CurrencyCodeTypeJMD CurrencyCodeType = "JMD"

	CurrencyCodeTypeJPY CurrencyCodeType = "JPY"

	CurrencyCodeTypeJOD CurrencyCodeType = "JOD"

	CurrencyCodeTypeKZT CurrencyCodeType = "KZT"

	CurrencyCodeTypeKES CurrencyCodeType = "KES"

	//
	// Australian Dollar.
	// Applicable to listings on the Australia site (site ID 15).
	//
	CurrencyCodeTypeAUD CurrencyCodeType = "AUD"

	CurrencyCodeTypeKPW CurrencyCodeType = "KPW"

	CurrencyCodeTypeKRW CurrencyCodeType = "KRW"

	CurrencyCodeTypeKWD CurrencyCodeType = "KWD"

	CurrencyCodeTypeKGS CurrencyCodeType = "KGS"

	CurrencyCodeTypeLAK CurrencyCodeType = "LAK"

	CurrencyCodeTypeLVL CurrencyCodeType = "LVL"

	CurrencyCodeTypeLBP CurrencyCodeType = "LBP"

	CurrencyCodeTypeLSL CurrencyCodeType = "LSL"

	CurrencyCodeTypeLRD CurrencyCodeType = "LRD"

	CurrencyCodeTypeLYD CurrencyCodeType = "LYD"

	//
	// Swiss Franc.
	// Applicable to listings on the Switzerland site (site ID 193).
	//
	CurrencyCodeTypeCHF CurrencyCodeType = "CHF"

	CurrencyCodeTypeLTL CurrencyCodeType = "LTL"

	CurrencyCodeTypeMOP CurrencyCodeType = "MOP"

	CurrencyCodeTypeMKD CurrencyCodeType = "MKD"

	CurrencyCodeTypeMGF CurrencyCodeType = "MGF"

	CurrencyCodeTypeMWK CurrencyCodeType = "MWK"

	//
	// Malaysian Ringgit.
	// Applicable to listings on the Malaysia site (site ID 207).
	//
	CurrencyCodeTypeMYR CurrencyCodeType = "MYR"

	CurrencyCodeTypeMVR CurrencyCodeType = "MVR"

	CurrencyCodeTypeMTL CurrencyCodeType = "MTL"

	//
	// Euro.
	// Applicable to listings on these site:
	// Austria (site 16), Belgium_French (site 23),
	// France (site 71), Germany (site 77), Italy (site 101), Belgium_Dutch (site 123),
	// Netherlands (site 146), Spain (site 186), Ireland (site 205).
	//
	CurrencyCodeTypeEUR CurrencyCodeType = "EUR"

	CurrencyCodeTypeMRO CurrencyCodeType = "MRO"

	CurrencyCodeTypeMUR CurrencyCodeType = "MUR"

	CurrencyCodeTypeMXN CurrencyCodeType = "MXN"

	CurrencyCodeTypeMXV CurrencyCodeType = "MXV"

	CurrencyCodeTypeMDL CurrencyCodeType = "MDL"

	CurrencyCodeTypeMNT CurrencyCodeType = "MNT"

	CurrencyCodeTypeXCD CurrencyCodeType = "XCD"

	CurrencyCodeTypeMZM CurrencyCodeType = "MZM"

	CurrencyCodeTypeMMK CurrencyCodeType = "MMK"

	CurrencyCodeTypeZAR CurrencyCodeType = "ZAR"

	CurrencyCodeTypeNAD CurrencyCodeType = "NAD"

	CurrencyCodeTypeNPR CurrencyCodeType = "NPR"

	CurrencyCodeTypeANG CurrencyCodeType = "ANG"

	CurrencyCodeTypeXPF CurrencyCodeType = "XPF"

	CurrencyCodeTypeNZD CurrencyCodeType = "NZD"

	CurrencyCodeTypeNIO CurrencyCodeType = "NIO"

	CurrencyCodeTypeNGN CurrencyCodeType = "NGN"

	CurrencyCodeTypeNOK CurrencyCodeType = "NOK"

	CurrencyCodeTypeOMR CurrencyCodeType = "OMR"

	CurrencyCodeTypePKR CurrencyCodeType = "PKR"

	CurrencyCodeTypePAB CurrencyCodeType = "PAB"

	CurrencyCodeTypePGK CurrencyCodeType = "PGK"

	CurrencyCodeTypePYG CurrencyCodeType = "PYG"

	CurrencyCodeTypePEN CurrencyCodeType = "PEN"

	//
	// Philippines Peso.
	// Applicable to listings on the Philippines site (site ID 211).
	//
	CurrencyCodeTypePHP CurrencyCodeType = "PHP"

	//
	// Poland, Zloty.
	// Applicable to listings on the Poland site (site ID 212).
	//
	CurrencyCodeTypePLN CurrencyCodeType = "PLN"

	//
	// US Dollar.
	// Applicable to listings on the US (site ID 0), eBayMotors (site 100), and Canada (site 2) sites.
	//
	CurrencyCodeTypeUSD CurrencyCodeType = "USD"

	CurrencyCodeTypeQAR CurrencyCodeType = "QAR"

	CurrencyCodeTypeROL CurrencyCodeType = "ROL"

	CurrencyCodeTypeRUB CurrencyCodeType = "RUB"

	CurrencyCodeTypeRUR CurrencyCodeType = "RUR"

	CurrencyCodeTypeRWF CurrencyCodeType = "RWF"

	CurrencyCodeTypeSHP CurrencyCodeType = "SHP"

	CurrencyCodeTypeWST CurrencyCodeType = "WST"

	CurrencyCodeTypeSTD CurrencyCodeType = "STD"

	CurrencyCodeTypeSAR CurrencyCodeType = "SAR"

	CurrencyCodeTypeSCR CurrencyCodeType = "SCR"

	CurrencyCodeTypeSLL CurrencyCodeType = "SLL"

	//
	// Singapore Dollar.
	// Applicable to listings on the Singapore site (site 216).
	//
	CurrencyCodeTypeSGD CurrencyCodeType = "SGD"

	CurrencyCodeTypeSKK CurrencyCodeType = "SKK"

	CurrencyCodeTypeSIT CurrencyCodeType = "SIT"

	CurrencyCodeTypeSBD CurrencyCodeType = "SBD"

	CurrencyCodeTypeSOS CurrencyCodeType = "SOS"

	CurrencyCodeTypeLKR CurrencyCodeType = "LKR"

	CurrencyCodeTypeSDD CurrencyCodeType = "SDD"

	CurrencyCodeTypeSRG CurrencyCodeType = "SRG"

	CurrencyCodeTypeSZL CurrencyCodeType = "SZL"

	//
	// Swedish Krona.
	// Applicable to listings on the Sweden site (site 218).
	//
	CurrencyCodeTypeSEK CurrencyCodeType = "SEK"

	CurrencyCodeTypeSYP CurrencyCodeType = "SYP"

	//
	// New Taiwan Dollar.
	//
	CurrencyCodeTypeTWD CurrencyCodeType = "TWD"

	CurrencyCodeTypeTJS CurrencyCodeType = "TJS"

	CurrencyCodeTypeTZS CurrencyCodeType = "TZS"

	CurrencyCodeTypeTHB CurrencyCodeType = "THB"

	CurrencyCodeTypeXOF CurrencyCodeType = "XOF"

	CurrencyCodeTypeTOP CurrencyCodeType = "TOP"

	CurrencyCodeTypeTTD CurrencyCodeType = "TTD"

	CurrencyCodeTypeTND CurrencyCodeType = "TND"

	CurrencyCodeTypeTRL CurrencyCodeType = "TRL"

	CurrencyCodeTypeTMM CurrencyCodeType = "TMM"

	CurrencyCodeTypeUGX CurrencyCodeType = "UGX"

	CurrencyCodeTypeUAH CurrencyCodeType = "UAH"

	CurrencyCodeTypeAED CurrencyCodeType = "AED"

	//
	// Pound Sterling.
	// Applicable to listings on the UK site (site ID 3).
	//
	CurrencyCodeTypeGBP CurrencyCodeType = "GBP"

	CurrencyCodeTypeUSS CurrencyCodeType = "USS"

	CurrencyCodeTypeUSN CurrencyCodeType = "USN"

	CurrencyCodeTypeUYU CurrencyCodeType = "UYU"

	CurrencyCodeTypeUZS CurrencyCodeType = "UZS"

	CurrencyCodeTypeVUV CurrencyCodeType = "VUV"

	CurrencyCodeTypeVEB CurrencyCodeType = "VEB"

	CurrencyCodeTypeVND CurrencyCodeType = "VND"

	CurrencyCodeTypeMAD CurrencyCodeType = "MAD"

	CurrencyCodeTypeYER CurrencyCodeType = "YER"

	CurrencyCodeTypeYUM CurrencyCodeType = "YUM"

	CurrencyCodeTypeZMK CurrencyCodeType = "ZMK"

	CurrencyCodeTypeZWD CurrencyCodeType = "ZWD"

	CurrencyCodeTypeATS CurrencyCodeType = "ATS"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	CurrencyCodeTypeCustomCode CurrencyCodeType = "CustomCode"
)

type ErrorClassificationCodeType string

const (

	//
	// An error has occurred either as a result of a problem in the sending application or because
	// the application's end-user has attempted to submit invalid data (or missing data).
	// In these cases, do not retry the request. The problem must be corrected before the request
	// can be made again. If the problem is due to something in the application (such as a missing
	// required field), the application must be changed. If the problem is a result of end-user data,
	// the application must alert the end-user to the problem and provide the means for the end-user
	// to correct the data. Once the problem in the application or data is resolved, resend the request to eBay
	// with the corrected data.
	//
	ErrorClassificationCodeTypeRequestError ErrorClassificationCodeType = "RequestError"

	//
	// Indicates that an error has occurred on the eBay system side, such as a database or server down.
	// An application can retry the request as-is a reasonable number of times (eBay recommends twice).
	// If the error persists, contact Developer Technical Support. Once the problem has been resolved,
	// the request may be resent in its original form.
	//
	ErrorClassificationCodeTypeSystemError ErrorClassificationCodeType = "SystemError"

	//
	// (out) Reserved for internal or future use.
	//
	ErrorClassificationCodeTypeCustomCode ErrorClassificationCodeType = "CustomCode"
)

type FeedbackRatingStarCodeType string

const (

	//
	// No graphic displayed, feedback score 0-9.
	//
	FeedbackRatingStarCodeTypeNone FeedbackRatingStarCodeType = "None"

	//
	// Yellow Star, feedback score 10-49.
	//
	FeedbackRatingStarCodeTypeYellow FeedbackRatingStarCodeType = "Yellow"

	//
	// Blue Star, feedback score 50-99.
	//
	FeedbackRatingStarCodeTypeBlue FeedbackRatingStarCodeType = "Blue"

	//
	// Turquoise Star, feedback score 100-499.
	//
	FeedbackRatingStarCodeTypeTurquoise FeedbackRatingStarCodeType = "Turquoise"

	//
	// Purple Star, feedback score 500-999.
	//
	FeedbackRatingStarCodeTypePurple FeedbackRatingStarCodeType = "Purple"

	//
	// Red Star, feedback score 1,000-4,999
	//
	FeedbackRatingStarCodeTypeRed FeedbackRatingStarCodeType = "Red"

	//
	// Green Star, feedback score 5,000-9,999.
	//
	FeedbackRatingStarCodeTypeGreen FeedbackRatingStarCodeType = "Green"

	//
	// Yellow Shooting Star, feedback score 10,000-24,999.
	//
	FeedbackRatingStarCodeTypeYellowShooting FeedbackRatingStarCodeType = "YellowShooting"

	//
	// Turquoise Shooting Star, feedback score 25,000-49,999.
	//
	FeedbackRatingStarCodeTypeTurquoiseShooting FeedbackRatingStarCodeType = "TurquoiseShooting"

	//
	// Purple Shooting Star, feedback score 50,000-99,999.
	//
	FeedbackRatingStarCodeTypePurpleShooting FeedbackRatingStarCodeType = "PurpleShooting"

	//
	// Red Shooting Star, feedback score 100,000-499,999.
	//
	FeedbackRatingStarCodeTypeRedShooting FeedbackRatingStarCodeType = "RedShooting"

	//
	// Green Shooting Star, feedback score 500,000-900,000.
	//
	FeedbackRatingStarCodeTypeGreenShooting FeedbackRatingStarCodeType = "GreenShooting"

	//
	// Silver Shooting Star, feedback score 1,000,000 and above.
	//
	FeedbackRatingStarCodeTypeSilverShooting FeedbackRatingStarCodeType = "SilverShooting"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	FeedbackRatingStarCodeTypeCustomCode FeedbackRatingStarCodeType = "CustomCode"
)

type SellerBusinessCodeType string

const (

	//
	// Type of seller account not defined.
	//
	SellerBusinessCodeTypeUndefined SellerBusinessCodeType = "Undefined"

	//
	// Private seller account.
	//
	SellerBusinessCodeTypePrivate SellerBusinessCodeType = "Private"

	//
	// Commercial seller account.
	//
	SellerBusinessCodeTypeCommercial SellerBusinessCodeType = "Commercial"

	//
	// (out) Reserved for internal or future use.
	//
	SellerBusinessCodeTypeCustomCode SellerBusinessCodeType = "CustomCode"
)

type SellerLevelCodeType string

const (

	//
	// (out) Bronze
	//
	SellerLevelCodeTypeBronze SellerLevelCodeType = "Bronze"

	//
	// (out) Silver
	//
	SellerLevelCodeTypeSilver SellerLevelCodeType = "Silver"

	//
	// (out) Gold
	//
	SellerLevelCodeTypeGold SellerLevelCodeType = "Gold"

	//
	// (out) Platinum
	//
	SellerLevelCodeTypePlatinum SellerLevelCodeType = "Platinum"

	//
	// (out) Titanium
	//
	SellerLevelCodeTypeTitanium SellerLevelCodeType = "Titanium"

	//
	// (out) Diamond
	//
	SellerLevelCodeTypeDiamond SellerLevelCodeType = "Diamond"

	//
	// (out) None
	//
	SellerLevelCodeTypeNone SellerLevelCodeType = "None"

	//
	// (out) Reserved for internal or future use
	//
	SellerLevelCodeTypeCustomCode SellerLevelCodeType = "CustomCode"
)

type SeverityCodeType string

const (

	//
	// (out) The request was processed successfully, but something occurred
	// that may affect your application or the user. For example, eBay may have
	// changed a value the user sent in. In this case, eBay returns a normal,
	// successful response and also returns the warning.
	//
	SeverityCodeTypeWarning SeverityCodeType = "Warning"

	//
	// (out) The request that triggered the error was not processed
	// successfully. When a serious application-level error occurs, the error
	// is returned instead of the business data.
	//
	SeverityCodeTypeError SeverityCodeType = "Error"

	//
	// (out) Reserved for internal or future use
	//
	SeverityCodeTypeCustomCode SeverityCodeType = "CustomCode"
)

type SiteCodeType string

const (

	//
	// USA, site ID 0, abbreviation US, currency USD.
	//
	SiteCodeTypeUS SiteCodeType = "US"

	//
	// Canada, site ID 2, abbreviation CA, currencies CAD and USD.
	//
	SiteCodeTypeCanada SiteCodeType = "Canada"

	//
	// United Kingdom, site ID 3, abbreviation UK, currency GBP.
	//
	SiteCodeTypeUK SiteCodeType = "UK"

	//
	// Australia, site ID 15, abbreviation AU, currency AUD.
	//
	SiteCodeTypeAustralia SiteCodeType = "Australia"

	//
	// Austria, site ID 16, abbreviation AT, currency EUR.
	//
	SiteCodeTypeAustria SiteCodeType = "Austria"

	//
	// Belgium (French), site ID 23, abbreviation BEFR, currency EUR.
	//
	SiteCodeTypeBelgiumFrench SiteCodeType = "BelgiumFrench"

	//
	// France, site ID 71, abbreviation FR, currency EUR.
	//
	SiteCodeTypeFrance SiteCodeType = "France"

	//
	// Germany, site ID 77, abbreviation DE, currency EUR.
	//
	SiteCodeTypeGermany SiteCodeType = "Germany"

	//
	// Italy, site ID 101, abbreviation IT, currency EUR.
	//
	SiteCodeTypeItaly SiteCodeType = "Italy"

	//
	// Belgium (Dutch), site ID 123, abbreviation BENL, currency EUR.
	//
	SiteCodeTypeBelgiumDutch SiteCodeType = "BelgiumDutch"

	//
	// Netherlands, site ID 146, abbreviation NL, currency EUR.
	//
	SiteCodeTypeNetherlands SiteCodeType = "Netherlands"

	//
	// Spain, site ID 186, abbreviation ES, currency EUR.
	//
	SiteCodeTypeSpain SiteCodeType = "Spain"

	//
	// Switzerland, site ID 193, abbreviation CH, currency CHF.
	//
	SiteCodeTypeSwitzerland SiteCodeType = "Switzerland"

	//
	// Taiwan, site ID 196, abbreviation TW, currency TWD.
	//
	SiteCodeTypeTaiwan SiteCodeType = "Taiwan"

	//
	// eBay Motors, site ID 100, currency USD.
	//
	SiteCodeTypeEBayMotors SiteCodeType = "eBayMotors"

	//
	// Hong Kong, site ID 201, abbreviation HK, currency HKD.
	//
	SiteCodeTypeHongKong SiteCodeType = "HongKong"

	//
	// Singapore, site ID 216, abbreviation SG, currency SGD.
	//
	SiteCodeTypeSingapore SiteCodeType = "Singapore"

	//
	// India, site ID 203, abbreviation IN, currency INR.
	//
	SiteCodeTypeIndia SiteCodeType = "India"

	//
	// China, site ID 223, abbreviation CN, currency CNY.
	//
	SiteCodeTypeChina SiteCodeType = "China"

	//
	// Ireland, site ID 205, abbreviation IE, currency EUR.
	//
	SiteCodeTypeIreland SiteCodeType = "Ireland"

	//
	// Malaysia, site ID 207, abbreviation MY, currency MYR.
	//
	SiteCodeTypeMalaysia SiteCodeType = "Malaysia"

	//
	// Philippines, site ID 211, abbreviation PH, currency PHP.
	//
	SiteCodeTypePhilippines SiteCodeType = "Philippines"

	//
	// Poland, site ID 212, abbreviation PL, currency PLN.
	//
	SiteCodeTypePoland SiteCodeType = "Poland"

	//
	// Sweden, site ID 218, abbreviation SE, currency SEK.
	//
	SiteCodeTypeSweden SiteCodeType = "Sweden"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	SiteCodeTypeCustomCode SiteCodeType = "CustomCode"

	//
	// CanadaFrench, site ID 210, abbreviation CAFR, currencies CAD and USD.
	//
	SiteCodeTypeCanadaFrench SiteCodeType = "CanadaFrench"

	//
	// Russia, site ID 215, abbreviation RU, currency RUB.
	//
	SiteCodeTypeRussia SiteCodeType = "Russia"
)

type SortOrderCodeType string

const (

	//
	// Sorts results in ascending (low to high) order.
	//
	SortOrderCodeTypeAscending SortOrderCodeType = "Ascending"

	//
	// Sorts results in descending (high to low) order.
	//
	SortOrderCodeTypeDescending SortOrderCodeType = "Descending"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	SortOrderCodeTypeCustomCode SortOrderCodeType = "CustomCode"
)

type TradingRoleCodeType string

const (

	//
	// Acting as buyer.
	//
	TradingRoleCodeTypeBuyer TradingRoleCodeType = "Buyer"

	//
	// Acting as seller.
	//
	TradingRoleCodeTypeSeller TradingRoleCodeType = "Seller"

	//
	// Reserved for future use
	//
	TradingRoleCodeTypeCustomCode TradingRoleCodeType = "CustomCode"
)

type UserStatusCodeType string

const (

	//
	// (out) User properties have never been set; this value should
	// seldom, if ever, be returned and typically represents a
	// problem
	//
	UserStatusCodeTypeUnknown UserStatusCodeType = "Unknown"

	//
	// (out) User has been suspended from selling and buying, such as
	// for violations of eBay terms or agreement
	//
	UserStatusCodeTypeSuspended UserStatusCodeType = "Suspended"

	//
	// (out) User has completed online registration and has properly
	// responded to confirmation email; most users should fall
	// in this category
	//
	UserStatusCodeTypeConfirmed UserStatusCodeType = "Confirmed"

	//
	// (out) User has completed online registration, but has either
	// not responded to confirmation email or has not yet been
	// sent the confirmation email
	//
	UserStatusCodeTypeUnconfirmed UserStatusCodeType = "Unconfirmed"

	//
	// (out) Registered users of AuctionWeb (pre-eBay) who never
	// re-registered on eBay
	//
	UserStatusCodeTypeGhost UserStatusCodeType = "Ghost"

	//
	// (out) Temporary user record state indicating the record is in
	// the process of being changed by eBay; query user
	// information again to get new status
	//
	UserStatusCodeTypeInMaintenance UserStatusCodeType = "InMaintenance"

	//
	// (out) Records for the specified user have been deleted
	//
	UserStatusCodeTypeDeleted UserStatusCodeType = "Deleted"

	//
	// (out) User has completed registration and confirmation, but is
	// pending a verification of credit card information
	//
	UserStatusCodeTypeCreditCardVerify UserStatusCodeType = "CreditCardVerify"

	//
	// (out) User's account is on hold, such as for non-payment of
	// amounts due eBay; user cannot sell or buy items
	//
	UserStatusCodeTypeAccountOnHold UserStatusCodeType = "AccountOnHold"

	//
	// (out) User record has been merged with another account record
	// for the same user
	//
	UserStatusCodeTypeMerged UserStatusCodeType = "Merged"

	//
	// (out) User has completed online registration and has been sent
	// the confirmation email, but has not yet responded to the
	// confirmation email
	//
	UserStatusCodeTypeRegistrationCodeMailOut UserStatusCodeType = "RegistrationCodeMailOut"

	//
	// (out) User has been scheduled for account closure (typically
	// when a user has requested to have their account closed)
	// A user in this state should not be considered an active
	// user
	//
	UserStatusCodeTypeTermPending UserStatusCodeType = "TermPending"

	//
	// (out) User has completed the registration for Half.com and opted
	// to automatically also be registered with eBay, but the
	// registration confirmation is still pending
	//
	UserStatusCodeTypeUnconfirmedHalfOptIn UserStatusCodeType = "UnconfirmedHalfOptIn"

	//
	// (out) User has completed the registration for Half.com and opted
	// to automatically also be registered with eBay, but the
	// verification of credit card information is still pending
	//
	UserStatusCodeTypeCreditCardVerifyHalfOptIn UserStatusCodeType = "CreditCardVerifyHalfOptIn"

	//
	// (out) Half.com User; user has completed the registration for Half.com
	// and opted to automatically also be registered with eBay, but the
	// registration confirmation is still pending
	//
	UserStatusCodeTypeUnconfirmedExpress UserStatusCodeType = "UnconfirmedExpress"

	//
	// (out) Reserved for internal or future use
	//
	UserStatusCodeTypeCustomCode UserStatusCodeType = "CustomCode"
)

type BuyerPaymentMethodCodeType string

const (

	//
	// No payment method specified.
	// For example, no payment methods would be specified for Ad format listings.
	//
	BuyerPaymentMethodCodeTypeNone BuyerPaymentMethodCodeType = "None"

	//
	// Money order/cashiers check.
	// Not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeMOCC BuyerPaymentMethodCodeType = "MOCC"

	//
	// American Express.
	// Not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeAmEx BuyerPaymentMethodCodeType = "AmEx"

	//
	// Payment instructions are contained in the item's description.
	//
	BuyerPaymentMethodCodeTypePaymentSeeDescription BuyerPaymentMethodCodeType = "PaymentSeeDescription"

	//
	// Credit card.
	// Not applicable to Real Estate or US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeCCAccepted BuyerPaymentMethodCodeType = "CCAccepted"

	//
	// Personal check.
	//
	BuyerPaymentMethodCodeTypePersonalCheck BuyerPaymentMethodCodeType = "PersonalCheck"

	//
	// Cash on delivery.
	// Only applicable to the following eBay sites: AT (16), BEFR (24),
	// BENL (123), CH (193), DE (77), ES (186), FR (71), HK (201), IN (203),
	// IT (101), PL (212), and SG (216).
	// Not applicable to Real Estate listings.
	//
	BuyerPaymentMethodCodeTypeCOD BuyerPaymentMethodCodeType = "COD"

	//
	// Visa/Mastercard. These qualify as safe payment methods.
	// Not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeVisaMC BuyerPaymentMethodCodeType = "VisaMC"

	//
	// PaisaPay (for India site only). This qualifies as a safe payment method.
	//
	BuyerPaymentMethodCodeTypePaisaPayAccepted BuyerPaymentMethodCodeType = "PaisaPayAccepted"

	//
	// Other forms of payment.
	// Not applicable to US/CA eBay Motors listings
	// (see PaymentSeeDescription instead).
	//
	BuyerPaymentMethodCodeTypeOther BuyerPaymentMethodCodeType = "Other"

	//
	// PayPal is accepted as a payment method. This qualifies as a safe payment method. <br>
	// <br>
	// If PayPal is specified for US/CA eBay Motors vehicles, it is for
	// the vehicle deposit (not for purchasing the vehicle).
	//
	BuyerPaymentMethodCodeTypePayPal BuyerPaymentMethodCodeType = "PayPal"

	//
	// Discover card.
	// Not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeDiscover BuyerPaymentMethodCodeType = "Discover"

	//
	// This payment method is equivalent to the PayOnPickup payment method.
	// CashOnPickup applies even for listings on the eBay US site that refer to "Pay on pickup."
	//
	BuyerPaymentMethodCodeTypeCashOnPickup BuyerPaymentMethodCodeType = "CashOnPickup"

	//
	// Direct transfer of money.
	// Not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeMoneyXferAccepted BuyerPaymentMethodCodeType = "MoneyXferAccepted"

	//
	// If the seller has bank account information on file, and
	// MoneyXferAcceptedInCheckout = true, then the bank account
	// information will be displayed in Checkout.
	//
	BuyerPaymentMethodCodeTypeMoneyXferAcceptedInCheckout BuyerPaymentMethodCodeType = "MoneyXferAcceptedInCheckout"

	//
	// All other online payments.
	// Not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeOtherOnlinePayments BuyerPaymentMethodCodeType = "OtherOnlinePayments"

	BuyerPaymentMethodCodeTypeEscrow BuyerPaymentMethodCodeType = "Escrow"

	BuyerPaymentMethodCodeTypePrePayDelivery BuyerPaymentMethodCodeType = "PrePayDelivery"

	BuyerPaymentMethodCodeTypeCODPrePayDelivery BuyerPaymentMethodCodeType = "CODPrePayDelivery"

	BuyerPaymentMethodCodeTypePostalTransfer BuyerPaymentMethodCodeType = "PostalTransfer"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	BuyerPaymentMethodCodeTypeCustomCode BuyerPaymentMethodCodeType = "CustomCode"

	//
	// Loan check option (applicable only to the US eBay Motors site,
	// except in the Parts and Accessories category, and the eBay Canada site for motors).
	//
	BuyerPaymentMethodCodeTypeLoanCheck BuyerPaymentMethodCodeType = "LoanCheck"

	//
	// Cash-in-person option. Applicable only to US and Canada eBay Motors vehicles,
	// (not the Parts and Accessories category).
	//
	BuyerPaymentMethodCodeTypeCashInPerson BuyerPaymentMethodCodeType = "CashInPerson"

	//
	// Elektronisches Lastschriftverfahren (direct debit).
	// Only applicable to Express Germany.
	//
	BuyerPaymentMethodCodeTypeELV BuyerPaymentMethodCodeType = "ELV"

	//
	// PaisaPayEscrow EMI (Equal Monthly Installment) payment method.
	// The PaisaPayEscrowEMI payment method is only for the India site (site ID 203).
	//
	BuyerPaymentMethodCodeTypePaisaPayEscrowEMI BuyerPaymentMethodCodeType = "PaisaPayEscrowEMI"

	//
	// <span class="tablenote"><b>Note:</b>
	// This payment method is no longer an acceptable form of payment. Sellers may no longer offer this payment method to buyers when creating new listings.
	// </span>
	// <br>
	// The Moneybookers payment method.
	// For more information, see http://www.moneybookers.com/partners/us/ebay.
	// Only applicable to the US site (and
	// to the Parts and Accessories category of the US eBay Motors site).
	//
	BuyerPaymentMethodCodeTypeMoneybookers BuyerPaymentMethodCodeType = "Moneybookers"

	//
	// <span class="tablenote"><b>Note:</b>
	// This payment method is no longer an acceptable form of payment. Sellers may no longer offer this payment method to buyers when creating new listings.
	// </span>
	// <br>
	// The Paymate payment method. For more information,
	// see http://www.paymate.com/eBay.
	// Only applicable to the US site (and
	// to the Parts and Accessories category of the US eBay Motors site).
	//
	BuyerPaymentMethodCodeTypePaymate BuyerPaymentMethodCodeType = "Paymate"

	//
	// <span class="tablenote"><b>Note:</b>
	// This payment method is no longer an acceptable form of payment. Sellers may no longer offer this payment method to buyers when creating new listings.
	// </span>
	// <br>
	// The ProPay payment method. US site only. For more information,
	// see http://www.Propay.com/eBay.
	//
	BuyerPaymentMethodCodeTypeProPay BuyerPaymentMethodCodeType = "ProPay"

	//
	// For all payment intermediated transactions, If the authenticated caller is a seller then Standard Payment Method is returned to as Payment Method Used to sellers.
	// OrderArray.Order.CheckoutStatus.PaymentMethod (GetOrders, GetOrderTransaction) and OrderArray.Order
	// .TransactionArray.Transaction.Status (For all the 4 APIs).
	// The COD (Cash on Demand) or POP (Pay on Pickup) should be shown as is to the buyers and sellers, these payment methods are not intermediated.
	//
	BuyerPaymentMethodCodeTypeStandardPayment BuyerPaymentMethodCodeType = "StandardPayment"

	//
	// This value indicates that a debit card is a valid payment method for the order.  For eBay Now orders, the eBay Now valet accepts debit cards as a form of payment. This value is only applicable for eBay Now orders.
	//
	BuyerPaymentMethodCodeTypeDirectDebit BuyerPaymentMethodCodeType = "DirectDebit"

	//
	// This value indicates that a credit card is a valid payment method for the order.  For eBay Now orders, the eBay Now valet accepts credit cards as a form of payment. This value is only applicable for eBay Now orders.
	//
	BuyerPaymentMethodCodeTypeCreditCard BuyerPaymentMethodCodeType = "CreditCard"
)

type CharityStatusCodeType string

const (

	//
	// (out)	The specified nonprofit charity organization is a valid nonprofit charity organization according to the requirements of the dedicated eBay Giving Works provider.
	//
	CharityStatusCodeTypeValid CharityStatusCodeType = "Valid"

	//
	// (out)	The specified nonprofit charity organization is no longer a valid nonprofit charity organization according to the requirements of the dedicated eBay Giving Works provider.
	//
	CharityStatusCodeTypeNoLongerValid CharityStatusCodeType = "NoLongerValid"

	//
	// (out) Reserved for internal or future use.
	//
	CharityStatusCodeTypeCustomCode CharityStatusCodeType = "CustomCode"
)

type CountryCodeType string

const (

	//
	// Afghanistan.
	//
	CountryCodeTypeAF CountryCodeType = "AF"

	//
	// Albania.
	//
	CountryCodeTypeAL CountryCodeType = "AL"

	//
	// Algeria.
	//
	CountryCodeTypeDZ CountryCodeType = "DZ"

	//
	// American Samoa.
	//
	CountryCodeTypeAS CountryCodeType = "AS"

	//
	// Andorra.
	//
	CountryCodeTypeAD CountryCodeType = "AD"

	//
	// Angola.
	//
	CountryCodeTypeAO CountryCodeType = "AO"

	//
	// Anguilla.
	//
	CountryCodeTypeAI CountryCodeType = "AI"

	//
	// Antarctica.
	//
	CountryCodeTypeAQ CountryCodeType = "AQ"

	//
	// Antigua and Barbuda.
	//
	CountryCodeTypeAG CountryCodeType = "AG"

	//
	// Argentina.
	//
	CountryCodeTypeAR CountryCodeType = "AR"

	//
	// Armenia.
	//
	CountryCodeTypeAM CountryCodeType = "AM"

	//
	// Aruba.
	//
	CountryCodeTypeAW CountryCodeType = "AW"

	//
	// Australia.
	//
	CountryCodeTypeAU CountryCodeType = "AU"

	//
	// Austria.
	//
	CountryCodeTypeAT CountryCodeType = "AT"

	//
	// Azerbaijan.
	//
	CountryCodeTypeAZ CountryCodeType = "AZ"

	//
	// Bahamas.
	//
	CountryCodeTypeBS CountryCodeType = "BS"

	//
	// Bahrain.
	//
	CountryCodeTypeBH CountryCodeType = "BH"

	//
	// Bangladesh.
	//
	CountryCodeTypeBD CountryCodeType = "BD"

	//
	// Barbados.
	//
	CountryCodeTypeBB CountryCodeType = "BB"

	//
	// Belarus.
	//
	CountryCodeTypeBY CountryCodeType = "BY"

	//
	// Belgium.
	//
	CountryCodeTypeBE CountryCodeType = "BE"

	//
	// Belize.
	//
	CountryCodeTypeBZ CountryCodeType = "BZ"

	//
	// Benin.
	//
	CountryCodeTypeBJ CountryCodeType = "BJ"

	//
	// Bermuda.
	//
	CountryCodeTypeBM CountryCodeType = "BM"

	//
	// Bhutan.
	//
	CountryCodeTypeBT CountryCodeType = "BT"

	//
	// Bolivia.
	//
	CountryCodeTypeBO CountryCodeType = "BO"

	//
	// Bosnia and Herzegovina.
	//
	CountryCodeTypeBA CountryCodeType = "BA"

	//
	// Botswana.
	//
	CountryCodeTypeBW CountryCodeType = "BW"

	//
	// Bouvet Island.
	//
	CountryCodeTypeBV CountryCodeType = "BV"

	//
	// Brazil.
	//
	CountryCodeTypeBR CountryCodeType = "BR"

	//
	// British Indian Ocean Territory.
	//
	CountryCodeTypeIO CountryCodeType = "IO"

	//
	// Brunei Darussalam.
	//
	CountryCodeTypeBN CountryCodeType = "BN"

	//
	// Bulgaria.
	//
	CountryCodeTypeBG CountryCodeType = "BG"

	//
	// Burkina Faso.
	//
	CountryCodeTypeBF CountryCodeType = "BF"

	//
	// Burundi.
	//
	CountryCodeTypeBI CountryCodeType = "BI"

	//
	// Cambodia.
	//
	CountryCodeTypeKH CountryCodeType = "KH"

	//
	// Cameroon.
	//
	CountryCodeTypeCM CountryCodeType = "CM"

	//
	// Canada.
	//
	CountryCodeTypeCA CountryCodeType = "CA"

	//
	// Cape Verde.
	//
	CountryCodeTypeCV CountryCodeType = "CV"

	//
	// Cayman Islands.
	//
	CountryCodeTypeKY CountryCodeType = "KY"

	//
	// Central African Republic.
	//
	CountryCodeTypeCF CountryCodeType = "CF"

	//
	// Chad.
	//
	CountryCodeTypeTD CountryCodeType = "TD"

	//
	// Chile.
	//
	CountryCodeTypeCL CountryCodeType = "CL"

	//
	// China.
	//
	CountryCodeTypeCN CountryCodeType = "CN"

	//
	// Christmas Island.
	//
	CountryCodeTypeCX CountryCodeType = "CX"

	//
	// Cocos (Keeling) Islands.
	//
	CountryCodeTypeCC CountryCodeType = "CC"

	//
	// Colombia.
	//
	CountryCodeTypeCO CountryCodeType = "CO"

	//
	// Comoros.
	//
	CountryCodeTypeKM CountryCodeType = "KM"

	//
	// Congo.
	//
	CountryCodeTypeCG CountryCodeType = "CG"

	//
	// The Democratic Republic of the Congo.
	//
	CountryCodeTypeCD CountryCodeType = "CD"

	//
	// Cook Islands.
	//
	CountryCodeTypeCK CountryCodeType = "CK"

	//
	// Costa Rica.
	//
	CountryCodeTypeCR CountryCodeType = "CR"

	//
	// Cote d'Ivoire.
	//
	CountryCodeTypeCI CountryCodeType = "CI"

	//
	// Croatia.
	//
	CountryCodeTypeHR CountryCodeType = "HR"

	//
	// Cuba.
	//
	CountryCodeTypeCU CountryCodeType = "CU"

	//
	// Cyprus.
	//
	CountryCodeTypeCY CountryCodeType = "CY"

	//
	// Czech Republic.
	//
	CountryCodeTypeCZ CountryCodeType = "CZ"

	//
	// Denmark.
	//
	CountryCodeTypeDK CountryCodeType = "DK"

	//
	// Djibouti.
	//
	CountryCodeTypeDJ CountryCodeType = "DJ"

	//
	// Dominica.
	//
	CountryCodeTypeDM CountryCodeType = "DM"

	//
	// Dominican Republic.
	//
	CountryCodeTypeDO CountryCodeType = "DO"

	//
	// No longer in use.
	//
	CountryCodeTypeTP CountryCodeType = "TP"

	//
	// Ecuador.
	//
	CountryCodeTypeEC CountryCodeType = "EC"

	//
	// Egypt.
	//
	CountryCodeTypeEG CountryCodeType = "EG"

	//
	// El Salvador.
	//
	CountryCodeTypeSV CountryCodeType = "SV"

	//
	// Equatorial Guinea.
	//
	CountryCodeTypeGQ CountryCodeType = "GQ"

	//
	// Eritrea.
	//
	CountryCodeTypeER CountryCodeType = "ER"

	//
	// Estonia.
	//
	CountryCodeTypeEE CountryCodeType = "EE"

	//
	// Ethiopia.
	//
	CountryCodeTypeET CountryCodeType = "ET"

	//
	// Falkland Islands (Malvinas).
	//
	CountryCodeTypeFK CountryCodeType = "FK"

	//
	// Faroe Islands.
	//
	CountryCodeTypeFO CountryCodeType = "FO"

	//
	// Fiji.
	//
	CountryCodeTypeFJ CountryCodeType = "FJ"

	//
	// Finland.
	//
	CountryCodeTypeFI CountryCodeType = "FI"

	//
	// France.
	//
	CountryCodeTypeFR CountryCodeType = "FR"

	//
	// French Guiana.
	//
	CountryCodeTypeGF CountryCodeType = "GF"

	//
	// French Polynesia. Includes Tahiti.
	//
	CountryCodeTypePF CountryCodeType = "PF"

	//
	// French Southern Territories.
	//
	CountryCodeTypeTF CountryCodeType = "TF"

	//
	// Gabon.
	//
	CountryCodeTypeGA CountryCodeType = "GA"

	//
	// Gambia.
	//
	CountryCodeTypeGM CountryCodeType = "GM"

	//
	// Georgia.
	//
	CountryCodeTypeGE CountryCodeType = "GE"

	//
	// Germany.
	//
	CountryCodeTypeDE CountryCodeType = "DE"

	//
	// Ghana.
	//
	CountryCodeTypeGH CountryCodeType = "GH"

	//
	// Gibraltar.
	//
	CountryCodeTypeGI CountryCodeType = "GI"

	//
	// Greece.
	//
	CountryCodeTypeGR CountryCodeType = "GR"

	//
	// Greenland.
	//
	CountryCodeTypeGL CountryCodeType = "GL"

	//
	// Grenada.
	//
	CountryCodeTypeGD CountryCodeType = "GD"

	//
	// Guadeloupe.
	//
	CountryCodeTypeGP CountryCodeType = "GP"

	//
	// Guam.
	//
	CountryCodeTypeGU CountryCodeType = "GU"

	//
	// Guatemala.
	//
	CountryCodeTypeGT CountryCodeType = "GT"

	//
	// Guinea.
	//
	CountryCodeTypeGN CountryCodeType = "GN"

	//
	// Guinea-Bissau.
	//
	CountryCodeTypeGW CountryCodeType = "GW"

	//
	// Guyana.
	//
	CountryCodeTypeGY CountryCodeType = "GY"

	//
	// Haiti.
	//
	CountryCodeTypeHT CountryCodeType = "HT"

	//
	// Heard Island and McDonald Islands.
	//
	CountryCodeTypeHM CountryCodeType = "HM"

	//
	// Holy See (Vatican City state).
	//
	CountryCodeTypeVA CountryCodeType = "VA"

	//
	// Honduras.
	//
	CountryCodeTypeHN CountryCodeType = "HN"

	//
	// Hong Kong.
	//
	CountryCodeTypeHK CountryCodeType = "HK"

	//
	// Hungary.
	//
	CountryCodeTypeHU CountryCodeType = "HU"

	//
	// Iceland.
	//
	CountryCodeTypeIS CountryCodeType = "IS"

	//
	// India.
	//
	CountryCodeTypeIN CountryCodeType = "IN"

	//
	// Indonesia.
	//
	CountryCodeTypeID CountryCodeType = "ID"

	//
	// Islamic Republic of Iran.
	//
	CountryCodeTypeIR CountryCodeType = "IR"

	//
	// Iraq.
	//
	CountryCodeTypeIQ CountryCodeType = "IQ"

	//
	// Ireland.
	//
	CountryCodeTypeIE CountryCodeType = "IE"

	//
	// Israel.
	//
	CountryCodeTypeIL CountryCodeType = "IL"

	//
	// Italy.
	//
	CountryCodeTypeIT CountryCodeType = "IT"

	//
	// Jamaica.
	//
	CountryCodeTypeJM CountryCodeType = "JM"

	//
	// Japan.
	//
	CountryCodeTypeJP CountryCodeType = "JP"

	//
	// Jordan.
	//
	CountryCodeTypeJO CountryCodeType = "JO"

	//
	// Kazakhstan.
	//
	CountryCodeTypeKZ CountryCodeType = "KZ"

	//
	// Kenya.
	//
	CountryCodeTypeKE CountryCodeType = "KE"

	//
	// Kiribati.
	//
	CountryCodeTypeKI CountryCodeType = "KI"

	//
	// Democratic People's Republic of Korea.
	//
	CountryCodeTypeKP CountryCodeType = "KP"

	//
	// Republic of Korea.
	//
	CountryCodeTypeKR CountryCodeType = "KR"

	//
	// Kuwait.
	//
	CountryCodeTypeKW CountryCodeType = "KW"

	//
	// Kyrgyzstan.
	//
	CountryCodeTypeKG CountryCodeType = "KG"

	//
	// Lao People's Democratic Republic.
	//
	CountryCodeTypeLA CountryCodeType = "LA"

	//
	// Latvia.
	//
	CountryCodeTypeLV CountryCodeType = "LV"

	//
	// Lebanon.
	//
	CountryCodeTypeLB CountryCodeType = "LB"

	//
	// Lesotho.
	//
	CountryCodeTypeLS CountryCodeType = "LS"

	//
	// Liberia.
	//
	CountryCodeTypeLR CountryCodeType = "LR"

	//
	// Libyan Arab Jamahiriya.
	//
	CountryCodeTypeLY CountryCodeType = "LY"

	//
	// Liechtenstein.
	//
	CountryCodeTypeLI CountryCodeType = "LI"

	//
	// Lithuania.
	//
	CountryCodeTypeLT CountryCodeType = "LT"

	//
	// Luxembourg.
	//
	CountryCodeTypeLU CountryCodeType = "LU"

	//
	// Macao.
	//
	CountryCodeTypeMO CountryCodeType = "MO"

	//
	// The Former Yugoslav Republic of Macedonia.
	//
	CountryCodeTypeMK CountryCodeType = "MK"

	//
	// Madagascar.
	//
	CountryCodeTypeMG CountryCodeType = "MG"

	//
	// Malawi.
	//
	CountryCodeTypeMW CountryCodeType = "MW"

	//
	// Malaysia.
	//
	CountryCodeTypeMY CountryCodeType = "MY"

	//
	// Maldives.
	//
	CountryCodeTypeMV CountryCodeType = "MV"

	//
	// Mali.
	//
	CountryCodeTypeML CountryCodeType = "ML"

	//
	// Malta.
	//
	CountryCodeTypeMT CountryCodeType = "MT"

	//
	// Marshall Islands.
	//
	CountryCodeTypeMH CountryCodeType = "MH"

	//
	// Martinique.
	//
	CountryCodeTypeMQ CountryCodeType = "MQ"

	//
	// Mauritania.
	//
	CountryCodeTypeMR CountryCodeType = "MR"

	//
	// Mauritius.
	//
	CountryCodeTypeMU CountryCodeType = "MU"

	//
	// Mayotte.
	//
	CountryCodeTypeYT CountryCodeType = "YT"

	//
	// Mexico.
	//
	CountryCodeTypeMX CountryCodeType = "MX"

	//
	// Federated States of Micronesia.
	//
	CountryCodeTypeFM CountryCodeType = "FM"

	//
	// Republic of Moldova.
	//
	CountryCodeTypeMD CountryCodeType = "MD"

	//
	// Monaco.
	//
	CountryCodeTypeMC CountryCodeType = "MC"

	//
	// Mongolia.
	//
	CountryCodeTypeMN CountryCodeType = "MN"

	//
	// Montserrat.
	//
	CountryCodeTypeMS CountryCodeType = "MS"

	//
	// Morocco.
	//
	CountryCodeTypeMA CountryCodeType = "MA"

	//
	// Mozambique.
	//
	CountryCodeTypeMZ CountryCodeType = "MZ"

	//
	// Myanmar.
	//
	CountryCodeTypeMM CountryCodeType = "MM"

	//
	// Namibia.
	//
	CountryCodeTypeNA CountryCodeType = "NA"

	//
	// Nauru.
	//
	CountryCodeTypeNR CountryCodeType = "NR"

	//
	// Nepal.
	//
	CountryCodeTypeNP CountryCodeType = "NP"

	//
	// Netherlands.
	//
	CountryCodeTypeNL CountryCodeType = "NL"

	//
	// Netherlands Antilles.
	//
	CountryCodeTypeAN CountryCodeType = "AN"

	//
	// New Caledonia.
	//
	CountryCodeTypeNC CountryCodeType = "NC"

	//
	// New Zealand.
	//
	CountryCodeTypeNZ CountryCodeType = "NZ"

	//
	// Nicaragua.
	//
	CountryCodeTypeNI CountryCodeType = "NI"

	//
	// Niger.
	//
	CountryCodeTypeNE CountryCodeType = "NE"

	//
	// Nigeria.
	//
	CountryCodeTypeNG CountryCodeType = "NG"

	//
	// Niue.
	//
	CountryCodeTypeNU CountryCodeType = "NU"

	//
	// Norfolk Island.
	//
	CountryCodeTypeNF CountryCodeType = "NF"

	//
	// Northern Mariana Islands.
	//
	CountryCodeTypeMP CountryCodeType = "MP"

	//
	// Norway.
	//
	CountryCodeTypeNO CountryCodeType = "NO"

	//
	// Oman.
	//
	CountryCodeTypeOM CountryCodeType = "OM"

	//
	// Pakistan.
	//
	CountryCodeTypePK CountryCodeType = "PK"

	//
	// Palau.
	//
	CountryCodeTypePW CountryCodeType = "PW"

	//
	// Palestinian territory, Occupied.
	//
	CountryCodeTypePS CountryCodeType = "PS"

	//
	// Panama.
	//
	CountryCodeTypePA CountryCodeType = "PA"

	//
	// Papua New Guinea.
	//
	CountryCodeTypePG CountryCodeType = "PG"

	//
	// Paraguay.
	//
	CountryCodeTypePY CountryCodeType = "PY"

	//
	// Peru.
	//
	CountryCodeTypePE CountryCodeType = "PE"

	//
	// Philippines.
	//
	CountryCodeTypePH CountryCodeType = "PH"

	//
	// Pitcairn.
	//
	CountryCodeTypePN CountryCodeType = "PN"

	//
	// Poland.
	//
	CountryCodeTypePL CountryCodeType = "PL"

	//
	// Portugal.
	//
	CountryCodeTypePT CountryCodeType = "PT"

	//
	// Puerto Rico.
	//
	CountryCodeTypePR CountryCodeType = "PR"

	//
	// Qatar.
	//
	CountryCodeTypeQA CountryCodeType = "QA"

	//
	// Reunion.
	//
	CountryCodeTypeRE CountryCodeType = "RE"

	//
	// Romania.
	//
	CountryCodeTypeRO CountryCodeType = "RO"

	//
	// Russian Federation.
	//
	CountryCodeTypeRU CountryCodeType = "RU"

	//
	// Rwanda.
	//
	CountryCodeTypeRW CountryCodeType = "RW"

	//
	// Saint Helena.
	//
	CountryCodeTypeSH CountryCodeType = "SH"

	//
	// Saint Kitts and Nevis.
	//
	CountryCodeTypeKN CountryCodeType = "KN"

	//
	// Saint Lucia.
	//
	CountryCodeTypeLC CountryCodeType = "LC"

	//
	// Saint Pierre and Miquelon.
	//
	CountryCodeTypePM CountryCodeType = "PM"

	//
	// Saint Vincent and the Grenadines.
	//
	CountryCodeTypeVC CountryCodeType = "VC"

	//
	// Samoa.
	//
	CountryCodeTypeWS CountryCodeType = "WS"

	//
	// San Marino.
	//
	CountryCodeTypeSM CountryCodeType = "SM"

	//
	// Sao Tome and Principe.
	//
	CountryCodeTypeST CountryCodeType = "ST"

	//
	// Saudi Arabia.
	//
	CountryCodeTypeSA CountryCodeType = "SA"

	//
	// Senegal.
	//
	CountryCodeTypeSN CountryCodeType = "SN"

	//
	// Seychelles.
	//
	CountryCodeTypeSC CountryCodeType = "SC"

	//
	// Sierra Leone.
	//
	CountryCodeTypeSL CountryCodeType = "SL"

	//
	// Singapore.
	//
	CountryCodeTypeSG CountryCodeType = "SG"

	//
	// Slovakia.
	//
	CountryCodeTypeSK CountryCodeType = "SK"

	//
	// Slovenia.
	//
	CountryCodeTypeSI CountryCodeType = "SI"

	//
	// Solomon Islands.
	//
	CountryCodeTypeSB CountryCodeType = "SB"

	//
	// Somalia.
	//
	CountryCodeTypeSO CountryCodeType = "SO"

	//
	// South Africa.
	//
	CountryCodeTypeZA CountryCodeType = "ZA"

	//
	// South Georgia and the South Sandwich Islands.
	//
	CountryCodeTypeGS CountryCodeType = "GS"

	//
	// Spain.
	//
	CountryCodeTypeES CountryCodeType = "ES"

	//
	// Sri Lanka.
	//
	CountryCodeTypeLK CountryCodeType = "LK"

	//
	// Sudan.
	//
	CountryCodeTypeSD CountryCodeType = "SD"

	//
	// Suriname.
	//
	CountryCodeTypeSR CountryCodeType = "SR"

	//
	// Svalbard and Jan Mayen.
	//
	CountryCodeTypeSJ CountryCodeType = "SJ"

	//
	// Swaziland.
	//
	CountryCodeTypeSZ CountryCodeType = "SZ"

	//
	// Sweden.
	//
	CountryCodeTypeSE CountryCodeType = "SE"

	//
	// Switzerland.
	//
	CountryCodeTypeCH CountryCodeType = "CH"

	//
	// Syrian Arab Republic.
	//
	CountryCodeTypeSY CountryCodeType = "SY"

	//
	// Taiwan, Province of China.
	//
	CountryCodeTypeTW CountryCodeType = "TW"

	//
	// Tajikistan.
	//
	CountryCodeTypeTJ CountryCodeType = "TJ"

	//
	// Tanzania, United Republic of.
	//
	CountryCodeTypeTZ CountryCodeType = "TZ"

	//
	// Thailand.
	//
	CountryCodeTypeTH CountryCodeType = "TH"

	//
	// Togo.
	//
	CountryCodeTypeTG CountryCodeType = "TG"

	//
	// Tokelau.
	//
	CountryCodeTypeTK CountryCodeType = "TK"

	//
	// Tonga.
	//
	CountryCodeTypeTO CountryCodeType = "TO"

	//
	// Trinidad and Tobago.
	//
	CountryCodeTypeTT CountryCodeType = "TT"

	//
	// Tunisia.
	//
	CountryCodeTypeTN CountryCodeType = "TN"

	//
	// Turkey.
	//
	CountryCodeTypeTR CountryCodeType = "TR"

	//
	// Turkmenistan.
	//
	CountryCodeTypeTM CountryCodeType = "TM"

	//
	// Turks and Caicos Islands.
	//
	CountryCodeTypeTC CountryCodeType = "TC"

	//
	// Tuvalu.
	//
	CountryCodeTypeTV CountryCodeType = "TV"

	//
	// Uganda.
	//
	CountryCodeTypeUG CountryCodeType = "UG"

	//
	// Ukraine.
	//
	CountryCodeTypeUA CountryCodeType = "UA"

	//
	// United Arab Emirates.
	//
	CountryCodeTypeAE CountryCodeType = "AE"

	//
	// United Kingdom.
	//
	CountryCodeTypeGB CountryCodeType = "GB"

	//
	// United States.
	//
	CountryCodeTypeUS CountryCodeType = "US"

	//
	// NOTE: United States Minor Outlying Islands was
	// defined in the eBay list previously
	// but is no longer a viable option. This country
	// will remain on eBay country list for backward
	// compatibility. Use 'US' instead.
	//
	CountryCodeTypeUM CountryCodeType = "UM"

	//
	// Uruguay.
	//
	CountryCodeTypeUY CountryCodeType = "UY"

	//
	// Uzbekistan.
	//
	CountryCodeTypeUZ CountryCodeType = "UZ"

	//
	// Vanuatu.
	//
	CountryCodeTypeVU CountryCodeType = "VU"

	//
	// Venezuela.
	//
	CountryCodeTypeVE CountryCodeType = "VE"

	//
	// Vietnam.
	//
	CountryCodeTypeVN CountryCodeType = "VN"

	//
	// Virgin Islands, British.
	//
	CountryCodeTypeVG CountryCodeType = "VG"

	//
	// Virgin Islands, U.S.
	//
	CountryCodeTypeVI CountryCodeType = "VI"

	//
	// Wallis and Futuna.
	//
	CountryCodeTypeWF CountryCodeType = "WF"

	//
	// Western Sahara.
	//
	CountryCodeTypeEH CountryCodeType = "EH"

	//
	// Yemen.
	//
	CountryCodeTypeYE CountryCodeType = "YE"

	//
	// No longer in use. See RS for Serbia and ME for Montenegro.
	//
	CountryCodeTypeYU CountryCodeType = "YU"

	//
	// Zambia.
	//
	CountryCodeTypeZM CountryCodeType = "ZM"

	//
	// Zimbabwe.
	//
	CountryCodeTypeZW CountryCodeType = "ZW"

	//
	// NOTE: APO/FPO was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country code list for backward
	// compatibility.
	//
	CountryCodeTypeAA CountryCodeType = "AA"

	//
	// NOTE: Guernsey was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQM CountryCodeType = "QM"

	//
	// NOTE: Jan Mayen was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQN CountryCodeType = "QN"

	//
	// NOTE: Jersey was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQO CountryCodeType = "QO"

	CountryCodeTypeQP CountryCodeType = "QP"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	CountryCodeTypeCustomCode CountryCodeType = "CustomCode"
)

type ExternalProductCodeType string

const (

	//
	// ExternalProductID.Value contains an ISBN value.
	// Required when you pass an ISBN as the external product ID.
	// (This value is also applicable to Half.com listings.)
	//
	ExternalProductCodeTypeISBN ExternalProductCodeType = "ISBN"

	//
	// ExternalProductID.Value contains a UPC value.
	// Required when you pass a UPC as the external product ID.
	// (This value is also applicable to Half.com listings.)
	//
	ExternalProductCodeTypeUPC ExternalProductCodeType = "UPC"

	//
	// ExternalProductID.Value contains an eBay catalog product ID.
	// Required when you pass an eBay product ID
	// as the external product ID.
	// Not applicable with FindItemsAdvanced or FindProducts.
	//
	ExternalProductCodeTypeProductID ExternalProductCodeType = "ProductID"

	//
	// ExternalProductID.Value contains an EAN value.
	// Required when you pass an EAN as the external product ID.
	//
	ExternalProductCodeTypeEAN ExternalProductCodeType = "EAN"

	//
	// ExternalProductID.Value contains a set of keywords that uniquely identify the product.
	// Only applicable when listing event ticket.
	// See the eBay Features Guide for information about valid
	// ticket keywords for an external product ID.
	// Required when you pass a set of keywords as the external product ID.
	// Not applicable with FindItemsAdvanced or FindProducts.
	// With FindItemsAdvanced, use TicketFinder instead.
	//
	ExternalProductCodeTypeKeywords ExternalProductCodeType = "Keywords"

	//
	// Reserved for future use.
	//
	ExternalProductCodeTypeMPN ExternalProductCodeType = "MPN"

	//
	// Reserved for internal or future use
	//
	ExternalProductCodeTypeCustomCode ExternalProductCodeType = "CustomCode"
)

type FeedbackRatingDetailCodeType string

const (

	//
	// Detailed seller rating in the area of "item as described."
	//
	FeedbackRatingDetailCodeTypeItemAsDescribed FeedbackRatingDetailCodeType = "ItemAsDescribed"

	//
	// Detailed seller rating in the area of "communication."
	//
	FeedbackRatingDetailCodeTypeCommunication FeedbackRatingDetailCodeType = "Communication"

	//
	// Detailed seller rating in the area of "shipping time." Inapplicable to
	// motor vehicle items.
	//
	FeedbackRatingDetailCodeTypeShippingTime FeedbackRatingDetailCodeType = "ShippingTime"

	//
	// Detailed seller rating in the area of "charges for shipping and handling."
	// Inapplicable to motor vehicle items.
	//
	FeedbackRatingDetailCodeTypeShippingAndHandlingCharges FeedbackRatingDetailCodeType = "ShippingAndHandlingCharges"

	//
	// (out) Reserved for internal or future use.
	//
	FeedbackRatingDetailCodeTypeCustomCode FeedbackRatingDetailCodeType = "CustomCode"
)

type HalfItemConditionCodeType string

const (

	//
	// New, unread, unused and in perfect condition.
	//
	HalfItemConditionCodeTypeBrandNew HalfItemConditionCodeType = "BrandNew"

	//
	// Item still in original packaging, no wear and tear, all
	// facets of the product are intact.  (Could easily be mistaken
	// for brand new.)
	//
	HalfItemConditionCodeTypeLikeNew HalfItemConditionCodeType = "LikeNew"

	//
	// Doesn't look brand new but has no easily noticeable damage
	// and very minimal wear and tear.  (You would give it to a
	// good friend as a gift)
	//
	HalfItemConditionCodeTypeVeryGood HalfItemConditionCodeType = "VeryGood"

	//
	// Very minimal damage to the item and still includes all accessories
	// such as dust jackets, liner notes, and cases.
	// (You would use it yourself, but wouldn't necessarily give it as a gift)
	//
	HalfItemConditionCodeTypeGood HalfItemConditionCodeType = "Good"

	//
	// Some damage to the item but integrity still intact.  May be missing an
	// accessory. (Item beaten up a bit but it works)
	//
	HalfItemConditionCodeTypeAcceptable HalfItemConditionCodeType = "Acceptable"

	//
	// Some damage to the item and visibly used.
	//
	HalfItemConditionCodeTypeUsed HalfItemConditionCodeType = "Used"

	//
	// (out) Reserved for internal or future use
	//
	HalfItemConditionCodeTypeCustomCode HalfItemConditionCodeType = "CustomCode"
)

type InsuranceOptionCodeType string

const (

	//
	// The seller offers the buyer the choice of paying
	// for shipping insurance or not.
	//
	InsuranceOptionCodeTypeOptional InsuranceOptionCodeType = "Optional"

	//
	// The seller requires that the buyer pay for
	// shipping insurance.
	//
	InsuranceOptionCodeTypeRequired InsuranceOptionCodeType = "Required"

	//
	// The seller does not offer shipping insurance to the buyer.
	//
	InsuranceOptionCodeTypeNotOffered InsuranceOptionCodeType = "NotOffered"

	//
	// The seller is not charging separately for shipping
	// insurance costs; any insurance is already included in the
	// base shipping cost.
	//
	InsuranceOptionCodeTypeIncludedInShippingHandling InsuranceOptionCodeType = "IncludedInShippingHandling"

	//
	// Shipping insurance is not offered as a separate option on the site
	// where the item is listed. (Some shipping services, such as
	// DE_InsuredExpressOrCourier, include insurance as part of the service.) If
	// another insurance option is specified in the listing request and the site does
	// not support shipping insurance as a separate option, eBay will reset the
	// insurance option to this value. At the time of this writing, this option is
	// only meaningful for the eBay Germany, Austria, and Switzerland sites.
	//
	InsuranceOptionCodeTypeNotOfferedOnSite InsuranceOptionCodeType = "NotOfferedOnSite"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	InsuranceOptionCodeTypeCustomCode InsuranceOptionCodeType = "CustomCode"
)

type ListingStatusCodeType string

const (

	//
	// (out) The listing is still live, or it has recently ended
	// but eBay has not completed processing
	// the listing (e.g., we're still determining the high bidder).
	// A multi-item listing is considered active until all items
	// have winning bids or purchases or the listing's end time
	// has passed. (That is, if the listing has a Quantity of 10,
	// the sale of 1 of those items doesn't end the listing.)
	// If the listing has ended but this Active
	// status is returned, please allow several minutes for eBay to
	// finish processing the listing.
	//
	ListingStatusCodeTypeActive ListingStatusCodeType = "Active"

	//
	// (out) The listing has ended and eBay has completed processing
	// of the sale (if any), such as determining the high bidder.
	//
	ListingStatusCodeTypeEnded ListingStatusCodeType = "Ended"

	//
	// (out) The listing has ended and eBay has completed processing
	// of the sale (if any), such as determining the high bidder.
	// You can think of Completed and Ended as essentially equivalent.
	// (The difference is only meaningful to the seller of the item,
	// as Completed indicates whether eBay has finished calculating
	// certain selling fees.)
	//
	ListingStatusCodeTypeCompleted ListingStatusCodeType = "Completed"

	//
	// (out) Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	ListingStatusCodeTypeCustomCode ListingStatusCodeType = "CustomCode"
)

type ListingTypeCodeType string

const (

	//
	// Unknown auction type. (This is not normally used.)
	//
	ListingTypeCodeTypeUnknown ListingTypeCodeType = "Unknown"

	//
	// Single-quantity online auction format.
	// A Chinese auction has a Quantity of 1. Buyers engage in competitive bidding,
	// although Buy It Now may be offered as long as no bids have been placed.
	// Online auctions are listed on eBay.com, and they are also listed in
	// the seller's eBay Store if the seller is a Store owner.
	//
	ListingTypeCodeTypeChinese ListingTypeCodeType = "Chinese"

	//
	// This value is no longer applicable.
	//
	//
	ListingTypeCodeTypeDutch ListingTypeCodeType = "Dutch"

	//
	// Live auction, on-site auction that can include non-eBay bidders. Live auctions
	// are listed on the eBay Live Auctions site, in live auction categories. They can
	// also appear on eBay if the seller lists the lot in a secondary, eBay category.
	//
	ListingTypeCodeTypeLive ListingTypeCodeType = "Live"

	//
	// Reserved for future use.
	//
	ListingTypeCodeTypeAuction ListingTypeCodeType = "Auction"

	//
	// Advertisement to solicit inquiries on listings such as real estate. Permits no
	// bidding on that item, service, or property. To express interest, a buyer fills
	// out a contact form that eBay forwards to the seller as a lead. This format
	// does not enable buyers and sellers to transact online through eBay, and eBay
	// Feedback is not available for ad format listings.
	//
	ListingTypeCodeTypeAdType ListingTypeCodeType = "AdType"

	//
	// This value is no longer applicable.
	//
	//
	ListingTypeCodeTypeStoresFixedPrice ListingTypeCodeType = "StoresFixedPrice"

	//
	// Second chance offer made to a non-winning bidder on an ended listing. A seller
	// can make an offer to a non-winning bidder when either the winning bidder has
	// failed to pay for an item or the seller has a duplicate of the item. Second-
	// chance offer items are on eBay, but they do not appear when browsing or
	// searching listings. You need to already know the item ID in order to retrieve a
	// second-chance offer.
	//
	ListingTypeCodeTypePersonalOffer ListingTypeCodeType = "PersonalOffer"

	//
	// A basic fixed-price listing with a Quantity of 1. Allows no auction-style
	// bidding. Also known as Buy It Now Only on some sites, this should not to be
	// confused with the BuyItNow option that is available for competitive-bid
	// auctions. Fixed-price listings appear on eBay.com. They are also listed in a
	// seller's eBay Store if the seller is a Store owner.
	//
	ListingTypeCodeTypeFixedPriceItem ListingTypeCodeType = "FixedPriceItem"

	//
	// Half.com listing (item is listed on Half.com, not on eBay).
	// Reserved for future use.
	//
	ListingTypeCodeTypeHalf ListingTypeCodeType = "Half"

	//
	// Lead Generation format (advertisement-style listing to solicit
	// inquiries or offers, no bidding or fixed price, listed on eBay).
	//
	ListingTypeCodeTypeLeadGeneration ListingTypeCodeType = "LeadGeneration"

	//
	// This value is no longer applicable.
	//
	//
	ListingTypeCodeTypeExpress ListingTypeCodeType = "Express"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	ListingTypeCodeTypeCustomCode ListingTypeCodeType = "CustomCode"
)

type MinimumAdvertisedPriceExposureCodeType string

const (

	//
	// PreCheckout specifies that the buyer must click a link (or a button) to navigate to a separate
	// page (or window) that displays the discount price.
	//
	MinimumAdvertisedPriceExposureCodeTypePreCheckout MinimumAdvertisedPriceExposureCodeType = "PreCheckout"

	//
	// DuringCheckout specifies that the discounted price must be shown on the eBay checkout
	// flow page.
	//
	MinimumAdvertisedPriceExposureCodeTypeDuringCheckout MinimumAdvertisedPriceExposureCodeType = "DuringCheckout"

	//
	// None means the discount price is not shown via either PreCheckout nor DuringCheckout.
	//
	MinimumAdvertisedPriceExposureCodeTypeNone MinimumAdvertisedPriceExposureCodeType = "None"

	//
	// Reserved for future use.
	//
	MinimumAdvertisedPriceExposureCodeTypeCustomCode MinimumAdvertisedPriceExposureCodeType = "CustomCode"
)

type PricingTreatmentCodeType string

const (

	//
	// STP stands for Strikethrough Pricing.
	//
	PricingTreatmentCodeTypeSTP PricingTreatmentCodeType = "STP"

	//
	// MAP stands for Minimum Advertised Price.
	//
	PricingTreatmentCodeTypeMAP PricingTreatmentCodeType = "MAP"

	//
	// None means the item does not qualify for either STP or MAP pricing.
	//
	PricingTreatmentCodeTypeNone PricingTreatmentCodeType = "None"

	//
	// Reserved for future use.
	//
	PricingTreatmentCodeTypeCustomCode PricingTreatmentCodeType = "CustomCode"
)

type ProductIDCodeType string

const (

	//
	// ISBN-10 or ISBN-13 value for books. (The string length of ProductID
	// indicates whether the ID is 10 or 13 characters.)
	// If you know a book's ISBN, you can use this instead of the
	// eBay CatalogItem or Reference ID to search for that book.
	// Max length of corresponding value: 13
	//
	ProductIDCodeTypeISBN ProductIDCodeType = "ISBN"

	//
	// EAN value for books. (This is used more commonly in
	// European countries.)
	// If you know a book's EAN, you can use this instead of the
	// eBay CatalogItem or Reference ID to search for that book.
	// Max length of corresponding value: 13
	//
	ProductIDCodeTypeEAN ProductIDCodeType = "EAN"

	//
	// UPC value for products in Music (e.g., CDs), DVDs & Movies,
	// and Video Games categories (or domains).
	// If you know a product's UPC, you can use this instead of the
	// eBay CatalogItem or Reference ID to search for that product.
	// Max length of corresponding value: 12
	//
	ProductIDCodeTypeUPC ProductIDCodeType = "UPC"

	//
	// Manufacturer's part number for products like electronics.
	//
	ProductIDCodeTypeMPN ProductIDCodeType = "MPN"

	//
	// Reserved for future use.
	//
	ProductIDCodeTypeKeywords ProductIDCodeType = "Keywords"

	//
	// Reserved for future use.
	//
	ProductIDCodeTypeCatalogItem ProductIDCodeType = "CatalogItem"

	//
	// The global reference ID for an eBay catalog product.
	// A reference ID is a fixed reference to a product
	// (regardless of version).
	// One reference ID can be associated with multiple CatalogItem IDs.
	// To determine valid reference IDs for products to use as input to FindProducts, first call
	// FindProducts with QueryKeywords (or ProductID).
	// Each product in the response includes a reference ID.<br><br>
	// If you specify one of these products in a request, the call may return the product with a warning,
	// or it may return an error if the product has been deleted.
	//
	ProductIDCodeTypeReference ProductIDCodeType = "Reference"

	//
	// Reserved for internal or future use.
	//
	ProductIDCodeTypeCustomCode ProductIDCodeType = "CustomCode"
)

type ProductSortCodeType string

const (

	//
	// Sort by product popularity (as determined by eBay).
	// (This is the default sort order.)
	//
	ProductSortCodeTypePopularity ProductSortCodeType = "Popularity"

	//
	// Sort by average rating.
	//
	ProductSortCodeTypeRating ProductSortCodeType = "Rating"

	//
	// Sort by the number of reviews on eBay.
	//
	ProductSortCodeTypeReviewCount ProductSortCodeType = "ReviewCount"

	//
	// Sort by the number of active items listed with this product.
	//
	ProductSortCodeTypeItemCount ProductSortCodeType = "ItemCount"

	//
	// Sort by the product title.
	//
	ProductSortCodeTypeTitle ProductSortCodeType = "Title"

	//
	// Reserved for values that are not available in the version of the schema
	// you are using. This means if in a newer version of the API eBay adds a new value to <b>ProductSortCodeList</b> type and the request was using a <i>lower</i> version, 'CustomCode' is returned instead of the new value.
	//
	ProductSortCodeTypeCustomCode ProductSortCodeType = "CustomCode"
)

type ProductStateCodeType string

const (

	//
	// The product details have been updated.
	// If your application currently uses the product for listing or searching,
	// we recommend that you check to make sure the product data still meets your needs.
	//
	ProductStateCodeTypeUpdate ProductStateCodeType = "Update"

	//
	// This product has changed. This product has been mapped to a newer
	// product in the catalog that eBay (or Half.com) is currently using,
	// and its details have been updated based on the new catalog data.
	// The product reference ID remains the same
	// (but the longer product ID string may have changed).
	// If your application currently uses the product for searching,
	// we recommend that you check to make sure the product data still meets your needs.
	//
	ProductStateCodeTypeUpdateMajor ProductStateCodeType = "UpdateMajor"

	//
	// This product was previously available in an earlier catalog,
	// but it has not been mapped to a product in the catalog that eBay
	// is currently using. It can still be used for searching, but
	// it may contain fewer details than other products.
	// If your application currently uses the product for searching,
	// we recommend that you check to make sure the product data still meets your needs.
	// Not applicable to Half.com.
	//
	ProductStateCodeTypeUpdateNoDetails ProductStateCodeType = "UpdateNoDetails"

	//
	// Some information in this product is scheduled to be merged into another product
	// in the catalog that eBay (or Half.com) is currently using. This product may
	// be removed from the system at any time.
	// If your application currently uses the product for searching,
	// we recommend that you update your application to use a product that is not
	// scheduled to be merged or deleted.
	//
	ProductStateCodeTypeMerge ProductStateCodeType = "Merge"

	//
	// This product is marked for deletion, and it will not be mapped to another product.
	// If your application currently uses the product for searching,
	// we recommend that you update your application to use a product that is not
	// scheduled to be merged or deleted.
	//
	ProductStateCodeTypeDelete ProductStateCodeType = "Delete"

	//
	// Reserved for internal or future use.
	//
	ProductStateCodeTypeCustomCode ProductStateCodeType = "CustomCode"
)

type QuantityAvailableHintCodeType string

const (

	//
	// (out) The message "Limited quantity available" is shown in the web
	// flow (e.g., for a flash sale or a Daily Deal).
	//
	QuantityAvailableHintCodeTypeLimited QuantityAvailableHintCodeType = "Limited"

	//
	// (out) The message "More than 10 available" is shown in the web flow.
	// 10 is the value of QuantityThreshold tag based on the seller's
	// preference.
	//
	QuantityAvailableHintCodeTypeMoreThan QuantityAvailableHintCodeType = "MoreThan"

	//
	// Reserved for internal or future use.
	//
	QuantityAvailableHintCodeTypeCustomCode QuantityAvailableHintCodeType = "CustomCode"
)

type ReviewSortCodeType string

const (

	//
	// Sorts reviews by creation time, in ascending or descending order.
	//
	ReviewSortCodeTypeCreationTime ReviewSortCodeType = "CreationTime"

	//
	// Reserved for values that are not available in the version of the schema
	// you are using. This means if in a newer version of the API eBay adds a new
	// value to <b>ProductSortCodeList</b> type and the request was using
	// a <i>lower</i> version, 'CustomCode' is returned instead of the
	// new value.
	//
	ReviewSortCodeTypeCustomCode ReviewSortCodeType = "CustomCode"
)

type ShippingTypeCodeType string

const (

	//
	// The flat rate shipping model: the seller establishes the cost of shipping and cost of
	// shipping insurance, regardless of what any buyer-selected shipping service
	// might charge the seller.
	//
	ShippingTypeCodeTypeFlat ShippingTypeCodeType = "Flat"

	//
	// The calculated shipping model: the posted cost of shipping is based on the
	// seller-offered and buyer-selected shipping service, where the shipping costs
	// are calculated by eBay and the shipping carrier based on the buyer's address,
	// and any packaging/handling costs established by the seller are automatically
	// rolled into the total.
	//
	ShippingTypeCodeTypeCalculated ShippingTypeCodeType = "Calculated"

	//
	// The freight shipping model: the cost of shipping is determined by a third
	// party, FreightQuote.com, based on the item location (zip code). Currently,
	// Freight can only be specified on input via eBay Web site, not via API.
	//
	ShippingTypeCodeTypeFreight ShippingTypeCodeType = "Freight"

	//
	// Free is used when the seller is declaring that shipping is free for the buyer.
	// Since Free cannot be selected via API, the seller has two options for
	// signifying that shipping is free when listing an item:
	// <br>
	// - omit shipping details, mention in the item description that shipping is
	// free, and set ShippingTermsInDescription to true
	// <br>
	// - select an arbitrary shipping service and set its shipping cost to 0, mention
	// in the item description that shipping is free, and set
	// ShippingTermsInDescription to true
	// <br>
	// The latter is a better way to communicate "free shipping" because eBay picks
	// up the "0" cost and can more accurately identify shipping costs in search
	// results.
	//
	ShippingTypeCodeTypeFree ShippingTypeCodeType = "Free"

	//
	// The seller did not specify the shipping type.
	//
	ShippingTypeCodeTypeNotSpecified ShippingTypeCodeType = "NotSpecified"

	//
	// The seller specified one or more flat domestic shipping services
	// and one or more calculated international shipping services.
	//
	ShippingTypeCodeTypeFlatDomesticCalculatedInternational ShippingTypeCodeType = "FlatDomesticCalculatedInternational"

	//
	// The seller specified one or more calculated domestic shipping services
	// and one or more flat international shipping services.
	//
	ShippingTypeCodeTypeCalculatedDomesticFlatInternational ShippingTypeCodeType = "CalculatedDomesticFlatInternational"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	ShippingTypeCodeTypeCustomCode ShippingTypeCodeType = "CustomCode"
)

type UserIDType string

const ()

type AbstractRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AbstractRequestType"`

	//
	// If you pass a value in MessageID in a request,
	// we'll return the same value in CorrelationID in the response.
	// If you're making a lot of calls, you can use this for tracking that a
	// response is returned for every request and to match
	// particular responses to particular requests. (In this case, specify
	// a different value for each request.) You can specify any value
	// that is useful to you.
	//
	MessageID string `xml:"MessageID,omitempty"`
}

type AbstractResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AbstractResponseType"`

	//
	// This value represents the date and time when eBay processed the
	// request. The time zone of this value is <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#dateTime">GMT</a>
	// and the format is the
	// ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ).
	// See the "dateTime" type for information about this
	// time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"Timestamp,omitempty"`

	//
	// Indicates whether the call was successfully processed by eBay.
	//
	Ack *AckCodeType `xml:"Ack,omitempty"`

	//
	// A list of application-level errors or warnings (if any) that were raised
	// when eBay processed the request. <br>
	// <br>
	// Application-level errors occur due to
	// problems with business-level data on the client side or on the eBay
	// server side. For example, an error would occur if the request contains
	// an invalid combination of fields, or it is missing a required field,
	// or the value of the field is not recognized. An error could also occur
	// if eBay encountered a problem in our internal business logic while
	// processing the request.<br>
	// <br>
	// Only returned if there were warnings or errors.
	//
	Errors []*ErrorType `xml:"Errors,omitempty"`

	//
	// This refers to the particular software build that eBay used when
	// processing the request and generating the response. This includes the
	// version number plus additional information. eBay Developer Support may
	// request the build information when helping you resolve technical issues.
	//
	Build string `xml:"Build,omitempty"`

	//
	// The release version that eBay used to process the request.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// This is usually the latest release version, as specified in the
	// release notes. (eBay releases the API to international sites
	// about a week after we release it to the US site.) </span><br>
	// <br>
	// If a field in the response returns the token "CustomCode", it usually
	// means that the field is a code type (a token or enumeration),
	// and that in your request URL (or HTTP header) you specified a
	// version that is older than the version in which the token was added
	// to the call.
	//
	Version string `xml:"Version,omitempty"`

	//
	// If you pass a value in MessageID in a request, we will return the same
	// value in CorrelationID in the response. You can use this for tracking
	// that a response is returned for every request and to match particular
	// responses to particular requests. Only returned if MessageID was used.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`
}

type AmountType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AmountType"`

	Value float64

	//
	// Currency in which the monetary amount is specified.
	// See CurrencyCodeType for applicable values.
	//
	CurrencyID *CurrencyCodeType `xml:"currencyID,attr,omitempty"`
}

type ErrorParameterType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ErrorParameterType"`

	//
	// The value of the variable.
	//
	Value string `xml:"Value,omitempty"`

	//
	// The index of the parameter in the error.
	//
	ParamID string `xml:"ParamID,attr,omitempty"`
}

type ErrorType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ErrorType"`

	//
	// A brief description of the condition that raised the error.
	//
	ShortMessage string `xml:"ShortMessage,omitempty"`

	//
	// A more detailed description of the condition that raised the error.
	//
	LongMessage string `xml:"LongMessage,omitempty"`

	//
	// A unique code that identifies the particular error condition that occurred.
	// Your application can use error codes as identifiers
	// in your customized error-handling algorithms.
	//
	ErrorCode string `xml:"ErrorCode,omitempty"`

	//
	// This field is not currently in use for eBay Shopping API.
	// Indicates whether the error message text is intended to be displayed to
	// an end user or intended only to be parsed by the application.
	// If true or not present (the default), the message text is intended for the end user. If false, the message text is intended for
	// the application, and the application should translate the error into a more appropriate message.
	//
	UserDisplayHint bool `xml:"UserDisplayHint,omitempty"`

	//
	// Indicates whether the error caused the request to fail.<br>
	// <br>
	// If the request fails and the source of the problem is within the
	// application (such as a missing required element), please change the
	// application before you  retry the request. If the problem is due to
	// end-user input data, please alert the end-user to the problem and
	// provide the means for them to correct the data. Once the problem in the
	// application or data is resolved, you can attempt to re-send the request
	// to eBay.<br>
	// <br>
	// If the source of the problem is on eBay's side, you can retry the
	// request as-is a reasonable number of times (eBay recommends twice).
	// If the error persists, contact Developer Technical Support. Once the
	// problem has been resolved, the request may be resent in its original
	// form.<br>
	// <br>
	// When a warning occurs, the error is returned in addition to the business
	// data. In this case, you do not need to retry the request (as the
	// original request was successful). However, depending on the cause or
	// nature of the warning, you might need to contact either the end user or
	// eBay to effect a long term solution to the problem to prevent it from
	// reoccurring in the future.
	//
	SeverityCode *SeverityCodeType `xml:"SeverityCode,omitempty"`

	//
	// Some warning and error messages return one or more variables that
	// contain contextual information about the error. This is often the
	// field or value that triggered the error.
	// You can usually predict where these will
	// occur by looking at the "replaceable_value" indicators in our
	// Errors by Number page.
	//
	ErrorParameters []*ErrorParameterType `xml:"ErrorParameters,omitempty"`

	//
	// API errors are divided between two classes: system errors and request errors.
	//
	ErrorClassification *ErrorClassificationCodeType `xml:"ErrorClassification,omitempty"`
}

type SimpleUserType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SimpleUserType"`

	//
	// The user's unique eBay user ID.
	// <br />
	// <br />
	// When reporting UserIDs in bidding situations (such was when listing
	// the high bidder in an auction), eBay replaces the UserID value with
	// an anonymous bidder name value, such as "a***o".
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// Indicates whether the user has chosen to make their feedback score and
	// feedback details private (hidden from other users). Note that the percentage
	// of positive feedback can still be returned, even if other feedback details are
	// private. If a bidder's user information is made
	// anonymous, the value -99 is returned.
	//
	FeedbackPrivate bool `xml:"FeedbackPrivate,omitempty"`

	//
	// Visual indicator of user's feedback score.
	//
	FeedbackRatingStar *FeedbackRatingStarCodeType `xml:"FeedbackRatingStar,omitempty"`

	//
	// The aggregate feedback score of a user. A user's feedback score is the net
	// positive feedback minus the net negative feedback left for the user.
	// <br>
	// <br>
	// Feedback scores are a quantitative expression of the desirability of dealing with
	// a user as a buyer or a seller in transactions. Each transaction can result in one
	// feedback entry for a given user. (The buyer can leave feedback for the seller, and
	// the seller can leave feedback for the buyer.) That one feedback can be positive,
	// negative, or neutral. The aggregate feedback score of a user represents that
	// user's overall feedback score (referred to as a "feedback rating" on the eBay
	// site). If the user has chosen to make their feedback private, then FeedbackScore
	// is not returned and FeedbackPrivate is returned with a value of true.
	// <br>
	// <br>
	// If a bidder's user information is made anonymous, the value -99 is returned.
	//
	FeedbackScore int32 `xml:"FeedbackScore,omitempty"`

	//
	// Indicates whether eBay has made this user's information anonymous.
	// This occurs when the listing prices (reserve, current, or Buy It Now)
	// reach or exceed a certain amount (such as $200 USD at the time of this
	// writing).
	// <br>
	// <br>
	// If true, certain other fields about this user are not returned, or their values
	// include no identifying characteristics. (The rules are explained in the
	// description of each field.) If false, all user-specific fields contain the user's
	// actual data.
	//
	UserAnonymized bool `xml:"UserAnonymized,omitempty"`

	//
	// If true, identifies a new user who has been a registered eBay user for 30 days
	// or less. Always false after the user has been registered for more than 30
	// days. Does not indicate an ID change.
	//
	NewUser bool `xml:"NewUser,omitempty"`

	//
	// The date the specified user originally registered with eBay. If a bidder's user
	// information is made anonymous, the value -99 is returned.
	//
	RegistrationDate time.Time `xml:"RegistrationDate,omitempty"`

	//
	// The eBay site with which the user is registered. If a bidder's user information is
	// made anonymous, the value -99 is returned.
	//
	RegistrationSite *SiteCodeType `xml:"RegistrationSite,omitempty"`

	//
	// The registration-related status of the user.
	//
	Status *UserStatusCodeType `xml:"Status,omitempty"`

	//
	// Type of seller account.
	//
	SellerBusinessType *SellerBusinessCodeType `xml:"SellerBusinessType,omitempty"`

	//
	// The URL of the seller's eBay Store page.
	//
	StoreURL *AnyURI `xml:"StoreURL,omitempty"`

	//
	// The name of the seller's eBay Store.
	//
	StoreName string `xml:"StoreName,omitempty"`

	//
	// URL for seller's other items.
	//
	SellerItemsURL *AnyURI `xml:"SellerItemsURL,omitempty"`

	//
	// A link to the user's AboutMe page.
	//
	AboutMeURL *AnyURI `xml:"AboutMeURL,omitempty"`

	//
	// A link to the URL of the user's MyWorld page.
	//
	MyWorldURL *AnyURI `xml:"MyWorldURL,omitempty"`

	//
	// Location of a user's image on the MyWorld page (small version).
	//
	MyWorldSmallImage *AnyURI `xml:"MyWorldSmallImage,omitempty"`

	//
	// Location of a user's image on the MyWorld page (large version).
	//
	MyWorldLargeImage *AnyURI `xml:"MyWorldLargeImage,omitempty"`

	//
	// The URL of reviews and guides.
	//
	ReviewsAndGuidesURL *AnyURI `xml:"ReviewsAndGuidesURL,omitempty"`

	//
	// The URL of feedback details.
	//
	FeedbackDetailsURL *AnyURI `xml:"FeedbackDetailsURL,omitempty"`

	//
	// A seller's positive feedback score. The percentage value of a seller's
	// positive feedback is calculated by dividing the seller's positive feedback
	// score by their negative feedback score. The last 12 months of feedback
	// scores are taken into consideration for this calculation.
	//
	PositiveFeedbackPercent float32 `xml:"PositiveFeedbackPercent,omitempty"`

	//
	// The user's eBay PowerSeller tier. No longer returned for the US, DE/AT/CH, and
	// UK/IE sites. Note that SellerLevel may be suppressed for other sites, as well.
	//
	SellerLevel *SellerLevelCodeType `xml:"SellerLevel,omitempty"`

	//
	// Returned when seller is certified as a top-rated seller, and is qualified for benefits such as final value fee
	// discount and increased visibility in fixed-price searches.
	//
	TopRatedSeller bool `xml:"TopRatedSeller,omitempty"`
}

type AddressType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddressType"`

	//
	// User's name for the address.
	// Also applicable to Half.com (for GetOrders).
	//
	Name string `xml:"Name,omitempty"`

	//
	// A concatenation of Street1 and Street2, primarily for RegistrationAddress.
	// Not applicable to Half.com.
	//
	Street string `xml:"Street,omitempty"`

	//
	// Line 1 of the user's street address.
	// Also applicable to Half.com (for GetOrders).
	//
	Street1 string `xml:"Street1,omitempty"`

	//
	// Line 2 of the user's address (such as an apartment number).
	// Returned if the user specified a second street value for their address.
	// Also applicable to Half.com (for GetOrders).<br>
	// In case of Item.SellerContactDetails, Street2 can be used to provide City, Address, State, and Zip code (if applicable).
	//
	Street2 string `xml:"Street2,omitempty"`

	//
	// The name of the user's city.
	// Also applicable to Half.com (for GetOrders).
	//
	CityName string `xml:"CityName,omitempty"`

	//
	// County information for the user.
	// This field applies to Classified Ad format listings and to the UK only.
	// Not applicable to Half.com.
	//
	County string `xml:"County,omitempty"`

	//
	// The region of the user's address.
	// Also applicable to Half.com (for GetOrders).
	//
	StateOrProvince string `xml:"StateOrProvince,omitempty"`

	//
	// The name of the user's country.
	// Also applicable to Half.com (for GetOrders).
	//
	CountryName string `xml:"CountryName,omitempty"`

	//
	// User's primary phone number. This may return a value of
	// "Invalid Request" if you are not authorized to see the
	// user's phone number.
	// Also applicable to Half.com (for GetOrders).
	//
	Phone string `xml:"Phone,omitempty"`

	//
	// Country Prefix of the secondary phone number. This value is derived from
	// inputs supplied for PhoneCountryCode.
	// This field applies to Classified Ad format listings only.
	//
	PhoneCountryPrefix string `xml:"PhoneCountryPrefix,omitempty"`

	//
	// Area or City Code of a user's primary phone number.
	// This field applies to Classified Ad format listings only.
	//
	PhoneAreaOrCityCode string `xml:"PhoneAreaOrCityCode,omitempty"`

	//
	// The local number portion of the user's primary phone number.
	// This field applies to Classified Ad format listings only.
	// <br>
	// <b>Note:</b> The full primary phone number is constructed by
	// combining PhoneLocalNumber with PhoneAreaOrCityCode and PhoneCountryPrefix.
	//
	PhoneLocalNumber string `xml:"PhoneLocalNumber,omitempty"`

	//
	// Country prefix of a user's secondary phone number. This value is derived from
	// inputs supplied for Phone2CountryCode.
	// This field applies to Classified Ad format listings only.
	//
	Phone2CountryPrefix string `xml:"Phone2CountryPrefix,omitempty"`

	//
	// Area or City Code of a user's secondary phone number.
	// This field applies to Classified Ad format listings only.
	//
	Phone2AreaOrCityCode string `xml:"Phone2AreaOrCityCode,omitempty"`

	//
	// The local number portion of the user's secondary phone number.
	// This field applies to Classified Ad format listings only.
	// <br>
	// <b>Note:</b> The full secondary phone number is constructed by
	// combining Phone2LocalNumber with Phone2AreaOrCityCode and Phone2CountryPrefix.
	//
	Phone2LocalNumber string `xml:"Phone2LocalNumber,omitempty"`

	//
	// User's postal code.
	// <br>
	// <br>
	// If not provided as input for GetCart or SetCart, eBay uses the country associated
	// with the SiteID in effect when the call is made.
	// <br>
	// <br>
	// Also applicable to Half.com (for GetOrders).
	//
	PostalCode string `xml:"PostalCode,omitempty"`

	//
	// ID assigned to the address in the eBay database.
	// For GetOrders, applies only to Half.com.
	//
	AddressID string `xml:"AddressID,omitempty"`

	//
	// ID assigned to the address by the owner of the address (fitting
	// only if the address is owned by PayPal; see AddressOwner).
	// Also applicable to Half.com (for GetOrders).
	//
	ExternalAddressID string `xml:"ExternalAddressID,omitempty"`

	//
	// Seller's international name that is associated with the payment address.
	// Only applicable to SellerPaymentAddress.
	// Not applicable to Half.com.
	//
	InternationalName string `xml:"InternationalName,omitempty"`

	//
	// International state and city for the seller's payment address.
	// Only applicable to SellerPaymentAddress.
	// Not applicable to Half.com.
	//
	InternationalStateAndCity string `xml:"InternationalStateAndCity,omitempty"`

	//
	// Seller's international street address that is associated with the payment address.
	// Only applicable to SellerPaymentAddress.
	// Not applicable to Half.com.
	//
	InternationalStreet string `xml:"InternationalStreet,omitempty"`

	//
	// User's company name. Only returned if available.
	// Not applicable to Half.com.
	//
	CompanyName string `xml:"CompanyName,omitempty"`

	//
	// Displays the first name of the seller (in a business
	// card format) if the seller's SellerBusinessCodeType
	// is set to 'Commercial'.
	//
	FirstName string `xml:"FirstName,omitempty"`

	//
	// Displays the last name of the seller (in a business
	// card format) if the seller's SellerBusinessCodeType
	// is set to 'Commercial'.
	//
	LastName string `xml:"LastName,omitempty"`
}

type AverageRatingDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AverageRatingDetailsType"`

	//
	// The area of a specific average detailed seller rating.
	// Users retrieve detailed ratings as averages of the ratings left by buyers.
	// When buyers leave an overall Feedback rating (positive, neutral, or negative)
	// for a seller, they also can leave ratings in four areas:
	// item as described, communication, shipping time, and charges for shipping and handling.
	//
	RatingDetail *FeedbackRatingDetailCodeType `xml:"RatingDetail,omitempty"`

	//
	// An average detailed seller rating applying to the area in the corresponding RatingDetail field.
	//
	Rating float64 `xml:"Rating,omitempty"`

	//
	// The number of detailed seller ratings in the area
	// in the corresponding RatingDetail field.
	//
	RatingCount int64 `xml:"RatingCount,omitempty"`
}

type BusinessSellerDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents BusinessSellerDetailsType"`

	//
	// Displays the Address of the seller (in a business card
	// format) as part of the data returned in the
	// GetSingleItem call if the seller's SellerBusinessCodeType
	// is set to 'Commercial'.
	//
	Address *AddressType `xml:"Address,omitempty"`

	//
	// Displays the fax number of the seller (in a business card
	// format) as part of the data returned in the
	// GetSingleItem call if the seller's SellerBusinessCodeType
	// is set to 'Commercial'.
	//
	Fax string `xml:"Fax,omitempty"`

	//
	// Displays the email address of the seller (in a business
	// card format) as part of the data returned in the
	// GetSingleItem call if the seller's
	// SellerBusinessCodeType is set to 'Commercial'.
	//
	Email string `xml:"Email,omitempty"`

	//
	// Displays the AdditionalContactInformation of the seller
	// (in a business card format) as part of the data returned
	// in the GetSingleItem call if the seller's
	// SellerBusinessCodeType is set to 'Commercial'.
	//
	AdditionalContactInformation string `xml:"AdditionalContactInformation,omitempty"`

	//
	// Displays the TradeRegistrationNumber of the seller (in a
	// business card format) as part of the data returned in the
	// GetSingleItem call if the seller's SellerBusinessCodeType
	// is set to 'Commercial'.
	//
	TradeRegistrationNumber string `xml:"TradeRegistrationNumber,omitempty"`

	//
	// Displays the LegalInvoice of the seller (in a business card
	// format) as part of the data returned in the GetSingleItem
	// call if the seller's SellerBusinessCodeType is set to
	// 'Commercial'.
	//
	LegalInvoice bool `xml:"LegalInvoice,omitempty"`

	//
	// Displays the TermsAndConditions of the seller (in a business card
	// format) as part of the data returned in the GetSingleItem call
	// if the seller's SellerBusinessCodeType is set to 'Commercial'.
	//
	TermsAndConditions string `xml:"TermsAndConditions,omitempty"`

	//
	// Displays the VATDetails of the seller (in a business card
	// format) as part of the data returned in the GetSingleItem
	// call if the seller's SellerBusinessCodeType is set to
	// 'Commercial'.
	//
	VATDetails *VATDetailsType `xml:"VATDetails,omitempty"`
}

type BuyingGuideDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents BuyingGuideDetailsType"`

	//
	// Information that identifies a buying guide. A buying guide contains content about particular
	// product areas, categories, or subjects to help buyers decide which type of item
	// to purchase based on their particular interests.
	// Buying guides are useful to buyers who do not have a specific product in mind.
	// For example, a digital camera buying guide could help a buyer determine what kind of
	// digital camera is right for them.
	//
	BuyingGuide []*BuyingGuideType `xml:"BuyingGuide,omitempty"`

	//
	// URL of the buying guide home page for the site being searched.
	// Your application can present this URL as a link. Optionally,
	// you can use a value like "See all buying guides" as the link's
	// display name.
	//
	BuyingGuideHub *AnyURI `xml:"BuyingGuideHub,omitempty"`
}

type BuyingGuideType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents BuyingGuideType"`

	//
	// Display name of the buying guide. <br>
	// <br>
	// FindReviewsAndGuides only returns 20 characters, followed by "..." if the name is
	// longer than 20 characters. For the full title, see BuyingGuide.Title
	// instead.
	//
	Name string `xml:"Name,omitempty"`

	//
	// URL for the buying guide. Your application can
	// present this as a link. Use the value of Name or Title as the link's display name.
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// Identifies the category (if any) that is associated
	// with the buying guide. For FindReviewsAndGuides, this can be a category that is higher or lower in the hierarchy
	// than the category specified in the request. For a matching categories search,
	// you can use this information to determine the order that the buying guides are
	// returned in when multiple guides are found.
	// Optionally, you can use this information to determine where to present
	// the buying guide link in your application.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// The title of the buying guide.
	//
	Title string `xml:"Title,omitempty"`

	//
	// The text of the guide. If the guide is longer than
	// 2000 characters, the text is cut off and it ends with "...".
	// See BuyingGuide.URL for a link to the full text of the review.
	//
	Text string `xml:"Text,omitempty"`

	//
	// The time and date when the guide was posted.
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`

	//
	// The author's eBay user ID.
	//
	UserID string `xml:"UserID,omitempty"`
}

type CatalogProductType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents CatalogProductType"`

	//
	// The name of the domain in which the product was found.
	// If the product is mapped to multiple domains, eBay returns
	// the most applicable domain (as determined by eBay).
	// Always returned when Product is returned.
	//
	DomainName string `xml:"DomainName,omitempty"`

	//
	// Fully qualified URL for optional information about the product,
	// such as a movie's description or film credits. This information
	// is hosted through the eBay Web site and it cannot be edited.
	// Portions of the content are protected by copyright.
	// Applications can include this URL as a link in product search results
	// so that end users can view additional descriptive details about
	// the product. This is usually always returned when Product is returned,
	// but it may be safest to check for the existence of this field.
	//
	DetailsURL *AnyURI `xml:"DetailsURL,omitempty"`

	//
	// If true, your application can attempt to display stock photos that
	// are returned. If false, your application should not attempt to display
	// any stock photos that are returned. This recommendation is useful for
	// catalog data related to products like coins, where stock photos are not
	// necessarily applicable or available. An application with a graphical
	// user interface can use this flag to determine
	// when to hide customized stock photo widgets.
	// Always returned when Product is returned.
	//
	DisplayStockPhotos bool `xml:"DisplayStockPhotos,omitempty"`

	//
	// The eBay ID or the ISBN, EAN, or UPC value (if returned) associated with the product. The ISBN, EAN, and UPC values can also be useful as keys
	// if your application is comparing products across different sites.
	// Always returned when Product is returned.
	//
	ProductID []*ProductIDType `xml:"ProductID,omitempty"`

	//
	// Total number of listings on the requested eBay site that use
	// stock information from this catalog product. This value can be greater
	// than the number of listings returned in ItemArray. To retrieve more
	// listings, use the <a href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html">Finding API</a>.
	// Only returned when you search by ProductID (and you pass
	// Items or Details in IncludeSelector).
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// A list of name/value pairs that are included in the product's
	// pre-filled Item Specifics. These indicate common aspects or
	// characteristics of the product, such as Publisher (for a book).
	// Also see ProductID for ISBN, UPC, or EAN values, if applicable.
	// This is usually returned. (We are not aware of any cases in which this
	// node is not be returned. However, it may be safest to check for the
	// existence of this node.)
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// The total number of reviews that are available for this product
	// on the eBay Web site. This can be greater than the number of
	// reviews returned by FindProducts. In a future release, we will provide
	// the capability to retrieve details about reviews.
	// Always returned when Product is returned.
	//
	ReviewCount int32 `xml:"ReviewCount,omitempty"`

	//
	// Fully qualified URL for a stock image (if any) that is associated
	// with the eBay catalog product. The URL is for the image eBay
	// usually displays in product search results (usually 70px tall).
	// It may be helpful to calculate the dimensions of the photo
	// programmatically before displaying it.
	// Only returned if a URL is available for the product.
	//
	StockPhotoURL *AnyURI `xml:"StockPhotoURL,omitempty"`

	//
	// The title of the product, as specified in the catalog.
	// Always returned when Product is returned.
	//
	Title string `xml:"Title,omitempty"`

	//
	// Indicates that the product has changed or will soon change (usually due to a
	// migration from one catalog to another catalog). Typically, this field is returned for up to 90 days for a given product. After that, the product either no longer returns this field or the product is no longer returned (depending on the state change).
	//
	ProductState *ProductStateCodeType `xml:"ProductState,omitempty"`
}

type CategoryArrayType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents CategoryArrayType"`

	//
	// Contains details about a category.
	//
	Category []*CategoryType `xml:"Category,omitempty"`
}

type CategoryType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents CategoryType"`

	//
	// The numeric ID of a category on eBay.
	// <br>
	// <br>
	// Use an ID of -1 to retrieve the root category and the top-level (level 1) meta
	// categories. You can determine other CategoryIDs from the response from this
	// call, or from a specific item (retrieved from another call like
	// GetSingleItem), or from the eBay website.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// The level where the category fits in the site's category hierarchy.
	// For example, if this field has a value of 2, then the category is 2
	// levels below the root category.
	// <br>
	// <br>
	// Note that the value of CategoryLevel will always be 1 level below the level
	// of the requested category. To retrieve a category's children, pass its
	// CategoryID back into the request.
	// <br>
	//
	CategoryLevel int32 `xml:"CategoryLevel,omitempty"`

	//
	// Display name of the category as it would appear on
	// the eBay Web site.
	//
	CategoryName string `xml:"CategoryName,omitempty"`

	//
	// Category ID identifying a category that is an ancestor of
	// the category indicated in CategoryID.
	//
	CategoryParentID string `xml:"CategoryParentID,omitempty"`

	//
	// Display name of the category indicated in CategoryParentID.
	//
	CategoryParentName string `xml:"CategoryParentName,omitempty"`

	//
	// The total quantity of matching items in the category.
	// In the FindItemsAdvanced response, matching categories at the same level
	// (i.e., sibling categories) are sorted by ItemCount. That is, if the request
	// specifies that fewer categories or subcategories should be returned,
	// the ones with the most matching items are returned first.
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// The fully qualified category display name as it would appear on the
	// eBay site (e.g., Home & Garden:Kitchen:Tools & Gadgets).
	//
	CategoryNamePath string `xml:"CategoryNamePath,omitempty"`

	//
	// The fully qualified category ID (e.g., 11700:20625:20635 for Home &
	// Garden:Kitchen:Tools & Gadgets).
	//
	CategoryIDPath string `xml:"CategoryIDPath,omitempty"`

	//
	// If true, indicates that the category indicated in CategoryID is a leaf
	// category, in which items may be listed (if the category is not also
	// expired or virtual).
	//
	LeafCategory bool `xml:"LeafCategory,omitempty"`
}

type CharityType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents CharityType"`

	//
	// A unique identification number assigned by eBay to
	// registered nonprofit charity organizations.
	//
	CharityID string `xml:"CharityID,omitempty"`

	//
	// The name of the benefiting nonprofit charity organization selected by the
	// charity seller.
	//
	CharityName string `xml:"CharityName,omitempty"`

	//
	// A unique identification number assigned to a nonprofit
	// charity organization by the dedicated provider of
	// eBay Giving Works. Being superseded by CharityID. Max 10
	// digits.
	//
	CharityNumber int32 `xml:"CharityNumber,omitempty"`

	//
	// The percentage of the purchase price that the
	// seller chooses to donate to the selected nonprofit
	// organization. This percentage is displayed in the Giving
	// Works item listing. Possible values: 10.0 to 100.0.
	// Percentages must increment by 5.0. Minimum donation
	// percentages may be required for Giving Works listings, see
	// http://pages.ebay.com/help/sell/selling-nonprofit.html for
	// details. DonationPercent is required input when listing
	// Giving Works items.
	//
	DonationPercent float32 `xml:"DonationPercent,omitempty"`

	//
	// The stated mission of the nonprofit charity
	// organization. This mission is displayed in the Giving Works
	// item listing.
	//
	Mission string `xml:"Mission,omitempty"`

	//
	// The URL of the nonprofit charity organization. This
	// URL is displayed in the Giving Works item listing.
	//
	LogoURL string `xml:"LogoURL,omitempty"`

	//
	// If true, indicates that the seller has chosen to use
	// eBay Giving Works to donate a percentage of the item's
	// purchase price to a selected nonprofit organization.
	//
	CharityListing bool `xml:"CharityListing,omitempty"`

	//
	// The status of the nonprofit charity organization.
	//
	Status *CharityStatusCodeType `xml:"Status,omitempty"`
}

type DiscountPriceInfoType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DiscountPriceInfoType"`

	//
	// This field specifies the price to which the discounted-price display
	// treatment will be applied (for example, a strikethrough price). The
	// discounted price of an item (specified in the CurrentPrice field) is
	// the BIN price and is less than the OriginalRetailPrice of the item.
	//
	OriginalRetailPrice *AmountType `xml:"OriginalRetailPrice,omitempty"`

	//
	// A value equal to the agreed upon minimum advertised price.
	// <br><br>
	// The minimum advertised price is an agreed upon price that is set by the
	// suppliers/OEMs and the retailers/sellers. The minimum advertised price
	// is the lowest price for which an item can be advertised. Large volume
	// sellers can negotiate with the suppliers/OEMs to offer certain items
	// below the set minimum advertised price. eBay does not maintain or
	// validate the agreed upon minimum advertised price; the seller is
	// responsible for setting this value in accordance with their agreement
	// with the supplier/OEMs. MAP pricing treatments apply to only fixed price,
	// BIN items listed on the eBay US site.
	//
	MinimumAdvertisedPrice *AmountType `xml:"MinimumAdvertisedPrice,omitempty"`

	//
	// If an item listing qualifies it to be listed as a MAP item
	// (PricingTreatment returns MAP), the item price cannot be directly
	// displayed on the page containing the item. When listing a MAP item,
	// the seller stipulates how they want the buyer to view the price of the
	// item by setting this field to either PreCheckout or DuringCheckout. If
	// this field is not set for a MAP item, the treatment defaults to PreCheckout.
	// <br /><br />
	// If this field is set to PreCheckout, the buyer must click a link (or
	// button) to view the item price on a different page (such as in a pop-up
	// window). If this field is set to DuringCheckout, the StartPrice must be
	// shown only when the buyer in the eBay checkout flow.
	// <br /><br />
	// MAP items are supported only on the eBay US site.
	//
	MinimumAdvertisedPriceExposure *MinimumAdvertisedPriceExposureCodeType `xml:"MinimumAdvertisedPriceExposure,omitempty"`

	//
	// This field denotes whether or not an item qualifies for a discount
	// pricing treatment display. If a seller lists an item with
	// DiscountPriceInfo values, the item response container will include
	// a DiscountPriceInfo container with this field set to either
	// STP, MAP, or None. If this field is set to MAP, you must abide
	// by the rules for displaying MAP items, as described in
	// MinimumAdvertisedPriceExposure.
	// <br /> <br />
	// <span class="tablenote"><b>Important:</b>
	// For listings that return PricingTreatment set to MAP, you are
	// legally required to follow the rules for displaying the price of
	// the item to potential buyers. You are bound by the terms of the
	// API License Agreement to follow these rules. Refer to the
	// API License Agreement for consequences of non-compliance.
	// </span>
	//
	PricingTreatment *PricingTreatmentCodeType `xml:"PricingTreatment,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this field indicates
	// that the discount price (specified as CurrentPrice) is the price for
	// which the seller offered the same (or similar) item for sale on eBay
	// within the previous 30 days. The discount price is always in reference
	// to the seller's own price for the item.
	// <br /><br />
	// In the event both soldOffeBay and soldOneBay fields are	set, soldOneBay
	// takes precedence.
	//
	SoldOneBay bool `xml:"SoldOneBay,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this field indicates
	// that the discount price (specified as currentPrice) is the price for
	// which the seller offered the same item for sale on a web site or offline
	// store other than eBay in the previous 30 days. The discount price is
	// always in reference to the seller's own price for the item.
	// <br /><br />
	// In the event both soldOffeBay and soldOneBay fields are	set, soldOneBay
	// takes precedence.
	//
	SoldOffeBay bool `xml:"SoldOffeBay,omitempty"`
}

type DistanceType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DistanceType"`

	Value float64

	Unit string `xml:"unit,attr,omitempty"`
}

type DomainHistogramType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DomainHistogramType"`

	//
	// Each histogram entry shows how many matching products
	// were found in each matching domain. A domain is like a high-level
	// category, or a group of categories whose items share the same basic
	// product characteristics.
	//
	Domain []*HistogramEntryType `xml:"Domain,omitempty"`
}

type ExternalProductIDType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ExternalProductIDType"`

	//
	// An industry-standard value that uniquely identifies the product. The
	// valid values are dictated by the Type property.
	// Required if Type is specified.
	// Max length 13 for ISBN, 13 for EAN,
	// 12 for UPC, and 4000 for ProductID. No max length for ticket keywords
	// (but passing too much data can result in "no match found"
	// errors).<br>
	// <br>
	// <b>For AddItem and related calls:</b>
	// If the primary and secondary categories are both catalog-enabled,
	// the value must apply to the primary category.
	// Event tickets listings support a set of keywords
	// that uniquely identify the listing. The ticket keywords specify the
	// event name (the title shown on the ticket), venue name, and event
	// date and time. See the eBay Features Guide for more information
	// and validation rules. For convenience, you can pass an eBay product ID
	// as input (not limited to media categories).<br>
	// <br>
	// Required for Half.com listing use cases, and this can only be an
	// ISBN, UPC, or EAN value.<br>
	// <br>
	// <b>For FindProducts input only:</b>
	// Only ISBN, EAN, and UPC values are currently supported as
	// input.<br>
	// <br>
	// <b>For FindProducts and GetSellerPayments output only:</b>
	// Also see AlternateValue, which is returned if the catalog defines multiple
	// ISBN values (e.g., one for ISBN-13 and one for ISBN-10). Please note that
	// some catalogs return ISBN values that are not 10 or 13 characters, and some
	// values contain non-alphanumeric symbols (e.g., $).
	//
	Value string `xml:"Value,omitempty"`

	//
	// Applicable for listing use cases only (not buy-side searching).
	// Indicates what eBay should do if more than one product matches
	// the value passed in Value. Only takes effect when more than one
	// match is found. If true, the response should include an error
	// and all matching product IDs. If false, the response should include
	// an error but should not return the matching product IDs.
	// This field is also applicable when listing Half.com items.
	//
	ReturnSearchResultOnDuplicates bool `xml:"ReturnSearchResultOnDuplicates,omitempty"`

	//
	// The kind of identifier being used. The choices listed are for requests,
	// are required if Value is specified. For Half.com listing use cases, only
	// ISBN, UPC, and EAN are supported.<br>
	// <br>
	// FindProducts supports ISBN, UPC, and EAN.
	//
	Type *ExternalProductCodeType `xml:"Type,omitempty"`

	//
	// An industry-standard value that provides an alternate identification for
	// the product, if any. Currently, this only returns an alternate ISBN
	// value. If the catalog defines both an ISBN-13 and ISBN-10,
	// then the ISBN-13 is returned in Value and the ISBN-10 is returned in
	// AlternateValue. (That is, the ISBN-13 is considered to be the preferred
	// identifier.) If the catalog only defines one ISBN, it is returned in
	// Value (and AlternateValue is not returned). Please note that some
	// catalogs return ISBN values that are not 10 or 13 characters,
	// and some values contain non-alphanumeric symbols (e.g., $).
	//
	AlternateValue []string `xml:"AlternateValue,omitempty"`
}

type FeedbackDetailType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FeedbackDetailType"`

	//
	// eBay user ID for the user who left the feedback.
	//
	CommentingUser string `xml:"CommentingUser,omitempty"`

	//
	// Feedback score of the user in CommentingUser.
	//
	CommentingUserScore int32 `xml:"CommentingUserScore,omitempty"`

	//
	// Text message left by the user in CommentingUser. Used to provide a more
	// in-depth description of the user's opinion of the transaction.
	// Returned as text in the language that the
	// comment was originally left in.
	//
	CommentText string `xml:"CommentText,omitempty"`

	//
	// Date and time (in GMT) that the feedback was submitted to eBay.
	//
	CommentTime time.Time `xml:"CommentTime,omitempty"`

	//
	// Type of feedback. Can be Positive, Neutral, Negative, or Withdrawn (see the
	// CommentTypeCodeType code list). Positive feedbacks add to the user's total
	// feedback score, negative feedbacks lower the score, and neutral feedbacks do
	// not affect the score (but do affect the overall picture of the user's online
	// reputation).
	//
	CommentType *CommentTypeCodeType `xml:"CommentType,omitempty"`

	//
	// Textual comment that the user targeted by feedback may leave
	// in response or rebuttal to the feedback.
	//
	FeedbackResponse string `xml:"FeedbackResponse,omitempty"`

	//
	// Explanation a user can give to a response.
	//
	FollowUp string `xml:"FollowUp,omitempty"`

	//
	// The ID that uniquely identifies the item listing.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// Indicates whether the user who was the feedback recipient was a Buyer or the
	// Seller for that transaction.
	//
	Role *TradingRoleCodeType `xml:"Role,omitempty"`

	//
	// Name of the listing for which feedback was provided.
	// Returned as CDATA.
	// Not returned if a listing ended more than 90 days ago.
	//
	ItemTitle string `xml:"ItemTitle,omitempty"`

	//
	// The final price for the item, associated with
	// the currency identified by the currencyId attribute of the AmountType.
	// Not returned if a listing ended more than 90 days ago.
	//
	ItemPrice *AmountType `xml:"ItemPrice,omitempty"`

	//
	// Unique identifier for the feedback entry.
	//
	FeedbackID string `xml:"FeedbackID,omitempty"`

	//
	// Unique identifier for the transaction about which
	// this feedback entry was left.
	// This field is not returned in the case of TransactionIDs from Chinese auction listings,
	// because a value of zero is used for TransactionIDs in such cases.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// Indicates whether eBay replaced the comment with a message
	// that the comment was removed.
	//
	CommentReplaced bool `xml:"CommentReplaced,omitempty"`

	//
	// Indicates whether eBay replaced the response with a message
	// that the response was removed.
	//
	ResponseReplaced bool `xml:"ResponseReplaced,omitempty"`

	//
	// Indicates whether eBay replaced the follow-up with a message
	// that the follow-up was removed.
	//
	FollowUpReplaced bool `xml:"FollowUpReplaced,omitempty"`

	//
	// Specifies if a user's feedback score is or is not countable. This field is
	// returned only when a user's feedback score is not countable (value is false).
	//
	Countable bool `xml:"Countable,omitempty"`
}

type FeedbackHistoryType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FeedbackHistoryType"`

	//
	// Bid retractions count, for multiple predefined time periods preceding
	// the call.
	//
	BidRetractionFeedbackPeriods []*FeedbackPeriodType `xml:"BidRetractionFeedbackPeriods,omitempty"`

	//
	// Negative feedback entries count, for multiple predefined time periods preceding
	// the call.
	//
	NegativeFeedbackPeriods []*FeedbackPeriodType `xml:"NegativeFeedbackPeriods,omitempty"`

	//
	// Neutral feedback entries count, for multiple predefined time periods preceding
	// the call.
	//
	NeutralFeedbackPeriods []*FeedbackPeriodType `xml:"NeutralFeedbackPeriods,omitempty"`

	//
	// Positive feedback entries count, for multiple predefined time periods
	// preceding the call.
	//
	PositiveFeedbackPeriods []*FeedbackPeriodType `xml:"PositiveFeedbackPeriods,omitempty"`

	//
	// Total feedback score, for multiple predefined time periods preceding the
	// call.
	//
	TotalFeedbackPeriods []*FeedbackPeriodType `xml:"TotalFeedbackPeriods,omitempty"`

	//
	// Total number of negative Feedback comments received by the user, including weekly repeats.
	//
	UniqueNegativeFeedbackCount int64 `xml:"UniqueNegativeFeedbackCount,omitempty"`

	//
	// Total number of positive Feedback comments received by the user, including weekly repeats.
	//
	UniquePositiveFeedbackCount int64 `xml:"UniquePositiveFeedbackCount,omitempty"`

	//
	// Container for information about detailed seller ratings (DSRs)
	// that buyers have left for a seller.
	// Sellers have access to the number of ratings they've received, as well as
	// to the averages of DSRs they've received in each
	// DSR area (i.e., to the average of ratings in the item-description area, etc.).
	//
	AverageRatingDetails []*AverageRatingDetailsType `xml:"AverageRatingDetails,omitempty"`

	//
	// Number of neutral comments received from suspended users.
	//
	NeutralCommentCountFromSuspendedUsers int64 `xml:"NeutralCommentCountFromSuspendedUsers,omitempty"`

	//
	// Total number of neutral Feedback comments received by the user, including weekly repeats.
	//
	UniqueNeutralFeedbackCount int64 `xml:"UniqueNeutralFeedbackCount,omitempty"`
}

type FeedbackPeriodType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FeedbackPeriodType"`

	//
	// Indicates the time period for the feedback count. Returns a value indicating
	// the number of days prior to the call for which feedbacks of the particular
	// type are counted.
	//
	PeriodInDays int32 `xml:"PeriodInDays,omitempty"`

	//
	// Count of the feedbacks received by the user for the time period prior to the
	// call indicated in PeriodInDays.
	//
	Count int64 `xml:"Count,omitempty"`
}

type FindHalfProductsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindHalfProductsRequestType"`

	*AbstractRequestType

	//
	// Defines standard subsets of fields to return within the
	// response.<br>
	// <br>
	// If you don't specify this field, the call returns a default
	// set of fields, focusing on product details only
	// (see the "Detail Controls" link below). If you specify this
	// field, the additional fields you retrieve can affect the call's
	// response time (performance).<br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Items</p>
	// <p class="edef">Include a brief set of item fields
	// in the response.
	// Only applicable when you are searching by ProductID.
	// Not applicable with QueryKeywords.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; DomainHistogram</p>
	// <p class="edef">Include the DomainHistogram in
	// the response. The histogram lists the number of matching
	// products found and the domains in which they were found.
	// (A domain is like a high-level category.)
	// When many matching products are found, you may see
	// significantly slower response times when you include
	// the histogram.</p>
	// <br>
	// <br>
	// Use a comma to specify multiple values. (In this case,
	// the results are cumulative.) See "FindHalfProducts Samples"
	// for an example of how to use this field.<br>
	// <br>
	// See "Detail Controls" for a complete list of
	// fields that can be returned for each selector.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`

	//
	// If true, only retrieve data for products that have been used to
	// pre-fill active listings on the Half.com site.
	// If false, retrieve all products that match the query.
	// This is useful when you use QueryKeywords and you only want to
	// find products that have associated items (that is, where ItemArray
	// would not be empty).<br>
	// <br>
	// By default, AvailableItemsOnly does not retrieve an ItemArray; it only controls
	// which products are returned (or counted). When you use QueryKeywords in your
	// request, only products are returned, ItemArray is never returned.
	// To retrieve an ItemArray, use a ProductID in your request instead of a
	// QueryKeyword and specify Items in the IncludeSelector field.
	//
	AvailableItemsOnly bool `xml:"AvailableItemsOnly,omitempty"`

	//
	// A domain to search in. This is like searching a section of
	// a catalog. If not specified, the product search is conducted
	// across all domains.
	// DomainName is an unbounded field. If you are using a URL, and you want
	// to specify multiple values, use an index value (not a comma).
	// For example, to specify DomainName=Textbooks,Education,
	// specify DomainName(0)=Textbooks,%20Education.
	// To determine valid domain names,
	// first use this call with QueryKeywords. Domain names are returned
	// for each product (and summarized in the domain histogram, if you
	// specify DomainHistogram in IncludeSelector).<br>
	// <br>
	// A domain is a named grouping of categories whose items share
	// common product characteristics. For example, all bound books
	// have a binding or format (e.g., Hardcover), but audiobooks don't.
	// So audiobooks would have their own domain.
	// To limit your search to audiobooks, you would specify Audiobooks
	// as the domain.<br>
	// <br>
	// Only useful when QueryKeywords is specified. If you use this with
	// ProductID, AND logic is applied. In this case, if you specify an
	// ID that doesn't match the domain (as Half.com has defined it),
	// no matching product will be found. Therefore, we recommend that
	// you only use DomainName with QueryKeywords.
	//
	DomainName []string `xml:"DomainName,omitempty"`

	//
	// Use this to retrieve product details for one specific product.
	// Specify the ID as a string, and use the type attribute to
	// indicate the nature of the ID you are specifying.
	// <br>
	// <br>
	// In general, you can request up to 10 IDs of the same type by
	// separating them with commas, as in the following: 014633155310,014633145496.
	// However, if you specify a ProductID type of Reference (which specifies
	// a global reference ID for an eBay catalog product), only one ID in
	// ProductID can be used.
	// <br>
	// <br>
	// The request requires either QueryKeywords or
	// ProductID, but these fields cannot be used together.
	// <br>
	// ItemCount is only returned when ProductID is used in the request
	// and the IncludeSelector is set to Items or Details.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// One or more keywords to search for. When you use a keyword search,
	// Half.com searches the product catalogs  for matching words in the
	// product title, description, and/or Item Specifics, and it returns
	// a list of matching products, with no items. To retrieve
	// items, use ProductID instead. (If you don't already have a
	// product ID, you can get product IDs from the
	// response after conducting a keyword search.)<br>
	// <br>
	// If specified, you must pass in at least 3 alphanumeric characters.<br>
	// <br>
	// The words "and" and "or" are treated like any other word.
	// Only use "and", "or", or "the" if you are searching for products
	// containing these words.
	// To use AND or OR logic, use Half.com's standard search string
	// modifiers. Wildcards (+, -, or *) are also supported.
	// Be careful when using spaces before or after modifiers and
	// wildcards.<br>
	// <br>
	// Some keyword queries can result in response times of 30 seconds or
	// longer. If more than 2000 matches are found, the call fails with
	// an error. If this kind of error occurs, refine the search by
	// passing in more keywords and/or by using DomainName to restrict
	// the search to certain domains (such as DVDs).
	// If you are searching for a particular book, DVD, CD, or video game
	// and you already know its ISBN or EAN (for a book) or UPC,
	// consider using ProductID instead to retrieve more
	// precise results. <br>
	// <br>
	// The request requires either QueryKeywords or
	// ProductID, but these fields cannot be used together.
	// <br>
	// When QueryKeywords is used in the request, ItemCount is not returned.
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// The ID of a specific seller.
	// Specify this value in combination with ProductID
	// if you want search results to be filtered so that the items returned
	// are only items in a specific product, sold by a specific seller.
	// To specify SellerID, use SellerID and ProductID together.
	//
	SellerID string `xml:"SellerID,omitempty"`

	//
	// Sorts the list of products returned. This is mostly only useful
	// with QueryKeywords. (When you use ProductID, Half.com usually only returns one product.)
	//
	ProductSort *ProductSortCodeType `xml:"ProductSort,omitempty"`

	//
	// Sorts the list of products returned.
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// Specifies the maximum number of products to return per page
	// in a single call. This is mostly only useful
	// with QueryKeywords. (When you use ProductID, Half.com usually only
	// returns one product, and up to 30 items for that product.)
	//
	MaxEntries int32 `xml:"MaxEntries,omitempty"`

	//
	// Specifies which page of data to return in the current call.
	// Specify a positive value equal to or lower than the number of
	// pages available (which you determine by examining the results of
	// your initial request).
	// Use this only when specifying QueryKeywords.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`
}

type FindHalfProductsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindHalfProductsResponseType"`

	*AbstractResponseType

	//
	// A histogram that lists the number of matching products found
	// and the domains in which they were found.
	// A <i>domain</i> is essentially
	// a set of categories that share certain common features
	// (as determined by Half.com). Each domain has its own name and ID.
	//
	DomainHistogram *DomainHistogramType `xml:"DomainHistogram,omitempty"`

	//
	// The number of the page of data returned. If many products
	// are found and multiple pages of results are available, use
	// this in combination with ApproximatePages and HasMore to decide
	// which page to retrieve next. As FindHalfProducts only returns
	// up to 2000 products, the maximum possible value is theoretically
	// 2000 (if you were to set EntriesPerPage to 1 in the request).
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// The total number of pages that can be returned, given the same
	// query and filters in the request. As FindHalfProducts only returns
	// up to 2000 products, the maximum possible value is theoretically
	// 2000 (if you were to set MaxEntries to 1 in the request).
	//
	ApproximatePages int32 `xml:"ApproximatePages,omitempty"`

	//
	// If true, more pages of results are available.
	// That is, PageNumber is less than ApproximatePages.
	//
	MoreResults bool `xml:"MoreResults,omitempty"`

	//
	// The total number of matching products found.
	// (If more than 2000 products are found, the call fails
	// with an error.)
	//
	TotalProducts int32 `xml:"TotalProducts,omitempty"`

	//
	// An set of Half.com catalog products. This contains stock information about a
	// particular DVD, book, or other product.
	// When you use QueryKeywords in the request, FindHalfProducts returns a
	// maximum of 20 products per page.
	// When you use ProductID in the request, FindHalfProducts usually only
	// returns 1 product. ItemCount is only returned if you use ProductID with
	// IncludeSelector set to Items or Details.
	// Inthe rare case where more than one product matches the same ProductID,
	// FindHalfProducts will return all of those products.
	//
	Products *HalfProductsType `xml:"Products,omitempty"`

	//
	// A URL for product search results that corresponds to your search request. This is similar to ItemSearchURL in FindItems and FindItemsAdvanced.
	//
	ProductSearchURL *AnyURI `xml:"ProductSearchURL,omitempty"`
}

type FindPopularItemsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularItemsRequestType"`

	*AbstractRequestType

	//
	// This field is deprecated.
	//
	CategoryID []string `xml:"CategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	CategoryIDExclude []string `xml:"CategoryIDExclude,omitempty"`

	//
	// This field is deprecated.
	//
	MaxEntries int32 `xml:"MaxEntries,omitempty"`
}

type FindPopularItemsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularItemsResponseType"`

	*AbstractResponseType

	//
	// This field is deprecated.
	//
	ItemArray *SimpleItemArrayType `xml:"ItemArray,omitempty"`
}

type FindPopularSearchesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularSearchesRequestType"`

	*AbstractRequestType

	//
	// This field is deprecated.
	//
	CategoryID []string `xml:"CategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	QueryKeywords []string `xml:"QueryKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	MaxKeywords int32 `xml:"MaxKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	MaxResultsPerPage int32 `xml:"MaxResultsPerPage,omitempty"`

	//
	// This field is deprecated.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// This field is deprecated.
	//
	IncludeChildCategories bool `xml:"IncludeChildCategories,omitempty"`
}

type FindPopularSearchesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularSearchesResponseType"`

	*AbstractResponseType

	//
	// This field is deprecated.
	//
	PopularSearchResult []*PopularSearchesType `xml:"PopularSearchResult,omitempty"`

	//
	// This field is deprecated.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// This field is deprecated.
	//
	TotalPages int32 `xml:"TotalPages,omitempty"`
}

type FindProductsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindProductsRequestType"`

	*AbstractRequestType

	//
	// Defines standard subsets of fields to return within the
	// response.<br>
	// <br>
	// If you don't specify this field, the call returns a default
	// set of fields, focusing on product details only
	// (see the "Detail Controls" link below). If you specify this
	// field, the additional fields you retrieve can affect the call's
	// response time (performance).<br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Details</p>
	// <p class="edef">Include all available item fields
	// in the response. Only applicable when you are searching by
	// ProductID. Not applicable with QueryKeywords.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; DomainHistogram</p>
	// <p class="edef">Include the DomainHistogram in
	// the response. The histogram lists the number of matching
	// products found and the domains in which they were found.
	// (A domain is like a high-level category.)
	// When many matching products are found, you may see
	// significantly slower response times when you include
	// the histogram.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Items</p>
	// <p class="edef">Include a brief set of item fields
	// in the response.
	// Only applicable when you are searching by ProductID.
	// Not applicable with QueryKeywords.</p>
	// <br>
	// <br>
	// Use a comma to specify multiple values. (In this case,
	// the results are cumulative.) See "FindProducts Samples"
	// for an example of how to use this field.<br>
	// <br>
	// See "Detail Controls" for a complete list of
	// fields that can be returned for each selector.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`

	//
	// If true, only retrieve data for products that have been used to
	// pre-fill active listings on the specified eBay site.
	// If false, retrieve all products that match the query.
	// This is useful when you use QueryKeywords and you only want to
	// find products that have associated items (that is, where ItemArray
	// would not be empty).<br>
	// <br>
	// This does not retrieve ItemArray; this only controls which
	// products are returned (or counted). To retrieve ItemArray,
	// pass Items in IncludeSelector.
	//
	AvailableItemsOnly bool `xml:"AvailableItemsOnly,omitempty"`

	//
	// A domain to search in. This is like searching a section of
	// a catalog. If not specified, the product search is conducted
	// across all domains.
	// DomainName is an unbounded field. If you are using a URL, and you want
	// to specify multiple values, use an index value (not a comma).
	// For example, to specify DomainName=Textbooks,Education,
	// specify DomainName(0)=Textbooks,%20Education.
	// To determine valid domain names,
	// first use this call with QueryKeywords. Domain names are returned
	// for each product (and summarized in the domain histogram, if you
	// specify DomainHistogram in IncludeSelector).<br>
	// <br>
	// A domain is a named grouping of categories whose items share
	// common product characteristics. For example, all bound books
	// have a binding or format (e.g., Hardcover), but audiobooks don't.
	// So audiobooks would have their own domain.
	// To limit your search to audiobooks, you would specify Audiobooks
	// as the domain.<br>
	// <br>
	// Only useful when QueryKeywords is specified. If you use this with
	// ProductID, AND logic is applied. In this case, if you specify an
	// ID that doesn't match the domain (as eBay has defined it),
	// no matching product will be found. Therefore, we recommend that you only use DomainName with QueryKeywords.
	//
	DomainName []string `xml:"DomainName,omitempty"`

	//
	// Use this to retrieve product details for one specific product.
	// Specify the ID as a string, and use the type attribute to
	// indicate the nature of the ID you are specifying.
	// <br>
	// <br>
	// The request requires a single one of these three elements: QueryKeywords,
	// ProductID, or CategoryID, and can only include one of the three.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// One or more keywords to search for. When you use a keyword search,
	// eBay searches the product catalogs  for matching words in the
	// product title, description, and/or Item Specifics, and it returns
	// a list of matching products, with no items. To retrieve
	// items, use ProductID instead. (If you don't already have a
	// product ID, you can get product IDs from the
	// response after conducting a keyword search.)<br>
	// <br>
	// If specified, you must pass in at least 3 alphanumeric characters.<br>
	// <br>
	// The words "and" and "or" are treated like any other word.
	// Only use "and", "or", or "the" if you are searching for products
	// containing these words.
	// To use AND or OR logic, use eBay's standard search string
	// modifiers. Wildcards (+, -, or *) are also supported.
	// Be careful when using spaces before or after modifiers and
	// wildcards.<br>
	// <br>
	// Some keyword queries can result in response times of 30 seconds or
	// longer. If more than 2000 matches are found, the call fails with
	// an error. If this kind of error occurs, refine the search by
	// passing in more keywords and/or by using DomainName to restrict
	// the search to certain domains (such as DVDs).
	// If you are searching for a particular book, DVD, CD, or video game
	// and you already know its ISBN or EAN (for a book) or UPC,
	// consider using ProductID instead to retrieve more
	// precise results. <br>
	// <br>
	// The request requires a single one of these three elements: QueryKeywords,
	// ProductID, or CategoryID, and can only include one of the three.
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// Sorts the list of products returned. This is mostly only useful
	// with QueryKeywords. (When you use ProductID, eBay usually only
	// returns one product.)
	// Also see SortOrder. If ProductSort and SortOrder are not
	// specified, products are sorted by popularity in descending order.
	//
	ProductSort *ProductSortCodeType `xml:"ProductSort,omitempty"`

	//
	// Sorts search results in ascending or descending order.
	// Only applicable with ProductSort. If you specify ProductSort
	// without SortOrder, the order defaults to Descending for
	// all criteria except Title (which defaults to Ascending).
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// Specifies the maximum number of products to return per page
	// in a single call. This is mostly only useful
	// with QueryKeywords. (When you use ProductID, eBay usually only
	// returns one product, and up to 200 items for that product.)
	//
	MaxEntries int32 `xml:"MaxEntries,omitempty"`

	//
	// Specifies which page of data to return in the current call.
	// Specify a positive value equal to or lower than the number of
	// pages available (which you determine by examining the results of
	// your initial request).
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// Include a Category ID number in your request to restrict your
	// query to a specific category.
	// <br>
	// The request requires a single one of these three elements: QueryKeywords,
	// ProductID, or CategoryID, and can only include one of the three.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Specifies whether or not to remove duplicate items from search results.
	// When set to true, and there are duplicate items for an item in the
	// search results, the subsequent duplicates will not appear in the
	// results.
	// Item listings are considered duplicates in the following
	// conditions: <br>
	// <ul>
	// <li>Items are listed by the same seller</li>
	// <li>Items have exactly the same item title</li>
	// <li>Items have similar listing formats</li>
	// <ul>
	// <li>Auctions: Auction Items, Auction BIN items, Multi-Quantity
	// Auctions, and Multi-Quantity Auctions BIN items</li>
	// <li>Fixed Price: Fixed Price, Multi-quantity Fixed Price, and Fixed
	// Price with Best Offer items</li>
	// <li>Classified Ads</li>
	// </ul>
	// </ul><br>
	// For Auctions, items must also have the same price and number of bids to
	// be considered duplicates.
	// <br>
	// Filtering of duplicate item listings is not supported on all sites.
	// For FindProducts, this filter only works when IncludeSelector is set to Items or Details.
	//
	HideDuplicateItems bool `xml:"HideDuplicateItems,omitempty"`
}

type FindProductsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindProductsResponseType"`

	*AbstractResponseType

	//
	// The total number of pages that can be returned, given the same
	// query and filters in the request. As FindProducts only returns
	// up to 2000 products, the maximum possible value is theoretically
	// 2000 (if you were to set MaxEntries to 1 in the request).
	//
	ApproximatePages int32 `xml:"ApproximatePages,omitempty"`

	//
	// If true, more pages of results are available.
	// That is, PageNumber is less than ApproximatePages.
	//
	MoreResults bool `xml:"MoreResults,omitempty"`

	//
	// A histogram that lists the number of matching products found and the domains
	// in which they were found. A <i>domain</i> describes a set of
	// categories that share certain common characteristics (as determined by eBay).
	// Each domain has its own name and ID. Only returned when you specify
	// DomainHistogram in IncludeSelector.
	//
	DomainHistogram *DomainHistogramType `xml:"DomainHistogram,omitempty"`

	//
	// A list of active items that were listed with the requested
	// product.
	// <br />
	// <br />
	// <span class="tablenote"><strong>Note:</strong>
	// ItemArray is returned only when you use ProductID in the search request
	// (not QueryKeywords) and you set IncludeSelector to Details or Items.
	// Returned only if eBay has currently matching items.
	// </span>
	// <br />
	//
	ItemArray *SimpleItemArrayType `xml:"ItemArray,omitempty"`

	//
	// The number of the page of data returned. If many products
	// are found and multiple pages of results are available, use
	// this in combination with ApproximatePages and MoreResults
	// to decide which page to retrieve next. As FindProducts only
	// returns up to 2000 products, the maximum possible value is
	// theoretically 2000 (if you were to set MaxEntries to 1 in the
	// request).
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// An eBay catalog product. This contains stock information about a particular
	// DVD, camera, set of golf clubs, or other product. When you use QueryKeywords
	// in the request, FindProducts returns a maximum of 20 products per page. When
	// you use ProductID in the request, FindProducts usually only returns 1 product
	// by default. (If more than one product matches the same ProductID, FindProducts
	// will return all of those products. As of the time of this writing, we expect
	// this to be a rare case.)
	//
	Product []*CatalogProductType `xml:"Product,omitempty"`

	//
	// The total number of matching products found. (If more than 2000 products are
	// found, the call fails with an error.)
	//
	TotalProducts int32 `xml:"TotalProducts,omitempty"`

	//
	// Indicates whether there are duplicated items not returned by this
	// response when HideDuplicateItems is true in the request.
	//
	DuplicateItems bool `xml:"DuplicateItems,omitempty"`
}

type FindReviewsAndGuidesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindReviewsAndGuidesRequestType"`

	*AbstractRequestType

	//
	// Use this to retrieve reviews (not guides) for one specific product.
	// Specify the ID as a string, and use the type attribute
	// to indicate the nature of the ID you are specifying.
	// Same as FindProducts, supports Reference, ISBN, UPC, EAN.
	// <br>
	// <br>
	// ProductID can be used in combination with UserID to return Reviews and Guides.
	// ProductID and CategoryID cannot be used together.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// Retrieves reviews and guides written by the specified user.
	// <br>
	// <br>
	// UserID can be combined with either ProductID or CategoryID but not both (as
	// ProductID and CategoryID cannot be used together).
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// Specify a single CategoryID to restrict your query to a specific Guide category.
	// <br>
	// <br>
	// If the specified category ID doesn't match an existing category
	// for the site, an invalid-category error message is returned.
	// To determine valid categories:<br>
	// Use <b>findItemsAdvanced</b> from the <a href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html">Finding API</a> with CategoryHistogram value in the OutputSelector field
	// to retrieve matching categories. Then make another
	// FindReviewsAndGuides call with the ID of a matching category.
	// <br>
	// <br>
	// CategoryID can be used in combination with UserID to return Reviews and Guides.
	// ProductID and CategoryID cannot be used together.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Specifies the maximum number of reviews per page (not guides) in the returned list. If not
	// specified, the default returns 5 results per page.
	//
	MaxResultsPerPage int32 `xml:"MaxResultsPerPage,omitempty"`

	//
	// Specifies the number of the page of data to return in the current call.
	// Specify a positive value equal to or lower than the number of pages
	// available (which you determine by examining the results of your initial request).
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// Include ReviewSort in your request if you want to sort by a parameter,
	// such as CreationTime. See the SortOrder field for values for specifying
	// that results are returned in ascending or descending order.
	// (By default, results are returned in descending order.)
	//
	ReviewSort *ReviewSortCodeType `xml:"ReviewSort,omitempty"`

	//
	// Sorts search results in ascending or descending order, in conjunction
	// with the value you specify in ReviewsSort. The default is descending
	// order.
	// <br> <br>
	// For example, for the ReviewsSort value of CreationTime,
	// and a SortOrder value of Descending, the most recently created
	// reviews are returned first.
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`
}

type FindReviewsAndGuidesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindReviewsAndGuidesResponseType"`

	*AbstractResponseType

	//
	// Number of returned reviews.
	//
	ReviewCount int32 `xml:"ReviewCount,omitempty"`

	//
	// Number of returned buying guides.
	//
	BuyingGuideCount int32 `xml:"BuyingGuideCount,omitempty"`

	//
	// Rank of reviewer if using user search.
	//
	ReviewerRank int32 `xml:"ReviewerRank,omitempty"`

	//
	// Number of helpfulness votes if using user search.
	//
	TotalHelpfulnessVotes int32 `xml:"TotalHelpfulnessVotes,omitempty"`

	//
	// The eBay or external IDs associated with the product.
	// Use the Reference value as input to search for the same product
	// in the future, or use the ISBN, EAN, or UPC value (if returned).
	// The ISBN, EAN, and UPC values can also be useful as keys if your
	// application is comparing products across different sites. Always
	// returned when Product is returned.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// URL to the reviews and guides page.
	//
	ReviewsAndGuidesURL *AnyURI `xml:"ReviewsAndGuidesURL,omitempty"`

	//
	// The number of the page of data returned. If many products
	// are found and multiple pages of results are available, use
	// this in combination with TotalPages to decide
	// which page to retrieve next. As FindProducts only returns
	// up to 2000 products, the maximum possible value is theoretically
	// 2000 (if you were to set MaxResultsPerPage to 1 in the request).
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// Indicates the total number of pages of data
	// that could be returned by repeated requests. Returned with a
	// value of 0 if no pages are available.
	//
	TotalPages int32 `xml:"TotalPages,omitempty"`

	//
	// Contains information for up to 5 buying guides that match the
	// query. Buying guides provide useful information about shopping
	// in a particular domain, like Digital Cameras.
	// For example, a digital camera buying guide
	// could help a buyer determine what kind of digital camera
	// is right for them.
	// If no buying guides are associated with the product, this only
	// returns a link to the buying guide hub (the main Guides page).
	// Count limited by MaxResultsPerPage in request.
	//
	BuyingGuideDetails *BuyingGuideDetailsType `xml:"BuyingGuideDetails,omitempty"`

	//
	// Contains information about review details. Count limited by MaxResultsPerPage in request.
	//
	ReviewDetails *ReviewDetailsType `xml:"ReviewDetails,omitempty"`

	//
	// Number of helpfulness votes if using user search.
	//
	PositiveHelpfulnessVotes int32 `xml:"PositiveHelpfulnessVotes,omitempty"`
}

type GetCategoryInfoRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryInfoRequestType"`

	*AbstractRequestType

	//
	// Use an ID of -1 to retrieve the root category and the top-level (level
	// 1) meta categories. You can determine other CategoryIDs from the
	// response from this call, or from a specific item (retrieved from
	// another call like GetSingleItem), or from the eBay
	// website.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Defines standard subsets of fields to return within the
	// response. If you don't specify this field, the call returns
	// a default set of fields. If you specify this field, the
	// additional fields (child categories) you retrieve can affect
	// the call's response time (decrease performance).
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; ChildCategories</p>
	// <p class="edef">Include the first level of child categories for
	// the specified parent.</p>
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetCategoryInfoResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryInfoResponseType"`

	*AbstractResponseType

	//
	// List of the returned categories. The category array contains one CategoryType
	// object for each returned category. Returns empty if no detail level is specified.
	//
	CategoryArray *CategoryArrayType `xml:"CategoryArray,omitempty"`

	//
	// Indicates the number of categories returned (i.e., the number of CategoryType
	// objects in CategoryArray).
	//
	CategoryCount int32 `xml:"CategoryCount,omitempty"`

	//
	// Indicates the last date and time that eBay modified the category hierarchy for the
	// specified eBay site.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// Indicates the version of the category hierarchy on the
	// specified eBay site.
	//
	CategoryVersion string `xml:"CategoryVersion,omitempty"`
}

type GetItemStatusRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemStatusRequestType"`

	*AbstractRequestType

	//
	// The item ID that uniquely identifies the item listing for which to retrieve the data. You can provide a maximum of 20 ItemIDs. Use a comma to separate ItemIDs.
	//
	ItemID []string `xml:"ItemID,omitempty"`
}

type GetItemStatusResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemStatusResponseType"`

	*AbstractResponseType

	//
	// Collection of Item status objects in an SimpleItemArrayType object, that can include zero, one, or multiple ItemType objects.
	//
	Item []*SimpleItemType `xml:"Item,omitempty"`
}

type GetMultipleItemsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMultipleItemsRequestType"`

	*AbstractRequestType

	//
	// The item ID that uniquely identifies the item listing for which to
	// retrieve the data. You can provide a maximum of 20 item IDs. When making a
	// URL request, repeating ItemID parameters must be specified as an indexed
	// array (e.g., <code>...&ItemID(0)=130310421484&ItemID(1)=
	// 300321408208& ItemID(2)=370214653822...</code>).
	// <br><br>
	// Alternatively, as a shortcut for URL requests, you can specify the item
	// IDs as a comma-separated list in a single ItemID parameter (e.g., ...<
	// code>&ItemID=130310421484,300321408208,370214653822...</code>
	// ) for convenience.
	// <br><br>
	// You can determine an item's ID by calling findItemsAdvanced (<a
	// href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html"
	// >Finding API</a>) or from the  eBay Web site. Provide ItemID for
	// every item for which you want information.
	//
	ItemID []string `xml:"ItemID,omitempty"`

	//
	// Defines standard subsets of fields to return within the
	// response.<br>
	// <br>
	// If you don't specify this field, the call returns a default
	// set of fields (see the "Detail Controls" link below). If you specify this field, the additional
	// fields you retrieve can affect the call's response time
	// (performance).<br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Details</p>
	// <p class="edef">Include most available fields in the
	// response (except fields that significantly affect the call's
	// performance).</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Description</p>
	// <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
	// <p class="edef">Include the text Description (no html tag) field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
	// <p class="edef">Include ItemSpecifics in the response.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
	// <p class="edef">Include Variations in the response.</p>
	// <br>
	// <br>
	// Use a comma to specify multiple values. (In this case,
	// the results are cumulative.) See "GetSingleItem Samples"
	// for an example of how to use this field.<br>
	// <br>
	// See "Detail Controls" for a complete list of
	// fields that can be returned for each selector.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetMultipleItemsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMultipleItemsResponseType"`

	*AbstractResponseType

	//
	// Contains details for a listing (or multiple) listings that correspond to the item ID(s) specified in the request.
	//
	Item []*SimpleItemType `xml:"Item,omitempty"`
}

type GetShippingCostsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetShippingCostsRequestType"`

	*AbstractRequestType

	//
	// The item ID that uniquely identifies the item listing for which to retrieve the data.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// Number of items sold to a single buyer and to be shipped together.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// Destination country postal code (or zip code, for US). Ignored if no
	// country code is provided. Optional tag for some countries. More likely to
	// be required for large countries. Ignored for flat rate shipping.
	//
	DestinationPostalCode string `xml:"DestinationPostalCode,omitempty"`

	//
	// Destination country code. If DestinationCountryCode is US,
	// postal code is required and represents US zip code.
	//
	DestinationCountryCode *CountryCodeType `xml:"DestinationCountryCode,omitempty"`

	//
	// Indicates whether to return the ShippingDetails container in the response.
	//
	IncludeDetails bool `xml:"IncludeDetails,omitempty"`
}

type GetShippingCostsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetShippingCostsResponseType"`

	*AbstractResponseType

	//
	// Shipping-related details for the specified item. This container is only
	// returned if IncludeDetails is true on input. Any error about shipping services
	// (returned by a vendor of eBay's who calculates shipping costs) is returned in
	// ShippingRateErrorMessage. Errors from a shipping service are likely to be related to
	// issues with shipping specifications, such as package size and the selected shipping
	// method not supported by a particular shipping service.
	//
	ShippingDetails *ShippingDetailsType `xml:"ShippingDetails,omitempty"`

	//
	// Shipping-related details for the specified item. Any error about shipping services
	// (returned by a vendor of eBay's who calculates shipping costs) is returned in
	// ShippingRateErrorMessage. Errors from a shipping service are likely to be related to
	// issues with shipping specifications, such as package size and the selected shipping
	// method not supported by a particular shipping service.
	//
	ShippingCostSummary *ShippingCostSummaryType `xml:"ShippingCostSummary,omitempty"`

	//
	// This container is returned in <b>GetShippingCosts</b> if In-Store Pickup is set for the listing.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings.
	// </span>
	// This container is only returned if the version of the API is greater than or equal to 869.
	//
	PickUpInStoreDetails *PickUpInStoreDetailsType `xml:"PickUpInStoreDetails,omitempty"`
}

type GetSingleItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSingleItemRequestType"`

	*AbstractRequestType

	//
	// The item ID that uniquely identifies the item listing
	// for which to retrieve the data.<br>
	// <br>
	// You can determine an item's ID by calling findItemsAdvanced (<a
	// href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html"
	// >Finding API</a>) or from the  eBay Web site.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// Variation-level SKU that uniquely identifies a variation within
	// the listing identified by ItemID. Only applicable when the
	// seller included variation-level SKU (Variation.SKU)
	// values. Retrieves all the usual Item fields, but limits the
	// Variations content to the specified variation.
	// If not specified, the response includes all variations.
	//
	VariationSKU string `xml:"VariationSKU,omitempty"`

	//
	// Name-value pairs that identify one or more variations within the
	// listing identified by ItemID. Only applicable when the seller
	// listed the item with variations. Retrieves all the usual Item
	// fields, but limits the Variations content to the specified
	// variation(s). If the specified pairs do not match any variation,
	// eBay returns all variations.<br>
	// <br>
	// To retrieve only one variation, specify the full set of
	// name/value pairs that match all the name-value pairs of one
	// variation. <br>
	// <br>
	// To retrieve multiple variations (using a wildcard),
	// specify one or more name/value pairs that partially match the
	// desired variations. For example, if the listing contains
	// variations for shirts in different colors and sizes, specify
	// Color as Red (and no other name/value pairs) to retrieve
	// all the red shirts in all sizes (but no other colors).
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`

	//
	// Defines standard subsets of fields to return within the
	// response.<br>
	// <br>
	// If you don't specify this field, the call returns a default
	// set of fields (see the "Detail Controls" link below). If you specify this field, the additional
	// fields you retrieve can affect the call's response time
	// (performance).<br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Details</p>
	// <p class="edef">Include most available fields in the
	// response (except fields that significantly affect the call's
	// performance).</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Description</p>
	// <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
	// <p class="edef">Include the text Description (no html tag) field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; ShippingCosts</p>
	// <p class="edef">Include basic shipping costs in the
	// response. (Use GetShippingCosts to retrieve more
	// details.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
	// <p class="edef">Include ItemSpecifics in the response.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
	// <p class="edef">Include Variations in the response.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Compatibility</p>
	// <p class="edef">Include Compatibility in the response.</p>
	// <br>
	// <br>
	// Use a comma to specify multiple values. (In this case,
	// the results are cumulative.) See "GetSingleItem Samples"
	// for an example of how to use this field.<br>
	// <br>
	// See "Detail Controls" for a complete list of
	// fields that can be returned for each selector.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetSingleItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSingleItemResponseType"`

	*AbstractResponseType

	//
	// Contains details about the listing whose ID was specified in
	// the request.
	//
	Item *SimpleItemType `xml:"Item,omitempty"`
}

type GetUserProfileRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserProfileRequestType"`

	*AbstractRequestType

	//
	// Specifies the user whose data will returned by the call.
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// Defines standard subsets of fields to return within the
	// response.<br>
	// <br>
	// If you don't specify this field, a default
	// set of fields  is returned. Click "Detail Controls" below
	// and see "none" for the default fields.
	// If you specify this field, then the set of fields returned
	// includes the default fields.
	// If you specify this field, the additional
	// fields returned can affect the call's response time
	// (performance), including in the case of feedback data.<br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Details</p>
	// <p class="edef">Include most available fields (such as StoreURL) in the
	// response (except fields that can affect the call's response time).</p>
	// <p class="ename">&bull;&nbsp;&nbsp; FeedbackDetails</p>
	// <p class="edef">Include a container for information about one feedback entry.
	// </p>
	// <p class="ename">&bull;&nbsp;&nbsp; FeedbackHistory</p>
	// <p class="edef">Include a container for summary feedback data for a user.
	// </p>
	// <br>
	// Use a comma to specify multiple values. (In this case,
	// the results are cumulative.) See "GetUserProfile Samples"
	// for an example of how to use this field.<br>
	// <br>
	// See "Detail Controls" for a complete list of
	// fields that can be returned for each selector.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetUserProfileResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserProfileResponseType"`

	*AbstractResponseType

	//
	// Contains the returned user data for the specified eBay user.
	//
	User *SimpleUserType `xml:"User,omitempty"`

	//
	// Summary feedback data for a user. Contains counts of positive, neutral,
	// and negative feedback for predefined time periods.
	//
	FeedbackHistory *FeedbackHistoryType `xml:"FeedbackHistory,omitempty"`

	//
	// The FeedbackDetails container has fields (ItemID, etc.) with information
	// about one feedback entry. When you call GetUserProfile, the 5 (maximum) most
	// recent feedback records are returned in FeedbackDetails containers.
	//
	FeedbackDetails []*FeedbackDetailType `xml:"FeedbackDetails,omitempty"`
}

type GeteBayTimeRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayTimeRequestType"`

	*AbstractRequestType
}

type GeteBayTimeResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayTimeResponseType"`

	*AbstractResponseType
}

type HalfCatalogProductType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents HalfCatalogProductType"`

	//
	// The title of the product, as specified in the catalog.
	// Always returned when Product is returned.
	//
	Title string `xml:"Title,omitempty"`

	//
	// Fully qualified URL for optional information about the product,
	// such as a movie's description or film credits. This information
	// is hosted through the Half.com Web site and it cannot be edited.
	// Portions of the content are protected by copyright.
	// Applications can include this URL as a link in product search results
	// so that end users can view additional descriptive details about
	// the product. This is usually always returned when Product is returned,
	// but it may be safest to check for the existence of this field.
	//
	DetailsURL *AnyURI `xml:"DetailsURL,omitempty"`

	//
	// Fully qualified URL for a stock image (if any) that is associated
	// with the Half.com catalog product. The URL is for the image Half.com
	// usually displays in product search results (usually 70px tall).
	// It may be helpful to calculate the dimensions of the photo
	// programmatically before displaying it.
	// Only returned if a URL is available for the product.
	//
	StockPhotoURL *AnyURI `xml:"StockPhotoURL,omitempty"`

	//
	// Contains basic shipping-related costs for the item. If Item.Quantity is greater
	// than 1, this is the shipping cost for one item. If the seller offers a choice of
	// more than one shipping service (such as USPS Ground or Expediated), this is the
	// cost of the "first" shipping option (usually the lowest cost option).
	//
	ShippingCostSummary *ShippingCostSummaryType `xml:"ShippingCostSummary,omitempty"`

	//
	// If true, your application can attempt to display stock photos that
	// are returned. If false, your application should not attempt to display
	// any stock photos that are returned. This recommendation is useful for
	// catalog data related to products like coins, where stock photos are not
	// necessarily applicable or available. An application with a graphical
	// user interface can use this flag to determine
	// when to hide customized stock photo widgets.
	// Always returned when Product is returned.
	//
	DisplayStockPhotos bool `xml:"DisplayStockPhotos,omitempty"`

	//
	// Total number of listings on the Half.com site that use stock information from
	// this catalog product. This value can be greater than the number of listings
	// returned in ItemArray.
	// <br />
	// <br />
	// <span class="tablenote"><strong>Note:</strong>
	// ItemCount is always returned, however, it's value will be zero unless
	// you use ProductID in the search request and you set IncludeSelector to
	// Items. Although ItemCount always returns 0 if you search using QueryKeyword,
	// check for the presence of MinPrice; if the response contains MinPrice, you
	// can retrieve a value for ItemCount as described.
	// </span>
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// The Half.com ID or the ISBN, EAN, or UPC value (if returned) associated with the product.
	// The ISBN, EAN, and UPC values can also be useful as keys
	// if your application is comparing products across different sites.
	// Always returned when Product is returned.
	//
	//
	ProductID []*ProductIDType `xml:"ProductID,omitempty"`

	//
	// The name of the domain in which the product was found.
	// If the product is mapped to multiple domains, Half.com returns
	// the most applicable domain (as determined by Half.com).
	// Always returned when Product is returned.
	//
	DomainName string `xml:"DomainName,omitempty"`

	//
	// A list of name/value pairs that are included in the product's
	// pre-filled Item Specifics. These indicate common aspects or
	// characteristics of the product, such as Publisher (for a book).
	// Also see ProductID for ISBN, UPC, or EAN values, if applicable.
	// This is usually returned. (We are not aware of any cases in which this
	// node is not be returned. However, it may be safest to check for the
	// existence of this node.)
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// A list of active items that were listed with the requested product.
	// Results are sorted by current price (lowest first),
	// then by recent positive feedback (highest first).
	// <br>
	// <br>
	// Only returned when you specify Items in IncludeSelector, and the
	// product has matching items that are currently active on Half.com.
	//
	ItemArray *SimpleItemArrayType `xml:"ItemArray,omitempty"`

	//
	// The total number of reviews that are available for this product
	// on the Half.com Web site. This can be greater than the number of
	// reviews returned by FindProducts. In a future release, we will provide
	// the capability to retrieve details about reviews.
	// Always returned when Product is returned.
	//
	ReviewCount int32 `xml:"ReviewCount,omitempty"`

	//
	// The minimum price for all active items listed under this product.
	// This field is only returned when QueryKeywords is specified in the request.
	//
	MinPrice *AmountType `xml:"MinPrice,omitempty"`
}

type HalfProductsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents HalfProductsType"`

	//
	// A set of Half.com catalog products. This contains stock information about a
	// particular DVD, book, or other product.
	// When you use QueryKeywords in the request, FindHalfProducts returns a
	// maximum of 20 products per page.
	// When you use ProductID in the request, FindHalfProducts usually only
	// returns 1 product. ItemCount is only returned when ProductID is used
	// in the request and the IncludeSelector is set to Items or Details.
	// In the rare case where more than one product matches the same ProductID,
	// FindProducts will return all of those products.
	//
	Product []*HalfCatalogProductType `xml:"Product,omitempty"`
}

type HistogramEntryType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents HistogramEntryType"`

	//
	// This is the domain name.<br>
	// <br>
	// A product can be mapped to more than one domain.
	// This means that even if a name appears in this histogram and the
	// Count is greater than 1, you won't necessarily see the
	// same name returned for each returned product (in the Product node
	// of the response). That is, Product.DomainName only
	// returns the most applicable domain name (as determined by eBay).
	//
	Name string `xml:"Name,omitempty"`

	//
	// This is the number of products found in the domain.
	// If a product is mapped to more than one domain, it is counted separately
	// for each domain. (For example, if the same product name appears in both
	// Children's Books and Fiction Books, the count for both of these
	// domains will include that product.) This means you cannot sum the
	// product counts to determine the total number of matching products
	// across all domains. The histogram is only intended to show the number
	// of matching products in each individual domain.
	//
	Count int32 `xml:"Count,omitempty"`
}

type InternationalShippingServiceOptionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents InternationalShippingServiceOptionType"`

	//
	// The insurance cost associated with shipping a single item with this shipping
	// service. If the buyer bought more than one of this item, this proportional to
	// QuantitySold. If the item has not yet been sold, insurance information cannot
	// be calculated and the value is 0.00. For calculated shipping only.
	//
	ShippingInsuranceCost *AmountType `xml:"ShippingInsuranceCost,omitempty"`

	//
	// An international shipping service offered for shipping the item (for
	// example, UPS Ground). For flat and calculated shipping.
	//
	ShippingServiceName string `xml:"ShippingServiceName,omitempty"`

	//
	// The cost of shipping each additional item beyond the first item.
	// For single-item listings, if this is not provided, it is defaulted
	// to zero. For multi-quantity listings, if this is not provided, it
	// is set to the value of (in)ShippingServiceCost (unless the request
	// version is lower than 665, in which case ShippingServiceAdditionalCost
	// is required and is not defaulted).
	// For flat shipping only.
	//
	ShippingServiceAdditionalCost *AmountType `xml:"ShippingServiceAdditionalCost,omitempty"`

	//
	// The basic shipping cost of the item.
	// <br>
	// <br>
	// <i>Flat shipping:</i> single-item listing: this matches (in)ShippingServiceCost;
	// multi-quantity listing: with a request version of 665 or greater,
	// this is the total of (in)ShippingServiceCost plus
	// ((in)ShippingServiceAdditionalCost times the number of items beyond the first
	// item), and with a request version lower than 665, this is (in)ShippingServiceCost.
	// <br>
	// <i>Promotional shipping:</i> For a request version lower than 665, promotional
	// shipping has no effect on shipping costs. Otherwise: if the promotional
	// shipping option is lower than other shipping services being offered, the
	// savings is reflected in the returned shipping cost;
	// the shipping service named Promotional Shipping Service (or whatever is
	// the localized name for it) is included among the shipping services;
	// if the promotional shipping cost is lower than the cost of other shipping
	// services being offered, it is presented first in the list (the lowest shipping
	// service cost is always presented first, regardless of whether there is
	// promotional shipping).
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// Seller-preferred presentation order relative to other service options. Valid
	// values are: 1, 2 and 3 (first, second and third choices). For flat and
	// calculated shipping.
	//
	ShippingServicePriority int32 `xml:"ShippingServicePriority,omitempty"`

	//
	// An international location or region to which the item may be shipped via this
	// particular shipping service. Associated with the shipping service by the
	// seller. This is basically the same as SimpleItemType.ShipToLocations except
	// that this is spelled out and the other is abbreviated.
	// Returned with request version 665 or greater, if set via Trading API.
	//
	ShipsTo []string `xml:"ShipsTo,omitempty"`

	//
	// The minimum guaranteed date in which the item could reach the
	// buyer's location.
	// Not applicable to Half.com.
	//
	EstimatedDeliveryMinTime time.Time `xml:"EstimatedDeliveryMinTime,omitempty"`

	//
	// The maximum guaranteed date in which the item could reach the
	// buyer's location.
	// Not applicable to Half.com.
	//
	EstimatedDeliveryMaxTime time.Time `xml:"EstimatedDeliveryMaxTime,omitempty"`

	//
	// The total cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This amount is calculated and supplied for each item by the international shipping provider when a buyer views the item properties.
	//
	ImportCharge *AmountType `xml:"ImportCharge,omitempty"`

	//
	// The last time of day that an order using the specified shipping service will be accepted by the seller for the current listing. The cut off time applies and is returned only when seller offers the listing with a qualifying time-sensitive shipping service, such as eBay Now delivery.
	//
	// The cut off time is set by eBay and determined in part by the policies and locations of the seller and the shipping carrier.
	//
	// Not applicable to Half.com.
	//
	ShippingServiceCutOffTime time.Time `xml:"ShippingServiceCutOffTime,omitempty"`
}

type ItemCompatibilityListType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ItemCompatibilityListType"`

	//
	// Contains details for an individual compatible application, consisting of a list of name-value pairs and related compatibility notes.
	// <br><br>
	// Parts Compatibility is supported in limited Parts & Accessories categories, on the eBay Motors (US) site (site ID 100) only.
	//
	Compatibility []*ItemCompatibilityType `xml:"Compatibility,omitempty"`
}

type ItemCompatibilityType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ItemCompatibilityType"`

	//
	// Contains a list of name-value pairs which together describe a single compatible application. The allowed names and values are specific to the primary category in which the item is listed. For example, when listing in a Parts & Accessories category, where the applications are vehicles, the allowed names might include Year, Make, and Model, and the values correspond to specific vehicles in eBay's catalog.
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`

	//
	// The seller may optionally enter any notes pertaining to the compatibility being specified. Use this field to specify the placement of the part on a vehicle or the type of vehicle that a part fits.
	//
	CompatibilityNotes string `xml:"CompatibilityNotes,omitempty"`
}

type NameValueListArrayType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents NameValueListArrayType"`

	//
	// This list is an array of Item Specifics, which are category-specific
	// fields that the seller added to describe the listing. The names of
	// these fields are different for items in different categories, so
	// they're returned in a generic name/value structure.
	// <br><br>
	// For example, Item Specifics for a car might include a field like
	// Make=Toyota (where Make is returned in Name, and Toyota is returned
	// in Value) and Model=Prius (where Model is returned in Name, and
	// Prius is returned in Value).<br>
	// <br>
	// In multi-variation listings, the same name cannot appear in both
	// the VariationSpecifics node and in the ItemSpecifics node.
	// <br><br>
	// For FindProducts, this can also be an Item Specific that is defined
	// for a product. That is, Item Specifics can be returned both for
	// items and products in FindProducts.
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`
}

type NameValueListType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents NameValueListType"`

	//
	// The name of the item specific.
	// <br>
	// <br>
	// This field is returned only in responses if the seller included an item specific
	// Name in the listing. However, if the seller didn't also include a corresponding
	// value for the item specific, it is best to not display the name to name to avoid
	// confusing users.
	// <br>
	// <br>
	// For the item condition, this usually includes the word "Condition" for eBay US,
	// UK, Australia, and India listings; and "Artikelzustand" for eBay Germany, Austria,
	// and Switzerland listings.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Ignore item specifics with SIFFTAS in the name. These are for internal use by
	// eBay and aren't meaningful to users.
	// </span>
	//
	Name string `xml:"Name,omitempty"`

	//
	// A value for the item specific.
	// <br>
	// <br>
	// This field is only returned in responses if the seller included a value
	// for an item specific. In the GetSingleItem response, this field is always
	// returned for each item specific that is returned (if any). However,
	// if the seller didn't select a value for the item specific,
	// this field may return empty, or it may return a value like "-",
	// "Not Selected", or "Unspecified" (or the equivalent in the language
	// of the site).
	// <br>
	// <br>
	// For the item condition, this usually includes the
	// word "New" or "Used" for eBay US, UK, Australia, and India listings;
	// and "Neu" or "Gebraucht" for eBay Germany, Austria, and Switzerland
	// listings.
	//
	Value []string `xml:"Value,omitempty"`
}

type PickUpInStoreDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents PickUpInStoreDetailsType"`

	//
	// This field is returned as 'true' if the listing is enabled for In-Store Pickup. A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings.
	// <br/><br/>
	// When a seller is successful at listing an item with the In-Store Pickup feature enabled, prospective buyers within a reasonable distance (25 miles or so) from one of the seller's stores (that has stock available) will see the "Available for In-Store Pickup" option on the listing, along with information on the closest store that has the item.
	//
	EligibleForPickupInStore bool `xml:"EligibleForPickupInStore,omitempty"`
}

type PicturesType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents PicturesType"`

	//
	// One aspect of the variations that will be illustrated in the
	// pictures for all variations. For example, if each variation
	// is visually distinguished by color and the pictures show
	// the different colors available, then specify "Color" as the name.
	// The name must match one of the names specified in the
	// variation specifics.
	//
	VariationSpecificName string `xml:"VariationSpecificName,omitempty"`

	//
	// One or more pictures that help buyers distinguish the Variations.
	// Multiple picture sets can be specified. For example, suppose a
	// listing contains blue and black color variations, and
	// VariationSpecificName=Color. In this case, one picture set could
	// contain pictures of the blue shirts (e.g., front view, back view,
	// and close-up of a trim detail), and another picture set could
	// contain pictures of the black shirts.<br>
	// <br>
	// Sellers do not necessarily provide pictures for all values that
	// correspond to the variation specific name.
	// For example, a listing could have pictures depicting the blue and
	// black color variations, but not the pink variations.
	//
	VariationSpecificPictureSet []*VariationSpecificPictureSetType `xml:"VariationSpecificPictureSet,omitempty"`
}

type PopularSearchesType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents PopularSearchesType"`

	//
	// Numeric ID of a category on eBay.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Category ID identifying a category that is the parent category
	// of the category indicated in the request.
	//
	CategoryParentID string `xml:"CategoryParentID,omitempty"`

	//
	// Specifies which QueryKeywords corresponds to this PopularSearchResult.
	// Query Keywords are returned in the output to clarify which result set corresponds to
	// which QueryKeyword inputs (as there can be more than one set of keywords in the input).
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// Alternative search keywords for the query keywords, separated by semicolons.
	// You can use this to find other search terms buyers and sellers may be interested in.
	// For example, if a seller lists an item with "wedding" in the title, they may also be
	// interested in adding "bridal" to the title because bridal is an alternative search
	// keyword which buyers have used.
	//
	AlternativeSearches string `xml:"AlternativeSearches,omitempty"`

	//
	// Keywords related to the query keywords, separated by semicolons.
	// You can use this to find more detailed related keywords.  For example,
	// the query keyword "wedding" is related to searches for
	// "wedding decorations;wedding favors;wedding supplies;wedding dresses..." which helps
	// the seller and buyer specify their query with more detail and precision.
	//
	RelatedSearches string `xml:"RelatedSearches,omitempty"`

	//
	// Category Name identifying the name of current CategoryID.
	//
	CategoryName string `xml:"CategoryName,omitempty"`

	//
	// The name of category which is a parent category to the CategoryID
	// specified in the request.
	//
	CategoryParentName string `xml:"CategoryParentName,omitempty"`
}

type ProductIDType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ProductIDType"`

	Value string

	//
	// The nature of identifier being used. For FindHalfProducts, FindProducts,
	// and FindReviewsAndGuides, only Reference, ISBN, UPC,
	// and EAN are supported.
	// Required when ProductID is specified.
	//
	Type *ProductIDCodeType `xml:"type,attr,omitempty"`
}

type QuantityInfo struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents QuantityInfo"`

	//
	// This field enables the seller to avoid being left with 1 item in a multi-quantity, fixed-
	// priced event ticket listing. A typical use case is event tickets in reserved,
	// adjacent seats, or items that typically only sell if more than
	// 1 can be purchased at once.
	// <br> <br>
	// At listing time, sellers specify the minimum number of items that
	// should remain if a buyer doesn't purchase all the items.
	// Based on the value of <b>MinimumRemnantSet</b> and the listing's
	// available quantity (Quantity-QuantitySold), eBay calculates the quantity of tickets
	// a buyer can purchase.
	// For example, suppose a seller lists 5 tickets, and wants at least
	// 2 tickets remaining for the final buyer to purchase.
	// In this case, the seller would set <b>MinimumRemnantSet</b> to '2'.
	// This means a buyer can purchase 1, 2, 3, or 5 tickets, but not 4
	// (because 4 would leave the seller with 1 ticket).<br>
	// <br>
	// To remove this restriction when revising or relisting item, the seller would
	// set the <b>MinimumRemnantSet</b> value to '1'.<br>
	// <br>
	// This field is currently only applicable for event ticket listings in US and CA, but
	// may apply to other categories in the future. It is only returned if set by the seller
	// in the listing.
	//
	MinimumRemnantSet int32 `xml:"MinimumRemnantSet,omitempty"`
}

type ReturnPolicyType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReturnPolicyType"`

	//
	// This string value indicates whether the seller is only willing to provide a refund to the buyer ('MoneyBack') in the case of a return, or if the seller is allowing the buyer to choose between getting the refund or getting an item exchange ('MoneyBackOrExchange') or item replacement ('MoneyBackOrReplacement').
	//
	Refund string `xml:"Refund,omitempty"`

	//
	// Specifies the length of time in which the item must be returned
	// under the return policy.
	//
	ReturnsWithin string `xml:"ReturnsWithin,omitempty"`

	//
	// This string value indicates whether the seller accepts returns ('ReturnsAccepted') or does not accept returns ('ReturnsNotAccepted').
	//
	ReturnsAccepted string `xml:"ReturnsAccepted,omitempty"`

	//
	// A description of the return policy for the item.
	//
	Description string `xml:"Description,omitempty"`

	//
	// Information about the warranty offered.
	//
	WarrantyOffered string `xml:"WarrantyOffered,omitempty"`

	//
	// The type of warranty offered.
	//
	WarrantyType string `xml:"WarrantyType,omitempty"`

	//
	// The length of the warranty offered.
	//
	WarrantyDuration string `xml:"WarrantyDuration,omitempty"`

	//
	// The European Article Number (EAN) associated with the item, if any. This field is only returned if the seller has supplied this value as part of the return policy when the listing was created/revised.
	//
	EAN string `xml:"EAN,omitempty"`

	//
	// This string value indicates whether the buyer or the seller is responsible for return shipping costs. This field will only be returned if returns are accepted by the seller.
	//
	ShippingCostPaidBy string `xml:"ShippingCostPaidBy,omitempty"`

	//
	// Display string that indicates the restocking fee charged by the
	// seller for returned items. This value is directly related to the
	// <b>RestockingFeeValueOption</b> value, with the difference
	// being that applications can use <b>RestockingFeeValue</b>
	// to present the <b>RestockingFeeValueOption</b> value
	// buttons or drop-down lists.
	//
	RestockingFeeValue string `xml:"RestockingFeeValue,omitempty"`

	//
	// This enumeration value indicates the restocking fee charged by the
	// seller for returned items. In order to charge the buyer a restocking
	// fee when an item is returned, a US seller must input a restocking
	// fee value as part of the return policy.
	//
	RestockingFeeValueOption string `xml:"RestockingFeeValueOption,omitempty"`
}

type ReviewDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviewDetailsType"`

	//
	// The product's average rating (out of 5) based on all reviews.
	// For example, a value like 4.5 would mean the average rating
	// is 4.5 out of 5. (See ReviewCount for the total number of reviews.)
	//
	AverageRating float32 `xml:"AverageRating,omitempty"`

	//
	// An eBay member's review of the product.
	//
	Review []*ReviewType `xml:"Review,omitempty"`
}

type ReviewType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviewType"`

	//
	// A link to the full review on the eBay Web site.
	// This URL optimized for natural search: "_W0QQ" is like "?"
	// (question mark), "QQ" is like "&" (ampersand),
	// and "Z" is like "=" (equals sign).<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// For a link to all reviews for the product, remove the upvr parameter
	// from this URL. See the eBay Features Guide for an example.
	// </span>
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// The title of the review.
	//
	Title string `xml:"Title,omitempty"`

	//
	// The eBay member's rating of the product.
	//
	Rating int32 `xml:"Rating,omitempty"`

	//
	// The text of the review. If the review is longer than
	// 2000 characters, the text is cut off and it ends with "...".
	// See Review.URL for a link to the full text of the review.
	//
	Text string `xml:"Text,omitempty"`

	//
	// The reviewer's eBay user ID.
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// The time and date when the reviewer posted the review.
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`
}

type SalesTaxType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SalesTaxType"`

	//
	// Percent of an item's price to be charged as the sales
	// tax for the transaction. The value passed in is stored with a
	// precision of 3 digits after the decimal point (##.###).
	//
	SalesTaxPercent float32 `xml:"SalesTaxPercent,omitempty"`

	//
	// State or jurisdiction for which the sales tax is being collected.
	// Only returned if the seller specified a value.
	//
	SalesTaxState string `xml:"SalesTaxState,omitempty"`

	//
	// (US only) Whether shipping costs were part of the base amount
	// that was taxed. Flat or calculated shipping.
	//
	ShippingIncludedInTax bool `xml:"ShippingIncludedInTax,omitempty"`

	//
	// (US only) The amount of sales tax, calculated for a
	// transaction based on the SalesTaxPercent and pricing information.
	//
	SalesTaxAmount *AmountType `xml:"SalesTaxAmount,omitempty"`
}

type SellingStatusType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SellingStatusType"`

	//
	// Not used. See Item.ConvertedCurrentPrice.
	//
	ConvertedCurrentPrice *AmountType `xml:"ConvertedCurrentPrice,omitempty"`

	//
	// Not used. See Item.CurrentPrice and Variation.StartPrice.
	//
	CurrentPrice *AmountType `xml:"CurrentPrice,omitempty"`

	//
	// The number of items sold from this variation. Subtract from
	// Quantity to determine the number of items available.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// This field indicates the total quantity of that corresponding item variation (for example, large blue shirts) sold and picked up by buyers using the In-Store Pickup option. This value is the total quantity of this item variation purchased by one or more buyers using the In-Store Pickup option, and is not the total number of In-Store Pickup orders for that item variation. So, if two buyers selected the In-Store Pickup option, but each of these buyers bought a quantity of five of these item variations (in same purchase), the <b>Item.Variations.Variation.SellingStatus.QuantitySoldByPickupInStore</b> value would be '10' and not '2'.
	// <br>
	// <br>
	// This field will only be returned if the listing is eligible for In-Store Pickup.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings.
	// </span>
	//
	QuantitySoldByPickupInStore int32 `xml:"QuantitySoldByPickupInStore,omitempty"`
}

type ShippingCostSummaryType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ShippingCostSummaryType"`

	//
	// The name of a shipping service.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	//
	ShippingServiceName string `xml:"ShippingServiceName,omitempty"`

	//
	// The basic shipping cost of the item.
	// This reflects the domestic shipping cost or the international shipping costs,
	// depending on which applies (that is, whether the bidder/buyer is in the same
	// country as the listing site of the item).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	// <i>Flat shipping:</i> single-item listing: this matches (in)ShippingServiceCost;
	// multi-quantity listing: with a request version of 665 or greater,
	// this is the total of (in)ShippingServiceCost plus
	// ((in)ShippingServiceAdditionalCost times the number of items beyond the first
	// item), and with a request version lower than 665, this is (in)ShippingServiceCost.
	// <br><br/>
	// <i>Promotional shipping:</i> For a request version lower than 665, promotional
	// shipping has no effect on shipping costs. Otherwise: if the promotional
	// shipping option is lower than other shipping services being offered, the
	// savings is reflected in the returned shipping cost;
	// the shipping service named Promotional Shipping Service (or whatever is
	// the localized name for it) is included among the shipping services;
	// if the promotional shipping cost is lower than the cost of other shipping
	// services being offered, it is presented first in the list (the lowest shipping
	// service cost is always presented first, regardless of whether there is
	// promotional shipping).
	// <br><br/>
	// <i>Shipping surcharge:</i> With a request version of
	// 665 or greater, shipping cost includes any surcharge, and surcharge is not
	// returned as an individual tag.  With a request version lower than 665,
	// surcharge is not part of the total cost and is returned as its own tag.
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// The cost of insurance. For flat rate shipping, this is the value set by the
	// seller, if any. For calculated shipping, this is the value calculated by eBay
	// with the shipping carrier for the particular item and can only be determined
	// once the final item price is known when the listing ends. To determine whether
	// a listing has ended, see EndTime or ListingStatus in GetSingleItem.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	//
	InsuranceCost *AmountType `xml:"InsuranceCost,omitempty"`

	//
	// How the seller stated that cost of shipping is to be determined, such as flat rate or
	// calculated.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	//
	ShippingType *ShippingTypeCodeType `xml:"ShippingType,omitempty"`

	//
	// If ShippingCosts is specified for the IncludeSelector, and if the seller has specified local
	// pickup for this item; the LocalPickup boolean is returned as true. This indicates that the
	// seller does not ship this item. If local pickup
	// was not specified for this item by the seller, the LocalPickup boolean is not returned.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	//
	LocalPickup bool `xml:"LocalPickup,omitempty"`

	//
	// Whether the seller offers shipping insurance and, if
	// so, whether the insurance is optional or required. Flat and
	// calculated shipping.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`

	//
	// The listed shipping cost of the item. If multiple items were purchased, this
	// includes the listed ShippingServiceAdditionalCost.
	// <br>
	// <br>
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	//
	ListedShippingServiceCost *AmountType `xml:"ListedShippingServiceCost,omitempty"`

	//
	// The total cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This amount is calculated and supplied for each item by the international shipping provider when a buyer views the item properties.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field provides reliable shipping cost information only when returned by the GetShippingCosts call.
	// </span>
	//
	ImportCharge *AmountType `xml:"ImportCharge,omitempty"`

	//
	// local logistic plan type for this service
	//
	LogisticPlanType string `xml:"LogisticPlanType,omitempty"`
}

type ShippingDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ShippingDetailsType"`

	//
	// The Get It Fast feature and icon are no longer supported in eBay listings.
	//
	//
	GetItFast bool `xml:"GetItFast,omitempty"`

	//
	// The cost of insurance. For flat rate shipping, this is the value set by the
	// seller, if any. For calculated shipping, this is the value calculated by eBay
	// with the shipping carrier for the particular item and can only be determined
	// once the final item price is known when the listing ends. To determine whether
	// a listing has ended, use GetSingleItem.
	// <br> <br>
	// Not applicable to eBay Motors vehicle listings.
	//
	InsuranceCost *AmountType `xml:"InsuranceCost,omitempty"`

	//
	// Whether the seller offers shipping insurance and, if so, whether the insurance
	// is optional or required. Flat and calculated shipping.
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`

	//
	// Shipping costs and options related to an international shipping service. For
	// calculated shipping, postal code must be known to determine final shipping
	// cost (and this can only be known if a transaction has been created). For
	// GetShippingCosts, if the postal code or bidder is in the same country as the
	// listing site for the item, it is "domestic shipping" and this container is not
	// returned (and ShippingServiceOption is returned instead). Otherwise, it is
	// "international shipping" and this container is returned.
	// <br> <br>
	// For GetShippingCosts, results are filtered:  if any service is not available
	// in the buyer's region, it is removed. If no services remain after this
	// filtering, a warning is returned.
	// <br><br>
	// Not applicable to Half.com or eBay Motors vehicle listings.
	//
	InternationalShippingServiceOption []*InternationalShippingServiceOptionType `xml:"InternationalShippingServiceOption,omitempty"`

	//
	// Sales tax details. US site only. Flat and calculated shipping.
	// <br> <br>
	// Not applicable to eBay Motors vehicle listings.
	//
	SalesTax *SalesTaxType `xml:"SalesTax,omitempty"`

	//
	// For most applicable calls, returns the words No Error or returns an error
	// message related to an attempt to calculate shipping rates. For calculated
	// shipping only.
	// <br> <br>
	// Not applicable to Half.com or eBay Motors vehicle listings.
	//
	ShippingRateErrorMessage string `xml:"ShippingRateErrorMessage,omitempty"`

	//
	// Shipping costs and options related to a domestic shipping service.
	// For GetShippingCosts, if the postal code or bidder is
	// in the same country as the listing site for the item, it is "domestic
	// shipping" and this container is returned. Otherwise, it is "international
	// shipping" and this container is not returned (and InternationalShippingServiceOption
	// is returned instead, if it exists).
	// For calculated shipping, postal code must be known to determine final shipping
	// cost (and this can only be known if a transaction has been created).
	// For flat shipping: if the listing has not yet ended, any domestic
	// shipping details are returned; if the listing has ended, domestic
	// shipping details are only returned if the buyer's location is
	// "domestic" (that is, it is the same country as the listing site).
	// <br>
	// Not applicable to Half.com or eBay Motors vehicle listings.
	//
	ShippingServiceOption []*ShippingServiceOptionType `xml:"ShippingServiceOption,omitempty"`

	//
	// Tax details for a jurisdiction such as a state or province.
	// Returned empty in if no tax table was used.
	// <br> <br>
	// Not applicable to Half.com.
	//
	TaxTable *TaxTableType `xml:"TaxTable,omitempty"`

	//
	// The cost of insurance for items shipped internationally. For flat rate
	// shipping, this is the value set by the seller, if any. For calculated
	// shipping, this is the value calculated by eBay with the shipping carrier for
	// the particular item and can only be determined once the final item price is
	// known when the listing ends. To determine whether a listing has ended, use
	// GetSingleItem.
	// <br> <br>
	// Not applicable to eBay Motors vehicle listings.
	//
	InternationalInsuranceCost *AmountType `xml:"InternationalInsuranceCost,omitempty"`

	//
	// Whether the seller offers shipping insurance for items shipped internationally
	// and, if so, whether the insurance is optional or required. Flat and calculated
	// shipping.
	//
	InternationalInsuranceOption *InsuranceOptionCodeType `xml:"InternationalInsuranceOption,omitempty"`

	//
	// Italy site (site ID 101) only. Contains the cost of cash-on-delivery shipping.
	//
	CODCost *AmountType `xml:"CODCost,omitempty"`

	//
	// A location to which the seller will not ship.
	// Returned only if set via Trading API.
	// Returned only with a request version of 665 or greater.
	//
	ExcludeShipToLocation []string `xml:"ExcludeShipToLocation,omitempty"`
}

type ShippingServiceOptionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ShippingServiceOptionType"`

	//
	// The insurance cost associated with shipping a single item with this shipping
	// service. If the buyer bought more than one of this item, this proportional to
	// QuantitySold.  If the item has not yet been sold, insurance information cannot
	// be calculated and the value is 0.00. For calculated shipping only.
	//
	ShippingInsuranceCost *AmountType `xml:"ShippingInsuranceCost,omitempty"`

	//
	// A domestic shipping service offered for shipping the item (for example, UPS
	// Ground). For flat and calculated shipping.
	//
	ShippingServiceName string `xml:"ShippingServiceName,omitempty"`

	//
	// Reserved for internal or future use.
	//
	LogisticPlanType string `xml:"LogisticPlanType,omitempty"`

	//
	// The basic shipping cost of the item.
	// <br>
	// <br>
	// <i>Flat shipping:</i> single-item listing: this matches (in)ShippingServiceCost;
	// multi-quantity listing: with a request version of 665 or greater,
	// this is the total of (in)ShippingServiceCost plus
	// ((in)ShippingServiceAdditionalCost times the number of items beyond the first
	// item), and with a request version lower than 665, this is (in)ShippingServiceCost.
	// <br>
	// <i>Promotional shipping:</i> For a request version lower than 665, promotional
	// shipping has no effect on shipping costs. Otherwise: if the promotional
	// shipping option is lower than other shipping services being offered, the
	// savings is reflected in the returned shipping cost;
	// the shipping service named Promotional Shipping Service (or whatever is
	// the localized name for it) is included among the shipping services;
	// if the promotional shipping cost is lower than the cost of other shipping
	// services being offered, it is presented first in the list (the lowest shipping
	// service cost is always presented first, regardless of whether there is
	// promotional shipping).
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// The cost of shipping each additional item beyond the first item (flat shipping).
	// For single-item listings, if this is not provided, it is defaulted
	// to zero. For multi-quantity listings, if this is not provided, it
	// is set to the value of (in)ShippingServiceCost (unless the request
	// version is lower than 665, in which case ShippingServiceAdditionalCost
	// is required and is not defaulted).
	// Not applicable to Half.com.
	//
	ShippingServiceAdditionalCost *AmountType `xml:"ShippingServiceAdditionalCost,omitempty"`

	//
	// Seller-preferred presentation order relative to other
	// service options. Valid values: 1 (1st choice), 2 (2nd choice),
	// 3 (3rd choice). For flat and calculated shipping.
	// Not applicable to Half.com.
	//
	ShippingServicePriority int32 `xml:"ShippingServicePriority,omitempty"`

	//
	// Indicates whether the service is an expedited shipping service. See Enabling Get It Fast.
	// Not applicable to Half.com.
	//
	ExpeditedService bool `xml:"ExpeditedService,omitempty"`

	//
	// The minimum guaranteed number of business days in which the shipping carrier
	// can ship an item (not including the time it takes the seller to
	// deliver the item to the shipping carrier). See Enabling Get It Fast.
	// Not applicable to Half.com.
	//
	ShippingTimeMin int32 `xml:"ShippingTimeMin,omitempty"`

	//
	// The maximum guaranteed number of business days the shipping carrier will
	// take to ship an item (not including the time it takes the seller to
	// deliver the item to the shipping carrier). See Enabling Get It Fast.
	// Not applicable to Half.com.
	//
	ShippingTimeMax int32 `xml:"ShippingTimeMax,omitempty"`

	//
	// An additional fee to charge US buyers who ship via UPS to Alaska, Hawaii
	// or Puerto Rico. Can only be assigned a value for Parts and Accessories
	// items on the eBay US and Motors sites. Only returned if set.
	// If some transactions in an order have a surcharge, surcharge is added
	// only for those transactions.
	// Flat rate shipping only.
	// <br>
	// <br>
	// With a request version of 665 or greater, total shipping cost includes any
	// surcharge, and ShippingSurcharge is no longer returned as an individual tag.
	//
	ShippingSurcharge *AmountType `xml:"ShippingSurcharge,omitempty"`

	//
	// An international location or region to which the item may be shipped via this
	// particular shipping service. Associated with the shipping service by the
	// seller. Use GeteBayDetails to determine which locations are valid per site.
	// These values are string equivalents of values found in ShippingRegionCodeType
	// and CountryCodeType.
	// Returned with request version 665 or greater, if set via Trading API.
	//
	ShipsTo []string `xml:"ShipsTo,omitempty"`

	//
	// The minimum guaranteed date in which the item could reach the
	// buyer's location.
	// Not applicable to Half.com.
	//
	EstimatedDeliveryMinTime time.Time `xml:"EstimatedDeliveryMinTime,omitempty"`

	//
	// The maximum guaranteed date in which the item could reach the
	// buyer's location.
	// Not applicable to Half.com.
	//
	EstimatedDeliveryMaxTime time.Time `xml:"EstimatedDeliveryMaxTime,omitempty"`

	//
	// Indicates whether the service is fast in delivery to the end user (less than 4 days) and free for buyer.
	//
	FastAndFree bool `xml:"FastAndFree,omitempty"`

	//
	// The last time of day that an order using the specified shipping service will be accepted by the seller for the current listing. The cut off time applies and is returned only when seller offers the listing with a qualifying time-sensitive shipping service, such as eBay Now delivery.
	//
	// The cut off time is set by eBay and determined in part by the policies and locations of the seller and the shipping carrier.
	//
	// Not applicable to Half.com.
	//
	ShippingServiceCutOffTime time.Time `xml:"ShippingServiceCutOffTime,omitempty"`
}

type SimpleItemArrayType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SimpleItemArrayType"`

	//
	// Contains data for an item listing.
	//
	Item []*SimpleItemType `xml:"Item,omitempty"`
}

type SimpleItemType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SimpleItemType"`

	//
	// Whether the seller will accept a best offer for this item.
	// This feature enables a buyer to make a lower-priced binding offer on a
	// fixed price item. Buyers can't see how many offers have been made
	// (only the seller can see this information). To make a best offer on a
	// listing, use the eBay Web site.
	//
	BestOfferEnabled bool `xml:"BestOfferEnabled,omitempty"`

	//
	// The Buy It Now price of the item, returned in the currency of the site
	// on which the item was listed.
	// <br />
	// <br />
	// For auction listings, Buy It Now lets a user purchase the item at a fixed price and
	// end the auction immediately. On most sites, after an auction has bids, the
	// listing is no longer eligible for Buy It Now. However, calls can return
	// BuyItNowPrice if the seller originally listed the item with a Buy It Now option. Use
	// the Item.BidCount field to determine whether an auction with Buy It Now has bids or
	// not, and use Item.BuyItNowAvailable to see if the Buy It Now option is still
	// available.
	// <br />
	// <br />
	// Price fields are returned as doubles, not necessarily in the traditional
	// monetary format of the site's country. For example, a US Dollar value might be
	// returned as 3.880001 instead of 3.88.
	// <br>
	// <br />
	// For fixed-price (FixedPriceItem) listings, see CurrentPrice or ConvertedCurrentPrice instead.
	// <br />
	// <br />
	// Returned only if an item was listed with a Buy It Now option.
	//
	BuyItNowPrice *AmountType `xml:"BuyItNowPrice,omitempty"`

	//
	// The seller's description of the item, if any. This can include
	// HTML markup and JavaScript. See <a
	// href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#string">string</a>
	// in Simple Schema Types.
	// <br>
	// <br>
	// Some sellers don't specify their own listing description.
	// Instead, they use a stock description from a catalog available
	// through eBay. (GetSingleItem doesn't return this stock information.)
	//
	Description string `xml:"Description,omitempty"`

	//
	// The ID that uniquely identifies the item listing. eBay generates this ID
	// when an item is listed. This ID is unique across all eBay sites.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// Indicates whether the item has an active Buy It Now option. On most sites, the
	// Buy It Now option is disabled once a valid bid for the item has been accepted.
	// To see if the item was listed with a Buy It Now option, see if the response
	// includes Item.BuyItNowPrice.
	// <br />
	// <br />
	// This field is returned only if the value is true.
	//
	BuyItNowAvailable bool `xml:"BuyItNowAvailable,omitempty"`

	//
	// The listing's Buy It Now Price (if any), converted into the currency
	// of the site to which you sent this request.
	// <br />
	// <br />
	// Price fields are returned as doubles, not necessarily in the traditional
	// monetary format of the site's country. For example, a US Dollar value might be
	// returned as 3.880001 instead of 3.88.
	// <br />
	// <br />
	// Some eBay sites also support multi-item Buy It Now auctions, where you can buy
	// multiple items from the same listing at a fixed price. See Item.BuyItNowAvailable.
	// <br>
	// <br>
	// For fixed-price (FixedPriceItem) listings, see
	// CurrentPrice or ConvertedCurrentPrice instead.
	// <br>
	// <br>
	// Returned only if an item was listed with a Buy It Now option.
	// <br>
	// <br>
	// For active items, refresh this value every 24 hours to pick up the current
	// conversion rates (if this value has been converted).
	//
	ConvertedBuyItNowPrice *AmountType `xml:"ConvertedBuyItNowPrice,omitempty"`

	//
	// Time stamp (in <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#dateTime">GMT</a>)
	// of when the listing is scheduled to end, or time stamp of the actual end time
	// (if the item ended).
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// Time stamp (in <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#dateTime">GMT</a>) that
	// eBay recorded as the moment that the listing was made available.
	// The start time returned by a search call may vary
	// from the value returned by GetSingleItem.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// The URL to view this listing on eBay. This URL is optimized to support natural
	// search. That is, this URL is designed to make items on eBay easier to find via
	// popular Internet search engines. For example, this URL specifies the item title, and
	// it is optimized for natural search: "_W0QQ" is like "?" (question mark), "QQ" is like
	// "&" (ampersand), and "Z" is like "=" (equals sign). You shouldn't modify the
	// query syntax in your application. For example, eBay won't recognize the URL if you
	// change QQ to ?.
	//
	ViewItemURLForNaturalSearch *AnyURI `xml:"ViewItemURLForNaturalSearch,omitempty"`

	//
	// The format of the listing, such as online auction, fixed price,
	// or advertisement format.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// Physical location of the item, as specified by the seller.
	// (This gives a general indication of where the item will be
	// shipped or delivered from.)
	//
	Location string `xml:"Location,omitempty"`

	//
	// Identifies the payment method (such as PayPal) the seller
	// will accept when the buyer pays for the item. <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// If the seller only accepts PayPal, the buyer can still pay
	// with a credit card. PayPal supports major credit cards.
	// </span>
	// <br>
	// Payment methods are not applicable to eBay Real Estate advertisement
	// listings, or other Classified Ad format listings.
	//
	PaymentMethods []*BuyerPaymentMethodCodeType `xml:"PaymentMethods,omitempty"`

	//
	// URL for a picture used as the Gallery thumbnail, if any. The image uses
	// one of the following graphics formats: JPEG, BMP, TIF, or GIF. Only
	// returned if the seller chose to show a gallery image.
	//
	GalleryURL *AnyURI `xml:"GalleryURL,omitempty"`

	//
	// Contains the URL for an image associated with the item, if any.
	// Returned only if the seller included at least one picture
	// in their listing. Note that this element does not return the URLs of
	// pictures that the seller included in the Description via HTML IMG tags.
	// <br>
	// <br>
	// Items listed the main eBay site can have a maximum of 12 picture URLs
	// hosted by eBay Picture Services or a maximum of 12 picture URLs hosted externally (outside of eBay). Note that a listing can have up to
	// 24 picture URLs on the US eBay Motors site (for all vehicle listings),
	// and on the eBay Canada Motors site.
	// <br>
	// <br>
	// eBay uses the seller's first picture at the top of the listing's
	// View Item page.
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`

	//
	// Postal code indicating the physical location of the item,
	// as specified by the seller. (This gives a general indication of where
	// the item will be shipped or delivered from.)
	//
	PostalCode string `xml:"PostalCode,omitempty"`

	//
	// Numeric ID of the first (or only) category in which the item is listed.
	// (Listings can appear in more than one category.)
	//
	PrimaryCategoryID string `xml:"PrimaryCategoryID,omitempty"`

	//
	// Display name of the first (or only) category in which the item is
	// listed. This is a fully qualified category breadcrumb
	// (e.g., Computers & Networking:Laptops, Notebooks).
	//
	PrimaryCategoryName string `xml:"PrimaryCategoryName,omitempty"`

	//
	// The number of items the seller is offering in the listing. (Subtract
	// Item.QuantitySold from this value to calculate the number of items
	// currently available for sale.)
	// <br>
	// <br>
	// An auction listing always has a Quantity of 1. Basic fixed-price listings can
	// have a Quantity of 1 or more.
	// <br />
	// <br />
	// The listing's current or Buy It Now price is the price of the item in the
	// listing.
	// <br />
	// <br />
	// <span class="tablenote"><strong>Note:</strong>
	// A seller can also offer multiple items for sale with a single
	// price for all the items. For example, instead of listing 10 light bulbs
	// for US 2.00 each, they might list 10 light bulbs for USD 20.00 (where
	// you have to buy all 10). This is called a "lot."
	// <br />
	// <br />
	// If the listing includes a lot, Quantity does not specify the lot size; it
	// reflects how many lots are being sold. For example, if the original listing
	// included 5 lots of 10 light bulbs each, Quantity would be 5.
	// </span>
	// <br />
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// Container for information about this listing's seller.
	//
	Seller *SimpleUserType `xml:"Seller,omitempty"`

	//
	// The number of bids that have been placed on the item.
	// <br>
	// <br>
	// On most sites, the Buy It Now Option becomes unavailable once an auction
	// has a valid bid. Note that the bid must be above any reserve price.
	// <br>
	// <br>
	//
	BidCount int32 `xml:"BidCount,omitempty"`

	//
	// The listing's Buy It Now Price (if any), converted into the currency
	// of the site to which you sent this request.
	// <br />
	// <br />
	// Price fields are returned as doubles, not necessarily in the traditional
	// monetary format of the site's country. For example, a US Dollar value might be
	// returned as 3.880001 instead of 3.88.
	// <br>
	// <br />
	// Some eBay sites also support multi-item Buy It Now auctions, where you can buy
	// multiple items from the same listing at a fixed price. See Item.BuyItNowAvailable.
	// <br>
	// <br>
	// For fixed-price (FixedPriceItem) listings, see
	// CurrentPrice or ConvertedCurrentPrice instead.
	// <br>
	// <br>
	// Returned only if an item was listed with a Buy It Now option.
	// <br>
	// <br>
	// For active items, refresh this value every 24 hours to pick up the current
	// conversion rates (if this value has been converted).
	//
	ConvertedCurrentPrice *AmountType `xml:"ConvertedCurrentPrice,omitempty"`

	//
	// The current price of the item in the original listing currency.
	// <br><br>
	// For auction listings, this price is the starting minimum price (if the listing has no bids) or the current highest bid (if bids have been placed) for the item. This does not reflect the BuyItNow price.
	// <br><br>
	// For fixed-price and ad format listings, this is the current listing price.
	//
	CurrentPrice *AmountType `xml:"CurrentPrice,omitempty"`

	//
	// The high bidder for competitive-bidding auctions that have ended and have a winning
	// bidder. This indicates the user who purchased the item.
	// <br>
	// <br>
	// Not returned for auctions that have received no bids, or for fixed price
	// listings that are still active.
	//
	HighBidder *SimpleUserType `xml:"HighBidder,omitempty"`

	//
	// Specifies a listing's status in eBay's processing workflow.
	// If an item's EndTime is in the past, but no details about the
	// buyer or high bidder are shown (and the user is not anonymous),
	// use this listing status information to determine whether eBay has
	// finished processing the listing.
	//
	ListingStatus *ListingStatusCodeType `xml:"ListingStatus,omitempty"`

	//
	// Number of items purchased so far from this listing. (Subtract this value from
	// Item.Quantity to calculate the number of items currently available for sale.)
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// Indicates whether any bids on this item are greater than the seller's
	// reserve price for the listing (if any).
	// <br>
	// <br>
	// A reserve is the lowest price at which the seller is willing to sell
	// the item. The reserve price is higher than the listing's opening bid
	// (minimum bid) and lower than the Buy It Now price, if any.
	// (The reserve price is only known to the seller.)
	// Some sellers don't set a reserve at all. If a listing does have
	// a reserve price, the highest bidder will only win
	// the item if their bid is also above that price.
	// <br>
	// <br>
	// Only returned for online auctions that have a reserve price. (Fixed price, Store
	// Inventory, and classified ad listings don't have reserve prices.)
	//
	ReserveMet bool `xml:"ReserveMet,omitempty"`

	//
	// An international location or region to which the seller is willing
	// to ship this item. Returned only for items that have ShipToLocations
	// specified.
	// <br>
	// <br>
	// <strong>Applicable values</strong>:
	// <p class="ename">&bull;&nbsp;&nbsp; Americas</p>
	// <p class="edef">(North, South, or Latin America)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Asia</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Caribbean</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Europe</p>
	// <p class="ename">&bull;&nbsp;&nbsp; EuropeanUnion</p>
	// <p class="ename">&bull;&nbsp;&nbsp; LatinAmerica</p>
	// <p class="ename">&bull;&nbsp;&nbsp; MiddleEast</p>
	// <p class="ename">&bull;&nbsp;&nbsp; NorthAmerica</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Oceania</p>
	// <p class="edef">(Pacific region other than Asia)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; SouthAmerica</p>
	// <p class="ename">&bull;&nbsp;&nbsp; WillNotShip</p>
	// <p class="edef">(No shipping, buyer must pick up the item)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Worldwide</p>
	// <p class="edef">(Seller will ship worldwide)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; 2-letter country identifier</p>
	// <p class="edef">(See CountryCodeType for values)</p>
	//
	ShipToLocations []string `xml:"ShipToLocations,omitempty"`

	//
	// The name of the eBay site on which the item was originally listed.
	// For example, if the item is listed on the eBay US site,
	// the value would be US. If it's listed on the eBay Germany site,
	// the value would be Germany.
	// <br>
	// <br>
	// The listing's original site can affect the values of converted
	// (localized) prices (when your request specifies a site
	// that is different from the listing's site).
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// Time left before the listing ends.
	// The duration is represented in the ISO 8601 duration format (PnYnMnDTnHnMnS).
	// For ended listings, the time left is PT0S (zero seconds).
	//
	TimeLeft *Duration `xml:"TimeLeft,omitempty"`

	//
	// Name of the item as it appears in the listing or in search and
	// browse results.
	// <br>
	// <br>
	// <b>For US eBay Motors vehicles only:</b> In item-retrieval
	// calls (like GetSingleItem and GetMultipleItems), this value shows the
	// vehicle Make and Model (e.g., "Buick : Skylark").
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// GetSingleItem does not return the same Item.Title
	// value for US eBay Motors listings. Here's why:
	// <br>
	// <br>
	// In general, GetSingleItem maps to eBay's View Item page. The eBay Motors
	// Web site's View Item page shows two vehicle titles in the title bar: One
	// title is a label based on the Year, Make, Model, and Submodel (e.g.,
	// "1996 Buick Skylark Limited"). The model is included unless it's "Other"
	// or unspecified. The submodel is included if the seller specified a
	// submodel. The other title is a path based on the Make and Model (e.g.,
	// "Buick : Skylark"). The Item.Title value in GetSingleItem maps to this
	// path.
	// </span>
	// <br />
	//
	Title string `xml:"Title,omitempty"`

	//
	// <span class="tablenote">
	// <strong>Important:</strong> This container and its children do not provide reliable shipping cost information when returned by the FindProducts, GetMultipleItems and GetSingleItem calls. If a listing has shipping costs, use the GetShippingCosts call to get more details about the services and costs that the seller is offering.
	// </span>
	//
	ShippingCostSummary *ShippingCostSummaryType `xml:"ShippingCostSummary,omitempty"`

	//
	// Category-specific fields that the seller added to describe
	// the listing. The names of these fields are different for items
	// in different categories, so they're returned in a generic
	// Name/Value structure. The field names are usually very well known
	// within the category.
	// <br>
	// <br>
	// For example, a book's item specifics might include a field like
	// Publication Year=2007 (where Publication Year is returned in Name, and
	// 2007 is returned in Value), and a field like Format=Hardcover. But a car's
	// item specifics would be different from a book's, with fields like Make=
	// Toyota and Model=Prius. And a ticket's item specifics would be different
	// from those of books and cars, with fields like EventType=Concerts and
	// Venue=The Fillmore.
	// <br>
	// <br>
	// One of the most common uses for item specifics is the item condition.
	// <br>
	// <br>
	// Only returned if the seller included Item Specifics in the listing.
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// The number of times the listing's View Item page has been viewed (as determined by
	// eBay). Only returned if the seller has chosen to include a hit counter in the
	// listing, and if the seller has also chosen to make the listing's hit count publicly
	// visible. This field is retrieved asynchronously. If you believe the item has a
	// publicly visible hit count, but this field is not returned, retry the call.
	// <br>
	// <br>
	// Not applicable to Half.com
	//
	HitCount int64 `xml:"HitCount,omitempty"`

	//
	// Subtitle of the item. Only returned if the seller included a
	// subtitle for the listing.
	// <br>
	// <br>
	// For US eBay Motors passenger vehicle, motorcycle, and "other vehicle"
	// categories or listings in CA eBay Motors passenger vehicle and
	// motorcycle categories, the seller's subtitle is only available
	// in the Item.ItemSpecifics node. Call GetSingleItem with
	// IncludeSelector=ItemSpecifics to retrieve a listing's Item Specifics.
	//
	Subtitle string `xml:"Subtitle,omitempty"`

	//
	// The fully qualified ID breadcrumb (path) of the first category.
	// For example, if the primary category ID is 45678, and its parent
	// category's ID is 123, the breadcrumb (path) would be 123:45678.
	//
	PrimaryCategoryIDPath string `xml:"PrimaryCategoryIDPath,omitempty"`

	//
	// ID of the second category in which the item is listed. Returned only if
	// the seller listed a second category.
	//
	SecondaryCategoryID string `xml:"SecondaryCategoryID,omitempty"`

	//
	// Name of the second category in which the item is listed. Returned only if
	// the seller listed a second category.
	//
	SecondaryCategoryName string `xml:"SecondaryCategoryName,omitempty"`

	//
	// The fully qualified ID breadcrumb (path) of the second category. For example, if the
	// secondary category ID is 45678, and its parent category's ID is 123, the breadcrumb
	// (path) would be 123:45678. Returned only if the seller listed a second category.
	//
	SecondaryCategoryIDPath string `xml:"SecondaryCategoryIDPath,omitempty"`

	//
	// Identifier for a Giving Works listing and the benefiting nonprofit charity
	// organization.
	//
	Charity *CharityType `xml:"Charity,omitempty"`

	//
	// The item is featured in eBay search results on the mobile.de partner site.
	// Applicable to eBay Germany.
	//
	GermanMotorsSearchable bool `xml:"GermanMotorsSearchable,omitempty"`

	//
	// The Get It Fast feature and icon are no longer supported in eBay listings.
	//
	GetItFast bool `xml:"GetItFast,omitempty"`

	//
	// If true, a generic gift icon displays next the listing's title in search and
	// browse pages.
	//
	Gift bool `xml:"Gift,omitempty"`

	//
	// Returns true if the item has an associated picture. Not returned
	// if value is false.
	//
	PictureExists bool `xml:"PictureExists,omitempty"`

	//
	// Returns true if the item listing is no more than one day old. Not returned
	// if value is false.
	//
	RecentListing bool `xml:"RecentListing,omitempty"`

	//
	// Returns the seller's store information if the seller has an eBay store.
	// Returns a blank store if the seller does not have an eBay storefront.
	//
	Storefront *StorefrontType `xml:"Storefront,omitempty"`

	//
	// The distance of the item from the buyer. The DistanceFromBuyer unit (miles
	// or kilometers) varies by site. If the country whose site you are
	// searching, e.g. India, uses kilometers, then the DistanceFromBuyer unit is
	// kilometers. Otherwise, e.g. if the country is US or UK, then the
	// DistanceFromBuyer unit is miles. DistanceFromBuyer is returned if a
	// value for PostalCode is supplied in the request.
	//
	DistanceFromBuyer *DistanceType `xml:"DistanceFromBuyer,omitempty"`

	//
	// A two-letter code that represents the country in which the item is located.
	// <br><br>
	// To see the list of currently supported country
	// codes, and the English names associated with each code (e.g., KY="Cayman Islands"),
	// call the Trading API's <b>GeteBayDetails</b>, with <b>DetailName</b> set to <b>CountryDetails</b>,
	// and then look for <b>CountryDetails.Country</b> fields in the response.
	// <br><br>
	// Most of the codes that eBay uses conform to the ISO 3166 standard, but some of the
	// codes in the ISO 3166 standard are not used by eBay. Plus, there are some non-ISO
	// codes in the eBay list.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> The  list is only a subset of all supported country codes, so to ensure that you are seeing the latest list, you should make a <b>GeteBayDetails</b> call as explained above.
	// </span>
	//
	Country *CountryCodeType `xml:"Country,omitempty"`

	//
	// Number of users who have placed the item on their Watch list.
	//
	WatchCount int32 `xml:"WatchCount,omitempty"`

	//
	// Returns the Half.com condition code for the item. For example, "brand new,"
	// "used," etc.
	//
	HalfItemCondition *HalfItemConditionCodeType `xml:"HalfItemCondition,omitempty"`

	//
	// Notes that the Seller made when they listed the item. Not returned if the Seller
	// did not make any comments.
	//
	SellerComments string `xml:"SellerComments,omitempty"`

	//
	// If a seller specified return policy details, then this container has fields with
	// those details. The fields that can be returned in this container vary by site.
	//
	ReturnPolicy *ReturnPolicyType `xml:"ReturnPolicy,omitempty"`

	//
	// Smallest amount the next bid on the item can be. Returns same value as
	// Item.StartPrice (if no bids have yet been placed) or CurrentPrice plus
	// BidIncrement (if at least one bid has been placed). Only applicable to
	// competitive-bid auction listings. Returns null for basic Fixed Price
	// (FixedPriceItem) and Ad type listings.
	//
	MinimumToBid *AmountType `xml:"MinimumToBid,omitempty"`

	//
	// A prototype description of a well-known type of item, such as a popular book.
	// <br>
	// <br>
	// When returned for GetSingleItem, is always of type Reference, and serves as a global
	// reference ID for an eBay catalog product.
	// <br>
	// <br>
	// When used as input, retrieves product details for one specific product. Specify the
	// ID as a string, and use the type attribute to indicate the nature of the ID you are
	// specifying.
	// <br>
	// <br>
	// The request requires either QueryKeywords or
	// ProductID, but these fields cannot be used together.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// If true, the seller requires immediate payment for the item. If false (or
	// not specified), immediate payment is not requested. Buyers must have a
	// PayPal account to purchase items that require immediate payment.
	// <br><br>
	// A seller can choose to require immediate payment for Fixed Price and Buy
	// It Now listings. If a Buy It
	// Now item ends as an auction (that is, if the Buy It Now option is removed
	// due to bids being placed on the listing), the immediate payment
	// requirement does not apply.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The value of the AutoPay flag indicates the seller's stated preference
	// only. It does not indicate whether the listing is still a candidate for
	// purchase via immediate payment. For example, if a listing receives bids
	// and no longer qualifies for immediate payment, the value of the AutoPay
	// flag does not change.
	// </span>
	// <br>
	// Only applicable to items listed on PayPal-enabled sites and in categories
	// that support immediate payment. Not applicable to Half.com.
	//
	AutoPay bool `xml:"AutoPay,omitempty"`

	//
	// Returns the seller's business information. Set the SellerBusinessCodeType
	// to 'Commercial' in the request to return the related information. This is only
	// applicable for sites where Business Seller options are supported.
	//
	BusinessSellerDetails *BusinessSellerDetailsType `xml:"BusinessSellerDetails,omitempty"`

	//
	// Enables you to view the sites on which an item can be purchased,
	// based on the payment methods offered for the item.
	//
	PaymentAllowedSite []*SiteCodeType `xml:"PaymentAllowedSite,omitempty"`

	//
	// Indicates whether the item can be paid for through a payment gateway account. If
	// IntegratedMerchantCreditCardEnabled is true, then integrated merchant credit card is
	// enabled for credit cards because the seller has a payment gateway account. Therefore,
	// if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or VisaMC is
	// returned for an item, then on checkout, an online credit-card payment is processed
	// through a payment gateway account.
	//
	IntegratedMerchantCreditCardEnabled bool `xml:"IntegratedMerchantCreditCardEnabled,omitempty"`

	//
	// Variations are multiple similar (but not identical) items in a single fixed-price listing. For example, a single listing could contain multiple
	// items of the same brand and model that vary by color and size (like "Blue, Large" and
	// "Black, Medium"). Each variation can have its own quantity and price. Only returned
	// if the listing contains multiple variations.
	//
	Variations *VariationsType `xml:"Variations,omitempty"`

	//
	// Specifies the maximum number of business days the seller commits to for preparing an item to be shipped after receiving a cleared payment. When listing the item, the seller sets this to an integer value (<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>10</code>, <code>15</code> or <code>20</code>) corresponding to the number of days. This time does not include the shipping time (the carrier's transit time).
	// <br/><br/>
	// <strong>GetSingleItem</strong> or <strong>GetMultipleItems</strong> returns <strong>HandlingTime</strong> only when shipping service options are specified for the item and the seller specified a handling time.
	// <br/><br/>
	// A <strong>HandlingTime</strong> value of <code>0</code> indicates <em>same day handling</em> for an item. In this case, the seller's shipping commitment depends on the <em>order cut off time</em> set in the seller's user preferences. This defaults to 2:00 PM local time on most sites, but it can be overridden by the seller for the eBay site on which the item is listed. For orders placed (and cleared payment received) before the local order cut off time, the item must be shipped by the end of the current day. For orders completed on or after the order cut off time, the item must be shipped by the end of the following day (excluding weekends and local holidays).
	// <br><br>
	// <span class="tablenote">
	// <strong>Note:</strong> If a same day shipping carrier is selected, and the carrier delivers on one or both weekend days, sellers on the eBay US site are assumed to be open for business on the same days, and those days will be used when calculating total shipping time.
	// </span>
	// Valid for flat and calculated shipping. Does not apply when there is no shipping, or when using local pickup only or freight shipping.
	//
	HandlingTime int32 `xml:"HandlingTime,omitempty"`

	//
	// A lot is a set of two or more similar items that must be purchased together in
	// a single transaction. A listing can have multiple lots (instead of multiple
	// items). When LotSize is specified, the listing price reflects the price of
	// each lot (not each item within the lot). In this case, Quantity indicates the
	// number of lots being listed, and LotSize indicates the number of items in each
	// lot. (If a listing has no lots, Quantity indicates the number of separate
	// items being listed.) Important: Lot items can be listed only in lot-enabled
	// categories. GetCategories returns lot size disabled with a value of true
	// for categories that do not support lots.
	// <br /><br />
	// Not applicable to Half.com.
	//
	LotSize int32 `xml:"LotSize,omitempty"`

	//
	// The numeric ID (e.g., 1000) for the item condition.
	// Only returned when the seller specified ConditionID in their listing. Also see ItemSpecifics in case the seller used that
	// field for the condition instead.
	//
	ConditionID int32 `xml:"ConditionID,omitempty"`

	//
	// The human-readable label for the item condition.
	// Display names are localized for the site on
	// which they're listed (not necessarily the site on which
	// they're viewed).<br>
	// <br>
	// Most categories use the same display name for the
	// same condition ID. Some categories may override the display name
	// based on buyer expectations for items in the category.
	// For example, condition ID 1000 could be called
	// "New" in one category and "New with tags" in another.<br>
	// <br>
	// Behind the scenes, eBay's search engine uses the ID
	// (not the display name) to determine whether items are
	// new, used, or refurbished.<br>
	// <br>
	// Only returned when ConditionID is returned. Also see ItemSpecifics
	// in case the seller used that field for the condition instead.
	//
	ConditionDisplayName string `xml:"ConditionDisplayName,omitempty"`

	//
	// Indicates the type of message that will be returned describing the quantity
	// available for the item.
	//
	QuantityAvailableHint *QuantityAvailableHintCodeType `xml:"QuantityAvailableHint,omitempty"`

	//
	// The quantity threshold above which the seller prefers not to show the actual
	// quantity available. Returned when the quantity available is greater than the
	// value of quantity threshold. Currently, 10 is the only available value for
	// this threshold.
	//
	QuantityThreshold int32 `xml:"QuantityThreshold,omitempty"`

	//
	// This container provides information for an item that has a Strikethrough Price
	// (STP) or a Minimum Advertised Price (MAP) discount pricing treatment. STP and MAP apply only to fixed-price listings. STP is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites, while MAP is available only on the US site.
	// <br > <br >
	// Discount pricing is available to qualified sellers (and their associated developers) who
	// participate in the Discount Pricing Program. Once qualified, sellers receive a
	// "special account flag" (SAF) that allows them to apply Discount Pricing to both MSKU
	// and Non-MSKU items.
	//
	DiscountPriceInfo *DiscountPriceInfoType `xml:"DiscountPriceInfo,omitempty"`

	//
	// Use this field to specify an international country or region, or a special domestic
	// location (for sites supporting this feature, currently US, UK, DE) to where you
	// will not ship the associated item. On input, repeat this element for each
	// location that you want to exclude as a shipping destination for your item.
	// <br><br>
	// Set ShipToRegistrationCountry to true to have your ExcludeShipToLocation
	// settings applied to your listing. The locations you have excluded display in
	// the Shipping and Handling section of your item listing.
	// <br><br>
	// If a buyer's primary ship-to location is a location that you have listed as
	// an excluded ship-to location (or if the buyer does not have a primary ship-to
	// location), they will receive an error message if they attempt to buy or place
	// a bid on your item.
	// <br><br>
	// The exclude ship-to location values are eBay regions and countries. To see
	// the valid exclude ship-to locations for a specified site, call GeteBayDetails
	// with DetailName set to ExcludeShippingLocationDetails. Repeat GeteBayDetails
	// for each site on which you list.
	// <br><br>
	// This field works in conjunction with Item.ShipToLocations to create a set of
	// international countries and regions to where you will, and will not, ship.
	// You can list a region in the ShipToLocations field, then exclude specific
	// countries within that region with this field (for example, you can specify
	// Africa in ShipToLocations, yet exclude Chad with a ExcludeShipToLocation
	// setting). In addition, if your ShipToLocations is Worldwide, you can use
	// this field to specify both regions and countries that you want to exclude
	// from your shipping destinations.
	// <br><br>
	// You can specify a default set of locations to where you will not ship in My
	// eBay. If you create an Exclude Ship-To List, it is, by default, in effect
	// when you list items. However, if you specify any value in this field on
	// input, it nullifies the default settings in your Exclude Ship-To List. (If
	// you use ExcludeShipToLocation when you list an item, you will need to list
	// all the locations to where you will not ship the associated item, regardless
	// of the default settings in your Exclude Ship-To List.)
	// <br><br>
	// Specify NONE in this field to override the default Exclude Ship-To List you
	// might have set up in My eBay and indicate that you do not want to exclude any
	// shipping locations from the respective item listing.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// To enable your default Exclude Ship-To List, you must enable Exclude
	// Shipping Locations and Buyer Requirements in your My eBay Site Preferences.
	// For details, see the KnowledgeBase Article
	// <a href="https://ebaydts.com/eBayKBDetails?KBid=1495">HowTo: ExcludeShipToLocation</a>.
	// </span>
	//
	ExcludeShipToLocation []string `xml:"ExcludeShipToLocation,omitempty"`

	//
	// This field is only applicable to the US, UK, and Germany sites, and will only be returned if the seller qualifies as a Top-Rated Seller. The current requirements for US sellers to
	// qualify as Top-Rated Sellers are summarized below. The requirements on the UK and Germany sites are different. To see those requirements, see the UK or Germany customer support/help pages.
	// <ul>
	// <li>100 or more selling transactions over the last 12-month period</li>
	// <li>One thousand dollars or more in sales to US buyers over the last 12-month period</li>
	// <li>Shipment tracking information provided to buyer within handling time
	// for at least 90 percent of their listings</li>
	// <li>Two percent or less of transactions with one or more defects over the current evaluation period</li>
	// <li>Less than one percent of eBay Buyer Protection and/or PayPal Purchase Protection cases can end without seller resolution</li>
	// </ul>
	// <br/><br/>
	// If this flag is returned for a listing, it indicates that the listing meets the new
	// requirements for a Top-Rated Listing. The following must be offered by a US seller for the listing to become a Top-Rated Listing on the US site:
	// <ul>
	// <li>14-day (or longer) return policy with Money Back option</li>
	// <li>Same-day or 1 business day handling time</li>
	// </ul>
	// <br/><br/>
	// The <b>Top-Rated Plus</b> seal appears on the View Item
	// page for all Top-Rated Listings. US Top-Rated Sellers get a
	// 20 percent discount on their FVF for all listings that qualify as Top-Rated Listings.
	//
	TopRatedListing bool `xml:"TopRatedListing,omitempty"`

	//
	// The URL to the eBay Motors item's full Vehicle History Report.
	// Only returned when the item has a Vehicle History Report.
	//
	VhrUrl *AnyURI `xml:"VhrUrl,omitempty"`

	//
	// If true, the eBay Motors item has a Vehicle History Report
	// associated with it.
	//
	VhrAvailable bool `xml:"VhrAvailable,omitempty"`

	//
	// This container consists of the <b>MinimumRemnantSet</b>
	// field, which sets the minimum amount of event tickets that can
	// remain in the fixed-price listing's inventory after a buyer
	// purchases one or more tickets (but not all) from the listing.
	// <br/><br/>
	// This field is currently only applicable for event ticket listings in
	// US and CA, but may apply to other categories in the future. It is
	// only returned if set by the seller in the listing.
	//
	QuantityInfo *QuantityInfo `xml:"QuantityInfo,omitempty"`

	//
	// Contains information about the weight, volume or other quantity measurement of a listed item so buyers can compare per-unit prices. The European Union requires listings for certain types of products to include the price per unit. eBay uses this information and the item's listed price to calculate and display the unit price on eBay EU sites.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This information is currently required only for business sellers, and only for listings with a Buy It Now option.
	// </span>
	//
	UnitInfo *UnitInfoType `xml:"UnitInfo,omitempty"`

	//
	// Indicates whether eBay's Global Shipping Program is offered for the listing. If the value of <strong>GlobalShipping</strong> is <code>true</code>, the Global Shipping Program is the default international shipping option for the listing, and eBay designates an appropriate international shipping service. If the value of <strong>GlobalShipping</strong> is <code>false</code>, the seller is responsible for specifying an international shipping service for the listing if desired.
	//
	GlobalShipping bool `xml:"GlobalShipping,omitempty"`

	//
	// This string field is used by the seller to more clearly describe the condition of
	// items that are not brand new.
	// <br><br>
	// The <b>ConditionDescription</b> field is available for all
	// categories, including categories where the condition type is not applicable
	// (e.g., Antiques). This field is applicable for all item conditions except
	// "New", "Brand New", "New with tags", and "New in box". If
	// <b>ConditionDescription</b> is used with these conditions (Condition
	// IDs 1000-1499), eBay will simply ignore this field if included, and eBay will
	// return a warning message to the user.
	// <br><br>
	// This field should only be used to further clarify the condition of the used item.
	// For example, "The right leg of the chair has a small scratch, and on the seat
	// back there is a light blue stain about the shape and size of a coin." It should
	// not be used for branding, promotions, shipping, returns, payment or other
	// information unrelated to the condition of the item. Make sure that the condition
	// type (<b>Item.ConditionID</b>), condition description, item description
	// (<b>Item.Description</b>), and the listing's pictures do not contradict
	// one another.
	// <br><br>
	// The <b>ConditionDescription</b> field is only returned if a condition
	// description is specified in the listing.
	//
	ConditionDescription string `xml:"ConditionDescription,omitempty"`

	//
	// Indicates the number of compatible applications specified for the given item. Applies to items listed with fitment by application only (either manually or with a catalog product that supports compatibility).
	// <br><br>
	// Not returned if the item has no specified compatible applications.
	// <br><br>
	// To retrieve the list of compatibility count and compatibility information, pass <strong>IncludeSelector</strong> in the request with a value of <code>Compatibility</code>.
	// <br><br>
	// Parts Compatibility is supported in limited Parts & Accessories categories, on the eBay Motors (US) site (site ID 100) only.
	//
	ItemCompatibilityCount int32 `xml:"ItemCompatibilityCount,omitempty"`

	//
	// A list of parts compatibility information specified as name and value pairs, describing an assembly with which a part is compatible (i.e., compatibility by application). For example, to specify a part's compatibility with a vehicle, the name (search name) would map to standard vehicle characteristics (e.g., Year, Make, Model, Trim, and Engine). The values describe the specific vehicle, such as a 2006 Honda Accord. Use the Product Metadata API to retrieve valid search names and corresponding values.
	// <br><br>
	// Not returned if the item has no specified compatible applications.
	// <br><br>
	// To retrieve the list of compatibility count and compatibility information, pass <strong>IncludeSelector</strong> in the request with a value of <code>Compatibility</code>.
	// <br><br>
	// Parts Compatibility is supported in limited Parts & Accessories categories, on the eBay Motors (US) site (site ID 100) only.
	//
	ItemCompatibilityList *ItemCompatibilityListType `xml:"ItemCompatibilityList,omitempty"`

	//
	// This field indicates the total quantity of items sold and picked up by buyers using the In-Store Pickup option. This value is the total number of items purchased by one or more buyers using the In-Store Pickup option, and is not the total number of In-Store Pickup orders. So, if two buyers selected the In-Store Pickup option, but each of these buyers bought a quantity of five of these items (in same purchase), the <b>Item.SellingStatus.QuantitySoldByPickupInStore</b> value would be '10' and not '2'.
	// <br>
	// <br>
	// In the case of multi-variation, fixed-price listings, each <b>Item.Variations.Variation.SellingStatus.QuantitySoldByPickupInStore</b> value indicates the total quantity of that corresponding item variation (for example, large blue shirts) sold and picked up by buyers using the In-Store Pickup option, and the <b>Item.SellingStatus.QuantitySoldByPickupInStore</b> value would be the total quantity of all item variations sold for the listing.
	// <br>
	// <br>
	// This field will only be returned if the listing is eligible for In-Store Pickup.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings.
	//
	QuantitySoldByPickupInStore int32 `xml:"QuantitySoldByPickupInStore,omitempty"`

	//
	// A SKU (stock keeping unit) is an identifier defined by a seller.
	// Some sellers use SKUs to track complex flows of products
	// and information on the client side.
	// A seller can specify a SKU when listing an item with AddItem
	// and related calls. eBay preserves the SKU on the item, enabling you
	// to obtain it before and after an order line item is created.
	// (SKU is recommended as an alternative to ApplicationData.)<br>
	// <br>
	// A SKU is not required to be unique. A seller can specify a
	// particular SKU on one item or on multiple items.
	// Different sellers can use the same SKUs.<br>
	// <br>
	// If the SKU is unique across a seller's active listings, and if the seller
	// listed the item by using AddFixedPriceItem or RelistFixedPriceItem, the
	// seller can also set Item.InventoryTrackingMethod to SKU in those calls.
	// This allows the seller to use SKU instead of ItemID as a unique identifier
	// in subsequent calls, such as GetItem and ReviseInventoryStatus.
	// If both ItemID and SKU are specified in calls that support the use of
	// SKU as a unique identifier, the ItemID value takes precedence.<br>
	// <br>
	// For multi-variation listings, the SKU can be used to uniquely identify a variation that is being revised or relisted.
	// If InventoryTrackingMethod is ItemID, an ItemID is also required.
	// When both SKU and VariationSpecifics are passed in the request, the variation specifics take precedence as the unique identifier. <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The eBay Web site UI cannot identify listings by SKU. For example,
	// My eBay pages and Search pages all identify listings by item ID.
	// When a buyer contacts you via eBay's messaging functionality, eBay
	// uses the item ID as the identifier. Buyer-focused APIs (like the
	// Shopping API) also do not support SKU as an identifier.
	// </span>
	// <b>For revising and relisting only:</b>
	// To remove a SKU when you revise or relist an item, use DeletedField.
	// (You cannot remove a SKU when Item.InventoryTrackingMethod is set
	// to SKU.)<br>
	// <br>
	// For GetMyeBaySelling, this is only returned if set.
	// <br>
	// Not applicable to Half.com.
	//
	SKU string `xml:"SKU,omitempty"`

	//
	// This boolean field will be returned as 'true' if a fixed-price listing is requiring immediate payment, and the item's category supports Immediate Payment for Best Offers.  Initially, Immediate Payment for Best Offers will be supported by the Computers & Tablets, Jewelry & Watches, and Art categories, but this feature will get enabled in more categories going forward.
	// <br/><br/>
	// If the Immediate Payment for Best Offers feature is enabled for a fixed-price listing, and a buyer's Best Offer for the item is accepted by the seller, that buyer will be expected to pay immediately for the item, or that buyer will run the risk of losing the item to another buyer since that item will remain on sale until payment is made.
	//
	NewBestOffer bool `xml:"NewBestOffer,omitempty"`

	//
	// This boolean field indicates that the listing is eligible for eBay Now delivery, but it doesn't necessarily mean that items are available for purchase through the eBay Now method of delivery. The <b>eBayNowAvailable</b> field actually indicates whether or not items are available for purchase through eBay Now.
	//
	EBayNowEligible bool `xml:"eBayNowEligible,omitempty"`

	//
	// This boolean field will be returned as 'true' if the item is available for eBay Now delivery. However, buyers should realize that they must be in an area where eBay Now delivery is available. eBay Now is currently available on the San Francisco Peninsula (from San Francisco to San Jose), in Chigago, in Dallas, and in the New York City boroughs of Manhattan, Brooklyn, and Queens.
	//
	EBayNowAvailable bool `xml:"eBayNowAvailable,omitempty"`

	//
	// This field will only be returned (as 'True') in the case where items in a listing are only available to buyers through a local fulfillment method such as In-Store Pickup, eBay Now, or Click and Collect. And if a listing is truly a "local fulfillment" listing only, the value in the <b>Item.Quantity</b> field (for single-variation listings) or the <b>Variation.Quantity</b> field (for multi-variation listings) will default to '0' even though the quantity available is technically not zero, since items in the listing are still available through one or more local fulfillment methods.
	//
	IgnoreQuantity bool `xml:"IgnoreQuantity,omitempty"`

	//
	// This boolean field will be returned as 'true' if the seller has made the item available for the "Click and Collect" program. With the 'Click and Collect' feature, a buyer can purchase certain items on eBay and collect them at a local store. Buyers are notified by eBay once their items are available. The "Click and Collect" feature is only available to large merchants on the UK and Australia sites. UK and Australian buyers should realize that they must be in an area where "Click and Collect" is available. This field is not returned if 'false'.
	//
	AvailableForPickupDropOff bool `xml:"AvailableForPickupDropOff,omitempty"`

	//
	// This field will be returned as 'true' in <b>GetItem</b> if the item is eligible for the "Click and Collect" feature. With the 'Click and Collect' feature, a buyer can purchase certain items on eBay and collect them at a local store. Buyers are notified by eBay once their items are available. The "Click and Collect" feature is only available to large merchants on the UK and Australia sites. UK and Australian buyers should realize that they must be in an area where "Click and Collect" is available. This field is not returned if 'false'.
	//
	EligibleForPickupDropOff bool `xml:"EligibleForPickupDropOff,omitempty"`
}

type StorefrontType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents StorefrontType"`

	//
	// The URL of the seller's eBay Store page. Not returned if the seller does not
	// have an eBay store.
	// <br><br>
	// FindProducts only returned a default URL at the time of this writing.
	// FindHalfProducts returns the URL of the seller's Half.com Shop page.
	//
	StoreURL *AnyURI `xml:"StoreURL,omitempty"`

	//
	// The name of the seller's eBay Store. Not returned if the seller does not
	// have an eBay store.
	// <br><br>
	// FindProducts returns an empty value for all items at the time of this writing.
	// FindHalfProducts returns the name of seller's Half.com Shop, which is the
	// SellerID.
	//
	StoreName string `xml:"StoreName,omitempty"`
}

type TaxJurisdictionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents TaxJurisdictionType"`

	//
	// Representative identifier for the jurisdiction. Typically an
	// abbreviation (e.g. CA for California).
	//
	JurisdictionID string `xml:"JurisdictionID,omitempty"`

	//
	// The tax percent to apply for a listing shipped to this
	// jurisdiction. The value passed in is stored with a precision of
	// 3 digits after the decimal point (##.###).
	// GetTaxTable: this tag has no value if the user's tax table has not been set.
	//
	SalesTaxPercent float32 `xml:"SalesTaxPercent,omitempty"`

	//
	// Whether shipping costs are to be part of the base amount that is taxed.
	// GetTaxTable: This tag is empty if the user did not previously provide information.
	//
	ShippingIncludedInTax bool `xml:"ShippingIncludedInTax,omitempty"`
}

type TaxTableType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents TaxTableType"`

	//
	// Sales tax details for zero or more jurisdictions (states, provinces, etc).
	// Information is only returned for the jurisdictions for which the user provided
	// tax information. ShippingIncludedInTax and SalesTaxPercent are returned but
	// are empty.
	//
	TaxJurisdiction []*TaxJurisdictionType `xml:"TaxJurisdiction,omitempty"`
}

type UnitInfoType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents UnitInfoType"`

	//
	// Designation of size, weight, volume or count to be used to specify the unit quantity of the item. The value can be one of the following:
	// <br/><br/>
	// <code>Kg 100g 10g L 100ml 10ml M M2 M3 Unit</code>
	//
	UnitType string `xml:"UnitType,omitempty"`

	//
	// Number of units of size, weight, volume or count of the item in the specified unit type. eBay will divide the item price by this number to get the price per unit that will be displayed in the item listing for comparison purposes.
	//
	UnitQuantity float64 `xml:"UnitQuantity,omitempty"`
}

type VATDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VATDetailsType"`

	//
	// If true, this indicates that the seller is a business user
	// and intends to use listing features that are offered to
	// business users only. Applicable only to business sellers
	// residing in Germany, Austria, or Switzerland who are listing in
	// a B2B VAT- enabled category on the eBay Germany (DE), Austria
	// (AT), or Switzerland (CH) sites. The seller must have a valid
	// VAT ID registered with eBay. This must be set to true if
	// RestrictedToBusiness is true. It has no effect (and it's not returned)
	// if RestrictedToBusiness is false. If an item was not qualified as a
	// business item when originally listed, but meets the conditions for
	// business items when the item is revised or relisted, the seller can
	// convert the item to a business item by specifying the appropriate
	// VAT details. See the eBay Features Guide for more information and additional rules.
	//
	BusinessSeller bool `xml:"BusinessSeller,omitempty"`

	//
	// If true, this indicates that the seller elects to offer the
	// item exclusively to business users. If false (or not returned),
	// this indicates that the seller elects to offer the item to all users.
	// Applicable only to business sellers residing in Germany,
	// Austria, or Switzerland who are listing in a B2B VAT-enabled
	// category on the eBay Germany (DE), Austria (AT), or Switzerland
	// (CH) sites. If this argument is true, the seller must have a
	// valid VAT-ID registered with eBay, and BusinessSeller must also
	// be true.
	//
	RestrictedToBusiness bool `xml:"RestrictedToBusiness,omitempty"`

	//
	// VAT rate for the item, if any. When the VATPercent is specified, the
	// item's VAT information appears on the item's listing page. In
	// addition, the seller can choose to print an invoice that
	// includes the item's net price, VAT percent, VAT amount, and
	// total price. Since VAT rates vary
	// depending on the item and on the user's country of residence, a
	// seller is responsible for entering the correct VAT rate; it is
	// not calculated by eBay. To specify a VATPercent, a seller must
	// have a VAT-ID registered with eBay and must be listing the item on a
	// VAT-enabled site. Max applicable length is 6 characters,
	// including the decimal (e.g., 12.345). The scale is 3 decimal places.
	// (If you pass in 12.3456, eBay may round up the value to 12.346.)
	// Note: The View Item page may display the precision to 2 decimal places
	// with no trailing zeros. However, the full value you send in is stored.
	//
	VATPercent float32 `xml:"VATPercent,omitempty"`

	//
	// Displays the VatSite Id of the seller (in a business
	// card format) as part of the data returned in GetSingleItem
	// call if the seller's SellerBusinessCodeType is set to
	// 'Commercial'.
	//
	VATSite string `xml:"VATSite,omitempty"`

	//
	// Displays the VatSite Id of the seller (in a business
	// card format) as part of the data returned in the GetSingleItem
	// call if the seller's SellerBusinessCodeType is set to
	// 'Commercial'.
	//
	VATID string `xml:"VATID,omitempty"`
}

type VariationSpecificPictureSetType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VariationSpecificPictureSetType"`

	//
	// A value that is associated with VariationSpecificName. For example,
	// suppose this set of pictures is showing blue shirts, and some of
	// the variations include Color=Blue in their variation specifics.
	// If VariationSpecificName is "Color", then VariationSpecificValue would be "Blue".
	//
	VariationSpecificValue string `xml:"VariationSpecificValue,omitempty"`

	//
	// The URL of a picture that is associated with VariationSpecificValue.
	// The first PictureURL is also used as the gallery picture for
	// applicable variations.
	// For example, if the picture set contains pictures of red shirts
	// (i.e., VariationSpecificName=Color and VariationSpecificValue=Red),
	// the first picture is used as the gallery picture for
	// all the red shirt variations.
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`

	//
	// Not applicable.
	//
	GalleryURL *AnyURI `xml:"GalleryURL,omitempty"`
}

type VariationType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VariationType"`

	//
	// An SKU (stock keeping unit) is an identifier defined by a seller.
	// If you need to contact the seller to ask a question about a
	// particular variation, you can mention the SKU (if present) to help
	// the seller identify the variation you're interested in.
	// Only returned if the seller chose to specify a SKU for the
	// variation.
	//
	SKU string `xml:"SKU,omitempty"`

	//
	// The fixed price of all items identified by this variation.
	// For example, a "Blue, Large" variation price could be USD 10.00,
	// and a "Black, Medium" variation price could be USD 5.00.
	// <br>
	// <br>
	// Each variation has its own price, and the prices can
	// be different for each variation. This enables sellers to
	// provide discounts on certain variations without affecting the price
	// of others. Always returned) for multi-variation listings.
	//
	StartPrice *AmountType `xml:"StartPrice,omitempty"`

	//
	// The number of items available for sale that are associated
	// with this variation.
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// A list of name/value pairs that uniquely identify the variation
	// within the listing. All variations specify the same set of
	// names, and each variation provides a unique combination of
	// values for those names. For example, if the items vary by color and
	// size, then every variation specifies Color and Size as names,
	// and no two variations can specify the same combination of
	// color and size values. Use this information to identify a
	// variation of interest when you communicate with
	// the seller.
	// <br>
	// <br>
	// If your application supports PlaceOffer (in the Trading API),
	// you use this information to uniquely identify the variation
	// that you want to purchase.
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`

	//
	// Not used. See SellingStatus.QuantitySold instead.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// Contains the variation's current price and quantity sold.
	// Always returned when variations are present.
	//
	SellingStatus *SellingStatusType `xml:"SellingStatus,omitempty"`

	//
	// This container provides information for an item that has a Strikethrough Price
	// (STP) or a Minimum Advertised Price (MAP) discount pricing treatment. STP and MAP apply only to fixed-price listings. STP is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites, while MAP is available only on the US site.
	// <br><br>
	// Discount pricing is available to qualified sellers (and their associated developers) who
	// participate in the Discount Pricing Program. Once qualified, sellers receive a
	// "special account flag" (SAF) that allows them to apply Discount Pricing to both MSKU
	// and Non-MSKU items.
	//
	DiscountPriceInfo *DiscountPriceInfoType `xml:"DiscountPriceInfo,omitempty"`
}

type VariationsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VariationsType"`

	//
	// Contains data that distinguishes one variation from another.
	// For example, if the items vary by color and size, each Variation
	// node specifies a combination of one of those colors and
	// sizes.
	//
	Variation []*VariationType `xml:"Variation,omitempty"`

	//
	// Contains a set of pictures that correspond to one of the
	// variation specifics, such as Color. For example, if a listing
	// has blue and black color variations, a listing could specify the
	// name Color as an organizing mechanism for all the pictures,
	// and then include a set of pictures for the blue variations and
	// another set of pictures for the black variations.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Only one Pictures node is currently returned for a listing.
	// However, the node has been defined as unbounded (repeatable) in
	// the schema to allow for different use cases for some calls or sites
	// in the future.</span>
	//
	Pictures []*PicturesType `xml:"Pictures,omitempty"`

	//
	// A list of all variation names and values that are defined on
	// the item. This could include values that were previously
	// defined (but no longer for sale).<br>
	// <br>
	// eBay uses this list to configure variation selection widgets
	// that appear on eBay's View Item page.
	// For example, if Color and Size are names in the list, then
	// eBay's View Item page displays Color and Size drop-down lists
	// to help a buyer choose a variation of interest.<br>
	// <br>
	// The order in which the names and values are returned
	// matches the order in which the selection widgets appear on
	// the View Item page.
	// For example, if the names "Color", then "Size", and then
	// "Sleeve Style" are returned, the View Item page shows drop-down
	// lists with those labels in that order. For "Size", if the values
	// returned are "S", "M", and then "L", the View Item page
	// shows the values in that order in the Size drop-down list.
	//
	VariationSpecificsSet *NameValueListArrayType `xml:"VariationSpecificsSet,omitempty"`
}

type ShoppingInterface struct {
	client *gowsdl.SoapClient
}

func NewShoppingInterface(url string, tls bool) *ShoppingInterface {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &ShoppingInterface{
		client: client,
	}
}

func (service *ShoppingInterface) FindHalfProducts(request *FindHalfProductsRequestType) (*FindHalfProductsResponseType, error) {
	response := &FindHalfProductsResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) FindProducts(request *FindProductsRequestType) (*FindProductsResponseType, error) {
	response := &FindProductsResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) FindReviewsAndGuides(request *FindReviewsAndGuidesRequestType) (*FindReviewsAndGuidesResponseType, error) {
	response := &FindReviewsAndGuidesResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) GetCategoryInfo(request *GetCategoryInfoRequestType) (*GetCategoryInfoResponseType, error) {
	response := &GetCategoryInfoResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) GetItemStatus(request *GetItemStatusRequestType) (*GetItemStatusResponseType, error) {
	response := &GetItemStatusResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) GetMultipleItems(request *GetMultipleItemsRequestType) (*GetMultipleItemsResponseType, error) {
	response := &GetMultipleItemsResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) GetShippingCosts(request *GetShippingCostsRequestType) (*GetShippingCostsResponseType, error) {
	response := &GetShippingCostsResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) GetSingleItem(request *GetSingleItemRequestType) (*GetSingleItemResponseType, error) {
	response := &GetSingleItemResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) GetUserProfile(request *GetUserProfileRequestType) (*GetUserProfileResponseType, error) {
	response := &GetUserProfileResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ShoppingInterface) GeteBayTime(request *GeteBayTimeRequestType) (*GeteBayTimeResponseType, error) {
	response := &GeteBayTimeResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
