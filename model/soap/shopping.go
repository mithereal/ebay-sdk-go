// Code generated by gowsdl DO NOT EDIT.

package ebay

import (
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

//
// This enumerated type identifies the possible values that can be returned in the <b>Ack</b> field in call responses. The <b>Ack</b> value will indicate if the call was completely successful, if the called failed, or if the call was partially successful, but with minor errors or warnings.
//
type AckCodeType string

const (

	//
	// This value indicates that the call request was processed successfully without any issues.
	//
	AckCodeTypeSuccess AckCodeType = "Success"

	//
	// This value indicates that the call request processing failed.
	//
	AckCodeTypeFailure AckCodeType = "Failure"

	//
	// This value indicates that the call request was successful, but processing was not without any issues. These issues can be checked in the <b>Errors</b> container, that will also be returned when one or more known issues occur with the call request.
	//
	AckCodeTypeWarning AckCodeType = "Warning"

	//
	// This value indicates that the call request partially failed. One or more issues that may be responsible for this partial failure can be checked in the <b>Errors</b> container, that will also be returned when one or more known issues occur with the call request.
	//
	AckCodeTypePartialFailure AckCodeType = "PartialFailure"

	//
	// Reserved for internal or future use.
	//
	AckCodeTypeCustomCode AckCodeType = "CustomCode"
)

//
// This enumerated type list the Feedback ratings that can be left by one eBay user for another user regarding that user's experience with the another user during the purchase/checkout flow of an order line item.
//
type CommentTypeCodeType string

const (

	//
	// This value indicates that the buyer's or seller's experience with the other user (receiving feedback) was rated as a 'Positive' experience. If an eBay user receives a Positive rating for an order line item, their overall Feedback score increases by a value of 1. Note that sellers can only give 'Positive' feedback to buyers (or just refrain from leaving Feedback).
	//
	CommentTypeCodeTypePositive CommentTypeCodeType = "Positive"

	//
	// This value indicates that the buyer's experience with the seller (receiving feedback) was rated as a 'Neutral' experience. If an eBay seller receives a Neutral rating for an order line item, their overall Feedback score remains the same. Note that sellers can only give 'Positive' feedback to buyers, so a Neutral rating is not an option.
	//
	CommentTypeCodeTypeNeutral CommentTypeCodeType = "Neutral"

	//
	// This value indicates that the buyer's experience with the seller (receiving feedback) was rated as a 'Negative' experience. If an eBay seller receives a Negative rating for an order line item, their overall Feedback score decreases by a value of 1. Note that sellers can only give 'Positive' feedback to buyers, so a Negative rating is not an option.
	//
	CommentTypeCodeTypeNegative CommentTypeCodeType = "Negative"

	//
	// This value indicates that a submitted Feedback entry was withdrawn. If a Feedback entry is withdrawn, the effect of that entry on the overall Feedback score is nullified. However, Feedback comments from the withdrawn entry are still visible.
	//
	CommentTypeCodeTypeWithdrawn CommentTypeCodeType = "Withdrawn"

	//
	// This value indicates that a submitted Feedback entry was withdrawn based on the decision of a third-party (such as eBay). If a Feedback entry is withdrawn, the effect of that entry on the overall Feedback score is nullified.
	//
	CommentTypeCodeTypeIndependentlyWithdrawn CommentTypeCodeType = "IndependentlyWithdrawn"

	//
	// This value is reserved for internal or future use.
	//
	CommentTypeCodeTypeCustomCode CommentTypeCodeType = "CustomCode"
)

//
// This enumeration type contains a list of standard 3-digit ISO 4217 currency codes for
// currency used in countries around the world.
//
type CurrencyCodeType string

const (

	//
	// This value is a 3-digit code for an Afghan afghani, a currency used in Afghanistan.
	//
	CurrencyCodeTypeAFA CurrencyCodeType = "AFA"

	//
	// This value is a 3-digit code for an Albanian lek, a currency used in Albania.
	//
	CurrencyCodeTypeALL CurrencyCodeType = "ALL"

	//
	// This value is a 3-digit code for an Algerian dinar, a currency used in Algeria.
	//
	CurrencyCodeTypeDZD CurrencyCodeType = "DZD"

	//
	// This value is a 3-digit code for an Andorran peseta, a currency used in Andorra.
	//
	CurrencyCodeTypeADP CurrencyCodeType = "ADP"

	//
	// This value is a 3-digit code for an Angolan kwanza, a currency used in Angola.
	//
	CurrencyCodeTypeAOA CurrencyCodeType = "AOA"

	//
	// This value is a 3-digit code for an Argentine peso, a currency used in Argentina.
	//
	CurrencyCodeTypeARS CurrencyCodeType = "ARS"

	//
	// This value is a 3-digit code for an Armenian dram, a currency used in Armenia.
	//
	CurrencyCodeTypeAMD CurrencyCodeType = "AMD"

	//
	// This value is a 3-digit code for an Aruban florin, a currency used in Aruba.
	//
	CurrencyCodeTypeAWG CurrencyCodeType = "AWG"

	//
	// This value is a 3-digit code for an Azerbaijani manat, a currency used in Azerbaijan.
	//
	CurrencyCodeTypeAZM CurrencyCodeType = "AZM"

	//
	// This value is a 3-digit code for a Bahamian dollar, a currency used in the Bahamas.
	//
	CurrencyCodeTypeBSD CurrencyCodeType = "BSD"

	//
	// This value is a 3-digit code for a Bahraini dinar, a currency used in the Bahrain.
	//
	CurrencyCodeTypeBHD CurrencyCodeType = "BHD"

	//
	// This value is a 3-digit code for a Bangladeshi taka, a currency used in Bangladesh.
	//
	CurrencyCodeTypeBDT CurrencyCodeType = "BDT"

	//
	// This value is a 3-digit code for a Barbados dollar, a currency used in Barbados.
	//
	CurrencyCodeTypeBBD CurrencyCodeType = "BBD"

	//
	// This value is a 3-digit code for a Belarusian ruble, a currency used in Belarus.
	//
	CurrencyCodeTypeBYR CurrencyCodeType = "BYR"

	//
	// This value is a 3-digit code for a Belize dollar, a currency used in Belize.
	//
	CurrencyCodeTypeBZD CurrencyCodeType = "BZD"

	//
	// This value is a 3-digit code for a Bermudian dollar, a currency used in Bermuda.
	//
	CurrencyCodeTypeBMD CurrencyCodeType = "BMD"

	//
	// This value is a 3-digit code for a Bhutanese ngultrum, a currency used in Bhutan.
	//
	CurrencyCodeTypeBTN CurrencyCodeType = "BTN"

	//
	// This value is a 3-digit code for an Indian rupee, a currency used in India. This is
	// the value that should be passed in the <b>Item.Currency</b> field by the
	// seller when listing an item on the eBay India site (Site ID 203).
	//
	CurrencyCodeTypeINR CurrencyCodeType = "INR"

	//
	// This value is a 3-digit code for a Bolivian Mvdol, a currency used in Bolivia.
	//
	CurrencyCodeTypeBOV CurrencyCodeType = "BOV"

	//
	// This value is a 3-digit code for a Boliviano, a currency used in Bolivia.
	//
	CurrencyCodeTypeBOB CurrencyCodeType = "BOB"

	//
	// This value is a 3-digit code for a Bosnia and Herzegovina convertible mark, a
	// currency used in Bosnia and Herzegovina.
	//
	CurrencyCodeTypeBAM CurrencyCodeType = "BAM"

	//
	// This value is a 3-digit code for a Botswana pula, a currency used in Botswana.
	//
	CurrencyCodeTypeBWP CurrencyCodeType = "BWP"

	//
	// This value is a 3-digit code for a Brazilian real, a currency used in Brazil.
	//
	CurrencyCodeTypeBRL CurrencyCodeType = "BRL"

	//
	// This value is a 3-digit code for a Brunei dollar, a currency used in Brunei and
	// Singapore.
	//
	CurrencyCodeTypeBND CurrencyCodeType = "BND"

	//
	// This value is a 3-digit code for the old Bulgarian lev, a currency previously used
	// in Bulgaria. This currency has been replaced by the new Bulgarian lev (3-digit
	// code: BGN).
	//
	CurrencyCodeTypeBGL CurrencyCodeType = "BGL"

	//
	// This value is a 3-digit code for a Bulgarian lev, a currency used in Bulgaria. This
	// currency replaced the old Bulgarian lev (3-digit code: BGL).
	//
	CurrencyCodeTypeBGN CurrencyCodeType = "BGN"

	//
	// This value is a 3-digit code for a Burundian franc, a currency used in Burundi.
	//
	CurrencyCodeTypeBIF CurrencyCodeType = "BIF"

	//
	// This value is a 3-digit code for a Cambodian riel, a currency used in Cambodia.
	//
	CurrencyCodeTypeKHR CurrencyCodeType = "KHR"

	//
	// This value is a 3-digit code for a Canadian dollar, a currency used in Canada. This is
	// the value that should be passed in the <b>Item.Currency</b> field by the
	// seller when listing an item on the eBay Canada site (Site ID 2). Note that items
	// listed on the Canada site can also specify 'USD'.
	//
	CurrencyCodeTypeCAD CurrencyCodeType = "CAD"

	//
	// This value is a 3-digit code for a Cape Verde escudo, a currency used in Cape
	// Verde.
	//
	CurrencyCodeTypeCVE CurrencyCodeType = "CVE"

	//
	// This value is a 3-digit code for a Cayman Islands dollar, a currency used in
	// the Cayman Islands.
	//
	CurrencyCodeTypeKYD CurrencyCodeType = "KYD"

	//
	// This value is a 3-digit code for a Central African CFA franc, a currency used in
	// Cameroon, Central African Republic, Republic of the Congo, Chad, Equatorial
	// Guinea, and Gabon.
	//
	CurrencyCodeTypeXAF CurrencyCodeType = "XAF"

	//
	// This value is a 3-digit code for a Unidad de Fomento, a currency used in Chile.
	//
	CurrencyCodeTypeCLF CurrencyCodeType = "CLF"

	//
	// This value is a 3-digit code for a Chilean peso, a currency used in Chile.
	//
	CurrencyCodeTypeCLP CurrencyCodeType = "CLP"

	//
	// This value is a 3-digit code for a Chinese yuan (also known as the renminbi), a
	// currency used in China.
	//
	CurrencyCodeTypeCNY CurrencyCodeType = "CNY"

	//
	// This value is a 3-digit code for a Columbian peso, a currency used in Columbia.
	//
	CurrencyCodeTypeCOP CurrencyCodeType = "COP"

	//
	// This value is a 3-digit code for a Comoro franc, a currency used in Comoros.
	//
	CurrencyCodeTypeKMF CurrencyCodeType = "KMF"

	//
	// This value is a 3-digit code for a Congolese franc, a currency used in Democratic
	// Republic of Congo.
	//
	CurrencyCodeTypeCDF CurrencyCodeType = "CDF"

	//
	// This value is a 3-digit code for a Costa Rican colon, a currency used in Costa
	// Rica.
	//
	CurrencyCodeTypeCRC CurrencyCodeType = "CRC"

	//
	// This value is a 3-digit code for a Croatian kuna, a currency used in Croatia.
	//
	CurrencyCodeTypeHRK CurrencyCodeType = "HRK"

	//
	// This value is a 3-digit code for a Cuban peso, a currency used in Cuba.
	//
	CurrencyCodeTypeCUP CurrencyCodeType = "CUP"

	//
	// This value is a 3-digit code for a Cypriot pound, a currency previously used in
	// Cyprus. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeCYP CurrencyCodeType = "CYP"

	//
	// This value is a 3-digit code for a Czech koruna, a currency used in the Czech
	// Republic.
	//
	CurrencyCodeTypeCZK CurrencyCodeType = "CZK"

	//
	// This value is a 3-digit code for a Danish krone, a currency used in Denmark,
	// the Faroe Islands, and Greenland.
	//
	CurrencyCodeTypeDKK CurrencyCodeType = "DKK"

	//
	// This value is a 3-digit code for a Djiboutian franc, a currency used in Djibouti.
	//
	CurrencyCodeTypeDJF CurrencyCodeType = "DJF"

	//
	// This value is a 3-digit code for a Dominican peso, a currency used in the Dominican
	// Republic.
	//
	CurrencyCodeTypeDOP CurrencyCodeType = "DOP"

	//
	// This value is a 3-digit code for a Portuguese Timorese escudo, a currency
	// previously used in Portuguese Timor.
	//
	CurrencyCodeTypeTPE CurrencyCodeType = "TPE"

	//
	// This value is an old 3-digit code for a Cape Verde escudo, a currency used in
	// Cape Verde. The 'ECV' code has been replaced by 'CVE'.
	//
	CurrencyCodeTypeECV CurrencyCodeType = "ECV"

	//
	// This value is a 3-digit code for an Ecuadorian sucre, a currency previously used in
	// Ecuador. This currency has been replaced by the US Dollar (3-digit code: USD).
	//
	CurrencyCodeTypeECS CurrencyCodeType = "ECS"

	//
	// This value is a 3-digit code for an Egyptian pound, a currency used in Egypt.
	//
	CurrencyCodeTypeEGP CurrencyCodeType = "EGP"

	//
	// This value is a 3-digit code for a Salvadoran colon, a currency previously used in
	// El Salvador. This currency has been replaced by the US Dollar (3-digit code: USD).
	//
	CurrencyCodeTypeSVC CurrencyCodeType = "SVC"

	//
	// This value is a 3-digit code for an Eritrean nakfa, a currency used in Eritrea.
	//
	CurrencyCodeTypeERN CurrencyCodeType = "ERN"

	//
	// This value is a 3-digit code for an Estonian kroon, a currency previously used in
	// Estonia. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeEEK CurrencyCodeType = "EEK"

	//
	// This value is a 3-digit code for an Ethiopian birr, a currency used in Ethiopia.
	//
	CurrencyCodeTypeETB CurrencyCodeType = "ETB"

	//
	// This value is a 3-digit code for a Falkland Islands pound, a currency used in
	// the Falkland Islands.
	//
	CurrencyCodeTypeFKP CurrencyCodeType = "FKP"

	//
	// This value is a 3-digit code for a Fiji dollar, a currency used in Fiji.
	//
	CurrencyCodeTypeFJD CurrencyCodeType = "FJD"

	//
	// This value is a 3-digit code for a Gambian dalasi, a currency used in Gambia.
	//
	CurrencyCodeTypeGMD CurrencyCodeType = "GMD"

	//
	// This value is a 3-digit code for a Georgian Iari, a currency used in the country of
	// Georgia.
	//
	CurrencyCodeTypeGEL CurrencyCodeType = "GEL"

	//
	// This value is an old 3-digit code for a Ghanaian cedi, a currency used in Ghana.
	// The 'GHC' code has been replaced by 'GHS'.
	//
	CurrencyCodeTypeGHC CurrencyCodeType = "GHC"

	//
	// This value is a 3-digit code for a Gibraltar pound, a currency used in Gibraltar.
	//
	CurrencyCodeTypeGIP CurrencyCodeType = "GIP"

	//
	// This value is a 3-digit code for a Guatemalan quetzal, a currency used in
	// Guatemala.
	//
	CurrencyCodeTypeGTQ CurrencyCodeType = "GTQ"

	//
	// This value is a 3-digit code for a Guinean franc, a currency used in Guinea.
	//
	CurrencyCodeTypeGNF CurrencyCodeType = "GNF"

	//
	// This value is a 3-digit code for a Guinea-Bissau peso, a currency previously used
	// in Guinea-Bissau. This currency has been replaced by the West African CFA franc
	// (3-digit code: XOF).
	//
	CurrencyCodeTypeGWP CurrencyCodeType = "GWP"

	//
	// This value is a 3-digit code for a Guyanese dollar, a currency used in Guyana.
	//
	CurrencyCodeTypeGYD CurrencyCodeType = "GYD"

	//
	// This value is a 3-digit code for a Haitian gourde, a currency used in Haiti.
	//
	CurrencyCodeTypeHTG CurrencyCodeType = "HTG"

	//
	// This value is a 3-digit code for a Honduran lempira, a currency used in Honduras.
	//
	CurrencyCodeTypeHNL CurrencyCodeType = "HNL"

	//
	// This value is a 3-digit code for a Hong Kong dollar, a currency used in Hong Kong
	// and Macau. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay Hong Kong site (Site ID 201).
	//
	CurrencyCodeTypeHKD CurrencyCodeType = "HKD"

	//
	// This value is a 3-digit code for a Hungarian forint, a currency used in Hungary.
	//
	CurrencyCodeTypeHUF CurrencyCodeType = "HUF"

	//
	// This value is a 3-digit code for an Icelandic krona, a currency used in Iceland.
	//
	CurrencyCodeTypeISK CurrencyCodeType = "ISK"

	//
	// This value is a 3-digit code for an Indonesian rupiah, a currency used in
	// Indonesia.
	//
	CurrencyCodeTypeIDR CurrencyCodeType = "IDR"

	//
	// This value is a 3-digit code for an Iranian rial, a currency used in Iran.
	//
	CurrencyCodeTypeIRR CurrencyCodeType = "IRR"

	//
	// This value is a 3-digit code for an Iraqi dinar, a currency used in Iraq.
	//
	CurrencyCodeTypeIQD CurrencyCodeType = "IQD"

	//
	// This value is a 3-digit code for an Israeli new shekel, a currency used in
	// Israel and in the Palestinian territories.
	//
	CurrencyCodeTypeILS CurrencyCodeType = "ILS"

	//
	// This value is a 3-digit code for a Jamaican dollar, a currency used in Jamaica.
	//
	CurrencyCodeTypeJMD CurrencyCodeType = "JMD"

	//
	// This value is a 3-digit code for a Japanese yen, a currency used in Japan.
	//
	CurrencyCodeTypeJPY CurrencyCodeType = "JPY"

	//
	// This value is a 3-digit code for a Jordanian dinar, a currency used in Jordan.
	//
	CurrencyCodeTypeJOD CurrencyCodeType = "JOD"

	//
	// This value is a 3-digit code for a Kazahhstani tenge, a currency used in
	// Kazakhstan.
	//
	CurrencyCodeTypeKZT CurrencyCodeType = "KZT"

	//
	// This value is a 3-digit code for a Kenyan shilling, a currency used in Kenya.
	//
	CurrencyCodeTypeKES CurrencyCodeType = "KES"

	//
	// This value is a 3-digit code for an Australia dollar, a currency used in Australia.
	// This is the value that should be passed in the <b>Item.Currency</b>
	// field by the seller when listing an item on the eBay Australia site
	// (Site ID 15).
	//
	CurrencyCodeTypeAUD CurrencyCodeType = "AUD"

	//
	// This value is a 3-digit code for a North Korean won, a currency used in North
	// Korea.
	//
	CurrencyCodeTypeKPW CurrencyCodeType = "KPW"

	//
	// This value is a 3-digit code for a South Korean won, a currency used in South
	// Korea.
	//
	CurrencyCodeTypeKRW CurrencyCodeType = "KRW"

	//
	// This value is a 3-digit code for a Kuwaiti dollar, a currency used in Kuwait.
	//
	CurrencyCodeTypeKWD CurrencyCodeType = "KWD"

	//
	// This value is a 3-digit code for a Kyrgzstani som, a currency used in Kyrgystan.
	//
	CurrencyCodeTypeKGS CurrencyCodeType = "KGS"

	//
	// This value is a 3-digit code for a Lao kip, a currency used in Laos.
	//
	CurrencyCodeTypeLAK CurrencyCodeType = "LAK"

	//
	// This value is a 3-digit code for a Latvian lats, a currency used in Latvia.
	//
	CurrencyCodeTypeLVL CurrencyCodeType = "LVL"

	//
	// This value is a 3-digit code for a Lebanese pound, a currency used in Lebanon.
	//
	CurrencyCodeTypeLBP CurrencyCodeType = "LBP"

	//
	// This value is a 3-digit code for a Lesotho loti, a currency used in Lesotho.
	//
	CurrencyCodeTypeLSL CurrencyCodeType = "LSL"

	//
	// This value is a 3-digit code for a Liberian dollar, a currency used in Liberia.
	//
	CurrencyCodeTypeLRD CurrencyCodeType = "LRD"

	//
	// This value is a 3-digit code for a Libyan dinar, a currency used in Libya.
	//
	CurrencyCodeTypeLYD CurrencyCodeType = "LYD"

	//
	// Swiss Franc.
	// For eBay, you can only specify this currency for listings you submit to the
	// Switzerland site (site ID 193).
	//
	CurrencyCodeTypeCHF CurrencyCodeType = "CHF"

	//
	// This value is a 3-digit code for a Lithuanian litas, a currency used in Lithuania.
	//
	CurrencyCodeTypeLTL CurrencyCodeType = "LTL"

	//
	// This value is a 3-digit code for a Macanese pataca, a currency used in Macao.
	//
	CurrencyCodeTypeMOP CurrencyCodeType = "MOP"

	//
	// This value is a 3-digit code for a Macedonian denar, a currency used in Macedonia.
	//
	CurrencyCodeTypeMKD CurrencyCodeType = "MKD"

	//
	// This value is a 3-digit code for a Malagay franc, a currency previously used
	// in Madagascar. This currency has been replaced by the Malagasy ariary
	// (3-digit code: MGA).
	//
	CurrencyCodeTypeMGF CurrencyCodeType = "MGF"

	//
	// This value is a 3-digit code for a Malawian kwacha, a currency used in Malawi.
	//
	CurrencyCodeTypeMWK CurrencyCodeType = "MWK"

	//
	// This value is a 3-digit code for a Malaysian Ringgit, a currency used in Malaysia.
	// This is the value that should be passed in the <b>Item.Currency</b>
	// field by the seller when listing an item on the eBay Malaysia site
	// (Site ID 207).
	//
	CurrencyCodeTypeMYR CurrencyCodeType = "MYR"

	//
	// This value is a 3-digit code for a Maldivian rufiyaaa, a currency used in the
	// Maldives.
	//
	CurrencyCodeTypeMVR CurrencyCodeType = "MVR"

	//
	// This value is a 3-digit code for a Maltese lira, a currency previously used in
	// Malta. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeMTL CurrencyCodeType = "MTL"

	//
	// This value is a 3-digit code for a EURO, a currency used in Andorra, Austria,
	// Belgium, Cyprus, Estonia, Finland, France, Germany, Greece, Ireland, Italy, Kosovo,
	// Luxembourg, Malta, Monaco, Montenegro, Netherlands, Portugal, San Marino, Slovakia,
	// Slovenia, Spain, and Vatican City. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// following sites: Austria (Site ID 16), Belgium_French (Site ID 23),
	// France (Site ID 71), Germany (Site ID 77), Italy (Site ID 101), Belgium_Dutch (Site
	// ID 123), Netherlands (Site ID 146), Spain (Site ID 186), and Ireland (Site ID 205).
	//
	CurrencyCodeTypeEUR CurrencyCodeType = "EUR"

	//
	// This value is a 3-digit code for a Mauritanian ouguiya, a currency used in
	// Mauritania.
	//
	CurrencyCodeTypeMRO CurrencyCodeType = "MRO"

	//
	// This value is a 3-digit code for a Mauritian rupee, a currency used in
	// Mauritius.
	//
	CurrencyCodeTypeMUR CurrencyCodeType = "MUR"

	//
	// This value is a 3-digit code for a Mexican peso, a currency used in
	// Mexico.
	//
	CurrencyCodeTypeMXN CurrencyCodeType = "MXN"

	//
	// This value is a 3-digit funds code for a Mexican peso, a currency used in
	// Mexico.
	//
	CurrencyCodeTypeMXV CurrencyCodeType = "MXV"

	//
	// This value is a 3-digit code for a Moldovan leu, a currency used in
	// Moldova.
	//
	CurrencyCodeTypeMDL CurrencyCodeType = "MDL"

	//
	// This value is a 3-digit code for a Mongolian tugrik, a currency used in
	// Mongolia.
	//
	CurrencyCodeTypeMNT CurrencyCodeType = "MNT"

	//
	// This value is a 3-digit code for an Easy Caribbean dollar, a currency used in
	// Anguilla, Antigua and Barbuda, Dominica, Grenada, Montserrat, Saint Kitts and
	// Nevis, Saint Lucia, and Saint Vincent and the Grenadines.
	//
	CurrencyCodeTypeXCD CurrencyCodeType = "XCD"

	//
	// This value is an old 3-digit code for a Mozambican metical, a currency used in
	// Mozambique. The 'MZM' code has been replaced by 'MZN'.
	//
	CurrencyCodeTypeMZM CurrencyCodeType = "MZM"

	//
	// This value is a 3-digit code for a Myanma kyat, a currency used in
	// Myanmar.
	//
	CurrencyCodeTypeMMK CurrencyCodeType = "MMK"

	//
	// This value is a 3-digit code for a South African rand, a currency used in
	// South Africa.
	//
	CurrencyCodeTypeZAR CurrencyCodeType = "ZAR"

	//
	// This value is a 3-digit code for a Namibian dollar, a currency used in
	// Namibia.
	//
	CurrencyCodeTypeNAD CurrencyCodeType = "NAD"

	//
	// This value is a 3-digit code for a Nepalese rupee, a currency used in Nepal.
	//
	CurrencyCodeTypeNPR CurrencyCodeType = "NPR"

	//
	// This value is a 3-digit code for a Netherlands Antillean guilder, a currency used
	// in Curacao and Sint Maarten.
	//
	CurrencyCodeTypeANG CurrencyCodeType = "ANG"

	//
	// This value is a 3-digit code for a CFP franc, a currency used in French Polynesia,
	// New Caledonia, and Wallis and Futuna.
	//
	CurrencyCodeTypeXPF CurrencyCodeType = "XPF"

	//
	// This value is a 3-digit code for a New Zealand dollar, a currency used in the
	// Cook Islands, New Zealand, Niue, Pitcairn, and Tokelau, Ross Dependency.
	//
	CurrencyCodeTypeNZD CurrencyCodeType = "NZD"

	//
	// This value is a 3-digit code for a Nicaraguan cordoba, a currency used in
	// Nicaragua.
	//
	CurrencyCodeTypeNIO CurrencyCodeType = "NIO"

	//
	// This value is a 3-digit code for a Nigerian naira, a currency used in Nigeria.
	//
	CurrencyCodeTypeNGN CurrencyCodeType = "NGN"

	//
	// This value is a 3-digit code for a Norwegian kron, a currency used in Norway,
	// Svalbard, Jan Mayen, Bouvet Island, Queen Maud Land, and Peter I Island.
	//
	CurrencyCodeTypeNOK CurrencyCodeType = "NOK"

	//
	// This value is a 3-digit code for an Omani rial, a currency used in Oman.
	//
	CurrencyCodeTypeOMR CurrencyCodeType = "OMR"

	//
	// This value is a 3-digit code for a Pakistani rupee, a currency used in Pakistan.
	//
	CurrencyCodeTypePKR CurrencyCodeType = "PKR"

	//
	// This value is a 3-digit code for a Panamanian balboa, a currency used in Panama.
	//
	CurrencyCodeTypePAB CurrencyCodeType = "PAB"

	//
	// This value is a 3-digit code for a Papua New Guinea kina, a currency used in
	// Papua New Guinea.
	//
	CurrencyCodeTypePGK CurrencyCodeType = "PGK"

	//
	// This value is a 3-digit code for a Paraguayan guarani, a currency used in
	// Paraguay.
	//
	CurrencyCodeTypePYG CurrencyCodeType = "PYG"

	//
	// This value is a 3-digit code for a Peruvian nuevo sol, a currency used in Peru.
	//
	CurrencyCodeTypePEN CurrencyCodeType = "PEN"

	//
	// This value is a 3-digit code for a Philippine peso, a currency used in the
	// Philippines. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay Philippines site (Site ID 211).
	//
	CurrencyCodeTypePHP CurrencyCodeType = "PHP"

	//
	// This value is a 3-digit code for a Polish zloty, a currency used in Poland. This
	// is the value that should be passed in the <b>Item.Currency</b> field
	// by the seller when listing an item on the eBay Poland site (Site ID 212).
	//
	CurrencyCodeTypePLN CurrencyCodeType = "PLN"

	//
	// This value is a 3-digit code for a US dollar, a currency used in the United
	// States, America Samoa, Barbados, Bermuda, British Indian Ocean Territory, British
	// Virgin Islands, Caribbean Netherlands, Ecuador, El Salvador, Guam, Haiti, Marshall
	// Islands, Federated States of Micronesia, Northern Mariana Islands, Palau, Panama,
	// Puerto Rico, Timor-Leste, Turks and Caicos Islands, US Virgin Islands, and
	// Zimbabwe. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay US or US eBay Motors site (Site ID 0). 'USD' can also
	// be specified as the <b>Item.Currency</b> on the eBay Canada site
	// (Site ID 2).
	//
	CurrencyCodeTypeUSD CurrencyCodeType = "USD"

	//
	// This value is a 3-digit code for a Qatari riyal, a currency used in Qatar.
	//
	CurrencyCodeTypeQAR CurrencyCodeType = "QAR"

	//
	// This value is a 3-digit code for the old Romanian leu, a currency previously used
	// in Romania. This currency has been replaced by the Romanian new leu (3-digit code:
	// RON).
	//
	CurrencyCodeTypeROL CurrencyCodeType = "ROL"

	//
	// This value is a 3-digit code for a Russian rouble, a currency used in Russia,
	// Abkhazia, and South Ossetia. This value replace the old 3-digit code for the
	// Russian rouble, 'RUR'.
	//
	CurrencyCodeTypeRUB CurrencyCodeType = "RUB"

	//
	// This value is the old 3-digit code for a Russian rouble, a currency used in
	// Russia. This value was replaced by the new 3-digit code for the Russian rouble,
	// 'RUB'.
	//
	CurrencyCodeTypeRUR CurrencyCodeType = "RUR"

	//
	// This value is a 3-digit code for a Rwandan franc, a currency used in Rwanda.
	//
	CurrencyCodeTypeRWF CurrencyCodeType = "RWF"

	//
	// This value is a 3-digit code for a Saint Helena pound, a currency used in Saint
	// Helena.
	//
	CurrencyCodeTypeSHP CurrencyCodeType = "SHP"

	//
	// This value is a 3-digit code for a Samoan tala, a currency used in Samoa.
	//
	CurrencyCodeTypeWST CurrencyCodeType = "WST"

	//
	// This value is a 3-digit code for a Sao Tome and Principe dobra, a currency used in
	// Sao Tome and Principe.
	//
	CurrencyCodeTypeSTD CurrencyCodeType = "STD"

	//
	// This value is a 3-digit code for a Saudi riyal, a currency used in Saudi Arabia.
	//
	CurrencyCodeTypeSAR CurrencyCodeType = "SAR"

	//
	// This value is a 3-digit code for a Seychelles rupee, a currency used in Seychelles.
	//
	CurrencyCodeTypeSCR CurrencyCodeType = "SCR"

	//
	// This value is a 3-digit code for a Sierra Leonean leone, a currency used in Sierra
	// Leone.
	//
	CurrencyCodeTypeSLL CurrencyCodeType = "SLL"

	//
	// This value is a 3-digit code for a Singapore dollar, a currency used in Singapore
	// and Brunei. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay Singapore site (Site ID 216).
	//
	CurrencyCodeTypeSGD CurrencyCodeType = "SGD"

	//
	// This value is a 3-digit code for a Slovak koruna, a currency previously used in
	// Slovakia. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeSKK CurrencyCodeType = "SKK"

	//
	// This value is a 3-digit code for a Slovenian tolar, a currency previously used in
	// Slovenia. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeSIT CurrencyCodeType = "SIT"

	//
	// This value is a 3-digit code for a Solomon Islands dollar, a currency used in
	// the Solomon Islands.
	//
	CurrencyCodeTypeSBD CurrencyCodeType = "SBD"

	//
	// This value is a 3-digit code for a Somali shilling, a currency used in Somalia.
	//
	CurrencyCodeTypeSOS CurrencyCodeType = "SOS"

	//
	// This value is a 3-digit code for a Sri Lankan rupee, a currency used in Sri Lanka.
	//
	CurrencyCodeTypeLKR CurrencyCodeType = "LKR"

	//
	// This value is the 3-digit code for a Sudanese dinar, a currency previously used in
	// Sudan. The Sudanese dinar was replaced by the Sudanese pound, which has a 3-digit
	// code of 'SDG'.
	//
	CurrencyCodeTypeSDD CurrencyCodeType = "SDD"

	//
	// This value is the 3-digit code for a Suriname guilder, a currency previously used
	// in Suriname. The Surinam guilder was replaced by the Surinamese dollar, which has
	// a 3-digit code of 'SRD'.
	//
	CurrencyCodeTypeSRG CurrencyCodeType = "SRG"

	//
	// This value is a 3-digit code for a Swazi lilangeni, a currency used in Swaziland.
	//
	CurrencyCodeTypeSZL CurrencyCodeType = "SZL"

	//
	// This value is a 3-digit code for a Swedish krona, a currency used in Swedn. This
	// is the value that should be passed in the <b>Item.Currency</b> field
	// by the seller when listing an item on the eBay Sweden site (Site ID 218).
	//
	CurrencyCodeTypeSEK CurrencyCodeType = "SEK"

	//
	// This value is a 3-digit code for a Syrian pound, a currency used in Syria.
	//
	CurrencyCodeTypeSYP CurrencyCodeType = "SYP"

	//
	// This value is a 3-digit code for the New Taiwan dollar, a currency used in Taiwan.
	//
	CurrencyCodeTypeTWD CurrencyCodeType = "TWD"

	//
	// This value is a 3-digit code for a Tajikistani somoni, a currency used in
	// Tajikistan.
	//
	CurrencyCodeTypeTJS CurrencyCodeType = "TJS"

	//
	// This value is a 3-digit code for a Tanzanian shilling, a currency used in
	// Tanzania.
	//
	CurrencyCodeTypeTZS CurrencyCodeType = "TZS"

	//
	// This value is a 3-digit code for a Thai baht, a currency used in Thailand.
	//
	CurrencyCodeTypeTHB CurrencyCodeType = "THB"

	//
	// This value is a 3-digit code for a West African CFA franc, a currency used in
	// Benin, Burkina Faso, Cote d'Ivoire, Guinea-Bissau, Mali, Niger, Senegal, and
	// Togo.
	//
	CurrencyCodeTypeXOF CurrencyCodeType = "XOF"

	//
	// This value is a 3-digit code for a Tongan pa'anga, a currency used in Tonga.
	//
	CurrencyCodeTypeTOP CurrencyCodeType = "TOP"

	//
	// This value is a 3-digit code for a Trinidad and Tobago dollar, a currency used in
	// Trinidad and Tobago.
	//
	CurrencyCodeTypeTTD CurrencyCodeType = "TTD"

	//
	// This value is a 3-digit code for a Tunisian dinar, a currency used in Tunisia.
	//
	CurrencyCodeTypeTND CurrencyCodeType = "TND"

	//
	// This value is the old 3-digit code for a Turkish lira, a currency used in Turkey
	// and Northern Cyprus. This value was replaced by the new 3-digit code for the
	// Turkish lira, 'TRY'.
	//
	CurrencyCodeTypeTRL CurrencyCodeType = "TRL"

	//
	// This value is the old 3-digit code for a Turkmenistani manat, a currency used in
	// Turkmenistan. This value was replaced by the new 3-digit code for
	// the Turkmenistani manat, 'TMT'.
	//
	CurrencyCodeTypeTMM CurrencyCodeType = "TMM"

	//
	// This value is a 3-digit code for a Ugandan shilling, a currency used in Uganda.
	//
	CurrencyCodeTypeUGX CurrencyCodeType = "UGX"

	//
	// This value is a 3-digit code for a Ukrainian hryvnia, a currency used in the
	// Ukraine.
	//
	CurrencyCodeTypeUAH CurrencyCodeType = "UAH"

	//
	// This value is a 3-digit code for an United Arab Emirates dirham, a currency used
	// in the United Arab Emirates.
	//
	CurrencyCodeTypeAED CurrencyCodeType = "AED"

	//
	// This value is a 3-digit code for a Pound sterling, a currency used in the United
	// Kingdom and British Crown dependencies. This is the value that should be passed in
	// the <b>Item.Currency</b> field by the seller when listing an item on
	// the eBay UK site (Site ID 3).
	//
	CurrencyCodeTypeGBP CurrencyCodeType = "GBP"

	//
	// This value is a 3-digit code for a same-day transaction involving US dollars.
	//
	CurrencyCodeTypeUSS CurrencyCodeType = "USS"

	//
	// This value is a 3-digit code for a next-day transaction involving US dollars.
	//
	CurrencyCodeTypeUSN CurrencyCodeType = "USN"

	//
	// This value is a 3-digit code for a Uruguayan peso, a currency used in Uruguay.
	//
	CurrencyCodeTypeUYU CurrencyCodeType = "UYU"

	//
	// This value is a 3-digit code for a Uzbekistan som, a currency used in the
	// Uzbekistan.
	//
	CurrencyCodeTypeUZS CurrencyCodeType = "UZS"

	//
	// This value is a 3-digit code for a Vanuatu vatu, a currency used in Vanuatu.
	//
	CurrencyCodeTypeVUV CurrencyCodeType = "VUV"

	//
	// This value is a 3-digit code for a Venezuelan bolivar, a currency previously used
	// in Venezuela. The Venezuela bolivar was replaced by the Venezuelan bolivar
	// fuerte, which has a 3-digit code of 'VEF'.
	//
	CurrencyCodeTypeVEB CurrencyCodeType = "VEB"

	//
	// This value is a 3-digit code for a Vietnamese dong, a currency used in Vietnam.
	//
	CurrencyCodeTypeVND CurrencyCodeType = "VND"

	//
	// This value is a 3-digit code for a Moroccan dirham, a currency used in Morocco.
	//
	CurrencyCodeTypeMAD CurrencyCodeType = "MAD"

	//
	// This value is a 3-digit code for a Yemeni rial, a currency used in Yemen.
	//
	CurrencyCodeTypeYER CurrencyCodeType = "YER"

	//
	// This value is a 3-digit code for a Yugoslav dinar, a currency previously used in
	// Yugoslavia. The Yugoslav dinar was replaced by the Serbian dinar, which has a 3-
	// digit code of 'RSD'.
	//
	CurrencyCodeTypeYUM CurrencyCodeType = "YUM"

	//
	// This value is the old 3-digit code for a Zambian kwacha, a currency used in
	// Zambia. The 'ZMK' code has been replaced by 'ZMW'.
	//
	CurrencyCodeTypeZMK CurrencyCodeType = "ZMK"

	//
	// This value is the old 3-digit code for a Zimbabwean dollar, a currency previously
	// used in Zimbabwe. The US dollar replaced the Zimbabwean dollar as the official
	// currency in Zimbabwe.
	//
	CurrencyCodeTypeZWD CurrencyCodeType = "ZWD"

	//
	// This value is a 3-digit code for an Austrian schilling, a currency previously used
	// in Austria. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeATS CurrencyCodeType = "ATS"

	//
	// Reserved for internal or future use.
	//
	CurrencyCodeTypeCustomCode CurrencyCodeType = "CustomCode"
)

//
// This enumerated type contains the type of errors that may occur with an Shopping API call.
//
type ErrorClassificationCodeType string

const (

	//
	// An error has occurred either as a result of a problem in the sending application or because
	// the application's end-user has attempted to submit invalid data (or missing data).
	// In these cases, do not retry the request. The problem must be corrected before the request
	// can be made again. If the problem is due to something in the application (such as a missing
	// required field), the application must be changed. If the problem is a result of end-user data,
	// the application must alert the end-user to the problem and provide the means for the end-user
	// to correct the data. Once the problem in the application or data is resolved, resend the request to eBay
	// with the corrected data.
	//
	ErrorClassificationCodeTypeRequestError ErrorClassificationCodeType = "RequestError"

	//
	// Indicates that an error has occurred on the eBay system side, such as a database or server down.
	// An application can retry the request as-is a reasonable number of times (eBay recommends twice).
	// If the error persists, contact Developer Technical Support. Once the problem has been resolved,
	// the request may be resent in its original form.
	//
	ErrorClassificationCodeTypeSystemError ErrorClassificationCodeType = "SystemError"

	//
	// (out) Reserved for internal or future use.
	//
	ErrorClassificationCodeTypeCustomCode ErrorClassificationCodeType = "CustomCode"
)

//
// The color of a Feedback score star visually denotes the range in which the member's summary Feedback score falls. The score is the net positive Feedback minus the net negative Feedback left for the member.
//
type FeedbackRatingStarCodeType string

const (

	//
	// This value indicates that the user has a Feedback score ranging from 0-9. There is no Feedback Rating Star associated with this score range.
	//
	FeedbackRatingStarCodeTypeNone FeedbackRatingStarCodeType = "None"

	//
	// This value indicates that the user has a Feedback score ranging from 10-49.
	// A Yellow Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeYellow FeedbackRatingStarCodeType = "Yellow"

	//
	// This value indicates that the user has a Feedback score ranging from 50-99.
	// A Blue Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeBlue FeedbackRatingStarCodeType = "Blue"

	//
	// This value indicates that the user has a Feedback score ranging from 100-499.
	// A Turquoise Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeTurquoise FeedbackRatingStarCodeType = "Turquoise"

	//
	// This value indicates that the user has a Feedback score ranging from 500-999.
	// A Purple Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypePurple FeedbackRatingStarCodeType = "Purple"

	//
	// This value indicates that the user has a Feedback score ranging from 1000-4999. A Red Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeRed FeedbackRatingStarCodeType = "Red"

	//
	// This value indicates that the user has a Feedback score ranging from 5000-9999. A Green Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeGreen FeedbackRatingStarCodeType = "Green"

	//
	// This value indicates that the user has a Feedback score ranging from 10000-24999. A Yellow Shooting Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeYellowShooting FeedbackRatingStarCodeType = "YellowShooting"

	//
	// This value indicates that the user has a Feedback score ranging from 25000-49999. A Turquoise Shooting Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeTurquoiseShooting FeedbackRatingStarCodeType = "TurquoiseShooting"

	//
	// This value indicates that the user has a Feedback score ranging from 50000-99999. A Purple Shooting Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypePurpleShooting FeedbackRatingStarCodeType = "PurpleShooting"

	//
	// This value indicates that the user has a Feedback score ranging from 100000-499999. A Red Shooting Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeRedShooting FeedbackRatingStarCodeType = "RedShooting"

	//
	// This value indicates that the user has a Feedback score ranging from 500000-90000. A Green Shooting Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeGreenShooting FeedbackRatingStarCodeType = "GreenShooting"

	//
	// This value indicates that the user has a Feedback score of 1000000 or above. A Silver Shooting Feedback Rating Star is used with this score range.
	//
	FeedbackRatingStarCodeTypeSilverShooting FeedbackRatingStarCodeType = "SilverShooting"

	//
	// Reserved for internal or future use.
	//
	FeedbackRatingStarCodeTypeCustomCode FeedbackRatingStarCodeType = "CustomCode"
)

//
// This enumerated type contains the type of eBay seller account types that are available.
//
type SellerBusinessCodeType string

const (

	//
	// This enumeration value indicates that the type of seller account is undefined, or cannot be determined.
	//
	SellerBusinessCodeTypeUndefined SellerBusinessCodeType = "Undefined"

	//
	// This enumeration value indicates that the type of seller account is a private seller account (or non-business account).
	//
	SellerBusinessCodeTypePrivate SellerBusinessCodeType = "Private"

	//
	// This enumeration value indicates that the type of seller account is a commercial (or business seller account).
	//
	SellerBusinessCodeTypeCommercial SellerBusinessCodeType = "Commercial"

	//
	// Reserved for internal or future use.
	//
	SellerBusinessCodeTypeCustomCode SellerBusinessCodeType = "CustomCode"
)

//
// Enumerated type that consists of the five different Power Seller levels. Each Power Seller tier is based on average monthly sales, and eBay reviews eligibility on a monthly basis. Available benefits and services to the seller vary for each tier.
//
type SellerLevelCodeType string

const (

	//
	// This enumeration value indicates that the Power Seller is at the Bronze level, which is the lowest tier.
	//
	SellerLevelCodeTypeBronze SellerLevelCodeType = "Bronze"

	//
	// This enumeration value indicates that the Power Seller is at the Silver level, which is the second lowest tier (between Bronze and Gold).
	//
	SellerLevelCodeTypeSilver SellerLevelCodeType = "Silver"

	//
	// This enumeration value indicates that the Power Seller is at the Gold level, which is the third tier (between Silver and Platinum).
	//
	SellerLevelCodeTypeGold SellerLevelCodeType = "Gold"

	//
	// This enumeration value indicates that the Power Seller is at the Platinum level, which is the second highest tier (between Gold and Titanium).
	//
	SellerLevelCodeTypePlatinum SellerLevelCodeType = "Platinum"

	//
	// This enumeration value indicates that the Power Seller is at the Titanium level, which is the highest tier.
	//
	SellerLevelCodeTypeTitanium SellerLevelCodeType = "Titanium"

	//
	// Deprecated value.
	//
	SellerLevelCodeTypeDiamond SellerLevelCodeType = "Diamond"

	//
	// This enumeration value indicates that the seller does not qualify to be a Power Seller based on calculated monthly sales.
	//
	SellerLevelCodeTypeNone SellerLevelCodeType = "None"

	//
	// eserved for internal or future use
	//
	SellerLevelCodeTypeCustomCode SellerLevelCodeType = "CustomCode"
)

//
// Enumerated type that is used to show the severity of the API call issue, either an error, or a warning.
//
type SeverityCodeType string

const (

	//
	// The request was processed successfully, but something occurred
	// that may affect your application or the user. For example, eBay may have
	// changed a value the user sent in. In this case, eBay returns a normal,
	// successful response and also returns the warning.
	//
	SeverityCodeTypeWarning SeverityCodeType = "Warning"

	//
	// The request that triggered the error was not processed
	// successfully. When a serious application-level error occurs, the error
	// is returned instead of the business data.
	//
	SeverityCodeTypeError SeverityCodeType = "Error"

	//
	// Reserved for internal or future use.
	//
	SeverityCodeTypeCustomCode SeverityCodeType = "CustomCode"
)

//
// The enumerated type consists of all eBay marketplaces on which a user is registered and on which items can be listed. Generally, each enumeration value is simply the name of the couuntry (of the eBay marketplace), but there are some variations. Note that there are some countries where eBay listings are available, but that country does not have an official eBay marketplace, but only a 'Global Buying Hub'. A 'Global Buying Hub' basically just allows buyers in countries that don't have an official eBay marketplace to view inventory from other eBay marketplaces around the world.
//
type SiteCodeType string

const (

	//
	// This enumeration indicates that the site is the eBay US marketplace.
	//
	SiteCodeTypeUS SiteCodeType = "US"

	//
	// This enumeration indicates that the site is the eBay Canada marketplace.
	//
	SiteCodeTypeCanada SiteCodeType = "Canada"

	//
	// This enumeration indicates that the site is the eBay UK marketplace.
	//
	SiteCodeTypeUK SiteCodeType = "UK"

	//
	// This enumeration indicates that the site is the eBay Australia marketplace.
	//
	SiteCodeTypeAustralia SiteCodeType = "Australia"

	//
	// This enumeration indicates that the site is the eBay Austria marketplace.
	//
	SiteCodeTypeAustria SiteCodeType = "Austria"

	//
	// This enumeration indicates that the site is the eBay Belgium marketplace, translated into the French language.
	//
	SiteCodeTypeBelgium_French SiteCodeType = "Belgium_French"

	//
	// This enumeration indicates that the site is the eBay France marketplace.
	//
	SiteCodeTypeFrance SiteCodeType = "France"

	//
	// This enumeration indicates that the site is the eBay Germany marketplace.
	//
	SiteCodeTypeGermany SiteCodeType = "Germany"

	//
	// This enumeration indicates that the site is the eBay Italy marketplace.
	//
	SiteCodeTypeItaly SiteCodeType = "Italy"

	//
	// This enumeration indicates that the site is the eBay Belgium marketplace, translated into the Dutch language.
	//
	SiteCodeTypeBelgium_Dutch SiteCodeType = "Belgium_Dutch"

	//
	// This enumeration indicates that the site is the eBay Netherlands marketplace.
	//
	SiteCodeTypeNetherlands SiteCodeType = "Netherlands"

	//
	// This enumeration indicates that the site is the eBay Spain marketplace.
	//
	SiteCodeTypeSpain SiteCodeType = "Spain"

	//
	// This enumeration indicates that the site is the eBay Switzerland marketplace.
	//
	SiteCodeTypeSwitzerland SiteCodeType = "Switzerland"

	//
	// This enumeration indicates that the site is the eBay Taiwan marketplace.
	//
	SiteCodeTypeTaiwan SiteCodeType = "Taiwan"

	//
	// This value is not applicable, as eBay US Motors is not an official eBay marketplace, but only a 'vertical' of the eBay US marketplace.
	//
	SiteCodeTypeEBayMotors SiteCodeType = "eBayMotors"

	//
	// This value is not applicable, as Hong Kong does not have an official eBay marketplace, but only a 'Global Buying Hub'. A 'Global Buying Hub' basically just allows buyers in countries that don't have an official eBay marketplace to view inventory from other eBay marketplaces around the world.
	//
	SiteCodeTypeHongKong SiteCodeType = "HongKong"

	//
	// This value is not applicable, as Singapore does not have an official eBay marketplace, but only a 'Global Buying Hub'. A 'Global Buying Hub' basically just allows buyers in countries that don't have an official eBay marketplace to view inventory from other eBay marketplaces around the world.
	//
	SiteCodeTypeSingapore SiteCodeType = "Singapore"

	//
	// This value is not applicable, as India no longer has an official eBay marketplace, but only a 'Global Buying Hub'. A 'Global Buying Hub' basically just allows buyers in countries that don't have an official eBay marketplace to view inventory from other eBay marketplaces around the world.
	//
	SiteCodeTypeIndia SiteCodeType = "India"

	//
	// This value is not applicable, as China does not have an official eBay marketplace, but only a 'Global Buying Hub'. A 'Global Buying Hub' basically just allows buyers in countries that don't have an official eBay marketplace to view inventory from other eBay marketplaces around the world.
	//
	SiteCodeTypeChina SiteCodeType = "China"

	//
	// This enumeration indicates that the site is the eBay Ireland marketplace.
	//
	SiteCodeTypeIreland SiteCodeType = "Ireland"

	//
	// This value is not applicable, as Malaysia does not have an official eBay marketplace, but only a 'Global Buying Hub'. A 'Global Buying Hub' basically just allows buyers in countries that don't have an official eBay marketplace to view inventory from other eBay marketplaces around the world.
	//
	SiteCodeTypeMalaysia SiteCodeType = "Malaysia"

	//
	// This enumeration indicates that the site is the eBay Philippines marketplace.
	//
	SiteCodeTypePhilippines SiteCodeType = "Philippines"

	//
	// This enumeration indicates that the site is the eBay Poland marketplace.
	//
	SiteCodeTypePoland SiteCodeType = "Poland"

	//
	// This value is not applicable, as there is no longer an eBay Sweden marketplace or a 'Global Buying Hub' available in Sweden.
	//
	SiteCodeTypeSweden SiteCodeType = "Sweden"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	SiteCodeTypeCustomCode SiteCodeType = "CustomCode"

	//
	// This enumeration indicates that the site is the eBay Canada French marketplace. The eBay Canada French marketplace is actually its own eBay marketplace, and not just the eBay Canada marketplace translated into the French language.
	//
	SiteCodeTypeCanadaFrench SiteCodeType = "CanadaFrench"

	//
	// This value is not applicable, as Russia does not have an official eBay marketplace, but only a 'Global Buying Hub'. A 'Global Buying Hub' basically just allows buyers in countries that don't have an official eBay marketplace to view inventory from other eBay marketplaces around the world.
	//
	SiteCodeTypeRussia SiteCodeType = "Russia"
)

//
// Indicates the order of sorting.
//
type SortOrderCodeType string

const (

	//
	// Sorts results in ascending (low to high) order.
	//
	SortOrderCodeTypeAscending SortOrderCodeType = "Ascending"

	//
	// Sorts results in descending (high to low) order.
	//
	SortOrderCodeTypeDescending SortOrderCodeType = "Descending"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	SortOrderCodeTypeCustomCode SortOrderCodeType = "CustomCode"
)

//
// This enumerated type is used to specify whether an eBay user was the buyer or seller in an eBay transaction.
//
type TradingRoleCodeType string

const (

	//
	// This enumeration value indicates the eBay user was the buyer in the correponding transaction.
	//
	TradingRoleCodeTypeBuyer TradingRoleCodeType = "Buyer"

	//
	// This enumeration value indicates the eBay user was the seller in the correponding transaction.
	//
	TradingRoleCodeTypeSeller TradingRoleCodeType = "Seller"

	//
	// Reserved for future use.
	//
	TradingRoleCodeTypeCustomCode TradingRoleCodeType = "CustomCode"
)

//
// Enumerated type that contains the different states of an eBay user account.
//
type UserStatusCodeType string

const (

	//
	// This enumeration value indicates that the current state of the eBay user account is unknown. This value should seldom, if ever, be returned and typically represents a problem.
	//
	UserStatusCodeTypeUnknown UserStatusCodeType = "Unknown"

	//
	// This enumeration value indicates that the eBay user account is currently suspended. This may be because the eBay user has violated eBay's user agreement.
	//
	UserStatusCodeTypeSuspended UserStatusCodeType = "Suspended"

	//
	// This enumeration value indicates that the current state of the eBay user account is confirmed and active. This is the most commonly returned value.
	//
	UserStatusCodeTypeConfirmed UserStatusCodeType = "Confirmed"

	//
	// This enumeration value indicates that the current state of the eBay user account is unconfirmed. This value may be returned for a newly created acount, where the registration process is still ongoing.
	//
	UserStatusCodeTypeUnconfirmed UserStatusCodeType = "Unconfirmed"

	//
	// This enumeration value is rare, but may get returned for users who registered quite a long time ago, but never re-registered as required.
	//
	UserStatusCodeTypeGhost UserStatusCodeType = "Ghost"

	//
	// This enumeration value indicates that eBay is currently making changes to the eBay user account. This value is also rarely returned.
	//
	UserStatusCodeTypeInMaintenance UserStatusCodeType = "InMaintenance"

	//
	// This enumeration value indicates that eBay has deleted the user's account.
	//
	UserStatusCodeTypeDeleted UserStatusCodeType = "Deleted"

	//
	// This enumeration value indicates that the new account has been created, but eBay is in the process of verifying credit card information for the user.
	//
	UserStatusCodeTypeCreditCardVerify UserStatusCodeType = "CreditCardVerify"

	//
	// This enumeration value indicates that the user's account is on hold, possibly for non-payment of eBay seller fees.
	//
	UserStatusCodeTypeAccountOnHold UserStatusCodeType = "AccountOnHold"

	//
	// This enumeration value indicates that the user has more than one account, and these accounts are in the process of getting merged.
	//
	UserStatusCodeTypeMerged UserStatusCodeType = "Merged"

	//
	// This enumeration value indicates that registration of the new account is pending the new user responding to the confirmation email.
	//
	UserStatusCodeTypeRegistrationCodeMailOut UserStatusCodeType = "RegistrationCodeMailOut"

	//
	// This enumeration value indicates that the user account has been scheduled for account closure (typically when a user has requested to have their account closed).
	//
	UserStatusCodeTypeTermPending UserStatusCodeType = "TermPending"

	//
	// This value is no longer applicable as the Half.com site has been shut down.
	//
	UserStatusCodeTypeUnconfirmedHalfOptIn UserStatusCodeType = "UnconfirmedHalfOptIn"

	//
	// This value is no longer applicable as the Half.com site has been shut down.
	//
	UserStatusCodeTypeCreditCardVerifyHalfOptIn UserStatusCodeType = "CreditCardVerifyHalfOptIn"

	//
	// This value is no longer applicable as eBay Express listings no longer exist.
	//
	UserStatusCodeTypeUnconfirmedExpress UserStatusCodeType = "UnconfirmedExpress"

	//
	// Reserved for internal or future use.
	//
	UserStatusCodeTypeCustomCode UserStatusCodeType = "CustomCode"
)

//
// This enumerated type includes all forms of payment that buyers may use to pay for order line items.
//
type BuyerPaymentMethodCodeType string

const (

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if no payment method is specified for a listing.
	//
	BuyerPaymentMethodCodeTypeNone BuyerPaymentMethodCodeType = "None"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if a money order or cashier's check is accepted as a form of payment for the order line item. This payment method is only applicable if the buyer and seller will be handling payment offline.
	//
	BuyerPaymentMethodCodeTypeMOCC BuyerPaymentMethodCodeType = "MOCC"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if American Express is accepted as a form of payment for the order line item.
	//
	BuyerPaymentMethodCodeTypeAmEx BuyerPaymentMethodCodeType = "AmEx"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if payment instructions for the order line item are contained in the listing description.
	//
	BuyerPaymentMethodCodeTypePaymentSeeDescription BuyerPaymentMethodCodeType = "PaymentSeeDescription"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if credit cards are accepted as a form of payment for the order line item.
	//
	BuyerPaymentMethodCodeTypeCCAccepted BuyerPaymentMethodCodeType = "CCAccepted"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if a personal check is accepted as a form of payment for the order line item. This payment method is only applicable if the buyer and seller will be handling payment offline.
	//
	BuyerPaymentMethodCodeTypePersonalCheck BuyerPaymentMethodCodeType = "PersonalCheck"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if 'Cash on delivery' is accepted as a form of payment for the order line item. This payment method is only applicable if the buyer and seller will be handling payment offline, and is only applicable to the following eBay sites: AT (16), BEFR (24), BENL (123), CH (193), DE (77), ES (186), FR (71), HK (201), IN (203), IT (101), PL (212), and SG (216).
	//
	BuyerPaymentMethodCodeTypeCOD BuyerPaymentMethodCodeType = "COD"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if Visa or Mastercard are accepted as forms of payment for the order line item.
	//
	BuyerPaymentMethodCodeTypeVisaMC BuyerPaymentMethodCodeType = "VisaMC"

	//
	// This payment method is no longer applicable, as this form of payment was only accepted on the eBay India site, and this site is no longer a functioning eBay marketplace.
	//
	//
	BuyerPaymentMethodCodeTypePaisaPayAccepted BuyerPaymentMethodCodeType = "PaisaPayAccepted"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if the seller is offering the buyer another form of payment not defined in this type.
	//
	BuyerPaymentMethodCodeTypeOther BuyerPaymentMethodCodeType = "Other"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if PayPal is accepted as a form of payment for the order line item. This is a valid value for all countries that accept PayPal.
	//
	BuyerPaymentMethodCodeTypePayPal BuyerPaymentMethodCodeType = "PayPal"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if Discover is accepted as a form of payment for the order line item.
	//
	BuyerPaymentMethodCodeTypeDiscover BuyerPaymentMethodCodeType = "Discover"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if 'Cash on Pickup' is accepted as a form of payment for the order line item. This payment method is only applicable if the buyer and seller will be handling payment offline.
	//
	BuyerPaymentMethodCodeTypeCashOnPickup BuyerPaymentMethodCodeType = "CashOnPickup"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if the seller is willing to accept a money transfer as a form of payment for the order line item.
	//
	BuyerPaymentMethodCodeTypeMoneyXferAccepted BuyerPaymentMethodCodeType = "MoneyXferAccepted"

	//
	// If the seller has bank account information on file, and
	// <b>MoneyXferAcceptedInCheckout</b> is <code>true</code>, then the bank account
	// information will be displayed at checkout.
	//
	BuyerPaymentMethodCodeTypeMoneyXferAcceptedInCheckout BuyerPaymentMethodCodeType = "MoneyXferAcceptedInCheckout"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if the seller is offering the buyer another form of online payment not defined in this type.
	//
	BuyerPaymentMethodCodeTypeOtherOnlinePayments BuyerPaymentMethodCodeType = "OtherOnlinePayments"

	BuyerPaymentMethodCodeTypeEscrow BuyerPaymentMethodCodeType = "Escrow"

	BuyerPaymentMethodCodeTypePrePayDelivery BuyerPaymentMethodCodeType = "PrePayDelivery"

	BuyerPaymentMethodCodeTypeCODPrePayDelivery BuyerPaymentMethodCodeType = "CODPrePayDelivery"

	BuyerPaymentMethodCodeTypePostalTransfer BuyerPaymentMethodCodeType = "PostalTransfer"

	//
	// Placeholder value. See
	// <a href="https://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	BuyerPaymentMethodCodeTypeCustomCode BuyerPaymentMethodCodeType = "CustomCode"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if a loan check is accepted as a form of payment for the order line item.
	// This option is only applicable to motor vehicle listings.
	//
	BuyerPaymentMethodCodeTypeLoanCheck BuyerPaymentMethodCodeType = "LoanCheck"

	BuyerPaymentMethodCodeTypeCashInPerson BuyerPaymentMethodCodeType = "CashInPerson"

	//
	// Elektronisches Lastschriftverfahren (direct debit).
	// Only applicable to Express Germany.
	//
	BuyerPaymentMethodCodeTypeELV BuyerPaymentMethodCodeType = "ELV"

	//
	// This payment method is no longer applicable, as this form of payment was only accepted on the eBay India site, and this site is no longer a functioning eBay marketplace.
	//
	//
	BuyerPaymentMethodCodeTypePaisaPayEscrowEMI BuyerPaymentMethodCodeType = "PaisaPayEscrowEMI"

	BuyerPaymentMethodCodeTypeMoneybookers BuyerPaymentMethodCodeType = "Moneybookers"

	BuyerPaymentMethodCodeTypePaymate BuyerPaymentMethodCodeType = "Paymate"

	BuyerPaymentMethodCodeTypeProPay BuyerPaymentMethodCodeType = "ProPay"

	BuyerPaymentMethodCodeTypeStandardPayment BuyerPaymentMethodCodeType = "StandardPayment"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if a debit card is accepted as a form of payment for the order line item. This value is only applicable to eBay Scheduled Delivery orders in the UK.
	//
	BuyerPaymentMethodCodeTypeDirectDebit BuyerPaymentMethodCodeType = "DirectDebit"

	//
	// This enumeration value is returned in a <b>PaymentMethods</b> field if a credit card is accepted as a form of payment for the order line item.
	//
	BuyerPaymentMethodCodeTypeCreditCard BuyerPaymentMethodCodeType = "CreditCard"
)

//
// Enumerated type defining the possible states for a nonprofit charity organization registered with the PayPal Giving Fund.
//
type CharityStatusCodeType string

const (

	//
	// The specified nonprofit charity organization is a valid nonprofit charity organization according to the requirements of the PayPal Giving Fund.
	//
	CharityStatusCodeTypeValid CharityStatusCodeType = "Valid"

	//
	// The specified nonprofit charity organization is no longer a valid nonprofit charity organization according to the requirements of the PayPal Giving Fund.
	//
	CharityStatusCodeTypeNoLongerValid CharityStatusCodeType = "NoLongerValid"

	//
	// Reserved for internal or future use.
	//
	CharityStatusCodeTypeCustomCode CharityStatusCodeType = "CustomCode"
)

//
// This enumerated type contains a partial list of ISO 3166 standard two-letter codes that represent countries around the world.
// <br><br>
// It is recommended that users use the <b>GeteBayDetails</b> call of the Trading API to see the full list of currently supported country codes,
// and the English names associated with each code (e.g., KY="Cayman Islands"). Call
// <b>GeteBayDetails</b> with <b>DetailName</b> set to <b>Country</b>, and then look for <b>CountryDetails.Country</b> fields in the response.
//
type CountryCodeType string

const (

	//
	// Afghanistan.
	//
	CountryCodeTypeAF CountryCodeType = "AF"

	//
	// Albania.
	//
	CountryCodeTypeAL CountryCodeType = "AL"

	//
	// Algeria.
	//
	CountryCodeTypeDZ CountryCodeType = "DZ"

	//
	// American Samoa.
	//
	CountryCodeTypeAS CountryCodeType = "AS"

	//
	// Andorra.
	//
	CountryCodeTypeAD CountryCodeType = "AD"

	//
	// Angola.
	//
	CountryCodeTypeAO CountryCodeType = "AO"

	//
	// Anguilla.
	//
	CountryCodeTypeAI CountryCodeType = "AI"

	//
	// Antarctica.
	//
	CountryCodeTypeAQ CountryCodeType = "AQ"

	//
	// Antigua and Barbuda.
	//
	CountryCodeTypeAG CountryCodeType = "AG"

	//
	// Argentina.
	//
	CountryCodeTypeAR CountryCodeType = "AR"

	//
	// Armenia.
	//
	CountryCodeTypeAM CountryCodeType = "AM"

	//
	// Aruba.
	//
	CountryCodeTypeAW CountryCodeType = "AW"

	//
	// Australia.
	//
	CountryCodeTypeAU CountryCodeType = "AU"

	//
	// Austria.
	//
	CountryCodeTypeAT CountryCodeType = "AT"

	//
	// Azerbaijan.
	//
	CountryCodeTypeAZ CountryCodeType = "AZ"

	//
	// Bahamas.
	//
	CountryCodeTypeBS CountryCodeType = "BS"

	//
	// Bahrain.
	//
	CountryCodeTypeBH CountryCodeType = "BH"

	//
	// Bangladesh.
	//
	CountryCodeTypeBD CountryCodeType = "BD"

	//
	// Barbados.
	//
	CountryCodeTypeBB CountryCodeType = "BB"

	//
	// Belarus.
	//
	CountryCodeTypeBY CountryCodeType = "BY"

	//
	// Belgium.
	//
	CountryCodeTypeBE CountryCodeType = "BE"

	//
	// Belize.
	//
	CountryCodeTypeBZ CountryCodeType = "BZ"

	//
	// Benin.
	//
	CountryCodeTypeBJ CountryCodeType = "BJ"

	//
	// Bermuda.
	//
	CountryCodeTypeBM CountryCodeType = "BM"

	//
	// Bhutan.
	//
	CountryCodeTypeBT CountryCodeType = "BT"

	//
	// Bolivia.
	//
	CountryCodeTypeBO CountryCodeType = "BO"

	//
	// Bosnia and Herzegovina.
	//
	CountryCodeTypeBA CountryCodeType = "BA"

	//
	// Botswana.
	//
	CountryCodeTypeBW CountryCodeType = "BW"

	//
	// Bouvet Island.
	//
	CountryCodeTypeBV CountryCodeType = "BV"

	//
	// Brazil.
	//
	CountryCodeTypeBR CountryCodeType = "BR"

	//
	// British Indian Ocean Territory.
	//
	CountryCodeTypeIO CountryCodeType = "IO"

	//
	// Brunei Darussalam.
	//
	CountryCodeTypeBN CountryCodeType = "BN"

	//
	// Bulgaria.
	//
	CountryCodeTypeBG CountryCodeType = "BG"

	//
	// Burkina Faso.
	//
	CountryCodeTypeBF CountryCodeType = "BF"

	//
	// Burundi.
	//
	CountryCodeTypeBI CountryCodeType = "BI"

	//
	// Cambodia.
	//
	CountryCodeTypeKH CountryCodeType = "KH"

	//
	// Cameroon.
	//
	CountryCodeTypeCM CountryCodeType = "CM"

	//
	// Canada.
	//
	CountryCodeTypeCA CountryCodeType = "CA"

	//
	// Cape Verde.
	//
	CountryCodeTypeCV CountryCodeType = "CV"

	//
	// Cayman Islands.
	//
	CountryCodeTypeKY CountryCodeType = "KY"

	//
	// Central African Republic.
	//
	CountryCodeTypeCF CountryCodeType = "CF"

	//
	// Chad.
	//
	CountryCodeTypeTD CountryCodeType = "TD"

	//
	// Chile.
	//
	CountryCodeTypeCL CountryCodeType = "CL"

	//
	// China.
	//
	CountryCodeTypeCN CountryCodeType = "CN"

	//
	// Christmas Island.
	//
	CountryCodeTypeCX CountryCodeType = "CX"

	//
	// Cocos (Keeling) Islands.
	//
	CountryCodeTypeCC CountryCodeType = "CC"

	//
	// Colombia.
	//
	CountryCodeTypeCO CountryCodeType = "CO"

	//
	// Comoros.
	//
	CountryCodeTypeKM CountryCodeType = "KM"

	//
	// Congo.
	//
	CountryCodeTypeCG CountryCodeType = "CG"

	//
	// The Democratic Republic of the Congo.
	//
	CountryCodeTypeCD CountryCodeType = "CD"

	//
	// Cook Islands.
	//
	CountryCodeTypeCK CountryCodeType = "CK"

	//
	// Costa Rica.
	//
	CountryCodeTypeCR CountryCodeType = "CR"

	//
	// Cote d'Ivoire.
	//
	CountryCodeTypeCI CountryCodeType = "CI"

	//
	// Croatia.
	//
	CountryCodeTypeHR CountryCodeType = "HR"

	//
	// Cuba.
	//
	CountryCodeTypeCU CountryCodeType = "CU"

	//
	// Cyprus.
	//
	CountryCodeTypeCY CountryCodeType = "CY"

	//
	// Czech Republic.
	//
	CountryCodeTypeCZ CountryCodeType = "CZ"

	//
	// Denmark.
	//
	CountryCodeTypeDK CountryCodeType = "DK"

	//
	// Djibouti.
	//
	CountryCodeTypeDJ CountryCodeType = "DJ"

	//
	// Dominica.
	//
	CountryCodeTypeDM CountryCodeType = "DM"

	//
	// Dominican Republic.
	//
	CountryCodeTypeDO CountryCodeType = "DO"

	//
	// No longer in use.
	//
	CountryCodeTypeTP CountryCodeType = "TP"

	//
	// Ecuador.
	//
	CountryCodeTypeEC CountryCodeType = "EC"

	//
	// Egypt.
	//
	CountryCodeTypeEG CountryCodeType = "EG"

	//
	// El Salvador.
	//
	CountryCodeTypeSV CountryCodeType = "SV"

	//
	// Equatorial Guinea.
	//
	CountryCodeTypeGQ CountryCodeType = "GQ"

	//
	// Eritrea.
	//
	CountryCodeTypeER CountryCodeType = "ER"

	//
	// Estonia.
	//
	CountryCodeTypeEE CountryCodeType = "EE"

	//
	// Ethiopia.
	//
	CountryCodeTypeET CountryCodeType = "ET"

	//
	// Falkland Islands (Malvinas).
	//
	CountryCodeTypeFK CountryCodeType = "FK"

	//
	// Faroe Islands.
	//
	CountryCodeTypeFO CountryCodeType = "FO"

	//
	// Fiji.
	//
	CountryCodeTypeFJ CountryCodeType = "FJ"

	//
	// Finland.
	//
	CountryCodeTypeFI CountryCodeType = "FI"

	//
	// France.
	//
	CountryCodeTypeFR CountryCodeType = "FR"

	//
	// French Guiana.
	//
	CountryCodeTypeGF CountryCodeType = "GF"

	//
	// French Polynesia. Includes Tahiti.
	//
	CountryCodeTypePF CountryCodeType = "PF"

	//
	// French Southern Territories.
	//
	CountryCodeTypeTF CountryCodeType = "TF"

	//
	// Gabon.
	//
	CountryCodeTypeGA CountryCodeType = "GA"

	//
	// Gambia.
	//
	CountryCodeTypeGM CountryCodeType = "GM"

	//
	// Georgia.
	//
	CountryCodeTypeGE CountryCodeType = "GE"

	//
	// Germany.
	//
	CountryCodeTypeDE CountryCodeType = "DE"

	//
	// Ghana.
	//
	CountryCodeTypeGH CountryCodeType = "GH"

	//
	// Gibraltar.
	//
	CountryCodeTypeGI CountryCodeType = "GI"

	//
	// Greece.
	//
	CountryCodeTypeGR CountryCodeType = "GR"

	//
	// Greenland.
	//
	CountryCodeTypeGL CountryCodeType = "GL"

	//
	// Grenada.
	//
	CountryCodeTypeGD CountryCodeType = "GD"

	//
	// Guadeloupe.
	//
	CountryCodeTypeGP CountryCodeType = "GP"

	//
	// Guam.
	//
	CountryCodeTypeGU CountryCodeType = "GU"

	//
	// Guatemala.
	//
	CountryCodeTypeGT CountryCodeType = "GT"

	//
	// Guinea.
	//
	CountryCodeTypeGN CountryCodeType = "GN"

	//
	// Guinea-Bissau.
	//
	CountryCodeTypeGW CountryCodeType = "GW"

	//
	// Guyana.
	//
	CountryCodeTypeGY CountryCodeType = "GY"

	//
	// Haiti.
	//
	CountryCodeTypeHT CountryCodeType = "HT"

	//
	// Heard Island and McDonald Islands.
	//
	CountryCodeTypeHM CountryCodeType = "HM"

	//
	// Holy See (Vatican City state).
	//
	CountryCodeTypeVA CountryCodeType = "VA"

	//
	// Honduras.
	//
	CountryCodeTypeHN CountryCodeType = "HN"

	//
	// Hong Kong.
	//
	CountryCodeTypeHK CountryCodeType = "HK"

	//
	// Hungary.
	//
	CountryCodeTypeHU CountryCodeType = "HU"

	//
	// Iceland.
	//
	CountryCodeTypeIS CountryCodeType = "IS"

	//
	// India.
	//
	CountryCodeTypeIN CountryCodeType = "IN"

	//
	// Indonesia.
	//
	CountryCodeTypeID CountryCodeType = "ID"

	//
	// Islamic Republic of Iran.
	//
	CountryCodeTypeIR CountryCodeType = "IR"

	//
	// Iraq.
	//
	CountryCodeTypeIQ CountryCodeType = "IQ"

	//
	// Ireland.
	//
	CountryCodeTypeIE CountryCodeType = "IE"

	//
	// Israel.
	//
	CountryCodeTypeIL CountryCodeType = "IL"

	//
	// Italy.
	//
	CountryCodeTypeIT CountryCodeType = "IT"

	//
	// Jamaica.
	//
	CountryCodeTypeJM CountryCodeType = "JM"

	//
	// Japan.
	//
	CountryCodeTypeJP CountryCodeType = "JP"

	//
	// Jordan.
	//
	CountryCodeTypeJO CountryCodeType = "JO"

	//
	// Kazakhstan.
	//
	CountryCodeTypeKZ CountryCodeType = "KZ"

	//
	// Kenya.
	//
	CountryCodeTypeKE CountryCodeType = "KE"

	//
	// Kiribati.
	//
	CountryCodeTypeKI CountryCodeType = "KI"

	//
	// Democratic People's Republic of Korea.
	//
	CountryCodeTypeKP CountryCodeType = "KP"

	//
	// Republic of Korea.
	//
	CountryCodeTypeKR CountryCodeType = "KR"

	//
	// Kuwait.
	//
	CountryCodeTypeKW CountryCodeType = "KW"

	//
	// Kyrgyzstan.
	//
	CountryCodeTypeKG CountryCodeType = "KG"

	//
	// Lao People's Democratic Republic.
	//
	CountryCodeTypeLA CountryCodeType = "LA"

	//
	// Latvia.
	//
	CountryCodeTypeLV CountryCodeType = "LV"

	//
	// Lebanon.
	//
	CountryCodeTypeLB CountryCodeType = "LB"

	//
	// Lesotho.
	//
	CountryCodeTypeLS CountryCodeType = "LS"

	//
	// Liberia.
	//
	CountryCodeTypeLR CountryCodeType = "LR"

	//
	// Libyan Arab Jamahiriya.
	//
	CountryCodeTypeLY CountryCodeType = "LY"

	//
	// Liechtenstein.
	//
	CountryCodeTypeLI CountryCodeType = "LI"

	//
	// Lithuania.
	//
	CountryCodeTypeLT CountryCodeType = "LT"

	//
	// Luxembourg.
	//
	CountryCodeTypeLU CountryCodeType = "LU"

	//
	// Macao.
	//
	CountryCodeTypeMO CountryCodeType = "MO"

	//
	// The Former Yugoslav Republic of Macedonia.
	//
	CountryCodeTypeMK CountryCodeType = "MK"

	//
	// Madagascar.
	//
	CountryCodeTypeMG CountryCodeType = "MG"

	//
	// Malawi.
	//
	CountryCodeTypeMW CountryCodeType = "MW"

	//
	// Malaysia.
	//
	CountryCodeTypeMY CountryCodeType = "MY"

	//
	// Maldives.
	//
	CountryCodeTypeMV CountryCodeType = "MV"

	//
	// Mali.
	//
	CountryCodeTypeML CountryCodeType = "ML"

	//
	// Malta.
	//
	CountryCodeTypeMT CountryCodeType = "MT"

	//
	// Marshall Islands.
	//
	CountryCodeTypeMH CountryCodeType = "MH"

	//
	// Martinique.
	//
	CountryCodeTypeMQ CountryCodeType = "MQ"

	//
	// Mauritania.
	//
	CountryCodeTypeMR CountryCodeType = "MR"

	//
	// Mauritius.
	//
	CountryCodeTypeMU CountryCodeType = "MU"

	//
	// Mayotte.
	//
	CountryCodeTypeYT CountryCodeType = "YT"

	//
	// Mexico.
	//
	CountryCodeTypeMX CountryCodeType = "MX"

	//
	// Federated States of Micronesia.
	//
	CountryCodeTypeFM CountryCodeType = "FM"

	//
	// Republic of Moldova.
	//
	CountryCodeTypeMD CountryCodeType = "MD"

	//
	// Monaco.
	//
	CountryCodeTypeMC CountryCodeType = "MC"

	//
	// Mongolia.
	//
	CountryCodeTypeMN CountryCodeType = "MN"

	//
	// Montserrat.
	//
	CountryCodeTypeMS CountryCodeType = "MS"

	//
	// Morocco.
	//
	CountryCodeTypeMA CountryCodeType = "MA"

	//
	// Mozambique.
	//
	CountryCodeTypeMZ CountryCodeType = "MZ"

	//
	// Myanmar.
	//
	CountryCodeTypeMM CountryCodeType = "MM"

	//
	// Namibia.
	//
	CountryCodeTypeNA CountryCodeType = "NA"

	//
	// Nauru.
	//
	CountryCodeTypeNR CountryCodeType = "NR"

	//
	// Nepal.
	//
	CountryCodeTypeNP CountryCodeType = "NP"

	//
	// Netherlands.
	//
	CountryCodeTypeNL CountryCodeType = "NL"

	//
	// Netherlands Antilles.
	//
	CountryCodeTypeAN CountryCodeType = "AN"

	//
	// New Caledonia.
	//
	CountryCodeTypeNC CountryCodeType = "NC"

	//
	// New Zealand.
	//
	CountryCodeTypeNZ CountryCodeType = "NZ"

	//
	// Nicaragua.
	//
	CountryCodeTypeNI CountryCodeType = "NI"

	//
	// Niger.
	//
	CountryCodeTypeNE CountryCodeType = "NE"

	//
	// Nigeria.
	//
	CountryCodeTypeNG CountryCodeType = "NG"

	//
	// Niue.
	//
	CountryCodeTypeNU CountryCodeType = "NU"

	//
	// Norfolk Island.
	//
	CountryCodeTypeNF CountryCodeType = "NF"

	//
	// Northern Mariana Islands.
	//
	CountryCodeTypeMP CountryCodeType = "MP"

	//
	// Norway.
	//
	CountryCodeTypeNO CountryCodeType = "NO"

	//
	// Oman.
	//
	CountryCodeTypeOM CountryCodeType = "OM"

	//
	// Pakistan.
	//
	CountryCodeTypePK CountryCodeType = "PK"

	//
	// Palau.
	//
	CountryCodeTypePW CountryCodeType = "PW"

	//
	// Palestinian territory, Occupied.
	//
	CountryCodeTypePS CountryCodeType = "PS"

	//
	// Panama.
	//
	CountryCodeTypePA CountryCodeType = "PA"

	//
	// Papua New Guinea.
	//
	CountryCodeTypePG CountryCodeType = "PG"

	//
	// Paraguay.
	//
	CountryCodeTypePY CountryCodeType = "PY"

	//
	// Peru.
	//
	CountryCodeTypePE CountryCodeType = "PE"

	//
	// Philippines.
	//
	CountryCodeTypePH CountryCodeType = "PH"

	//
	// Pitcairn.
	//
	CountryCodeTypePN CountryCodeType = "PN"

	//
	// Poland.
	//
	CountryCodeTypePL CountryCodeType = "PL"

	//
	// Portugal.
	//
	CountryCodeTypePT CountryCodeType = "PT"

	//
	// Puerto Rico.
	//
	CountryCodeTypePR CountryCodeType = "PR"

	//
	// Qatar.
	//
	CountryCodeTypeQA CountryCodeType = "QA"

	//
	// Reunion.
	//
	CountryCodeTypeRE CountryCodeType = "RE"

	//
	// Romania.
	//
	CountryCodeTypeRO CountryCodeType = "RO"

	//
	// Russian Federation.
	//
	CountryCodeTypeRU CountryCodeType = "RU"

	//
	// Rwanda.
	//
	CountryCodeTypeRW CountryCodeType = "RW"

	//
	// Saint Helena.
	//
	CountryCodeTypeSH CountryCodeType = "SH"

	//
	// Saint Kitts and Nevis.
	//
	CountryCodeTypeKN CountryCodeType = "KN"

	//
	// Saint Lucia.
	//
	CountryCodeTypeLC CountryCodeType = "LC"

	//
	// Saint Pierre and Miquelon.
	//
	CountryCodeTypePM CountryCodeType = "PM"

	//
	// Saint Vincent and the Grenadines.
	//
	CountryCodeTypeVC CountryCodeType = "VC"

	//
	// Samoa.
	//
	CountryCodeTypeWS CountryCodeType = "WS"

	//
	// San Marino.
	//
	CountryCodeTypeSM CountryCodeType = "SM"

	//
	// Sao Tome and Principe.
	//
	CountryCodeTypeST CountryCodeType = "ST"

	//
	// Saudi Arabia.
	//
	CountryCodeTypeSA CountryCodeType = "SA"

	//
	// Senegal.
	//
	CountryCodeTypeSN CountryCodeType = "SN"

	//
	// Seychelles.
	//
	CountryCodeTypeSC CountryCodeType = "SC"

	//
	// Sierra Leone.
	//
	CountryCodeTypeSL CountryCodeType = "SL"

	//
	// Singapore.
	//
	CountryCodeTypeSG CountryCodeType = "SG"

	//
	// Slovakia.
	//
	CountryCodeTypeSK CountryCodeType = "SK"

	//
	// Slovenia.
	//
	CountryCodeTypeSI CountryCodeType = "SI"

	//
	// Solomon Islands.
	//
	CountryCodeTypeSB CountryCodeType = "SB"

	//
	// Somalia.
	//
	CountryCodeTypeSO CountryCodeType = "SO"

	//
	// South Africa.
	//
	CountryCodeTypeZA CountryCodeType = "ZA"

	//
	// South Georgia and the South Sandwich Islands.
	//
	CountryCodeTypeGS CountryCodeType = "GS"

	//
	// Spain.
	//
	CountryCodeTypeES CountryCodeType = "ES"

	//
	// Sri Lanka.
	//
	CountryCodeTypeLK CountryCodeType = "LK"

	//
	// Sudan.
	//
	CountryCodeTypeSD CountryCodeType = "SD"

	//
	// Suriname.
	//
	CountryCodeTypeSR CountryCodeType = "SR"

	//
	// Svalbard and Jan Mayen.
	//
	CountryCodeTypeSJ CountryCodeType = "SJ"

	//
	// Swaziland.
	//
	CountryCodeTypeSZ CountryCodeType = "SZ"

	//
	// Sweden.
	//
	CountryCodeTypeSE CountryCodeType = "SE"

	//
	// Switzerland.
	//
	CountryCodeTypeCH CountryCodeType = "CH"

	//
	// Syrian Arab Republic.
	//
	CountryCodeTypeSY CountryCodeType = "SY"

	//
	// Taiwan, Province of China.
	//
	CountryCodeTypeTW CountryCodeType = "TW"

	//
	// Tajikistan.
	//
	CountryCodeTypeTJ CountryCodeType = "TJ"

	//
	// Tanzania, United Republic of.
	//
	CountryCodeTypeTZ CountryCodeType = "TZ"

	//
	// Thailand.
	//
	CountryCodeTypeTH CountryCodeType = "TH"

	//
	// Togo.
	//
	CountryCodeTypeTG CountryCodeType = "TG"

	//
	// Tokelau.
	//
	CountryCodeTypeTK CountryCodeType = "TK"

	//
	// Tonga.
	//
	CountryCodeTypeTO CountryCodeType = "TO"

	//
	// Trinidad and Tobago.
	//
	CountryCodeTypeTT CountryCodeType = "TT"

	//
	// Tunisia.
	//
	CountryCodeTypeTN CountryCodeType = "TN"

	//
	// Turkey.
	//
	CountryCodeTypeTR CountryCodeType = "TR"

	//
	// Turkmenistan.
	//
	CountryCodeTypeTM CountryCodeType = "TM"

	//
	// Turks and Caicos Islands.
	//
	CountryCodeTypeTC CountryCodeType = "TC"

	//
	// Tuvalu.
	//
	CountryCodeTypeTV CountryCodeType = "TV"

	//
	// Uganda.
	//
	CountryCodeTypeUG CountryCodeType = "UG"

	//
	// Ukraine.
	//
	CountryCodeTypeUA CountryCodeType = "UA"

	//
	// United Arab Emirates.
	//
	CountryCodeTypeAE CountryCodeType = "AE"

	//
	// United Kingdom.
	//
	CountryCodeTypeGB CountryCodeType = "GB"

	//
	// United States.
	//
	CountryCodeTypeUS CountryCodeType = "US"

	//
	// NOTE: United States Minor Outlying Islands was
	// defined in the eBay list previously
	// but is no longer a viable option. This country
	// will remain on eBay country list for backward
	// compatibility. Use 'US' instead.
	//
	CountryCodeTypeUM CountryCodeType = "UM"

	//
	// Uruguay.
	//
	CountryCodeTypeUY CountryCodeType = "UY"

	//
	// Uzbekistan.
	//
	CountryCodeTypeUZ CountryCodeType = "UZ"

	//
	// Vanuatu.
	//
	CountryCodeTypeVU CountryCodeType = "VU"

	//
	// Venezuela.
	//
	CountryCodeTypeVE CountryCodeType = "VE"

	//
	// Vietnam.
	//
	CountryCodeTypeVN CountryCodeType = "VN"

	//
	// Virgin Islands, British.
	//
	CountryCodeTypeVG CountryCodeType = "VG"

	//
	// Virgin Islands, U.S.
	//
	CountryCodeTypeVI CountryCodeType = "VI"

	//
	// Wallis and Futuna.
	//
	CountryCodeTypeWF CountryCodeType = "WF"

	//
	// Western Sahara.
	//
	CountryCodeTypeEH CountryCodeType = "EH"

	//
	// Yemen.
	//
	CountryCodeTypeYE CountryCodeType = "YE"

	//
	// No longer in use. See RS for Serbia and ME for Montenegro.
	//
	CountryCodeTypeYU CountryCodeType = "YU"

	//
	// Zambia.
	//
	CountryCodeTypeZM CountryCodeType = "ZM"

	//
	// Zimbabwe.
	//
	CountryCodeTypeZW CountryCodeType = "ZW"

	//
	// NOTE: APO/FPO was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country code list for backward
	// compatibility.
	//
	CountryCodeTypeAA CountryCodeType = "AA"

	//
	// NOTE: Guernsey was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQM CountryCodeType = "QM"

	//
	// NOTE: Jan Mayen was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQN CountryCodeType = "QN"

	//
	// NOTE: Jersey was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQO CountryCodeType = "QO"

	CountryCodeTypeQP CountryCodeType = "QP"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	CountryCodeTypeCustomCode CountryCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b>
// This type is deprecated.
// </span>
// <br/><br/>
// Indicates the type of external product ID being used to identify a
// stock product.
//
type ExternalProductCodeType string

const (

	//
	// ExternalProductID.Value contains an ISBN value.
	// Required when you pass an ISBN as the external product ID.
	//
	ExternalProductCodeTypeISBN ExternalProductCodeType = "ISBN"

	//
	// ExternalProductID.Value contains a UPC value.
	// Required when you pass a UPC as the external product ID.
	//
	ExternalProductCodeTypeUPC ExternalProductCodeType = "UPC"

	//
	// ExternalProductID.Value contains an eBay catalog product ID.
	// Required when you pass an eBay product ID
	// as the external product ID.
	//
	ExternalProductCodeTypeProductID ExternalProductCodeType = "ProductID"

	//
	// ExternalProductID.Value contains an EAN value.
	// Required when you pass an EAN as the external product ID.
	//
	ExternalProductCodeTypeEAN ExternalProductCodeType = "EAN"

	//
	// ExternalProductID.Value contains a set of keywords that uniquely identify the product.
	// Only applicable when listing event ticket.
	// See the eBay Features Guide for information about valid
	// ticket keywords for an external product ID.
	// Required when you pass a set of keywords as the external product ID.
	//
	ExternalProductCodeTypeKeywords ExternalProductCodeType = "Keywords"

	//
	// Reserved for future use.
	//
	ExternalProductCodeTypeMPN ExternalProductCodeType = "MPN"

	//
	// Reserved for internal or future use
	//
	ExternalProductCodeTypeCustomCode ExternalProductCodeType = "CustomCode"
)

//
// Applicable to sites that support the Detailed Seller Ratings feature.
// The FeedbackRatingDetailCodeType is the list of areas for detailed seller ratings. When buyers leave an overall Feedback rating (positive, neutral, or negative) for a seller, they also can leave ratings in four areas: item as described, communication, shipping time, and charges for shipping and handling. Users retrieve detailed ratings as averages of the ratings left by buyers.
//
type FeedbackRatingDetailCodeType string

const (

	//
	// Detailed seller rating in the area of "item as described."
	//
	FeedbackRatingDetailCodeTypeItemAsDescribed FeedbackRatingDetailCodeType = "ItemAsDescribed"

	//
	// Detailed seller rating in the area of "communication."
	//
	FeedbackRatingDetailCodeTypeCommunication FeedbackRatingDetailCodeType = "Communication"

	//
	// Detailed seller rating in the area of "shipping time." Inapplicable to
	// motor vehicle items.
	//
	FeedbackRatingDetailCodeTypeShippingTime FeedbackRatingDetailCodeType = "ShippingTime"

	//
	// Detailed seller rating in the area of "charges for shipping and handling."
	// Inapplicable to motor vehicle items.
	//
	FeedbackRatingDetailCodeTypeShippingAndHandlingCharges FeedbackRatingDetailCodeType = "ShippingAndHandlingCharges"

	//
	// (out) Reserved for internal or future use.
	//
	FeedbackRatingDetailCodeTypeCustomCode FeedbackRatingDetailCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> <b>HalfItemConditionCodeType</b> and all of its enumeration values are deprecated along with the <b>FindHalfProducts</b> call.
// </span>
// Controls values for item condition, especially for Books catalog.
//
type HalfItemConditionCodeType string

const (

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfItemConditionCodeType</b> and all of its enumeration values are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	HalfItemConditionCodeTypeBrandNew HalfItemConditionCodeType = "BrandNew"

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfItemConditionCodeType</b> and all of its enumeration values are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	HalfItemConditionCodeTypeLikeNew HalfItemConditionCodeType = "LikeNew"

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfItemConditionCodeType</b> and all of its enumeration values are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	HalfItemConditionCodeTypeVeryGood HalfItemConditionCodeType = "VeryGood"

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfItemConditionCodeType</b> and all of its enumeration values are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	HalfItemConditionCodeTypeGood HalfItemConditionCodeType = "Good"

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfItemConditionCodeType</b> and all of its enumeration values are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	HalfItemConditionCodeTypeAcceptable HalfItemConditionCodeType = "Acceptable"

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfItemConditionCodeType</b> and all of its enumeration values are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	HalfItemConditionCodeTypeUsed HalfItemConditionCodeType = "Used"

	//
	// (out) Reserved for internal or future use
	//
	HalfItemConditionCodeTypeCustomCode HalfItemConditionCodeType = "CustomCode"
)

//
// This type is deprecated, as shipping insurance is no longer applicable or supported in eBay APIs.
//
type InsuranceOptionCodeType string

const (

	//
	// The seller offers the buyer the choice of paying
	// for shipping insurance or not.
	//
	InsuranceOptionCodeTypeOptional InsuranceOptionCodeType = "Optional"

	//
	// The seller requires that the buyer pay for
	// shipping insurance.
	//
	InsuranceOptionCodeTypeRequired InsuranceOptionCodeType = "Required"

	//
	// The seller does not offer shipping insurance to the buyer.
	//
	InsuranceOptionCodeTypeNotOffered InsuranceOptionCodeType = "NotOffered"

	//
	// The seller is not charging separately for shipping
	// insurance costs; any insurance is already included in the
	// base shipping cost.
	//
	InsuranceOptionCodeTypeIncludedInShippingHandling InsuranceOptionCodeType = "IncludedInShippingHandling"

	//
	// Shipping insurance is not offered as a separate option on the site
	// where the item is listed. (Some shipping services, such as
	// DE_InsuredExpressOrCourier, include insurance as part of the service.) If
	// another insurance option is specified in the listing request and the site does
	// not support shipping insurance as a separate option, eBay will reset the
	// insurance option to this value. At the time of this writing, this option is
	// only meaningful for the eBay Germany, Austria, and Switzerland sites.
	//
	InsuranceOptionCodeTypeNotOfferedOnSite InsuranceOptionCodeType = "NotOfferedOnSite"

	//
	// Placeholder value.
	//
	InsuranceOptionCodeTypeCustomCode InsuranceOptionCodeType = "CustomCode"
)

//
// This enumeration type contains the different states of an eBay listing in eBay's processing workflow. If a listing ends with a sale (or sales), eBay needs to update the sale details (e.g., total price and buyer/high bidder) and the Final Value Fee.
//
type ListingStatusCodeType string

const (

	//
	// This enumeration value indicates that the listing is still active. A multiple-quantity, fixed-price listing is considered active until the quantity available is '0', or the listing's scheduled end time has passed.
	//
	ListingStatusCodeTypeActive ListingStatusCodeType = "Active"

	//
	// This enumeration value indicates that the listing has ended and eBay has completed processing any sales/winning bids. The next state after 'Ended' is 'Completed'.
	//
	ListingStatusCodeTypeEnded ListingStatusCodeType = "Ended"

	//
	// This enumeration value indicates that the listing has ended and eBay has completed processing any sales/winning bids, and the calculation of the seller's Final Value Fee.
	//
	ListingStatusCodeTypeCompleted ListingStatusCodeType = "Completed"

	//
	// This enumeration is reserved for future use.
	//
	ListingStatusCodeTypeCustomCode ListingStatusCodeType = "CustomCode"
)

//
// This enumerated type contains the valid selling formats for eBay listings.
//
type ListingTypeCodeType string

const (

	//
	// This enumeration value may be returned if the listing format cannot be determined.
	//
	ListingTypeCodeTypeUnknown ListingTypeCodeType = "Unknown"

	//
	// This enumeration value is returned for auction listings. This value is returned for standard auction listings and for eBay Live Auctions (only available on the US site). For more information on eBay Live Auctions, see the <a
	// href="http://pages.ebay.com/help/buy/live-auctions.html">Participating in live auction events</a> help page.
	//
	ListingTypeCodeTypeChinese ListingTypeCodeType = "Chinese"

	//
	// This value is no longer applicable as Dutch auctions are deprecated.
	//
	ListingTypeCodeTypeDutch ListingTypeCodeType = "Dutch"

	//
	// This value is no longer applicable as the original eBay live auctions are deprecated.
	//
	ListingTypeCodeTypeLive ListingTypeCodeType = "Live"

	//
	// This value is no longer applicable as <code>Chinese</code> is the enumeration value that is returned for all auction listings.
	//
	ListingTypeCodeTypeAuction ListingTypeCodeType = "Auction"

	//
	// This enumeration value is returned for advertisements to solicit inquiries on listings such as real estate. Permits no
	// bidding on that item, service, or property. To express interest, a buyer fills
	// out a contact form that eBay forwards to the seller as a lead. This format
	// does not enable buyers and sellers to transact online through eBay, and eBay
	// Feedback is not available for ad format listings.
	//
	ListingTypeCodeTypeAdType ListingTypeCodeType = "AdType"

	//
	// This value is no longer applicable and has been replaced by the <code>FixedPriceItem</code> value.
	//
	ListingTypeCodeTypeStoresFixedPrice ListingTypeCodeType = "StoresFixedPrice"

	//
	// This enumeration value is returned for Second Chance Offers. A seller can propose a Second Chance Offer to a non-winning bidder on an ended listing. A seller can make an offer to a non-winning bidder when either the winning bidder has failed to pay for an item, or the seller has a duplicate item. Second Chance Offer items are on eBay, but they do not appear when browsing or searching listings. You need to already know the item ID in order to retrieve a Second Chance Offer.
	//
	ListingTypeCodeTypePersonalOffer ListingTypeCodeType = "PersonalOffer"

	//
	// This enumeration value is returned for fixed-price listings.
	//
	ListingTypeCodeTypeFixedPriceItem ListingTypeCodeType = "FixedPriceItem"

	//
	// This value is no longer applicable as the Half.com site has been shut down.
	//
	ListingTypeCodeTypeHalf ListingTypeCodeType = "Half"

	//
	// This enumeration value is returned for Lead Generation listings.
	//
	ListingTypeCodeTypeLeadGeneration ListingTypeCodeType = "LeadGeneration"

	//
	// This value is no longer applicable as eBay Express listings have been deprecated.
	//
	ListingTypeCodeTypeExpress ListingTypeCodeType = "Express"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	ListingTypeCodeTypeCustomCode ListingTypeCodeType = "CustomCode"
)

//
// This enumerated type defines the special price treatments that can be set up for listings enabled with the Minimum Advertised Price feature. The Minimum Advertised Price (MAP) feature is only supported on the eBay US site.
//
type MinimumAdvertisedPriceExposureCodeType string

const (

	//
	// This enumeration value indicates that the buyer must add the item to his/her cart before the discounted price can be displayed.
	//
	MinimumAdvertisedPriceExposureCodeTypePreCheckout MinimumAdvertisedPriceExposureCodeType = "PreCheckout"

	//
	// This enumeration value indicates that the discounted price will only be shown to the buyer once the buyer reaches the eBay Checkout page.
	//
	MinimumAdvertisedPriceExposureCodeTypeDuringCheckout MinimumAdvertisedPriceExposureCodeType = "DuringCheckout"

	//
	// This enumeration value indicates that the discounted price is shown on the View Item page, and the buyer is not required to add the item to his/her cart or click Buy button to view the discounted price.
	//
	MinimumAdvertisedPriceExposureCodeTypeNone MinimumAdvertisedPriceExposureCodeType = "None"

	//
	// Reserved for future use.
	//
	MinimumAdvertisedPriceExposureCodeTypeCustomCode MinimumAdvertisedPriceExposureCodeType = "CustomCode"
)

//
// Defines the type of treatment applied to a discounted item,
// either Strikethrough Pricing or Minimum Advertised Price.
//
type PricingTreatmentCodeType string

const (

	//
	// This enumeration value indicates that Strikethrough Pricing is enabled for the order line item. If this value is returned, the price in the <b>OriginalRetailPrice</b> field will be crossed out in the View Item page.
	//
	PricingTreatmentCodeTypeSTP PricingTreatmentCodeType = "STP"

	//
	// This enumeration value indicates that Minimum Advertised Pricing is enabled for the order line item. If this value is returned, the minimum advertised price is found in the <b>MinimumAdvertisedPrice</b> field.
	//
	PricingTreatmentCodeTypeMAP PricingTreatmentCodeType = "MAP"

	//
	// This enumeration value indicates that neither Strikethrough Pricing or Minimum Advertised Pricing is enabled for the order line item.
	//
	PricingTreatmentCodeTypeNone PricingTreatmentCodeType = "None"

	//
	// Reserved for future use.
	//
	PricingTreatmentCodeTypeCustomCode PricingTreatmentCodeType = "CustomCode"
)

//
// This enumerated type defines the different type of product identifiers that are available to identify a product. Product identifiers are returned for order line items and eBay Catalog products, and these identifier types and their values can also be used by the <b>FindProducts</b> call as a search filter. These enumeration values are used as attribute values for the <b>ProductID</b> field in Shopping API calls.
//
type ProductIDCodeType string

const (

	//
	// This enumeration value indicates the product identifier type is an International Standard Book Number. ISBN values can be 10 characters (ISBN-10) or 13 characters (ISBN-13) in length, and they identify books.
	//
	ProductIDCodeTypeISBN ProductIDCodeType = "ISBN"

	//
	// This enumeration value indicates the product identifier type is an International Article Number (also known as European Article Number). EAN values are typically 13 digits in length, but some use only eight digits. EAN identify a wide variety of products.
	//
	ProductIDCodeTypeEAN ProductIDCodeType = "EAN"

	//
	// This enumeration value indicates the product identifier type is a Universal Product Code. UPC values are 12 digits in length. UPC values identify a wide variety of products, and are typically used in the US and Canada.
	//
	ProductIDCodeTypeUPC ProductIDCodeType = "UPC"

	//
	// This enumeration value indicates the product identifier type is a Manufacturer Part Number. Unlike ISBNs, EANs, and UPCs, an MPN value is not based on an international standard, but is defined by the seller/manufacturer of the product. Technically, there is no maximum length for an MPN, but eBay actually enforces a 65-character limit for MPN values.
	//
	ProductIDCodeTypeMPN ProductIDCodeType = "MPN"

	//
	// This value is no longer applicable. In a <b>FindProducts</b> call, if you want to search for a product using a query string, use the <b>QueryKeywords</b> field in the call request instead.
	//
	ProductIDCodeTypeKeywords ProductIDCodeType = "Keywords"

	//
	// This value is no longer applicable.
	//
	ProductIDCodeTypeCatalogItem ProductIDCodeType = "CatalogItem"

	//
	// This enumeration value indicates the product identifier type is an eBay Catalog product ID. EPID is a commonly-used acronymn for an eBay Catalog product ID.
	//
	ProductIDCodeTypeReference ProductIDCodeType = "Reference"

	//
	// Reserved for internal or future use.
	//
	ProductIDCodeTypeCustomCode ProductIDCodeType = "CustomCode"
)

//
// This enumerated type defines the sort values that can be used to control the order of eBay Catalog products that are returned with a <b>FindProducts</b> call.
//
type ProductSortCodeType string

const (

	//
	// This enumeration value is input into the <b>ProductSort</b> field if the user would like the eBay Catalog products to be sorted by product popularity (as determined by eBay). This is also the default value, so if the <b>ProductSort</b> field is omitted, eBay Catalog products will be sorted by product popularity by default.
	//
	ProductSortCodeTypePopularity ProductSortCodeType = "Popularity"

	//
	// This enumeration value is input into the <b>ProductSort</b> field if the user would like the eBay Catalog products to be sorted by product rating.
	//
	ProductSortCodeTypeRating ProductSortCodeType = "Rating"

	//
	// This enumeration value is input into the <b>ProductSort</b> field if the user would like the eBay Catalog products to be sorted according to the number of reviews for that product on eBay.
	//
	ProductSortCodeTypeReviewCount ProductSortCodeType = "ReviewCount"

	//
	// This enumeration value is input into the <b>ProductSort</b> field if the user would like the eBay Catalog products to be sorted according to the number of of active listings associated with each product.
	//
	ProductSortCodeTypeItemCount ProductSortCodeType = "ItemCount"

	//
	// This enumeration value is input into the <b>ProductSort</b> field if the user would like the eBay Catalog products to be sorted according to the product title.
	//
	ProductSortCodeTypeTitle ProductSortCodeType = "Title"

	//
	// Reserved for values that are not available in the version of the schema
	// you are using. This means if in a newer version of the API eBay adds a new value to <b>ProductSortCodeList</b> type and the request was using a <i>lower</i> version, 'CustomCode' is returned instead of the new value.
	//
	ProductSortCodeTypeCustomCode ProductSortCodeType = "CustomCode"
)

//
// This enumerated type defines the different possible states of an eBay Catalog product. This type is used by the <b>ProductState</b> field returned in the <b>FindProducts</b> call.
//
type ProductStateCodeType string

const (

	//
	// This enumeration value is returned if the product details have been updated. If your application currently uses the eBay Catalog product for listing or searching, it is recommended that you check to make sure the product data still meets your needs.
	//
	ProductStateCodeTypeUpdate ProductStateCodeType = "Update"

	//
	// This enumeration value is returned if the product has been mapped to a newer product in the catalog that eBay is currently using, and its details have been updated based on the new catalog data. The product reference ID (or EPID) remains the same (but the longer product ID string may have changed). If your application currently uses the product for searching, it is recommended that you check to make sure the product data still meets your needs.
	//
	ProductStateCodeTypeUpdateMajor ProductStateCodeType = "UpdateMajor"

	//
	// This enumeration value is returned if the product was previously available in an earlier catalog, but it has not been mapped to a product in the catalog that eBay is currently using. It can still be used for searching, but it may contain fewer details than other products. If your application currently uses the product for searching, it is recommended that you check to make sure the product data still meets your needs.
	//
	ProductStateCodeTypeUpdateNoDetails ProductStateCodeType = "UpdateNoDetails"

	//
	// This enumeration value is returned if some information in this product is scheduled to be merged into another product in the catalog that eBay is currently using. This product may be removed from the system at any time. If your application currently uses the product for searching, it is recommended that you update your application to use a product that is not scheduled to be merged or deleted.
	//
	ProductStateCodeTypeMerge ProductStateCodeType = "Merge"

	//
	// This enumeration value is returned if the product is marked for deletion, and it will not be mapped to another product. If your application currently uses the product for searching, it is recommended that you update your application to use a product that is not scheduled to be merged or deleted.
	//
	ProductStateCodeTypeDelete ProductStateCodeType = "Delete"

	//
	// Reserved for internal or future use.
	//
	ProductStateCodeTypeCustomCode ProductStateCodeType = "CustomCode"
)

//
// eBay allows sellers to control messaging on the View Item page about the quantity available for an order line item. <b>QuantityAvailableHintCodeType</b> is an enumerated type that indicates the quantity message that the seller has decided to display on the View Item page.
//
type QuantityAvailableHintCodeType string

const (

	//
	// If this enumeration value is returned, the message on the View Item page is "Limited quantity available", based on a quantity threshold.
	//
	QuantityAvailableHintCodeTypeLimited QuantityAvailableHintCodeType = "Limited"

	//
	// If this enumeration value is returned, the message on the View Item page is "More than 10 available", as long as there is more than a quantity of 10 order line items available.
	//
	QuantityAvailableHintCodeTypeMoreThan QuantityAvailableHintCodeType = "MoreThan"

	//
	// Reserved for internal or future use.
	//
	QuantityAvailableHintCodeTypeCustomCode QuantityAvailableHintCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> <b>ReviewSortCodeType</b> and all of its enumeration values are deprecated along with the <b>FindReviewsAndGuides</b> call.
// </span>
//
//
type ReviewSortCodeType string

const (

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewSortCodeType</b> and its enumeration values are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	ReviewSortCodeTypeCreationTime ReviewSortCodeType = "CreationTime"

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewSortCodeType</b> and its enumeration values are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	// new value.
	//
	ReviewSortCodeTypeCustomCode ReviewSortCodeType = "CustomCode"
)

//
// Enumerated type that contains the different shipping cost models that can be offered by the seller for domestic and international shipping destinations.
//
type ShippingTypeCodeType string

const (

	//
	// This enumeration type indicates that the seller charges flat rates for both  domestic or international shipping locations (if selller ships internationally). With flat-rate shipping, the seller specifies up front how much it will cost to ship an item to domestic or international locations.  Sellers usually use the <b>Shipping rate tables</b> tool in My eBay to create/set domestic shipping rates by region, and create/set international shipping rates by geographical region/continent or individual countries.
	// <br/><br/>
	// Many shipping carriers offer flat-rate shipping services that charge sellers a flat rate as long as the item fits in the flat-rate box or envelope. However, even with these flat-rate shipping services, the shipping carrier may still have some restrictions around weight and types of items that can be shipped in those boxes or envelopes.
	//
	ShippingTypeCodeTypeFlat ShippingTypeCodeType = "Flat"

	//
	// This enumeration type indicates that the seller uses calculated shipping for both  domestic or international shipping locations (if selller ships internationally). With calculated shipping, the seller is relying on the shipping carrier and eBay to calculate the shipping cost based on the buyer's location and the shipping carrier's typical cost to ship the item to that location using that particular shipping service.  specifies up front how much it will cost to ship an item to domestic or international locations.  Sellers usually use the <b>Shipping rate tables</b> tool in My eBay to create/set domestic shipping rates by region, and create/set international shipping rates by geographical region/continent or individual countries.
	// <br/><br/>
	// If the seller uses calculated shipping, a prospective buyer can go to the View Item page and use the shipping calculator tool to get the shipping cost based on the selected shipping service and their mailing address.
	// <br/><br/>
	// With calculated shipping, the seller must also provide the package dimensions and total weight (with the item in package) in order for the shipping carrier and eBay to calculate accurate shipping costs.
	//
	ShippingTypeCodeTypeCalculated ShippingTypeCodeType = "Calculated"

	//
	// This enumeration type indicates that the seller uses freight shipping for both  domestic shipping locations. Freight shipping is usually required for large, bulky items over 150 pounds. Freight shipping is not available for international shipping.
	// <br/><br/>
	// With freight shipping, eBay (and eBay's freight shipping partner, FreightQuote) calculate the freight shipping cost based on the buyer's location.
	// <br/><br/>
	// It is also possible that the seller can use their own third-party freight shipping provider, and if this is the case, the seller is expected to provide the price and details of the freight shipping in the listing description.
	//
	ShippingTypeCodeTypeFreight ShippingTypeCodeType = "Freight"

	//
	// This value is no longer applicable, as 'Free' is not a cost model. To see if a particular shipping service is free, the user can look at the <b>ShippingServiceCost</b> field for a shipping service.
	//
	ShippingTypeCodeTypeFree ShippingTypeCodeType = "Free"

	//
	// This enumeration type may be returned if the seller has not specified the shipping cost model.
	//
	ShippingTypeCodeTypeNotSpecified ShippingTypeCodeType = "NotSpecified"

	//
	// This enumeration type may be returned if the seller uses flat-rate shipping for domestic shipping locations, but calculated shipping for international shipping locations.
	//
	ShippingTypeCodeTypeFlatDomesticCalculatedInternational ShippingTypeCodeType = "FlatDomesticCalculatedInternational"

	//
	// This enumeration type may be returned if the seller uses calculated shipping for domestic shipping locations, but flat-rate shipping for international shipping locations.
	//
	ShippingTypeCodeTypeCalculatedDomesticFlatInternational ShippingTypeCodeType = "CalculatedDomesticFlatInternational"

	//
	// Placeholder value. See
	// <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#token">token</a>.
	//
	ShippingTypeCodeTypeCustomCode ShippingTypeCodeType = "CustomCode"
)

//
// An eBay ID that uniquely identifies a user.
//
type UserIDType string

type FindHalfProductsRequest FindHalfProductsRequestType

type FindHalfProductsResponse FindHalfProductsResponseType

type FindPopularItemsRequest FindPopularItemsRequestType

type FindPopularItemsResponse FindPopularItemsResponseType

type FindPopularSearchesRequest FindPopularSearchesRequestType

type FindPopularSearchesResponse FindPopularSearchesResponseType

type FindProductsRequest FindProductsRequestType

type FindProductsResponse FindProductsResponseType

type FindReviewsAndGuidesRequest FindReviewsAndGuidesRequestType

type FindReviewsAndGuidesResponse FindReviewsAndGuidesResponseType

type GetCategoryInfoRequest GetCategoryInfoRequestType

type GetCategoryInfoResponse GetCategoryInfoResponseType

type GetItemStatusRequest GetItemStatusRequestType

type GetItemStatusResponse GetItemStatusResponseType

type GetMultipleItemsRequest GetMultipleItemsRequestType

type GetMultipleItemsResponse GetMultipleItemsResponseType

type GetShippingCostsRequest GetShippingCostsRequestType

type GetShippingCostsResponse GetShippingCostsResponseType

type GetSingleItemRequest GetSingleItemRequestType

type GetSingleItemResponse GetSingleItemResponseType

type GetUserProfileRequest GetUserProfileRequestType

type GetUserProfileResponse GetUserProfileResponseType

type GeteBayTimeRequest GeteBayTimeRequestType

type GeteBayTimeResponse GeteBayTimeResponseType

type AbstractRequestType struct {

	//
	// If you pass a value in MessageID in a request,
	// we'll return the same value in CorrelationID in the response.
	// If you're making a lot of calls, you can use this for tracking that a
	// response is returned for every request and to match
	// particular responses to particular requests. (In this case, specify
	// a different value for each request.) You can specify any value
	// that is useful to you.
	//
	MessageID string `xml:"MessageID,omitempty"`
}

type AbstractResponseType struct {

	//
	// This value represents the date and time when eBay processed the
	// request. The time zone of this value is <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/types/simpleTypes.html#dateTime">GMT</a>
	// and the format is the
	// ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ).
	// See the "dateTime" type for information about this
	// time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"Timestamp,omitempty"`

	//
	// A token representing the application-level acknowledgement code that indicates the response status (e.g., success). The <b>AckCodeType</b> list specifies the possible values for the <b>Ack</b> field.
	//
	Ack *AckCodeType `xml:"Ack,omitempty"`

	//
	// A list of application-level errors or warnings (if any) that were raised
	// when eBay processed the request. <br>
	// <br>
	// Application-level errors occur due to
	// problems with business-level data on the client side or on the eBay
	// server side. For example, an error would occur if the request contains
	// an invalid combination of fields, or it is missing a required field,
	// or the value of the field is not recognized. An error could also occur
	// if eBay encountered a problem in our internal business logic while
	// processing the request.<br>
	// <br>
	// Only returned if there were warnings or errors.
	//
	Errors []*ErrorType `xml:"Errors,omitempty"`

	//
	// This refers to the particular software build that eBay used when
	// processing the request and generating the response. This includes the
	// version number plus additional information. eBay Developer Support may
	// request the build information when helping you resolve technical issues.
	//
	Build string `xml:"Build,omitempty"`

	//
	// The release version that eBay used to process the request.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// This is usually the latest release version, as specified in the
	// release notes. (eBay releases the API to international sites
	// about a week after we release it to the US site.) </span><br>
	// <br>
	// If a field in the response returns the token "CustomCode", it usually
	// means that the field is a code type (a token or enumeration),
	// and that in your request URL (or HTTP header) you specified a
	// version that is older than the version in which the token was added
	// to the call.
	//
	Version string `xml:"Version,omitempty"`

	//
	// If you pass a value in MessageID in a request, we will return the same
	// value in CorrelationID in the response. You can use this for tracking
	// that a response is returned for every request and to match particular
	// responses to particular requests. Only returned if MessageID was used.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`
}

type AmountType struct {
	Value float64

	//
	// Currency in which the monetary amount is specified.
	// See CurrencyCodeType for applicable values.
	//
	CurrencyID *CurrencyCodeType `xml:"currencyID,attr,omitempty"`
}

type ErrorParameterType struct {

	//
	// This is the value of the request parameter noted in the <b>ParamID</b> attribute. So, if the <b>ParamID</b> value was <b>ItemID</b>, the value in this field would be the actual value of that <b>ItemID</b>.
	//
	Value string `xml:"Value,omitempty"`

	//
	// This is name of the request parameter that has been pinpointed as the reason why the error or warning was triggered. This value might be <b>ItemID</b>, in which case the identifier of that item would be returned in the <b>Value</b> field.
	//
	ParamID string `xml:"ParamID,attr,omitempty"`
}

type ErrorType struct {

	//
	// A brief description of the condition that raised the error.
	//
	ShortMessage string `xml:"ShortMessage,omitempty"`

	//
	// A more detailed description of the condition that raised the error.
	//
	LongMessage string `xml:"LongMessage,omitempty"`

	//
	// A unique code that identifies the particular error condition that occurred.
	// Your application can use error codes as identifiers
	// in your customized error-handling algorithms.
	//
	ErrorCode string `xml:"ErrorCode,omitempty"`

	//
	// This field is not currently in use for eBay Shopping API.
	// Indicates whether the error message text is intended to be displayed to
	// an end user or intended only to be parsed by the application.
	// If true or not present (the default), the message text is intended for the end user. If false, the message text is intended for
	// the application, and the application should translate the error into a more appropriate message.
	//
	UserDisplayHint bool `xml:"UserDisplayHint,omitempty"`

	//
	// Indicates whether the error caused the request to fail.<br>
	// <br>
	// If the request fails and the source of the problem is within the
	// application (such as a missing required element), please change the
	// application before you  retry the request. If the problem is due to
	// end-user input data, please alert the end-user to the problem and
	// provide the means for them to correct the data. Once the problem in the
	// application or data is resolved, you can attempt to re-send the request
	// to eBay.<br>
	// <br>
	// If the source of the problem is on eBay's side, you can retry the
	// request as-is a reasonable number of times (eBay recommends twice).
	// If the error persists, contact Developer Technical Support. Once the
	// problem has been resolved, the request may be resent in its original
	// form.<br>
	// <br>
	// When a warning occurs, the error is returned in addition to the business
	// data. In this case, you do not need to retry the request (as the
	// original request was successful). However, depending on the cause or
	// nature of the warning, you might need to contact either the end user or
	// eBay to effect a long term solution to the problem to prevent it from
	// reoccurring in the future.
	//
	SeverityCode *SeverityCodeType `xml:"SeverityCode,omitempty"`

	//
	// Some warning and error messages return one or more variables that
	// contain contextual information about the error. This is often the
	// field or value that triggered the error.
	// You can usually predict where these will
	// occur by looking at the "replaceable_value" indicators in our
	// Errors by Number page.
	//
	ErrorParameters []*ErrorParameterType `xml:"ErrorParameters,omitempty"`

	//
	// API errors are divided between two classes: system errors and request errors.
	//
	ErrorClassification *ErrorClassificationCodeType `xml:"ErrorClassification,omitempty"`
}

type SimpleUserType struct {

	//
	// The unique identifier of the eBay user. An eBay user ID is unique across all eBay marketplaces.
	// <br />
	// <br />
	// This field is generally always returned, but it may be masked depending on the situation. For example, if anyone other than the seller of the listing runs a <b>GetItemStatus</b> call on an active auction listing with one or or bids, the <b>UserID</b> value will be masked something like this - <code>b***r</code>.
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// This boolean value indicates whether or not the eBay user has chosen to make their Feedback Profile private in My eBay. A private Feedback Profile only means that individual Feedback comments are hidden, but other Feedback statistics will still be displayed, including the total Feedback score and the Positive Feedback Percentage.
	// <br />
	// <br />
	// Sellers on eBay marketplaces do not have the option of making their Feedback Profile private, and they will be blocked from listing if they try to list items with a private Feedback Profile.
	//
	FeedbackPrivate bool `xml:"FeedbackPrivate,omitempty"`

	//
	// This enumeration value indicates the eBay user's Feedback Rating Star. A different colored star is associated with each Feedback Score range. For more details on the Feedback Score ranges (and colored stars associated with each range), see <b>FeedbackRatingStarCodeType</b>.
	//
	FeedbackRatingStar *FeedbackRatingStarCodeType `xml:"FeedbackRatingStar,omitempty"`

	//
	// The aggregate Feedback score of an eBay user. A user's Feedback score is determined by the total number of Positive Feedback ratings minus the total number of Negative Feedback ratings the user has received. Any Neutral Feedback ratings do not affect the Feedback Score.
	// <br>
	// <br>
	// A user's Feedback Score is a quantitative expression of the desirability of dealing with that user as a buyer or a seller. A buyer can leave Positive, Neutral, or Negative Feedback for the seller, but a seller can only leave Positive Feedback for the buyer.
	//
	FeedbackScore int32 `xml:"FeedbackScore,omitempty"`

	//
	// Indicates whether eBay has made this user's information anonymous.
	// <br>
	// <br>
	// If <code>true</code>, certain other fields about this user are not returned, or their values are masked.
	//
	UserAnonymized bool `xml:"UserAnonymized,omitempty"`

	//
	// If 'true', identifies a new user who has been a registered eBay user for 30 days or less. Always 'false' after the user has been registered for more than 30 days.
	//
	NewUser bool `xml:"NewUser,omitempty"`

	//
	// This timestamp indicates when the user originally registered with eBay. If a bidder's user information is made anonymous, the value -99 is returned.
	//
	RegistrationDate time.Time `xml:"RegistrationDate,omitempty"`

	//
	// The enumeration value returned in this field indicates the eBay site on which the user first created an eBay account. If a bidder's user information is
	// made anonymous, the value -99 is returned.
	//
	RegistrationSite *SiteCodeType `xml:"RegistrationSite,omitempty"`

	//
	// The enumeration value returned in this field indicates the current status of the eBay user. A value of <code>Confirmed</code> is typically returned for an active eBay user.
	//
	Status *UserStatusCodeType `xml:"Status,omitempty"`

	//
	// This enumeration value indicates the type of seller account held by the eBay user - a <code>Private</code> (non-business) account or a <code>Commercial</code> (business) account.
	//
	SellerBusinessType *SellerBusinessCodeType `xml:"SellerBusinessType,omitempty"`

	//
	// The URL of the seller's eBay Store page. This field is only applicable to eBay sellers that have eBay Store subscriptions.
	//
	StoreURL *AnyURI `xml:"StoreURL,omitempty"`

	//
	// The name of the seller's eBay Store. This field is only applicable to eBay sellers that have eBay Store subscriptions.
	//
	StoreName string `xml:"StoreName,omitempty"`

	//
	// The URL for an eBay marketplace page that displays a list of the seller's active listings.
	//
	SellerItemsURL *AnyURI `xml:"SellerItemsURL,omitempty"`

	//
	// The URL to the eBay About Me page. Only returned if one exists for the eBay user.
	//
	AboutMeURL *AnyURI `xml:"AboutMeURL,omitempty"`

	//
	// The URL to the eBay user's home page (formerly called 'My World'). The home page shows Feedback statistics and has multiple links, such as a link to the seller's eBay Store and a link to the seller's other items.
	//
	MyWorldURL *AnyURI `xml:"MyWorldURL,omitempty"`

	//
	// The URL to the small version of the eBay user's profile image/logo. This field is only returned if available.
	//
	MyWorldSmallImage *AnyURI `xml:"MyWorldSmallImage,omitempty"`

	//
	// The URL to the large version of the eBay user's profile image/logo. This field is only returned if available.
	//
	MyWorldLargeImage *AnyURI `xml:"MyWorldLargeImage,omitempty"`

	//
	// The URL to a page where it shows any product reviews/ratings that have been given by the eBay user.
	//
	ReviewsAndGuidesURL *AnyURI `xml:"ReviewsAndGuidesURL,omitempty"`

	//
	// The URL to the eBay user's Feedback Profile page, which has full details of the eBay user's Feedback History, including Feedback Ratings, Feedback Comments, and Detailed Seller Ratings.
	//
	FeedbackDetailsURL *AnyURI `xml:"FeedbackDetailsURL,omitempty"`

	//
	// This value is the percentage value of a seller's Feedback entries that were marked by buyer's as 'Positive'. This number is calculated by dividing the total number of Feedback entries left for the seller (Positive, Neutral, and Negative) by only the seller's 'Positive' Feedback ratings.
	//
	PositiveFeedbackPercent float32 `xml:"PositiveFeedbackPercent,omitempty"`

	//
	// The enumerated value in this field indicates the current Power Seller level of the eBay user. There are five Power Seller tiers, and each tier is based on average monthly sales. Available benefits and services to the seller vary for each tier.
	// <br/><br/>
	// This field is only returned if the eBay user is a Power Seller, and is not returned at all on some eBay marketplaces.
	//
	SellerLevel *SellerLevelCodeType `xml:"SellerLevel,omitempty"`

	//
	// This boolean field is only returned if <code>true</code>, and indicates if the eBay user has Top-Rated Seller status. Top-Rated sellers are eligible to get the 'Top-Rated Plus' badge on all of their active listings (meeting Top-Rated Plus requirements), and qualify for other benefits such as Final Value Fee discounts and increased visibility in search results.
	//
	TopRatedSeller bool `xml:"TopRatedSeller,omitempty"`
}

type AddressType struct {

	//
	// User's name for the address.
	// <br>
	//
	Name string `xml:"Name,omitempty"`

	//
	// This field is deprecated and no longer returned.
	//
	Street string `xml:"Street,omitempty"`

	//
	// The first line of the user's street address.
	// <br>
	//
	Street1 string `xml:"Street1,omitempty"`

	//
	// The second line of the user's street address (such as an apartment number or suite number). Returned if the user specified a second street value for their address. In case of <b>Item.SellerContactDetails</b>, <b>Street2</b> can be used to provide City, Address, State, and Zip code (if applicable).
	// <br>
	//
	Street2 string `xml:"Street2,omitempty"`

	//
	// The name of the user's city.
	// <br>
	//
	CityName string `xml:"CityName,omitempty"`

	//
	// This field is deprecated and no longer returned.
	//
	County string `xml:"County,omitempty"`

	//
	// The state or province of the user's address. Whether it's a state or a province will depend on the region and/or country.
	// <br>
	//
	StateOrProvince string `xml:"StateOrProvince,omitempty"`

	//
	// The name of the country associated with the Business Seller's address.
	// Also applicable to Half.com (for GetOrders).
	//
	CountryName string `xml:"CountryName,omitempty"`

	//
	// User's primary phone number. This may return a value of
	// <code>Invalid Request</code> if you are not authorized to see the
	// user's phone number.
	// <br/><br/>
	// In the US, the area code (3 digits), the prefix (3 digits), the line number (4
	// digits), and phone extension (if specified by the user) are returned in this field.
	// The extension can be one or more digits. Non-breaking spaces are used as delimiters
	// between these phone number components.
	// <br>
	//
	Phone string `xml:"Phone,omitempty"`

	//
	// This field is no deprecated.
	//
	PhoneCountryPrefix string `xml:"PhoneCountryPrefix,omitempty"`

	//
	// This field is no deprecated.
	//
	PhoneAreaOrCityCode string `xml:"PhoneAreaOrCityCode,omitempty"`

	//
	// This field is no deprecated.
	//
	PhoneLocalNumber string `xml:"PhoneLocalNumber,omitempty"`

	//
	// This field is no deprecated.
	//
	Phone2CountryPrefix string `xml:"Phone2CountryPrefix,omitempty"`

	//
	// This field is no deprecated.
	//
	Phone2AreaOrCityCode string `xml:"Phone2AreaOrCityCode,omitempty"`

	//
	// This field is no deprecated.
	//
	Phone2LocalNumber string `xml:"Phone2LocalNumber,omitempty"`

	//
	// The postal code asssociated with the Business Seller's address.
	// <br>
	//
	PostalCode string `xml:"PostalCode,omitempty"`

	//
	// This field is no deprecated.
	//
	AddressID string `xml:"AddressID,omitempty"`

	//
	// This field is no deprecated.
	//
	ExternalAddressID string `xml:"ExternalAddressID,omitempty"`

	//
	// This field is no deprecated.
	//
	InternationalName string `xml:"InternationalName,omitempty"`

	//
	// This field is no deprecated.
	//
	InternationalStateAndCity string `xml:"InternationalStateAndCity,omitempty"`

	//
	// This field is no deprecated.
	//
	InternationalStreet string `xml:"InternationalStreet,omitempty"`

	//
	// The Business Seller's company name. This field is only returned if defined and available.
	//
	CompanyName string `xml:"CompanyName,omitempty"`

	//
	// The first name of the Business Seller.
	//
	FirstName string `xml:"FirstName,omitempty"`

	//
	// The last name of the Business Seller.
	//
	LastName string `xml:"LastName,omitempty"`
}

type AverageRatingDetailsType struct {

	//
	// The value shown in this field indicates the Detailed Seller Rating area. The corresponding <b>Rating</b> value is the average rating that the seller has received for this DSR area, and the <b>RatingCount</b> value is the total number of buyer ratings that the seller has received in this DSR area. When buyers leave an overall Feedback rating (positive, neutral, or negative) for a seller, they also can leave ratings in four areas: item as described, communication, shipping time, and charges for shipping and handling.
	//
	RatingDetail *FeedbackRatingDetailCodeType `xml:"RatingDetail,omitempty"`

	//
	// This value is the seller's average rating (given by buyers) for the DSR area noted in the corresponding <b>RatingDetail</b> field.
	//
	Rating float64 `xml:"Rating,omitempty"`

	//
	// This value is the total count of buyer ratings given for the DSR area noted in the corresponding <b>RatingDetail</b> field.
	//
	RatingCount int64 `xml:"RatingCount,omitempty"`
}

type BusinessSellerDetailsType struct {

	//
	// This field shows the address on file for the Business Seller.
	//
	Address *AddressType `xml:"Address,omitempty"`

	//
	// This field shows the Fax number on file for the Business Seller. This field is only returned if known and available.
	//
	Fax string `xml:"Fax,omitempty"`

	//
	// This field shows the email address on file for the Business Seller.
	//
	Email string `xml:"Email,omitempty"`

	//
	// This field shows any additional contact for the Business Seller in free-form text. This field is only returned if known and available.
	//
	AdditionalContactInformation string `xml:"AdditionalContactInformation,omitempty"`

	//
	// This field shows the Trade Registration Number for the Business Seller.
	//
	TradeRegistrationNumber string `xml:"TradeRegistrationNumber,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the Business Seller provides legal invoices to buyers.
	//
	LegalInvoice bool `xml:"LegalInvoice,omitempty"`

	//
	// This free-form text field provides the Business Seller's terms and conditions for doing business. This field is returned if available.
	//
	TermsAndConditions string `xml:"TermsAndConditions,omitempty"`

	//
	// This container provides Value-Added Tax (VAT) details for the Business Seller, including the seller's VAT ID and the VAT percentage rate applicable to the item. VAT is similar to a sales and/or consumption tax, and it is only applicable to sellers selling on European sites.
	//
	VATDetails *VATDetailsType `xml:"VATDetails,omitempty"`
}

type BuyingGuideDetailsType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideDetailsType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	BuyingGuide []*BuyingGuideType `xml:"BuyingGuide,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideDetailsType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	BuyingGuideHub *AnyURI `xml:"BuyingGuideHub,omitempty"`
}

type BuyingGuideType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	Name string `xml:"Name,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	Title string `xml:"Title,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	Text string `xml:"Text,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>BuyingGuideType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	UserID string `xml:"UserID,omitempty"`
}

type CatalogProductType struct {

	//
	// The name of the eBay category-related domain most closely associated with the catalog product. If the catalog product is associated with multiple category-related domains, eBay returns the most applicable domain (as determined by eBay).
	// <br>
	// <br>
	// This field is only returned if a catalog product is associated with one or more category-related domains, and if eBay has this data available.
	// <br>
	//
	DomainName string `xml:"DomainName,omitempty"`

	//
	// The fully-qualified URL to the eBay product page is displayed in this field. The user can grab this URL, paste it in a browser, and view the product page on the eBay marketplace. Note that some product pages will have active listings associated with them, and some will not.
	// <br>
	// <br>
	// Applications can include this URL as a link in product search results,
	// so that end users can view additional descriptive details about
	// the product.
	//
	DetailsURL *AnyURI `xml:"DetailsURL,omitempty"`

	//
	// If this field is returned as <code>true</code>, there is a stock photo associated with the catalog product, and the URL to this image file is shown in the <b>StockPhotoURL</b> field. If this field is returned as <code>false</code>, there is no stock photo associated with the catalog product.
	// <br>
	// <br>
	// Sellers should be aware that if no stock photo exists for a catalog product, the seller must add at least one of their own photos when creating a listing (based on that catalog product), as all eBay listings must have at least one image.
	// <br>
	// <br>
	// An application incorporating a graphical user interface can use this flag to determine when to hide customized stock photo widgets.
	// <br>
	// <br>
	// This field is always returned in each <b>Product</b> container.
	//
	DisplayStockPhotos bool `xml:"DisplayStockPhotos,omitempty"`

	//
	// At least one <b>ProductID</b> field is always returned with each <b>Product</b> container, as this value is the unique identifier (ePID) of the eBay catalog product. Any Global Trade Item Numbers (such as ISBN, EAN, UPC, or MPN) are also returned if defined in the catalog product record.  The field's <b>type</b> attribute indicates the product identifier type. For ePIDs, the <b>type</b> attribute value is <code>Reference</code>.  The ISBN, EAN, and UPC values can be useful as keys
	// if your application is comparing products across different sites.
	// <br>
	// <br>
	// See the <a href="types/ProductIDCodeType.html">ProductIDCodeType</a> definition to view the applicable enumeration values for the lt;b>typelt;/b> attribute.
	//
	ProductID []*ProductIDType `xml:"ProductID,omitempty"`

	//
	// This field is no longer applicable since the <b>FindProducts</b> call no longer retrieves any data on active listings associated with the retrieved catalog products.
	//
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// This array contains a list of Item Specifics (also referred to as Product Asepcts) defined for the catalog product. Item Specifics provide desciptive details of an item in a structured manner.
	// <br>
	// <br>
	// Scanning Item Specific name-value pairs for catalog products in the response can be useful if the user would like to expand the query string to return more precise results. For example, if a user specified 'iPhone 8' as the query string in the call request, but after seeing too many catalog products of phones in different colors, and with different storage capacities in the response, the user could run another call, but expand the query string to 'iphone 8 256GB Gray'. In this case, the user would only see iPhone 8s that are gray and have 256 GB of storage capacity.
	// <br>
	// <br>
	// <span class="tablenote"><b>Important:</b>
	// Most eBay catalog products have at least one to a few Item Specifics defined, but it is possible that some retrieved catalog products will not have any Item Specifics.
	// </span>
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// This integer value indicates the total number of reviews that are available for the catalog product on the eBay Web site. Not all products will have reviews on an eBay marketplace, but if reviews are available for a catalog product, product reviews should be accessible from the catalog product page (see corresponding <b>DetailsURL</b> field).
	//
	ReviewCount int32 `xml:"ReviewCount,omitempty"`

	//
	// The fully-qualified URL to the catalog product's stock photo. This field is only returned if a stock photo exists for the eBay catalog product. Generally, this is the image that eBay displays in product-based search results.
	//
	StockPhotoURL *AnyURI `xml:"StockPhotoURL,omitempty"`

	//
	// The title of the product, as it is defined in the catalog product record.
	// This field is always returned with each <b>Product</b> container.
	//
	Title string `xml:"Title,omitempty"`

	//
	// The enumeration value in this field provides information on the current state of the catalog product record. This field is generally only returned if the catalog product record was recently updated, is due for an update, or if the record is scheduled to be deleted.
	//
	ProductState *ProductStateCodeType `xml:"ProductState,omitempty"`
}

type CategoryArrayType struct {

	//
	// This container consists of high-level details of a category, including its category ID value and information on its parent category, child categories, and its level in the eBay site's category hierarchy.
	//
	Category []*CategoryType `xml:"Category,omitempty"`
}

type CategoryType struct {

	//
	// The numeric identifier of a category on an eBay marketplace. For the root category of an eBay marketplace, the value will be <code>-1</code>.
	// <br>
	// <br>
	// This field is always returned with each <b>Category</b> container.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// The level where the category fits in the eBay marketplace's category hierarchy. For example, if this field has a value of <code>2</code>, then the category is two levels below the root category. For the root category of an eBay marketplace, the value will be <code>0</code>.
	// <br>
	// <br>
	// This field is always returned with each <b>Category</b> container.
	//
	CategoryLevel int32 `xml:"CategoryLevel,omitempty"`

	//
	// The display name of the category as it would appear on
	// the eBay marketplace. For the root category of an eBay marketplace, the value will be <code>Root</code>.
	// <br>
	// <br>
	// This field is always returned with each <b>Category</b> container.
	//
	CategoryName string `xml:"CategoryName,omitempty"`

	//
	// The unique identifier of the category's parent category. Note that <code>-1</code> is returned for Level 1 categories, and <code>0</code> is returned for the root category of an eBay marketplace.
	// <br>
	// <br>
	// This field is always returned with each <b>Category</b> container.
	//
	CategoryParentID string `xml:"CategoryParentID,omitempty"`

	//
	// This field is deprecated. Instead, the name of the category's parent category can be derived from the <b>CategoryNamePath</b> field
	//
	CategoryParentName string `xml:"CategoryParentName,omitempty"`

	//
	// This field is deprecated.
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// The fully-qualified category name path for the eBay category, including the display name for the category and the display name for all ancestor categories, all the way to the top-level (category Level 1) eBay category. Each eBay category name is separated with a colon (:). An example is shown below:
	// <br>
	// <br>
	// <code>
	// &lt;CategoryNamePath&gt;Clothing, Shoes & Accessories:Men's Clothing:Shirts:T-Shirts&lt;/CategoryNamePath&gt;
	// </code>
	// <br>
	// <br>
	// This field is always returned for any eBay category, but is not returned for the root (Level 0) of an eBay marketplace.
	//
	CategoryNamePath string `xml:"CategoryNamePath,omitempty"`

	//
	// The eBay category ID path for the eBay category, including the category ID for the corresponding category and the category IDs for all ancestor categories, all the way to the top-level (category Level 1) eBay category. Each eBay category ID is separated with a colon (:). An example is shown below:
	// <br>
	// <br>
	// <code>
	// &lt;CategoryIDPath&gt;11450:1059:185100:15687&lt;/CategoryIDPath&gt;
	// </code>
	// <br>
	// <br>
	// This field is always returned for any eBay category, but is not returned for the root (Level 0) of an eBay marketplace.
	//
	CategoryIDPath string `xml:"CategoryIDPath,omitempty"`

	//
	// This boolean field indicates if the corresponding category is a leaf category. eBay listings can only be created in leaf categories. If the value is <code>true</code>, the eBay category is a leaf category.
	// <br>
	// <br>
	// This field is always returned with each <b>Category</b> container.
	//
	LeafCategory bool `xml:"LeafCategory,omitempty"`
}

type CharityType struct {

	//
	// This identifier is assigned to the nonprofit organization when the organization registers with the PayPal Giving Fund. This identifier should not be confused with the CharityNumber value, which is the nonprofit organization's globally unique identifier.
	//
	CharityID string `xml:"CharityID,omitempty"`

	//
	// The name of the benefiting nonprofit organization selected by the
	// charity seller.
	//
	CharityName string `xml:"CharityName,omitempty"`

	//
	// This value is the globally unique identifier for the nonprofit organization. This identifier should not be confused with the CharityID value, which is the unique identifier that the PayPal Giving Fund assigns to the nonprofit organization.
	//
	CharityNumber int32 `xml:"CharityNumber,omitempty"`

	//
	// The percentage of the purchase price that the seller chooses to donate to the selected nonprofit organization. This percentage is also displayed in the eBay View Item page for the listing. Possible values range from 10.0 to 100.0 (percent). Minimum donation percentages may be required for 'eBay for Charity listings, see http://pages.ebay.com/help/sell/selling-nonprofit.html for details. <b>DonationPercent</b> is required input when creating eBay for Charity listings.
	//
	DonationPercent float32 `xml:"DonationPercent,omitempty"`

	//
	// The stated mission of the nonprofit organization. The length of the mission statement can vary by organization.
	//
	Mission string `xml:"Mission,omitempty"`

	//
	// The full URL to the nonprofit organization's logo image file. This logo image file is the image that is displayed in all eBay listings that benefit that charity.
	//
	LogoURL string `xml:"LogoURL,omitempty"`

	//
	// This field is deprecated.
	//
	CharityListing bool `xml:"CharityListing,omitempty"`

	//
	// The enumeration value in this field indicates the current status of the nonprofit organization in accordance with the PayPal Giving Fund requirements.
	//
	Status *CharityStatusCodeType `xml:"Status,omitempty"`
}

type DiscountPriceInfoType struct {

	//
	// This field specifies the price to which the discounted-price display
	// treatment will be applied (for example, a strikethrough price). The
	// discounted price of an item is shown in the <b>CurrentPrice</b> field, and is always less than the value in this field.
	//
	OriginalRetailPrice *AmountType `xml:"OriginalRetailPrice,omitempty"`

	//
	// A value equal to the agreed upon minimum advertised price.
	// <br><br>
	// The minimum advertised price is an agreed upon price that is set by the
	// suppliers/OEMs and the retailers/sellers. The minimum advertised price
	// is the lowest price for which an item can be advertised. Large volume
	// sellers can negotiate with the suppliers/OEMs to offer certain items
	// below the set minimum advertised price. eBay does not maintain or
	// validate the agreed upon minimum advertised price; the seller is
	// responsible for setting this value in accordance with their agreement
	// with the supplier/OEMs. MAP pricing treatments apply to only fixed-price,
	// listings on the eBay US site.
	//
	MinimumAdvertisedPrice *AmountType `xml:"MinimumAdvertisedPrice,omitempty"`

	//
	// This field is only returned for US-based listings eligible for, and using the MAP feature. The enumeration value returned in this field indicates how/when the Minimum Advertised Price will be displayed to the buyer. See the descriptions for each enumeration value for more information.
	//
	MinimumAdvertisedPriceExposure *MinimumAdvertisedPriceExposureCodeType `xml:"MinimumAdvertisedPriceExposure,omitempty"`

	//
	// This field denotes whether or not an item qualifies for a discount
	// pricing treatment display, such as STP or MAP. If this field is set to <code>MAP</code>, you must abide
	// by the rules for displaying MAP items, as described in the
	// <b>MinimumAdvertisedPriceExposure</b> field.
	// <br /> <br />
	// <span class="tablenote"><b>Important:</b>
	// For listings that return PricingTreatment set to MAP, you are
	// legally required to follow the rules for displaying the price of
	// the item to potential buyers. You are bound by the terms of the
	// API License Agreement to follow these rules. Refer to the
	// API License Agreement for consequences of non-compliance.
	// </span>
	//
	PricingTreatment *PricingTreatmentCodeType `xml:"PricingTreatment,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this field indicates
	// that the discount price (shown in <b>CurrentPrice</b> field) is the price for
	// which the seller offered the same (or similar) item for sale on eBay
	// within the previous 30 days. The discount price is always in reference
	// to the seller's own price for the item.
	// <br /><br />
	// In the event both <b>SoldOffeBay</b> and <b>SoldOneBay</b> fields are set, <b>SoldOneBay</b>
	// takes precedence.
	//
	SoldOneBay bool `xml:"SoldOneBay,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this field indicates
	// that the discount price (shown in <b>CurrentPrice</b> field) is the price for
	// which the seller offered the same item for sale on a web site or offline
	// store other than eBay in the previous 30 days. The discount price is
	// always in reference to the seller's own price for the item.
	// <br /><br />
	// In the event both <b>SoldOffeBay</b> and <b>SoldOneBay</b> fields are set, <b>SoldOneBay</b>
	// takes precedence.
	//
	SoldOffeBay bool `xml:"SoldOffeBay,omitempty"`
}

type DistanceType struct {
	Value float64

	//
	// DistanceType and this attribute are deprecated.
	//
	Unit string `xml:"unit,attr,omitempty"`
}

type DomainHistogramType struct {

	//
	// Each histogram entry shows how many matching products
	// were found in each matching domain. A domain is like a high-level
	// category, or a group of categories whose items share the same basic
	// product characteristics.
	//
	Domain []*HistogramEntryType `xml:"Domain,omitempty"`
}

type ExternalProductIDType struct {
	Value string `xml:"Value,omitempty"`

	ReturnSearchResultOnDuplicates bool `xml:"ReturnSearchResultOnDuplicates,omitempty"`

	Type *ExternalProductCodeType `xml:"Type,omitempty"`

	AlternateValue []string `xml:"AlternateValue,omitempty"`
}

type FeedbackDetailType struct {

	//
	// This enumeration value provides the Feedback Rating Star of the user indicated in the <b>CommentingUser</b> field. See <a href="types/FeedbackRatingStarCodeType.html">FeedbackRatingStarCodeType</a> for the full list of Feedback Rating Stars, and the Feedback score ranges associated with those stars.
	//
	FeedbackRatingStar *FeedbackRatingStarCodeType `xml:"FeedbackRatingStar,omitempty"`

	//
	// The eBay User ID of the user who left the Feedback entry.
	//
	CommentingUser string `xml:"CommentingUser,omitempty"`

	//
	// This integer value is the Feedback score of the user indicated in the  <b>CommentingUser</b> field.
	//
	CommentingUserScore int32 `xml:"CommentingUserScore,omitempty"`

	//
	// This free-form text is the actual comment that the commenting user left for their order partner. The Feedback comment's purpose is to explain, clarify, or justify the Feedback rating specified in the <b>CommentType</b> field.
	// <br><br>
	// The comment is returned as text in the language that the comment was originally left in. This comment will still be displayed even if a submitted Feedback entry is withdrawn.
	//
	CommentText string `xml:"CommentText,omitempty"`

	//
	// This timestamp (in GMT) indicates the date/time that the Feedback entry was submitted to eBay.
	//
	CommentTime time.Time `xml:"CommentTime,omitempty"`

	//
	// This value indicates the rating of the Feedback left by the user identified in the <b>CommentingUser</b> field.
	// <br><br>
	// A <b>Positive</b> rating increases a user's Feedback score by a value of 1, a <b>Negative</b> rating decreases a user's Feedback score by a value of 1, and a <b>Neutral</b> rating does not affect a user's Feedback score.
	// <br><br>
	// Sellers cannot leave <b>Neutral</b> or <b>Negative</b> ratings for buyers.
	//
	CommentType *CommentTypeCodeType `xml:"CommentType,omitempty"`

	//
	// This free-form text is the comment that the recipient of the Feedback may leave in response or rebuttal to the Feedback. Responses to Feedback comments cannot be submitted or edited via the API. This field is returned as an empty tag if no response to the Feedback entry has been submitted.
	//
	FeedbackResponse string `xml:"FeedbackResponse,omitempty"`

	//
	// This free-form text is the explanation that a user can give to a submitted Feedback response. Follow-ups to Feedback comments cannot be submitted or edited via the API. This field is returned as an empty tag if no Follow-Up to the Feedback response has been submitted.
	//
	FollowUp string `xml:"FollowUp,omitempty"`

	//
	// The unique identifier of the listing associated with the Feedback entry. For Feedback entries that were left for the buyer by the seller, an <b>ItemID</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// This enumeration value indicates whether the specified eBay user (and recipient of the Feedback entry) was the buyer
	// or the seller for the corresponding order line item.
	//
	Role *TradingRoleCodeType `xml:"Role,omitempty"`

	//
	// The title of the listing for which Feedback was provided. This field may not be returned for a listing that ended more than 90 days ago. For Feedback entries that were left for the buyer by the seller, an <b>ItemTitle</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	ItemTitle string `xml:"ItemTitle,omitempty"`

	//
	// The purchase price for the order line item associated with the Feedback entry. This field may not be returned for a listing that ended more than 90 days ago.  For Feedback entries that were left for the buyer by the seller, an <b>ItemPrice</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	ItemPrice *AmountType `xml:"ItemPrice,omitempty"`

	//
	// Unique identifier for the Feedback entry. This identifier is auto-generated by eBay at the time of Feedback submittal.
	//
	FeedbackID string `xml:"FeedbackID,omitempty"`

	//
	// Unique identifier for the order line item for which the Feedback entry was left. The value of this field is always '0' for auction listings since auctions only have one winner/buyer, and only the <b>ItemID</b> value is needed to identify the transaction. For Feedback entries that were left for the buyer by the seller, a <b>TransactionID</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This boolean value indicates whether or not eBay replaced the Feedback comment with a message that the Feedback comment was removed.
	//
	CommentReplaced bool `xml:"CommentReplaced,omitempty"`

	//
	// This boolean value indicates whether or not eBay replaced the response to the Feedback comment with a message that the response to the Feedback comment was removed.
	//
	ResponseReplaced bool `xml:"ResponseReplaced,omitempty"`

	//
	// This boolean value indicates whether or not eBay replaced the follow-up to the Feedback comment with a message that the follow-up to the Feedback comment was removed.
	//
	FollowUpReplaced bool `xml:"FollowUpReplaced,omitempty"`

	//
	// This boolean value indicates whether or not the Feedback entry will affect the user's Feedback score.
	//
	Countable bool `xml:"Countable,omitempty"`
}

type FeedbackHistoryType struct {

	//
	// A <b>BidRetractionFeedbackPeriods</b> container shows the cumulative number of Withdrawn Feedback entries (shown in <b>Count</b> field) for the specified time period (shown in <b>PeriodInDays</b> field).
	//
	BidRetractionFeedbackPeriods []*FeedbackPeriodType `xml:"BidRetractionFeedbackPeriods,omitempty"`

	//
	// A <b>NegativeFeedbackPeriods</b> container shows the cumulative number of Negative Feedback entries (shown in <b>Count</b> field) for the specified time period (shown in <b>PeriodInDays</b> field).
	//
	NegativeFeedbackPeriods []*FeedbackPeriodType `xml:"NegativeFeedbackPeriods,omitempty"`

	//
	// A <b>NeutralFeedbackPeriods</b> container shows the cumulative number of Neutral Feedback entries (shown in <b>Count</b> field) for the specified time period (shown in <b>PeriodInDays</b> field).
	//
	NeutralFeedbackPeriods []*FeedbackPeriodType `xml:"NeutralFeedbackPeriods,omitempty"`

	//
	// A <b>PositiveFeedbackPeriods</b> container shows the cumulative number of Positive Feedback entries (shown in <b>Count</b> field) for the specified time period (shown in <b>PeriodInDays</b> field).
	//
	PositiveFeedbackPeriods []*FeedbackPeriodType `xml:"PositiveFeedbackPeriods,omitempty"`

	//
	// A <b>TotalFeedbackPeriods</b> container shows the cumulative number of all Feedback entries (shown in <b>Count</b> field) for the specified time period (shown in <b>PeriodInDays</b> field).
	//
	TotalFeedbackPeriods []*FeedbackPeriodType `xml:"TotalFeedbackPeriods,omitempty"`

	//
	// This integer value indicates the total number of Negative Feedback entries that a seller has received from unique buyers, ever since the eBay user first registered on eBay. This field is not applicable to users who only buy on eBay since eBay buyers cannot receive Negative feedback from their order partners.
	//
	UniqueNegativeFeedbackCount int64 `xml:"UniqueNegativeFeedbackCount,omitempty"`

	//
	// This integer value indicates the total number of Positive Feedback entries that the specified eBay user has received (as a buyer or seller) from unique users, ever since the eBay user first registered on eBay.
	//
	UniquePositiveFeedbackCount int64 `xml:"UniquePositiveFeedbackCount,omitempty"`

	//
	// Each returned <b>AverageRatingDetails</b> container shows the seller's current rating for the Detailed Seller Rating type (specified in the <b>RatingDetail</b> field), as well as the total count that this seller has been rated for this particular Detailed Seller Rating type.
	// <br/><br/>
	// This container is only returned if applicable. If the specified eBay user only buys on eBay, these containers will not get returned, and Detailed Seller Ratings are not available or applicable for all sellers.
	//
	AverageRatingDetails []*AverageRatingDetailsType `xml:"AverageRatingDetails,omitempty"`

	//
	// Number of Neutral comments received from suspended users. This field is only returned if applicable.
	//
	NeutralCommentCountFromSuspendedUsers int64 `xml:"NeutralCommentCountFromSuspendedUsers,omitempty"`

	//
	// This integer value indicates the total number of Neutral Feedback entries that a seller has received from unique buyers, ever since the eBay user first registered on eBay. This field is not applicable to users who only buy on eBay since eBay buyers cannot receive Neutral feedback from their order partners.
	// This field is only returned if applicable.
	//
	UniqueNeutralFeedbackCount int64 `xml:"UniqueNeutralFeedbackCount,omitempty"`
}

type FeedbackPeriodType struct {

	//
	// This integer value indicates the total number of days in the time period for the Feedback count. Typically, the returned time periods are 7 days, 30 days, 180 days, and 365 days.
	//
	PeriodInDays int32 `xml:"PeriodInDays,omitempty"`

	//
	// This integer value indicates the total number of Feedback entries that occurred within the time period specified in the <b>PeriodInDays</b> field.
	//
	Count int64 `xml:"Count,omitempty"`
}

type FindHalfProductsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindHalfProductsRequest"`

	*AbstractRequestType

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	AvailableItemsOnly bool `xml:"AvailableItemsOnly,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	DomainName []string `xml:"DomainName,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	SellerID string `xml:"SellerID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ProductSort *ProductSortCodeType `xml:"ProductSort,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	MaxEntries int32 `xml:"MaxEntries,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsRequestType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`
}

type FindHalfProductsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindHalfProductsResponse"`

	*AbstractResponseType

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsResponseType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	DomainHistogram *DomainHistogramType `xml:"DomainHistogram,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsResponseType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsResponseType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ApproximatePages int32 `xml:"ApproximatePages,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsResponseType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	MoreResults bool `xml:"MoreResults,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsResponseType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	TotalProducts int32 `xml:"TotalProducts,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsResponseType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	Products *HalfProductsType `xml:"Products,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindHalfProductsResponseType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ProductSearchURL *AnyURI `xml:"ProductSearchURL,omitempty"`
}

type FindPopularItemsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularItemsRequest"`

	*AbstractRequestType

	//
	// This field is deprecated.
	//
	CategoryID []string `xml:"CategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	CategoryIDExclude []string `xml:"CategoryIDExclude,omitempty"`

	//
	// This field is deprecated.
	//
	MaxEntries int32 `xml:"MaxEntries,omitempty"`
}

type FindPopularItemsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularItemsResponse"`

	*AbstractResponseType

	//
	// This field is deprecated.
	//
	ItemArray *SimpleItemArrayType `xml:"ItemArray,omitempty"`
}

type FindPopularSearchesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularSearchesRequest"`

	*AbstractRequestType

	//
	// This field is deprecated.
	//
	CategoryID []string `xml:"CategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	QueryKeywords []string `xml:"QueryKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	MaxKeywords int32 `xml:"MaxKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	MaxResultsPerPage int32 `xml:"MaxResultsPerPage,omitempty"`

	//
	// This field is deprecated.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// This field is deprecated.
	//
	IncludeChildCategories bool `xml:"IncludeChildCategories,omitempty"`
}

type FindPopularSearchesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindPopularSearchesResponse"`

	*AbstractResponseType

	//
	// This field is deprecated.
	//
	PopularSearchResult []*PopularSearchesType `xml:"PopularSearchResult,omitempty"`

	//
	// This field is deprecated.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// This field is deprecated.
	//
	TotalPages int32 `xml:"TotalPages,omitempty"`
}

type FindProductsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindProductsRequest"`

	*AbstractRequestType

	//
	// <span class="tablenote"><b>Important:</b>
	// The use of domain histograms and <b>DomainName</b> filters is no longer recommended, as the domain histogram data that is returned in the response, and filtering by domain logic is no longer reliable. <code>DomainHistogram</code> is the only value that can be used for <b>IncludeSelector</b>, so this filter has no practical use, and may be deprecated in the near future.
	// </span>
	// <br>
	// <br>
	// This filter is included and set to <code>DomainHistogram</code> if the user would like to view domain histogram data in the response. The <b>DomainHistogram</b> container that is returned displays all eBay category domains associated with all eBay catalog products that are retrieved. The count of eBay catalog products associated with each domain is also shown under each <b>Domain</b> container. If this field is omitted, only the catalog product records and pagination data is returned.
	// <br /> <br />
	// <span class="tablenote"><b>Important:</b>
	// Historically, the <b>IncludeSelector</b> field supported two other values - <code>Items</code> and <code>Details</code>. However, both of these enumeration values controlled the data that was returned through the <b>ItemArray</b> container, and this container is no longer returned at all. The <b>FindProducts</b> call now only retrieves one or more eBay catalog products, and no longer retrieves active listing data related to these catalog products. The <code>Items</code> or <code>Details</code> values will have no effect is used.
	// </span>
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`

	//
	// This filter is no longer applicable since the <b>FindProducts</b> call no longer retrieves any active listings associated with the retrieved catalog products. If this field is used, it will have no effect on the response.
	//
	//
	AvailableItemsOnly bool `xml:"AvailableItemsOnly,omitempty"`

	//
	// <span class="tablenote"><b>Important:</b>
	// The use of domain histograms and <b>DomainName</b> filters is no longer recommended, as the domain histogram data that is returned in the response, and filtering by domain logic is no longer reliable.
	// </span>
	// <br>
	// <br>
	// An eBay domain to search in. This is like searching a section of the eBay catalog. If this field is not included, the catalog product search is conducted across all defined eBay domains. The user can use multiple <b>DomainName</b> filters to search multiple defined eBay domains. If you are using a URL, and you want to specify multiple values, use an index value (not a comma). For example, to specify DomainName=Textbooks,Education, specify DomainName(0)=Textbooks,%20Education. To retrieve valid domain names, first use this call with your query string specified in <b>QueryKeywords</b>, and the <b>IncludeSelector</b> field's value set to <code>DomainHistogram</code>. After retrieving all eBay defined domain names for the query string under the <b>DomainHistogram</b> container, the user can select the eBay domains relevant to the product they're searching for, and then they can do another <b>FindProducts</b> call with one or more <b>DomainName</b> filters.
	// <br>
	// <br>
	// Generally, <b>DomainName</b> filter(s) are only useful for query string searches using <b>QueryKeywords</b> field. If you are searching for a specific catalgo product based on eBay Product ID (ePID) or a Global Trade Item Number (GTIN), such as a UPC, ISBN, or EAN, a lt;b>DomainName</b> filter is not needed.
	//
	DomainName []string `xml:"DomainName,omitempty"`

	//
	// Use this field to find a catalog product (or products) associated with an eBay Product ID (ePID) or a Global Trade Item Number (GTIN), such as a UPC, ISBN, or EAN. The product identifier is expressed as a string value, and the type of product identifier is expressed in the <b>type</b> attribute.
	// <br>
	// <br>
	// See the <a href="types/ProductIDCodeType.html">ProductIDCodeType</a> definition to view the supported enumeration values for the lt;b>typelt;/b> attribute. Note that it is possible that there may be multiple eBay catalog products associated with the same GTIN value, but there can only be one eBay catalog product associated with a specific ePID value.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// This string field is used to defined a query string using one or more keywords. When you use a keyword search,
	// eBay searches the product catalog for matching words in the
	// product title, description, and/or Item Specifics, and it returns
	// a list of matching catalog products. If used, the response will also be affected by any eBay domains that are specified through one or more <b>DomainName</b> filters.<br>
	// <br>
	// The query string must contain at least three alphanumeric characters.<br>
	// <br>
	// The words "and" and "or" are treated like any other word.
	// Only use "and", "or", or "the" if you are searching for products
	// containing these words.
	// To use AND or OR logic, use eBay's standard search string
	// modifiers. Wildcards (+, -, or *) are also supported.
	// Be careful when using spaces before or after modifiers and
	// wildcards.<br>
	// <br>
	// Some keyword queries can result in response times of 30 seconds or
	// longer. If too many results are returned, you may want to refine the search by
	// passing in more keywords and/or by using one or more <b>DomainName</b> filters. Using a <b>CategoryID</b> value is also an option, as this will return only catalog products associated with that eBay category.
	// <br>
	// <br>
	// If you know your product's UPC, EAN, or ISBN, you may want to use the <b>ProductID</b> field instead of the <b>QueryKeywords</b> field. <br>
	// <br>
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// This field allows the user to control the order in which the retrieved catalog products are displayed in the response. If this field is not included, the results are sorted by the catalog product's popularity.
	// <br>
	// <br>
	// See the <a href="types/ProductSortCodeType.html">ProductSortCodeType</a> definition to view the available sort values.
	// <br>
	// <br>
	// This field can be used in conjunction with the <b>SortOrder</b> field. The <b>SortOrder</b> field controls whether catalog products are returned in ascending or descending order (according to the <b>ProductSort</b> value). If neither <b>ProductSort</b> nor <b>SortOrder</b> fields are used, catalog products are sorted by popularity in descending order.
	//
	ProductSort *ProductSortCodeType `xml:"ProductSort,omitempty"`

	//
	// This field is used to control whether catalog products are returned in ascending or descending order (according to the <b>ProductSort</b> value). If neither <b>ProductSort</b> nor <b>SortOrder</b> fields are used, catalog products are sorted by popularity in descending order.
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// This field is used to limit/control the maximum number of catalog products that are returned per page of data in a single call. This is generally used with string query searches using the <b>QueryKeywords</b> field.
	// <br>
	// <br>
	// If this field is not used, its value defaults to '1', and only one catalog product is returned. The user may want to look at the <b>TotalProducts</b> field's value to see how many eBay catalog products matched the search criteria, and then the user may want to do another call, possibly refining/narrowing the search with a more precise query string in the <b>QueryKeywords</b> field, or perhaps with one or more <b>DomainName</b> filters.
	// <br>
	// <br>
	// If the <b>MoreResults</b> field is returned as <code>true</code>, this indicates that more than one page of results are available based on the current search criteria, so the user will have to make additional calls to view additional pages of results, changing the <b>PageNumber</b> value as needed.
	//
	MaxEntries int32 `xml:"MaxEntries,omitempty"`

	//
	// This field is used to control the page number of results to retrieve in the call. If this field is omitted, the first page of results is returned by default. You know that you have additional pages or results if the <b>MoreResults</b> field is returned as <code>true</code>.
	// <br>
	// <br>
	// This field takes a positive integer value equal to or lower than the number of pages available. The total number of pages in the results set is shown in the <b>ApproximatePages</b> field of the response.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// This field is included to restrict the catalog products that are returned. Only the catalog products associated with this category ID are returned.
	// <br><br>
	// This field is generally used with the <b>QueryKeywords</b> field.
	// <br><br>
	// The <b>GetCategories</b> or <b>GetSuggestedCategories</b> calls of the Trading API can be used to retrieve <b>CategoryID</b> values.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This filter is no longer applicable since the <b>FindProducts</b> call no longer retrieves any active listings associated with the retrieved catalog products.
	//
	//
	HideDuplicateItems bool `xml:"HideDuplicateItems,omitempty"`
}

type FindProductsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindProductsResponse"`

	*AbstractResponseType

	//
	// The total number of pages in the results set based on the current search criteria. The number of pages in the results set will be determined by how many catalog products are found based on the search criteria (<b>QueryKeywords</b> string, <b>DomainName</b> filter(s), and <b>CategoryID</b> restriction), and the number of catalog products to return on each page of results (set in the <b>MaxEntries</b> field). If 200 catalog products were found (as shown in the <b>TotalProducts</b> field), and the  <b>MaxEntries</b> value is <code>25</code> (25 catalog products per page), the <b>ApproximatePages</b> value will be <code>8</code> (200 (records)/25 (records per page) = 8 (pages).
	//
	ApproximatePages int32 `xml:"ApproximatePages,omitempty"`

	//
	// This boolean value is returned as <code>true</code> if more pages of catalog product records exist for the current search criteria, and <code>false</code> if the current page or results is the only or last page in the results set based on the current search criteria.
	// <br /> <br />
	// If more pages of results are available (value is <code>true</code>), it is advised that the user look at the <b>PageNumber</b> value and at the <b>ApproximatePages</b> value, as this will give the user an idea of how many more pages of results exist based on the current search criteria. After having this knowledge, it is up to the user whether to refine the search a little more to retrieve less results, or perhaps increase the <b>MaxEntries</b> integer value in the call request to retrieve more catalog products per page, or just go ahead and make multiple <b>FindProducts</b> calls to view all pages of results, iterating the <b>PageNumber</b> integer value in the call request by '1' with each subsequent call.
	//
	MoreResults bool `xml:"MoreResults,omitempty"`

	//
	// <span class="tablenote"><b>Important:</b>
	// The use of domain histograms and <b>DomainName</b> filters is no longer recommended, as the domain histogram data that is returned in the response, and filtering by domain logic is no longer reliable.
	// </span>
	// <br>
	// This container consist of an array of eBay category domains, and the number of catalog products that belong to each eBay category domain. This array is only returned if the <b>IncludeSelector</b> field is included in the call request and set to a value of  <code>DomainHistogram</code>.
	// <br>
	// <br>
	// To retrieve valid domain names, first use this call with your query string specified in <b>QueryKeywords</b>, and the <b>IncludeSelector</b> field's value set to <code>DomainHistogram</code>. After retrieving all eBay defined domain names for the query string under the <b>DomainHistogram</b> container, the user can select the eBay domains relevant to the product they're searching for, and then they can do another <b>FindProducts</b> call with one or more <b>DomainName</b> filters.
	// <br>
	// <br>
	// Generally, <b>DomainName</b> filter(s) are only useful for query string searches using <b>QueryKeywords</b> field. If you are searching for a specific catalog product based on an eBay Product ID (ePID) or a Global Trade Item Number (GTIN), such as a UPC, ISBN, or EAN, a lt;b>DomainName</b> filter is not needed.
	//
	DomainHistogram *DomainHistogramType `xml:"DomainHistogram,omitempty"`

	//
	// This container has been deprecated from the <b>FindProducts</b> call. To retrieve active items associated with a product, you can use the <b>findItemsByProduct</b> call of the Finding API instead.
	//
	ItemArray *SimpleItemArrayType `xml:"ItemArray,omitempty"`

	//
	// This integer value shows the current page number of the results set that is being displayed. The number of pages in the results set depends on how many catalog products exist based on the search criteria, and how many catalog products are being returned per page (set in the <b>MaxEntries</b> field in the call request). The total number of pages in the results set is shown in the <b>ApproximatePages</b> field.
	// <br/><br/>
	// The <b>PageNumber</b> value in the response always reflects the <b>PageNumber</b> value that is set in the call request, or, if the <b>PageNumber</b> field is not used in the call request, the first (and perhaps only) page is returned by default.
	// <br/><br/>
	// If there are multiple pages in the results set, and the user wants to review multiple pages, multiple <b>FindProducts</b> calls are required, iterating the <b>PageNumber</b> integer value in the call request by '1' with each subsequent call.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// A <b>Product</b> container is returned for each eBay catalog product that matches the search criteria. The <b>Product</b> container consists of specific data about the catalog product, including the product title, product identifiers (ePID and any GTIN value(s)), product aspects, a link to eBay product page, and links to stock photos (if any).
	// <br/><br/>
	// The number of catalog products returned is dependent on the search criteria in the request. Searches based on a <b>QueryKeywords</b> string will generally return multiple catalog products, but a search based on an eBay Product ID (set in the <b>ProductID</b> field) should only return one catalog product. The number of catalog products returned per page will also depend on the <b>MaxEntries</b> value set in the call request.
	//
	Product []*CatalogProductType `xml:"Product,omitempty"`

	//
	// This integer value is the total number of catalog products that match the current search criteria. Keep in mind that the total number of catalog products returned per page is controlled by the <b>MaxEntries</b> value set in the call request. The user can also look at the <b>ApproximatePages</b> field to see how many pages of results exist for the current search criteria.
	// <br/>
	//
	TotalProducts int32 `xml:"TotalProducts,omitempty"`

	//
	// This boolean field is no longer applicable since the <b>FindProducts</b> call no longer retrieves any active listings associated with the retrieved catalog products.
	//
	//
	DuplicateItems bool `xml:"DuplicateItems,omitempty"`
}

type FindReviewsAndGuidesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindReviewsAndGuidesRequest"`

	*AbstractRequestType

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesRequestType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesRequestType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesRequestType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesRequestType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	MaxResultsPerPage int32 `xml:"MaxResultsPerPage,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesRequestType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesRequestType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	ReviewSort *ReviewSortCodeType `xml:"ReviewSort,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesRequestType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`
}

type FindReviewsAndGuidesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FindReviewsAndGuidesResponse"`

	*AbstractResponseType

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	ReviewCount int32 `xml:"ReviewCount,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	BuyingGuideCount int32 `xml:"BuyingGuideCount,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	ReviewerRank int32 `xml:"ReviewerRank,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	TotalHelpfulnessVotes int32 `xml:"TotalHelpfulnessVotes,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	ReviewsAndGuidesURL *AnyURI `xml:"ReviewsAndGuidesURL,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	TotalPages int32 `xml:"TotalPages,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	BuyingGuideDetails *BuyingGuideDetailsType `xml:"BuyingGuideDetails,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	ReviewDetails *ReviewDetailsType `xml:"ReviewDetails,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>FindReviewsAndGuidesResponseType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	PositiveHelpfulnessVotes int32 `xml:"PositiveHelpfulnessVotes,omitempty"`
}

type GetCategoryInfoRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryInfoRequest"`

	*AbstractRequestType

	//
	// In this required field, the user specifies the unique identifier of an eBay category. Detailed information is returned for this category.
	// <br>
	// <br>
	// If a user wanted to see all Level 1 (L1) categories for an eBay site, a value of <code>-1</code> is passed into this field, and the user also includes the <b>IncludeSelector</b> field and sets its value to <code>ChildCategories</code>.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This field is included and its value is set to <code>ChildCategories</code> if the user wishes to retrieve all of the specified category's children categories (one category level down in eBay categorical hierarchy).
	// <br>
	// <br>
	// If the specified category is a leaf category (and has no children), this filter has no effect on the output.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetCategoryInfoResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryInfoResponse"`

	*AbstractResponseType

	//
	// This container consists of an array of one or more <b>Category</b> nodes. The first <b>Category</b> node in the response is always the category that was specified in the <b>CategoryID</b> field in the request, and additional <b>Category</b> nodes are returned if the <b>IncludeSelector</b> field is included in the request and set to <code>ChildCategories</code>.
	//
	CategoryArray *CategoryArrayType `xml:"CategoryArray,omitempty"`

	//
	// This value indicates the number of categories returned in the response. If child categories were not included in the request, this value should be '1', but if child categories were included in the request, this value is the cumulative amount of the specified category and all of its child categories.
	//
	CategoryCount int32 `xml:"CategoryCount,omitempty"`

	//
	// This timestamp indicates the last date and time that eBay modified the category hierarchy for the specified eBay site.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// This string indicates the version number of the current category hierarchy on the specified eBay site.
	//
	CategoryVersion string `xml:"CategoryVersion,omitempty"`
}

type GetItemStatusRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemStatusRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the eBay listing to retrieve. You can retrieve the status of up to 20 listings per call, and a separate <b>ItemID</b> field is required for each listing.
	//
	ItemID []string `xml:"ItemID,omitempty"`
}

type GetItemStatusResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemStatusResponse"`

	*AbstractResponseType

	//
	// An <b>Item</b> container is returned for each <b>ItemID</b> value that was specified in the call request. One <b>GetItemStatus</b> call can retrieve up to 20 eBay listings.
	//
	Item []*SimpleItemType `xml:"Item,omitempty"`
}

type GetMultipleItemsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMultipleItemsRequest"`

	*AbstractRequestType

	//
	// The uniqe ID that identifies the listing for which to
	// retrieve the data. You can provide a maximum of 20 <b>ItemID</b> values. When making a
	// URL request, there are two ways to handle specifying multiple item ID values. You can use multiple <b>ItemID</b> fields, but each one must be specified as an indexed
	// array (e.g., <code>...&ItemID(0)=130310421484&ItemID(1)=
	// 300321408208& ItemID(2)=370214653822...</code>).
	// <br><br>
	// Alternatively, as a shortcut for URL requests, you can specify multipe item ID values as a comma-separated list in a single <b>ItemID</b> field (e.g., ...<
	// code>&ItemID=130310421484,300321408208,370214653822...</code>
	// ) for convenience.
	// <br><br>
	// You can determine an item's ID by calling findItemsAdvanced (<a
	// href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html"
	// >Finding API</a>) or from the  eBay Web site. Provide ItemID for
	// every item for which you want information.
	//
	ItemID []string `xml:"ItemID,omitempty"`

	//
	// Defines standard subsets of fields to return within the
	// response.<br>
	// <br>
	// If you don't specify this field, the call returns a default
	// set of fields (see the "Detail Controls" link below). If you specify this field, the additional
	// fields you retrieve can affect the call's response time
	// (performance).<br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Details</p>
	// <p class="edef">Include most available fields in the
	// response (except fields that significantly affect the call's
	// performance).</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Description</p>
	// <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
	// <p class="edef">Include the text Description (no html tag) field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
	// <p class="edef">Include ItemSpecifics in the response.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
	// <p class="edef">Include Variations in the response.</p>
	// <br>
	// <br>
	// Use a comma to specify multiple values. (In this case,
	// the results are cumulative.) See "GetSingleItem Samples"
	// for an example of how to use this field.<br>
	// <br>
	// See "Detail Controls" for a complete list of
	// fields that can be returned for each selector.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetMultipleItemsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMultipleItemsResponse"`

	*AbstractResponseType

	//
	// Contains details for a listing (or multiple) listings that correspond to the item ID(s) specified in the request.
	//
	Item []*SimpleItemType `xml:"Item,omitempty"`
}

type GetShippingCostsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetShippingCostsRequest"`

	*AbstractRequestType

	//
	// The item ID that uniquely identifies the listing for which to retrieve the data.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// Quantity of items sold to a single buyer and to be shipped together.
	// <br>
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// Destination country postal code (or zip code, for US). Ignored if no
	// country code is provided. Optional tag for some countries. More likely to
	// be required for large countries. Ignored for flat-rate shipping.
	//
	DestinationPostalCode string `xml:"DestinationPostalCode,omitempty"`

	//
	// Destination country code. If <b>DestinationCountryCode</b> is US, postal code is required and represents US zip code.
	// <br>
	//
	DestinationCountryCode *CountryCodeType `xml:"DestinationCountryCode,omitempty"`

	//
	// This field should be included and set to <b>true</b> if the user would like the <b>ShippingDetails</b> returned in the response.
	// <br>
	//
	IncludeDetails bool `xml:"IncludeDetails,omitempty"`
}

type GetShippingCostsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetShippingCostsResponse"`

	*AbstractResponseType

	//
	// This container consists of shipping details related to the specified item and specified shipping destination. This container is only
	// returned if the <b>IncludeDetails</b> field is included and set to <code>true</code> in the call request. If the specified shipping destination is a domestic location, one or more <b>ShippingServiceOption</b> containers are returned - one for each available shipping service option. If the specified shipping destination is an international location, one or more <b>InternationalShippingServiceOption</b> containers are returned - one for each available shipping service option.
	// <br>
	// <br>
	// The available domestic and international shipping service options will contain details such as shipping service name, shipping cost, ship-to locations, and estimated delivery window (which is based on the seller's stated handling time plus the expected shipping time of the shipping service).
	//
	ShippingDetails *ShippingDetailsType `xml:"ShippingDetails,omitempty"`

	//
	// This container returns a few details of the lowest-priced shipping service option that is available to the shipping destination specified in the call request. For Calculated shipping, the item's location and the destination location are considered when calculating the shipping cost.
	// <br>
	// <br>
	// <span class="tablenote">
	// <strong>Important:</strong> To retrieve detailed information on every shipping service option available to the specified shipping destination, the user must include the  <b>IncludeDetails</b> boolean field in the call request, and set its value to <code>true</code>. Shipping details on one or more available domestic shipping service options can be found in the <b>ShippingDetails.ShippingServiceOption</b> container(s), and  shipping details on one or more available international shipping service options can be found in the <b>ShippingDetails.InternationalShippingServiceOption</b> container(s).
	// </span>
	//
	ShippingCostSummary *ShippingCostSummaryType `xml:"ShippingCostSummary,omitempty"`

	//
	// This container is only returned in <b>GetShippingCosts</b> if In-Store Pickup is available for the listing.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> The In-Store Pickup feature is only available to a limited number of large retail merchants in the US, and can only be applied to multiple-quantity, fixed-price listings.
	// </span>
	//
	PickUpInStoreDetails *PickUpInStoreDetailsType `xml:"PickUpInStoreDetails,omitempty"`
}

type GetSingleItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSingleItemRequest"`

	*AbstractRequestType

	//
	// The item ID that uniquely identifies the item listing
	// for which to retrieve the data.<br>
	// <br>
	// You can determine an item's ID by calling <b>findItemsAdvanced</b>( <a
	// href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html"
	// >Finding API</a>) or from the eBay Web site.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// Variation-level SKU that uniquely identifies a variation within
	// the listing identified by <b>ItemID</b>. Only applicable when the
	// seller included variation-level SKU (<b>Variation.SKU</b>)
	// values. Retrieves all the usual listing fields, but limits the
	// variations content to the specified variation.
	// If not specified, the response includes all variations.
	//
	VariationSKU string `xml:"VariationSKU,omitempty"`

	//
	// Name-value pairs that identify one or more variations within the
	// listing identified by ItemID. Only applicable when the seller
	// listed the item with variations. Retrieves all the usual Item
	// fields, but limits the Variations content to the specified
	// variation(s). If the specified pairs do not match any variation,
	// eBay returns all variations.<br>
	// <br>
	// To retrieve only one variation, specify the full set of
	// name/value pairs that match all the name-value pairs of one
	// variation. <br>
	// <br>
	// To retrieve multiple variations (using a wildcard),
	// specify one or more name/value pairs that partially match the
	// desired variations. For example, if the listing contains
	// variations for shirts in different colors and sizes, specify
	// Color as Red (and no other name/value pairs) to retrieve
	// all the red shirts in all sizes (but no other colors).
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`

	//
	// Defines standard subsets of fields to return within the
	// response.<br>
	// <br>
	// If you don't specify this field, the call returns a default
	// set of fields (see the "Detail Controls" link below). If you specify this field, the additional
	// fields you retrieve can affect the call's response time
	// (performance).<br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Details</p>
	// <p class="edef">Include most available fields in the
	// response (except fields that significantly affect the call's
	// performance).</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Description</p>
	// <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
	// <p class="edef">Include the text Description (no html tag) field in the response. (This can affect the call's performance.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; ShippingCosts</p>
	// <p class="edef">Include basic shipping costs in the
	// response. (Use GetShippingCosts to retrieve more
	// details.)</p>
	// <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
	// <p class="edef">Include ItemSpecifics in the response.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
	// <p class="edef">Include Variations in the response.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; Compatibility</p>
	// <p class="edef">Include Compatibility in the response.</p>
	// <br>
	// <br>
	// Use a comma to specify multiple values. (In this case,
	// the results are cumulative.) See "GetSingleItem Samples"
	// for an example of how to use this field.<br>
	// <br>
	// See "Detail Controls" for a complete list of
	// fields that can be returned for each selector.
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetSingleItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSingleItemResponse"`

	*AbstractResponseType

	//
	// Contains details about the listing whose ID was specified in
	// the request.
	//
	Item *SimpleItemType `xml:"Item,omitempty"`
}

type GetUserProfileRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserProfileRequest"`

	*AbstractRequestType

	//
	// An eBay user ID is input into this field to retrieve information about that eBay user.
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// This inclusive filter is included to control the amount and type of user data that is retrieved.
	// <br>
	// <br>
	// If you don't include this field, a default set of fields is returned. Click the <b>Detail Controls</b> link below and see the  <b>none</b> column in that table to see the fields that are returned when no <b>IncludeSelector</b> value is used.
	// <br>
	// <br>
	// To retrieve more data than just the default fields, including detailed Feedback data, the <b>IncludeSelector</b> field can be included, and one to three values can be specified in this field. If multiple values are specified, each value is separated with a comma (,). The enumeration values that can be specified in the <b>IncludeSelector</b> field are discussed below.
	// <br>
	// <br>
	// <b>Applicable values</b>:
	// <p class="ename">&bull;&nbsp;&nbsp; Details</p>
	// <p class="edef">Including this value as an <b>IncludeSelector</b> value increases the number of fields that are returned under the <b>User</b> container in the response, including fields related to the user's profile page and eBay Store (if applicable). Compare the <b>none</b> and <b>Details</b> columns in the the <b>Detail Controls</b> table to see which additional fields are returned when the <b>Details</b> value is used in the <b>IncludeSelector</b> field.</p>
	// <p class="ename">&bull;&nbsp;&nbsp; FeedbackDetails</p>
	// <p class="edef">
	// If this value is included as an <b>IncludeSelector</b> value, the user's last five Feedback entries (as buyer or seller) are returned in the response. A separate <b>FeedbackDetails</b> container is returned for each Feedback entry, with detailed information about that Feedback entry.
	// </p>
	// <p class="ename">&bull;&nbsp;&nbsp; FeedbackHistory</p>
	// <p class="edef">If this value is included as an <b>IncludeSelector</b> value, a <b>FeedbackHistory</b> container is returned, and this container consists of detailed Feedback data on the eBay user. See <b>FeedbackHistory</b> container (and its child containers) for more information on the type of data that is returned.
	// </p>
	// <br>
	//
	IncludeSelector string `xml:"IncludeSelector,omitempty"`
}

type GetUserProfileResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserProfileResponse"`

	*AbstractResponseType

	//
	// This container consists of various details about the eBay user, including Feedback rating, Seller Level, link to profile page, and other information. This container is always returned, but more fields will be returned under this container if the user includes the <b>IncludeSelector</b> field in the request and sets its value to <code>Details</code>.
	//
	User *SimpleUserType `xml:"User,omitempty"`

	//
	// This container consists of numerous statistical data about the specified eBay user's Feedback history, including counts of Positive, Neutral,
	// and Negative Feedback entries for predefined time periods (last week, last month, last 6 months, and last year). For the <b>FeedbackHistory</b> container to be returned, the user must include the <b>IncludeSelector</b> field in the request and set its value to <code>FeedbackHistory</code>.
	//
	FeedbackHistory *FeedbackHistoryType `xml:"FeedbackHistory,omitempty"`

	//
	// Each <b>FeedbackDetails</b> container consists of detailed information about one Feedback entry for the specified eBay user. For <b>FeedbackDetails</b> containers to be returned, the user must include the <b>IncludeSelector</b> field in the request and set its value to <code>FeedbackDetails</code>.
	// <br/><br/>
	// The specified eBay user's last five Feedback entries (as buyer or seller) are returned in the response. It is possible that less than five Feedback entries will be returned if the eBay user does not have five recent Feedback entries.
	//
	FeedbackDetails []*FeedbackDetailType `xml:"FeedbackDetails,omitempty"`
}

type GeteBayTimeRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayTimeRequest"`

	*AbstractRequestType
}

type GeteBayTimeResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayTimeResponse"`

	*AbstractResponseType
}

type HalfCatalogProductType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	Title string `xml:"Title,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	DetailsURL *AnyURI `xml:"DetailsURL,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	StockPhotoURL *AnyURI `xml:"StockPhotoURL,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ShippingCostSummary *ShippingCostSummaryType `xml:"ShippingCostSummary,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	DisplayStockPhotos bool `xml:"DisplayStockPhotos,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ProductID []*ProductIDType `xml:"ProductID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	DomainName string `xml:"DomainName,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ItemArray *SimpleItemArrayType `xml:"ItemArray,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	ReviewCount int32 `xml:"ReviewCount,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfCatalogProductType</b> and all of its elements are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	MinPrice *AmountType `xml:"MinPrice,omitempty"`
}

type HalfProductsType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>HalfProductsType</b> and the <b>Product</b> element are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	Product []*HalfCatalogProductType `xml:"Product,omitempty"`
}

type HistogramEntryType struct {

	//
	// This is the name of eBay category domain. An eBay catalog product can be mapped to more than one eBay category domain.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This is the number of eBay catalog products associated with eBay category domain. If an eBay catalog product is mapped to more than one eBay category domain, it is counted separately for each domain. For example, if the same eBay catalog product appears in both <code>Children's Books</code> and <code>Fiction Books</code> domains, the count for both of these domains will include that eBay catalog product.
	//
	Count int32 `xml:"Count,omitempty"`
}

type InternationalShippingServiceOptionType struct {

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	ShippingInsuranceCost *AmountType `xml:"ShippingInsuranceCost,omitempty"`

	//
	// The name of an international shipping service option available to ship the item to specified international shipping destination. This field is always returned with each <b>InternationalShippingServiceOption</b> container.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the seller is using eBay's Global Shipping Program (GSP) to ship the item to the international location, the string value returned in this field is 'International Priority Shipping'.
	// </span>
	//
	ShippingServiceName string `xml:"ShippingServiceName,omitempty"`

	//
	// The cost of shipping each additional item if the same buyer purchases multiple quantity of the same order line item and uses the shipping service specified in the corresponding <b>ShippingServiceName</b> field. The seller should always supply this value for multiple-quantity, fixed-price listings. Sometimes, the seller will give the buyer a shipping discount if that buyer purchases multiple quantity of the same order line item, so this value should usually be less than the value set for <b>ShippingServiceCost</b>.
	// <br/><br/>
	// The value of this field can even be set to <code>0</code> by the seller if the seller wants to encourage buyers to buy multiple quantity of the item, or it could be that the seller can fit multiple quantities of the order line item in a single shipping package, so the seller is just passing this shipping savings onto the buyer.  This field is not applicable for single-quantity listings.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The seller is expected to provide the <b>ShippingServiceAdditionalCost</b> value for all multiple-quantity, fixed-price listings, but it is not a required field when creating, revising or relisting an item. So, if the <b>ShippingServiceAdditionalCost</b> is not returned in <b>GetShippingCosts</b>, it is likely that the seller has not provided this value, in which case the corresponding <b>ShippingServiceCost</b> value may be inaccurate if the user specifies an integer value greater than '1' in the <b>QuantitySold</b> of the call request.
	// </span>
	//
	ShippingServiceAdditionalCost *AmountType `xml:"ShippingServiceAdditionalCost,omitempty"`

	//
	// The cost to ship the quantity of items specified in the <b>QuantitySold</b> field in the call request. If the <b>QuantitySold</b> field is omitted, its value defaults to  <code>1</code>. For example, if the corresponding shipping service charges 5.99 to ship a quantity of 1, and 2.99 to ship each additional unit beyond the first unit, the cost shown in this field will be <code>8.98</code> (5.99 + 2.99) if the <b>QuantitySold</b> field in the call request is set to <code>2</code>. The corresponding <b>ShippingServiceAdditionalCost</b> field shows the cost to ship each additional item if the buyer purchases multiple quantity of the same order line item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The seller is expected to provide the <b>ShippingServiceAdditionalCost</b> value for all multiple-quantity, fixed-price listings, but it is not a required field when creating, revising or relisting an item. So, if the <b>ShippingServiceAdditionalCost</b> is not returned in <b>GetShippingCosts</b>, it is likely that the seller has not provided this value, in which case the <b>ShippingServiceCost</b> value may be inaccurate if the user specifies an integer value greater than '1' in the <b>QuantitySold</b> of the call request.
	// </span>
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// This integer value indicates the seller-preferred presentation order of the international shipping service options. A shipping service option with a <b>ShippingServicePriority</b> value of '1' indicates that the shipping service appears in the first position on the listing's View Item and Checkout page. Generally, both the domestic and international shipping service options are returned in order in the <b>GetShippingCosts</b> response. A seller can specify up to five international shipping service options (including the Global Shipping Program option). This field should always be returned with each <b>InternationalShippingServiceOption</b> container.
	//
	ShippingServicePriority int32 `xml:"ShippingServicePriority,omitempty"`

	//
	// An international location or region to which the item may be shipped via this
	// particular shipping service. These 'ship-to' locations are provided by the seller when they create, revise, or relist their item, or they can be controlled through a Shipping Business Policy associated with the listing. At a bare minimum, the country of the location specified through the <b>DestinationCountryCode</b> field of the call request shall be returned in this field, and possibly many other countries that are serviced by this shipping service option (or GSP).
	//
	ShipsTo []string `xml:"ShipsTo,omitempty"`

	//
	// This timestamp indicates the earliest date/time that the item could possibly reach the seller's destination based on the seller's stated handling time and the shipping service's transit time. This timestamp is based on an immediate purchase of the item at checkout.
	//
	EstimatedDeliveryMinTime time.Time `xml:"EstimatedDeliveryMinTime,omitempty"`

	//
	// This timestamp indicates the latest date/time that the item should reach the seller's destination based on the seller's stated handling time and the shipping service's transit time. This timestamp is based on an immediate purchase of the item at checkout.
	//
	EstimatedDeliveryMaxTime time.Time `xml:"EstimatedDeliveryMaxTime,omitempty"`

	//
	// The estimated cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This field is only applicable for international orders being handled through the Global Shipping Program; otherwise, it will not be returned.
	//
	ImportCharge *AmountType `xml:"ImportCharge,omitempty"`

	//
	// This field is no longer applicable and should not be returned for any international shipping service option.
	//
	ShippingServiceCutOffTime time.Time `xml:"ShippingServiceCutOffTime,omitempty"`
}

type ItemCompatibilityListType struct {

	//
	// A <b>Compatibility</b> container is returned for each motor vehicle that is compatible with the motor vehicle part or accessory. The Year, Make, Model, Trim, and Engine type of the vehicle is expressed through name-value pairs, and notes about compatibility (if available/applicable) is expressed through the <b>CompatibilityNotes</b> field.
	//
	Compatibility []*ItemCompatibilityType `xml:"Compatibility,omitempty"`
}

type ItemCompatibilityType struct {

	//
	// Each <b>NameValueList</b> container will contain one aspect of a motor vehicle that is compatible with the motor vehicle part or accessory. For example, the allowed names might include 'Year', 'Make', and 'Model',  'Trim', and 'Engine'.
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`

	//
	// This field contains any notes pertaining to the compatibility being specified. This field is only returned if set for the compatible vehicle.
	//
	CompatibilityNotes string `xml:"CompatibilityNotes,omitempty"`
}

type NameValueListArrayType struct {

	//
	// This list is an array of Item Specifics name-value pairs for an eBay Catalog product (if <b>FindProducts</b> is used) or Item Specifics name-value pairs for a single-variation listing or individual variation within a multiple-variation listing (if <b>GetSingleItem</b> or <b>GetMultipleItems</b> is used).
	// <br><br>
	// For example, Item Specifics for a motor vehicle might include a field like
	// Make=Toyota (where <code>Make</code> is returned in <b>Name</b> field, and <code>Toyota</code> is returned
	// in <b>Value</b> field) and Model=Prius (where <code>Model</code> is returned in <b>Name</b> field, and <code>Prius</code> is returned in <b>Value</b> field).<br>
	// <br>
	// In multiple-variation listings, the same name cannot appear in both
	// the <b>ItemSpecifics</b> node and  <b>Variation.VariationSpecifics</b> nodes. Common aspects for all variations within the multiple-variation listings will appear in the <b>ItemSpecifics</b> node, and aspects unique to individual variations within the multiple-variation listings will appear in the <b>Variation.VariationSpecifics</b> nodes.
	// <br><br>
	// For <b>GetSingleItem</b>, the user can use the <b>NameValueList</b> container in the call input to identify one or more variations to retrieve from a specific multiple-variation listing.
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`
}

type NameValueListType struct {

	//
	// The name of the Item Specific for either an eBay Catalog Product (<b>FindProducts</b> call only), a single-variation listing, and individual variation within a multiple-variation listing, or a Parts Compatibility aspect for a motor vehicle part or accessory listing.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// To control the data that is returned in a <b>GetSingleItem</b> or <b>GetMultipleItems</b> response, the <b>IncludeSelector</b> filter should be included. To see listing-level Item Specifics, include the <b>IncludeSelector</b> field and set its value to <b>ItemSpecifics</b>. To see variation-level Item Specifics (only applicable for multiple-variation listings), include the <b>IncludeSelector</b> field and set its value to <b>Variations</b>. To see Parts Compatibility name/value pairs  (only applicable for motor vehicle part or accessory listings with a compatible vehicle list), include the <b>IncludeSelector</b> field and set its value to <b>Compatibility</b>.
	// </span>
	//
	Name string `xml:"Name,omitempty"`

	//
	// The corresponding value of an Item Specific for either an eBay Catalog Product (<b>FindProducts</b> call only), a single-variation listing, an individual variation within a multiple-variation listing, or a Parts Compatibility aspect for a motor vehicle part or accessory listing.
	//
	Value []string `xml:"Value,omitempty"`
}

type PickUpInStoreDetailsType struct {

	//
	// This field is only returned (as <code>true</code>) if the listing is enabled for In-Store Pickup. A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multiple-quantity, fixed-price listings.
	// <br/><br/>
	// When a seller is successful at listing an item with the In-Store Pickup feature enabled, prospective buyers within a reasonable distance (25 miles or so) from one of the seller's stores (that has stock available) will see the "Available for In-Store Pickup" option on the View Item page, along with information on the closest phsical store that has the item.
	//
	EligibleForPickupInStore bool `xml:"EligibleForPickupInStore,omitempty"`
}

type PicturesType struct {

	//
	// This field defines the product aspect in which pictures in the listing will vary based on the individual variations. For example, if the product aspect in this field is <code>Color</code>, the picture URLs in each <b>VariationSpecificPictureSet</b> container would point to one or more pictures of the corresponding variation (defined in the <b>VariationSpecificValue</b> field).
	//
	VariationSpecificName string `xml:"VariationSpecificName,omitempty"`

	//
	// A <b>VariationSpecificPictureSet</b> container is returned for each product variation for which there are one or more pictures available, helping buyers distinguish between the different variations in the listing.
	// Pictures for multiple or all available variations can be included for a multiple-variation listing, but note that this is not a requirement for the seller. In other words, one multiple-variation listing might contain 10 different variations (varying by color), but the seller could choose to only include one or more pictures just for one particular color. However, the seller can make that listing more buyer-friendly if he/she provides pictures of all or most available colors.
	//
	VariationSpecificPictureSet []*VariationSpecificPictureSetType `xml:"VariationSpecificPictureSet,omitempty"`
}

type PopularSearchesType struct {
	CategoryID string `xml:"CategoryID,omitempty"`

	CategoryParentID string `xml:"CategoryParentID,omitempty"`

	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	AlternativeSearches string `xml:"AlternativeSearches,omitempty"`

	RelatedSearches string `xml:"RelatedSearches,omitempty"`

	CategoryName string `xml:"CategoryName,omitempty"`

	CategoryParentName string `xml:"CategoryParentName,omitempty"`
}

type ProductIDType struct {
	Value string

	//
	// This attribute value identifies the product identifier type being used. If <b>ProductID</b> is used in a <b>FindProducts</b> call, this attribute value is required.
	//
	Type *ProductIDCodeType `xml:"type,attr,omitempty"`
}

type QuantityInfo struct {

	//
	// This field indicates the minimum ticket quantity that must remain after a buyer purchases one or more (but not all) tickets in an event-based listing. This feature helps the seller avoid the scenario of being left with only one ticket in a multiple-quantity, fixed-priced event-based listing. In some cases, a solo seat to an event can be harder to sell, especially as the event date approaches.
	// <br> <br>
	// Based on the value of <b>MinimumRemnantSet</b> and the listing's available quantity (<b>Quantity</b>-<b>QuantitySold</b>), eBay calculates the quantity of tickets that a buyer can purchase. For example, suppose a seller lists 5 tickets, and wants at least 2 tickets remaining for the final buyer to purchase. In this case, the seller would set <b>MinimumRemnantSet</b> to '2'. This means a buyer can purchase 1, 2, 3, or 5 tickets, but not 4 (because 4 would leave the seller with 1 ticket).
	// <br> <br>
	// This field is currently only applicable for event ticket listings in the US and CA marketplaces, but may apply to other categories in the future. It is only returned if set by the seller in the listing.
	//
	MinimumRemnantSet int32 `xml:"MinimumRemnantSet,omitempty"`
}

type ReturnPolicyType struct {

	//
	// This field indicates how the seller compensates domestic buyers for <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Post-Order-Returns.html#return-reasons" target="_blank">remorse returns</a>. On many eBay marketplaces, 'Money Back' is the only option for domestic and international returns. The eBay US marketplace also allows sellers to offer buyers a 'Money Back Or Replacement' option, where the seller still wants the item they purchased, and prefers that the seller send an identical replacement item instead of a refund. This will typically happen if the originally purchased item arrived damaged or was missing parts.
	//
	Refund string `xml:"Refund,omitempty"`

	//
	// The value in this field indicates the number of days that a domestic buyer has to return an item. The return period begins when the item is marked "delivered" at the buyer's specified ship-to location.  Most marketplaces and categories support 30-day and 60-day return periods. The return period must be specified by the seller if that seller accepts returns (<b>ReturnsAcceptedOption=ReturnsAccepted</b>).
	//
	ReturnsWithin string `xml:"ReturnsWithin,omitempty"`

	//
	// This field is always returned with the <b>ReturnPolicy</b>  container, even if the seller does not accept returns for the item. If the value of this field is <code>ReturnsNotAccepted</code>, the seller does not accept domestic returns (except in the case of a defective item or 'significantly not as described' item), and this field may be the only field returned under the <b>ReturnPolicy</b> container. If the value of this field is <code>ReturnsAccepted</code>, the seller does accept domestic returns, and other fields under the <b>ReturnPolicy</b> container will state the length of the return period, the refund method, and order partner that is responsible for return shipping costs.
	//
	ReturnsAccepted string `xml:"ReturnsAccepted,omitempty"`

	//
	// This field contains the seller's detailed explanation for their Return Policy. This same description is displayed in the Return Policy section of the View Item page. A Return Policy description (and this field) is only supported in the following marketplaces:
	// <ul>
	// <li>Germany (DE)</li>
	// <li>Spain (ES)</li>
	// <li>France (FR)</li>
	// <li>Italy (IT)</li>
	// </ul>
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field is deprecated as of release 1061, as sellers are no longer allowed to offer product warranties through the Return Policy.
	//
	WarrantyOffered string `xml:"WarrantyOffered,omitempty"`

	//
	// This field is deprecated as of release 1061, as sellers are no longer allowed to offer product warranties through the Return Policy.
	//
	WarrantyType string `xml:"WarrantyType,omitempty"`

	//
	// This field is deprecated as of release 1061, as sellers are no longer allowed to offer product warranties through the Return Policy.
	//
	WarrantyDuration string `xml:"WarrantyDuration,omitempty"`

	//
	// The EAN (European Article Number) value is no longer a part of the Return Policy, so this field is deprecated. Instead, any EAN for a listing is returned in Item Specifics (if <b>IncludeSelector</b> value is set to <code>ItemSpecifics</code>).
	//
	EAN string `xml:"EAN,omitempty"`

	//
	// This field specifies either the 'Buyer' or the 'Seller' as the party who pays for domestic return shipping costs. It is up to the seller to decide whether the buyer or seller pays for return shipping costs, but the seller does have an incentive to pay return shipping costs, as the listing will be marked in search results as having '<b>Free Returns</b>' if the seller pays return shipping costs.
	// <br><br>
	// Note that the seller is always responsible for return shipping costs for SNAD-related issues, including defective items.
	//
	ShippingCostPaidBy string `xml:"ShippingCostPaidBy,omitempty"`

	//
	// This field is deprecated as of release 1061, and sellers are no longer allowed to charge buyers a restocking fee when returning items.
	//
	RestockingFeeValue string `xml:"RestockingFeeValue,omitempty"`

	//
	// This field is deprecated as of release 1061 and sellers are no longer allowed to charge buyers a restocking fee when returning items.
	//
	RestockingFeeValueOption string `xml:"RestockingFeeValueOption,omitempty"`

	//
	// This field indicates how the seller compensates international buyers for <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Post-Order-Returns.html#return-reasons" target="_blank">remorse returns</a>. On many eBay marketplaces, 'Money Back' is the only option for domestic and international returns. The eBay US marketplace also allows sellers to offer buyers a 'Money Back Or Replacement' option, where the seller still wants the item they purchased, and prefers that the seller send an identical replacement item instead of a refund. This will typically happen if the originally purchased item arrived damaged or was missing parts.
	//
	InternationalRefund string `xml:"InternationalRefund,omitempty"`

	//
	// The value in this field indicates the number of days that an international buyer has to return an item. The return period begins when the item is marked "delivered" at the buyer's specified ship-to location.  Most marketplaces and categories support 30-day and 60-day return periods. The return period must be specified by the seller if that seller accepts international returns from countries they ship to (<b>InternationalReturnsAcceptedOption=ReturnsAccepted</b>).
	//
	InternationalReturnsWithin string `xml:"InternationalReturnsWithin,omitempty"`

	//
	// This field is always returned with the <b>ReturnPolicy</b> container if the seller ships items to other countries, even if the seller does not accept returns for the item. If the value of this field is <code>ReturnsNotAccepted</code>, the seller does not accept international returns (except in the case of a defective item or 'significantly not as described' item). If the value of this field is <code>ReturnsAccepted</code>, the seller does accept international returns, and other fields under the <b>ReturnPolicy</b> container will state the length of the international return period, the refund method, and order partner that is responsible for return shipping costs.
	//
	InternationalReturnsAccepted string `xml:"InternationalReturnsAccepted,omitempty"`

	//
	// This field specifies either the 'Buyer' or the 'Seller' as the party who pays for international return shipping costs. It is up to the seller to decide whether the buyer or seller pays for return shipping costs, but the seller does have an incentive to pay return shipping costs, as the listing will be marked in search results as having '<b>Free Returns</b>' if the seller pays return shipping costs.
	// <br><br>
	// Note that the seller is always responsible for return shipping costs for SNAD-related issues, including defective items.
	//
	InternationalShippingCostPaidBy string `xml:"InternationalShippingCostPaidBy,omitempty"`
}

type ReviewDetailsType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewDetailsType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	AverageRating float32 `xml:"AverageRating,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewDetailsType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	Review []*ReviewType `xml:"Review,omitempty"`
}

type ReviewType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	Title string `xml:"Title,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	Rating int32 `xml:"Rating,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	Text string `xml:"Text,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ReviewType</b> and all of its elements are deprecated along with the <b>FindReviewsAndGuides</b> call.
	// </span>
	//
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`
}

type SalesTaxType struct {

	//
	// Percent of an item's price to be charged as the sales tax for the transaction. The sales tax percentage value is stored with a precision of three digits after the decimal point (##.###).
	//
	SalesTaxPercent float32 `xml:"SalesTaxPercent,omitempty"`

	//
	// State or jurisdiction for which the sales tax is applicable.
	// Only returned if the seller specified a value. This should be the same value that is passed into the <b>DestinationPostalCode</b> in the call request.
	//
	SalesTaxState string `xml:"SalesTaxState,omitempty"`

	//
	// This field is returned as <code>true</code> if shipping costs (in addition to item cost) are considered when calculating the sales tax amount. Shipping costs can only be taxed for US listings.
	//
	ShippingIncludedInTax bool `xml:"ShippingIncludedInTax,omitempty"`

	//
	// This is the expected tax amount based on the item cost (and shipping costs if <b>ShippingIncludedInTax</b> is <code>true</code>), the sales tax percentage, and the shipping destination.
	//
	SalesTaxAmount *AmountType `xml:"SalesTaxAmount,omitempty"`
}

type SellingStatusType struct {

	//
	// This field is no longer returned.
	//
	ConvertedCurrentPrice *AmountType `xml:"ConvertedCurrentPrice,omitempty"`

	//
	// This field is no longer returned. See <b>Variation.StartPrice</b> instead.
	//
	CurrentPrice *AmountType `xml:"CurrentPrice,omitempty"`

	//
	// This integer value indicates the quantity sold for the corresponding variation. You can subtract this integer value from the value in the <b>Variation.Quantity</b> field to determine the quantity of the variation that is still available for purchase.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// This field indicates the total quantity of the corresponding variation sold and picked up by buyers using the In-Store Pickup option. This value is the total quantity of this variation purchased by one or more buyers using the In-Store Pickup option, and is not the total number of In-Store Pickup orders for that ivariation. So, if two buyers selected the In-Store Pickup option, but each of these buyers bought a quantity of five of these variations (in same purchase), the <b>Item.Variations.Variation.SellingStatus.QuantitySoldByPickupInStore</b> value would be <code>10</code> and not <code>2</code>.
	// <br>
	// <br>
	// This field will only be returned if the listing is eligible for In-Store Pickup.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multiple-quantity, fixed-price listings.
	// </span>
	//
	QuantitySoldByPickupInStore int32 `xml:"QuantitySoldByPickupInStore,omitempty"`
}

type ShippingCostSummaryType struct {

	//
	// This field shows the name of the lowest-priced shipping service option that is available to the eBay user making the call. An example of a shipping service option is <b>USPS First Class Package</b>.
	// <br/><br/>
	// This field is only returned by the <b>GetShippingCosts</b> call (and not <b>GetSingleItem</b> or <b>GetMultipleItems</b> calls).
	//
	ShippingServiceName string `xml:"ShippingServiceName,omitempty"`

	//
	// This field shows the base shipping cost using the lowest-priced shipping service option that is available to the eBay user making the call.
	// <br/><br/>
	// For <b>GetShippingCosts</b> call, this is base shipping cost to ship the item using the shipping service option in the <b>ShippingServiceName</b> field. The quantity specified in the <b>QuantitySold</b> field in the call request is taken into account when calculating the cost.
	// <br/><br/>
	// For <b>GetSingleItem</b> and <b>GetMultipleItems</b> calls, this is base shipping cost of the cheapest available domestic shipping service option. The name of the shipping service option is not returned for these calls.
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// If this field is returned at all, its value is always '0.0' as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	//
	InsuranceCost *AmountType `xml:"InsuranceCost,omitempty"`

	//
	// This enumeration value indicates the shipping cost model associated with the  lowest-priced shipping service option that is available to the eBay user making the call. Examples of shipping cost models include flat-rate and
	// calculated shipping.
	// <br/><br/>
	// For <b>GetShippingCosts</b> call, this is the shipping cost model associated with the shipping service option in the <b>ShippingServiceName</b> field. The name of the shipping service option is not returned for the <b>GetSingleItem</b> and <b>GetMultipleItems</b> calls calls.
	//
	ShippingType *ShippingTypeCodeType `xml:"ShippingType,omitempty"`

	//
	// This field is only returned (as <code>true</code>) if 'Local Pickup' is the only available logistic option (no shipping options). With 'Local Pickup', the seller and buyer arrange the pickup location and time (off of the eBay platform).
	//
	LocalPickup bool `xml:"LocalPickup,omitempty"`

	//
	// If this field is returned at all, its value should be <code>NotOfferedOnSite</code>, as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`

	//
	// This is the localized cost to ship the item using the cheapest available domestic or international shipping service option. If the item is located in Germany, but the shipping destination is the US, this field will show the cost in Euros (EUR) and the <b>ShippingServiceCost</b> will show the cost in US dollars (USD).
	// <br/><br/>
	// For <b>GetShippingCosts</b> call, this is the localized base shipping cost to ship the item using the shipping service option in the <b>ShippingServiceName</b> field. The quantity specified in the <b>QuantitySold</b> field in the call request is taken into account when calculating the cost.
	// <br/><br/>
	// For <b>GetSingleItem</b> and <b>GetMultipleItems</b> calls, this is the localized base shipping cost of the cheapest available shipping service option to the country specified in the Site-ID header. The name of the shipping service option is not returned for these calls.
	//
	ListedShippingServiceCost *AmountType `xml:"ListedShippingServiceCost,omitempty"`

	//
	// The total cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This amount is calculated and supplied for each item by the international shipping provider when a buyer views the item properties.
	//
	ImportCharge *AmountType `xml:"ImportCharge,omitempty"`

	//
	// This field is for future use.
	//
	LogisticPlanType string `xml:"LogisticPlanType,omitempty"`
}

type ShippingDetailsType struct {

	//
	// This field is deprecated.
	//
	GetItFast bool `xml:"GetItFast,omitempty"`

	//
	// If this field is returned at all, its value is always '0.0' as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	//
	InsuranceCost *AmountType `xml:"InsuranceCost,omitempty"`

	//
	// If this field is returned at all, its value should be <code>NotOfferedOnSite</code>, as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`

	//
	// This container consists of detailed information for an international shipping service option that is available to an international buyer located at the shipping destination specified in the call request. A <b>InternationalShippingServiceOption</b> container is returned for each available international shipping service option. A seller can specify up to five international shipping service options (including the Global Shipping Program) in an eBay listing.
	// <br/><br/>
	// No <b>InternationalShippingServiceOption</b> containers are returned if the shipping destination specified in the call request is a domestic destination. If the shipping destination is a domestic location, see the <b>ShippingServiceOption</b> container instead.
	//
	InternationalShippingServiceOption []*InternationalShippingServiceOptionType `xml:"InternationalShippingServiceOption,omitempty"`

	//
	// This container is only returned if sales tax is applicable to the specified shipping destination.
	//
	SalesTax *SalesTaxType `xml:"SalesTax,omitempty"`

	//
	// This field is only returned if an unexpected error occurs during the attempted calculation of shipping costs.
	//
	ShippingRateErrorMessage string `xml:"ShippingRateErrorMessage,omitempty"`

	//
	// This container consists of detailed information for a domestic shipping service option that is available to a buyer located at the shipping destination specified in the call request. A <b>ShippingServiceOption</b> container is returned for each available domestic shipping service option. A seller can specify up to four domestic shipping service options in an eBay listing.
	// <br/><br/>
	// No <b>ShippingServiceOption</b> containers are returned if the shipping destination specified in the call request is an international destination. If the shipping destination is an international location, see the <b>InternationalShippingServiceOption</b> container instead.
	//
	ShippingServiceOption []*ShippingServiceOptionType `xml:"ShippingServiceOption,omitempty"`

	//
	// This container includes sales tax percentage rates for one or more jurisdictions where the seller has configured and applied account-level sales tax settings for the listing. Changes to sales tax settings can be made in Sales Tax Table in My eBay, or through the <b>SetTaxTable</b> call of the Trading API. This container is returned as an empty element if no sales tax rates have been set up for any jurisdictions.
	//
	TaxTable *TaxTableType `xml:"TaxTable,omitempty"`

	//
	// If this field is returned at all, its value is always '0.0' as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	//
	InternationalInsuranceCost *AmountType `xml:"InternationalInsuranceCost,omitempty"`

	//
	// If this field is returned at all, its value should be <code>NotOfferedOnSite</code>, as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	//
	InternationalInsuranceOption *InsuranceOptionCodeType `xml:"InternationalInsuranceOption,omitempty"`

	//
	// This field returns the cost of cash-on-delivery for the listing. This field is only applicable to the Italy site (site ID 101), and is only returned if cash-on-delivery is the only available logistics type for the listing.
	//
	CODCost *AmountType `xml:"CODCost,omitempty"`

	//
	// One or more <b>ExcludeShipToLocation</b> fields are returned at the shipping service option level if the seller has excluded one or more geographical regions (such as 'Middle East' or 'Southeast Asia'), individual countries, individual states/provinces, or special domestic regions (such as Alaska/Hawaii or PO Boxes for the US). If a seller decides to exclude Hawaii and Alaska, an <b>ExcludeShipToLocation</b> field would be returned with a value of <code>Alaska/Hawaii</code> for each domestic shipping service option. For international shipping, if a seller ships globally but decides to exclude the 'Middle East', an <b>ExcludeShipToLocation</b> field would be returned with a value of <code>Middle East</code> for each international shipping service option.
	// <br/><br/>
	// 'Ship-to' locations and excluded shipping locations are set by the seller through Shipping Rate Tables in My eBay, through a Shipping/Fulfillment Business Policy associated with a listing, or through the <strong>ShipToLocation</strong> and <strong>ExcludeShipToLocation</strong> fields in an Add/Revise/Relist call in the Trading API.
	//
	ExcludeShipToLocation []string `xml:"ExcludeShipToLocation,omitempty"`
}

type ShippingServiceOptionType struct {

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	ShippingInsuranceCost *AmountType `xml:"ShippingInsuranceCost,omitempty"`

	//
	// The name of a domestic shipping service option available to ship the item to specified domestic shipping destination. This field is always returned with each <b>ShippingServiceOption</b> container.
	//
	ShippingServiceName string `xml:"ShippingServiceName,omitempty"`

	//
	// Reserved for internal or future use.
	//
	LogisticPlanType string `xml:"LogisticPlanType,omitempty"`

	//
	// The cost to ship the quantity of items specified in the <b>QuantitySold</b> field in the call request. If the <b>QuantitySold</b> field is omitted, its value defaults to <code>1</code>. For example, if the corresponding shipping service charges 5.99 to ship a quantity of 1, and 2.99 to ship each additional unit beyond the first unit, the cost shown in this field will be <code>8.98</code> (5.99 + 2.99) if the <b>QuantitySold</b> field in the call request is set to <code>2</code>. The corresponding <b>ShippingServiceAdditionalCost</b> field shows the cost to ship each additional item if the buyer purchases multiple quantity of the same order line item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The seller is expected to provide the <b>ShippingServiceAdditionalCost</b> value for all multiple-quantity, fixed-price listings, but it is not a required field when creating, revising or relisting an item. So, if the <b>ShippingServiceAdditionalCost</b> is not returned in <b>GetShippingCosts</b>, it is likely that the seller has not provided this value, in which case the <b>ShippingServiceCost</b> value may be inaccurate if the user specifies an integer value greater than '1' in the <b>QuantitySold</b> of the call request.
	// </span>
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// The cost of shipping each additional item if the same buyer purchases multiple quantity of the same order line item and uses the shipping service specified in the corresponding <b>ShippingServiceName</b> field. The seller should always supply this value for multiple-quantity, fixed-price listings. Sometimes, the seller will give the buyer a shipping discount if that buyer purchases multiple quantity of the same order line item, so this value should usually be less than the value set for <b>ShippingServiceCost</b>.
	// <br/><br/>
	// The value of this field can even be set to <code>0</code> by the seller if the seller wants to encourage buyers to buy multiple quantity of the item, or it could be that the seller can fit multiple quantities of the order line item in a single shipping package, so the seller is just passing this shipping savings onto the buyer.  This field is not applicable for single-quantity listings.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The seller is expected to provide the <b>ShippingServiceAdditionalCost</b> value for all multiple-quantity, fixed-price listings, but it is not a required field when creating, revising or relisting an item. So, if the <b>ShippingServiceAdditionalCost</b> is not returned in <b>GetShippingCosts</b>, it is likely that the seller has not provided this value, in which case the corresponding <b>ShippingServiceCost</b> value may be inaccurate if the user specifies an integer value greater than '1' in the <b>QuantitySold</b> of the call request.
	// </span>
	//
	ShippingServiceAdditionalCost *AmountType `xml:"ShippingServiceAdditionalCost,omitempty"`

	//
	// This integer value indicates the seller-preferred presentation order of the domestic shipping service options. A shipping service option with a <b>ShippingServicePriority</b> value of '1' indicates that the shipping service appears in the first position on the listing's View Item and Checkout page. Generally, both the domestic and international shipping service options are returned in order in the <b>GetShippingCosts</b> response. A seller can specify up to four domestic shipping service options. This field should always be returned with each <b>ShippingServiceOption</b> container.
	//
	ShippingServicePriority int32 `xml:"ShippingServicePriority,omitempty"`

	//
	// This field is only returned if <code>true</code>, and indicates if the corresponding shipping service is an expedited shipping service.
	//
	ExpeditedService bool `xml:"ExpeditedService,omitempty"`

	//
	// The integer value indicates the minimum number of business days that it will take for the item to be shipped (door-to-door) to the buyer using the corresponding shipping service option. The actual shipping carrier defines the minimum transit time, and not the seller. Take into account that the transit time is separate from the seller's stated handling time, so if the seller's handling time is two business days, and the transit time is three business days, the buyer can expect to receive their item in about five business days after payment has been made.
	//
	ShippingTimeMin int32 `xml:"ShippingTimeMin,omitempty"`

	//
	// The integer value indicates the maximum number of business days that it will take for the item to be shipped (door-to-door) to the buyer using the corresponding shipping service option. The actual shipping carrier defines the maximum transit time, and not the seller. Take into account that the transit time is separate from the seller's stated handling time, so if the seller's handling time is two business days, and the transit time is three business days, the buyer can expect to receive their item in about five business days after payment has been made.
	//
	ShippingTimeMax int32 `xml:"ShippingTimeMax,omitempty"`

	//
	// This field is only applicable and returned if the corresponding shipping service charges a shipping surcharge to the shipping destination. For example, a shipping surcharge may apply if a buyer from Alaska or Hawaii ordered an item from the Continental US, and the seller is using UPS to ship the item. If a shipping surcharge is applicable, the <b>ShippingServiceCost</b> field will account for this additional charge.
	//
	ShippingSurcharge *AmountType `xml:"ShippingSurcharge,omitempty"`

	//
	// A domestic location or region to which the item may be shipped via this
	// particular shipping service. These 'ship-to' locations are provided by the seller when they create, revise, or relist their item, or they can be controlled through a Shipping Business Policy associated with the listing. At a bare minimum, the country of the location specified through the <b>DestinationCountryCode</b> field of the call request shall be returned in this field, or possibly 'Worldwide' if the shipping service option serves multiple countries.
	//
	ShipsTo []string `xml:"ShipsTo,omitempty"`

	//
	// The timestamp in this field shows the estimated date and time that the item will be delivered to the buyer based on the corresponding shipping service's stated minimum transit time (specified in the <b>ShippingTimeMin</b> field in business days).
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// Note that the estimated delivery 'window' that is defined through the <b>EstimatedDeliveryMinTime</b> and <b>EstimatedDeliveryMaxTime</b> should not be considered completely accurate because the seller's stated handling time is not considered in the calculation, and it is also based on the transaction (and payment) occurring right away.
	// </span>
	//
	EstimatedDeliveryMinTime time.Time `xml:"EstimatedDeliveryMinTime,omitempty"`

	//
	// The timestamp in this field shows the estimated date and time that the item will be delivered to the buyer based on the corresponding shipping service's stated maximum transit time (specified in the <b>ShippingTimeMax</b> field in business days).
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// Note that the estimated delivery 'window' that is defined through the <b>EstimatedDeliveryMinTime</b> and <b>EstimatedDeliveryMaxTime</b> should not be considered completely accurate because the seller's stated handling time is not considered in the calculation, and it is also based on the transaction (and payment) occurring right away.
	// </span>
	//
	EstimatedDeliveryMaxTime time.Time `xml:"EstimatedDeliveryMaxTime,omitempty"`

	//
	// This field is only returned if <code>true</code>, and indicates if the corresponding shipping service is a 'Fast and Free' shipping service. With a 'Fast and Free' shipping service, a buyer in the specified destination can expect to receive their item within four business days at no cost (and the <b>ShippingServiceCost</b> value should be <code>0.0</code>).
	//
	FastAndFree bool `xml:"FastAndFree,omitempty"`

	//
	// This field is no longer applicable and should not be returned for any international shipping service option.
	//
	ShippingServiceCutOffTime time.Time `xml:"ShippingServiceCutOffTime,omitempty"`
}

type SimpleItemArrayType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>SimpleItemArrayType</b> and the <b>Item</b> element are deprecated along with the <b>FindHalfProducts</b> call.
	// </span>
	//
	//
	Item []*SimpleItemType `xml:"Item,omitempty"`
}

type SimpleItemType struct {

	//
	// This boolean field indicates whether the seller will accept a Best Offer for the item. The Best Offer feature allows a buyer to propose a price that is lower than the fixed price or lower than the current bid price on an auction listing. A buyer should consider their Best Offer as a binding offer, and if the seller accepts the offer, that buyer is expected to purchase the item (and is actually charged immediately if the listing is set up for immediate payment.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// For auction listings, either the Best Offer feature or the Buy It Now feature can be enabled on the listing, but not both features. Once a qualifying bid is made on an auction listing, both the Best Offer feature or the Buy It Now feature cease being an option to interested buyers.
	// </span>
	//
	BestOfferEnabled bool `xml:"BestOfferEnabled,omitempty"`

	//
	// This field is only returned if a seller enabled an auction listing with the Buy It Now feature. Sellers have the option of enabling the Buy It Now feature on auction listings. The price in this field is the price that an interested buyer has to pay if that buyer wishes to bypass the auction procedure, and purchase the item immediately. The price in the field reflects the currency used in the eBay site's country. If an interested international buyer wants to view the Buy It Now price in their country's currency, that buyer should view the <b>ConvertedBuyItNowPrice</b> field instead.
	// <br />
	// <br />
	// Once a qualifying bid is made on an auction listing, the Buy It Now feature ceases being an option to interested buyers. Note that it is possible that the <b>BuyItNowPrice</b> field may still get returned even after the Buy It Now feature is disabled, but the <b>BuyItNowAvailable</b> field should stop getting returned, since that field is only returned when <code>true</code>.
	// <br>
	// <br />
	// To see the fixed price for a fixed-price or classified ad listing, or the starting/current bid price for an auction listing, see the <b>CurrentPrice</b> or <b>ConvertedCurrentPrice</b> fields instead.
	//
	BuyItNowPrice *AmountType `xml:"BuyItNowPrice,omitempty"`

	//
	// The seller's description of the listing. This field is only returned if the <b>IncludeSelector</b> field is included in the call request, and its value is set to either <code>TextDescription</code> or <code>Description</code>. If the <code>Description</code> value is used, the full description is returned, with all HTML, XML, or CSS markup used in the listing (if any) by the seller. To only view the actual text of the listing description (no markup tags), the <code>TextDescription</code> value shall be used instead.
	// <br>
	// <br>
	// For product-based listings that are using the Product Description defined in the associated eBay catalog product, this field will either not be returned, or it will be returned as an empty element.
	//
	Description string `xml:"Description,omitempty"`

	//
	// The unique identifier of the eBay listing. This will be the same <b>ItemID</b> value that is passed into the call request.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// This field is only returned if the Buy It Now feature is enabled and available on an active auction listing. This field is only returned if <code>true</code>. With the Buy It Now feature, interested buyers have the option of bypassing the auction procedure, and purchasing the item immediately at the price shown in the <b>BuyItNowPrice</b> field (or in the <b>ConvertedBuyItNowPrice</b> field for international buyers.
	// <br />
	// <br />
	// Once a qualifying bid is made on an auction listing, the Buy It Now feature ceases being an option to interested buyers, and the <b>BuyItNowAvailable</b> field will no longer be returned for the active auction listing.
	//
	BuyItNowAvailable bool `xml:"BuyItNowAvailable,omitempty"`

	//
	// This field is only returned if a seller enabled an auction listing with the Buy It Now feature. Sellers have the option of enabling the Buy It Now feature on auction listings. The price in this field is the price that an interested buyer has to pay if that buyer wishes to bypass the auction procedure, and purchase the item immediately. The price in the field reflects the currency used in the buyer's country. This value and the <b>BuyItNowPrice</b> will be the same for domestic buyers (for example, a US buyer purchasing an item on the US site).
	// <br />
	// <br />
	// Once a qualifying bid is made on an auction listing, the Buy It Now feature ceases being an option to interested buyers. Note that it is possible that the <b>ConvertedBuyItNowPrice</b> field may still get returned even after the Buy It Now feature is disabled, but the <b>BuyItNowAvailable</b> field should stop getting returned, since that field is only returned when <code>true</code>.
	// <br />
	// <br />
	// To see the fixed price for a fixed-price or classified ad listing, or the starting/current bid price for an auction listing, see the <b>ConvertedCurrentPrice</b> or <b>CurrentPrice</b>   fields instead.
	//
	ConvertedBuyItNowPrice *AmountType `xml:"ConvertedBuyItNowPrice,omitempty"`

	//
	// For active listings, this timestamp indicates the date and time when the listing is scheduled to end, and for recently ended listings, this timestamp indicates the date and time when the listing actually ended.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This timestamp indicates the date and time when the listing started.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This field shows the URL to the listing's View Item page on the eBay marketplace.
	//
	ViewItemURLForNaturalSearch *AnyURI `xml:"ViewItemURLForNaturalSearch,omitempty"`

	//
	// The enumeration value in this field indicates the format of the listing, such as auction, fixed-price, or classified ad format. See the <a href="types/ListingTypeCodeType.html">ListingTypeCodeType</a> definition to view the supported enumeration values.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// The text string in this field provides the physical location of the item. Generally, this text will show the city and state/province of the item's location, but it may vary, and sometimes only a city will appear, or sometimes acronymns will be used, and other times the full city and state will be spelled out. This gives the buyer a general indication of where the item will be shipped from, and if calculated shipping is used, shipping charges may be higher the further away that the buyer resides from the shipping location.
	//
	Location string `xml:"Location,omitempty"`

	//
	// Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// At this time, if the seller is opted in to the new eBay Managed Payments program, the available payment methods (which are controlled by eBay and not the seller) may not be returned, but those payment methods will be exposed on the listing's View Item page. For classified ad listings, the available payment methods may appear in the response, but be aware that the exchange of money for a purchase happens off of eBay's platform.
	// </span>
	//
	PaymentMethods []*BuyerPaymentMethodCodeType `xml:"PaymentMethods,omitempty"`

	//
	// This field shows the URL to the thumbnail-size image of the listing's Gallery picture. The 'Gallery Picture' is the picture that displays by default when a user first visits a listing's View Item page.
	// <br>
	// <br>
	// eBay listing images must be one of the following image formats: JPEG, BMP, TIF, or GIF.
	// <br>
	// <br>
	// This field is generally always returned as long as the seller is using eBay's picture server (also known as EPS) to host the listing's images.
	//
	GalleryURL *AnyURI `xml:"GalleryURL,omitempty"`

	//
	// This field shows the URL to a full-size version of one image associated with the eBay listing. A <b>PictureURL</b> field is returned for each image in the eBay listing. At least one <b>PictureURL</b> field is always returned since every eBay listing must have at least one picture.
	// <br>
	// <br>
	// Many eBay categories support up to 12 pictures, and motor vehicle categories support up to 24 pictures.
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`

	//
	// This string value is the postal code (or zip code) of the item's physical location. Knowing the location gives the buyer a general indication of where the item will be shipped from, and if calculated shipping is used, shipping charges may be higher the further away that the buyer resides from the shipping location.
	//
	PostalCode string `xml:"PostalCode,omitempty"`

	//
	// The unique identifier of the eBay listing's primay category. This field is always returned. Some listings are shown in an additional secondary category, and if this is the case, the unique identifier of the secondary category is shown in the <b>SecondaryCategoryID</b> field.
	//
	PrimaryCategoryID string `xml:"PrimaryCategoryID,omitempty"`

	//
	// This string field shows the full category path (using category names) to the primary listing category, starting with the L1 category and ending with the name of the primary listing category. This is a fully qualified category breadcrumb (e.g., Cell Phones & Accessories:Cell Phones & Smartphones).
	//
	PrimaryCategoryName string `xml:"PrimaryCategoryName,omitempty"`

	//
	// The quantity of the item available for purchase when the seller created, revised, or relisted the item. An auction listing always has a <strong>Quantity</strong> value of <code>1</code>, but a fixed-price listing can have multiple quantity of an item.
	// <br>
	// <br>
	// In a multiple-quantity, fixed-price listing, the user must also look at the <strong>QuantitySold</strong> field, and if the value of this field is an integer value greater than '0', that integer value should be subtracted from the value in the <strong>Quantity</strong> field. So, if the <strong>Quantity</strong> field shows a value of '7', and the <strong>QuantitySold</strong> field shows a value of '3', the quantity available is actually '4' (7 - 3 = 4).
	// <br />
	// <br />
	// <span class="tablenote"><strong>Note:</strong>
	// The <strong>Quantity</strong> field is always returned except in the case of a multiple-variation listing, and the user sets the <strong>IncludeSelector</strong> filter to <code>Variations</code>. In this particular case, the (listing-level) <strong>Quantity</strong> field  is not returned, and instead, the user will look at the <strong>Variation.Quantity</strong> and <strong>Variation.SellingStatus.QuantitySold</strong> fields to get the quantity available for each item variation in the listing. If the user retrieves a multiple-variation listing, but does not set the <strong>IncludeSelector</strong> filter to <code>Variations</code>, the listing-level <strong>Quantity</strong> and <strong>QuantitySold</strong> fields are returned, and these fields' values will be the cumulative values of all item variations in the listing.
	// </span>
	// <br />
	// <span class="tablenote"><strong>Note:</strong>
	// As mentioned earlier, an auction listing can only have a quantity of '1', but a lot-based auction listing can have multiple identical/similar items sold as one unit for one price. For example, instead of listing 10 light bulbs for US 2.00 each, they might list 10 light bulbs for USD 20.00 (where you have to buy all 10). For lot-based listings (which are also supported by the fixed-price format), the number of identical/similar items in the 'lot' is shown in the <strong>LotSize</strong> field. The seller is also expected to summarize all items in the lot in the <strong>Description</strong> field.
	// </span>
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// This container provides a few details about the listing's seller, including the seller's eBay user ID, Feedback Score, and Positive Feedback Percentage. This container is only returned if <strong>IncludeSelector</strong> is included in the request and set to <code>Details</code>.
	//
	Seller *SimpleUserType `xml:"Seller,omitempty"`

	//
	// This integer value indicates the number of bids that have been placed on an auction item. This field is only applicable to auction listings, but it is always returned for all listings, and its value will be '0' if bids are not applicable to the listing.
	//
	BidCount int32 `xml:"BidCount,omitempty"`

	//
	// In a fixed-price or classified ad listing, this price is the current price of the item, shown in the currency of the user's country. In an active auction listing, this field's value reflects the current bid price for the auction item, so any submitted bids must be above this value. If the Buy It Now feature is available for an auction item (look for <b>BuyItNowAvailable</b> field), the user will want to look at the <b>ConvertedBuyItNowPrice</b> field instead if that user is interested in skipping the auction process and buying that item immediately.
	// <br />
	// <br />
	// <span class="tablenote"><strong>Note:</strong>
	// If the user retrieves a multiple-variation listing, and the <strong>IncludeSelector</strong> filter is set to <code>Variations</code>, the <strong>ConvertedCurrentPrice</strong> field is still returned, but its value will reflect the lowest-priced item variation. So, if the multiple-variation listing has item variations priced from 7.99 to 12.99, the <strong>ConvertedCurrentPrice</strong> field's value will show '7.99'. If the price of all item variations are the same, the <strong>ConvertedCurrentPrice</strong> field value will be accurate, but it is recommended that the user scan down to individual <strong>Variation.StartPrice</strong> fields to get the accurate price for all item variations.
	// </span>
	//
	ConvertedCurrentPrice *AmountType `xml:"ConvertedCurrentPrice,omitempty"`

	//
	// In a fixed-price or classified ad listing, this price is the current price of the item, shown in the currency of the listing site's country. In an active auction listing, this field's value reflects the current bid price for the auction item, so any submitted bids must be above this value. If the Buy It Now feature is available for an auction item (look for <b>BuyItNowAvailable</b> field), the user will want to look at the <b>ConvertedBuyItNowPrice</b> (or <b>ConvertedBuyItNowPrice</b>)  field instead if that user is interested in skipping the auction process and buying that item immediately.
	// <br />
	// <br />
	// This field is only returned if the <b>IncludeSelector</b> field is included and set to <code>Details</code>. Alternatively, the user can view the <b>ConvertedCurrentPrice</b> field, as this field shows the price in the currency of the user's country, and it is always returned.
	// <br />
	// <br />
	// <span class="tablenote"><strong>Note:</strong>
	// If the user retrieves a multiple-variation listing, and the <strong>IncludeSelector</strong> filter is set to <code>Variations</code>, the <b>CurrentPrice</b> is not returned, but the <strong>ConvertedCurrentPrice</strong> field is returned, but its value will reflect the lowest-priced item variation. So, if the multiple-variation listing has item variations priced from 7.99 to 12.99, the <strong>ConvertedCurrentPrice</strong> field's value will show '7.99'. If the price of all item variations are the same, the <strong>ConvertedCurrentPrice</strong> field value will be accurate, but it is recommended that the user scan down to individual <strong>Variation.StartPrice</strong> fields to get the accurate price for all item variations.
	// </span>
	//
	CurrentPrice *AmountType `xml:"CurrentPrice,omitempty"`

	//
	// This container provides a few details about the current high bidder for an active auction listing, or the winning bidder for a completed auction listing. This container is only returned for auction listings with at least one bid, and only if the <strong>IncludeSelector</strong> filter is included in the request and set to <code>Details</code>. The high bidder details include the bidder's eBay user ID and Feedback Score. For the <strong>GetItemStatus</strong> call, only the eBay user ID is returned.
	// <br>
	// <br>
	// <span class="tablenote"><strong>Note:</strong>
	// The eBay user ID and the Feedback data will actually be obfuscated to all users except for the owner (seller) of the listing, so essentially, the <strong>HighBidder</strong> container only has value to the seller of the listing.
	// </span>
	//
	HighBidder *SimpleUserType `xml:"HighBidder,omitempty"`

	//
	// This enumeration value indicates the current status of the listing. The three different listing states are discussed below.
	//
	ListingStatus *ListingStatusCodeType `xml:"ListingStatus,omitempty"`

	//
	// This integer value indicates the quantity of items sold for the listing. If the <strong>IncludeSelector</strong> filter is included in the request and set to <code>Details</code>, this field is always returned even if its value is '0'.
	// <br>
	// <br>
	// If the <strong>QuantitySold</strong> value is greater than '0', this value should be subtracted from the value in the <strong>Quantity</strong> field to get the accurate quantity that is available for purchase.
	// <br>
	// <br>
	// <span class="tablenote"><strong>Note:</strong>
	// If the <strong>IncludeSelector</strong> filter is included in the request and set to <code>Details</code>, but the retrieved listing is a multiple-variation listing, the <strong>Quantity</strong> and <strong>QuantitySold</strong> field values will reflect the quantity and quantity sold of all item variations in the listing. If a user wanted quantity available and quantity sold information on individual item variations, that user would set the <strong>IncludeSelector</strong> filter to <code>Variations</code> instead, and the user will look at the <strong>Variation.Quantity</strong> and <strong>Variation.SellingStatus.QuantitySold</strong> fields to get the quantity available for each item variation in the listing.
	// </span>
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// This boolean field indicates if the current/highest bid price has matched or exceeded the price set as the Reserve Price by the seller. A Reserve Price is the lowest price at which the seller is willing to sell
	// the item through an auction. If the highest bid does not meet or exceed the Reserve Price, the auction listing will end without a sale (winning bidder) when the scheduled end time is reached.
	// <br>
	// <br>
	// The Reserve Price must be higher than the starting bid price, but lower than the Buy It Now price (if one is set). This field is only applicable to auction listings, and only returned for auction listings if the seller has set a Reserve Price.
	//
	ReserveMet bool `xml:"ReserveMet,omitempty"`

	//
	// A <strong>ShipToLocations</strong> field is returned for each domestic or international region that the seller is willing to ship the item. At least one <strong>ShipToLocations</strong> field should be returned for every listing. 'Ship-to' locations and excluded shipping locations are set by the seller through Shipping Rate Tables in My eBay, through a Shipping/Fulfillment Business Policy associated with a listing, or through the <strong>ShipToLocations</strong> and <strong>ExcludeShipToLocation</strong> fields in an Add/Revise/Relist call in the Trading API.
	// <br>
	// <br>
	// 'Ship-to' locations range from continents and other large geographical regions, such as <code>Africa</code>, <code>Asia</code>, <code>Caribbean</code>, or <code>MiddleEast</code>, all the way down to the state/province level and even cities within those state/provinces. A user will be able to see the international and domestic shipping regions that can be set by looking at the <strong>Shipping rate tables</strong> UI in My eBay. The Trading API's <strong>GeteBayDetails</strong> can also be used to view available shipping locations.
	// <br>
	// <br>
	// If a US seller only ships to domestic locations, the only <strong>ShipToLocations</strong> value that should be returned is <code>US</code>. If a US seller is willing to ship to any location in the world, the only <strong>ShipToLocations</strong> value that should be returned is <code>Worldwide</code>
	// <br>
	// <br>
	// Countries are represented by the two-digit codes defined in the ISO 3166 standard, or these codes can also be found in the <a href="types/CountryCodeType.html">CountryCodeType</a> definition.
	//
	ShipToLocations []string `xml:"ShipToLocations,omitempty"`

	//
	// This enumeration value indicates the eBay marketplace on which the item was originally listed. For example, if the item is listed on the eBay US site, the value would be <code>US</code>. If it's listed on the eBay Germany site, the value would be <code>Germany</code>.
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// The value in this field indicates the precise time left before the listing is scheduled to end. The format used in this field is the format defined in the ISO 8601 duration format standard. See the  <a href="types/simpletypes.html#duration">duration</a> simple type definition for more information on syntax/notation used for this type.
	// <br>
	// <br>
	// This field is always returned, even if the listing is in the <code>Completed</code> state. A completed/ended listing will essentially have 0 seconds left, so the <b>Completed</b> value will be <code>PT0S</code>, which indicates '0 seconds' left.
	//
	TimeLeft *Duration `xml:"TimeLeft,omitempty"`

	//
	// The listing title, as it appears in search results or on the View Item page.
	// <br />
	//
	Title string `xml:"Title,omitempty"`

	//
	// This container returns a few details of the lowest-priced shipping service option that is available to the eBay user making the call. For Calculated shipping, the item's location and the destination location are considered when calculating the shipping cost.
	// <br>
	// <br>
	// <span class="tablenote">
	// <strong>Important:</strong> To retrieve detailed information on every shipping service option available that the seller has set for the listing, the <b>GetShippingCosts</b> call is the better call to use, as the <b>GetSingleItem</b> and <b>GetMultipleItems</b> calls only return the <b>ShippingCostSummary</b> container.
	// </span>
	//
	ShippingCostSummary *ShippingCostSummaryType `xml:"ShippingCostSummary,omitempty"`

	//
	// This container is a list of Item Specific name-value pairs used by the seller to provide desciptive details of an item in a structured manner. Depending on the eBay category, some Item Specifics are mandatory (including some GTIN values), some are recommended by eBay, and some are fully optional to the seller. A full set of helpful, accurate Item Specifics are always helpful to prospective buyers in assisting them to find and purchase the right product.
	// <br>
	// <br>
	// A book's Item Specifics name-value pairs might include
	// <code>Publication Year=2017</code> and <code>Format=Hardcover</code>. A motor vehicle's
	// Item Specifics name-value pairs might include <code>Make=
	// Toyota</code>, <code>Model=Prius</code>, and <code>Year=2017</code>. An event listing's Item Specifics name-value pairs might include <code>Event Type=Concert</code> and <code>Venue Name=The Fillmore</code>.
	// <br>
	// <br>
	// In order for Item Specifics to be returned, the <b>IncludeSelector</b> must be included in the call request and set to <code>ItemSpecifics</code>. Most eBay listings will include at least a few Item Specifics.
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// The number of times the listing's View Item page has been viewed (as determined by
	// eBay). Only returned if the seller has chosen to include a hit counter in the
	// listing, and if the seller has also chosen to make the listing's hit count publicly
	// visible. This field is retrieved asynchronously. If you believe the item has a
	// publicly visible hit count, but this field is not returned, retry the call.
	//
	HitCount int64 `xml:"HitCount,omitempty"`

	//
	// The subtitle of the listing. This field is only returned if the seller included a subtitle for the listing and the <b>IncludeSelector</b> is included in the call request and set to <code>Details</code>.
	//
	Subtitle string `xml:"Subtitle,omitempty"`

	//
	// This field shows the full path to the primary listing category, starting with the Category ID of the Level 1 (L1) category, and all the way to primary listing category (also referred to as the leaf category). So, if the primary listing category is a Level 4 (L4) category, the Category ID path in this field might look like the following, where '6000' is the L1 category ID, and '6444' is the primary listing category ID:
	// <br>
	// <br>
	// <code><PrimaryCategoryIDPath>6000:6001:6016:6444</PrimaryCategoryIDPath></code>
	//
	PrimaryCategoryIDPath string `xml:"PrimaryCategoryIDPath,omitempty"`

	//
	// The unique identifier of the eBay listing's secondary category. This field is only returned if the listing is surfacing in a secondary category.  The listing's primary category is found in the <b>PrimaryCategoryID</b> field.
	//
	SecondaryCategoryID string `xml:"SecondaryCategoryID,omitempty"`

	//
	// This string field shows the full category path (using category names) to the secondary listing category, starting with the L1 category and ending with the name of the secondary listing category. This field is only returned if the listing is surfacing in a secondary category.
	//
	SecondaryCategoryName string `xml:"SecondaryCategoryName,omitempty"`

	//
	// This field shows the full path to the secondary listing category, starting with the Category ID of the Level 1 (L1) category, and all the way to secondary listing category. This field is only returned if the listing is surfacing in a secondary category.
	//
	SecondaryCategoryIDPath string `xml:"SecondaryCategoryIDPath,omitempty"`

	//
	// This container is returned if any percentage of the sales proceeds is going to a nonprofit organization registered with the PayPal Giving Fund. This container consists of details related to the nonprofit charity organization, including the name and identifier of the charity, as well as the percentage rate of the sale proceeds that will go to the charity for each sale.
	// <br>
	// <br>
	// This container is not returned for non-charitable listings.
	//
	Charity *CharityType `xml:"Charity,omitempty"`

	//
	// This field is returned (as <code>true</code>) if an eBay Germany motor vehicle listing has an upgrade that allows the motor vehicle listing to appear on the <b>mobile.de</b> partner site. This field is only applicable to eBay Germany motor vehicle listings.
	//
	GermanMotorsSearchable bool `xml:"GermanMotorsSearchable,omitempty"`

	//
	// The Get It Fast feature and icon are no longer supported in eBay listings.
	//
	GetItFast bool `xml:"GetItFast,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field is deprecated, as the gift icon and gift services are no longer available on any eBay Marketplace site.
	// </span>
	//
	Gift bool `xml:"Gift,omitempty"`

	//
	// This field is deprecated.
	//
	PictureExists bool `xml:"PictureExists,omitempty"`

	//
	// This field is deprecated.
	//
	RecentListing bool `xml:"RecentListing,omitempty"`

	//
	// This container consists of the eBay seller's store name and the URL to the eBay store. This container is returned if the seller has an eBay Store subscription and the <b>IncludeSelector</b> field is included in the call request and set to <code>Details</code>.
	//
	Storefront *StorefrontType `xml:"Storefront,omitempty"`

	//
	// The distance of the item from the buyer. The DistanceFromBuyer unit (miles
	// or kilometers) varies by site. If the country whose site you are
	// searching, e.g. India, uses kilometers, then the DistanceFromBuyer unit is
	// kilometers. Otherwise, e.g. if the country is US or UK, then the
	// DistanceFromBuyer unit is miles. DistanceFromBuyer is returned if a
	// value for PostalCode is supplied in the request.
	//
	DistanceFromBuyer *DistanceType `xml:"DistanceFromBuyer,omitempty"`

	//
	// A two-letter code that represents the country in which the item is located.
	// <br><br>
	// To see the list of currently supported country
	// codes, and the English names associated with each code (e.g., KY="Cayman Islands"),
	// call the Trading API's <b>GeteBayDetails</b>, with <b>DetailName</b> set to <b>CountryDetails</b>,
	// and then look for <b>CountryDetails.Country</b> fields in the response.
	// <br><br>
	// Most of the codes that eBay uses conform to the ISO 3166 standard, but some of the codes in the ISO 3166 standard are not used by eBay. Plus, there are some non-ISO codes in the eBay list.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> The <a href="types/CountryCodeType.html">CountryCodeType</a> list is only a subset of all supported country codes, so to ensure that you are seeing the latest list, you should make a <b>GeteBayDetails</b> call as explained above.
	// </span>
	//
	Country *CountryCodeType `xml:"Country,omitempty"`

	//
	// This field is deprecated.
	//
	WatchCount int32 `xml:"WatchCount,omitempty"`

	//
	// This field is deprecated.
	//
	HalfItemCondition *HalfItemConditionCodeType `xml:"HalfItemCondition,omitempty"`

	//
	// This field is deprecated.
	//
	SellerComments string `xml:"SellerComments,omitempty"`

	//
	// This container consists of details related to the seller's Return Policy, both for domestic and international buyers (if the seller ships internationally). If the seller does not accept returns, only the <b>ReturnsAccepted</b> field (or <b>InternationalReturnsAccepted</b> field for international buyers) is returned with a value of <code>ReturnsNotAccepted</code>. If a seller does accept returns, more details are returned, including the return period, the refund method, and the order partner (buyer or seller) who is responsible for return shipping costs. This container is only returned if the <b>IncludeSelector</b> field is included in the call request and set to <code>Details</code>.
	//
	ReturnPolicy *ReturnPolicyType `xml:"ReturnPolicy,omitempty"`

	//
	// This field is only returned for auction listings. The value in this field is the minimum value that the next bid on the item must be to be accepted. If no bids have been placed on the item, the value in this field will be the same value that is returned in the <b>Item.ConvertedCurrentPrice</b> field.
	//
	MinimumToBid *AmountType `xml:"MinimumToBid,omitempty"`

	//
	// This field is no longer returned in the <b>GetSingleItem</b> or <b>GetMultipleItems</b> calls. To view the eBay Product ID (also known as an ePID) or Global Trade Item Number (UPC, EAN, ISBN, or MPN) for a product in a listing (or product variation within a multiple-variation listing), use the Trading API's <b>GetItem</b> call instead.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`

	//
	// This field indicates if the seller requests immediate payment for the item. If  <code>true</code>, immediate payment is required before the checkout process can begin. If <code>false</code>, immediate payment is not requested.
	// <br/><br/>
	// The immediate payment feature is only applicable to fixed-price listings, or for auction listings where the buyer chooses to purchase the item through the 'Buy It Now' option. The immediate payment feature is not applicable (even if the <b>AutoPay</b> field has a <code>true</code> value) in the following types of listings/transactions:
	// <ul>
	// <li>Classified ad listings where payment/checkout happens between buyer and seller off of eBay's platform</li>
	// <li>Auction listings that end with a winning bidder</li>
	// <li>A buyer's Best Offer (on Fixed-Price or Auction items) that is accepted by the seller</li>
	// </ul>
	// The immediate payment feature is only applicable to listings on PayPal-enabled sites in categories that support immediate payment, or if the seller is opted into the new eBay Managed Payments program. For the former, the only returned <b>PaymentMethods</b> value should be <code>PayPal</code>. For sellers, opted into the new eBay Managed Payments program, the supported payment methods are managed by eBay, so no payment methods may get returned.
	//
	AutoPay bool `xml:"AutoPay,omitempty"`

	//
	// This container is returned if the seller of the item is registered on the eBay listing site as a Business Seller. This container consists of information related to the Business Seller's account. Not all eBay sites support Business Sellers.
	//
	BusinessSellerDetails *BusinessSellerDetailsType `xml:"BusinessSellerDetails,omitempty"`

	//
	// Enables you to view the sites on which an item can be purchased,
	// based on the payment methods offered for the item.
	//
	PaymentAllowedSite []*SiteCodeType `xml:"PaymentAllowedSite,omitempty"`

	//
	// This boolean field indicates whether or not the seller's account is enabled with a payment gateway account, that allows that seller to accept common credit cards as payment methods. If the value of <b>IntegratedMerchantCreditCardEnabled</b> is <code>true</code>, then the seller accepts common credit cards as payment methods.
	//
	IntegratedMerchantCreditCardEnabled bool `xml:"IntegratedMerchantCreditCardEnabled,omitempty"`

	//
	// This container is only returned for multiple-variation listings, and it is required that the user include the <b>IncludeSelector</b> field in the call request, and set its value to <code>Variations</code>. Multiple-variation listings are fixed-price listings that feature similar, but not identicial items. For example, a T-shirt listing could contain multiple items of the same brand and style that vary by color and size (like <code>Blue, Large</code> and <code>Black, Medium</code>). Each variation in the listing specifies a unique combination of one of the available colors and sizes. Each variation can have a different quantity and price.
	//
	Variations *VariationsType `xml:"Variations,omitempty"`

	//
	// Specifies the maximum number of business days the seller commits to for preparing an item to be shipped after receiving a cleared payment. Typically, the seller's stated handling time ranges from zero to three business days. This time does not include the expected transit time of the shipping service option selected by the buyer.
	// <br/><br/>
	// <strong>GetSingleItem</strong> or <strong>GetMultipleItems</strong> returns <strong>HandlingTime</strong> in most cases, but there may be instances where the seller has not specified any shipping service options, or the the type of listing or eBay category does not require a handling time. For example, handling time is not relevant for 'local pickup' only, for freight shipping, or for classified ad listings where the transaction and delivery/shipping happens off of eBay's platform.
	// <br/><br/>
	// A <strong>HandlingTime</strong> value of <code>0</code> indicates <em>same business day handling</em> for an item. In this case, the seller's shipping commitment depends on the <em>order cut off time</em> set in the seller's My eBay Shipping preferences. The buyer must purchase and pay for the order line item before this <em>order cut off time</em> in order for the seller to be obligated to ship out the order on that same business day. A different cutoff time can be specified for each business day of the week. By default, the <em>order cut off time</em> is set to 2:00 PM local time on most sites, but the seller can change the times for any of the business days. For orders completed after the order cut off time, the item must be shipped by the end of the following business day (weekends and local holidays excluded).
	//
	HandlingTime int32 `xml:"HandlingTime,omitempty"`

	//
	// A lot is a collection or set of two or more similar or identical items that must be purchased together in a single transaction, through an auction or a fixed-price listing. Examples of lot-based listings may include a collection of baby clothes, a collection of books or magazines, or a set of identical items such as batteries or light bulbs. The <b>LotSize</b> is the number of items in the lot.
	// <br/><br/>
	// A fixed-price listing can have multiple lots available for purchase, but if this is the case, each lot available in that listing should be identical  (instead of a mixed collection of items). So, if a fixed-price listing has multiple lots available for purchase, the number of lots available for purchase is shown in the <b>Item.Quantity</b> field.
	// <br/><br/>
	// Not all eBay listing categories support lot-based listings. To see which eBay listing categories do not support lot-based listing, a user can use the Trading API's <b>GetCategories</b> call and then look for any <b>Category.LSD</b> tags (with value of <code>true</code>) that are returned in the response.
	//
	LotSize int32 `xml:"LotSize,omitempty"`

	//
	// A numeric identifier that represents the condition of an item. These numeric IDs can vary by eBay category, but many are the same across categories. For example, <code>1000</code> indicates an item in <em>New</em> condition, <code>3000</code> indicates an item in <em>Used</em> condition, and <code>5000</code> indicates an item in <em>Good</em> condition.
	// <br/><br/>
	// This field will get returned for most listings since most eBay listing categories require an item condition, but this field may not get returned for listings in eBay categories that don't require an item condition. A <b>ConditionID</b> value always maps to a text-based description of the condition, and this display text is shown in the <b>ConditionDisplayName</b> field.
	//
	ConditionID int32 `xml:"ConditionID,omitempty"`

	//
	// The user-friendly display name for the item condition, such as <em>New</em>, <em>Like New</em> <em>Used</em>, <em>Good</em>, or <em>Manufacturer refurbished</em>. Display names are localized for the site on which they're listed (not necessarily the site on which they're viewed).
	// <br>
	// <br>
	// <b>ConditionDisplayName</b> values all map to <b>ConditionID</b> values, but keep in mind that based on the eBay category, some item conditions can have the same <b>ConditionID</b>, but a slightly different <b>ConditionDisplayName</b>. For example, a <b>ConditionID</b> value of <code>1000</code> typically indicates an item in new condtion, but the text displayed in the <b>ConditionDisplayName</b> can be just <em>New</em>, or some categories will show <em>Brand New</em>, <em>New with tags</em>, or <em>New with box</em>.
	// <br/><br/>
	// This field will get returned for most listings since most eBay listing categories require an item condition, but this field may not get returned for listings in eBay categories that don't require an item condition. A <b>ConditionDisplayName</b> value always maps to a text-based description of the condition, and this Condition ID is shown in the <b>ConditionID</b> field.
	//
	ConditionDisplayName string `xml:"ConditionDisplayName,omitempty"`

	//
	// The enumeration returned in this field indicates if the listing displays a 'quantity available' hint on the View Item page. For example, the View Item page may say 'Limited quantity available', or it may say 'More than 10 available'. It is up to the seller of the listing whether or not to included a 'quantity available' hint in the listing. The 'quantity available' feature is used by the seller that prefers not to show the actual quantity available for purchase.
	// <br/><br/>
	// This field is only applicable to multiple-quantity, fixed-price listings, and will only be returned if the seller set this feature on the listing.
	//
	QuantityAvailableHint *QuantityAvailableHintCodeType `xml:"QuantityAvailableHint,omitempty"`

	//
	// This field works together with the 'quantity available' feature. This integer value in this field controls whether the 'quantity available' hint on the View Item page will say 'Limited quantity available' or 'More than <em>N</em> available'. If this threshold value is '10', and the quantity available is any number more than 10, the 'quantity available' hint will read 'More than 10 available'. If the quantity available is '10' or less, the 'quantity available' hint will read 'Limited quantity available'.
	//
	QuantityThreshold int32 `xml:"QuantityThreshold,omitempty"`

	//
	// This container provides information for an item that has a Strikethrough Price
	// (STP) or a Minimum Advertised Price (MAP) discount pricing treatment. STP and MAP apply only to fixed-price listings. STP is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites, while MAP is available only on the US site.
	// <br > <br >
	// Discount pricing is available to qualified sellers (and their associated developers) who
	// participate in the Discount Pricing Program. Once qualified, sellers receive a
	// "special account flag" (SAF) that allows them to apply Discount Pricing to both single-variation and multi-variation listings.
	//
	DiscountPriceInfo *DiscountPriceInfoType `xml:"DiscountPriceInfo,omitempty"`

	//
	// An <b>ExcludeShipToLocation</b> field is returned for each geographical region, country, state/province, city, or other special domestic location that the seller has added to their 'Excluded shipping locations' list. Sellers can exclude shipping locations through the Shipping preferences in My eBay, through a Shipping Business Policy that is associated with the listing, or through an Add/Revise/Relist call in the Trading API. Buyers in excluded shipping locations will be blocked from buying the item. If a seller has not created an 'Exclusion list' through any of the three means discussion below, no <b>ExcludeShipToLocation</b> fields are returned.
	// <br><br>
	// Geographical regions include the continents, as well as other geographical regions like the 'Middle East' or 'Southeast Asia'. Individual countries are represented by the two-digit ISO 3166-1 values. Special domestic regions will vary by country, but for the US, these value include 'Alaska/Hawaii', 'US Protectorates', and 'PO Boxes'.
	// <br><br>
	// This field works in conjunction with <b>Item.ShipToLocations</b> to create a set of international countries and regions to where the seler will, and will not, ship. These values should not contradict one another.
	//
	ExcludeShipToLocation []string `xml:"ExcludeShipToLocation,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the listing was created by a Top-Rated Seller and the listing has all of the requirements that qualifies it as a Top-Rated Plus listing. The Top-Rated Seller program is only available on the US, UK, and Germany sites. See the
	// <a href="http://pages.ebay.com/help/sell/top-rated.html#what">Top-Rated Seller requirements</a> help topic for more information on qualifying as a Top-Rated Seller and the <a href="http://pages.ebay.com/help/sell/top-rated.html#plus">Top-Rated Plus listing requirements</a> help topic for more information on what a listing must offer to qualify as a Top-Rated Plus listing and get the Top-Rated Plus badge. Information on the overall program can be found on the <a href="http://pages.ebay.com/sellerinformation/build-your-business-online/status-standards/top-rated-seller.html">Top-Rated Seller home page</a> in the Seller Center.
	// <br><br>
	// This field is not returned if <code>false</code>.
	//
	TopRatedListing bool `xml:"TopRatedListing,omitempty"`

	//
	// This field is returned with the URL to the Vehicle History Report if the seller has made one available for a motor vehicle listing. This field is only applicable to motor vehicle listings with a Vehicle History Report avaialable.
	//
	VhrUrl *AnyURI `xml:"VhrUrl,omitempty"`

	//
	// This field is returned as <code>true</code> if a Vehicle History Report is available for a motor vehicle listing. This field is only applicable to motor vehicle listings with a Vehicle History Report avaialable. The URL to the Vehicle History Report can be found in the <b>VhrUrl</b> field.
	//
	VhrAvailable bool `xml:"VhrAvailable,omitempty"`

	//
	// This container consists of the <b>MinimumRemnantSet</b>
	// field, which indicates the minimum amount of event tickets that can
	// remain in the fixed-price listing's inventory after a buyer
	// purchases one or more tickets (but not all) from the listing.
	// <br/><br/>
	// This field is currently only applicable for event ticket listings in
	// US and CA, but may apply to other categories in the future. It is
	// only returned if set by the seller in the listing.
	//
	QuantityInfo *QuantityInfo `xml:"QuantityInfo,omitempty"`

	//
	// Contains information about the weight, volume or other quantity measurement of a listed item so buyers can compare per-unit prices. The European Union requires listings for certain types of products to include the price per unit. eBay uses this information and the item's listed price to calculate and display the unit price on eBay EU sites.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This information is currently required only for business sellers, and only for listings with a 'Buy It Now' option.
	// </span>
	//
	UnitInfo *UnitInfoType `xml:"UnitInfo,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if eBay's Global Shipping Program is an option for international shipping. With eBay's Global Shipping Program, the seller ships the item to that country's eBay shipping partner, and then eBay's shipping partner handles all aspects of the international leg of the shipment, including any export or import charges.
	// <br/><br/>
	// In addition to making the Global Shipping Program available for international shipment, the seller can also specify up to four other international shipping service options. This may be necessay if the shipment is going to a country where the Global Shipping Program is not available.
	// <br/><br/>
	// If the value of <strong>GlobalShipping</strong> is <code>false</code>, the seller is responsible for specifying one or more international shipping service options to serve those countries that the seller is willing to ship items.
	//
	GlobalShipping bool `xml:"GlobalShipping,omitempty"`

	//
	// This string field is used by the seller to more clearly describe the condition of items that are not brand new.
	// <br><br>
	// The <b>ConditionDescription</b> field is available for all
	// categories, including categories where the condition type is not applicable
	// (e.g., Antiques). This field is applicable for all item conditions except
	// "New", "Brand New", "New with tags", and "New in box". If
	// <b>ConditionDescription</b> is used with these conditions (Condition
	// IDs 1000-1499), eBay will simply ignore this field if included, and eBay will
	// return a warning message to the user.
	// <br><br>
	// This field should only be used to further clarify the condition of the used item. For example, "The right leg of the chair has a small scratch, and on the seat back there is a light blue stain about the shape and size of a coin." It should not be used for branding, promotions, shipping, returns, payment or other information unrelated to the condition of the item. Make sure that the condition type (<b>Item.ConditionID</b>), condition description, item description (<b>Item.Description</b>), and the listing's pictures do not contradict one another.
	// <br><br>
	// The <b>ConditionDescription</b> field is only returned if a condition description is specified in the listing.
	//
	ConditionDescription string `xml:"ConditionDescription,omitempty"`

	//
	// This integer value indicates the number of distinct motor vehicles that are compatible with the part or accessory being offered in the listing. The compatible vehicle list is shown in the <strong>ItemCompatibilityList</strong> container.
	// <br><br>
	// This field only applies to motor vehicle parts and accessory listings with an associated vehicle compatibility list. Seller can manually create their own vehicle compatibility list when listing the item, or a vehicle compatibility list may be added to the listing automatically if the seller uses an eBay catalog product record to create the listing.
	// <br><br>
	// To retrieve the compatibility count and the compatible vehicle list, include the <strong>IncludeSelector</strong> field in the request with a value of <code>Compatibility</code>. Parts Compatibility is only supported in Parts & Accessories categories.
	//
	ItemCompatibilityCount int32 `xml:"ItemCompatibilityCount,omitempty"`

	//
	// A list of distinct motor vehicles that are compatible with the part or accessory being offered in the listing. Compatible vehicles are expressed through a set of name-value pairs with aspects such as 'Year, 'Make', 'Model', 'Trim', and 'Engine'. Each set of values describe the specific vehicle, such as a '2016 Honda Accord'.
	// <br><br>
	// This field only applies to motor vehicle parts and accessory listings with an associated vehicle compatibility list. Seller can manually create their own vehicle compatibility list when listing the item, or a vehicle compatibility list may be added to the listing automatically if the seller uses an eBay catalog product record to create the listing.
	// <br><br>
	// To retrieve the compatibility count and the compatible vehicle list, include the <strong>IncludeSelector</strong> field in the request with a value of <code>Compatibility</code>. Parts Compatibility is only supported in Parts & Accessories categories.
	//
	ItemCompatibilityList *ItemCompatibilityListType `xml:"ItemCompatibilityList,omitempty"`

	//
	// This integer value indicates the quantity of items sold for the listing through the In-Store Pickup option. If the <strong>IncludeSelector</strong> filter is included in the request and set to <code>Details</code>, this field is always returned even if its value is '0'.
	// <br>
	// <br>
	// If the <strong>QuantitySoldByPickupInStore</strong> value is greater than '0', this value (along with the value in <strong>QuantitySold</strong>) should be subtracted from the value in the <strong>Quantity</strong> field to get the accurate quantity that is available for purchase.
	// <br>
	// <br>
	// <span class="tablenote"><strong>Note:</strong>
	// If the <strong>IncludeSelector</strong> filter is included in the request and set to <code>Details</code>, but the retrieved listing is a multiple-variation listing, the <strong>Quantity</strong>, the <strong>QuantitySoldByPickupInStore</strong>, and <strong>QuantitySold</strong> field values will reflect the quantity and quantity sold of all item variations in the listing. If a user wanted quantity available and quantity sold information on individual item variations, that user would set the <strong>IncludeSelector</strong> filter to <code>Variations</code> instead, and the user will look at the  <strong>Variation.SellingStatus.QuantitySoldByPickupInStore</strong> fields to get the quantity sold for each item variation in the listing through the In-Store Pickup option.
	// </span>
	// <br/>
	// <span class="tablenote">
	// <strong>Note:</strong> The In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings.
	//
	QuantitySoldByPickupInStore int32 `xml:"QuantitySoldByPickupInStore,omitempty"`

	//
	// A SKU (stock keeping unit) value is a seller-defined identifier of a product within their inventory. Some sellers use product SKUs to track complex flows of products and information on the client side. A seller can specify a SKU value for a product (or for all variations within a multiple-variation listing) when creating a listing. eBay preserves the SKU values, and the SKU value becomes another way to identify the product/listing, and another way to track orders associated with the SKU value.
	// <br>
	// <br>
	// A SKU is not required to be unique across an eBay marketplace, but a seller cannot have any active listings or variations within a multiple-variation listing that have the same SKU value. The seller will be blocked from listing, revising, or relisting with a SKU value that is already associated with an active listing.
	// <br>
	// <br>
	// The <b>SKU</b> field, if defined for a single-variation listing, will be returned if the <b>IncludeSelector</b> field is set to <code>Details</code>. For multi-variation listings, the SKU value for each variation (if defined) will actually be returned in the <b>Variation.SKU</b> field, and to return variations data, the user must include the <b>IncludeSelector</b> field and set it to <code>Variations</code>.
	//
	SKU string `xml:"SKU,omitempty"`

	//
	// This field is no longer applicable, as it formerly supported the Best Offer Beta feature which is no longer active.
	//
	NewBestOffer bool `xml:"NewBestOffer,omitempty"`

	//
	// The eBay Now delivery option is no longer available, so this field is no longer applicable.
	//
	EBayNowEligible bool `xml:"eBayNowEligible,omitempty"`

	//
	// The eBay Now delivery option is no longer available, so this field is no longer applicable.
	//
	EBayNowAvailable bool `xml:"eBayNowAvailable,omitempty"`

	//
	// This field is only be returned (as <code>true</code>) in the case where an order line item in a listing is only available to buyers through a local fulfillment method such as In-Store Pickup or Click and Collect. And if a listing is truly a <em>local fulfillment only</em> listing, the value in the <b>Item.Quantity</b> field (for single-variation listings) or the <b>Variation.Quantity</b> field (for multi-variation listings) defaults to <code>0</code> even though the quantity available is technically not zero, since the order line item in the listing is still available through one or more local fulfillment methods.
	//
	IgnoreQuantity bool `xml:"IgnoreQuantity,omitempty"`

	//
	// If this field is returned as <code>true</code>, the order line item is enabled with the 'Click and Collect' feature. With Click and Collect, buyers are able to purchase an order line item on the eBay UK, Australia, and Germany sites, and then pick up their order from the nearest 'eBay Collection Point', including over 750 Argos stores in the UK.
	// <br/><br/>
	// The Click and Collect feature is only available on the eBay UK, Australia, and Germany sites. For more information about Click and Collect, see the
	// <a href="http://ebay.co.uk/clickandcollect/">Click and Collect</a> home page on the eBay UK site, the <a href="http://sellercentre.ebay.com.au/click-and-collect">Click and Collect</a> home page on the eBay Australia site, or the <a href="https://pages.ebay.de/einkaufen/click-and-collect.html">Click and Collect</a> home page on the eBay Germany site.
	// <br>
	// <br>
	// Not all categories on the UK, Australia, and Germany sites support Click and Collect listings. To verify if a specific category on these eBay sites support Click and Collect listings, use the <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategoryFeatures.html">GetCategoryFeatures</a> call, passing in one or more <b>CategoryID</b> values and a <b>PickupDropOffEnabled</b> value in the <b>FeatureID</b> field.
	// <br/><br/>
	// Look for a <code>true</code> value in the <b>PickupDropOffEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	//
	AvailableForPickupDropOff bool `xml:"AvailableForPickupDropOff,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the listing category supports 'Click and Collect' listings. A <code>true</code> value does not necessarily mean that the seller has enabled the item with the Click and Collect feature. A listing is enabled with the Click and Collect feature if the <b>AvailableForPickupDropOff</b> field is returned as <code>true</code>.
	// <br>
	// <br>
	// With Click and Collect, buyers are able to purchase from thousands of sellers on the eBay UK, Australia, and Germany sites, and then pick up their order from the nearest 'eBay Collection Point', including over 750 Argos stores in the UK. The Click and Collect feature is only available on the eBay UK,  Australia, and Germany sites. For more information about Click and Collect, see the
	// <a href="http://ebay.co.uk/clickandcollect/">Click and Collect</a> home page on the eBay UK site, the <a href="http://sellercentre.ebay.com.au/click-and-collect">Click and Collect</a> home page on the eBay Australia site, or the <a href="https://pages.ebay.de/einkaufen/click-and-collect.html">Click and Collect</a> home page on the eBay Germany site.
	//
	EligibleForPickupDropOff bool `xml:"EligibleForPickupDropOff,omitempty"`
}

type StorefrontType struct {

	//
	// The URL of the seller's eBay Store. This field is always returned with the <b>Storefront</b> container.
	//
	StoreURL *AnyURI `xml:"StoreURL,omitempty"`

	//
	// The name of the seller's eBay Store. This field is always returned with the <b>Storefront</b> container.
	//
	StoreName string `xml:"StoreName,omitempty"`
}

type TaxJurisdictionType struct {

	//
	// Unique identifier of the sales tax jurisdiction (typically, a state or province). In the US, the two-digit acronyms for the states are used (such as 'CA' for California).
	//
	JurisdictionID string `xml:"JurisdictionID,omitempty"`

	//
	// The sales tax percentage that will be applied to orders shipped to this
	// jurisdiction. Sellers define sales tax rates for different tax jurisdictions using the <b>Sales Tax Table </b> UI in My eBay. The sales tax percent value supports a precision of
	// 3 digits after the decimal point (##.###).
	//
	SalesTaxPercent float32 `xml:"SalesTaxPercent,omitempty"`

	//
	// This boolean field indicates whether or not shipping costs are to be part of the base order amount that is taxed. This value is 'false' by default, and the seller will have to mark this setting to 'true' in the <b>Sales Tax Table </b> UI in My eBay.
	//
	ShippingIncludedInTax bool `xml:"ShippingIncludedInTax,omitempty"`
}

type TaxTableType struct {

	//
	// A <b>TaxJurisdiction</b> container is returned for each tax jurisdiction where the seller has defined a sales tax rate (using the <b>Sales Tax Table </b> UI in My eBay), and each of these containers show the sales tax rate for the corresponding tax jurisdiction (and not just the tax jurisdiction associated with the specified <b>DestinationPostalCode</b> in the call request).
	//
	TaxJurisdiction []*TaxJurisdictionType `xml:"TaxJurisdiction,omitempty"`
}

type UnitInfoType struct {

	//
	// Designation of size, weight, volume or count to be used to specify the unit quantity of the item. This value can be one of the following:
	// <br/>
	// <pre> Kg  100g  10g  L  100ml  10ml  M  M2  M3  Unit </pre>
	// This field is returned only when you provide <strong>IncludeSelector</strong> in the request and set it to <code>ItemSpecifics</code>.
	//
	UnitType string `xml:"UnitType,omitempty"`

	//
	// Number of units of size, weight, volume or count of the specified unit type for the item. eBay divides the item price by this number to get the price per unit to be displayed in the item listing for comparison purposes.
	// <br/><br/>
	// This field is returned only when you provide <strong>IncludeSelector</strong> in the request and set it to <code>ItemSpecifics</code>.
	//
	UnitQuantity float64 `xml:"UnitQuantity,omitempty"`
}

type VATDetailsType struct {

	//
	// This field is only returned if set on the listing, and the person making the call owns the listing.
	//
	BusinessSeller bool `xml:"BusinessSeller,omitempty"`

	//
	// This field is only returned if 'true', and the person making the call owns the listing. The 'Restricted to Business' feature can only be used by registered business sellers on the German, Austrian, and Swiss marketplaces, and only in listing categories that support 'Business-to-Business' listings. In a 'Business-to-Business' listing, the seller restricts sales of their item to users registered on eBay as business users.
	// <br><br>
	// The <b>GetCategories</b> Trading API call can be used by the seller (using the eBay marketplace's Site ID value) to see which categories support Business-to-Business listings. A <b>B2BVATEnabled</b> boolean field will be returned as <code>true</code> if a listing category supports Business-to-Business listings.
	//
	RestrictedToBusiness bool `xml:"RestrictedToBusiness,omitempty"`

	//
	// This container shows the VAT (Value-added Tax) percentage rate that will be charged to buyers when an item is purchased from the listing.
	// <br/><br/>
	// VAT is not applicable to all countries, including the US. Allowed VAT percentage rates can vary by region/country, so sellers should be aware of the rates they are legally required/allowed to charge, and they are responsible for charging the correct VAT rate.
	// <br/><br/>
	// If VAT is charged on a listing, the seller can choose to print an invoice for the buyer that shows the item's net price, the VAT percentage rate, the VAT amount, and the total price.
	// <br/><br/>
	// This field is returned only if the listing is subject to VAT.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The float value input into an Add/Revise/Relist call can have up to three digits beyond the decimal point (e.g. 12.346).
	// </span>
	//
	VATPercent float32 `xml:"VATPercent,omitempty"`

	//
	// This string value is the Site ID value of the eBay Marketplace where the VAT is applicable and where the seller is registered as a Business Seller.
	// <br/><br/>
	// The eBay sites that support VAT (and their corresponding Site IDs) can be found in the <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/IntlDiffs-B2BFields.html" target="_blank">Business Feature Field Differences</a> topic.
	//
	VATSite string `xml:"VATSite,omitempty"`

	//
	// This is the unique VAT identifier associated with the Business Seller's account. This field will only be returned to Business Sellers who own the specified listing.
	// <br/><br/>
	// Non-Business Sellers will not have a VAT identifier associated with their account, so this field will never be returned for those users.
	//
	VATID string `xml:"VATID,omitempty"`
}

type VariationSpecificPictureSetType struct {

	//
	// This field shows the corresponding value of the product aspect that is shown in the the <b>Variations.Pictures.VariationSpecificName</b> field.  For example, if the <b>Variations.Pictures.VariationSpecificName</b> value is 'Color',
	// the value in this field will be one of the values that is shown in the <b>Variations.VariationSpecificsSet.NameValueList</b> container. So, if the <b>Name</b> field of that <b>NameValueList</b> container was 'Color', the value in the <b>VariationSpecificPictureSet.VariationSpecificValue</b> would have to be one of the defined colors for the multiple-variation listing.
	//
	VariationSpecificValue string `xml:"VariationSpecificValue,omitempty"`

	//
	// The URL to one image of one variation of the multiple-variation listing. The image must be associated with the corresponding aspect name-value pair. So, if the corresponding <b>VariationSpecificName</b> value is 'Color', and the corresponding <b>VariationSpecificValue</b> value is 'Space Grey', each URL returned under the corresponding <b>VariationSpecificPictureSet</b> container should point to a picture that display the item in that particular color.
	// <br/><br/>
	// The URL(s) can point to an image (or images) stored on the eBay Picture Server, or it can be a URL to a self-hosted picture. Note that self-hosted pictures must be on a server that supports the 'https' protocol.
	// <br/><br/>
	// The first <b>PictureURL</b> shown in the response is the URL that is used as the 'Gallery URL' for that particular product variation.
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`

	//
	// This field is no longer returned. Note that the first <b>PictureURL</b> shown in the response is the URL that is used as the 'Gallery URL' for that particular product variation.
	//
	GalleryURL *AnyURI `xml:"GalleryURL,omitempty"`
}

type VariationType struct {

	//
	// A SKU (stock keeping unit) is a seller-defined identifier. It is only intended for the seller's use (not necessarily for buyers). A SKU value is not required, but many large sellers like to add SKU values for their products. If SKU values are defined for variations in a multiple-variation listing, the seller can specify a variation's SKU value in the <b>VariationSKU</b> field of a <b>GetSingleItem</b> call to retrieve details on that particular variation. The <b>VariationSKU</b> field is not available in the <b>GetMultipleItems</b> call.
	// <br>
	// <br>
	// If specified, all SKU values must be unique within the <b>Variations</b>
	// node. That is, no two variations within the same listing can have
	// the same SKU.
	// <br>
	// <br>
	// This field is only returned if the seller specified a SKU for the variation.
	//
	SKU string `xml:"SKU,omitempty"`

	//
	// The fixed price for this item variation.
	// For example, a "Blue, Large" variation price could be USD 10.00,
	// and a "Black, Medium" variation price could be USD 8.00.<br>
	// <br>
	// The <b>StartPrice</b> is mandatory for each variation, regardless of whether the price is the same for all variations, or if the price differs for different variations. This field will be returned for each <b>Variation</b> container.
	//
	StartPrice *AmountType `xml:"StartPrice,omitempty"`

	//
	// This field shows the total quantity associated with the variation, including
	// the quantity available and the
	// quantity sold. To calculate the quantity available for sale, subtract the
	// corresponding
	// <b>Variation.SellingStatus.QuantitySold</b>  value from this
	// value.
	// <br>
	// <br>
	// Generally, this integer value will be '1' or greater, but it is possible that the value will be '0' if the variation is currently out of stock, but the seller is using the 'Out-of-Stock Control' feature. When the seller uses the 'Out-of-Stock Control' feature, an item (or item variation) will still surface in search results, although that particular item (or item variation) will not be purchasable.
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// A list of name/value pairs that uniquely identify the variation
	// within the listing. All variations specify the same set of
	// names, and each variation provides a unique combination of
	// values for those names. For example, if the items vary by color and
	// size, then every variation specifies Color and Size as names,
	// and no two variations can specify the same combination of
	// color and size values. Use this information to identify a
	// variation of interest when you communicate with
	// the seller.
	// <br>
	// <br>
	// If your application supports PlaceOffer (in the Trading API),
	// you use this information to uniquely identify the variation
	// that you want to purchase.
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`

	//
	// This field is no longer Not used. The quantity sold for the variation is now shown in the <b>Variation.SellingStatus.QuantitySold</b> field.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// This container shows the quantity sold for the variation, including the quantity that is sold through 'In-Store Pickup' (a logistics option that is only available to a select number of large US sellers with 'brick and mortar' stores). The <b>SellingStatus</b> container is returned for each item variation, even if the quantity sold value is '0'.
	//
	SellingStatus *SellingStatusType `xml:"SellingStatus,omitempty"`

	//
	// This container provides information for a single variation (within a multiple-variation listing) that has a Strikethrough Price (STP) or a Minimum Advertised Price (MAP) discount pricing treatment.  STP and MAP apply only to fixed-price listings. STP is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites, while MAP is available only on the US site.
	// <br><br>
	// Discount pricing is available to qualified sellers (and their associated developers) who participate in the Discount Pricing Program. Once qualified, sellers receive a 'special account flag' (SAF) that allows them to apply Discount Pricing to both single-variation and multi-variation items. STP is intended for eBay partners and their sellers only.
	// <br><br>
	// As a seller listing Discount Price items, you are required to maintain records of your discount pricing in the event you are called upon to substantiate your item pricing.
	//
	DiscountPriceInfo *DiscountPriceInfoType `xml:"DiscountPriceInfo,omitempty"`

	//
	// This field is the unique identifier of the product variation. This identfier can either be an eBay Product ID (also known as an ePID), or a Global Trade Item Number (GTIN) such as UPC, EAN, or ISBN. This field is only returned if the seller has supplied an ePID or GTIN value for the each variation within a multiple-variation listing.
	// <br><br>
	// The <b>type</b> attribute's value indicates the type of product identifier.
	//
	ProductID *ProductIDType `xml:"ProductID,omitempty"`
}

type VariationsType struct {

	//
	// Contains data that distinguishes one variation from another.
	// For example, if the items vary by color and size, each Variation
	// node specifies a combination of one of those colors and
	// sizes. The quantity and price for each variation is also shown in the <b>Variation</b> container
	//
	Variation []*VariationType `xml:"Variation,omitempty"`

	//
	// Contains a set of pictures that correspond to one of the
	// variation specifics, such as 'Color'. For example, if a listing
	// has blue and black color variations, a listing could specify the
	// name 'Color' as an organizing mechanism for all the pictures,
	// and then include a set of pictures for the blue variations and
	// another set of pictures for the black variations.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Only one Pictures node is currently returned for a listing.
	// However, the node has been defined as unbounded (repeatable) in
	// the schema to allow for different use cases for some calls or sites
	// in the future.</span>
	//
	Pictures []*PicturesType `xml:"Pictures,omitempty"`

	//
	// A list of all variation names and values that are defined on
	// the item. This could include values that were previously
	// defined (but no longer for sale).<br>
	// <br>
	// eBay uses this list to configure variation selection widgets
	// that appear on eBay's View Item page.
	// For example, if 'Color' and 'Size' are names in the list, then
	// eBay's View Item page displays Color and Size drop-down lists
	// to help a buyer choose a variation of interest.<br>
	// <br>
	// The order in which the names and values are returned
	// matches the order in which the selection widgets appear on
	// the View Item page.
	// For example, if the names "Color", then "Size", and then
	// "Sleeve Style" are returned, the View Item page shows drop-down
	// lists with those labels in that order. For "Size", if the values
	// returned are "S", "M", and then "L", the View Item page
	// shows the values in that order in the Size drop-down list.
	//
	VariationSpecificsSet *NameValueListArrayType `xml:"VariationSpecificsSet,omitempty"`
}

type ShoppingInterface interface {
	FindProducts(request *FindProductsRequestType) (*FindProductsResponseType, error)

	GetCategoryInfo(request *GetCategoryInfoRequestType) (*GetCategoryInfoResponseType, error)

	GetItemStatus(request *GetItemStatusRequestType) (*GetItemStatusResponseType, error)

	GetMultipleItems(request *GetMultipleItemsRequestType) (*GetMultipleItemsResponseType, error)

	GetShippingCosts(request *GetShippingCostsRequestType) (*GetShippingCostsResponseType, error)

	GetSingleItem(request *GetSingleItemRequestType) (*GetSingleItemResponseType, error)

	GetUserProfile(request *GetUserProfileRequestType) (*GetUserProfileResponseType, error)

	GeteBayTime(request *GeteBayTimeRequestType) (*GeteBayTimeResponseType, error)
}

type shoppingInterface struct {
	client *soap.Client
}

func NewShoppingInterface(client *soap.Client) ShoppingInterface {
	return &shoppingInterface{
		client: client,
	}
}

func (service *shoppingInterface) FindProducts(request *FindProductsRequestType) (*FindProductsResponseType, error) {
	response := new(FindProductsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *shoppingInterface) GetCategoryInfo(request *GetCategoryInfoRequestType) (*GetCategoryInfoResponseType, error) {
	response := new(GetCategoryInfoResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *shoppingInterface) GetItemStatus(request *GetItemStatusRequestType) (*GetItemStatusResponseType, error) {
	response := new(GetItemStatusResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *shoppingInterface) GetMultipleItems(request *GetMultipleItemsRequestType) (*GetMultipleItemsResponseType, error) {
	response := new(GetMultipleItemsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *shoppingInterface) GetShippingCosts(request *GetShippingCostsRequestType) (*GetShippingCostsResponseType, error) {
	response := new(GetShippingCostsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *shoppingInterface) GetSingleItem(request *GetSingleItemRequestType) (*GetSingleItemResponseType, error) {
	response := new(GetSingleItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *shoppingInterface) GetUserProfile(request *GetUserProfileRequestType) (*GetUserProfileResponseType, error) {
	response := new(GetUserProfileResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *shoppingInterface) GeteBayTime(request *GeteBayTimeRequestType) (*GeteBayTimeResponseType, error) {
	response := new(GeteBayTimeResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
