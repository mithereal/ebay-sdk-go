// Code generated by gowsdl DO NOT EDIT.

package ebay

import (
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

//
// This enumerated type identifies the possible values that can be returned in the  <b>Ack</b> field in call responses. The <b>Ack</b> value  will indicate if the call was completely successful, if the called failed, or if the call was partially successful, but with minor errors or warnings.
//
type AckCodeType string

const (

	//
	// This value indicates that the call request was processed successfully without any issues.
	//
	AckCodeTypeSuccess AckCodeType = "Success"

	//
	// This value indicates that the call request processing failed.
	//
	AckCodeTypeFailure AckCodeType = "Failure"

	//
	// This value indicates that the call request was successful, but processing was not without any issues. These issues can be checked in the <b>Errors</b> container, that will also be returned when one or more known issues occur with the call request.
	//
	AckCodeTypeWarning AckCodeType = "Warning"

	//
	// This value indicates that the call request partially failed. One or more  issues that may be responsible for this partial failure can be checked in the <b>Errors</b> container, that will also be returned when one or more known issues occur with the call request.
	//
	AckCodeTypePartialFailure AckCodeType = "PartialFailure"

	//
	// Reserved for internal or future use.
	//
	AckCodeTypeCustomCode AckCodeType = "CustomCode"
)

//
// Identifies payment methods used by a buyer to pay a
// seller. On item listings, identifies one of the payment methods
// seller will accept for the item. Available payment methods can
// differ by site and item. Payment methods are not applicable to eBay
// Real Estate ad format listings.
//
type BuyerPaymentMethodCodeType string

const (

	//
	// This enumeration value indicates that no payment method has been specified for the listing. This may be the case for a classified ad listing since payment happens outside of the eBay platform.
	//
	BuyerPaymentMethodCodeTypeNone BuyerPaymentMethodCodeType = "None"

	//
	// This enumeration value indicates that a money order or cashiers check is accepted for payment. This value is not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeMOCC BuyerPaymentMethodCodeType = "MOCC"

	//
	// This enumeration value indicates that American Express is accepted for payment. This value is not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeAmEx BuyerPaymentMethodCodeType = "AmEx"

	//
	// This enumeration value indicates that buyers should check the listing description for more details on payment.
	//
	BuyerPaymentMethodCodeTypePaymentSeeDescription BuyerPaymentMethodCodeType = "PaymentSeeDescription"

	//
	// This enumeration value indicates that credit cards are accepted for payment. This value is not applicable to Real Estate-related listings or US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeCCAccepted BuyerPaymentMethodCodeType = "CCAccepted"

	//
	// This enumeration value indicates that a personal check is accepted for payment.
	//
	BuyerPaymentMethodCodeTypePersonalCheck BuyerPaymentMethodCodeType = "PersonalCheck"

	//
	// This enumeration value indicates that cash on delivery of item is accepted for payment. This value is not applicable to Real Estate-related listings.
	// This payment method is obsolete (ignored) for the US, US eBay Motors, UK, and Canada sites.
	//
	BuyerPaymentMethodCodeTypeCOD BuyerPaymentMethodCodeType = "COD"

	//
	// This enumeration value indicates that Visa or MasterCard are accepted for payment. This value is not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeVisaMC BuyerPaymentMethodCodeType = "VisaMC"

	//
	// This enumeration value indicates that PaisaPay is accepted for payment. This form of payment is only available to buyers in India.
	//
	BuyerPaymentMethodCodeTypePaisaPayAccepted BuyerPaymentMethodCodeType = "PaisaPayAccepted"

	//
	// This enumeration value may be returned if the payment method is unknown.
	//
	BuyerPaymentMethodCodeTypeOther BuyerPaymentMethodCodeType = "Other"

	//
	// This enumeration value indicates that PayPal is accepted as a payment method. This qualifies as a safe payment method. If true in listing
	// requests, Item.PayPalEmailAddress must also be specified.<br>
	// <br>
	// If you don't pass PayPal in the listing request but the seller's eBay
	// preferences are set to accept PayPal on all listings,
	// eBay will add PayPal as a payment method for you in most cases,
	// and we may return a warning. <br>
	// <br>
	// PayPal must be accepted when the seller requires immediate payment
	// (Item.AutoPay) or offers other PayPal-based features, such as a
	// finance offer (Item.FinanceOfferID).
	// PayPal must be accepted for charity listings.
	// PayPal must be accepted for event ticket listings when the venue is in
	// New York state or Illinois, so that eBay can offer buyer protection
	// (per state law). (For some applications, it may be
	// simplest to use errors returned from VerifyAddItem to flag the PayPal
	// requirement for New York and Illinois ticket listings.)
	// PayPal must be accepted for US eBay Motors listings that require a deposit (and it will not be set automatically based on the
	// seller's preferences). Conversely, if PayPal is specified for US eBay Motors listings, deposit attributes must be specified.<br>
	//
	BuyerPaymentMethodCodeTypePayPal BuyerPaymentMethodCodeType = "PayPal"

	//
	// This enumeration value indicates that Discover Card is accepted for payment. This value is not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeDiscover BuyerPaymentMethodCodeType = "Discover"

	//
	// This enumeration value indicates that cash on pickup is accepted for payment. This value is not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeCashOnPickup BuyerPaymentMethodCodeType = "CashOnPickup"

	//
	// This enumeration value indicates that a direct transfer of money is accepted for payment. This value is not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeMoneyXferAccepted BuyerPaymentMethodCodeType = "MoneyXferAccepted"

	//
	// This enumeration value indicates that a direct transfer of money during checkout is accepted for payment. This value is not applicable to US/CA eBay Motors listings.
	//
	BuyerPaymentMethodCodeTypeMoneyXferAcceptedInCheckout BuyerPaymentMethodCodeType = "MoneyXferAcceptedInCheckout"

	//
	// This enumeration value may be returned if the payment method is unknown.
	//
	BuyerPaymentMethodCodeTypeOtherOnlinePayments BuyerPaymentMethodCodeType = "OtherOnlinePayments"

	//
	// Reserved for future use.
	//
	BuyerPaymentMethodCodeTypeEscrow BuyerPaymentMethodCodeType = "Escrow"

	//
	// Reserved for future use.
	//
	BuyerPaymentMethodCodeTypePrePayDelivery BuyerPaymentMethodCodeType = "PrePayDelivery"

	//
	// Reserved for future use.
	//
	BuyerPaymentMethodCodeTypeCODPrePayDelivery BuyerPaymentMethodCodeType = "CODPrePayDelivery"

	//
	// Reserved for future use.
	//
	BuyerPaymentMethodCodeTypePostalTransfer BuyerPaymentMethodCodeType = "PostalTransfer"

	//
	// Reserved for internal or future use.
	//
	BuyerPaymentMethodCodeTypeCustomCode BuyerPaymentMethodCodeType = "CustomCode"

	//
	// This enumeration value indicates that a loan check is accepted for payment. This option is generally only applicable to motor vehicle listings.
	//
	BuyerPaymentMethodCodeTypeLoanCheck BuyerPaymentMethodCodeType = "LoanCheck"

	//
	// This enumeration value indicates that cash is accepted for payment. This option is generally only applicable to motor vehicle listings on the US and Canada sites.
	//
	BuyerPaymentMethodCodeTypeCashInPerson BuyerPaymentMethodCodeType = "CashInPerson"

	//
	// Elektronisches Lastschriftverfahren (direct debit).
	// Only applicable to the Express Germany site, which has been shut down.
	//
	BuyerPaymentMethodCodeTypeELV BuyerPaymentMethodCodeType = "ELV"

	//
	// This payment type is no longer applicable since eBay India is no longer a functioning site.
	//
	BuyerPaymentMethodCodeTypePaisaPayEscrow BuyerPaymentMethodCodeType = "PaisaPayEscrow"

	//
	// This payment type is no longer applicable since eBay India is no longer a functioning site.
	//
	BuyerPaymentMethodCodeTypePaisaPayEscrowEMI BuyerPaymentMethodCodeType = "PaisaPayEscrowEMI"

	//
	// This payment method is only applicable if
	// a seller has a payment gateway account.
	// You can use GetUser.User.SellerInfo.IntegratedMerchantCreditCardInfo
	// to determine if a seller has a payment gateway account.
	// If a seller successfully uses AddItem with IntegratedMerchantCreditCard,
	// then for the resulting item,
	// the IntegratedMerchantCreditCard value is a replacement
	// for a credit-card payment method such as VisaMC.
	// In such a case, the listing displays (to potential buyers) the credit cards that the
	// seller specified in the seller's preferences for their payment gateway account (in My eBay).
	// Additionally, a buyer's credit-card payment is integrated into eBay checkout.
	//
	BuyerPaymentMethodCodeTypeIntegratedMerchantCreditCard BuyerPaymentMethodCodeType = "IntegratedMerchantCreditCard"

	//
	// <span class="tablenote"><b>Note:</b>
	// This payment method is no longer an acceptable form of payment. Sellers may no longer offer this payment method to buyers when creating new listings.
	// </span>
	// <br>
	// The Moneybookers payment method.
	// For more information, see http://www.moneybookers.com/partners/us/ebay.
	// Only applicable to the US site (and
	// to the Parts and Accessories category of the US eBay Motors site).
	//
	BuyerPaymentMethodCodeTypeMoneybookers BuyerPaymentMethodCodeType = "Moneybookers"

	//
	// <span class="tablenote"><b>Note:</b>
	// This payment method is no longer an acceptable form of payment. Sellers may no longer offer this payment method to buyers when creating new listings.
	// </span>
	// <br>
	// The Paymate payment method. This payment method is only accepted on the eBay Australia site. For more information on setting up Paymate as an accepted payment method on the eBay Australia site,
	// see the <a href="http://www.paymate.com/cms/index.php/sellers/sell-on-ebay/selling-on-ebay" target="_blank">Sell with Paymate on eBay.com.au</a> help page.
	//
	BuyerPaymentMethodCodeTypePaymate BuyerPaymentMethodCodeType = "Paymate"

	//
	// <span class="tablenote"><b>Note:</b>
	// This payment method is no longer an acceptable form of payment. Sellers may no longer offer this payment method to buyers when creating new listings.
	// </span>
	// <br>
	// The ProPay payment method. US site only. For more information,
	// see http://www.Propay.com/eBay.
	//
	BuyerPaymentMethodCodeTypeProPay BuyerPaymentMethodCodeType = "ProPay"

	//
	// PayOnPickup payment method. PayOnPickup is the same as CashOnPickup.
	// For listings on the eBay US site, the user interface refers to this feature as Pay on pickup.
	// In the user interface of your application, please refer to the feature as Pay on pickup so that
	// the name in your user interface corresponds to the name on the eBay US site.
	//
	BuyerPaymentMethodCodeTypePayOnPickup BuyerPaymentMethodCodeType = "PayOnPickup"

	//
	// This payment method can be added only if
	// a seller has a IMCC payment gateway account and Diners Club card is selected in credit card preference.
	// Currently Dines card is enabled for CyberSource Gateway sellers.
	//
	BuyerPaymentMethodCodeTypeDiners BuyerPaymentMethodCodeType = "Diners"

	//
	// This value is no longer used.
	//
	BuyerPaymentMethodCodeTypeStandardPayment BuyerPaymentMethodCodeType = "StandardPayment"

	//
	// This value indicates that a debit card can be used/was used to pay for the order. This payment method value must be passed in one of the <b>Item.PaymentMethods</b> fields if the seller is making the item available for eBay Now delivery. For eBay Now orders, the eBay Now valet accepts debit cards as a form of payment. This value is only applicable for eBay Now orders.
	//
	BuyerPaymentMethodCodeTypeDirectDebit BuyerPaymentMethodCodeType = "DirectDebit"

	//
	// This value indicates that a credit card can be used/was used to pay for the order. This payment method value must be passed in one of the <b>Item.PaymentMethods</b> fields if the seller is making the item available for eBay Now delivery. For eBay Now orders, the eBay Now valet accepts credit cards as a form of payment. This value is only applicable for eBay Now orders.
	//
	BuyerPaymentMethodCodeTypeCreditCard BuyerPaymentMethodCodeType = "CreditCard"

	//
	// This buyer payment method is only applicable for the Germany site and is associated with the rollout of Progressive Checkout and the Pay Upon Invoice feature. 'PayUponInvoice' is not a payment method that is offered to the buyer, but instead, eBay/PayPal makes the determination (based on several factors) during checkout whether the buyer is eligible for 'Pay Upon Invoice'. If the buyer is offered the 'Pay Upon Invoice' option, that buyer is not required to pay for the order until an order invoice is sent by the seller. The seller must offer PayPal as a payment option or the 'Pay Upon Invoice' option will not be made available to the buyer under any circumstance.
	// <br><br>
	// Only select categories on the Germany site will support the 'Pay Upon Invoice' option, and orders going above the two-thousand dollar EURO mark will not be eligible for 'Pay Upon Invoice'.
	// <br><br>
	// Since the seller can not specify 'Pay Upon Invoice' as a payment method, this enumeration value cannot be passed into a <b>Item.PaymentMethods</b> field in an Add/Revise/Relist call.
	//
	BuyerPaymentMethodCodeTypePayUponInvoice BuyerPaymentMethodCodeType = "PayUponInvoice"

	//
	// This value indicates that QIWI can be used/was used by Russian buyers to pay for the order. This payment method value must be passed in one of the <b>Item.PaymentMethods</b> fields in an Add/Revise/Relist API call if the seller wants to make QIWI an available payment method for Russian buyers. QIWI works in conjunction with PayPal, so if 'QIWI' is set as an available payment method, 'PayPal' must be specified as well. This value can only be specified on the eBay US site, and it is only applicable for Russian buyers.
	//
	BuyerPaymentMethodCodeTypeQIWI BuyerPaymentMethodCodeType = "QIWI"

	//
	// This value indicates that a PayPal credit card can be used/was used to pay for the order.
	//
	BuyerPaymentMethodCodeTypePayPalCredit BuyerPaymentMethodCodeType = "PayPalCredit"
)

//
// Specifies standard subsets of data to return for each result
// within the set of results in the response payload. If no
// detail level is specified, a base set of data is returned.
// The base set of data varies per call.
//
type DetailLevelCodeType string

const (

	//
	// Returns all available data.
	// With <b>GetSellerList</b> and other calls that retrieve large data sets,
	// please avoid using <b>ReturnAll</b> when possible. For example, if you use
	// <b>GetSellerList</b>, use a <b>GranularityLevel</b> or use the
	// <b>GetSellerEvents</b> call instead. If you use <b>ReturnAll</b> with <b>GetSellerList</b>,
	// use a small <b>EntriesPerPage</b> value and a short
	// <b>EndTimeFrom</b>/<b>EndTimeTo</b> range for better performance.
	//
	DetailLevelCodeTypeReturnAll DetailLevelCodeType = "ReturnAll"

	//
	// Returns the description, plus the
	// <b>ListingDesigner</b> node and some additional information if applicable
	//
	DetailLevelCodeTypeItemReturnDescription DetailLevelCodeType = "ItemReturnDescription"

	//
	// For <b>GetItem</b>, returns Item Specifics and
	// Pre-filled Item Information, if any.
	// Also see the description of
	// <b>Item.ProductListingDetails</b> for <b>GetItem</b>.
	//
	DetailLevelCodeTypeItemReturnAttributes DetailLevelCodeType = "ItemReturnAttributes"

	//
	// If this value is used, the primary category and, if applicable, the secondary category is returned.
	//
	DetailLevelCodeTypeItemReturnCategories DetailLevelCodeType = "ItemReturnCategories"

	//
	// Returns the summary data.
	// For <b>GetMyMessages</b>, this detail level returns the same data
	// whether or not you include <b>MessageIDs</b> or <b>AlertIDs</b> in the
	// request. Returns up to 10 <b>FolderID</b> and <b>FolderName</b> values.
	// Currently, this detail level is the only way to retrieve
	// <b>FolderID</b> and <b>FolderName</b> values. See <b>GetMyMessages</b>
	// for a code sample that demonstrates
	// this.
	//
	DetailLevelCodeTypeReturnSummary DetailLevelCodeType = "ReturnSummary"

	//
	// Returns message headers.
	// For <b>GetMyMessages</b>, if you include <b>MessageIDs</b> or <b>AlertIDs</b> in
	// the request, this detail level returns header information,
	// without body text, for the specified message ID or alert ID
	// values. If you include a <b>FolderID</b>, header information is
	// returned only for the messages and alerts in the specified
	// folder.<br/><br/>
	// If you do not include <b>MessageIDs</b> or <b>AlertIDs</b>, this detail
	// level returns header information for Alerts and Messages as follows:
	// <ul>
	// <li>If all the Alerts have been read, they are sorted in date order,
	// with the most recent first.</li>
	// <li>If one of the Alerts has not been read, the Read Alerts come first,
	// sorted most recent first, followed by the Unread Alert(s).</li>
	// <li>All messages in ascending order by date received with the
	// oldest messages first.</li>
	// </ul>
	// <br/>
	// <span class="tablenote"><b>Note:</b>
	// Even when restricted by this detail level to return only header information, <b>GetMyMessages</b> may return a high volume of data.
	// </span>
	//
	DetailLevelCodeTypeReturnHeaders DetailLevelCodeType = "ReturnHeaders"

	//
	// Returns full message information.
	// For <b>GetMyMessages</b>, if you include <b>MessageIDs</b> or <b>AlertIDs</b> in
	// the request, this detail level returns message information
	// for the specified message ID or alert ID values. If you
	// include a <b>FolderID</b>, message information is returned only for
	// the messages and alerts in the specified folder.
	//
	DetailLevelCodeTypeReturnMessages DetailLevelCodeType = "ReturnMessages"
)

//
// Defines the action taken on a dispute with <b>AddDisputeResponse</b>. The value
// you can use at a given time depends on the current value of <b>DisputeState</b>
// (see the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/UPI-Assistant.html">Unpaid Item Assistant</a> for more information). Some values are for
// <i>Unpaid Item</i> disputes and some are for <i>Item Not Received</i> disputes.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay Money Back Guarantee disputes.
// </span>
//
type DisputeActivityCodeType string

const (

	//
	// The seller wants to add a response to the dispute. For <i>Unpaid Item</i> disputes. The seller is limited to 25 responses.
	//
	DisputeActivityCodeTypeSellerAddInformation DisputeActivityCodeType = "SellerAddInformation"

	//
	// The buyer has paid or the seller otherwise does not need to
	// pursue the dispute any longer. For <i>Unpaid Item</i> disputes.
	//
	DisputeActivityCodeTypeSellerCompletedTransaction DisputeActivityCodeType = "SellerCompletedTransaction"

	//
	// The seller has made an agreement with the buyer and requires a
	// credit for a Final Value Fee already paid. For <i>Unpaid Item</i> disputes.
	//
	DisputeActivityCodeTypeCameToAgreementNeedFVFCredit DisputeActivityCodeType = "CameToAgreementNeedFVFCredit"

	//
	// The seller wants to end communication or stop waiting for the
	// buyer. For <i>Unpaid Item</i> disputes.
	//
	DisputeActivityCodeTypeSellerEndCommunication DisputeActivityCodeType = "SellerEndCommunication"

	//
	// The seller wants to end communication or stop waiting for the
	// buyer. Mutual agreement has been reached or the buyer has not
	// responded within four days. For <i>Unpaid Item</i> disputes.
	//
	DisputeActivityCodeTypeMutualAgreementOrNoBuyerResponse DisputeActivityCodeType = "MutualAgreementOrNoBuyerResponse"

	//
	// The seller offers a full refund if the buyer did not receive
	// the item or a partial refund if the item is significantly not as
	// described. For <i>Item Not Received</i> and <i>Significantly Not As Described</i>
	// disputes.
	// <br/><br/>
	// This can be used when <b>DisputeState</b> is:
	// <br>
	// <code>NotReceivedNoSellerResponse</code><br>
	// <code>NotAsDescribedNoSellerResponse</code><br>
	// <code>NotReceivedMutualCommunication</code><br>
	// <code>NotAsDescribedMutualCommunication</code>
	//
	DisputeActivityCodeTypeSellerOffersRefund DisputeActivityCodeType = "SellerOffersRefund"

	//
	// The seller has shipped the item or a replacement and provides
	// shipping information. For <i>Item Not Received</i> and <i>Significantly Not As Described</i> disputes.
	// <br/><br/>
	// This can be used when <b>DisputeState</b> is:
	// <br>
	// <code>NotReceivedNoSellerResponse</code><br>
	// <code>NotReceivedMutualCommunication</code>
	//
	DisputeActivityCodeTypeSellerShippedItem DisputeActivityCodeType = "SellerShippedItem"

	//
	// The seller communicates with the buyer, offering a response or
	// comment. The seller is limited to 25 responses.
	// For <i>Item Not Received</i> and <i>Significantly Not As Described</i>
	// disputes.
	// <br/><br/>
	// This can be used when DisputeState is:<br>
	// <code>NotReceivedNoSellerResponse</code><br>
	// <code>NotAsDescribedNoSellerResponse</code><br>
	// <code>NotReceivedMutualCommunication</code><br>
	// <code>NotAsDescribedMutualCommunication</code>
	//
	DisputeActivityCodeTypeSellerComment DisputeActivityCodeType = "SellerComment"

	//
	// The buyer has not received an expected full or partial refund from the
	// seller in an <i>Item Not Received</i> and <i>Significantly Not As Described</i> buyer
	// dispute.
	// <br/><br/>
	// This can be used when <b>DisputeState</b> is:<br>
	// <code>NotReceivedNoSellerResponse</code> <br>
	// <code>NotReceivedMutualCommunication</code> <br>
	//
	DisputeActivityCodeTypeSellerPaymentNotReceived DisputeActivityCodeType = "SellerPaymentNotReceived"

	//
	// Reserved for internal or future use.
	//
	DisputeActivityCodeTypeCustomCode DisputeActivityCodeType = "CustomCode"
)

//
// Indicates whether the seller is eligible for a Final Value Fee credit if the
// dispute is resolved by the buyer and seller, or if eBay customer support makes a
// decision on the dispute in the seller's favor. Note that even if the item is
// eligible for a Final Value Fee credit, the credit is not guaranteed in any way.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeCreditEligibilityCodeType string

const (

	//
	// The seller is not currently eligible for a Final Value Fee credit.
	//
	DisputeCreditEligibilityCodeTypeInEligible DisputeCreditEligibilityCodeType = "InEligible"

	//
	// The seller is eligible for a Final Value Fee credit.
	//
	DisputeCreditEligibilityCodeTypeEligible DisputeCreditEligibilityCodeType = "Eligible"

	//
	// Reserved for internal or future use.
	//
	DisputeCreditEligibilityCodeTypeCustomCode DisputeCreditEligibilityCodeType = "CustomCode"
)

//
// Enumerated type that contains the explanations for a buyer or seller opening a case
// against one another. These values are specified in the <b>DisputeExplanation</b>
// field of <b>AddDispute</b>, and are returned in the
// <b>GetUserDisputes</b> and <b>GetDispute</b> calls. The
// <b>DisputeReason</b> value will dictate what
// <b>DisputeExplanation</b> values that can be used/returned.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeExplanationCodeType string

const (

	//
	// This value indicates that the buyer has not paid for the order line item, and has
	// not responded to the seller regarding payment. This value is allowed when the
	// <b>DisputeReason</b> value is <b>BuyerHasNotPaid</b>.
	//
	DisputeExplanationCodeTypeBuyerHasNotResponded DisputeExplanationCodeType = "BuyerHasNotResponded"

	//
	// This value indicates that the buyer has not paid for the order line item, and
	// according to the seller, has refused to pay for the order line item. This value is
	// allowed when the <b>DisputeReason</b> value is
	// <b>BuyerHasNotPaid</b>.
	//
	DisputeExplanationCodeTypeBuyerRefusedToPay DisputeExplanationCodeType = "BuyerRefusedToPay"

	//
	// This value indicates that the buyer has not paid for the order line item, and
	// is not cleared by eBay to pay. This value is allowed when the
	// <b>DisputeReason</b> value is
	// <b>BuyerHasNotPaid</b>.
	//
	DisputeExplanationCodeTypeBuyerNotClearedToPay DisputeExplanationCodeType = "BuyerNotClearedToPay"

	//
	// This value indicates that the buyer has returned the item, and seller has agreed to
	// cancel the order and issue a refund to the buyer. This value is allowed when the
	// <b>DisputeReason</b> value is <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeBuyerReturnedItemForRefund DisputeExplanationCodeType = "BuyerReturnedItemForRefund"

	//
	// This value indicates that the buyer and seller were unable to resolve a disagreement
	// over terms, and the seller is willing to cancel the order line item. This value is allowed when the
	// <b>DisputeReason</b> value is <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeUnableToResolveTerms DisputeExplanationCodeType = "UnableToResolveTerms"

	//
	// This value indicates that the buyer no longer wants the item (buyer remorse), and
	// the seller is willing to cancel the order line item. This value is allowed when the
	// <b>DisputeReason</b> value is
	// <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeBuyerNoLongerWantsItem DisputeExplanationCodeType = "BuyerNoLongerWantsItem"

	//
	// This value indicates that the buyer made a mistake by purchasing the item, and
	// the seller is willing to cancel the order line item. This value is allowed when the
	// <b>DisputeReason</b> value is
	// <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeBuyerPurchasingMistake DisputeExplanationCodeType = "BuyerPurchasingMistake"

	//
	// This value is deprecated, and should not be used.
	//
	DisputeExplanationCodeTypeShipCountryNotSupported DisputeExplanationCodeType = "ShipCountryNotSupported"

	//
	// This value indicates that the buyer is requesting shipment of the item to an
	// unconfirmed (not on file with eBay) address. This value is allowed when the
	// <b>DisputeReason</b> value is <b>BuyerHasNotPaid</b> or
	// <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeShippingAddressNotConfirmed DisputeExplanationCodeType = "ShippingAddressNotConfirmed"

	//
	// This value is deprecated, and should not be used.
	//
	DisputeExplanationCodeTypePaymentMethodNotSupported DisputeExplanationCodeType = "PaymentMethodNotSupported"

	//
	// This value is deprecated.
	//
	DisputeExplanationCodeTypeBuyerNoLongerRegistered DisputeExplanationCodeType = "BuyerNoLongerRegistered"

	//
	// This value can be used when no other explanation in <b>
	// DisputeExplanationCodeType</b> is appropriate for the situation. This value is
	// allowed when the <b>DisputeReason</b> value is
	// <b>BuyerHasNotPaid</b> or
	// <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeOtherExplanation DisputeExplanationCodeType = "OtherExplanation"

	//
	// This value can be used when no other explanation in
	// <b>DisputeExplanationCodeType</b> is appropriate for the situation. This
	// value is allowed when the <b>DisputeReason</b> value is
	// <b>ItemNotReceived</b> or <b>SignificantlyNotAsDescribed</b>.
	// This value cannot be used in <b>AddDispute</b>.
	//
	DisputeExplanationCodeTypeUnspecified DisputeExplanationCodeType = "Unspecified"

	//
	// This value indicates that the Unpaid Item case was opened by eBay through the Unpaid
	// Item Assistance mechanism. This value cannot be used in
	// <b>AddDispute</b>.
	//
	DisputeExplanationCodeTypeUPIAssistance DisputeExplanationCodeType = "UPIAssistance"

	//
	// This value indicates that the buyer has not paid the seller for the order line item,
	// or has paid the seller but the payment has not cleared. This value is allowed when
	// the <b>DisputeReason</b> value is <b>BuyerHasNotPaid</b>.
	//
	DisputeExplanationCodeTypeBuyerPaymentNotReceivedOrCleared DisputeExplanationCodeType = "BuyerPaymentNotReceivedOrCleared"

	//
	// This value indicates that the buyer is requesting shipment of the item to a country
	// that is on the seller's ship-to exclusion list. This value is allowed when the
	// <b>DisputeReason</b> value is <b>BuyerHasNotPaid</b> or
	// <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeSellerDoesntShipToCountry DisputeExplanationCodeType = "SellerDoesntShipToCountry"

	//
	// This value indicates that the buyer has not paid for the order line item. This value
	// is allowed when the <b>DisputeReason</b> value is
	// <b>BuyerHasNotPaid</b>.
	//
	DisputeExplanationCodeTypeBuyerNotPaid DisputeExplanationCodeType = "BuyerNotPaid"

	//
	// This value indicates that the Unpaid Item case was opened by eBay through the Unpaid
	// Item Assistance mechanism, and then was subsequently converted to a manual dispute,
	// either by the seller or by eBay. This value cannot be used in
	// <b>AddDispute</b>.
	//
	DisputeExplanationCodeTypeUPIAssistanceDisabled DisputeExplanationCodeType = "UPIAssistanceDisabled"

	//
	// This value indicates that the seller ran out of stock on the item, cannot fulfill
	// the order, and has to cancel the order line item. This value is allowed when the
	// <b>DisputeReason</b> value is
	// <b>TransactionMutuallyCanceled</b>.
	//
	DisputeExplanationCodeTypeSellerRanOutOfStock DisputeExplanationCodeType = "SellerRanOutOfStock"

	//
	// Reserved for internal or future use.
	//
	DisputeExplanationCodeTypeCustomCode DisputeExplanationCodeType = "CustomCode"
)

//
// Enumeration type that specifies the dispute filters that can be used in the
// <b>DisputeFilterType</b> field of the <b>GetUserDisputes</b> call. <b>Note</b> that eBay Money Back Guarantee cases are not returned with the <b>GetUserDisputes</b> call, regardless of
// the filter that is used.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay Money Back Guarantee cases.
// </span>
//
type DisputeFilterTypeCodeType string

const (

	//
	// If used, this filter returns all open and closed disputes that involve the caller as a buyer
	// or seller.
	//
	DisputeFilterTypeCodeTypeAllInvolvedDisputes DisputeFilterTypeCodeType = "AllInvolvedDisputes"

	//
	// If used, this filter returns all open disputes that involve the caller as a buyer
	// or seller and are awaiting a response from the caller. This is the default <b>DisputeFilterType</b> value. In other words, if no <b>DisputeFilterType</b> is specified in the request, only those disputes where the caller's response is due are returned.
	//
	DisputeFilterTypeCodeTypeDisputesAwaitingMyResponse DisputeFilterTypeCodeType = "DisputesAwaitingMyResponse"

	//
	// If used, this filter returns all open disputes that involve the caller as a buyer or seller and
	// are awaiting a response from the other party.
	//
	DisputeFilterTypeCodeTypeDisputesAwaitingOtherPartyResponse DisputeFilterTypeCodeType = "DisputesAwaitingOtherPartyResponse"

	//
	// If used, this filter returns all closed disputes that involve the caller as a buyer
	// or seller.
	//
	DisputeFilterTypeCodeTypeAllInvolvedClosedDisputes DisputeFilterTypeCodeType = "AllInvolvedClosedDisputes"

	//
	// If used, this filter returns all disputes that involve the caller as a buyer
	// or seller and are eligible for a Final Value Fee credit, regardless of
	// whether or not the credit has been granted.
	//
	DisputeFilterTypeCodeTypeEligibleForCredit DisputeFilterTypeCodeType = "EligibleForCredit"

	//
	// If used, this filter returns all open and closed <i>Unpaid Item</i> disputes that
	// involve the caller as a buyer or seller.
	//
	DisputeFilterTypeCodeTypeUnpaidItemDisputes DisputeFilterTypeCodeType = "UnpaidItemDisputes"

	//
	// If used, this filter returns all open and closed <i>Item Not Received</i> disputes
	// that involve the caller as a buyer or seller.
	//
	DisputeFilterTypeCodeTypeItemNotReceivedDisputes DisputeFilterTypeCodeType = "ItemNotReceivedDisputes"

	//
	// Reserved for future use.
	//
	DisputeFilterTypeCodeTypeCustomCode DisputeFilterTypeCodeType = "CustomCode"
)

//
// An identifier of a dispute.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeIDType string

//
// Defines who added a message to a dispute. Used for both <i>Unpaid Item</i>
// and <i>Item Not Received</i> disputes.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeMessageSourceCodeType string

const (

	//
	// The buyer of the item under dispute.
	//
	DisputeMessageSourceCodeTypeBuyer DisputeMessageSourceCodeType = "Buyer"

	//
	// The seller of the item under dispute.
	//
	DisputeMessageSourceCodeTypeSeller DisputeMessageSourceCodeType = "Seller"

	//
	// eBay, either an administrator or the site itself.
	//
	DisputeMessageSourceCodeTypeEBay DisputeMessageSourceCodeType = "eBay"

	//
	// Reserved for internal or future use.
	//
	DisputeMessageSourceCodeTypeCustomCode DisputeMessageSourceCodeType = "CustomCode"
)

//
// Enumerated type that contains the top-level reasons for a buyer or seller to create a
// case against one another. These values are specified in the
// <b>DisputeReason</b> field of <b>AddDispute</b>, and are returned
// in the <b>GetUserDisputes</b> and <b>GetDispute</b> calls.
// The <b>DisputeReason</b> value will dictate what
// <b>DisputeExplanation</b> values that can be used/returned.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeReasonCodeType string

const (

	//
	// The seller has opened a case against the buyer because the buyer has not paid for
	// the order line item. A seller can open an <i>Unpaid Item</i> case as early as two days after
	// the end of the auction listing. An exception to this rule occurs when the seller
	// allows combined payment orders. If the seller does allow the buyer to combine orders
	// and make one payment for those orders, the seller would not be able to open an Unpaid
	// Item case until after the time period to combine orders expires.
	// <br>
	//
	DisputeReasonCodeTypeBuyerHasNotPaid DisputeReasonCodeType = "BuyerHasNotPaid"

	//
	// With the mutual consent of the buyer, the seller is canceling the order line item.
	//
	DisputeReasonCodeTypeTransactionMutuallyCanceled DisputeReasonCodeType = "TransactionMutuallyCanceled"

	//
	// The buyer has opened a case against the seller because the item has not been
	// received by the buyer. A buyer can open an <i>Item Not Received</i> case after the
	// Estimated Delivery Date of the item has passed, or 7 days after payment if the
	// Estimated Delivery Date wasn't given by the seller. This value cannot be used in
	// <b>AddDispute</b>.
	//
	DisputeReasonCodeTypeItemNotReceived DisputeReasonCodeType = "ItemNotReceived"

	//
	// The buyer has opened a case against the seller because the item was received but
	// does not match the item description in the listing. A buyer can open an <i>Item
	// Significantly Not As Described</i> case immediately after receiving the item. This value
	// cannot be used in <b>AddDispute</b>.
	//
	DisputeReasonCodeTypeSignificantlyNotAsDescribed DisputeReasonCodeType = "SignificantlyNotAsDescribed"

	//
	// The item was returned but no refund was given. This value cannot be used in
	// <b>AddDispute</b>.
	//
	DisputeReasonCodeTypeNoRefund DisputeReasonCodeType = "NoRefund"

	//
	// Item was returned and seller was not paid. This value cannot be used in
	// <b>AddDispute</b>.
	//
	DisputeReasonCodeTypeReturnPolicyUnpaidItem DisputeReasonCodeType = "ReturnPolicyUnpaidItem"

	//
	// Reserved for future or internal use.
	//
	DisputeReasonCodeTypeCustomCode DisputeReasonCodeType = "CustomCode"
)

//
// Describes the type of dispute, either <i>Unpaid Item</i> or <i>Item Not Received</i>.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeRecordTypeCodeType string

const (

	//
	// An Unpaid Item dispute.
	//
	DisputeRecordTypeCodeTypeUnpaidItem DisputeRecordTypeCodeType = "UnpaidItem"

	//
	// An Item Not Received dispute.
	//
	DisputeRecordTypeCodeTypeItemNotReceived DisputeRecordTypeCodeType = "ItemNotReceived"

	//
	// A Half.com dispute.
	//
	DisputeRecordTypeCodeTypeHalfDispute DisputeRecordTypeCodeType = "HalfDispute"

	//
	// Reserved for internal or future use.
	//
	DisputeRecordTypeCodeTypeCustomCode DisputeRecordTypeCodeType = "CustomCode"
)

//
// Defines the reason a dispute was resolved.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeResolutionReasonCodeType string

const (

	//
	// The dispute was not resolved.
	//
	DisputeResolutionReasonCodeTypeUnresolved DisputeResolutionReasonCodeType = "Unresolved"

	//
	// The buyer provided proof of payment in feedback.
	//
	DisputeResolutionReasonCodeTypeProofOfPayment DisputeResolutionReasonCodeType = "ProofOfPayment"

	//
	// The buyer or seller had a technical problem with a computer.
	//
	DisputeResolutionReasonCodeTypeComputerTechnicalProblem DisputeResolutionReasonCodeType = "ComputerTechnicalProblem"

	//
	// The buyer and seller have not made contact.
	//
	DisputeResolutionReasonCodeTypeNoContact DisputeResolutionReasonCodeType = "NoContact"

	//
	// The buyer or seller had a family emergency.
	//
	DisputeResolutionReasonCodeTypeFamilyEmergency DisputeResolutionReasonCodeType = "FamilyEmergency"

	//
	// The buyer provided proof of payment in feedback.
	//
	DisputeResolutionReasonCodeTypeProofGivenInFeedback DisputeResolutionReasonCodeType = "ProofGivenInFeedback"

	//
	// The dispute was the buyer's first infraction.
	//
	DisputeResolutionReasonCodeTypeFirstInfraction DisputeResolutionReasonCodeType = "FirstInfraction"

	//
	// The buyer and seller came to agreement.
	//
	DisputeResolutionReasonCodeTypeCameToAgreement DisputeResolutionReasonCodeType = "CameToAgreement"

	//
	// The buyer returned the item.
	//
	DisputeResolutionReasonCodeTypeItemReturned DisputeResolutionReasonCodeType = "ItemReturned"

	//
	// The buyer reimbursed the seller's auction fees.
	//
	DisputeResolutionReasonCodeTypeBuyerPaidAuctionFees DisputeResolutionReasonCodeType = "BuyerPaidAuctionFees"

	//
	// The seller received payment.
	//
	DisputeResolutionReasonCodeTypeSellerReceivedPayment DisputeResolutionReasonCodeType = "SellerReceivedPayment"

	//
	// Some other resolution occurred.
	//
	DisputeResolutionReasonCodeTypeOtherResolution DisputeResolutionReasonCodeType = "OtherResolution"

	//
	// After eBay approved payment of the claim, the claim was paid.
	//
	DisputeResolutionReasonCodeTypeClaimPaid DisputeResolutionReasonCodeType = "ClaimPaid"

	//
	// Reserved for future use.
	//
	DisputeResolutionReasonCodeTypeCustomCode DisputeResolutionReasonCodeType = "CustomCode"
)

//
// Specifies the action taken by eBay as a result of the dispute resolution.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeResolutionRecordTypeCodeType string

const (

	//
	// The buyer received an Unpaid Item Strike.
	//
	DisputeResolutionRecordTypeCodeTypeStrikeBuyer DisputeResolutionRecordTypeCodeType = "StrikeBuyer"

	//
	// The buyer is suspended and unable to use the eBay site.
	//
	DisputeResolutionRecordTypeCodeTypeSuspendBuyer DisputeResolutionRecordTypeCodeType = "SuspendBuyer"

	//
	// The buyer is restricted and unable to bid or purchase items.
	//
	DisputeResolutionRecordTypeCodeTypeRestrictBuyer DisputeResolutionRecordTypeCodeType = "RestrictBuyer"

	//
	// The seller received a Final Value Fee credit.
	//
	DisputeResolutionRecordTypeCodeTypeFVFCredit DisputeResolutionRecordTypeCodeType = "FVFCredit"

	//
	// The seller's listing fee was credited.
	//
	DisputeResolutionRecordTypeCodeTypeInsertionFeeCredit DisputeResolutionRecordTypeCodeType = "InsertionFeeCredit"

	//
	// The buyer's Unpaid Item Strike was appealed.
	//
	DisputeResolutionRecordTypeCodeTypeAppealBuyerStrike DisputeResolutionRecordTypeCodeType = "AppealBuyerStrike"

	//
	// The restriction on the buyer was lifted.
	//
	DisputeResolutionRecordTypeCodeTypeUnsuspendBuyer DisputeResolutionRecordTypeCodeType = "UnsuspendBuyer"

	//
	// The restriction on the buyer was lifted.
	//
	DisputeResolutionRecordTypeCodeTypeUnrestrictBuyer DisputeResolutionRecordTypeCodeType = "UnrestrictBuyer"

	//
	// The seller's Final Value Fee credit was reversed.
	//
	DisputeResolutionRecordTypeCodeTypeReverseFVFCredit DisputeResolutionRecordTypeCodeType = "ReverseFVFCredit"

	//
	// The seller's listing fee was reversed.
	//
	DisputeResolutionRecordTypeCodeTypeReverseInsertionFeeCredit DisputeResolutionRecordTypeCodeType = "ReverseInsertionFeeCredit"

	//
	// The buyer is given a ticket.
	//
	DisputeResolutionRecordTypeCodeTypeGenerateCSTicketForSuspend DisputeResolutionRecordTypeCodeType = "GenerateCSTicketForSuspend"

	//
	// The seller did not receive a Final Value Fee credit.
	//
	DisputeResolutionRecordTypeCodeTypeFVFCreditNotGranted DisputeResolutionRecordTypeCodeType = "FVFCreditNotGranted"

	//
	// The buyer did not received the item, and the buyer filed a claim.
	//
	DisputeResolutionRecordTypeCodeTypeItemNotReceivedClaimFiled DisputeResolutionRecordTypeCodeType = "ItemNotReceivedClaimFiled"

	//
	//
	// Reserved for future use.
	//
	DisputeResolutionRecordTypeCodeTypeUnpaidItemRelisted DisputeResolutionRecordTypeCodeType = "UnpaidItemRelisted"

	//
	//
	// Reserved for future use.
	//
	DisputeResolutionRecordTypeCodeTypeUnpaidItemRevised DisputeResolutionRecordTypeCodeType = "UnpaidItemRevised"

	//
	//
	// Reserved for future use.
	//
	DisputeResolutionRecordTypeCodeTypeFVFOnShippingCredit DisputeResolutionRecordTypeCodeType = "FVFOnShippingCredit"

	//
	//
	// Reserved for future use.
	//
	DisputeResolutionRecordTypeCodeTypeFVFOnShippingCreditNotGranted DisputeResolutionRecordTypeCodeType = "FVFOnShippingCreditNotGranted"

	//
	//
	// Reserved for future use.
	//
	DisputeResolutionRecordTypeCodeTypeReverseFVFOnShippingCredit DisputeResolutionRecordTypeCodeType = "ReverseFVFOnShippingCredit"

	//
	// Credit amount for feature fees.
	//
	DisputeResolutionRecordTypeCodeTypeFeatureFeeCredit DisputeResolutionRecordTypeCodeType = "FeatureFeeCredit"

	//
	// Amount not returned or credited for feature fees. Item price.
	//
	DisputeResolutionRecordTypeCodeTypeFeatureFeeNotCredit DisputeResolutionRecordTypeCodeType = "FeatureFeeNotCredit"

	//
	// Amount reversed on credit card for feature fees.
	//
	DisputeResolutionRecordTypeCodeTypeReverseFeatureFeeCredit DisputeResolutionRecordTypeCodeType = "ReverseFeatureFeeCredit"

	//
	// Reserved for internal or future use.
	//
	DisputeResolutionRecordTypeCodeTypeCustomCode DisputeResolutionRecordTypeCodeType = "CustomCode"
)

//
// Specifies how a list of returned disputes should be sorted.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeSortTypeCodeType string

const (

	//
	// (in) Sort by the time the dispute was created, in descending order.
	//
	DisputeSortTypeCodeTypeNone DisputeSortTypeCodeType = "None"

	//
	// (in) Sort by the time the dispute was created, in ascending order.
	//
	DisputeSortTypeCodeTypeDisputeCreatedTimeAscending DisputeSortTypeCodeType = "DisputeCreatedTimeAscending"

	//
	// (in) Sort by the time the dispute was created, in descending order.
	//
	DisputeSortTypeCodeTypeDisputeCreatedTimeDescending DisputeSortTypeCodeType = "DisputeCreatedTimeDescending"

	//
	// (in) Sort by the dispute status, in ascending order.
	//
	DisputeSortTypeCodeTypeDisputeStatusAscending DisputeSortTypeCodeType = "DisputeStatusAscending"

	//
	// (in) Sort by the dispute status, in descending order.
	//
	DisputeSortTypeCodeTypeDisputeStatusDescending DisputeSortTypeCodeType = "DisputeStatusDescending"

	//
	// (in) Sort by whether the dispute is eligible for
	// Final Value Fee credit, in ascending
	// order. Ineligible disputes are listed before eligible disputes.
	//
	DisputeSortTypeCodeTypeDisputeCreditEligibilityAscending DisputeSortTypeCodeType = "DisputeCreditEligibilityAscending"

	//
	// (in) Sort by whether the dispute is eligible for
	// Final Value Fee credit, in descending
	// order. Eligible disputes are listed before ineligible disputes.
	//
	DisputeSortTypeCodeTypeDisputeCreditEligibilityDescending DisputeSortTypeCodeType = "DisputeCreditEligibilityDescending"

	//
	// (out) Reserved for internal or future use.
	//
	DisputeSortTypeCodeTypeCustomCode DisputeSortTypeCodeType = "CustomCode"
)

//
// Defines the current state of the dispute, which determines the values
// that are valid for DisputeActivity. DisputeState is an internal value
// returned in the response. A value can apply to an Unpaid Item or Item
// Not Received dispute. A dispute filed when an item is significantly not
// as described in the product listing is a variation of an Item Not
// Received dispute.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeStateCodeType string

const (

	//
	// The dispute is locked and cannot be updated. For any type of
	// dispute. No values of DisputeActivity are valid.
	//
	DisputeStateCodeTypeLocked DisputeStateCodeType = "Locked"

	//
	// The dispute is closed. In some cases, it can be reversed with
	// SellerReverseDispute. For any type of dispute. No values of
	// DisputeActivity are valid.
	//
	DisputeStateCodeTypeClosed DisputeStateCodeType = "Closed"

	//
	// eBay sent the buyer an Unpaid Item Reminder with a Pay Now
	// option. Waiting for the buyer's first response. It is within the 7-day
	// grace period. For Unpaid Item Disputes. DisputeActivity can be
	// SellerAddInformation or SellerCompletedTransaction.
	//
	DisputeStateCodeTypeBuyerFirstResponsePayOption DisputeStateCodeType = "BuyerFirstResponsePayOption"

	//
	// eBay sent the buyer an Unpaid Item Reminder with no Pay Now
	// option. Waiting for the buyer's first response. It is within the 7-day
	// grace period. For Unpaid Item Disputes. DisputeActivity can be
	// SellerAddInformation or SellerCompletedTransaction.
	//
	DisputeStateCodeTypeBuyerFirstResponseNoPayOption DisputeStateCodeType = "BuyerFirstResponseNoPayOption"

	//
	// eBay sent the buyer an Unpaid Item Reminder with a Pay Now
	// option. Waiting for the buyer's first response. The 7-day grace
	// period has expired. For Unpaid Item Disputes. DisputeActivity can be
	// SellerAddInformation, SellerCompletedTransaction, or
	// SellerEndCommunication.
	//
	DisputeStateCodeTypeBuyerFirstResponsePayOptionLateResponse DisputeStateCodeType = "BuyerFirstResponsePayOptionLateResponse"

	//
	// eBay sent the buyer an Unpaid Item Reminder with no Pay Now
	// option. Waiting for the buyer's first response. The 7-day grace
	// period has expired. For Unpaid Item Disputes. DisputeActivity can be
	// SellerAddInformation, SellerCompletedTransaction, or
	// SellerEndCommunication.
	//
	DisputeStateCodeTypeBuyerFirstResponseNoPayOptionLateResponse DisputeStateCodeType = "BuyerFirstResponseNoPayOptionLateResponse"

	//
	// The buyer and seller have communicated, and eBay offered the buyer
	// a Pay Now option. For Unpaid Item Disputes. DisputeActivity
	// can be SellerAddInformation, SellerCompletedTransaction,
	// SellerEndCommunication, or CameToAgreementNeedFVFCredit.
	//
	DisputeStateCodeTypeMutualCommunicationPayOption DisputeStateCodeType = "MutualCommunicationPayOption"

	//
	// The buyer and seller have communicated. eBay did not offer
	// the buyer a Pay Now option. For Unpaid Item Disputes. DisputeActivity can
	// be SellerAddInformation, SellerCompletedTransaction,
	// SellerEndCommunication, or CameToAgreementNeedFVFCredit.
	//
	DisputeStateCodeTypeMutualCommunicationNoPayOption DisputeStateCodeType = "MutualCommunicationNoPayOption"

	//
	// The dispute is pending resolution. A dispute cannot be closed
	// when it is in this state. For Unpaid Item Disputes.
	// No values of DisputeActivity are valid.
	//
	DisputeStateCodeTypePendingResolve DisputeStateCodeType = "PendingResolve"

	//
	// The buyer and seller have agreed within the grace period not
	// to complete the transaction. For Unpaid Item Disputes.
	// DisputeActivity can be SellerAddInformation.
	//
	DisputeStateCodeTypeMutualWithdrawalAgreement DisputeStateCodeType = "MutualWithdrawalAgreement"

	//
	// The buyer and seller have agreed not to complete the
	// transaction, after the grace period. For Unpaid Item Disputes.
	// DisputeActivity can be SellerAddInformation,
	// SellerCompletedTransaction, or SellerEndCommunication.
	//
	DisputeStateCodeTypeMutualWithdrawalAgreementLate DisputeStateCodeType = "MutualWithdrawalAgreementLate"

	//
	// The buyer filed an Item Not Received dispute, and the seller
	// has not responded. For Item Not Received disputes. DisputeActivity
	// can be SellerOffersRefund, SellerShippedItem, or SellerComment.
	//
	DisputeStateCodeTypeNotReceivedNoSellerResponse DisputeStateCodeType = "NotReceivedNoSellerResponse"

	//
	// The buyer filed an Item Not Received dispute for an item
	// significantly not as described, and the seller has not responded.
	// DisputeActivity can be SellerOffersRefund or SellerComment.
	//
	DisputeStateCodeTypeNotAsDescribedNoSellerResponse DisputeStateCodeType = "NotAsDescribedNoSellerResponse"

	//
	// The buyer filed an Item Not Received dispute and is
	// communicating with the seller. DisputeActivity can be
	// SellerOffersRefund, SellerShippedItem, or SellerComment.
	//
	DisputeStateCodeTypeNotReceivedMutualCommunication DisputeStateCodeType = "NotReceivedMutualCommunication"

	//
	// The buyer filed an Item Not Received dispute for an item
	// significantly not as described and is communicating with the seller.
	// DisputeActivity can be SellerOffersRefund.
	//
	DisputeStateCodeTypeNotAsDescribedMutualCommunication DisputeStateCodeType = "NotAsDescribedMutualCommunication"

	//
	// The seller says mutual agreement has been reached and is
	// waiting for the buyer to confirm, or the buyer is returning the item
	// to the seller. DisputeActivity can be SellerAddInformation.
	// For Unpaid Item Disputes.
	//
	DisputeStateCodeTypeMutualAgreementOrBuyerReturningItem DisputeStateCodeType = "MutualAgreementOrBuyerReturningItem"

	//
	// The claim was assigned to an adjuster.
	//
	DisputeStateCodeTypeClaimOpened DisputeStateCodeType = "ClaimOpened"

	//
	// The buyer was contacted by eBay and asked to submit paperwork to
	// support the claim.
	//
	DisputeStateCodeTypeNoDocumentation DisputeStateCodeType = "NoDocumentation"

	//
	// The buyer did not respond to verification or was missing paperwork.
	//
	DisputeStateCodeTypeClaimClosed DisputeStateCodeType = "ClaimClosed"

	//
	// The buyer is not eligible for reimbursement.
	//
	DisputeStateCodeTypeClaimDenied DisputeStateCodeType = "ClaimDenied"

	//
	// Paperwork was received from the buyer and the claim is being investigated.
	//
	DisputeStateCodeTypeClaimPending DisputeStateCodeType = "ClaimPending"

	//
	// The buyer's claim was approved for reimbursement and was
	// sent to accounts payable for payment.
	//
	DisputeStateCodeTypeClaimPaymentPending DisputeStateCodeType = "ClaimPaymentPending"

	//
	// The buyer was reimbursed.
	//
	DisputeStateCodeTypeClaimPaid DisputeStateCodeType = "ClaimPaid"

	//
	// The issue has been resolved: the seller sent the item or a refund.
	//
	DisputeStateCodeTypeClaimResolved DisputeStateCodeType = "ClaimResolved"

	//
	// A claim was submitted (via Web).
	//
	DisputeStateCodeTypeClaimSubmitted DisputeStateCodeType = "ClaimSubmitted"

	//
	// The unpaid item dispute is open.
	//
	DisputeStateCodeTypeUnpaidItemOpen DisputeStateCodeType = "UnpaidItemOpen"

	//
	// An unpaid item dispute filed by the Unpaid Item Assistance mechanism was
	// disabled by eBay (for example, eBay detected that payment was initiated
	// and the seller needs to manually handle this dispute).
	//
	DisputeStateCodeTypeUPIAssistanceDisabledByeBay DisputeStateCodeType = "UPIAssistanceDisabledByeBay"

	//
	// An unpaid item dispute filed by the Unpaid Item Assistance mechanism was
	// disabled by the seller (e.g. the buyer and seller have communicated
	// about payment and the seller wishes to extend the time for payment
	// and not let the automatic process close the dispute 4 days after the
	// dispute was automatically opened).
	//
	DisputeStateCodeTypeUPIAssistanceDisabledBySeller DisputeStateCodeType = "UPIAssistanceDisabledBySeller"

	//
	// Reserved for internal or future use.
	//
	DisputeStateCodeTypeCustomCode DisputeStateCodeType = "CustomCode"
)

//
// Describes the status of the dispute, which supplements the DisputeState.
// Some values apply to Unpaid Item disputes and some to Item Not Received disputes.
// Disputes can be sorted by DisputeStatus. Ascending order is:<br>
// 1 - WaitingForSellerResponse<br>
// 2 - WaitingForBuyerResponse<br>
// 3 - ClosedFVFCreditStrike<br>
// 4 - ClosedNoFVFCreditStrike<br>
// 5 - ClosedFVFCreditNoStrike<br>
// 6 - ClosedNoFVFCreditNoStrike<br>
// 7 - Closed<br>
// 8 - StrikeAppealedAfterClosing<br>
// 9	- FVFCreditReversedAfterClosing<br>
// 10 - StrikeAppealedAndFVFCreditReversed<br>
// Descending order is the reverse.
// <br/><br/>
// <span class="tablenote"><strong>Note:</strong>
// These are not eBay money back guarantee disputes.
// </span>
//
type DisputeStatusCodeType string

const (

	//
	// The dispute is closed. For Item Not Received disputes.
	//
	DisputeStatusCodeTypeClosed DisputeStatusCodeType = "Closed"

	//
	// The dispute is waiting for the seller's response. For both
	// Unpaid Item and Item Not Received disputes.
	//
	DisputeStatusCodeTypeWaitingForSellerResponse DisputeStatusCodeType = "WaitingForSellerResponse"

	//
	// The dispute is waiting for the buyer's response. For both
	// Unpaid Item and Item Not Received disputes.
	//
	DisputeStatusCodeTypeWaitingForBuyerResponse DisputeStatusCodeType = "WaitingForBuyerResponse"

	//
	// The dispute is closed, the seller received
	// a Final Value Fee credit, and the buyer received a strike.
	// For Unpaid Item disputes.
	//
	DisputeStatusCodeTypeClosedFVFCreditStrike DisputeStatusCodeType = "ClosedFVFCreditStrike"

	//
	// The dispute is closed, the seller did not receive
	// a Final Value Fee credit, and the buyer received a strike.
	// For Unpaid Item disputes.
	//
	DisputeStatusCodeTypeClosedNoFVFCreditStrike DisputeStatusCodeType = "ClosedNoFVFCreditStrike"

	//
	// The dispute is closed, the seller received a
	// Final Value Fee credit, and the buyer did not receive a strike.
	// For Unpaid Item disputes.
	//
	DisputeStatusCodeTypeClosedFVFCreditNoStrike DisputeStatusCodeType = "ClosedFVFCreditNoStrike"

	//
	// The dispute is closed, the seller did not receive
	// a Final Value Fee credit, and the buyer did not receive a strike.
	// For Unpaid Item disputes.
	//
	DisputeStatusCodeTypeClosedNoFVFCreditNoStrike DisputeStatusCodeType = "ClosedNoFVFCreditNoStrike"

	//
	// The buyer's strike was appealed after the dispute was closed.
	// For Unpaid Item disputes.
	//
	DisputeStatusCodeTypeStrikeAppealedAfterClosing DisputeStatusCodeType = "StrikeAppealedAfterClosing"

	//
	// The seller's Final Value Fee credit was reversed after the
	// dispute was closed. For Unpaid Item disputes.
	//
	DisputeStatusCodeTypeFVFCreditReversedAfterClosing DisputeStatusCodeType = "FVFCreditReversedAfterClosing"

	//
	// Both the seller's Final Value Fee credit and the buyer's strike
	// were reversed after the dispute was closed. For Unpaid Item disputes.
	//
	DisputeStatusCodeTypeStrikeAppealedAndFVFCreditReversed DisputeStatusCodeType = "StrikeAppealedAndFVFCreditReversed"

	//
	// Claim assigned to an adjuster. Also maps for filed claim in Half.com
	//
	DisputeStatusCodeTypeClaimOpened DisputeStatusCodeType = "ClaimOpened"

	//
	// Buyer contacted and asked to submit paperwork
	//
	DisputeStatusCodeTypeNoDocumentation DisputeStatusCodeType = "NoDocumentation"

	//
	// Buyer did not respond to verification or missing some paperwork. Also maps for
	// filed claim in Half.com
	//
	DisputeStatusCodeTypeClaimClosed DisputeStatusCodeType = "ClaimClosed"

	//
	// Not eligible for reimbursement
	//
	DisputeStatusCodeTypeClaimDenied DisputeStatusCodeType = "ClaimDenied"

	//
	// Paperwork received, claim being investigated. Also maps for filed claim in
	// Half.com
	//
	DisputeStatusCodeTypeClaimInProcess DisputeStatusCodeType = "ClaimInProcess"

	//
	// Claim approved for reimbursement; sent to accounts payable for payment
	//
	DisputeStatusCodeTypeClaimApproved DisputeStatusCodeType = "ClaimApproved"

	//
	// Reimbursement completed
	//
	DisputeStatusCodeTypeClaimPaid DisputeStatusCodeType = "ClaimPaid"

	//
	// Issue resolved: seller sent Item or Refund
	//
	DisputeStatusCodeTypeClaimResolved DisputeStatusCodeType = "ClaimResolved"

	//
	// Claim Submitted via Web flow
	//
	DisputeStatusCodeTypeClaimSubmitted DisputeStatusCodeType = "ClaimSubmitted"

	//
	// Unpaid Item dispute opened
	//
	DisputeStatusCodeTypeUnpaidItemOpened DisputeStatusCodeType = "UnpaidItemOpened"

	//
	// Reserved for internal or future use.
	//
	DisputeStatusCodeTypeCustomCode DisputeStatusCodeType = "CustomCode"
)

type ErrorClassificationCodeType string

const (

	//
	// An error has occurred either as a result of a problem in the sending
	// application or because the application's end-user has attempted to submit
	// invalid data (or missing data). In these cases, do not retry the request. The
	// problem must be corrected before the request can be made again. If the problem
	// is due to something in the application (such as a missing required field), the
	// application must be changed. If the problem is a result of end-user data, the
	// application must alert the end-user to the problem and provide the means for
	// the end-user to correct the data. Once the problem in the application or data
	// is resolved, resend the request to eBay with the corrected data.
	//
	ErrorClassificationCodeTypeRequestError ErrorClassificationCodeType = "RequestError"

	//
	// Indicates that an error has occurred on the eBay system side, such as a
	// database or server down. An application can retry the request as-is a
	// reasonable number of times (eBay recommends twice). If the error persists,
	// contact Developer Technical Support. Once the problem has been resolved, the
	// request may be resent in its original form.
	//
	ErrorClassificationCodeTypeSystemError ErrorClassificationCodeType = "SystemError"

	//
	// (out) Reserved for internal or future use.
	//
	ErrorClassificationCodeTypeCustomCode ErrorClassificationCodeType = "CustomCode"
)

//
// Preferences that specify how eBay should handle certain requests that contain
// invalid data or that could partially fail. These preferences give you some control
// over whether eBay returns warnings or errors in response to invalid data and how
// eBay handles listing requests when such data is passed in. For example, these
// preferences are applicable to <b>AddItem</b> and related calls when Item Specifics are
// specified, and to <b>CompleteSale</b>. See <a href="http://developer.ebay.com/devzone/guides/ebayfeatures/Basics/Call-ErrorHandling.htmll">Error Handling</a>
// for details about these preferences and their effects.
//
type ErrorHandlingCodeType string

const (

	//
	// Apply validation rules that were in effect prior to the time
	// the call started supporting <b>ErrorHandling</b>.
	//
	ErrorHandlingCodeTypeLegacy ErrorHandlingCodeType = "Legacy"

	//
	// Drop the invalid data, continue processing the request with the
	// valid data. If dropping the invalid data leaves the request in a
	// state where required data is missing, reject the request.<br>
	// <br>
	// If <b>BestEffort</b> is specified for <b>CompleteSale</b>, the Ack field in the
	// response could return PartialFailure if one change fails but
	// another succeeds. For example, if the seller attempts to
	// leave feedback twice for the same order line item, the feedback changes
	// would fail but any paid or shipped status changes would succeed.
	//
	ErrorHandlingCodeTypeBestEffort ErrorHandlingCodeType = "BestEffort"

	//
	// If any of the item specifics data is invalid, drop all the data and
	// proceed with listing the item. If the category has required item specifics
	// and the data was dropped, reject the listing.
	//
	ErrorHandlingCodeTypeAllOrNothing ErrorHandlingCodeType = "AllOrNothing"

	//
	// If any data is invalid, reject the request.
	//
	ErrorHandlingCodeTypeFailOnError ErrorHandlingCodeType = "FailOnError"
)

type InvocationStatusType string

const (
	InvocationStatusTypeInProgress InvocationStatusType = "InProgress"

	InvocationStatusTypeSuccess InvocationStatusType = "Success"

	InvocationStatusTypeFailure InvocationStatusType = "Failure"

	InvocationStatusTypeCustomCode InvocationStatusType = "CustomCode"
)

type MeasurementSystemCodeType string

const (

	//
	// English system of measurement.
	//
	MeasurementSystemCodeTypeEnglish MeasurementSystemCodeType = "English"

	//
	// Metric system of measurement.
	//
	MeasurementSystemCodeTypeMetric MeasurementSystemCodeType = "Metric"
)

//
// SeverityCodeType - Type declaration to be used by other schema.
// This code identifies the severity of an API error. A code indicates
// whether there is an API-level error or warning that needs to be
// communicated to the client.
//
type SeverityCodeType string

const (

	//
	// The request was processed successfully, but something occurred that may affect your application or the user. For example, eBay may have changed a value the user sent in. In this case, eBay returns a normal, successful response and also returns the warning.
	// <br/><br/>
	// When a warning occurs, the error is returned in addition to the business data. In this case, you do not need to retry the request (as the original request was successful). However, depending on the cause or nature of the warning, you might need to contact either the end user or eBay to effect a long term solution to the problem to prevent it from reoccurring in the future.
	//
	SeverityCodeTypeWarning SeverityCodeType = "Warning"

	//
	// The request that triggered the error was not processed successfully. When a serious application-level error occurs, the error is returned instead of the business data.
	// <br/><br/>
	// If the source of the problem is within the application (such as a missing required element), change the application before you retry the request.
	// <ul>
	// <li>If the problem is due to end-user input data, please alert the end-user to the problem and provide the means for them to correct the data. Once the problem in the application or data is resolved, you can attempt to re-send the request to eBay.
	// </li>
	// <li>If the source of the problem is on eBay's side, An application can retry the request as-is a reasonable number of times (eBay recommends twice). If the error persists, contact Developer Technical Support. Once the problem has been resolved, the request may be resent in its original form.
	// </li>
	// </ul>
	// <br/><br/>
	// See the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/Call-UsingLiveData.html#CompatibleApplicationCheck">Compatible Application Check</a> section of the
	// eBay Features Guide for more information.
	//
	SeverityCodeTypeError SeverityCodeType = "Error"

	//
	// Reserved for internal or future use.
	//
	SeverityCodeTypeCustomCode SeverityCodeType = "CustomCode"
)

//
// Specifies a universally unique identifier for an item. This is used to ensure that you only
// list a particular item once, particularly if you are listing many items at once.
// The identifier can contain only digits
// from 0-9 and letters from A-F. The identifier must be 32 characters long.  For
// example, 9CEBD9A6825644EC8D06C436D6CF494B.
//
type UUIDType string

//
// This enumerated type contains the list of values that can be passed in through the <b>WarningLevel</b> field of a call request.
//
type WarningLevelCodeType string

const (

	//
	// The <b>WarningLevel</b> value is set to <code>Low</code> if the user does not wish to receive warnings when the application passes
	// unrecognized or deprecated elements in an API call request.
	// This is the default value if <b>WarningLevel</b> is not specified in the call request.
	//
	WarningLevelCodeTypeLow WarningLevelCodeType = "Low"

	//
	// The <b>WarningLevel</b> value is set to <code>High</code> if the user wishes to receive warnings when the application passes unrecognized or deprecated elements in an API call request. Setting the <b>WarningLevel</b> value to <code>High</code>  is not recommended in a production environment. Instead, it should only be used during the development/debugging stage.
	//
	WarningLevelCodeTypeHigh WarningLevelCodeType = "High"
)

//
// Enumerated type that defines the possible values that can be returned in the <b>RuleCurrentStatus</b> output field of the <b>GetApiAccessRules</b> call. The <b>RuleCurrentStatus</b> is only returned if the daily, hourly, or periodic call limit for the corresponding API call has been exceeded, or if a call limit does not apply to the API call.
//
type AccessRuleCurrentStatusCodeType string

const (

	//
	// This value indicates that usage limits do not apply to the corresponding API call.
	//
	AccessRuleCurrentStatusCodeTypeNotSet AccessRuleCurrentStatusCodeType = "NotSet"

	//
	// This value indicates that your application has exceeded its hourly hard call limit for the corresponding API call.
	//
	AccessRuleCurrentStatusCodeTypeHourlyLimitExceeded AccessRuleCurrentStatusCodeType = "HourlyLimitExceeded"

	//
	// This value indicates that your application has exceeded its daily hard call limit for the corresponding API call.
	//
	AccessRuleCurrentStatusCodeTypeDailyLimitExceeded AccessRuleCurrentStatusCodeType = "DailyLimitExceeded"

	//
	// This value indicates that your application has exceeded its periodic hard call limit for the corresponding API call. The period is defined in the <b>ApiAccessRule.Period</b> field and can be a calendar month or a specific number of days.
	//
	AccessRuleCurrentStatusCodeTypePeriodicLimitExceeded AccessRuleCurrentStatusCodeType = "PeriodicLimitExceeded"

	//
	// This value indicates that your application has exceeded its hourly soft call limit for the corresponding API call.
	//
	AccessRuleCurrentStatusCodeTypeHourlySoftLimitExceeded AccessRuleCurrentStatusCodeType = "HourlySoftLimitExceeded"

	//
	// This value indicates that your application has exceeded its daily soft call limit for the corresponding API call.
	//
	AccessRuleCurrentStatusCodeTypeDailySoftLimitExceeded AccessRuleCurrentStatusCodeType = "DailySoftLimitExceeded"

	//
	// This value indicates that your application has exceeded its periodic soft call limit for the corresponding API call. The period is defined in the <b>ApiAccessRule.Period</b> field and can be a calendar month or a specific number of days.
	//
	AccessRuleCurrentStatusCodeTypePeriodicSoftLimitExceeded AccessRuleCurrentStatusCodeType = "PeriodicSoftLimitExceeded"

	//
	// Reserved for internal or future use.
	//
	AccessRuleCurrentStatusCodeTypeCustomCode AccessRuleCurrentStatusCodeType = "CustomCode"
)

//
// This enumerated type contains values that describe an application's current status
// with respect to an API access rule.
//
type AccessRuleStatusCodeType string

const (

	//
	// This value indicates that the rule is turned off, and no rule validation
	// was performed.
	//
	AccessRuleStatusCodeTypeRuleOff AccessRuleStatusCodeType = "RuleOff"

	//
	// This value indicates that the rule is turned on, and rule validation was
	// performed.
	//
	AccessRuleStatusCodeTypeRuleOn AccessRuleStatusCodeType = "RuleOn"

	//
	// This value indicates that the application is blocked from making
	// requests to the call named in this rule.
	//
	AccessRuleStatusCodeTypeApplicationBlocked AccessRuleStatusCodeType = "ApplicationBlocked"

	//
	// Reserved for internal or future use.
	//
	AccessRuleStatusCodeTypeCustomCode AccessRuleStatusCodeType = "CustomCode"
)

//
// Enumerated type that defines the debit and credit transactions that occur on an eBay user's account. These values are returned in the <b>AccountEntry.AccountDetailsEntryType</b> output field of the <b>GetAccount</b> call.
//
type AccountDetailEntryCodeType string

const (

	//
	// The reason for the charge is unknown.
	//
	AccountDetailEntryCodeTypeUnknown AccountDetailEntryCodeType = "Unknown"

	//
	// The fee for listing an item for sale on eBay.
	//
	AccountDetailEntryCodeTypeFeeInsertion AccountDetailEntryCodeType = "FeeInsertion"

	//
	// The fee for a listing title in boldface font.
	//
	AccountDetailEntryCodeTypeFeeBold AccountDetailEntryCodeType = "FeeBold"

	//
	// The fee for adding an optional feature to a listing,
	// such as a reserve fee or a listing upgrade fee.
	//
	AccountDetailEntryCodeTypeFeeFeatured AccountDetailEntryCodeType = "FeeFeatured"

	AccountDetailEntryCodeTypeFeeCategoryFeatured AccountDetailEntryCodeType = "FeeCategoryFeatured"

	//
	// The fee charged when a listed item sells. The fee
	// is a percentage of the final sale price.
	//
	AccountDetailEntryCodeTypeFeeFinalValue AccountDetailEntryCodeType = "FeeFinalValue"

	//
	// A payment by check made by a seller to eBay.
	//
	AccountDetailEntryCodeTypePaymentCheck AccountDetailEntryCodeType = "PaymentCheck"

	//
	// A payment by credit card made by a seller to eBay.
	//
	AccountDetailEntryCodeTypePaymentCC AccountDetailEntryCodeType = "PaymentCC"

	AccountDetailEntryCodeTypeCreditCourtesy AccountDetailEntryCodeType = "CreditCourtesy"

	AccountDetailEntryCodeTypeCreditNoSale AccountDetailEntryCodeType = "CreditNoSale"

	AccountDetailEntryCodeTypeCreditPartialSale AccountDetailEntryCodeType = "CreditPartialSale"

	//
	// A refund made by eBay to the seller's credit card.
	//
	AccountDetailEntryCodeTypeRefundCC AccountDetailEntryCodeType = "RefundCC"

	//
	// A refund made by eBay to the seller by check.
	//
	AccountDetailEntryCodeTypeRefundCheck AccountDetailEntryCodeType = "RefundCheck"

	//
	// A finance charge made to the seller's account, for example,
	// the monthly finance charge added to an account whose balance has not been
	// paid.
	//
	AccountDetailEntryCodeTypeFinanceCharge AccountDetailEntryCodeType = "FinanceCharge"

	AccountDetailEntryCodeTypeAWDebit AccountDetailEntryCodeType = "AWDebit"

	AccountDetailEntryCodeTypeAWCredit AccountDetailEntryCodeType = "AWCredit"

	AccountDetailEntryCodeTypeAWMemo AccountDetailEntryCodeType = "AWMemo"

	//
	// A credit issued by eBay for a duplicate listing.
	//
	AccountDetailEntryCodeTypeCreditDuplicateListing AccountDetailEntryCodeType = "CreditDuplicateListing"

	//
	// A fee charged by eBay for a partial sale.
	//
	AccountDetailEntryCodeTypeFeePartialSale AccountDetailEntryCodeType = "FeePartialSale"

	//
	// A reversal of an electronic transfer payment.
	//
	AccountDetailEntryCodeTypePaymentElectronicTransferReversal AccountDetailEntryCodeType = "PaymentElectronicTransferReversal"

	//
	// A one-time payment to the account made by
	// credit card.
	//
	AccountDetailEntryCodeTypePaymentCCOnce AccountDetailEntryCodeType = "PaymentCCOnce"

	//
	// A fee charged by eBay for a returned check.
	//
	AccountDetailEntryCodeTypeFeeReturnedCheck AccountDetailEntryCodeType = "FeeReturnedCheck"

	//
	// A fee charged by eBay when a check must be redeposited
	// to collect funds.
	//
	AccountDetailEntryCodeTypeFeeRedepositCheck AccountDetailEntryCodeType = "FeeRedepositCheck"

	//
	// A cash payment made on the seller's account.
	//
	AccountDetailEntryCodeTypePaymentCash AccountDetailEntryCodeType = "PaymentCash"

	//
	// A credit issued by eBay for an insertion fee.
	// If a listed item does not sell or results in an
	// Unpaid Item (UPI) dispute, the seller can relist
	// the item. If the item sells the second time, eBay
	// credits the insertion fee.
	//
	AccountDetailEntryCodeTypeCreditInsertion AccountDetailEntryCodeType = "CreditInsertion"

	//
	// A credit issued by eBay for the Bold listing fee.
	//
	AccountDetailEntryCodeTypeCreditBold AccountDetailEntryCodeType = "CreditBold"

	//
	// A credit issued by eBay for the Featured listing fee.
	//
	AccountDetailEntryCodeTypeCreditFeatured AccountDetailEntryCodeType = "CreditFeatured"

	AccountDetailEntryCodeTypeCreditCategoryFeatured AccountDetailEntryCodeType = "CreditCategoryFeatured"

	//
	// A credit issued by eBay for the Final Value Fee.
	// Issued as a result of an Unpaid Item dispute, under
	// some circumstances.
	//
	AccountDetailEntryCodeTypeCreditFinalValue AccountDetailEntryCodeType = "CreditFinalValue"

	//
	// A fee charged by eBay when the seller's check does not clear
	// due to insufficient funds.
	//
	AccountDetailEntryCodeTypeFeeNSFCheck AccountDetailEntryCodeType = "FeeNSFCheck"

	//
	// A fee charged by eBay when the seller's check does not clear
	// because the account has been closed.
	//
	AccountDetailEntryCodeTypeFeeReturnCheckClose AccountDetailEntryCodeType = "FeeReturnCheckClose"

	AccountDetailEntryCodeTypeMemo AccountDetailEntryCodeType = "Memo"

	//
	// A payment made to the account by money order.
	//
	AccountDetailEntryCodeTypePaymentMoneyOrder AccountDetailEntryCodeType = "PaymentMoneyOrder"

	//
	// An automatic monthly charge of the seller's invoice
	// amount made by eBay to a credit card the seller has placed
	// on file.
	//
	AccountDetailEntryCodeTypeCreditCardOnFile AccountDetailEntryCodeType = "CreditCardOnFile"

	//
	// A one-time payment made by a credit card
	// that is not on file with eBay for automatic monthly
	// payments.
	//
	AccountDetailEntryCodeTypeCreditCardNotOnFile AccountDetailEntryCodeType = "CreditCardNotOnFile"

	AccountDetailEntryCodeTypeInvoiced AccountDetailEntryCodeType = "Invoiced"

	AccountDetailEntryCodeTypeInvoicedCreditCard AccountDetailEntryCodeType = "InvoicedCreditCard"

	//
	// A credit transferred from another account to this account.
	//
	AccountDetailEntryCodeTypeCreditTransferFrom AccountDetailEntryCodeType = "CreditTransferFrom"

	//
	// A debit transferred from this account to another account.
	//
	AccountDetailEntryCodeTypeDebitTransferTo AccountDetailEntryCodeType = "DebitTransferTo"

	//
	// A credit balance for an account's invoice period,
	// meaning that the seller should not pay.
	//
	AccountDetailEntryCodeTypeInvoiceCreditBalance AccountDetailEntryCodeType = "InvoiceCreditBalance"

	//
	// An all-purpose code for debits issued by eBay that are manually applied to auctions,
	// for example, when the credit cannot be applied to an item number
	//
	AccountDetailEntryCodeTypeEBayDebit AccountDetailEntryCodeType = "eBayDebit"

	//
	// An all-purpose code for credits issued by eBay that are manually applied to auctions,
	// for example, when the credit cannot be applied to an item number
	//
	AccountDetailEntryCodeTypeEBayCredit AccountDetailEntryCodeType = "eBayCredit"

	AccountDetailEntryCodeTypePromotionalCredit AccountDetailEntryCodeType = "PromotionalCredit"

	//
	// A note that the credit card is not
	// on file at the customer's request.
	//
	AccountDetailEntryCodeTypeCCNotOnFilePerCustReq AccountDetailEntryCodeType = "CCNotOnFilePerCustReq"

	//
	// A credit issued by eBay for an insertion
	// fee when an item is relisted.
	//
	AccountDetailEntryCodeTypeCreditInsertionFee AccountDetailEntryCodeType = "CreditInsertionFee"

	AccountDetailEntryCodeTypeCCPaymentRejected AccountDetailEntryCodeType = "CCPaymentRejected"

	//
	// A fee charged by eBay for adding a gift icon to
	// a listing. The gift icon highlights the item as a good
	// gift and might offer gift services, such as wrapping
	// or shipping.
	//
	AccountDetailEntryCodeTypeFeeGiftIcon AccountDetailEntryCodeType = "FeeGiftIcon"

	//
	// A credit issued by eBay for the gift item
	// fee.
	//
	AccountDetailEntryCodeTypeCreditGiftIcon AccountDetailEntryCodeType = "CreditGiftIcon"

	//
	// A fee charged by eBay for listing an item
	// in the Picture Gallery. A buyer sees a picture of
	// the item when browsing a category, before moving to
	// the item's listing page.
	//
	AccountDetailEntryCodeTypeFeeGallery AccountDetailEntryCodeType = "FeeGallery"

	//
	// A fee charged by eBay for listing an item
	// in the Featured section at the top of the Picture Gallery
	// page.
	//
	AccountDetailEntryCodeTypeFeeFeaturedGallery AccountDetailEntryCodeType = "FeeFeaturedGallery"

	//
	// A credit issued by eBay for the Gallery fee
	// charged when the item was listed.
	//
	AccountDetailEntryCodeTypeCreditGallery AccountDetailEntryCodeType = "CreditGallery"

	//
	// A credit issued by eBay for the Featured Gallery
	// fee charged when the item was listed.
	//
	AccountDetailEntryCodeTypeCreditFeaturedGallery AccountDetailEntryCodeType = "CreditFeaturedGallery"

	AccountDetailEntryCodeTypeItemMoveFee AccountDetailEntryCodeType = "ItemMoveFee"

	//
	// A credit issued by eBay when listings are not available
	// due to system downtime. The downtime can be a title search
	// outage or a hard outage. See the online help for details.
	//
	AccountDetailEntryCodeTypeOutageCredit AccountDetailEntryCodeType = "OutageCredit"

	AccountDetailEntryCodeTypeCreditPSA AccountDetailEntryCodeType = "CreditPSA"

	AccountDetailEntryCodeTypeCreditPCGS AccountDetailEntryCodeType = "CreditPCGS"

	//
	// A fee charged by eBay when an item is listed with
	// a reserve price. The fee is credited when the auction
	// completes successfully.
	//
	AccountDetailEntryCodeTypeFeeReserve AccountDetailEntryCodeType = "FeeReserve"

	//
	// A credit issued by eBay for a reserve price auction
	// when the auction completes successfully.
	//
	AccountDetailEntryCodeTypeCreditReserve AccountDetailEntryCodeType = "CreditReserve"

	AccountDetailEntryCodeTypeEBayVISACredit AccountDetailEntryCodeType = "eBayVISACredit"

	AccountDetailEntryCodeTypeBBAdminCredit AccountDetailEntryCodeType = "BBAdminCredit"

	AccountDetailEntryCodeTypeBBAdminDebit AccountDetailEntryCodeType = "BBAdminDebit"

	//
	// A credit issued by eBay to a Store owner
	// who has promoted items outside of eBay.
	//
	AccountDetailEntryCodeTypeReferrerCredit AccountDetailEntryCodeType = "ReferrerCredit"

	AccountDetailEntryCodeTypeReferrerDebit AccountDetailEntryCodeType = "ReferrerDebit"

	//
	// A switch from one billing currency to another.
	// The billing currency can be USD, EUR, CAD, GBP, AUD,
	// JPY, or TWD.
	//
	AccountDetailEntryCodeTypeSwitchCurrency AccountDetailEntryCodeType = "SwitchCurrency"

	//
	// A payment made to the account by gift certificate.
	//
	AccountDetailEntryCodeTypePaymentGiftCertificate AccountDetailEntryCodeType = "PaymentGiftCertificate"

	//
	// A payment made to the account by wire transfer.
	//
	AccountDetailEntryCodeTypePaymentWireTransfer AccountDetailEntryCodeType = "PaymentWireTransfer"

	AccountDetailEntryCodeTypePaymentHomeBanking AccountDetailEntryCodeType = "PaymentHomeBanking"

	//
	// A one-time payment made to the account by electronic
	// transfer.
	//
	AccountDetailEntryCodeTypePaymentElectronicTransfer AccountDetailEntryCodeType = "PaymentElectronicTransfer"

	//
	// A credit (addition) made by eBay to the seller's account
	// when a payment needs to be adjusted.
	//
	AccountDetailEntryCodeTypePaymentAdjustmentCredit AccountDetailEntryCodeType = "PaymentAdjustmentCredit"

	//
	// A debit (deduction) made by eBay to the seller's account
	// when a payment needs to be adjusted.
	//
	AccountDetailEntryCodeTypePaymentAdjustmentDebit AccountDetailEntryCodeType = "PaymentAdjustmentDebit"

	AccountDetailEntryCodeTypeChargeoff AccountDetailEntryCodeType = "Chargeoff"

	AccountDetailEntryCodeTypeChargeoffRecovery AccountDetailEntryCodeType = "ChargeoffRecovery"

	//
	// A writeoff of the account charges by eBay
	// because the seller has declared bankruptcy.
	//
	AccountDetailEntryCodeTypeChargeoffBankruptcy AccountDetailEntryCodeType = "ChargeoffBankruptcy"

	AccountDetailEntryCodeTypeChargeoffSuspended AccountDetailEntryCodeType = "ChargeoffSuspended"

	//
	// A writeoff of the account charges by eBay
	// because the seller is deceased.
	//
	AccountDetailEntryCodeTypeChargeoffDeceased AccountDetailEntryCodeType = "ChargeoffDeceased"

	AccountDetailEntryCodeTypeChargeoffOther AccountDetailEntryCodeType = "ChargeoffOther"

	AccountDetailEntryCodeTypeChargeoffWacko AccountDetailEntryCodeType = "ChargeoffWacko"

	//
	// A reversal of a finance charge, made by eBay.
	// The finance charge is added if the seller does not pay
	// the monthly account balance on time.
	//
	AccountDetailEntryCodeTypeFinanceChargeReversal AccountDetailEntryCodeType = "FinanceChargeReversal"

	//
	// A reversal of a Final Value Fee credit, resulting
	// in the fee being charged to the seller. The Final Value
	// Fee can be credited as a result of an Unpaid Item Dispute.
	// If the buyer later pays, the seller can request a reversal.
	//
	AccountDetailEntryCodeTypeFVFCreditReversal AccountDetailEntryCodeType = "FVFCreditReversal"

	//
	// A fee charged for currency conversion.
	//
	AccountDetailEntryCodeTypeForeignFundsConvert AccountDetailEntryCodeType = "ForeignFundsConvert"

	AccountDetailEntryCodeTypeForeignFundsCheckReversal AccountDetailEntryCodeType = "ForeignFundsCheckReversal"

	AccountDetailEntryCodeTypeEOMRestriction AccountDetailEntryCodeType = "EOMRestriction"

	AccountDetailEntryCodeTypeAllFeesCredit AccountDetailEntryCodeType = "AllFeesCredit"

	AccountDetailEntryCodeTypeSetOnHold AccountDetailEntryCodeType = "SetOnHold"

	AccountDetailEntryCodeTypeRevertUserState AccountDetailEntryCodeType = "RevertUserState"

	//
	// A monthly payment made by automatic direct debit to the
	// seller's checking account, when the account information
	// is on file.
	//
	AccountDetailEntryCodeTypeDirectDebitOnFile AccountDetailEntryCodeType = "DirectDebitOnFile"

	//
	// A one-time payment made by direct debit to the seller's
	// checking account, when the account information is not on file,
	// but is provided for this payment.
	//
	AccountDetailEntryCodeTypeDirectDebitNotOnFile AccountDetailEntryCodeType = "DirectDebitNotOnFile"

	//
	// A payment made by direct debit from the seller's
	// checking account when the seller has requested automatic
	// monthly invoice payments.
	//
	AccountDetailEntryCodeTypePaymentDirectDebit AccountDetailEntryCodeType = "PaymentDirectDebit"

	//
	// A reversal of a payment made by direct debit
	// from the seller's checking account.
	//
	AccountDetailEntryCodeTypeDirectDebitReversal AccountDetailEntryCodeType = "DirectDebitReversal"

	//
	// A reversal of a payment made by direct debit
	// from a seller's checking account when an item is returned
	// by the buyer.
	//
	AccountDetailEntryCodeTypeDirectDebitReturnedItem AccountDetailEntryCodeType = "DirectDebitReturnedItem"

	//
	// A fee charged by eBay for adding a colored band to
	// emphasize a listing.
	//
	AccountDetailEntryCodeTypeFeeHighlight AccountDetailEntryCodeType = "FeeHighlight"

	//
	// A credit issued by eBay for a listing highlight fee.
	//
	AccountDetailEntryCodeTypeCreditHighlight AccountDetailEntryCodeType = "CreditHighlight"

	AccountDetailEntryCodeTypeBulkUserSuspension AccountDetailEntryCodeType = "BulkUserSuspension"

	//
	// A fee charged for a 30-day real estate listing.
	//
	AccountDetailEntryCodeTypeFeeRealEstate30DaysListing AccountDetailEntryCodeType = "FeeRealEstate30DaysListing"

	//
	// A credit issued  by eBay for a 30-day real estate listing.
	//
	AccountDetailEntryCodeTypeCreditRealEstate30DaysListing AccountDetailEntryCodeType = "CreditRealEstate30DaysListing"

	AccountDetailEntryCodeTypeTradingLimitOverrideOn AccountDetailEntryCodeType = "TradingLimitOverrideOn"

	AccountDetailEntryCodeTypeTradingLimitOverrideOff AccountDetailEntryCodeType = "TradingLimitOverrideOff"

	//
	// A fee charged to sellers who do not provide a credit card
	// or checking account number to verify identify.
	//
	AccountDetailEntryCodeTypeEquifaxRealtimeFee AccountDetailEntryCodeType = "EquifaxRealtimeFee"

	//
	// A credit granted for an EquifaxRealtimeFee.
	//
	AccountDetailEntryCodeTypeCreditEquifaxRealtimeFee AccountDetailEntryCodeType = "CreditEquifaxRealtimeFee"

	AccountDetailEntryCodeTypePaymentEquifaxDebit AccountDetailEntryCodeType = "PaymentEquifaxDebit"

	AccountDetailEntryCodeTypePaymentEquifaxCredit AccountDetailEntryCodeType = "PaymentEquifaxCredit"

	//
	// Two accounts with the same owner but different user IDs
	// have been merged into one.
	//
	AccountDetailEntryCodeTypeMerged AccountDetailEntryCodeType = "Merged"

	AccountDetailEntryCodeTypeAutoTraderOn AccountDetailEntryCodeType = "AutoTraderOn"

	AccountDetailEntryCodeTypeAutoTraderOff AccountDetailEntryCodeType = "AutoTraderOff"

	//
	// The option to send the seller paper invoices
	// has been turned on.
	//
	AccountDetailEntryCodeTypePaperInvoiceOn AccountDetailEntryCodeType = "PaperInvoiceOn"

	//
	// The option to send the seller paper invoices
	// has been turned off.
	//
	AccountDetailEntryCodeTypePaperInvoiceOff AccountDetailEntryCodeType = "PaperInvoiceOff"

	AccountDetailEntryCodeTypeAccountStateSwitch AccountDetailEntryCodeType = "AccountStateSwitch"

	//
	// An automatic reversal of a Final Value Fee
	// credit.
	//
	AccountDetailEntryCodeTypeFVFCreditReversalAutomatic AccountDetailEntryCodeType = "FVFCreditReversalAutomatic"

	//
	// A credit granted by eBay when a title search
	// outage of one hour or longer occurs on the site.
	//
	AccountDetailEntryCodeTypeCreditSoftOutage AccountDetailEntryCodeType = "CreditSoftOutage"

	//
	// A fee charged for listing a lot (one or more items) in a
	// Live Auction catalog.
	//
	AccountDetailEntryCodeTypeLACatalogFee AccountDetailEntryCodeType = "LACatalogFee"

	//
	// A fee charged for listing an extra item in a Live Auction.
	//
	AccountDetailEntryCodeTypeLAExtraItem AccountDetailEntryCodeType = "LAExtraItem"

	AccountDetailEntryCodeTypeLACatalogItemFeeRefund AccountDetailEntryCodeType = "LACatalogItemFeeRefund"

	//
	// A credit for listing an item in a Live Auction catalog.
	//
	AccountDetailEntryCodeTypeLACatalogInsertionRefund AccountDetailEntryCodeType = "LACatalogInsertionRefund"

	//
	// A Final Value Fee charged by eBay when a lot listed
	// on a Live Auction is sold.
	//
	AccountDetailEntryCodeTypeLAFinalValueFee AccountDetailEntryCodeType = "LAFinalValueFee"

	//
	// A refund of a Final Value Fee that was charged
	// when a Live Auction lot was sold.
	//
	AccountDetailEntryCodeTypeLAFinalValueFeeRefund AccountDetailEntryCodeType = "LAFinalValueFeeRefund"

	//
	// A fee paid by the buyer to the auction house for
	// a purchase in a Live Auction.
	//
	AccountDetailEntryCodeTypeLABuyerPremiumPercentageFee AccountDetailEntryCodeType = "LABuyerPremiumPercentageFee"

	//
	// A refund of the fee paid by a buyer to the auction
	// house for a purchase in a Live Auction.
	//
	AccountDetailEntryCodeTypeLABuyerPremiumPercentageFeeRefund AccountDetailEntryCodeType = "LABuyerPremiumPercentageFeeRefund"

	//
	// A fee charged for audio or video services provided
	// during the sale of lots at a Live Auction.
	//
	AccountDetailEntryCodeTypeLAAudioVideoFee AccountDetailEntryCodeType = "LAAudioVideoFee"

	//
	// A refund for audio or video services provided at
	// a Live Auction.
	//
	AccountDetailEntryCodeTypeLAAudioVideoFeeRefund AccountDetailEntryCodeType = "LAAudioVideoFeeRefund"

	//
	// A fee charged for a panoramic 360-degree photo
	// in a listing.
	//
	AccountDetailEntryCodeTypeFeeIPIXPhoto AccountDetailEntryCodeType = "FeeIPIXPhoto"

	//
	// A fee charged for a slide show of panoramic 360-degree
	// photos.
	//
	AccountDetailEntryCodeTypeFeeIPIXSlideShow AccountDetailEntryCodeType = "FeeIPIXSlideShow"

	//
	// A credit granted to reverse an IPIX photo fee.
	//
	AccountDetailEntryCodeTypeCreditIPIXPhoto AccountDetailEntryCodeType = "CreditIPIXPhoto"

	//
	// A credit granted to reverse an IPIX slideshow fee.
	//
	AccountDetailEntryCodeTypeCreditIPIXSlideShow AccountDetailEntryCodeType = "CreditIPIXSlideShow"

	//
	// A fee charged for listing an item for 10 days,
	// rather than one, three, five, or seven days.
	//
	AccountDetailEntryCodeTypeFeeTenDayAuction AccountDetailEntryCodeType = "FeeTenDayAuction"

	//
	// A credit granted to reverse a 10-day auction
	// fee.
	//
	AccountDetailEntryCodeTypeCreditTenDayAuction AccountDetailEntryCodeType = "CreditTenDayAuction"

	AccountDetailEntryCodeTypeTemporaryCredit AccountDetailEntryCodeType = "TemporaryCredit"

	AccountDetailEntryCodeTypeTemporaryCreditReversal AccountDetailEntryCodeType = "TemporaryCreditReversal"

	//
	// A fee charged for a subscription to Auction Assistant Basic.
	//
	AccountDetailEntryCodeTypeSubscriptionAABasic AccountDetailEntryCodeType = "SubscriptionAABasic"

	//
	// A fee charged for a subscription to Auction Assistant Pro.
	//
	AccountDetailEntryCodeTypeSubscriptionAAPro AccountDetailEntryCodeType = "SubscriptionAAPro"

	//
	// A credit granted for a subscription fee charged for Auction Assistant Basic.
	//
	AccountDetailEntryCodeTypeCreditAABasic AccountDetailEntryCodeType = "CreditAABasic"

	//
	// A credit granted for a subscription fee charged for Auction Assistant Pro.
	//
	AccountDetailEntryCodeTypeCreditAAPro AccountDetailEntryCodeType = "CreditAAPro"

	//
	// A fee charged by eBay for a supersized picture
	// in a listing.
	//
	AccountDetailEntryCodeTypeFeeLargePicture AccountDetailEntryCodeType = "FeeLargePicture"

	//
	// A credit issued by eBay for a supersized picture.
	//
	AccountDetailEntryCodeTypeCreditLargePicture AccountDetailEntryCodeType = "CreditLargePicture"

	//
	// A fee charged by eBay for the Picture Pack feature.
	// The fee differs according to the number of pictures you
	// use. See the online help for details.
	//
	AccountDetailEntryCodeTypeFeePicturePack AccountDetailEntryCodeType = "FeePicturePack"

	//
	// A partial credit issued by eBay for the Picture Pack fee.
	//
	AccountDetailEntryCodeTypeCreditPicturePackPartial AccountDetailEntryCodeType = "CreditPicturePackPartial"

	//
	// A full credit issued by eBay for the Picture Pack fee.
	//
	AccountDetailEntryCodeTypeCreditPicturePackFull AccountDetailEntryCodeType = "CreditPicturePackFull"

	//
	// A monthly subscription fee charged for an eBay Store.
	// The fee can be Basic, Featured, or Anchor.
	//
	AccountDetailEntryCodeTypeSubscriptioneBayStores AccountDetailEntryCodeType = "SubscriptioneBayStores"

	//
	// A credit issued by eBay for the monthly fee charged
	// for an eBay store.
	//
	AccountDetailEntryCodeTypeCrediteBayStores AccountDetailEntryCodeType = "CrediteBayStores"

	//
	// The fee charged by eBay for listing a Fixed Price item.
	//
	AccountDetailEntryCodeTypeFeeInsertionFixedPrice AccountDetailEntryCodeType = "FeeInsertionFixedPrice"

	//
	// A credit issued by eBay for listing a Fixed Price item.
	//
	AccountDetailEntryCodeTypeCreditInsertionFixedPrice AccountDetailEntryCodeType = "CreditInsertionFixedPrice"

	//
	// The Final Value Fee credit charged by eBay when
	// a fixed price item sells.
	//
	AccountDetailEntryCodeTypeFeeFinalValueFixedPrice AccountDetailEntryCodeType = "FeeFinalValueFixedPrice"

	//
	// A credit issued by eBay for the Final Value Fee
	// for a fixed price item.
	//
	AccountDetailEntryCodeTypeCreditFinalValueFixedPrice AccountDetailEntryCodeType = "CreditFinalValueFixedPrice"

	AccountDetailEntryCodeTypeElectronicInvoiceOn AccountDetailEntryCodeType = "ElectronicInvoiceOn"

	AccountDetailEntryCodeTypeElectronicInvoiceOff AccountDetailEntryCodeType = "ElectronicInvoiceOff"

	AccountDetailEntryCodeTypeFlagDDDDPending AccountDetailEntryCodeType = "FlagDDDDPending"

	AccountDetailEntryCodeTypeFlagDDPaymentConfirmed AccountDetailEntryCodeType = "FlagDDPaymentConfirmed"

	//
	// The fee charged by eBay for creating a Fixed Price
	// listing with a 10-day duration. Fixed Price listings
	// of 1, 3, 5, and 7 days are not charged this fee.
	//
	AccountDetailEntryCodeTypeFixedPriceDurationFee AccountDetailEntryCodeType = "FixedPriceDurationFee"

	//
	// A credit issued by eBay for a Fixed Price listing
	// with a 10-day duration.
	//
	AccountDetailEntryCodeTypeFixedPriceDurationCredit AccountDetailEntryCodeType = "FixedPriceDurationCredit"

	//
	// A fee charged by eBay for listing a Buy It Now item.
	//
	AccountDetailEntryCodeTypeBuyItNowFee AccountDetailEntryCodeType = "BuyItNowFee"

	//
	// A credit issued by eBay for the fee charged for a
	// Buy It Now listing.
	//
	AccountDetailEntryCodeTypeBuyItNowCredit AccountDetailEntryCodeType = "BuyItNowCredit"

	//
	// A fee for scheduling a listing to start at some
	// later time, up to 3 weeks after the listing is created.
	//
	AccountDetailEntryCodeTypeFeeSchedule AccountDetailEntryCodeType = "FeeSchedule"

	//
	// A credit made by eBay for the fee charged for
	// scheduling a listing to start after the listing is created.
	//
	AccountDetailEntryCodeTypeCreditSchedule AccountDetailEntryCodeType = "CreditSchedule"

	//
	// The monthly subscription fee charged for
	// Selling Manager Basic. The monthly charge is billed
	// in advance.
	//
	AccountDetailEntryCodeTypeSubscriptionSMBasic AccountDetailEntryCodeType = "SubscriptionSMBasic"

	//
	// The monthly subscription fee charged for
	// Selling Manager Pro. The monthly charge is billed
	// in advance.
	//
	AccountDetailEntryCodeTypeSubscriptionSMBasicPro AccountDetailEntryCodeType = "SubscriptionSMBasicPro"

	//
	// A one-time credit for a free one-month
	// trial of Selling Manager Basic.
	//
	AccountDetailEntryCodeTypeCreditSMBasic AccountDetailEntryCodeType = "CreditSMBasic"

	//
	// A one-time credit for a free one-month
	// trial of Selling Manager Pro.
	//
	AccountDetailEntryCodeTypeCreditSMBasicPro AccountDetailEntryCodeType = "CreditSMBasicPro"

	//
	// The fee charged for a Good-Til-Cancelled
	// listing in an eBay Store. The charge is made once
	// each 30 days, until the listing ends.
	//
	AccountDetailEntryCodeTypeStoresGTCFee AccountDetailEntryCodeType = "StoresGTCFee"

	//
	// A credit for the fee charged for a Good-Til-Cancelled
	// listing in an eBay Store.
	//
	AccountDetailEntryCodeTypeStoresGTCCredit AccountDetailEntryCodeType = "StoresGTCCredit"

	//
	// The fee charged for using a Listing Designer theme and layout
	// template for a listing. The fee is displayed to the seller during
	// the listing process.
	//
	AccountDetailEntryCodeTypeListingDesignerFee AccountDetailEntryCodeType = "ListingDesignerFee"

	//
	// A credit issued by eBay for a Listing Designer fee.
	//
	AccountDetailEntryCodeTypeListingDesignerCredit AccountDetailEntryCodeType = "ListingDesignerCredit"

	//
	// The fee charged for listing an auction item
	// for 10 days.
	//
	AccountDetailEntryCodeTypeExtendedAuctionFee AccountDetailEntryCodeType = "ExtendedAuctionFee"

	//
	// A credit for the fee charged for listing an
	// auction item for 10 days.
	//
	AccountDetailEntryCodeTypeExtendedAcutionCredit AccountDetailEntryCodeType = "ExtendedAcutionCredit"

	AccountDetailEntryCodeTypePayPalOTPSucc AccountDetailEntryCodeType = "PayPalOTPSucc"

	AccountDetailEntryCodeTypePayPalOTPPend AccountDetailEntryCodeType = "PayPalOTPPend"

	AccountDetailEntryCodeTypePayPalFailed AccountDetailEntryCodeType = "PayPalFailed"

	AccountDetailEntryCodeTypePayPalChargeBack AccountDetailEntryCodeType = "PayPalChargeBack"

	AccountDetailEntryCodeTypeChargeBack AccountDetailEntryCodeType = "ChargeBack"

	AccountDetailEntryCodeTypeChargeBackReversal AccountDetailEntryCodeType = "ChargeBackReversal"

	AccountDetailEntryCodeTypePayPalRefund AccountDetailEntryCodeType = "PayPalRefund"

	//
	// An addition to the seller's eBay
	// Anything Points account. Each point is
	// equivalent to $0.01.
	//
	AccountDetailEntryCodeTypeBonusPointsAddition AccountDetailEntryCodeType = "BonusPointsAddition"

	//
	// A reduction to the seller's eBay
	// Anything Points account. Each point is
	// equivalent to $0.01.
	//
	AccountDetailEntryCodeTypeBonusPointsReduction AccountDetailEntryCodeType = "BonusPointsReduction"

	//
	// An automatic payment of seller fees
	// from the seller's eBay Anything Points account.
	//
	AccountDetailEntryCodeTypeBonusPointsPaymentAutomatic AccountDetailEntryCodeType = "BonusPointsPaymentAutomatic"

	//
	// A one-time payment of seller fees from
	// the seller's eBay Anything Points account.
	//
	AccountDetailEntryCodeTypeBonusPointsPaymentManual AccountDetailEntryCodeType = "BonusPointsPaymentManual"

	//
	// A reversal of a seller fee payment made
	// from the seller's eBay Anything Points account.
	//
	AccountDetailEntryCodeTypeBonusPointsPaymentReversal AccountDetailEntryCodeType = "BonusPointsPaymentReversal"

	//
	// A cash payment made from the seller's eBay
	// Anything Points account and credited to the seller's
	// account.
	//
	AccountDetailEntryCodeTypeBonusPointsCashPayout AccountDetailEntryCodeType = "BonusPointsCashPayout"

	//
	// A credit (return) to your account of Value-Added Tax
	// previously paid.
	//
	AccountDetailEntryCodeTypeVATCredit AccountDetailEntryCodeType = "VATCredit"

	//
	// A debit to your account for a Value-Added Tax charge.
	//
	AccountDetailEntryCodeTypeVATDebit AccountDetailEntryCodeType = "VATDebit"

	AccountDetailEntryCodeTypeVATStatusChangePending AccountDetailEntryCodeType = "VATStatusChangePending"

	AccountDetailEntryCodeTypeVATStatusChangeApproved AccountDetailEntryCodeType = "VATStatusChangeApproved"

	AccountDetailEntryCodeTypeVATStatusChange_Denied AccountDetailEntryCodeType = "VATStatusChange_Denied"

	AccountDetailEntryCodeTypeVATStatusDeletedByCSR AccountDetailEntryCodeType = "VATStatusDeletedByCSR"

	AccountDetailEntryCodeTypeVATStatusDeletedByUser AccountDetailEntryCodeType = "VATStatusDeletedByUser"

	AccountDetailEntryCodeTypeSMProListingDesignerFee AccountDetailEntryCodeType = "SMProListingDesignerFee"

	AccountDetailEntryCodeTypeSMProListingDesignerCredit AccountDetailEntryCodeType = "SMProListingDesignerCredit"

	//
	// Used for Store Inventory listings, which are no longer supported on any eBay site.
	//
	AccountDetailEntryCodeTypeStoresSuccessfulListingFee AccountDetailEntryCodeType = "StoresSuccessfulListingFee"

	//
	// A credit for a StoresSuccessfulListingFee.
	//
	AccountDetailEntryCodeTypeStoresSuccessfulListingFeeCredit AccountDetailEntryCodeType = "StoresSuccessfulListingFeeCredit"

	AccountDetailEntryCodeTypeStoresReferralFee AccountDetailEntryCodeType = "StoresReferralFee"

	//
	// A credit posted to a seller's account
	// for sale of Stores Inventory items by buyers
	// referred to the seller's Store by printed materials
	// and emails outside eBay.
	//
	AccountDetailEntryCodeTypeStoresReferralCredit AccountDetailEntryCodeType = "StoresReferralCredit"

	//
	// The fee charged for adding a subtitle
	// to a listing. The subtitle adds information
	// to the title.
	//
	AccountDetailEntryCodeTypeSubtitleFee AccountDetailEntryCodeType = "SubtitleFee"

	//
	// A credit of the fee charged for adding a
	// subtitle to a listing.
	//
	AccountDetailEntryCodeTypeSubtitleFeeCredit AccountDetailEntryCodeType = "SubtitleFeeCredit"

	AccountDetailEntryCodeTypeEBayStoreInventorySubscriptionCredit AccountDetailEntryCodeType = "eBayStoreInventorySubscriptionCredit"

	AccountDetailEntryCodeTypeAutoPmntReqExempt AccountDetailEntryCodeType = "AutoPmntReqExempt"

	AccountDetailEntryCodeTypeAutoPmntReqRein AccountDetailEntryCodeType = "AutoPmntReqRein"

	//
	// This value is deprecated.
	//
	AccountDetailEntryCodeTypePictureManagerSubscriptionFee AccountDetailEntryCodeType = "PictureManagerSubscriptionFee"

	//
	// This value is deprecated.
	//
	AccountDetailEntryCodeTypePictureManagerSubscriptionFeeCredit AccountDetailEntryCodeType = "PictureManagerSubscriptionFeeCredit"

	//
	// A fee charged for a basic subscription to Seller Reports.
	//
	AccountDetailEntryCodeTypeSellerReportsBasicFee AccountDetailEntryCodeType = "SellerReportsBasicFee"

	//
	// A credit granted for a basic subscription to Seller Reports.
	//
	AccountDetailEntryCodeTypeSellerReportsBasicCredit AccountDetailEntryCodeType = "SellerReportsBasicCredit"

	//
	// A fee charged for a subscription to Seller Reports Plus.
	//
	AccountDetailEntryCodeTypeSellerReportsPlusFee AccountDetailEntryCodeType = "SellerReportsPlusFee"

	//
	// A credit granted for a subscription to Seller Reports Plus.
	//
	AccountDetailEntryCodeTypeSellerReportsPlusCredit AccountDetailEntryCodeType = "SellerReportsPlusCredit"

	AccountDetailEntryCodeTypePaypalOnFile AccountDetailEntryCodeType = "PaypalOnFile"

	AccountDetailEntryCodeTypePaypalOnFileByCSR AccountDetailEntryCodeType = "PaypalOnFileByCSR"

	AccountDetailEntryCodeTypePaypalOffFile AccountDetailEntryCodeType = "PaypalOffFile"

	//
	// The fee for adding a border that outlines a listing with a frame.
	//
	AccountDetailEntryCodeTypeBorderFee AccountDetailEntryCodeType = "BorderFee"

	//
	// A credit for the border fee charged for a listing.
	//
	AccountDetailEntryCodeTypeBorderFeeCredit AccountDetailEntryCodeType = "BorderFeeCredit"

	//
	// A fee charged to a seller for upgrading
	// a listing from eBay Germany's Car, Motorcycle,
	// and Special Vehicle categories so that it is also
	// searchable on the mobile.de classifieds site.
	//
	AccountDetailEntryCodeTypeFeeSearchableMobileDE AccountDetailEntryCodeType = "FeeSearchableMobileDE"

	//
	// A monthly subscription fee charged for
	// Sales Reports Plus.
	//
	AccountDetailEntryCodeTypeSalesReportsPlusFee AccountDetailEntryCodeType = "SalesReportsPlusFee"

	//
	// A credit granted for a Sales Reports Plus
	// monthly subscription fee.
	//
	AccountDetailEntryCodeTypeSalesReportsPlusCredit AccountDetailEntryCodeType = "SalesReportsPlusCredit"

	//
	// A credit granted for upgrading a listing
	// to make it searchable on the mobile.de platform.
	//
	AccountDetailEntryCodeTypeCreditSearchableMobileDE AccountDetailEntryCodeType = "CreditSearchableMobileDE"

	//
	// A fee charged to owners of eBay Stores
	// who have a sent a marketing email to buyers,
	// for the number of email recipients over
	// the Store's monthly free allocation. The
	// monthly allocation varies according to the type
	// of Store.
	//
	AccountDetailEntryCodeTypeEmailMarketingFee AccountDetailEntryCodeType = "EmailMarketingFee"

	//
	// A credit granted for an email marketing fee.
	//
	AccountDetailEntryCodeTypeEmailMarketingCredit AccountDetailEntryCodeType = "EmailMarketingCredit"

	//
	// A fee charged for the Picture Show
	// service, which lets buyers browse or see a slide
	// show of 2 or more pictures at the top of the
	// item page.
	//
	AccountDetailEntryCodeTypeFeePictureShow AccountDetailEntryCodeType = "FeePictureShow"

	//
	// A credit granted for a Picture Show fee.
	//
	AccountDetailEntryCodeTypeCreditPictureShow AccountDetailEntryCodeType = "CreditPictureShow"

	//
	// A fee charged for the ProPackBundle feature pack (currently available to US and Canada eBay motor vehicle sellers).
	//
	AccountDetailEntryCodeTypeProPackBundleFee AccountDetailEntryCodeType = "ProPackBundleFee"

	//
	// A credit granted by eBay for the ProPackBundle feature pack (currently available to US and Canada eBay motor vehicle sellers).
	//
	AccountDetailEntryCodeTypeProPackBundleFeeCredit AccountDetailEntryCodeType = "ProPackBundleFeeCredit"

	//
	// A fee charged by eBay for the BasicUpgradePackBundle feature pack.
	// No longer applicable to any sites (but formerly applicable to the
	// Australia site, site ID 15).
	//
	AccountDetailEntryCodeTypeBasicUpgradePackBundleFee AccountDetailEntryCodeType = "BasicUpgradePackBundleFee"

	//
	// A credit granted by eBay for the BasicUpgradePackBundle feature pack.
	// No longer applicable to any sites (but formerly applicable to the
	// Australia site, site ID 15).
	//
	AccountDetailEntryCodeTypeBasicUpgradePackBundleFeeCredit AccountDetailEntryCodeType = "BasicUpgradePackBundleFeeCredit"

	//
	// A fee charged by eBay for the ValuePackBundle feature pack.
	//
	AccountDetailEntryCodeTypeValuePackBundleFee AccountDetailEntryCodeType = "ValuePackBundleFee"

	//
	// A credit granted by eBay for the ValuePackBundle feature pack.
	//
	AccountDetailEntryCodeTypeValuePackBundleFeeCredit AccountDetailEntryCodeType = "ValuePackBundleFeeCredit"

	//
	// A fee charged by eBay for the ProPackPlusBundle feature pack.
	//
	AccountDetailEntryCodeTypeProPackPlusBundleFee AccountDetailEntryCodeType = "ProPackPlusBundleFee"

	//
	// A credit granted by eBay for the ProPackPlusBundle feature pack.
	//
	AccountDetailEntryCodeTypeProPackPlusBundleFeeCredit AccountDetailEntryCodeType = "ProPackPlusBundleFeeCredit"

	//
	// The final entry in an account before it is closed
	// or merged with another account.
	//
	AccountDetailEntryCodeTypeFinalEntry AccountDetailEntryCodeType = "FinalEntry"

	//
	// Reserved for future use.
	//
	AccountDetailEntryCodeTypeCustomCode AccountDetailEntryCodeType = "CustomCode"

	//
	// A fee charged for extended listing duration.
	//
	AccountDetailEntryCodeTypeExtendedDurationFee AccountDetailEntryCodeType = "ExtendedDurationFee"

	//
	// A credit granted by eBay for extended listing duration.
	//
	AccountDetailEntryCodeTypeExtendedDurationFeeCredit AccountDetailEntryCodeType = "ExtendedDurationFeeCredit"

	//
	// The fee for an international listing.
	//
	AccountDetailEntryCodeTypeInternationalListingFee AccountDetailEntryCodeType = "InternationalListingFee"

	//
	// A credit issued by eBay for an international listing.
	//
	AccountDetailEntryCodeTypeInternationalListingCredit AccountDetailEntryCodeType = "InternationalListingCredit"

	//
	// A MarketPlace Research fee for expired subscriptions.
	//
	AccountDetailEntryCodeTypeMarketplaceResearchExpiredSubscriptionFee AccountDetailEntryCodeType = "MarketplaceResearchExpiredSubscriptionFee"

	//
	// A MarketPlace Research credit for expired subscriptions.
	//
	AccountDetailEntryCodeTypeMarketplaceResearchExpiredSubscriptionFeeCredit AccountDetailEntryCodeType = "MarketplaceResearchExpiredSubscriptionFeeCredit"

	//
	// A MarketPlace Research basic subscription fee.
	//
	AccountDetailEntryCodeTypeMarketplaceResearchBasicSubscriptionFee AccountDetailEntryCodeType = "MarketplaceResearchBasicSubscriptionFee"

	//
	// A MarketPlace Research basic subscription credit.
	//
	AccountDetailEntryCodeTypeMarketplaceResearchBasicSubscriptionFeeCredit AccountDetailEntryCodeType = "MarketplaceResearchBasicSubscriptionFeeCredit"

	//
	// A MarketPlace Research pro subscription fee.
	//
	AccountDetailEntryCodeTypeMarketplaceResearchProSubscriptionFee AccountDetailEntryCodeType = "MarketplaceResearchProSubscriptionFee"

	//
	// Basic bundle fee.
	//
	AccountDetailEntryCodeTypeBasicBundleFee AccountDetailEntryCodeType = "BasicBundleFee"

	//
	// Basic bundle fee credit.
	//
	AccountDetailEntryCodeTypeBasicBundleFeeCredit AccountDetailEntryCodeType = "BasicBundleFeeCredit"

	//
	// A MarketPlace Research pro subscription fee credit.
	//
	AccountDetailEntryCodeTypeMarketplaceResearchProSubscriptionFeeCredit AccountDetailEntryCodeType = "MarketplaceResearchProSubscriptionFeeCredit"

	//
	// A Vehicle Local subscription fee.
	//
	AccountDetailEntryCodeTypeVehicleLocalSubscriptionFee AccountDetailEntryCodeType = "VehicleLocalSubscriptionFee"

	//
	// A Vehicle Local subscription fee credit.
	//
	AccountDetailEntryCodeTypeVehicleLocalSubscriptionFeeCredit AccountDetailEntryCodeType = "VehicleLocalSubscriptionFeeCredit"

	//
	// A Vehicle Local insertion fee.
	//
	AccountDetailEntryCodeTypeVehicleLocalInsertionFee AccountDetailEntryCodeType = "VehicleLocalInsertionFee"

	//
	// A Vehicle Local insertion fee credit.
	//
	AccountDetailEntryCodeTypeVehicleLocalInsertionFeeCredit AccountDetailEntryCodeType = "VehicleLocalInsertionFeeCredit"

	//
	// A Vehicle Local final value fee.
	//
	AccountDetailEntryCodeTypeVehicleLocalFinalValueFee AccountDetailEntryCodeType = "VehicleLocalFinalValueFee"

	//
	// A Vehicle Local final value fee credit.
	//
	AccountDetailEntryCodeTypeVehicleLocalFinalValueFeeCredit AccountDetailEntryCodeType = "VehicleLocalFinalValueFeeCredit"

	//
	// A Vehicle Local GTC fee.
	//
	AccountDetailEntryCodeTypeVehicleLocalGTCFee AccountDetailEntryCodeType = "VehicleLocalGTCFee"

	//
	// A Vehicle Local GTC fee credit issued by eBay.
	//
	AccountDetailEntryCodeTypeVehicleLocalGTCFeeCredit AccountDetailEntryCodeType = "VehicleLocalGTCFeeCredit"

	//
	// eBay Motors Pro fee. Applies to eBay Motors Pro registered dealer
	// applications only.
	//
	AccountDetailEntryCodeTypeEBayMotorsProFee AccountDetailEntryCodeType = "eBayMotorsProFee"

	//
	// eBay Motors Pro fee credit. Applies to eBay Motors Pro registered
	// dealer applications only.
	//
	AccountDetailEntryCodeTypeCrediteBayMotorsProFee AccountDetailEntryCodeType = "CrediteBayMotorsProFee"

	//
	// eBay Motors Pro feature fee. Applies to eBay Motors Pro registered
	// dealer applications only.
	//
	AccountDetailEntryCodeTypeEBayMotorsProFeatureFee AccountDetailEntryCodeType = "eBayMotorsProFeatureFee"

	//
	// eBay Motors Pro feature fee credit. Applies to eBay Motors Pro
	// registered dealer applications only.
	//
	AccountDetailEntryCodeTypeCrediteBayMotorsProFeatureFee AccountDetailEntryCodeType = "CrediteBayMotorsProFeatureFee"

	//
	// A fee charged by eBay for listing an item with the
	// Gallery Plus feature enabled. This feature cannot be removed
	// with ReviseItem or RelistItem. However, if the feature is
	// upgraded, for example, to Gallery Featured, the fee for
	// Gallery Plus is refunded and a fee for Gallery Feature is
	// charged instead.
	//
	AccountDetailEntryCodeTypeFeeGalleryPlus AccountDetailEntryCodeType = "FeeGalleryPlus"

	//
	// A credit issued by eBay when refunding the fee for
	// enabling the Gallery Plus feature. A Gallery Plus credit may
	// be issued if, for example, a user upgrades their feature
	// with ReviseItem or RelistItem to Gallery Featured. In this
	// case, the original Gallery Plus fee is refunded and a
	// Gallery Featured fee is charged instead.
	//
	AccountDetailEntryCodeTypeCreditGalleryPlus AccountDetailEntryCodeType = "CreditGalleryPlus"

	AccountDetailEntryCodeTypePrivateListing AccountDetailEntryCodeType = "PrivateListing"

	AccountDetailEntryCodeTypeCreditPrivateListing AccountDetailEntryCodeType = "CreditPrivateListing"

	//
	// ImmoPro Fee
	//
	AccountDetailEntryCodeTypeImmoProFee AccountDetailEntryCodeType = "ImmoProFee"

	//
	// Credit from eBay for a ImmoPro Fee.
	//
	AccountDetailEntryCodeTypeCreditImmoProFee AccountDetailEntryCodeType = "CreditImmoProFee"

	//
	// ImmoPro Feature Fee
	//
	AccountDetailEntryCodeTypeImmoProFeatureFee AccountDetailEntryCodeType = "ImmoProFeatureFee"

	//
	// Credit eBay ImmoPro Feature Fee
	//
	AccountDetailEntryCodeTypeCreditImmoProFeatureFee AccountDetailEntryCodeType = "CreditImmoProFeatureFee"

	//
	// eBay Real Estate Pro Fee
	//
	AccountDetailEntryCodeTypeRealEstateProFee AccountDetailEntryCodeType = "RealEstateProFee"

	//
	// Credit eBay Real Estate Pro Fee
	//
	AccountDetailEntryCodeTypeCreditRealEstateProFee AccountDetailEntryCodeType = "CreditRealEstateProFee"

	//
	// eBay Real Estate Pro Feature Fee
	//
	AccountDetailEntryCodeTypeRealEstateProFeatureFee AccountDetailEntryCodeType = "RealEstateProFeatureFee"

	//
	// Credit eBay Real Estate Pro Feature Fee
	//
	AccountDetailEntryCodeTypeCreditRealEstateProFeatureFee AccountDetailEntryCodeType = "CreditRealEstateProFeatureFee"

	//
	// PowerSeller, PowerSeller shipping, Top-rated seller,
	// eBay Stores subscription, or other subscription discount against the
	// final value fee, insertion fee, subscription fee, late payment fee,
	// or other fee. See AccountEntry.Title for an explanation of the
	// discount and the percentage that was applied.
	//
	AccountDetailEntryCodeTypeDiscount AccountDetailEntryCodeType = "Discount"

	//
	//
	// Reserved for future use.
	//
	AccountDetailEntryCodeTypeCreditFinalValueShipping AccountDetailEntryCodeType = "CreditFinalValueShipping"

	//
	//
	// Reserved for future use.
	//
	AccountDetailEntryCodeTypeFeeFinalValueShipping AccountDetailEntryCodeType = "FeeFinalValueShipping"

	//
	// The fee charged for Return Shipping.
	//
	AccountDetailEntryCodeTypeFeeReturnShipping AccountDetailEntryCodeType = "FeeReturnShipping"

	//
	// A credit issued by eBay against a Return Shipping charge.
	// Issued as a result of an Unpaid Item dispute, under
	// some circumstances.
	//
	AccountDetailEntryCodeTypeCreditReturnShipping AccountDetailEntryCodeType = "CreditReturnShipping"

	//
	// The fee charged by eBay for the Global Shipping Program.
	//
	AccountDetailEntryCodeTypeFeeGlobalShippingProgram AccountDetailEntryCodeType = "FeeGlobalShippingProgram"

	//
	// Credit issued by eBay for charged Global Shipping Program Fee
	//
	AccountDetailEntryCodeTypeCreditGlobalShippingProgram AccountDetailEntryCodeType = "CreditGlobalShippingProgram"

	//
	// A fee charged to the seller's account if the seller ends an auction (with bids)
	// early.
	//
	AccountDetailEntryCodeTypeFeeAuctionEndEarly AccountDetailEntryCodeType = "FeeAuctionEndEarly"

	//
	// A credit issued by eBay to the seller's account if a duplicate auction
	// listing is ended administratively by eBay. A seller is only eligible for this
	// credit if the auction listing had zero bids and was never surfaced in Search.
	//
	AccountDetailEntryCodeTypeCreditAuctionEndEarly AccountDetailEntryCodeType = "CreditAuctionEndEarly"

	//
	// The fee charged to the seller for printing out and using a FedEx shipping
	// label from eBay.
	//
	AccountDetailEntryCodeTypeFeeFedExShippingLabel AccountDetailEntryCodeType = "FeeFedExShippingLabel"

	//
	// A credit issued by eBay to reimburse the seller for a FedEx shipping label. In
	// some cases, this credit may be issued to the seller as a result of an Unpaid Item
	// case that the seller has won against a buyer.
	//
	AccountDetailEntryCodeTypeCreditFedExShippingLabel AccountDetailEntryCodeType = "CreditFedExShippingLabel"

	//
	// This fee is charged to the seller's account if eBay is forced to refund the buyer
	// in a case where the buyer has used the eBay US Managed Returns process and return
	// shipped the item to the seller, but the seller has not issued a refund to the buyer
	// within seven business days after receiving the returned item.
	// <br/><br/>
	// This value is equal to the refund ("CreditReturnRefund") issued to the buyer.
	//
	AccountDetailEntryCodeTypeFeeReturnRefund AccountDetailEntryCodeType = "FeeReturnRefund"

	//
	// A credit issued to the buyer's account by eBay in a case where the buyer has used the eBay US
	// Managed Returns process and return shipped the item to the seller, but the seller
	// has not issued a refund to the buyer within seven business days after receiving the
	// returned item. The buyer credit amounts to the total purchase price (plus any
	// shipping costs if the item was "not as described") minus the seller's restocking
	// fee if one was specified under the return policy of the listing.
	// <br/><br/>
	// eBay then charges this expense to the seller's account, and this charge is
	// attached to the "FeeReturnRefund" value.
	//
	AccountDetailEntryCodeTypeCreditReturnRefund AccountDetailEntryCodeType = "CreditReturnRefund"

	//
	// The fee charged for early termination of an eBay Stores subscription.
	//
	AccountDetailEntryCodeTypeFeeStoresSubscriptionEarlyTermination AccountDetailEntryCodeType = "FeeStoresSubscriptionEarlyTermination"

	//
	// A credit issued by eBay for early termination of an eBay Stores subscription.
	//
	AccountDetailEntryCodeTypeCreditStoresSubscriptionEarlyTermination AccountDetailEntryCodeType = "CreditStoresSubscriptionEarlyTermination"

	//
	// The fee charged for early termination of a National Vehicle subscription.
	//
	AccountDetailEntryCodeTypeFeeVehicleSubscriptionEarlyTermination AccountDetailEntryCodeType = "FeeVehicleSubscriptionEarlyTermination"

	//
	// A credit issued by eBay for early termination of a National Vehicle subscription.
	//
	AccountDetailEntryCodeTypeCreditVehicleSubscriptionEarlyTermination AccountDetailEntryCodeType = "CreditVehicleSubscriptionEarlyTermination"

	//
	// A monthly subscription fee charged for a National Vehicle subscription.
	//
	AccountDetailEntryCodeTypeFeeVehicleSubscription AccountDetailEntryCodeType = "FeeVehicleSubscription"

	//
	// A credit issued by eBay for the monthly fee charged for a National Vehicle subscription.
	//
	AccountDetailEntryCodeTypeCreditVehicleSubscription AccountDetailEntryCodeType = "CreditVehicleSubscription"

	//
	// The fee charged to the seller for printing out and using an AU Post shipping label from eBay.
	//
	AccountDetailEntryCodeTypeFeeAUPostShippingLabel AccountDetailEntryCodeType = "FeeAUPostShippingLabel"

	//
	// A credit issued by eBay to reimburse the seller for an AU Post shipping label. In some cases, this credit may be issued to the seller as a result of an Unpaid Item case that the seller has won against a buyer.
	//
	AccountDetailEntryCodeTypeCreditAUPostShippingLabel AccountDetailEntryCodeType = "CreditAUPostShippingLabel"

	//
	// The fee charged to the seller for printing out and using an APAC FedEx shipping label from eBay.
	//
	AccountDetailEntryCodeTypeFeeAPACFedExShippingLabel AccountDetailEntryCodeType = "FeeAPACFedExShippingLabel"

	//
	// A credit issued by eBay to reimburse the seller for an APAC FedEx shipping label. In some cases, this credit may be issued to the seller as a result of an Unpaid Item case that the seller has won against a buyer.
	//
	AccountDetailEntryCodeTypeCreditAPACFedExShippingLabel AccountDetailEntryCodeType = "CreditAPACFedExShippingLabel"

	//
	// The fee charged to the seller for printing out and using an APAC TNT shipping label from eBay.
	//
	AccountDetailEntryCodeTypeFeeAPACTNTShippingLabel AccountDetailEntryCodeType = "FeeAPACTNTShippingLabel"

	//
	// A credit issued by eBay to reimburse the seller for an APAC TNT shipping label. In some cases, this credit may be issued to the seller as a result of an Unpaid Item case that the seller has won against a buyer.
	//
	AccountDetailEntryCodeTypeCreditAPACTNTShippingLabel AccountDetailEntryCodeType = "CreditAPACTNTShippingLabel"

	//
	// The fee charged for eBay Money Back Guarantee reimbursement.
	//
	AccountDetailEntryCodeTypeFeeEBPReimbursement AccountDetailEntryCodeType = "FeeEBPReimbursement"

	//
	// A credit issued by eBay for eBay Money Back Guarantee reimbursement.
	//
	AccountDetailEntryCodeTypeCreditEBPReimbursement AccountDetailEntryCodeType = "CreditEBPReimbursement"

	//
	// This value is deprecated.
	//
	AccountDetailEntryCodeTypeFeePromotedListingFeature AccountDetailEntryCodeType = "FeePromotedListingFeature"

	//
	// This value is deprecated.
	//
	AccountDetailEntryCodeTypeCreditPromotedListingFeature AccountDetailEntryCodeType = "CreditPromotedListingFeature"

	//
	// The fee charged for Ad on eBay. This Ad fee is charged only for sellers who sign up to create Promoted Listings campaigns. When sellers advertise their listings the listings are displayed on the search results pages based on buyer search query. When a buyer clicks on an ad and then goes on to purchase that same item within 30 days of click, the seller is charged an Ad fee. The Ad fee that is charged is at the rate set by seller themselves. They choose the bid percentage for each item listing.
	//
	AccountDetailEntryCodeTypeFeeAd AccountDetailEntryCodeType = "FeeAd"

	//
	// A credit issued by eBay for an Ad charge.
	//
	AccountDetailEntryCodeTypeCreditAd AccountDetailEntryCodeType = "CreditAd"

	//
	// The fee charged to the seller for printing out and using a Universal Business Integration (UBI) shipping label from eBay.
	//
	AccountDetailEntryCodeTypeFeeUBIShippingLabel AccountDetailEntryCodeType = "FeeUBIShippingLabel"

	//
	// A credit issued by eBay to reimburse the seller for a Universal Business Integration (UBI) shipping label. In some cases, this credit may be issued to the seller as a result of an Unpaid Item case that the seller has won against a buyer.
	//
	AccountDetailEntryCodeTypeCreditUBIShippingLabel AccountDetailEntryCodeType = "CreditUBIShippingLabel"

	//
	// Annual subscription fee charged for eBay Plus subscription
	//
	AccountDetailEntryCodeTypeFeeeBayPlusSubscription AccountDetailEntryCodeType = "FeeeBayPlusSubscription"

	//
	// A credit issued for eBay Plus subscription
	//
	AccountDetailEntryCodeTypeCrediteBayPlusSubscription AccountDetailEntryCodeType = "CrediteBayPlusSubscription"

	//
	// This enumeration value indicates the charge is an eBay payment intermediation fee. This fee is only applicable for sellers in the eBay Payments beta program.
	//
	AccountDetailEntryCodeTypePaymentIntermediationFee AccountDetailEntryCodeType = "PaymentIntermediationFee"

	//
	// This enumeration value indicates the invoice charge is an eBay payment intermediation fee. This fee is only applicable for sellers in the eBay Payments beta program.
	//
	AccountDetailEntryCodeTypeFeePaymentIntermediationRVI AccountDetailEntryCodeType = "FeePaymentIntermediationRVI"

	//
	// This enumeration value indicates the credit is a seller reimbursement for an eBay payment intermediation fee. This credit is only applicable for sellers in the eBay Payments beta program.
	//
	AccountDetailEntryCodeTypeFeePaymentIntermediationChargeback AccountDetailEntryCodeType = "FeePaymentIntermediationChargeback"

	//
	// This enumeration value indicates the invoice credit is a seller reimbursement for an eBay payment intermediation fee. This credit is only applicable for sellers in the eBay Payments beta program.
	//
	AccountDetailEntryCodeTypeFeePaymentIntermediationChargebackRVI AccountDetailEntryCodeType = "FeePaymentIntermediationChargebackRVI"
)

//
// Enumerated type defining the possible values that can be used in the <b>AccountEntrySortType</b> field of the <b>GetAccount</b> request to sort account entries returned in the response.
//
type AccountEntrySortTypeCodeType string

const (

	//
	// This is the default value. With this value set, account entries in the <b>GetAccount</b> response are sorted by transaction date (see <b>AccountEntry.Date</b> field) in ascending order (oldest transaction to most recent transaction). This value will produce the same results as the  <b>AccountEntryCreatedTimeAscending</b> value.
	//
	AccountEntrySortTypeCodeTypeNone AccountEntrySortTypeCodeType = "None"

	//
	// With this value set, account entries in the <b>GetAccount</b> response are sorted by transaction date (see <b>AccountEntry.Date</b> field) in ascending order (oldest transaction to most recent transaction). This value will produce the same results as the  <b>None</b> value.
	//
	AccountEntrySortTypeCodeTypeAccountEntryCreatedTimeAscending AccountEntrySortTypeCodeType = "AccountEntryCreatedTimeAscending"

	//
	// With this value set, account entries in the <b>GetAccount</b> response are sorted by transaction date (see <b>AccountEntry.Date</b> field) in descending order (most recent transaction to oldest transaction).
	//
	AccountEntrySortTypeCodeTypeAccountEntryCreatedTimeDescending AccountEntrySortTypeCodeType = "AccountEntryCreatedTimeDescending"

	//
	// With this value set, account entries in the <b>GetAccount</b> response are sorted by Item ID value (see <b>AccountEntry.ItemID</b> field) in ascending order (oldest eBay listing to most recent eBay listing).
	//
	AccountEntrySortTypeCodeTypeAccountEntryItemNumberAscending AccountEntrySortTypeCodeType = "AccountEntryItemNumberAscending"

	//
	// With this value set, account entries in the <b>GetAccount</b> response are sorted by Item ID value (see <b>AccountEntry.ItemID</b> field) in descending order (most recent eBay listing to oldest eBay listing).
	//
	AccountEntrySortTypeCodeTypeAccountEntryItemNumberDescending AccountEntrySortTypeCodeType = "AccountEntryItemNumberDescending"

	//
	// With this value set, account entries in the <b>GetAccount</b> response are sorted in alphabetical order according to each entry's <b>AccountEntry.Description</b> value. When account entries are sorted according to fee type, the secondary sort criterion is transaction date, and for account entries with identical fee types, the oldest account entries will appear first in the response.
	//
	AccountEntrySortTypeCodeTypeAccountEntryFeeTypeAscending AccountEntrySortTypeCodeType = "AccountEntryFeeTypeAscending"

	//
	// With this value set, account entries in the <b>GetAccount</b> response are sorted in reverse alphabetical order according to each entry's <b>AccountEntry.Description</b> value. When account entries are sorted according to fee type, the secondary sort criterion is transaction date, and for account entries with identical fee types, the oldest account entries will appear first in the response.
	//
	AccountEntrySortTypeCodeTypeAccountEntryFeeTypeDescending AccountEntrySortTypeCodeType = "AccountEntryFeeTypeDescending"

	//
	// (out) Reserved for internal or future use.
	//
	AccountEntrySortTypeCodeTypeCustomCode AccountEntrySortTypeCodeType = "CustomCode"
)

//
// This enumerated type contains the suppported values that may be used in the <b>AccountHistorySelection</b> field to control the account entries that are returned in a <b>GetAccount</b> response.
//
type AccountHistorySelectionCodeType string

const (

	//
	// This value should be used if the eBay user wants to see the account entries posted to the last invoice that was sent to the user by eBay. If this value is used, the <b>InvoiceDate</b>, <b>BeginDate</b>, and <b>EndDate</b> fields of the <b>GetAccount</b> request are no longer applicable and will be ignored if they are included in the call request.
	//
	AccountHistorySelectionCodeTypeLastInvoice AccountHistorySelectionCodeType = "LastInvoice"

	//
	// This value should be used if the eBay user wants to see the account entries for a specific invoice that was sent to the user by eBay. If this value is used, the specific invoice is identified by including the  <b>InvoiceDate</b> field and setting its value to the actual invoice date. If this value is used, the <b>BeginDate</b>, and <b>EndDate</b> fields of the <b>GetAccount</b> request are no longer applicable and will be ignored if they are included in the call request.
	//
	AccountHistorySelectionCodeTypeSpecifiedInvoice AccountHistorySelectionCodeType = "SpecifiedInvoice"

	//
	// This value should be used if the eBay user wants to see account entries for a customized date range that can overlap multiple formal eBay invoices. If this value is used, then you also must specify <b>BeginDate</b> and <b>EndDate</b> to set the date range for which to retrieve account entries. If this value is used, then <b>InvoiceDate</b> is no longer applicable and will be ignored if it is included in the call request.
	//
	AccountHistorySelectionCodeTypeBetweenSpecifiedDates AccountHistorySelectionCodeType = "BetweenSpecifiedDates"

	//
	// (out) Reserved for internal or future use.
	//
	AccountHistorySelectionCodeTypeCustomCode AccountHistorySelectionCodeType = "CustomCode"
)

//
// Enumerated type that lists the possible states of an eBay user account.
//
type AccountStateCodeType string

const (

	//
	// This value indicates that the eBay user account is active.
	//
	AccountStateCodeTypeActive AccountStateCodeType = "Active"

	//
	// This value indicates that the eBay user account has been created, but is not yet active, pending additional information or processing by eBay.
	//
	AccountStateCodeTypePending AccountStateCodeType = "Pending"

	//
	// This value indicates that the eBay user account is inactive. No new seller account entries would be posted by eBay to the account.
	//
	AccountStateCodeTypeInactive AccountStateCodeType = "Inactive"

	//
	// Reserved for internal or future use.
	//
	AccountStateCodeTypeCustomCode AccountStateCodeType = "CustomCode"
)

//
// This enumerated type contains a list of values that will indicate whether or not an Ad Format listing type is enabled for an eBay site or for an eBay category.
//
type AdFormatEnabledCodeType string

const (

	//
	// This value indicates that the Classified Ad format feature is disabled for the site or category.
	//
	AdFormatEnabledCodeTypeDisabled AdFormatEnabledCodeType = "Disabled"

	//
	// This value indicates that the Classified Ad format feature is enabled for the site or category.
	//
	AdFormatEnabledCodeTypeEnabled AdFormatEnabledCodeType = "Enabled"

	//
	// This value indicates that the Classified Ad format is the only listing type supported by the eBay category. This value is not applicable at the eBay site level.
	//
	AdFormatEnabledCodeTypeOnly AdFormatEnabledCodeType = "Only"

	//
	// This value indicates that the lead-generation Classified Ad format feature is enabled for the site or category.
	//
	AdFormatEnabledCodeTypeClassifiedAdEnabled AdFormatEnabledCodeType = "ClassifiedAdEnabled"

	//
	// This value indicates that the lead-generation Classified Ad format is the only listing type supported by the eBay category. This value is not applicable at the eBay site level.
	//
	AdFormatEnabledCodeTypeClassifiedAdOnly AdFormatEnabledCodeType = "ClassifiedAdOnly"

	//
	// This value indicates that eBay Motors Local Market listings are enabled for the site or category.
	//
	AdFormatEnabledCodeTypeLocalMarketBestOfferOnly AdFormatEnabledCodeType = "LocalMarketBestOfferOnly"

	//
	// (out) Reserved for internal or future use.
	//
	AdFormatEnabledCodeTypeCustomCode AdFormatEnabledCodeType = "CustomCode"
)

//
// Enumerated type that indicates to the owner of a classified ad whether or not an email correspondence from a prospective buyer has been answered.
//
type AdFormatLeadStatusCodeType string

const (

	//
	// This value will appear in the response if there is a new message from a prospective buyer that the seller has not yet responded to.
	//
	AdFormatLeadStatusCodeTypeNew AdFormatLeadStatusCodeType = "New"

	//
	// This value will appear in the response if the seller has already responded to the prospective buyer's message.
	//
	AdFormatLeadStatusCodeTypeResponded AdFormatLeadStatusCodeType = "Responded"

	//
	// (out) Reserved for internal or future use.
	//
	AdFormatLeadStatusCodeTypeCustomCode AdFormatLeadStatusCodeType = "CustomCode"
)

//
// This enumerated type contains the possible values that can be returned in the <b>type</b> attribute of the <b>AddressAttribute</b> field. Currently, this type only contains one enumeration value, but in the future, other address attributes may be created for this type.
//
type AddressAttributeCodeType string

const (

	//
	// This value indicates that the value returned in the <b>AddressAttribute</b> field is the reference ID for a "Click and Collect" order.
	//
	AddressAttributeCodeTypeReferenceNumber AddressAttributeCodeType = "ReferenceNumber"

	//
	// Reserved for internal or future use.
	//
	AddressAttributeCodeTypeCustomCode AddressAttributeCodeType = "CustomCode"
)

//
// Enumerated type used by <b>AddressType</b> to indicate whether a shipping address is on file with eBay or on file with PayPal.
//
type AddressOwnerCodeType string

const (

	//
	// This value indicates that the shipping address being referenced is on file with PayPal.
	//
	AddressOwnerCodeTypePayPal AddressOwnerCodeType = "PayPal"

	//
	// This value indicates that the shipping address being referenced is on file with eBay.
	//
	AddressOwnerCodeTypeEBay AddressOwnerCodeType = "eBay"

	//
	// Reserved for internal or future use.
	//
	AddressOwnerCodeTypeCustomCode AddressOwnerCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type AddressRecordTypeCodeType string

const (

	//
	// This value is not used.
	//
	AddressRecordTypeCodeTypeResidential AddressRecordTypeCodeType = "Residential"

	//
	// This value is not used.
	//
	AddressRecordTypeCodeTypeBusiness AddressRecordTypeCodeType = "Business"

	//
	// This value is not used.
	//
	AddressRecordTypeCodeTypeCustomCode AddressRecordTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type AddressStatusCodeType string

const (

	//
	// This value is not used.
	//
	AddressStatusCodeTypeNone AddressStatusCodeType = "None"

	//
	// This value is not used.
	//
	AddressStatusCodeTypeConfirmed AddressStatusCodeType = "Confirmed"

	//
	// This value is not used.
	//
	AddressStatusCodeTypeUnconfirmed AddressStatusCodeType = "Unconfirmed"

	//
	// This value is not used.
	//
	AddressStatusCodeTypeCustomCode AddressStatusCodeType = "CustomCode"
)

//
// This enumeration type lists the values that will be returned to the seller in a <b>GetOrders</b> call (and other order management calls) to indicate that the shipping address is the buyer's default shipping address, an alternative/secondary shipping address, or an invalid shipping address.
//
type AddressUsageCodeType string

const (

	//
	// This value indicates that the shipping address provided by the buyer at checkout time is the buyer's default/primary shipping address.
	//
	AddressUsageCodeTypeDefaultShipping AddressUsageCodeType = "DefaultShipping"

	//
	// This value indicates that the shipping address provided by the buyer at checkout time is one of the buyer's secondary shipping addresses on file with eBay.
	//
	AddressUsageCodeTypeShipping AddressUsageCodeType = "Shipping"

	//
	// This value indicates that the address is not valid, and an alternative address will have to be provided before the order is shipped.
	//
	AddressUsageCodeTypeInvalid AddressUsageCodeType = "Invalid"

	//
	// (out) Reserved for internal or future use.
	//
	AddressUsageCodeTypeCustomCode AddressUsageCodeType = "CustomCode"
)

//
// Part of the mechanism for eBay to control which announcement messages are
// to be made available to the user.
//
type AnnouncementMessageCodeType string

const (

	//
	// No message is to be made available.
	//
	AnnouncementMessageCodeTypeNone AnnouncementMessageCodeType = "None"

	//
	// A deprecation message is to be made available,
	// but only if today's date is between <b>AnnouncementMessageType.AnnouncementStartTime</b>
	// and <b>AnnouncementMessageType.EventTime</b>.
	//
	AnnouncementMessageCodeTypeDeprecation AnnouncementMessageCodeType = "Deprecation"

	//
	// A mapping message is to be made available,
	// but only if today's date is after <b>AnnouncementMessageType.EventTime</b>.
	//
	AnnouncementMessageCodeTypeMapping AnnouncementMessageCodeType = "Mapping"

	//
	// Both "Deprecation" and "Mapping" enumerations are to apply.
	//
	AnnouncementMessageCodeTypeDeprecationAndMapping AnnouncementMessageCodeType = "DeprecationAndMapping"

	//
	// Reserved for future use.
	//
	AnnouncementMessageCodeTypeCustomCode AnnouncementMessageCodeType = "CustomCode"
)

//
// This enumerated type list the possible devices that may be running a affiliate user's application. The affiliate must mark the type of device that is running their application when the <b>PlaceOffer</b> call is made.
//
type ApplicationDeviceTypeCodeType string

const (

	//
	// This enumeration value indicates that the user's application is running in a browser.
	//
	ApplicationDeviceTypeCodeTypeBrowser ApplicationDeviceTypeCodeType = "Browser"

	//
	// This enumeration value indicates that the user's application is a wireless application.
	//
	ApplicationDeviceTypeCodeTypeWireless ApplicationDeviceTypeCodeType = "Wireless"

	//
	// This enumeration value indicates that the user's application is a desktop application.
	//
	ApplicationDeviceTypeCodeTypeDesktop ApplicationDeviceTypeCodeType = "Desktop"

	//
	// This enumeration value indicates that the user's application is running through a television set-top box.
	//
	ApplicationDeviceTypeCodeTypeSetTopTVBox ApplicationDeviceTypeCodeType = "SetTopTVBox"

	//
	// Reserved for future use.
	//
	ApplicationDeviceTypeCodeTypeCustomCode ApplicationDeviceTypeCodeType = "CustomCode"
)

//
// This enumerated type is used by the <b>AspectUsage</b> field that is returned in <b>GetCategorySpecifics</b> to indicate if an Item Specific is defined/derived from an eBay catalog product, or if the Item Specific is typically unique to a particular instance of a product in that category.
//
type AspectUsageCodeType string

const (

	//
	// This enumeration value indicates that the Item Specific in the corresponding <b>NameRecommendation.Name</b> field is defined/derived from an eBay catalog product. 'Product' Item Specifics are also referred to as Product Aspects in Web flows and other APIs. This value is generally only returned for PBSE mandated/enabled categories. Catalog product-based Item Specifics cannot be modified if the seller created/revise/relisted the item based on an eBay catalog product. However, if a seller thinks that the name of the Product Aspect is inaccurate, or if the corresponding Product Aspect name is inaccurate or missing, they can use the <b>Catalog API</b> to make a request to eBay to revise an existing eBay Catalog product.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> See the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_product_vs_item_aspects.html" target="_blank">Product aspects vs. item specifics</a> page for more information about product aspects and instance aspects.
	// </span>
	//
	AspectUsageCodeTypeProduct AspectUsageCodeType = "Product"

	//
	// This enumeration value indicates that the Item Specific in the corresponding <b>NameRecommendation.Name</b> field is an 'instance aspect', which is an Item Specific whose value will vary based on a particular instance of the product. When creating a listing, the seller should pass in the name-value pair for this ItemSpecific through the <b>Item.ItemSpecifics.NameValueList</b> container of an <b>AddItem</b> call.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> See the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_product_vs_item_aspects.html" target="_blank">Product aspects vs. item specifics</a> page for more information about product aspects and instance aspects.
	// </span>
	//
	AspectUsageCodeTypeInstance AspectUsageCodeType = "Instance"

	//
	// Reserved for future use.
	//
	AspectUsageCodeTypeCustomCode AspectUsageCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type AttributeConversionEnabledCodeType string

const (

	//
	// This value is not used.
	//
	AttributeConversionEnabledCodeTypeNotApplicable AttributeConversionEnabledCodeType = "NotApplicable"

	//
	// This value is not used.
	//
	AttributeConversionEnabledCodeTypeEnabled AttributeConversionEnabledCodeType = "Enabled"

	//
	// This value is not used.
	//
	AttributeConversionEnabledCodeTypeDisabled AttributeConversionEnabledCodeType = "Disabled"

	//
	// This value is not used.
	//
	AttributeConversionEnabledCodeTypeCustomCode AttributeConversionEnabledCodeType = "CustomCode"
)

//
// This enumeration type lists the types of user authentication tokens that can be used to access/use eBay APIs.
//
type AuthTokenTypeCodeType string

const (

	//
	// This value indicates that a Client Alerts token is required.
	//
	AuthTokenTypeCodeTypeClientAlertsToken AuthTokenTypeCodeType = "ClientAlertsToken"

	//
	// Reserved for internal or future use.
	//
	AuthTokenTypeCodeTypeCustomCode AuthTokenTypeCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible settings for the automated feedback mechanism embedded in the <b>SetSellingManagerFeedbackOptions</b> API call. This type is only applicable to Selling Manager Pro users.
//
type AutomatedLeaveFeedbackEventCodeType string

const (

	//
	// If the <b>AutomatedLeaveFeedbackEvent</b> field is set to this value, the automated feedback mechanism will automatically leave feedback for the buyer once that buyer leaves positive feedback for the seller.
	//
	AutomatedLeaveFeedbackEventCodeTypePositiveFeedbackReceived AutomatedLeaveFeedbackEventCodeType = "PositiveFeedbackReceived"

	//
	// If the <b>AutomatedLeaveFeedbackEvent</b> field is set to this value, the automated feedback mechanism will automatically leave feedback for the buyer once that buyer pays for the line item.
	//
	AutomatedLeaveFeedbackEventCodeTypePaymentReceived AutomatedLeaveFeedbackEventCodeType = "PaymentReceived"

	//
	// If the <b>AutomatedLeaveFeedbackEvent</b> field is set to this value, the automated feedback mechanism will essentially be turned off. Automated feedback will not occur.
	//
	AutomatedLeaveFeedbackEventCodeTypeNone AutomatedLeaveFeedbackEventCodeType = "None"

	//
	// (out) Reserved for internal or future use.
	//
	AutomatedLeaveFeedbackEventCodeTypeCustomCode AutomatedLeaveFeedbackEventCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type BalanceCodeType string

const (

	//
	// This value is not used.
	//
	BalanceCodeTypeOther BalanceCodeType = "Other"

	//
	// This value is not used.
	//
	BalanceCodeTypeCustomCode BalanceCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible values that can be passed in to the <b>Action</b> field in a <b>RespondToBestOffer</b> request.
//
type BestOfferActionCodeType string

const (

	//
	// This value should be passed in to the <b>Action</b> field to accept the Best Offer identified in the <b>BestOfferID</b> field. Note that only one Best Offer may be accepted in a single <b>RespondToBestOffer</b> call.
	//
	BestOfferActionCodeTypeAccept BestOfferActionCodeType = "Accept"

	//
	// This value should be passed in to the <b>Action</b> field to decline one or more Best Offers identified by one or more <b>BestOfferID</b> fields. Note that multiple Best Offers may be declined in a single <b>RespondToBestOffer</b> call.
	//
	BestOfferActionCodeTypeDecline BestOfferActionCodeType = "Decline"

	//
	// This value should be passed in to the <b>Action</b> field to counter a buyer's Best Offer or Counter Offer. Note that a seller may only counter one Best Offer in a single <b>RespondToBestOffer</b> call. If a seller is using the <b>RespondToBestOffer</b> call to counter a Best Offer, the counter offer price must be specified in the <b>CounterOfferPrice</b> field, and the quantity of items in the Best Offer must be specified in the <b>CounterOfferQuantity</b> field.
	//
	BestOfferActionCodeTypeCounter BestOfferActionCodeType = "Counter"

	//
	// Reserved for internal or future use.
	//
	BestOfferActionCodeTypeCustomCode BestOfferActionCodeType = "CustomCode"
)

//
// Unique identifier for a Best Offer. This identifier is created once a prospective buyer makes a Best Offer on an item.
//
type BestOfferIDType string

//
// Enumerated type that defines the possible values for the status of a Best Offer or a buyer's/seller's counter offer.
//
type BestOfferStatusCodeType string

const (

	//
	// This value indicates that the buyer's Best Offer on an item is awaiting the
	// seller's response (accept, decline, counter offer). A buyer's Best Offer expires
	// after 48 hours without a seller's response.
	//
	BestOfferStatusCodeTypePending BestOfferStatusCodeType = "Pending"

	//
	// Depending on context, this value can indicate that the buyer's Best Offer was
	// accepted by the seller, or that the seller's or buyer's counter offer was accepted by the other party.
	//
	BestOfferStatusCodeTypeAccepted BestOfferStatusCodeType = "Accepted"

	//
	// Depending on context, this value can indicate that the buyer's Best Offer was
	// declined by the seller, or that the seller's or buyer's counter offer was declined by the other party.
	//
	BestOfferStatusCodeTypeDeclined BestOfferStatusCodeType = "Declined"

	//
	// Depending on context, this value can indicate that the buyer's Best Offer expired due to the passing of 48 hours with no seller response (accept, decline, counter offer), or that the seller's or buyer's counter offer expired due to the passing of 48 hours with no response from other party.
	//
	BestOfferStatusCodeTypeExpired BestOfferStatusCodeType = "Expired"

	//
	// Depending on context, this value can indicate that the buyer has retracted the Best Offer, or that the seller's or buyer's counter offer has been retracted.
	//
	BestOfferStatusCodeTypeRetracted BestOfferStatusCodeType = "Retracted"

	//
	// This value indicates that the Best Offer was ended by an eBay administrator.
	//
	BestOfferStatusCodeTypeAdminEnded BestOfferStatusCodeType = "AdminEnded"

	//
	// Depending on context, this value can indicate that a buyer's Best Offer or that the seller's or buyer's counter offer is in the active state. The <code>Active</code> value can also be used in the <b>GetBestOffers</b> request to retrieve only active Best Offers.
	//
	BestOfferStatusCodeTypeActive BestOfferStatusCodeType = "Active"

	//
	// Depending on context, this value can indicate that a buyer's Best Offer has been countered by the seller, or that the seller's or buyer's counter offer has been countered by the other party.
	//
	BestOfferStatusCodeTypeCountered BestOfferStatusCodeType = "Countered"

	//
	// This value is used in the <b>GetBestOffers</b> request to retrieve all Best Offers in all states. This value is only applicable to the <b>GetBestOffers</b> call.
	//
	BestOfferStatusCodeTypeAll BestOfferStatusCodeType = "All"

	//
	// This value indicates that the buyer and seller have come to agreement on a Best Offer price, but the seller is still waiting for payment from the buyer. If the buyer does not pay within 48 hours, the Best Offer will expire.
	//
	BestOfferStatusCodeTypePendingBuyerPayment BestOfferStatusCodeType = "PendingBuyerPayment"

	//
	// This value indicates that the seller is waiting on the buyer to commit to buying the item at the counter offer price.
	//
	BestOfferStatusCodeTypePendingBuyerConfirmation BestOfferStatusCodeType = "PendingBuyerConfirmation"

	//
	// (out) Reserved for internal or future use.
	//
	BestOfferStatusCodeTypeCustomCode BestOfferStatusCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible offer types for the Best Offer feature.
//
type BestOfferTypeCodeType string

const (

	//
	// This value indicates that the offer is an original Best Offer made by a prospective buyer to the seller.
	//
	BestOfferTypeCodeTypeBuyerBestOffer BestOfferTypeCodeType = "BuyerBestOffer"

	//
	// This value indicates that the offer is a prospective buyer's counter offer against the seller's counter offer.
	//
	BestOfferTypeCodeTypeBuyerCounterOffer BestOfferTypeCodeType = "BuyerCounterOffer"

	//
	// This value indicates that the offer is a seller's counter offer against the seller's original Best Offer.
	//
	BestOfferTypeCodeTypeSellerCounterOffer BestOfferTypeCodeType = "SellerCounterOffer"

	//
	// Reserved for internal or future use.
	//
	BestOfferTypeCodeTypeCustomCode BestOfferTypeCodeType = "CustomCode"
)

//
// This enumerated type lists the possible actions that can be made on a listing or Best Offer and the possible states of a bid or Best Offer.
//
type BidActionCodeType string

const (

	//
	// This value indicates that the action or state is unknown.
	//
	BidActionCodeTypeUnknown BidActionCodeType = "Unknown"

	//
	// This value is used in a <b>PlaceOffer</b> call if the buyer wants to bid on an auction listing. If this value is used, the prospective buyer must also include the <b>Offer.MaxBid</b> field in the <b>PlaceOffer</b> call and specify the maximum amount that they are willing to bid in an attempt to win the auction. eBay will automatically rebid on behalf of the buyer each time the buyer is outbid up until the time when their <b>Offer.MaxBid</b> value threshold is met. The <b>GetAllBidders</b> call will return this value as well if the buyer has set up automatic bidding using a maximum bid threshold.
	//
	BidActionCodeTypeBid BidActionCodeType = "Bid"

	//
	// This value is no longer applicable.
	//
	BidActionCodeTypeNotUsed BidActionCodeType = "NotUsed"

	//
	// This value indicates that a buyer's Best Offer or a seller's or buyer's counter offer was retracted. This value cannot be used with the <b>PlaceOffer</b> call.
	//
	BidActionCodeTypeRetraction BidActionCodeType = "Retraction"

	//
	// This value indicates that a buyer's Best Offer or a seller's or buyer's counter offer was automatically retracted. This value cannot be used with the <b>PlaceOffer</b> call.
	//
	BidActionCodeTypeAutoRetraction BidActionCodeType = "AutoRetraction"

	//
	// This value indicates that a buyer's Best Offer or a seller's or buyer's counter offer was cancelled. This value cannot be used with the <b>PlaceOffer</b> call.
	//
	BidActionCodeTypeCancelled BidActionCodeType = "Cancelled"

	//
	// This value indicates that a buyer's Best Offer or a seller's or buyer's counter offer was automatically cancelled. This value cannot be used with the <b>PlaceOffer</b> call.
	//
	BidActionCodeTypeAutoCancel BidActionCodeType = "AutoCancel"

	//
	// This value is returned in the <b>GetAllBidders</b> call if an absentee bid was made, which means that eBay made a bid on the auction listing on behalf of the buyer, who has set a maximum bid threshold. This value is not applicable for the <b>PlaceOffer</b> call, as the buyer would use the <code>Bid</code> value instead, as well as setting a <b>Offer.MaxBid</b> value that would specify the maxium amount that the buyer is willing to bid in an attempt to win the auction.
	//
	BidActionCodeTypeAbsentee BidActionCodeType = "Absentee"

	//
	// This value is returned in the <b>GetAllBidders</b> call if the buyer purchased an item in an auction listing using the Buy It Now feature. This value is not applicable for the <b>PlaceOffer</b> call, as the buyer would use the <code>Purchase</code> value instead.
	//
	BidActionCodeTypeBuyItNow BidActionCodeType = "BuyItNow"

	//
	// This value is used in a <b>PlaceOffer</b> call if the buyer wants to purchase a fixed-price item or purchase an auction item enabled with the Buy It Now feature. Note that this call cannot be used to purchase items that require immediate payment.  The <b>GetAllBidders</b> call will return this value as well if the buyer purchased the item. For items requiring immediate payment, the <b>PlaceOffer</b> call cannot be used for purchase.
	//
	BidActionCodeTypePurchase BidActionCodeType = "Purchase"

	//
	// Reserved for future or internal use.
	//
	BidActionCodeTypeCustomCode BidActionCodeType = "CustomCode"

	//
	// This value is used in a <b>PlaceOffer</b> call if the buyer is proposing a Best Offer to the seller. The <b>GetAllBidders</b> call will return this value as well if the buyer proposed a Best Offer to the seller.
	//
	BidActionCodeTypeOffer BidActionCodeType = "Offer"

	//
	// This value is used in a <b>PlaceOffer</b> call if the buyer is proposing a counter offer to the seller's proposed counter offer. The <b>GetAllBidders</b> call will return this value as well if the buyer proposed a counter offer to the seller's counter offer.
	//
	BidActionCodeTypeCounter BidActionCodeType = "Counter"

	//
	// This value is used in a <b>PlaceOffer</b> call if the buyer is accepting a counter offer proposed by the seller. The <b>GetAllBidders</b> call will return this value as well if the buyer accepted a counter offer.
	//
	BidActionCodeTypeAccept BidActionCodeType = "Accept"

	//
	// This value is used in a <b>PlaceOffer</b> call if the buyer is declining a counter offer proposed by the seller. The <b>GetAllBidders</b> call will return this value as well if the buyer declined a counter offer.
	//
	BidActionCodeTypeDecline BidActionCodeType = "Decline"
)

//
// This enumerated type is deprecated.
//
type BidGroupItemStatusCodeType string

const (

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypeCurrentBid BidGroupItemStatusCodeType = "CurrentBid"

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypeCancelled BidGroupItemStatusCodeType = "Cancelled"

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypePending BidGroupItemStatusCodeType = "Pending"

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypeSkipped BidGroupItemStatusCodeType = "Skipped"

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypeEnded BidGroupItemStatusCodeType = "Ended"

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypeWon BidGroupItemStatusCodeType = "Won"

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypeGroupClosed BidGroupItemStatusCodeType = "GroupClosed"

	//
	// This value is not used.
	//
	BidGroupItemStatusCodeTypeCustomCode BidGroupItemStatusCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type BidGroupStatusCodeType string

const (

	//
	// This value is not used.
	//
	BidGroupStatusCodeTypeOpen BidGroupStatusCodeType = "Open"

	//
	// This value is not used.
	//
	BidGroupStatusCodeTypeClosed BidGroupStatusCodeType = "Closed"

	//
	// This value is not used.
	//
	BidGroupStatusCodeTypeCustomCode BidGroupStatusCodeType = "CustomCode"
)

//
// This type is deprecated.
//
type BidderIdType int32

//
// This enumerated type is deprecated.
//
type BidderStatusCodeType string

const (

	//
	// This value is not used.
	//
	BidderStatusCodeTypeApproved BidderStatusCodeType = "Approved"

	//
	// This value is not used.
	//
	BidderStatusCodeTypeDenied BidderStatusCodeType = "Denied"

	//
	// This value is not used.
	//
	BidderStatusCodeTypePending BidderStatusCodeType = "Pending"

	//
	// This value is not used.
	//
	BidderStatusCodeTypeCustomCode BidderStatusCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type BidderTypeCodeType string

const (

	//
	// This value is not used.
	//
	BidderTypeCodeTypeAllBidder BidderTypeCodeType = "AllBidder"

	//
	// This value is not used.
	//
	BidderTypeCodeTypeHighBidder BidderTypeCodeType = "HighBidder"

	//
	// This value is not used.
	//
	BidderTypeCodeTypeCustomCode BidderTypeCodeType = "CustomCode"
)

//
// This enumerated type contains the possible values that can be returned in the <b>ListingFeatureDetails.BoldTitle</b> field to indicate whether or not bold listing titles are supported by the eBay site specified in the <b>GeteBayDetails</b> call request.
//
type BoldTitleCodeType string

const (

	//
	// This value indicates that bold listing titles are enabled for the eBay site specified in the <b>GeteBayDetails</b> call request.
	//
	BoldTitleCodeTypeEnabled BoldTitleCodeType = "Enabled"

	//
	// This value indicates that bold listing titles are disabled for the eBay site specified in the <b>GeteBayDetails</b> call request.
	//
	BoldTitleCodeTypeDisabled BoldTitleCodeType = "Disabled"

	//
	// Reserved for future use.
	//
	BoldTitleCodeTypeCustomCode BoldTitleCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> This enumerated type is deprecated as the Picture Border feature is no longer available on any eBay Marketplace sites.
// </span>
//
type BorderCodeType string

const (

	//
	// This value indicates that picture borders are enabled for the eBay site specified in the <b>GeteBayDetails</b> call request.
	//
	BorderCodeTypeEnabled BorderCodeType = "Enabled"

	//
	// This value indicates that picture borders are disabled for the eBay site specified in the <b>GeteBayDetails</b> call request.
	//
	BorderCodeTypeDisabled BorderCodeType = "Disabled"

	//
	// Reserved for internal or future use.
	//
	BorderCodeTypeCustomCode BorderCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type BulkCatalogListerStatusCodeType string

const (

	//
	// This value is not used.
	//
	BulkCatalogListerStatusCodeTypePreapproved BulkCatalogListerStatusCodeType = "Preapproved"

	//
	// This value is not used.
	//
	BulkCatalogListerStatusCodeTypeActive BulkCatalogListerStatusCodeType = "Active"

	//
	// This value is not used.
	//
	BulkCatalogListerStatusCodeTypeOnWatch BulkCatalogListerStatusCodeType = "OnWatch"

	//
	// This value is not used.
	//
	BulkCatalogListerStatusCodeTypeOnHold BulkCatalogListerStatusCodeType = "OnHold"

	//
	// This value is not used.
	//
	BulkCatalogListerStatusCodeTypeSuspended BulkCatalogListerStatusCodeType = "Suspended"

	//
	// This value is not used.
	//
	BulkCatalogListerStatusCodeTypeWatchWarn BulkCatalogListerStatusCodeType = "WatchWarn"

	//
	// This value is not used.
	//
	BulkCatalogListerStatusCodeTypeCustomCode BulkCatalogListerStatusCodeType = "CustomCode"
)

//
// Enumerated type that defines the eBay user's account type.
//
type BusinessRoleType string

const (

	//
	// This value indicates that the eBay user's account is a Partially Provisioned Account
	// without buying and selling privileges on eBay.
	//
	BusinessRoleTypeShopper BusinessRoleType = "Shopper"

	//
	// This value indicates that the eBay user's account is a fully provisioned account with buying
	// and selling privileges on eBay.
	//
	BusinessRoleTypeFullMarketPlaceParticipant BusinessRoleType = "FullMarketPlaceParticipant"
)

//
// This enumerated type identifies all of the payment methods supported for the 'Pay Upon Invoice' feature.
//
type BuyerPaymentInstrumentCodeType string

const (

	//
	// This enumeration value indicates that no payment method was specified by the seller.
	//
	BuyerPaymentInstrumentCodeTypeNone BuyerPaymentInstrumentCodeType = "None"

	//
	// This enumeration value indicates that a credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeCreditCard BuyerPaymentInstrumentCodeType = "CreditCard"

	//
	// This enumeration value indicates that a bank debit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeBankDirectDebit BuyerPaymentInstrumentCodeType = "BankDirectDebit"

	//
	// This enumeration value indicates that PayPal was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypePayPal BuyerPaymentInstrumentCodeType = "PayPal"

	//
	// This enumeration value indicates that Elektronisches Lastschriftverfahren (direct debit) was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeELV BuyerPaymentInstrumentCodeType = "ELV"

	//
	// This enumeration value indicates that an unknown credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentCreditCardOther BuyerPaymentInstrumentCodeType = "LocalPaymentCreditCardOther"

	//
	// This enumeration value indicates that Elektronisches Lastschriftverfahren (direct debit) was used locally to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentELV BuyerPaymentInstrumentCodeType = "LocalPaymentELV"

	//
	// This enumeration value indicates that a Master Card credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentMasterCard BuyerPaymentInstrumentCodeType = "LocalPaymentMasterCard"

	//
	// This enumeration value indicates that an American Express credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentAMEX BuyerPaymentInstrumentCodeType = "LocalPaymentAMEX"

	//
	// This enumeration value indicates that a Visa credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentVISA BuyerPaymentInstrumentCodeType = "LocalPaymentVISA"

	//
	// This enumeration value indicates that a Discover credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentDiscover BuyerPaymentInstrumentCodeType = "LocalPaymentDiscover"

	//
	// This enumeration value indicates that a Diners Club credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentDinersclub BuyerPaymentInstrumentCodeType = "LocalPaymentDinersclub"

	//
	// This enumeration value indicates that a JCB credit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentJCB BuyerPaymentInstrumentCodeType = "LocalPaymentJCB"

	//
	// This enumeration value indicates that a Switch debit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentSWITCH BuyerPaymentInstrumentCodeType = "LocalPaymentSWITCH"

	//
	// This enumeration value indicates that a Solo debit card was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeLocalPaymentSOLO BuyerPaymentInstrumentCodeType = "LocalPaymentSOLO"

	//
	// This enumeration value indicates that Giropay was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeGIROPAY BuyerPaymentInstrumentCodeType = "GIROPAY"

	//
	// This enumeration value indicates that BML was used to pay for the order.
	//
	BuyerPaymentInstrumentCodeTypeBML BuyerPaymentInstrumentCodeType = "BML"

	//
	// This enumeration value indicates that the 'Pay Upon Invoice' option was offered to the buyer on the Germany site.
	//
	BuyerPaymentInstrumentCodeTypePayUponInvoice BuyerPaymentInstrumentCodeType = "PayUponInvoice"

	//
	// Reserved for internal or future use.
	//
	BuyerPaymentInstrumentCodeTypeCustomCode BuyerPaymentInstrumentCodeType = "CustomCode"
)

//
// This enumeration type indicates the item's eligibility status for PayPal's buyer protection program or eBay's Money Back Guarantee program.
//
type BuyerProtectionCodeType string

const (

	//
	// This value indicates that the item is ineligible for buyer protection. In many
	// cases, the item is ineligible for buyer protection due to the listing category.
	//
	BuyerProtectionCodeTypeItemIneligible BuyerProtectionCodeType = "ItemIneligible"

	//
	// This value indicates that the item is eligible for buyer protection.
	//
	BuyerProtectionCodeTypeItemEligible BuyerProtectionCodeType = "ItemEligible"

	//
	// This value indicates that customer support has marked the item as
	// ineligible per special criteria (e.g., seller's account closed).
	//
	BuyerProtectionCodeTypeItemMarkedIneligible BuyerProtectionCodeType = "ItemMarkedIneligible"

	//
	// This value indicates that customer support has marked the item as
	// eligible per special criteria.
	//
	BuyerProtectionCodeTypeItemMarkedEligible BuyerProtectionCodeType = "ItemMarkedEligible"

	//
	// This value indicates that the item is ineligible for coverage under any buyer
	// protection program.
	//
	BuyerProtectionCodeTypeNoCoverage BuyerProtectionCodeType = "NoCoverage"

	//
	// Reserved for internal or future use.
	//
	BuyerProtectionCodeTypeCustomCode BuyerProtectionCodeType = "CustomCode"
)

//
// This enumeration type indicates the applicable buyer protection program that the item is eligible to be covered under.
//
type BuyerProtectionSourceCodeType string

const (

	//
	// This value indicates that the item is possibly eligible for buyer protection under the eBay Money Back Guarantee program.
	//
	BuyerProtectionSourceCodeTypeEBay BuyerProtectionSourceCodeType = "eBay"

	//
	// This value indicates that the item is possibly eligible for buyer protection under the PayPal Purchase Protection Program.
	//
	BuyerProtectionSourceCodeTypePayPal BuyerProtectionSourceCodeType = "PayPal"

	//
	// Reserved for internal or future use.
	//
	BuyerProtectionSourceCodeTypeCustomCode BuyerProtectionSourceCodeType = "CustomCode"
)

//
// This enumerated type contains the list of possible Buyer Satisfaction ratings for a seller.
//
type BuyerSatisfactionStatusCodeType string

const (

	//
	// You are doing an excellent job as an eBay seller.
	// Be sure to continue providing members with a positive buying experience.
	// A buyer satisfaction rating of Excellent ensures that you are eligible
	// for eBay incentives.
	//
	BuyerSatisfactionStatusCodeTypeExcellent BuyerSatisfactionStatusCodeType = "Excellent"

	//
	// You are doing a good job as an eBay seller.
	// Buyers have been satisfied with your customer service. Be sure to continue
	// providing members with a positive buying experience. A buyer satisfaction
	// rating of Good ensures that you are eligible for eBay incentives.
	//
	BuyerSatisfactionStatusCodeTypeGood BuyerSatisfactionStatusCodeType = "Good"

	//
	// This value is no longer applicable.
	//
	BuyerSatisfactionStatusCodeTypeNeedsWork BuyerSatisfactionStatusCodeType = "NeedsWork"

	//
	// You are not doing a good job as an eBay seller.
	// Some of your buyers have not been satisfied with your service.
	// Improve your customer service to earn a higher buyer satisfaction rating.
	// If your customer service continues to receive poor responses from customers,
	// your buyer satisfaction rating can drop and could put your eBay seller's
	// account at risk.
	//
	BuyerSatisfactionStatusCodeTypePoor BuyerSatisfactionStatusCodeType = "Poor"

	//
	// You are doing a very poor job as an eBay seller.
	// You need to improve your selling practices immediately. Too many of your
	// customers have not been satisfied with your customer service and you are
	// at risk of losing your eBay account.
	//
	BuyerSatisfactionStatusCodeTypeVeryPoor BuyerSatisfactionStatusCodeType = "VeryPoor"

	//
	// You are doing an unacceptable job as an eBay seller.
	// Improve your selling practices immediately. Your account may be suspended
	// because of your unacceptable customer service.
	//
	BuyerSatisfactionStatusCodeTypeUnacceptable BuyerSatisfactionStatusCodeType = "Unacceptable"

	//
	// Reserved for internal or future use.
	//
	BuyerSatisfactionStatusCodeTypeCustomCode BuyerSatisfactionStatusCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type CalculatedShippingChargeOptionCodeType string

const (

	//
	// This value is not used.
	//
	CalculatedShippingChargeOptionCodeTypeChargeEachItem CalculatedShippingChargeOptionCodeType = "ChargeEachItem"

	//
	// This value is not used.
	//
	CalculatedShippingChargeOptionCodeTypeChargeEntireOrder CalculatedShippingChargeOptionCodeType = "ChargeEntireOrder"

	//
	// This value is not used.
	//
	CalculatedShippingChargeOptionCodeTypeCustomCode CalculatedShippingChargeOptionCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type CalculatedShippingRateOptionCodeType string

const (

	//
	// This value is not used.
	//
	CalculatedShippingRateOptionCodeTypeCombinedItemWeight CalculatedShippingRateOptionCodeType = "CombinedItemWeight"

	//
	// This value is not used.
	//
	CalculatedShippingRateOptionCodeTypeIndividualItemWeight CalculatedShippingRateOptionCodeType = "IndividualItemWeight"

	//
	// This value is not used.
	//
	CalculatedShippingRateOptionCodeTypeCustomCode CalculatedShippingRateOptionCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible parties that can initiate the cancellation of an eBay order.
//
type CancelInitiatorCodeType string

const (

	//
	// This value indicates that the party whom initiated the cancellation of the order is not known.
	//
	CancelInitiatorCodeTypeUnknown CancelInitiatorCodeType = "Unknown"

	//
	// This value indicates that the seller initiated the cancellation of the order.
	//
	CancelInitiatorCodeTypeSeller CancelInitiatorCodeType = "Seller"

	//
	// This value indicates that the buyer initiated the cancellation of the order.
	//
	CancelInitiatorCodeTypeBuyer CancelInitiatorCodeType = "Buyer"

	//
	// This value indicates that eBay customer support initiated the cancellation of the order.
	//
	CancelInitiatorCodeTypeCS CancelInitiatorCodeType = "CS"

	//
	// This value indicates that the cancellation of the order was initiated by the system.
	//
	CancelInitiatorCodeTypeSystem CancelInitiatorCodeType = "System"

	//
	// This value is reserved for internal or future use.
	//
	CancelInitiatorCodeTypeCustomCode CancelInitiatorCodeType = "CustomCode"
)

//
// Enumerated type that defines all possible reasons why an eBay order can be cancelled.
//
type CancelReasonCodeType string

const (

	//
	// This value indicates that the eBay order was cancelled by the seller due to the fact that one or more order line items were out-of-stock. This reason given by the seller will result in a seller defect.
	//
	CancelReasonCodeTypeOutOfStock CancelReasonCodeType = "OutOfStock"

	//
	// This value indicates that the eBay Scheduled Delivery order was cancelled due to the fact that the buyer was not at the expected delivery location to receive the order. This value is only applicable to eBay Scheduled Delivery orders, a service that is currently only available in the London area (UK).
	//
	CancelReasonCodeTypeBuyerNoShow CancelReasonCodeType = "BuyerNoShow"

	//
	// This value indicates that the eBay Scheduled Delivery order was cancelled due to the fact that the buyer refused to accept the order. This value is only applicable to eBay Scheduled Delivery orders, a service that is currently only available in the London area (UK).
	//
	CancelReasonCodeTypeBuyerRefused CancelReasonCodeType = "BuyerRefused"

	//
	// This value indicates that the eBay Scheduled Delivery order was cancelled due to the fact that the buyer did not successfully schedule the delivery of the order. This value is only applicable to eBay Scheduled Delivery orders, a service that is currently only available in the London area (UK).
	//
	CancelReasonCodeTypeBuyerNotSchedule CancelReasonCodeType = "BuyerNotSchedule"

	//
	// This value indicates that the seller initiated the cancellation of the order but at the request of the buyer. This is a cancel reason that the seller gives to avoid a seller defect for the cancellation.
	//
	CancelReasonCodeTypeBuyerCancelOrder CancelReasonCodeType = "BuyerCancelOrder"

	//
	// This value indicates that the eBay Scheduled Delivery order was cancelled due to the fact that the delivery person had an issue delivering the order to the buyer. This value is only applicable to eBay Scheduled Delivery orders, a service that is currently only available in the London area (UK).
	//
	CancelReasonCodeTypeValetDeliveryIssues CancelReasonCodeType = "ValetDeliveryIssues"

	//
	// This value indicates that the eBay Scheduled Delivery order was cancelled due to the fact that no delivery person was available to deliver the order to the buyer. This value is only applicable to eBay Scheduled Delivery orders, a service that is currently only available in the London area (UK).
	//
	CancelReasonCodeTypeValetUnavailable CancelReasonCodeType = "ValetUnavailable"

	//
	// This value indicates that the cancellation of the eBay order was initiated by the buyer because the order was placed by mistake.
	//
	CancelReasonCodeTypeOrderPlacedByMistake CancelReasonCodeType = "OrderPlacedByMistake"

	//
	// This value indicates that the cancellation of the eBay order was initiated by the buyer because the buyer decided that the price for the item was too high.
	//
	CancelReasonCodeTypePriceTooHigh CancelReasonCodeType = "PriceTooHigh"

	//
	// This value indicates that the cancellation of the eBay order was initiated by the buyer because the buyer found the same item somewhere else at a cheaper price.
	//
	CancelReasonCodeTypeFoundCheaperPrice CancelReasonCodeType = "FoundCheaperPrice"

	//
	// This value indicates that the cancellation of the eBay order was initiated by the buyer because the buyer realized that the order will not arrive soon enough.
	//
	CancelReasonCodeTypeWontArriveInTime CancelReasonCodeType = "WontArriveInTime"

	//
	// This value indicates that the seller initiated the cancellation of the order but at the request of the buyer, or if the buyer supplied a bad/incorrect address at purchase time. This is a cancel reason that the seller can give to avoid a seller defect for the cancellation.
	//
	CancelReasonCodeTypeBuyerCancelOrAddressIssue CancelReasonCodeType = "BuyerCancelOrAddressIssue"

	//
	// This value indicates that the eBay order was cancelled by the seller due to the fact that one or more order line items were out-of-stock, or due to another reason why the seller was unable to fulfill the order. This reason given by the seller will result in a seller defect.
	//
	CancelReasonCodeTypeOutOfStockOrCannotFulfill CancelReasonCodeType = "OutOfStockOrCannotFulfill"

	//
	// This value is reserved for internal or future use.
	//
	CancelReasonCodeTypeCustomCode CancelReasonCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible states of an eBay order cancellation.
//
type CancelStatusCodeType string

const (

	//
	// This value indicates that the order cancellation request is invalid.
	//
	CancelStatusCodeTypeInvalid CancelStatusCodeType = "Invalid"

	//
	// This value indicates that the order cancellation request is not applicable.
	//
	CancelStatusCodeTypeNotApplicable CancelStatusCodeType = "NotApplicable"

	//
	// This value indicates that the buyer has initiated the cancellation of the eBay order. It will be up to the seller to decide to approve or reject the cancellation request.
	//
	CancelStatusCodeTypeCancelRequested CancelStatusCodeType = "CancelRequested"

	//
	// This value indicates that the cancellation of the eBay order has been initiated by the buyer and approved by the seller, but the cancellation request has yet to be completed.
	//
	CancelStatusCodeTypeCancelPending CancelStatusCodeType = "CancelPending"

	//
	// This value indicates that the cancellation of the eBay order initiated by the buyer has been rejected by the seller.
	//
	CancelStatusCodeTypeCancelRejected CancelStatusCodeType = "CancelRejected"

	//
	// This value indicates that the order cancellation request has been closed, with no refund issued to the buyer.
	//
	CancelStatusCodeTypeCancelClosedNoRefund CancelStatusCodeType = "CancelClosedNoRefund"

	//
	// This value indicates that the order cancellation request has been closed, with a refund issued to the buyer.
	//
	CancelStatusCodeTypeCancelClosedWithRefund CancelStatusCodeType = "CancelClosedWithRefund"

	//
	// This value indicates that the order cancellation request has been closed, and it is unknown whether or not a refund was issued to the buyer. This value will generally be returned when the payment method used to pay for the order was something other than PayPal.
	//
	CancelStatusCodeTypeCancelClosedUnknownRefund CancelStatusCodeType = "CancelClosedUnknownRefund"

	//
	// This value indicates that since the buyer committed to buying the item but did not pay for it, the cancellation succeeded and no refund is needed.
	//
	CancelStatusCodeTypeCancelClosedForCommitment CancelStatusCodeType = "CancelClosedForCommitment"

	//
	// This value indicates that the cancellation of the eBay order has been completed.
	//
	CancelStatusCodeTypeCancelComplete CancelStatusCodeType = "CancelComplete"

	//
	// This value indicates that the cancellation of the eBay order has failed.
	//
	CancelStatusCodeTypeCancelFailed CancelStatusCodeType = "CancelFailed"

	//
	// This value is reserved for internal or future use.
	//
	CancelStatusCodeTypeCustomCode CancelStatusCodeType = "CustomCode"
)

//
// This type is deprecated. Use <b>DetailLevelCodeType</b> instead.
//
//
type CategoryFeatureDetailLevelCodeType string

const (

	//
	//
	// Return all available data.
	//
	CategoryFeatureDetailLevelCodeTypeReturnAll CategoryFeatureDetailLevelCodeType = "ReturnAll"

	//
	//
	// Return the category feature definitions only.
	//
	CategoryFeatureDetailLevelCodeTypeReturnFeatureDefinitions CategoryFeatureDetailLevelCodeType = "ReturnFeatureDefinitions"

	//
	//
	// (out) Reserved for internal or future use.
	//
	CategoryFeatureDetailLevelCodeTypeCustomCode CategoryFeatureDetailLevelCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type CharacteristicsSearchCodeType string

const (

	//
	// This value is not used.
	//
	CharacteristicsSearchCodeTypeSingle CharacteristicsSearchCodeType = "Single"

	//
	// This value is not used.
	//
	CharacteristicsSearchCodeTypeMulti CharacteristicsSearchCodeType = "Multi"

	//
	// This value is not used.
	//
	CharacteristicsSearchCodeTypeCustomCode CharacteristicsSearchCodeType = "CustomCode"
)

//
// This enumeration type defines the possible values that can be returned for the <b>CharityAffiliationDetail.AffiliationType</b> field in the <b>GetUser</b> response.
//
type CharityAffiliationTypeCodeType string

const (

	//
	// The specified nonprofit charity organization has a community affiliation.
	//
	CharityAffiliationTypeCodeTypeCommunity CharityAffiliationTypeCodeType = "Community"

	//
	// The specified nonprofit charity organization has direct affiliation.
	//
	CharityAffiliationTypeCodeTypeDirect CharityAffiliationTypeCodeType = "Direct"

	//
	// The specified nonprofit charity organization is no longer affiliated.
	//
	CharityAffiliationTypeCodeTypeRemove CharityAffiliationTypeCodeType = "Remove"

	//
	// Reserved for internal or future use.
	//
	CharityAffiliationTypeCodeTypeCustomCode CharityAffiliationTypeCodeType = "CustomCode"
)

//
// Enumerated type that defines the social networking sites that are supported by PayPal Giving Fund.
//
type SocialAddressTypeCodeType string

const (

	//
	// This value indicates that the <b>Charity.NonProfitSocialAddress.SocialAddressId</b>
	// is associated with the nonprofit company's Facebook account.
	//
	SocialAddressTypeCodeTypeFacebook SocialAddressTypeCodeType = "Facebook"

	//
	// This value indicates that the <b>Charity.NonProfitSocialAddress.SocialAddressId</b>
	// is associated with the nonprofit company's Twitter account.
	//
	SocialAddressTypeCodeTypeTwitter SocialAddressTypeCodeType = "Twitter"

	//
	// This value indicates that the <b>Charity.NonProfitSocialAddress.SocialAddressId</b>
	// is associated with the nonprofit company's LinkedIn account.
	//
	SocialAddressTypeCodeTypeLinkedin SocialAddressTypeCodeType = "Linkedin"

	//
	// This value indicates that the <b>Charity.NonProfitSocialAddress.SocialAddressId</b>
	// is associated with the nonprofit company's Google+ account.
	//
	SocialAddressTypeCodeTypeGooglePlus SocialAddressTypeCodeType = "GooglePlus"

	//
	// This value indicates that the <b>Charity.NonProfitSocialAddress.SocialAddressId</b>
	// is associated with the nonprofit company's MySpace account.
	//
	SocialAddressTypeCodeTypeMyspace SocialAddressTypeCodeType = "Myspace"

	//
	// This value indicates that the <b>Charity.NonProfitSocialAddress.SocialAddressId</b>
	// is associated with the nonprofit company's Orkut account.
	//
	SocialAddressTypeCodeTypeOrkut SocialAddressTypeCodeType = "Orkut"

	//
	// Reserved for internal or future use.
	//
	SocialAddressTypeCodeTypeCustomCode SocialAddressTypeCodeType = "CustomCode"
)

//
// Enumerated type defining the possible states for a seller's charity seller account.
//
type CharitySellerStatusCodeType string

const (

	//
	// The seller's charity seller account is suspended.
	//
	CharitySellerStatusCodeTypeSuspended CharitySellerStatusCodeType = "Suspended"

	//
	// The seller is a registered charity seller.
	//
	CharitySellerStatusCodeTypeRegistered CharitySellerStatusCodeType = "Registered"

	//
	// The seller is no longer a registered charity seller. The account with the PayPal Giving Fund is closed.
	//
	CharitySellerStatusCodeTypeClosed CharitySellerStatusCodeType = "Closed"

	//
	// The credit card associated with a seller's charity seller account has expired.
	//
	CharitySellerStatusCodeTypeCreditCardExpired CharitySellerStatusCodeType = "CreditCardExpired"

	//
	// The token associated with a seller's charity seller account has expired.
	//
	CharitySellerStatusCodeTypeTokenExpired CharitySellerStatusCodeType = "TokenExpired"

	//
	// The credit card associated with a seller's charity seller account will expire in 15 (or fewer) days.
	//
	CharitySellerStatusCodeTypeCreditCardAboutToExpire CharitySellerStatusCodeType = "CreditCardAboutToExpire"

	CharitySellerStatusCodeTypeRegisteredNoCreditCard CharitySellerStatusCodeType = "RegisteredNoCreditCard"

	//
	// The seller is no longer a registered charity seller and has lost direct seller status.
	//
	CharitySellerStatusCodeTypeNotRegisteredLostDirectSellerStatus CharitySellerStatusCodeType = "NotRegisteredLostDirectSellerStatus"

	CharitySellerStatusCodeTypeDirectDebitRejected CharitySellerStatusCodeType = "DirectDebitRejected"

	//
	// The seller is a registered direct seller, but has no credit card associated with the charity seller account.
	//
	CharitySellerStatusCodeTypeRegisteredDirectSeller CharitySellerStatusCodeType = "RegisteredDirectSeller"

	//
	// The seller is a registered charity seller with no donation payment method on file.
	//
	CharitySellerStatusCodeTypeRegisteredNoPaymentMethod CharitySellerStatusCodeType = "RegisteredNoPaymentMethod"

	//
	// Reserved for internal or future use.
	//
	CharitySellerStatusCodeTypeCustomCode CharitySellerStatusCodeType = "CustomCode"
)

//
// Enumerated type defining the possible states for a nonprofit charity organization registered with the PayPal Giving Fund.
//
type CharityStatusCodeType string

const (

	//
	// The specified nonprofit charity organization is a valid nonprofit charity organization according to the requirements of the PayPal Giving Fund.
	//
	CharityStatusCodeTypeValid CharityStatusCodeType = "Valid"

	//
	// The specified nonprofit charity organization is no longer a valid nonprofit charity organization according to the requirements of the PayPal Giving Fund.
	//
	CharityStatusCodeTypeNoLongerValid CharityStatusCodeType = "NoLongerValid"

	//
	// (out) Reserved for internal or future use.
	//
	CharityStatusCodeTypeCustomCode CharityStatusCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type CheckoutMethodCodeType string

const (

	//
	// This value is not used.
	//
	CheckoutMethodCodeTypeOther CheckoutMethodCodeType = "Other"

	//
	// This value is not used.
	//
	CheckoutMethodCodeTypeThirdPartyCheckout CheckoutMethodCodeType = "ThirdPartyCheckout"

	//
	// This value is not used.
	//
	CheckoutMethodCodeTypeCustomCode CheckoutMethodCodeType = "CustomCode"
)

//
// Enumerated type that lists the possible checkout states of an order line item.
//
type CheckoutStatusCodeType string

const (

	//
	// This value indicates that the buyer has paid and checkout is complete.
	//
	CheckoutStatusCodeTypeCheckoutComplete CheckoutStatusCodeType = "CheckoutComplete"

	//
	// This value indicates that checkout is incomplete, generally because the buyer has not paid yet.
	//
	CheckoutStatusCodeTypeCheckoutIncomplete CheckoutStatusCodeType = "CheckoutIncomplete"

	//
	// This value indicates that the buyer wants to confirm the total price of the order line item before making a payment.
	//
	CheckoutStatusCodeTypeBuyerRequestsTotal CheckoutStatusCodeType = "BuyerRequestsTotal"

	//
	// This value indicates that the seller has just responded to the buyer concerning the total price of the order line item.
	//
	CheckoutStatusCodeTypeSellerResponded CheckoutStatusCodeType = "SellerResponded"

	//
	// Reserved for future use.
	//
	CheckoutStatusCodeTypeCustomCode CheckoutStatusCodeType = "CustomCode"
)

//
// Enumerated type that defines the values used to indicate whether Best Offers for the Classified Ad listing format are enabled/disabled for all/most of a site's categories (<b>SiteDefaults.ClassifiedAdBestOfferEnabled</b>), or enabled/required/disabled for a specific eBay category (<b>Category.ClassifiedAdBestOfferEnabled</b>).
//
type ClassifiedAdBestOfferEnabledCodeType string

const (

	//
	// This value indicates that Classified Ad Best Offer feature is disabled for all/most of a site's categories (if returned in the <b>SiteDefaults.ClassifiedAdBestOfferEnabled</b> field), or disabled for a specific category (if returned in the <b>Category.ClassifiedAdBestOfferEnabled</b> field).
	//
	ClassifiedAdBestOfferEnabledCodeTypeDisabled ClassifiedAdBestOfferEnabledCodeType = "Disabled"

	//
	// This value indicates that Classified Ad Best Offer feature is enabled for all/most of a site's categories (if returned in the <b>SiteDefaults.ClassifiedAdBestOfferEnabled</b> field), or enabled for a specific category (if returned in the <b>Category.ClassifiedAdBestOfferEnabled</b> field).
	//
	ClassifiedAdBestOfferEnabledCodeTypeEnabled ClassifiedAdBestOfferEnabledCodeType = "Enabled"

	//
	// This value indicates that Classified Ad Best Offer feature is required for a specific category (if returned in the <b>Category.ClassifiedAdBestOfferEnabled</b> field). This value is not applicable at the site level (<b>SiteDefaults</b> container).
	//
	ClassifiedAdBestOfferEnabledCodeTypeRequired ClassifiedAdBestOfferEnabledCodeType = "Required"

	//
	// (out) Reserved for internal or future use.
	//
	ClassifiedAdBestOfferEnabledCodeTypeCustomCode ClassifiedAdBestOfferEnabledCodeType = "CustomCode"
)

//
// Used to indicate whether the payment method will be displayed for a category
// belonging to the Lead Generation Format.
//
type ClassifiedAdPaymentMethodEnabledCodeType string

const (

	//
	// Display the payment method and permit checkout.
	//
	ClassifiedAdPaymentMethodEnabledCodeTypeEnabledWithCheckout ClassifiedAdPaymentMethodEnabledCodeType = "EnabledWithCheckout"

	//
	// Display the payment method and suppress checkout.
	//
	ClassifiedAdPaymentMethodEnabledCodeTypeEnabledWithoutCheckout ClassifiedAdPaymentMethodEnabledCodeType = "EnabledWithoutCheckout"

	//
	// Do not display the payment method.
	//
	ClassifiedAdPaymentMethodEnabledCodeTypeNotSupported ClassifiedAdPaymentMethodEnabledCodeType = "NotSupported"

	//
	// (out) Reserved for internal or future use.
	//
	ClassifiedAdPaymentMethodEnabledCodeTypeCustomCode ClassifiedAdPaymentMethodEnabledCodeType = "CustomCode"
)

//
// Enumerated type that defines the seller's preference for allowing
// <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-AnItem.html#CombinedInvoice">Combined Invoice</a>
// orders that pass on a shipping discounts to the buyer.
//
type CombinedPaymentOptionCodeType string

const (

	//
	// This value indicates that the seller does not allow Combined Invoice orders. In
	// other words, the buyer must pay for each order line item separately, and cannot
	// combine multiple single line item orders into one Combined Invoice order and make
	// one payment for that order.
	//
	CombinedPaymentOptionCodeTypeNoCombinedPayment CombinedPaymentOptionCodeType = "NoCombinedPayment"

	//
	// This value indicates that the seller allows Combined Invoice orders, and that the
	// seller has one or more shipping discount rules (Flat, Calculated, or Promotional)
	// that can be applied at the listing level.
	//
	CombinedPaymentOptionCodeTypeDiscountSpecified CombinedPaymentOptionCodeType = "DiscountSpecified"

	//
	// This value indicates that the seller allows Combined Invoice orders, and that the
	// seller will apply any shipping discounts after the creation of the Combined Invoice
	// order.
	//
	CombinedPaymentOptionCodeTypeSpecifyDiscountLater CombinedPaymentOptionCodeType = "SpecifyDiscountLater"

	//
	// Reserved for internal or future use.
	//
	CombinedPaymentOptionCodeTypeCustomCode CombinedPaymentOptionCodeType = "CustomCode"
)

//
// This enumerated type contains the list of values that can be used by the seller to set
// the number of days after item purchase that an unpaid order can be combined with one
// or more other mutual (same buyer and same seller) unpaid orders into one
// <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-AnItem.html#CombinedInvoice">Combined Invoice</a>
// order. Either the buyer or the seller can initiate the Combined Invoice
// process. Sellers can offer buyers shipping discounts through Combined Invoice orders,
// and buyers only have to make one payment for multiple orders as opposed to a payment
// for each order.
//
type CombinedPaymentPeriodCodeType string

const (

	//
	// This value indicates that an unpaid order can be combined into a Combined Invoice
	// order within three days after purchase (creation of order).
	//
	CombinedPaymentPeriodCodeTypeDays_3 CombinedPaymentPeriodCodeType = "Days_3"

	//
	// This value indicates that an unpaid order can be combined into a Combined Invoice
	// order within five days after purchase (creation of order).
	//
	CombinedPaymentPeriodCodeTypeDays_5 CombinedPaymentPeriodCodeType = "Days_5"

	//
	// This value indicates that an unpaid order can be combined into a Combined Invoice
	// order within seven days after purchase (creation of order).
	//
	CombinedPaymentPeriodCodeTypeDays_7 CombinedPaymentPeriodCodeType = "Days_7"

	//
	// This value indicates that an unpaid order can be combined into a Combined Invoice
	// order within 14 days after purchase (creation of order).
	//
	CombinedPaymentPeriodCodeTypeDays_14 CombinedPaymentPeriodCodeType = "Days_14"

	//
	// This value indicates that an unpaid order can be combined into a Combined Invoice
	// order within 30 days after purchase (creation of order).
	//
	CombinedPaymentPeriodCodeTypeDays_30 CombinedPaymentPeriodCodeType = "Days_30"

	//
	// This value indicates that an order is not eligible to be combined into a Combined
	// Payment order.
	//
	CombinedPaymentPeriodCodeTypeIneligible CombinedPaymentPeriodCodeType = "Ineligible"

	//
	// This value is reserved for internal or future use.
	//
	CombinedPaymentPeriodCodeTypeCustomCode CombinedPaymentPeriodCodeType = "CustomCode"
)

//
// This enumerated type list the Feedback ratings that can be left by one eBay user for
// another user regarding that user's experience with the another user during the
// purchase/checkout flow of an order line item.
//
type CommentTypeCodeType string

const (

	//
	// This value indicates that the submitting user's experience with the other user
	// (receiving feedback) was rated as a "Positive" experience. If an eBay user receives
	// a Positive rating for an order line item from a Verified User, their overall
	// Feedback score increases by a value of 1.
	//
	CommentTypeCodeTypePositive CommentTypeCodeType = "Positive"

	//
	// This value indicates that the submitting user's experience with the other user
	// (receiving feedback) was rated as a "Neutral" experience. If an eBay user receives
	// a Neutral rating for an order line item from a Verified User, their overall
	// Feedback score remains the same.
	//
	CommentTypeCodeTypeNeutral CommentTypeCodeType = "Neutral"

	//
	// This value indicates that the submitting user's experience with the other user
	// (receiving feedback) was rated as a "Negative" experience. If an eBay user receives
	// a Negative rating for an order line item from a Verified User, their overall
	// Feedback score decreases by a value of 1.
	//
	CommentTypeCodeTypeNegative CommentTypeCodeType = "Negative"

	//
	// This value indicates that a submitted Feedback entry was withdrawn. If a Feedback
	// entry is withdrawn, the effect of that entry on the overall Feedback score is
	// nullified. However, Feedback comments from the withdrawn entry are still visible.
	//
	CommentTypeCodeTypeWithdrawn CommentTypeCodeType = "Withdrawn"

	//
	// This value indicates that a submitted Feedback entry was withdrawn based on the
	// decision of a third-party (such as eBay). If a Feedback
	// entry is withdrawn, the effect of that entry on the overall Feedback score is
	// nullified.
	// <br><br>
	// This value is only applicable to the eBay Motors site only.
	//
	CommentTypeCodeTypeIndependentlyWithdrawn CommentTypeCodeType = "IndependentlyWithdrawn"

	//
	// This value is reserved for internal or future use.
	//
	CommentTypeCodeTypeCustomCode CommentTypeCodeType = "CustomCode"
)

//
// Enumerated type that contains values which indicate whether an order or order line item is complete, incomplete, or pending.
//
type CompleteStatusCodeType string

const (

	//
	// This value indicates that the order or order line item is in the incomplete state. Generally speaking, an order or order line item is considered incomplete when payment from the buyer has yet to be initiated.
	//
	CompleteStatusCodeTypeIncomplete CompleteStatusCodeType = "Incomplete"

	//
	// This value indicates that the order or order line item is complete. Generally speaking, an order or order line item is complete when payment from the buyer has been initiated and has been processed.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// If the <b>PaymentMethodUsed</b> is <code>CashOnPickup</code>,
	// the <b>CheckoutStatus.Status</b> value in <b>GetOrders</b> will be
	// <code>Complete</code> at checkout time, even though the seller may not have been officially paid
	// yet. The <b>CheckoutStatus.Status</b> value in <b>GetOrders</b> will
	// remain as <code>Complete</code> even if the seller uses <b>ReviseCheckoutStatus</b> to
	// change the checkout status to <code>Pending</code>. However, the <b>eBayPaymentStatus</b>
	// value in <b>GetOrders</b> will change from <code>NoPaymentFailure</code> to
	// <code>PaymentInProcess</code>.
	// </span>
	//
	CompleteStatusCodeTypeComplete CompleteStatusCodeType = "Complete"

	//
	// This value indicates that the order or order line item is in the pending state. Generally speaking, an order is considered pending when payment
	// from the buyer has been initiated but has yet to be fully processed.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// If the payment method is <code>CashOnPickup</code>, the
	// <b>CheckoutStatus.Status</b> value in <b>GetOrders</b> will read <code>Complete</code> at checkout time,
	// even though the seller may not have been officially paid yet. The
	// <b>CheckoutStatus.Status</b> value in <b>GetOrders</b> will remain as <code>Complete</code> even if the
	// seller uses <b>ReviseCheckoutStatus</b> to change the checkout status to <code>Pending</code>.
	// However, the <b>eBayPaymentStatus</b> value in <b>GetOrders</b> will change from
	// <code>NoPaymentFailure</code> to <code>PaymentInProcess</code>.
	// </span>
	//
	CompleteStatusCodeTypePending CompleteStatusCodeType = "Pending"

	//
	// Reserved for internal or future use
	//
	CompleteStatusCodeTypeCustomCode CompleteStatusCodeType = "CustomCode"
)

//
// Enumerated type that defines the values used to indicate whether Condition IDs are enabled/disabled for all/most of a site's categories (<b>SiteDefaults.ConditionEnabled</b>), or enabled/required/disabled for a specific eBay category (<b>Category.ConditionEnabled</b>).
//
type ConditionEnabledCodeType string

const (

	//
	// This value indicates that Condition IDs are disabled for all/most of a site's categories (if returned in the <b>SiteDefaults.ConditionEnabled</b> field), or disabled for a specific category (if returned in the <b>Category.ConditionEnabled</b> field).
	//
	ConditionEnabledCodeTypeDisabled ConditionEnabledCodeType = "Disabled"

	//
	// This value indicates that Condition IDs are enabled for all/most of a site's categories (if returned in the <b>SiteDefaults.ConditionEnabled</b> field), or enabled for a specific category (if returned in the <b>Category.ConditionEnabled</b> field).
	//
	ConditionEnabledCodeTypeEnabled ConditionEnabledCodeType = "Enabled"

	//
	// This value indicates that Condition IDs are required for a specific category (if returned in the <b>Category.ConditionEnabled</b> field). This value is not applicable at the site level (<b>SiteDefaults</b> container).
	//
	ConditionEnabledCodeTypeRequired ConditionEnabledCodeType = "Required"

	//
	// (out) Reserved for internal or future use.
	//
	ConditionEnabledCodeTypeCustomCode ConditionEnabledCodeType = "CustomCode"
)

//
// This enumerated type is not used.
//
type CostGroupFlatCodeType string

const (

	//
	// This value is not used.
	//
	CostGroupFlatCodeTypeGroup1MaxFlatShippingCost CostGroupFlatCodeType = "Group1MaxFlatShippingCost"

	//
	// This value is not used.
	//
	CostGroupFlatCodeTypeGroup2MaxFlatShippingCost CostGroupFlatCodeType = "Group2MaxFlatShippingCost"

	//
	// This value is not used.
	//
	CostGroupFlatCodeTypeGroup3MaxFlatShippingCost CostGroupFlatCodeType = "Group3MaxFlatShippingCost"

	//
	// Reserved for internal or future use.
	//
	CostGroupFlatCodeTypeCustomCode CostGroupFlatCodeType = "CustomCode"
)

//
// This enumerated type contains a partial list of ISO 3166 standard two-letter codes that represent countries around the world.
// <br><br>
// It is recommended that users use the <b>GeteBayDetails</b> call to see the full list of currently supported country codes,
// and the English names associated with each code (e.g., KY="Cayman Islands"). Call
// <b>GeteBayDetails</b> with <b>DetailName</b> set to <b>Country</b>, and then look for <b>CountryDetails.Country</b> fields in the response.
//
type CountryCodeType string

const (

	//
	// Afghanistan.
	//
	CountryCodeTypeAF CountryCodeType = "AF"

	//
	// Albania.
	//
	CountryCodeTypeAL CountryCodeType = "AL"

	//
	// Algeria.
	//
	CountryCodeTypeDZ CountryCodeType = "DZ"

	//
	// American Samoa.
	//
	CountryCodeTypeAS CountryCodeType = "AS"

	//
	// Andorra.
	//
	CountryCodeTypeAD CountryCodeType = "AD"

	//
	// Angola.
	//
	CountryCodeTypeAO CountryCodeType = "AO"

	//
	// Anguilla.
	//
	CountryCodeTypeAI CountryCodeType = "AI"

	//
	// Antarctica.
	//
	CountryCodeTypeAQ CountryCodeType = "AQ"

	//
	// Antigua and Barbuda.
	//
	CountryCodeTypeAG CountryCodeType = "AG"

	//
	// Argentina.
	//
	CountryCodeTypeAR CountryCodeType = "AR"

	//
	// Armenia.
	//
	CountryCodeTypeAM CountryCodeType = "AM"

	//
	// Aruba.
	//
	CountryCodeTypeAW CountryCodeType = "AW"

	//
	// Australia.
	//
	CountryCodeTypeAU CountryCodeType = "AU"

	//
	// Austria.
	//
	CountryCodeTypeAT CountryCodeType = "AT"

	//
	// Azerbaijan.
	//
	CountryCodeTypeAZ CountryCodeType = "AZ"

	//
	// Bahamas.
	//
	CountryCodeTypeBS CountryCodeType = "BS"

	//
	// Bahrain.
	//
	CountryCodeTypeBH CountryCodeType = "BH"

	//
	// Bangladesh.
	//
	CountryCodeTypeBD CountryCodeType = "BD"

	//
	// Barbados.
	//
	CountryCodeTypeBB CountryCodeType = "BB"

	//
	// Belarus.
	//
	CountryCodeTypeBY CountryCodeType = "BY"

	//
	// Belgium.
	//
	CountryCodeTypeBE CountryCodeType = "BE"

	//
	// Belize.
	//
	CountryCodeTypeBZ CountryCodeType = "BZ"

	//
	// Benin.
	//
	CountryCodeTypeBJ CountryCodeType = "BJ"

	//
	// Bermuda.
	//
	CountryCodeTypeBM CountryCodeType = "BM"

	//
	// Bhutan.
	//
	CountryCodeTypeBT CountryCodeType = "BT"

	//
	// Bolivia.
	//
	CountryCodeTypeBO CountryCodeType = "BO"

	//
	// Bosnia and Herzegovina.
	//
	CountryCodeTypeBA CountryCodeType = "BA"

	//
	// Botswana.
	//
	CountryCodeTypeBW CountryCodeType = "BW"

	//
	// Bouvet Island.
	//
	CountryCodeTypeBV CountryCodeType = "BV"

	//
	// Brazil.
	//
	CountryCodeTypeBR CountryCodeType = "BR"

	//
	// British Indian Ocean Territory.
	//
	CountryCodeTypeIO CountryCodeType = "IO"

	//
	// Brunei Darussalam.
	//
	CountryCodeTypeBN CountryCodeType = "BN"

	//
	// Bulgaria.
	//
	CountryCodeTypeBG CountryCodeType = "BG"

	//
	// Burkina Faso.
	//
	CountryCodeTypeBF CountryCodeType = "BF"

	//
	// Burundi.
	//
	CountryCodeTypeBI CountryCodeType = "BI"

	//
	// Cambodia.
	//
	CountryCodeTypeKH CountryCodeType = "KH"

	//
	// Cameroon.
	//
	CountryCodeTypeCM CountryCodeType = "CM"

	//
	// Canada.
	//
	CountryCodeTypeCA CountryCodeType = "CA"

	//
	// Cape Verde.
	//
	CountryCodeTypeCV CountryCodeType = "CV"

	//
	// Cayman Islands.
	//
	CountryCodeTypeKY CountryCodeType = "KY"

	//
	// Central African Republic.
	//
	CountryCodeTypeCF CountryCodeType = "CF"

	//
	// Chad.
	//
	CountryCodeTypeTD CountryCodeType = "TD"

	//
	// Chile.
	//
	CountryCodeTypeCL CountryCodeType = "CL"

	//
	// China.
	//
	CountryCodeTypeCN CountryCodeType = "CN"

	//
	// Christmas Island.
	//
	CountryCodeTypeCX CountryCodeType = "CX"

	//
	// Cocos (Keeling) Islands.
	//
	CountryCodeTypeCC CountryCodeType = "CC"

	//
	// Colombia.
	//
	CountryCodeTypeCO CountryCodeType = "CO"

	//
	// Comoros.
	//
	CountryCodeTypeKM CountryCodeType = "KM"

	//
	// Congo.
	//
	CountryCodeTypeCG CountryCodeType = "CG"

	//
	// Congo, The Democratic Republic of the.
	//
	CountryCodeTypeCD CountryCodeType = "CD"

	//
	// Cook Islands.
	//
	CountryCodeTypeCK CountryCodeType = "CK"

	//
	// Costa Rica.
	//
	CountryCodeTypeCR CountryCodeType = "CR"

	//
	// Cote d'Ivoire.
	//
	CountryCodeTypeCI CountryCodeType = "CI"

	//
	// Croatia.
	//
	CountryCodeTypeHR CountryCodeType = "HR"

	//
	// Cuba.
	//
	CountryCodeTypeCU CountryCodeType = "CU"

	//
	// Cyprus.
	//
	CountryCodeTypeCY CountryCodeType = "CY"

	//
	// Czech Republic.
	//
	CountryCodeTypeCZ CountryCodeType = "CZ"

	//
	// Denmark.
	//
	CountryCodeTypeDK CountryCodeType = "DK"

	//
	// Djibouti.
	//
	CountryCodeTypeDJ CountryCodeType = "DJ"

	//
	// Dominica.
	//
	CountryCodeTypeDM CountryCodeType = "DM"

	//
	// Dominican Republic.
	//
	CountryCodeTypeDO CountryCodeType = "DO"

	//
	// No longer in use.
	//
	CountryCodeTypeTP CountryCodeType = "TP"

	//
	// Ecuador.
	//
	CountryCodeTypeEC CountryCodeType = "EC"

	//
	// Egypt.
	//
	CountryCodeTypeEG CountryCodeType = "EG"

	//
	// El Salvador.
	//
	CountryCodeTypeSV CountryCodeType = "SV"

	//
	// Equatorial Guinea.
	//
	CountryCodeTypeGQ CountryCodeType = "GQ"

	//
	// Eritrea.
	//
	CountryCodeTypeER CountryCodeType = "ER"

	//
	// Estonia.
	//
	CountryCodeTypeEE CountryCodeType = "EE"

	//
	// Ethiopia.
	//
	CountryCodeTypeET CountryCodeType = "ET"

	//
	// Falkland Islands (Malvinas).
	//
	CountryCodeTypeFK CountryCodeType = "FK"

	//
	// Faroe Islands.
	//
	CountryCodeTypeFO CountryCodeType = "FO"

	//
	// Fiji.
	//
	CountryCodeTypeFJ CountryCodeType = "FJ"

	//
	// Finland.
	//
	CountryCodeTypeFI CountryCodeType = "FI"

	//
	// France.
	//
	CountryCodeTypeFR CountryCodeType = "FR"

	//
	// French Guiana.
	//
	CountryCodeTypeGF CountryCodeType = "GF"

	//
	// French Polynesia. Includes Tahiti.
	//
	CountryCodeTypePF CountryCodeType = "PF"

	//
	// French Southern Territories.
	//
	CountryCodeTypeTF CountryCodeType = "TF"

	//
	// Gabon.
	//
	CountryCodeTypeGA CountryCodeType = "GA"

	//
	// Gambia.
	//
	CountryCodeTypeGM CountryCodeType = "GM"

	//
	// Georgia.
	//
	CountryCodeTypeGE CountryCodeType = "GE"

	//
	// Germany.
	//
	CountryCodeTypeDE CountryCodeType = "DE"

	//
	// Ghana.
	//
	CountryCodeTypeGH CountryCodeType = "GH"

	//
	// Gibraltar.
	//
	CountryCodeTypeGI CountryCodeType = "GI"

	//
	// Greece.
	//
	CountryCodeTypeGR CountryCodeType = "GR"

	//
	// Greenland.
	//
	CountryCodeTypeGL CountryCodeType = "GL"

	//
	// Grenada.
	//
	CountryCodeTypeGD CountryCodeType = "GD"

	//
	// Guadeloupe.
	//
	CountryCodeTypeGP CountryCodeType = "GP"

	//
	// Guam.
	//
	CountryCodeTypeGU CountryCodeType = "GU"

	//
	// Guatemala.
	//
	CountryCodeTypeGT CountryCodeType = "GT"

	//
	// Guinea.
	//
	CountryCodeTypeGN CountryCodeType = "GN"

	//
	// Guinea-Bissau.
	//
	CountryCodeTypeGW CountryCodeType = "GW"

	//
	// Guyana.
	//
	CountryCodeTypeGY CountryCodeType = "GY"

	//
	// Haiti.
	//
	CountryCodeTypeHT CountryCodeType = "HT"

	//
	// Heard Island and McDonald Islands.
	//
	CountryCodeTypeHM CountryCodeType = "HM"

	//
	// Holy See (Vatican City state).
	//
	CountryCodeTypeVA CountryCodeType = "VA"

	//
	// Honduras.
	//
	CountryCodeTypeHN CountryCodeType = "HN"

	//
	// Hong Kong.
	//
	CountryCodeTypeHK CountryCodeType = "HK"

	//
	// Hungary.
	//
	CountryCodeTypeHU CountryCodeType = "HU"

	//
	// Iceland.
	//
	CountryCodeTypeIS CountryCodeType = "IS"

	//
	// India.
	//
	CountryCodeTypeIN CountryCodeType = "IN"

	//
	// Indonesia.
	//
	CountryCodeTypeID CountryCodeType = "ID"

	//
	// Islamic Republic of Iran.
	//
	CountryCodeTypeIR CountryCodeType = "IR"

	//
	// Iraq.
	//
	CountryCodeTypeIQ CountryCodeType = "IQ"

	//
	// Ireland.
	//
	CountryCodeTypeIE CountryCodeType = "IE"

	//
	// Israel.
	//
	CountryCodeTypeIL CountryCodeType = "IL"

	//
	// Italy.
	//
	CountryCodeTypeIT CountryCodeType = "IT"

	//
	// Jamaica.
	//
	CountryCodeTypeJM CountryCodeType = "JM"

	//
	// Japan.
	//
	CountryCodeTypeJP CountryCodeType = "JP"

	//
	// Jordan.
	//
	CountryCodeTypeJO CountryCodeType = "JO"

	//
	// Kazakhstan.
	//
	CountryCodeTypeKZ CountryCodeType = "KZ"

	//
	// Kenya.
	//
	CountryCodeTypeKE CountryCodeType = "KE"

	//
	// Kiribati.
	//
	CountryCodeTypeKI CountryCodeType = "KI"

	//
	// Democratic People's Republic of Korea.
	//
	CountryCodeTypeKP CountryCodeType = "KP"

	//
	// Republic of Korea.
	//
	CountryCodeTypeKR CountryCodeType = "KR"

	//
	// Kuwait.
	//
	CountryCodeTypeKW CountryCodeType = "KW"

	//
	// Kyrgyzstan.
	//
	CountryCodeTypeKG CountryCodeType = "KG"

	//
	// Lao People's Democratic Republic.
	//
	CountryCodeTypeLA CountryCodeType = "LA"

	//
	// Latvia.
	//
	CountryCodeTypeLV CountryCodeType = "LV"

	//
	// Lebanon.
	//
	CountryCodeTypeLB CountryCodeType = "LB"

	//
	// Lesotho.
	//
	CountryCodeTypeLS CountryCodeType = "LS"

	//
	// Liberia.
	//
	CountryCodeTypeLR CountryCodeType = "LR"

	//
	// Libyan Arab Jamahiriya.
	//
	CountryCodeTypeLY CountryCodeType = "LY"

	//
	// Liechtenstein.
	//
	CountryCodeTypeLI CountryCodeType = "LI"

	//
	// Lithuania.
	//
	CountryCodeTypeLT CountryCodeType = "LT"

	//
	// Luxembourg.
	//
	CountryCodeTypeLU CountryCodeType = "LU"

	//
	// Macao.
	//
	CountryCodeTypeMO CountryCodeType = "MO"

	//
	// The Former Yugoslav Republic of Macedonia.
	//
	CountryCodeTypeMK CountryCodeType = "MK"

	//
	// Madagascar.
	//
	CountryCodeTypeMG CountryCodeType = "MG"

	//
	// Malawi.
	//
	CountryCodeTypeMW CountryCodeType = "MW"

	//
	// Malaysia.
	//
	CountryCodeTypeMY CountryCodeType = "MY"

	//
	// Maldives.
	//
	CountryCodeTypeMV CountryCodeType = "MV"

	//
	// Mali.
	//
	CountryCodeTypeML CountryCodeType = "ML"

	//
	// Malta.
	//
	CountryCodeTypeMT CountryCodeType = "MT"

	//
	// Marshall Islands.
	//
	CountryCodeTypeMH CountryCodeType = "MH"

	//
	// Martinique.
	//
	CountryCodeTypeMQ CountryCodeType = "MQ"

	//
	// Mauritania.
	//
	CountryCodeTypeMR CountryCodeType = "MR"

	//
	// Mauritius.
	//
	CountryCodeTypeMU CountryCodeType = "MU"

	//
	// Mayotte.
	//
	CountryCodeTypeYT CountryCodeType = "YT"

	//
	// Mexico.
	//
	CountryCodeTypeMX CountryCodeType = "MX"

	//
	// Federated States of Micronesia.
	//
	CountryCodeTypeFM CountryCodeType = "FM"

	//
	// Republic of Moldova.
	//
	CountryCodeTypeMD CountryCodeType = "MD"

	//
	// Monaco.
	//
	CountryCodeTypeMC CountryCodeType = "MC"

	//
	// Mongolia.
	//
	CountryCodeTypeMN CountryCodeType = "MN"

	//
	// Montserrat.
	//
	CountryCodeTypeMS CountryCodeType = "MS"

	//
	// Morocco.
	//
	CountryCodeTypeMA CountryCodeType = "MA"

	//
	// Mozambique.
	//
	CountryCodeTypeMZ CountryCodeType = "MZ"

	//
	// Myanmar.
	//
	CountryCodeTypeMM CountryCodeType = "MM"

	//
	// Namibia.
	//
	CountryCodeTypeNA CountryCodeType = "NA"

	//
	// Nauru.
	//
	CountryCodeTypeNR CountryCodeType = "NR"

	//
	// Nepal.
	//
	CountryCodeTypeNP CountryCodeType = "NP"

	//
	// Netherlands.
	//
	CountryCodeTypeNL CountryCodeType = "NL"

	//
	// Netherlands Antilles.
	//
	CountryCodeTypeAN CountryCodeType = "AN"

	//
	// New Caledonia.
	//
	CountryCodeTypeNC CountryCodeType = "NC"

	//
	// New Zealand.
	//
	CountryCodeTypeNZ CountryCodeType = "NZ"

	//
	// Nicaragua.
	//
	CountryCodeTypeNI CountryCodeType = "NI"

	//
	// Niger.
	//
	CountryCodeTypeNE CountryCodeType = "NE"

	//
	// Nigeria.
	//
	CountryCodeTypeNG CountryCodeType = "NG"

	//
	// Niue.
	//
	CountryCodeTypeNU CountryCodeType = "NU"

	//
	// Norfolk Island.
	//
	CountryCodeTypeNF CountryCodeType = "NF"

	//
	// Northern Mariana Islands.
	//
	CountryCodeTypeMP CountryCodeType = "MP"

	//
	// Norway.
	//
	CountryCodeTypeNO CountryCodeType = "NO"

	//
	// Oman.
	//
	CountryCodeTypeOM CountryCodeType = "OM"

	//
	// Pakistan.
	//
	CountryCodeTypePK CountryCodeType = "PK"

	//
	// Palau.
	//
	CountryCodeTypePW CountryCodeType = "PW"

	//
	// Palestinian territory, Occupied.
	//
	CountryCodeTypePS CountryCodeType = "PS"

	//
	// Panama.
	//
	CountryCodeTypePA CountryCodeType = "PA"

	//
	// Papua New Guinea.
	//
	CountryCodeTypePG CountryCodeType = "PG"

	//
	// Paraguay.
	//
	CountryCodeTypePY CountryCodeType = "PY"

	//
	// Peru.
	//
	CountryCodeTypePE CountryCodeType = "PE"

	//
	// Philippines.
	//
	CountryCodeTypePH CountryCodeType = "PH"

	//
	// Pitcairn.
	//
	CountryCodeTypePN CountryCodeType = "PN"

	//
	// Poland.
	//
	CountryCodeTypePL CountryCodeType = "PL"

	//
	// Portugal.
	//
	CountryCodeTypePT CountryCodeType = "PT"

	//
	// Puerto Rico.
	//
	CountryCodeTypePR CountryCodeType = "PR"

	//
	// Qatar.
	//
	CountryCodeTypeQA CountryCodeType = "QA"

	//
	// Reunion.
	//
	CountryCodeTypeRE CountryCodeType = "RE"

	//
	// Romania.
	//
	CountryCodeTypeRO CountryCodeType = "RO"

	//
	// Russian Federation.
	//
	CountryCodeTypeRU CountryCodeType = "RU"

	//
	// Rwanda.
	//
	CountryCodeTypeRW CountryCodeType = "RW"

	//
	// Saint Helena.
	//
	CountryCodeTypeSH CountryCodeType = "SH"

	//
	// Saint Kitts and Nevis.
	//
	CountryCodeTypeKN CountryCodeType = "KN"

	//
	// Saint Lucia.
	//
	CountryCodeTypeLC CountryCodeType = "LC"

	//
	// Saint Pierre and Miquelon.
	//
	CountryCodeTypePM CountryCodeType = "PM"

	//
	// Saint Vincent and the Grenadines.
	//
	CountryCodeTypeVC CountryCodeType = "VC"

	//
	// Samoa.
	//
	CountryCodeTypeWS CountryCodeType = "WS"

	//
	// San Marino.
	//
	CountryCodeTypeSM CountryCodeType = "SM"

	//
	// Sao Tome and Principe.
	//
	CountryCodeTypeST CountryCodeType = "ST"

	//
	// Saudi Arabia.
	//
	CountryCodeTypeSA CountryCodeType = "SA"

	//
	// Senegal.
	//
	CountryCodeTypeSN CountryCodeType = "SN"

	//
	// Seychelles.
	//
	CountryCodeTypeSC CountryCodeType = "SC"

	//
	// Sierra Leone.
	//
	CountryCodeTypeSL CountryCodeType = "SL"

	//
	// Singapore.
	//
	CountryCodeTypeSG CountryCodeType = "SG"

	//
	// Slovakia.
	//
	CountryCodeTypeSK CountryCodeType = "SK"

	//
	// Slovenia.
	//
	CountryCodeTypeSI CountryCodeType = "SI"

	//
	// Solomon Islands.
	//
	CountryCodeTypeSB CountryCodeType = "SB"

	//
	// Somalia.
	//
	CountryCodeTypeSO CountryCodeType = "SO"

	//
	// South Africa.
	//
	CountryCodeTypeZA CountryCodeType = "ZA"

	//
	// South Georgia and the South Sandwich Islands.
	//
	CountryCodeTypeGS CountryCodeType = "GS"

	//
	// Spain.
	//
	CountryCodeTypeES CountryCodeType = "ES"

	//
	// Sri Lanka.
	//
	CountryCodeTypeLK CountryCodeType = "LK"

	//
	// Sudan.
	//
	CountryCodeTypeSD CountryCodeType = "SD"

	//
	// Suriname.
	//
	CountryCodeTypeSR CountryCodeType = "SR"

	//
	// Svalbard and Jan Mayen.
	//
	CountryCodeTypeSJ CountryCodeType = "SJ"

	//
	// Swaziland.
	//
	CountryCodeTypeSZ CountryCodeType = "SZ"

	//
	// Sweden.
	//
	CountryCodeTypeSE CountryCodeType = "SE"

	//
	// Switzerland.
	//
	CountryCodeTypeCH CountryCodeType = "CH"

	//
	// Syrian Arab Republic.
	//
	CountryCodeTypeSY CountryCodeType = "SY"

	//
	// Taiwan, Province of China.
	//
	CountryCodeTypeTW CountryCodeType = "TW"

	//
	// Tajikistan.
	//
	CountryCodeTypeTJ CountryCodeType = "TJ"

	//
	// Tanzania, United Republic of.
	//
	CountryCodeTypeTZ CountryCodeType = "TZ"

	//
	// Thailand.
	//
	CountryCodeTypeTH CountryCodeType = "TH"

	//
	// Togo.
	//
	CountryCodeTypeTG CountryCodeType = "TG"

	//
	// Tokelau.
	//
	CountryCodeTypeTK CountryCodeType = "TK"

	//
	// Tonga.
	//
	CountryCodeTypeTO CountryCodeType = "TO"

	//
	// Trinidad and Tobago.
	//
	CountryCodeTypeTT CountryCodeType = "TT"

	//
	// Tunisia.
	//
	CountryCodeTypeTN CountryCodeType = "TN"

	//
	// Turkey.
	//
	CountryCodeTypeTR CountryCodeType = "TR"

	//
	// Turkmenistan.
	//
	CountryCodeTypeTM CountryCodeType = "TM"

	//
	// Turks and Caicos Islands.
	//
	CountryCodeTypeTC CountryCodeType = "TC"

	//
	// Tuvalu.
	//
	CountryCodeTypeTV CountryCodeType = "TV"

	//
	// Uganda.
	//
	CountryCodeTypeUG CountryCodeType = "UG"

	//
	// Ukraine.
	//
	CountryCodeTypeUA CountryCodeType = "UA"

	//
	// United Arab Emirates.
	//
	CountryCodeTypeAE CountryCodeType = "AE"

	//
	// United Kingdom.
	//
	CountryCodeTypeGB CountryCodeType = "GB"

	//
	// United States.
	//
	CountryCodeTypeUS CountryCodeType = "US"

	//
	// NOTE: United States Minor Outlying Islands was
	// defined in the eBay list previously
	// but is no longer a viable option. This country
	// will remain on eBay country list for backward
	// compatibility. Use 'US' instead.
	//
	CountryCodeTypeUM CountryCodeType = "UM"

	//
	// Uruguay.
	//
	CountryCodeTypeUY CountryCodeType = "UY"

	//
	// Uzbekistan.
	//
	CountryCodeTypeUZ CountryCodeType = "UZ"

	//
	// Vanuatu.
	//
	CountryCodeTypeVU CountryCodeType = "VU"

	//
	// Venezuela.
	//
	CountryCodeTypeVE CountryCodeType = "VE"

	//
	// Vietnam.
	//
	CountryCodeTypeVN CountryCodeType = "VN"

	//
	// Virgin Islands, British.
	//
	CountryCodeTypeVG CountryCodeType = "VG"

	//
	// Virgin Islands, U.S.
	//
	CountryCodeTypeVI CountryCodeType = "VI"

	//
	// Wallis and Futuna.
	//
	CountryCodeTypeWF CountryCodeType = "WF"

	//
	// Western Sahara.
	//
	CountryCodeTypeEH CountryCodeType = "EH"

	//
	// Yemen.
	//
	CountryCodeTypeYE CountryCodeType = "YE"

	//
	// No longer in use. See RS for Serbia and ME for Montenegro.
	//
	CountryCodeTypeYU CountryCodeType = "YU"

	//
	// Zambia.
	//
	CountryCodeTypeZM CountryCodeType = "ZM"

	//
	// Zimbabwe.
	//
	CountryCodeTypeZW CountryCodeType = "ZW"

	//
	// NOTE: APO/FPO was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country code list for backward
	// compatibility.
	//
	CountryCodeTypeAA CountryCodeType = "AA"

	//
	// NOTE	: Guernsey was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQM CountryCodeType = "QM"

	//
	// NOTE: Jan Mayen was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQN CountryCodeType = "QN"

	//
	// NOTE: Jersey was defined in eBay list previously
	// but they are not defined in ISO 3166. This country
	// will remain on eBay country list for backward
	// compatibility.
	//
	CountryCodeTypeQO CountryCodeType = "QO"

	CountryCodeTypeQP CountryCodeType = "QP"

	//
	// Jersey
	//
	CountryCodeTypeJE CountryCodeType = "JE"

	//
	// Guernsey
	//
	CountryCodeTypeGG CountryCodeType = "GG"

	//
	// Unknown country
	//
	CountryCodeTypeZZ CountryCodeType = "ZZ"

	//
	// Serbia
	//
	CountryCodeTypeRS CountryCodeType = "RS"

	//
	// Montenegro.
	//
	CountryCodeTypeME CountryCodeType = "ME"

	//
	// (out) Reserved for internal or future use
	//
	CountryCodeTypeCustomCode CountryCodeType = "CustomCode"
)

//
// This enumeration type contains a list of standard 3-digit ISO 4217 currency codes for
// currency used in countries around the world.
// <br/><br/>
// When adding an item through <b>AddItem</b> (or related API call), the
// <b>Item.Currency</b> value will default to the currency used on the listing
// site. Otherwise, only the following currency types may be specified through an
// Add/Revise/Relist call, since these are the currencies of all the countries where
// the Trading API is supported:
// <ul>
// <li>USD - US Dollar</li>
// <li>CAD - Canadian Dollar</li>
// <li>GBP - British Pound</li>
// <li>AUD - Australian Dollar</li>
// <li>EUR - Euro</li>
// <li>CHF - Swiss Franc</li>
// <li>CNY - Chinese Renminbi</li>
// <li>HKD - Hong Kong Dollar</li>
// <li>PHP - Philippines Peso</li>
// <li>PLN - Polish Zloty</li>
// <li>SEK - Sweden Krona</li>
// <li>SGD - Singapore Dollar</li>
// <li>TWD - Taiwanese Dollar</li>
// <li>MYR - Malaysian Ringgit</li>
// </ul>
// <br/>
// Other currency codes in this enumerated type may be returned in
// <b>GetItem</b> (and other calls) based on the buyer's and/or seller's
// registration country. However, only the values listed above will be returned if you
// call <b>GeteBayDetails</b> with <b>DetailName</b> set to
// <b>CurrencyDetails</b>.
// http://www.xe.com/iso4217.htm
//
type CurrencyCodeType string

const (

	//
	// This value is a 3-digit code for an Afghan afghani, a currency used in Afghanistan.
	//
	CurrencyCodeTypeAFA CurrencyCodeType = "AFA"

	//
	// This value is a 3-digit code for an Albanian lek, a currency used in Albania.
	//
	CurrencyCodeTypeALL CurrencyCodeType = "ALL"

	//
	// This value is a 3-digit code for an Algerian dinar, a currency used in Algeria.
	//
	CurrencyCodeTypeDZD CurrencyCodeType = "DZD"

	//
	// This value is a 3-digit code for an Andorran peseta, a currency used in Andorra.
	//
	CurrencyCodeTypeADP CurrencyCodeType = "ADP"

	//
	// This value is a 3-digit code for an Angolan kwanza, a currency used in Angola.
	//
	CurrencyCodeTypeAOA CurrencyCodeType = "AOA"

	//
	// This value is a 3-digit code for an Argentine peso, a currency used in Argentina.
	//
	CurrencyCodeTypeARS CurrencyCodeType = "ARS"

	//
	// This value is a 3-digit code for an Armenian dram, a currency used in Armenia.
	//
	CurrencyCodeTypeAMD CurrencyCodeType = "AMD"

	//
	// This value is a 3-digit code for an Aruban florin, a currency used in Aruba.
	//
	CurrencyCodeTypeAWG CurrencyCodeType = "AWG"

	//
	// This value is a 3-digit code for an Azerbaijani manat, a currency used in Azerbaijan.
	//
	CurrencyCodeTypeAZM CurrencyCodeType = "AZM"

	//
	// This value is a 3-digit code for a Bahamian dollar, a currency used in the Bahamas.
	//
	CurrencyCodeTypeBSD CurrencyCodeType = "BSD"

	//
	// This value is a 3-digit code for a Bahraini dinar, a currency used in the Bahrain.
	//
	CurrencyCodeTypeBHD CurrencyCodeType = "BHD"

	//
	// This value is a 3-digit code for a Bangladeshi taka, a currency used in Bangladesh.
	//
	CurrencyCodeTypeBDT CurrencyCodeType = "BDT"

	//
	// This value is a 3-digit code for a Barbados dollar, a currency used in Barbados.
	//
	CurrencyCodeTypeBBD CurrencyCodeType = "BBD"

	//
	// This value is a 3-digit code for a Belarusian ruble, a currency used in Belarus.
	//
	CurrencyCodeTypeBYR CurrencyCodeType = "BYR"

	//
	// This value is a 3-digit code for a Belize dollar, a currency used in Belize.
	//
	CurrencyCodeTypeBZD CurrencyCodeType = "BZD"

	//
	// This value is a 3-digit code for a Bermudian dollar, a currency used in Bermuda.
	//
	CurrencyCodeTypeBMD CurrencyCodeType = "BMD"

	//
	// This value is a 3-digit code for a Bhutanese ngultrum, a currency used in Bhutan.
	//
	CurrencyCodeTypeBTN CurrencyCodeType = "BTN"

	//
	// This value is a 3-digit code for an Indian rupee, a currency used in India.
	//
	CurrencyCodeTypeINR CurrencyCodeType = "INR"

	//
	// This value is a 3-digit code for a Bolivian Mvdol, a currency used in Bolivia.
	//
	CurrencyCodeTypeBOV CurrencyCodeType = "BOV"

	//
	// This value is a 3-digit code for a Boliviano, a currency used in Bolivia.
	//
	CurrencyCodeTypeBOB CurrencyCodeType = "BOB"

	//
	// This value is a 3-digit code for a Bosnia and Herzegovina convertible mark, a
	// currency used in Bosnia and Herzegovina.
	//
	CurrencyCodeTypeBAM CurrencyCodeType = "BAM"

	//
	// This value is a 3-digit code for a Botswana pula, a currency used in Botswana.
	//
	CurrencyCodeTypeBWP CurrencyCodeType = "BWP"

	//
	// This value is a 3-digit code for a Brazilian real, a currency used in Brazil.
	//
	CurrencyCodeTypeBRL CurrencyCodeType = "BRL"

	//
	// This value is a 3-digit code for a Brunei dollar, a currency used in Brunei and
	// Singapore.
	//
	CurrencyCodeTypeBND CurrencyCodeType = "BND"

	//
	// This value is a 3-digit code for the old Bulgarian lev, a currency previously used
	// in Bulgaria. This currency has been replaced by the new Bulgarian lev (3-digit
	// code: BGN).
	//
	CurrencyCodeTypeBGL CurrencyCodeType = "BGL"

	//
	// This value is a 3-digit code for a Bulgarian lev, a currency used in Bulgaria. This
	// currency replaced the old Bulgarian lev (3-digit code: BGL).
	//
	CurrencyCodeTypeBGN CurrencyCodeType = "BGN"

	//
	// This value is a 3-digit code for a Burundian franc, a currency used in Burundi.
	//
	CurrencyCodeTypeBIF CurrencyCodeType = "BIF"

	//
	// This value is a 3-digit code for a Cambodian riel, a currency used in Cambodia.
	//
	CurrencyCodeTypeKHR CurrencyCodeType = "KHR"

	//
	// This value is a 3-digit code for a Canadian dollar, a currency used in Canada. This is
	// the value that should be passed in the <b>Item.Currency</b> field by the
	// seller when listing an item on the eBay Canada site (Site ID 2).
	//
	CurrencyCodeTypeCAD CurrencyCodeType = "CAD"

	//
	// This value is a 3-digit code for a Cape Verde escudo, a currency used in Cape
	// Verde.
	//
	CurrencyCodeTypeCVE CurrencyCodeType = "CVE"

	//
	// This value is a 3-digit code for a Cayman Islands dollar, a currency used in
	// the Cayman Islands.
	//
	CurrencyCodeTypeKYD CurrencyCodeType = "KYD"

	//
	// This value is a 3-digit code for a Central African CFA franc, a currency used in
	// Cameroon, Central African Republic, Republic of the Congo, Chad, Equatorial
	// Guinea, and Gabon.
	//
	CurrencyCodeTypeXAF CurrencyCodeType = "XAF"

	//
	// This value is a 3-digit code for a Unidad de Fomento, a currency used in Chile.
	//
	CurrencyCodeTypeCLF CurrencyCodeType = "CLF"

	//
	// This value is a 3-digit code for a Chilean peso, a currency used in Chile.
	//
	CurrencyCodeTypeCLP CurrencyCodeType = "CLP"

	//
	// This value is a 3-digit code for a Chinese yuan (also known as the renminbi), a
	// currency used in China.
	//
	CurrencyCodeTypeCNY CurrencyCodeType = "CNY"

	//
	// This value is a 3-digit code for a Columbian peso, a currency used in Columbia.
	//
	CurrencyCodeTypeCOP CurrencyCodeType = "COP"

	//
	// This value is a 3-digit code for a Comoro franc, a currency used in Comoros.
	//
	CurrencyCodeTypeKMF CurrencyCodeType = "KMF"

	//
	// This value is a 3-digit code for a Congolese franc, a currency used in Democratic
	// Republic of Congo.
	//
	CurrencyCodeTypeCDF CurrencyCodeType = "CDF"

	//
	// This value is a 3-digit code for a Costa Rican colon, a currency used in Costa
	// Rica.
	//
	CurrencyCodeTypeCRC CurrencyCodeType = "CRC"

	//
	// This value is a 3-digit code for a Croatian kuna, a currency used in Croatia.
	//
	CurrencyCodeTypeHRK CurrencyCodeType = "HRK"

	//
	// This value is a 3-digit code for a Cuban peso, a currency used in Cuba.
	//
	CurrencyCodeTypeCUP CurrencyCodeType = "CUP"

	//
	// This value is a 3-digit code for a Cypriot pound, a currency previously used in
	// Cyprus. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeCYP CurrencyCodeType = "CYP"

	//
	// This value is a 3-digit code for a Czech koruna, a currency used in the Czech
	// Republic.
	//
	CurrencyCodeTypeCZK CurrencyCodeType = "CZK"

	//
	// This value is a 3-digit code for a Danish krone, a currency used in Denmark,
	// the Faroe Islands, and Greenland.
	//
	CurrencyCodeTypeDKK CurrencyCodeType = "DKK"

	//
	// This value is a 3-digit code for a Djiboutian franc, a currency used in Djibouti.
	//
	CurrencyCodeTypeDJF CurrencyCodeType = "DJF"

	//
	// This value is a 3-digit code for a Dominican peso, a currency used in the Dominican
	// Republic.
	//
	CurrencyCodeTypeDOP CurrencyCodeType = "DOP"

	//
	// This value is a 3-digit code for a Portuguese Timorese escudo, a currency
	// previously used in Portuguese Timor.
	//
	CurrencyCodeTypeTPE CurrencyCodeType = "TPE"

	//
	// This value is an old 3-digit code for a Cape Verde escudo, a currency used in
	// Cape Verde. The 'ECV' code has been replaced by 'CVE'.
	//
	CurrencyCodeTypeECV CurrencyCodeType = "ECV"

	//
	// This value is a 3-digit code for an Ecuadorian sucre, a currency previously used in
	// Ecuador. This currency has been replaced by the US Dollar (3-digit code: USD).
	//
	CurrencyCodeTypeECS CurrencyCodeType = "ECS"

	//
	// This value is a 3-digit code for an Egyptian pound, a currency used in Egypt.
	//
	CurrencyCodeTypeEGP CurrencyCodeType = "EGP"

	//
	// This value is a 3-digit code for a Salvadoran colon, a currency previously used in
	// El Salvador. This currency has been replaced by the US Dollar (3-digit code: USD).
	//
	CurrencyCodeTypeSVC CurrencyCodeType = "SVC"

	//
	// This value is a 3-digit code for an Eritrean nakfa, a currency used in Eritrea.
	//
	CurrencyCodeTypeERN CurrencyCodeType = "ERN"

	//
	// This value is a 3-digit code for an Estonian kroon, a currency previously used in
	// Estonia. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeEEK CurrencyCodeType = "EEK"

	//
	// This value is a 3-digit code for an Ethiopian birr, a currency used in Ethiopia.
	//
	CurrencyCodeTypeETB CurrencyCodeType = "ETB"

	//
	// This value is a 3-digit code for a Falkland Islands pound, a currency used in
	// the Falkland Islands.
	//
	CurrencyCodeTypeFKP CurrencyCodeType = "FKP"

	//
	// This value is a 3-digit code for a Fiji dollar, a currency used in Fiji.
	//
	CurrencyCodeTypeFJD CurrencyCodeType = "FJD"

	//
	// This value is a 3-digit code for a Gambian dalasi, a currency used in Gambia.
	//
	CurrencyCodeTypeGMD CurrencyCodeType = "GMD"

	//
	// This value is a 3-digit code for a Georgian Iari, a currency used in the country of
	// Georgia.
	//
	CurrencyCodeTypeGEL CurrencyCodeType = "GEL"

	//
	// This value is an old 3-digit code for a Ghanaian cedi, a currency used in Ghana.
	// The 'GHC' code has been replaced by 'GHS'.
	//
	CurrencyCodeTypeGHC CurrencyCodeType = "GHC"

	//
	// This value is a 3-digit code for a Gibraltar pound, a currency used in Gibraltar.
	//
	CurrencyCodeTypeGIP CurrencyCodeType = "GIP"

	//
	// This value is a 3-digit code for a Guatemalan quetzal, a currency used in
	// Guatemala.
	//
	CurrencyCodeTypeGTQ CurrencyCodeType = "GTQ"

	//
	// This value is a 3-digit code for a Guinean franc, a currency used in Guinea.
	//
	CurrencyCodeTypeGNF CurrencyCodeType = "GNF"

	//
	// This value is a 3-digit code for a Guinea-Bissau peso, a currency previously used
	// in Guinea-Bissau. This currency has been replaced by the West African CFA franc
	// (3-digit code: XOF).
	//
	CurrencyCodeTypeGWP CurrencyCodeType = "GWP"

	//
	// This value is a 3-digit code for a Guyanese dollar, a currency used in Guyana.
	//
	CurrencyCodeTypeGYD CurrencyCodeType = "GYD"

	//
	// This value is a 3-digit code for a Haitian gourde, a currency used in Haiti.
	//
	CurrencyCodeTypeHTG CurrencyCodeType = "HTG"

	//
	// This value is a 3-digit code for a Honduran lempira, a currency used in Honduras.
	//
	CurrencyCodeTypeHNL CurrencyCodeType = "HNL"

	//
	// This value is a 3-digit code for a Hong Kong dollar, a currency used in Hong Kong
	// and Macau. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay Hong Kong site (Site ID 201).
	//
	CurrencyCodeTypeHKD CurrencyCodeType = "HKD"

	//
	// This value is a 3-digit code for a Hungarian forint, a currency used in Hungary.
	//
	CurrencyCodeTypeHUF CurrencyCodeType = "HUF"

	//
	// This value is a 3-digit code for an Icelandic krona, a currency used in Iceland.
	//
	CurrencyCodeTypeISK CurrencyCodeType = "ISK"

	//
	// This value is a 3-digit code for an Indonesian rupiah, a currency used in
	// Indonesia.
	//
	CurrencyCodeTypeIDR CurrencyCodeType = "IDR"

	//
	// This value is a 3-digit code for an Iranian rial, a currency used in Iran.
	//
	CurrencyCodeTypeIRR CurrencyCodeType = "IRR"

	//
	// This value is a 3-digit code for an Iraqi dinar, a currency used in Iraq.
	//
	CurrencyCodeTypeIQD CurrencyCodeType = "IQD"

	//
	// This value is a 3-digit code for an Israeli new shekel, a currency used in
	// Israel and in the Palestinian territories.
	//
	CurrencyCodeTypeILS CurrencyCodeType = "ILS"

	//
	// This value is a 3-digit code for a Jamaican dollar, a currency used in Jamaica.
	//
	CurrencyCodeTypeJMD CurrencyCodeType = "JMD"

	//
	// This value is a 3-digit code for a Japanese yen, a currency used in Japan.
	//
	CurrencyCodeTypeJPY CurrencyCodeType = "JPY"

	//
	// This value is a 3-digit code for a Jordanian dinar, a currency used in Jordan.
	//
	CurrencyCodeTypeJOD CurrencyCodeType = "JOD"

	//
	// This value is a 3-digit code for a Kazahhstani tenge, a currency used in
	// Kazakhstan.
	//
	CurrencyCodeTypeKZT CurrencyCodeType = "KZT"

	//
	// This value is a 3-digit code for a Kenyan shilling, a currency used in Kenya.
	//
	CurrencyCodeTypeKES CurrencyCodeType = "KES"

	//
	// This value is a 3-digit code for an Australia dollar, a currency used in Australia.
	// This is the value that should be passed in the <b>Item.Currency</b>
	// field by the seller when listing an item on the eBay Australia site
	// (Site ID 15).
	//
	CurrencyCodeTypeAUD CurrencyCodeType = "AUD"

	//
	// This value is a 3-digit code for a North Korean won, a currency used in North
	// Korea.
	//
	CurrencyCodeTypeKPW CurrencyCodeType = "KPW"

	//
	// This value is a 3-digit code for a South Korean won, a currency used in South
	// Korea.
	//
	CurrencyCodeTypeKRW CurrencyCodeType = "KRW"

	//
	// This value is a 3-digit code for a Kuwaiti dollar, a currency used in Kuwait.
	//
	CurrencyCodeTypeKWD CurrencyCodeType = "KWD"

	//
	// This value is a 3-digit code for a Kyrgzstani som, a currency used in Kyrgystan.
	//
	CurrencyCodeTypeKGS CurrencyCodeType = "KGS"

	//
	// This value is a 3-digit code for a Lao kip, a currency used in Laos.
	//
	CurrencyCodeTypeLAK CurrencyCodeType = "LAK"

	//
	// This value is a 3-digit code for a Latvian lats, a currency used in Latvia.
	//
	CurrencyCodeTypeLVL CurrencyCodeType = "LVL"

	//
	// This value is a 3-digit code for a Lebanese pound, a currency used in Lebanon.
	//
	CurrencyCodeTypeLBP CurrencyCodeType = "LBP"

	//
	// This value is a 3-digit code for a Lesotho loti, a currency used in Lesotho.
	//
	CurrencyCodeTypeLSL CurrencyCodeType = "LSL"

	//
	// This value is a 3-digit code for a Liberian dollar, a currency used in Liberia.
	//
	CurrencyCodeTypeLRD CurrencyCodeType = "LRD"

	//
	// This value is a 3-digit code for a Libyan dinar, a currency used in Libya.
	//
	CurrencyCodeTypeLYD CurrencyCodeType = "LYD"

	//
	// Swiss Franc.
	// For eBay, you can only specify this currency for listings you submit to the
	// Switzerland site (site ID 193).
	//
	CurrencyCodeTypeCHF CurrencyCodeType = "CHF"

	//
	// This value is a 3-digit code for a Lithuanian litas, a currency used in Lithuania.
	//
	CurrencyCodeTypeLTL CurrencyCodeType = "LTL"

	//
	// This value is a 3-digit code for a Macanese pataca, a currency used in Macao.
	//
	CurrencyCodeTypeMOP CurrencyCodeType = "MOP"

	//
	// This value is a 3-digit code for a Macedonian denar, a currency used in Macedonia.
	//
	CurrencyCodeTypeMKD CurrencyCodeType = "MKD"

	//
	// This value is a 3-digit code for a Malagay franc, a currency previously used
	// in Madagascar. This currency has been replaced by the Malagasy ariary
	// (3-digit code: MGA).
	//
	CurrencyCodeTypeMGF CurrencyCodeType = "MGF"

	//
	// This value is a 3-digit code for a Malawian kwacha, a currency used in Malawi.
	//
	CurrencyCodeTypeMWK CurrencyCodeType = "MWK"

	//
	// This value is a 3-digit code for a Malaysian Ringgit, a currency used in Malaysia.
	// This is the value that should be passed in the <b>Item.Currency</b>
	// field by the seller when listing an item on the eBay Malaysia site
	// (Site ID 207).
	//
	CurrencyCodeTypeMYR CurrencyCodeType = "MYR"

	//
	// This value is a 3-digit code for a Maldivian rufiyaaa, a currency used in the
	// Maldives.
	//
	CurrencyCodeTypeMVR CurrencyCodeType = "MVR"

	//
	// This value is a 3-digit code for a Maltese lira, a currency previously used in
	// Malta. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeMTL CurrencyCodeType = "MTL"

	//
	// This value is a 3-digit code for a EURO, a currency used in Andorra, Austria,
	// Belgium, Cyprus, Estonia, Finland, France, Germany, Greece, Ireland, Italy, Kosovo,
	// Luxembourg, Malta, Monaco, Montenegro, Netherlands, Portugal, San Marino, Slovakia,
	// Slovenia, Spain, and Vatican City. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// following sites: Austria (Site ID 16), Belgium_French (Site ID 23),
	// France (Site ID 71), Germany (Site ID 77), Italy (Site ID 101), Belgium_Dutch (Site
	// ID 123), Netherlands (Site ID 146), Spain (Site ID 186), and Ireland (Site ID 205).
	//
	CurrencyCodeTypeEUR CurrencyCodeType = "EUR"

	//
	// This value is a 3-digit code for a Mauritanian ouguiya, a currency used in
	// Mauritania.
	//
	CurrencyCodeTypeMRO CurrencyCodeType = "MRO"

	//
	// This value is a 3-digit code for a Mauritian rupee, a currency used in
	// Mauritius.
	//
	CurrencyCodeTypeMUR CurrencyCodeType = "MUR"

	//
	// This value is a 3-digit code for a Mexican peso, a currency used in
	// Mexico.
	//
	CurrencyCodeTypeMXN CurrencyCodeType = "MXN"

	//
	// This value is a 3-digit funds code for a Mexican peso, a currency used in
	// Mexico.
	//
	CurrencyCodeTypeMXV CurrencyCodeType = "MXV"

	//
	// This value is a 3-digit code for a Moldovan leu, a currency used in
	// Moldova.
	//
	CurrencyCodeTypeMDL CurrencyCodeType = "MDL"

	//
	// This value is a 3-digit code for a Mongolian tugrik, a currency used in
	// Mongolia.
	//
	CurrencyCodeTypeMNT CurrencyCodeType = "MNT"

	//
	// This value is a 3-digit code for an Easy Caribbean dollar, a currency used in
	// Anguilla, Antigua and Barbuda, Dominica, Grenada, Montserrat, Saint Kitts and
	// Nevis, Saint Lucia, and Saint Vincent and the Grenadines.
	//
	CurrencyCodeTypeXCD CurrencyCodeType = "XCD"

	//
	// This value is an old 3-digit code for a Mozambican metical, a currency used in
	// Mozambique. The 'MZM' code has been replaced by 'MZN'.
	//
	CurrencyCodeTypeMZM CurrencyCodeType = "MZM"

	//
	// This value is a 3-digit code for a Myanma kyat, a currency used in
	// Myanmar.
	//
	CurrencyCodeTypeMMK CurrencyCodeType = "MMK"

	//
	// This value is a 3-digit code for a South African rand, a currency used in
	// South Africa.
	//
	CurrencyCodeTypeZAR CurrencyCodeType = "ZAR"

	//
	// This value is a 3-digit code for a Namibian dollar, a currency used in
	// Namibia.
	//
	CurrencyCodeTypeNAD CurrencyCodeType = "NAD"

	//
	// This value is a 3-digit code for a Nepalese rupee, a currency used in Nepal.
	//
	CurrencyCodeTypeNPR CurrencyCodeType = "NPR"

	//
	// This value is a 3-digit code for a Netherlands Antillean guilder, a currency used
	// in Curacao and Sint Maarten.
	//
	CurrencyCodeTypeANG CurrencyCodeType = "ANG"

	//
	// This value is a 3-digit code for a CFP franc, a currency used in French Polynesia,
	// New Caledonia, and Wallis and Futuna.
	//
	CurrencyCodeTypeXPF CurrencyCodeType = "XPF"

	//
	// This value is a 3-digit code for a New Zealand dollar, a currency used in the
	// Cook Islands, New Zealand, Niue, Pitcairn, and Tokelau, Ross Dependency.
	//
	CurrencyCodeTypeNZD CurrencyCodeType = "NZD"

	//
	// This value is a 3-digit code for a Nicaraguan cordoba, a currency used in
	// Nicaragua.
	//
	CurrencyCodeTypeNIO CurrencyCodeType = "NIO"

	//
	// This value is a 3-digit code for a Nigerian naira, a currency used in Nigeria.
	//
	CurrencyCodeTypeNGN CurrencyCodeType = "NGN"

	//
	// This value is a 3-digit code for a Norwegian kron, a currency used in Norway,
	// Svalbard, Jan Mayen, Bouvet Island, Queen Maud Land, and Peter I Island.
	//
	CurrencyCodeTypeNOK CurrencyCodeType = "NOK"

	//
	// This value is a 3-digit code for an Omani rial, a currency used in Oman.
	//
	CurrencyCodeTypeOMR CurrencyCodeType = "OMR"

	//
	// This value is a 3-digit code for a Pakistani rupee, a currency used in Pakistan.
	//
	CurrencyCodeTypePKR CurrencyCodeType = "PKR"

	//
	// This value is a 3-digit code for a Panamanian balboa, a currency used in Panama.
	//
	CurrencyCodeTypePAB CurrencyCodeType = "PAB"

	//
	// This value is a 3-digit code for a Papua New Guinea kina, a currency used in
	// Papua New Guinea.
	//
	CurrencyCodeTypePGK CurrencyCodeType = "PGK"

	//
	// This value is a 3-digit code for a Paraguayan guarani, a currency used in
	// Paraguay.
	//
	CurrencyCodeTypePYG CurrencyCodeType = "PYG"

	//
	// This value is a 3-digit code for a Peruvian nuevo sol, a currency used in Peru.
	//
	CurrencyCodeTypePEN CurrencyCodeType = "PEN"

	//
	// This value is a 3-digit code for a Philippine peso, a currency used in the
	// Philippines. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay Philippines site (Site ID 211).
	//
	CurrencyCodeTypePHP CurrencyCodeType = "PHP"

	//
	// This value is a 3-digit code for a Polish zloty, a currency used in Poland. This
	// is the value that should be passed in the <b>Item.Currency</b> field
	// by the seller when listing an item on the eBay Poland site (Site ID 212).
	//
	CurrencyCodeTypePLN CurrencyCodeType = "PLN"

	//
	// This value is a 3-digit code for a US dollar, a currency used in the United
	// States, America Samoa, Barbados, Bermuda, British Indian Ocean Territory, British
	// Virgin Islands, Caribbean Netherlands, Ecuador, El Salvador, Guam, Haiti, Marshall
	// Islands, Federated States of Micronesia, Northern Mariana Islands, Palau, Panama,
	// Puerto Rico, Timor-Leste, Turks and Caicos Islands, US Virgin Islands, and
	// Zimbabwe. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay US or US eBay Motors site (Site ID 0).
	//
	CurrencyCodeTypeUSD CurrencyCodeType = "USD"

	//
	// This value is a 3-digit code for a Qatari riyal, a currency used in Qatar.
	//
	CurrencyCodeTypeQAR CurrencyCodeType = "QAR"

	//
	// This value is a 3-digit code for the old Romanian leu, a currency previously used
	// in Romania. This currency has been replaced by the Romanian new leu (3-digit code:
	// RON).
	//
	CurrencyCodeTypeROL CurrencyCodeType = "ROL"

	//
	// This value is a 3-digit code for a Russian rouble, a currency used in Russia,
	// Abkhazia, and South Ossetia. This value replace the old 3-digit code for the
	// Russian rouble, 'RUR'.
	//
	CurrencyCodeTypeRUB CurrencyCodeType = "RUB"

	//
	// This value is the old 3-digit code for a Russian rouble, a currency used in
	// Russia. This value was replaced by the new 3-digit code for the Russian rouble,
	// 'RUB'.
	//
	CurrencyCodeTypeRUR CurrencyCodeType = "RUR"

	//
	// This value is a 3-digit code for a Rwandan franc, a currency used in Rwanda.
	//
	CurrencyCodeTypeRWF CurrencyCodeType = "RWF"

	//
	// This value is a 3-digit code for a Saint Helena pound, a currency used in Saint
	// Helena.
	//
	CurrencyCodeTypeSHP CurrencyCodeType = "SHP"

	//
	// This value is a 3-digit code for a Samoan tala, a currency used in Samoa.
	//
	CurrencyCodeTypeWST CurrencyCodeType = "WST"

	//
	// This value is a 3-digit code for a Sao Tome and Principe dobra, a currency used in
	// Sao Tome and Principe.
	//
	CurrencyCodeTypeSTD CurrencyCodeType = "STD"

	//
	// This value is a 3-digit code for a Saudi riyal, a currency used in Saudi Arabia.
	//
	CurrencyCodeTypeSAR CurrencyCodeType = "SAR"

	//
	// This value is a 3-digit code for a Seychelles rupee, a currency used in Seychelles.
	//
	CurrencyCodeTypeSCR CurrencyCodeType = "SCR"

	//
	// This value is a 3-digit code for a Sierra Leonean leone, a currency used in Sierra
	// Leone.
	//
	CurrencyCodeTypeSLL CurrencyCodeType = "SLL"

	//
	// This value is a 3-digit code for a Singapore dollar, a currency used in Singapore
	// and Brunei. This is the value that should be passed in the
	// <b>Item.Currency</b> field by the seller when listing an item on the
	// eBay Singapore site (Site ID 216).
	//
	CurrencyCodeTypeSGD CurrencyCodeType = "SGD"

	//
	// This value is a 3-digit code for a Slovak koruna, a currency previously used in
	// Slovakia. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeSKK CurrencyCodeType = "SKK"

	//
	// This value is a 3-digit code for a Slovenian tolar, a currency previously used in
	// Slovenia. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeSIT CurrencyCodeType = "SIT"

	//
	// This value is a 3-digit code for a Solomon Islands dollar, a currency used in
	// the Solomon Islands.
	//
	CurrencyCodeTypeSBD CurrencyCodeType = "SBD"

	//
	// This value is a 3-digit code for a Somali shilling, a currency used in Somalia.
	//
	CurrencyCodeTypeSOS CurrencyCodeType = "SOS"

	//
	// This value is a 3-digit code for a Sri Lankan rupee, a currency used in Sri Lanka.
	//
	CurrencyCodeTypeLKR CurrencyCodeType = "LKR"

	//
	// This value is the 3-digit code for a Sudanese dinar, a currency previously used in
	// Sudan. The Sudanese dinar was replaced by the Sudanese pound, which has a 3-digit
	// code of 'SDG'.
	//
	CurrencyCodeTypeSDD CurrencyCodeType = "SDD"

	//
	// This value is the 3-digit code for a Suriname guilder, a currency previously used
	// in Suriname. The Surinam guilder was replaced by the Surinamese dollar, which has
	// a 3-digit code of 'SRD'.
	//
	CurrencyCodeTypeSRG CurrencyCodeType = "SRG"

	//
	// This value is a 3-digit code for a Swazi lilangeni, a currency used in Swaziland.
	//
	CurrencyCodeTypeSZL CurrencyCodeType = "SZL"

	//
	// This value is a 3-digit code for a Swedish krona, a currency used in Swedn. This
	// is the value that should be passed in the <b>Item.Currency</b> field
	// by the seller when listing an item on the eBay Sweden site (Site ID 218).
	//
	CurrencyCodeTypeSEK CurrencyCodeType = "SEK"

	//
	// This value is a 3-digit code for a Syrian pound, a currency used in Syria.
	//
	CurrencyCodeTypeSYP CurrencyCodeType = "SYP"

	//
	// This value is a 3-digit code for the New Taiwan dollar, a currency used in Taiwan.
	//
	CurrencyCodeTypeTWD CurrencyCodeType = "TWD"

	//
	// This value is a 3-digit code for a Tajikistani somoni, a currency used in
	// Tajikistan.
	//
	CurrencyCodeTypeTJS CurrencyCodeType = "TJS"

	//
	// This value is a 3-digit code for a Tanzanian shilling, a currency used in
	// Tanzania.
	//
	CurrencyCodeTypeTZS CurrencyCodeType = "TZS"

	//
	// This value is a 3-digit code for a Thai baht, a currency used in Thailand.
	//
	CurrencyCodeTypeTHB CurrencyCodeType = "THB"

	//
	// This value is a 3-digit code for a West African CFA franc, a currency used in
	// Benin, Burkina Faso, Cote d'Ivoire, Guinea-Bissau, Mali, Niger, Senegal, and
	// Togo.
	//
	CurrencyCodeTypeXOF CurrencyCodeType = "XOF"

	//
	// This value is a 3-digit code for a Tongan pa'anga, a currency used in Tonga.
	//
	CurrencyCodeTypeTOP CurrencyCodeType = "TOP"

	//
	// This value is a 3-digit code for a Trinidad and Tobago dollar, a currency used in
	// Trinidad and Tobago.
	//
	CurrencyCodeTypeTTD CurrencyCodeType = "TTD"

	//
	// This value is a 3-digit code for a Tunisian dinar, a currency used in Tunisia.
	//
	CurrencyCodeTypeTND CurrencyCodeType = "TND"

	//
	// This value is the old 3-digit code for a Turkish lira, a currency used in Turkey
	// and Northern Cyprus. This value was replaced by the new 3-digit code for the
	// Turkish lira, 'TRY'.
	//
	CurrencyCodeTypeTRL CurrencyCodeType = "TRL"

	//
	// This value is the old 3-digit code for a Turkmenistani manat, a currency used in
	// Turkmenistan. This value was replaced by the new 3-digit code for
	// the Turkmenistani manat, 'TMT'.
	//
	CurrencyCodeTypeTMM CurrencyCodeType = "TMM"

	//
	// This value is a 3-digit code for a Ugandan shilling, a currency used in Uganda.
	//
	CurrencyCodeTypeUGX CurrencyCodeType = "UGX"

	//
	// This value is a 3-digit code for a Ukrainian hryvnia, a currency used in the
	// Ukraine.
	//
	CurrencyCodeTypeUAH CurrencyCodeType = "UAH"

	//
	// This value is a 3-digit code for an United Arab Emirates dirham, a currency used
	// in the United Arab Emirates.
	//
	CurrencyCodeTypeAED CurrencyCodeType = "AED"

	//
	// This value is a 3-digit code for a Pound sterling, a currency used in the United
	// Kingdom and British Crown dependencies. This is the value that should be passed in
	// the <b>Item.Currency</b> field by the seller when listing an item on
	// the eBay UK site (Site ID 3).
	//
	CurrencyCodeTypeGBP CurrencyCodeType = "GBP"

	//
	// This value is a 3-digit code for a same-day transaction involving US dollars.
	//
	CurrencyCodeTypeUSS CurrencyCodeType = "USS"

	//
	// This value is a 3-digit code for a next-day transaction involving US dollars.
	//
	CurrencyCodeTypeUSN CurrencyCodeType = "USN"

	//
	// This value is a 3-digit code for a Uruguayan peso, a currency used in Uruguay.
	//
	CurrencyCodeTypeUYU CurrencyCodeType = "UYU"

	//
	// This value is a 3-digit code for a Uzbekistan som, a currency used in the
	// Uzbekistan.
	//
	CurrencyCodeTypeUZS CurrencyCodeType = "UZS"

	//
	// This value is a 3-digit code for a Vanuatu vatu, a currency used in Vanuatu.
	//
	CurrencyCodeTypeVUV CurrencyCodeType = "VUV"

	//
	// This value is a 3-digit code for a Venezuelan bolivar, a currency previously used
	// in Venezuela. The Venezuela bolivar was replaced by the Venezuelan bolivar
	// fuerte, which has a 3-digit code of 'VEF'.
	//
	CurrencyCodeTypeVEB CurrencyCodeType = "VEB"

	//
	// This value is a 3-digit code for a Vietnamese dong, a currency used in Vietnam.
	//
	CurrencyCodeTypeVND CurrencyCodeType = "VND"

	//
	// This value is a 3-digit code for a Moroccan dirham, a currency used in Morocco.
	//
	CurrencyCodeTypeMAD CurrencyCodeType = "MAD"

	//
	// This value is a 3-digit code for a Yemeni rial, a currency used in Yemen.
	//
	CurrencyCodeTypeYER CurrencyCodeType = "YER"

	//
	// This value is a 3-digit code for a Yugoslav dinar, a currency previously used in
	// Yugoslavia. The Yugoslav dinar was replaced by the Serbian dinar, which has a 3-
	// digit code of 'RSD'.
	//
	CurrencyCodeTypeYUM CurrencyCodeType = "YUM"

	//
	// This value is the old 3-digit code for a Zambian kwacha, a currency used in
	// Zambia. The 'ZMK' code has been replaced by 'ZMW'.
	//
	CurrencyCodeTypeZMK CurrencyCodeType = "ZMK"

	//
	// This value is the old 3-digit code for a Zimbabwean dollar, a currency previously
	// used in Zimbabwe. The US dollar replaced the Zimbabwean dollar as the official
	// currency in Zimbabwe.
	//
	CurrencyCodeTypeZWD CurrencyCodeType = "ZWD"

	//
	// This value is a 3-digit code for an Austrian schilling, a currency previously used
	// in Austria. This currency has been replaced by the Euro (3-digit code: EUR).
	//
	CurrencyCodeTypeATS CurrencyCodeType = "ATS"

	//
	// Reserved for internal or future use.
	//
	CurrencyCodeTypeCustomCode CurrencyCodeType = "CustomCode"
)

//
// This type is deprecated.
//
type DateSpecifierCodeType string

const (

	//
	// This field is deprecated.
	//
	DateSpecifierCodeTypeM DateSpecifierCodeType = "M"

	//
	// This field is deprecated.
	//
	DateSpecifierCodeTypeD DateSpecifierCodeType = "D"

	//
	// This field is deprecated.
	//
	DateSpecifierCodeTypeY DateSpecifierCodeType = "Y"

	//
	// This field is deprecated.
	//
	DateSpecifierCodeTypeCustomCode DateSpecifierCodeType = "CustomCode"
)

//
// Enumerated type that consists of all days of the week.
//
type DayOfWeekCodeType string

const (

	//
	// This enumeration value indicates the day of the week is Sunday.
	//
	DayOfWeekCodeTypeSunday DayOfWeekCodeType = "Sunday"

	//
	// This enumeration value indicates the day of the week is Monday.
	//
	DayOfWeekCodeTypeMonday DayOfWeekCodeType = "Monday"

	//
	// This enumeration value indicates the day of the week is Tuesday.
	//
	DayOfWeekCodeTypeTuesday DayOfWeekCodeType = "Tuesday"

	//
	// This enumeration value indicates the day of the week is Wednesday.
	//
	DayOfWeekCodeTypeWednesday DayOfWeekCodeType = "Wednesday"

	//
	// This enumeration value indicates the day of the week is Thursday.
	//
	DayOfWeekCodeTypeThursday DayOfWeekCodeType = "Thursday"

	//
	// This enumeration value indicates the day of the week is Friday.
	//
	DayOfWeekCodeTypeFriday DayOfWeekCodeType = "Friday"

	//
	// This enumeration value indicates the day of the week is Saturday.
	//
	DayOfWeekCodeTypeSaturday DayOfWeekCodeType = "Saturday"

	//
	// Reserved for internal or future use.
	//
	DayOfWeekCodeTypeCustomCode DayOfWeekCodeType = "CustomCode"
)

//
// Specifies the range of days the seller can be contacted.
//
type DaysCodeType string

const (

	//
	// Seller does not want to be contacted. Contact hours will not be supported for
	// any days. If contact hours are specified, they will be ignored.
	//
	DaysCodeTypeNone DaysCodeType = "None"

	//
	// Seller can be contacted any day during the specified contact hours.
	//
	DaysCodeTypeEveryDay DaysCodeType = "EveryDay"

	//
	// Seller can be contacted Monday through Friday during the specified
	// contact hours.
	//
	DaysCodeTypeWeekdays DaysCodeType = "Weekdays"

	//
	// Seller can  be contacted Saturday or Sunday during the specified
	// contact hours.
	//
	DaysCodeTypeWeekends DaysCodeType = "Weekends"

	//
	// (out) Reserved for internal or future use.
	//
	DaysCodeTypeCustomCode DaysCodeType = "CustomCode"
)

//
// This enumeration type lists the possible delivery methods of a digital gift card. Currently, the only supported delivery method is by email.
//
type DeliveryMethodCodeType string

const (

	//
	// This value indicates that the link to download the digital gift card will be delivered to the recipient by email.
	//
	DeliveryMethodCodeTypeEmail DeliveryMethodCodeType = "Email"

	//
	// This value is reserved for internal or future use.
	//
	DeliveryMethodCodeTypeCustomCode DeliveryMethodCodeType = "CustomCode"
)

//
// This enumeration type lists the possible delivery status values of a digital gift card. Currently, the only supported delivery status value is 'Notified', which indicates that the link to download the digital gift card has been sent to the recipient by email.
//
type DeliveryStatusEmailCodeType string

const (

	//
	// This value indicates that the link to download the digital gift card has been sent to the recipient by email.
	//
	DeliveryStatusEmailCodeTypeNotified DeliveryStatusEmailCodeType = "Notified"

	//
	// This value is reserved for internal or future use.
	//
	DeliveryStatusEmailCodeTypeCustomCode DeliveryStatusEmailCodeType = "CustomCode"
)

//
// For vehicles listed through the US eBay Motors site, DepositType
// indicates how the buyer should pay the deposit amount. It is
// used in conjunction with a buyer payment method (BuyerPaymentMethodCodeType).
//
type DepositTypeCodeType string

const (

	//
	// (out) No deposit needed.
	//
	DepositTypeCodeTypeNone DepositTypeCodeType = "None"

	//
	// (out) Pay the deposit using PayPal, and then
	// use any of the other specified payment methods to pay the balance.
	//
	DepositTypeCodeTypeOtherMethod DepositTypeCodeType = "OtherMethod"

	//
	// (out) No longer used.
	//
	DepositTypeCodeTypeFastDeposit DepositTypeCodeType = "FastDeposit"

	//
	// (out) Reserved for internal or future use
	//
	DepositTypeCodeTypeCustomCode DepositTypeCodeType = "CustomCode"
)

//
// Enumerated type containing the list of values that can be used when revising the
// item description of an active listing through the Revise API calls.
//
type DescriptionReviseModeCodeType string

const (

	//
	// Use this value in the <b>Item.DescriptionReviseMode</b> field if you want
	// to completely replace (overwrite) the item description of the active listing.
	//
	DescriptionReviseModeCodeTypeReplace DescriptionReviseModeCodeType = "Replace"

	//
	// Use this value in the <b>Item.DescriptionReviseMode</b> field if you want
	// to prepend text to the item description of the active listing.
	//
	DescriptionReviseModeCodeTypePrepend DescriptionReviseModeCodeType = "Prepend"

	//
	// Use this value in the <b>Item.DescriptionReviseMode</b> field if you want
	// to append text to the item description of the active listing.
	//
	DescriptionReviseModeCodeTypeAppend DescriptionReviseModeCodeType = "Append"

	//
	// This value is reserved for internal or future use.
	//
	DescriptionReviseModeCodeTypeCustomCode DescriptionReviseModeCodeType = "CustomCode"
)

//
// Enumerated type that defines Listing Designer template types.
//
type DescriptionTemplateCodeType string

const (

	//
	// This value indicates that the Listing Designer template is a layout template that controls how pictures and description text are
	// positioned on the View Item page.
	//
	DescriptionTemplateCodeTypeLayout DescriptionTemplateCodeType = "Layout"

	//
	// This value indicates that the Listing Designer template is a theme template that determines which eBay-provided theme (e.g. Valentine's Day) is to be applied for presenting pictures and description text.
	//
	DescriptionTemplateCodeTypeTheme DescriptionTemplateCodeType = "Theme"

	//
	// Reserved for future use.
	//
	DescriptionTemplateCodeTypeCustomCode DescriptionTemplateCodeType = "CustomCode"
)

//
// This enumerated type contains all data filters that can be used to control which metadata is returned in the response of a <b>GeteBayDetails</b> call. The user can use as little or as many values as desired. If none of these data filters are used, all applicable metadata will be returned.
//
type DetailNameCodeType string

const (

	//
	// This enumeration value is specified to list the country codes and associated name of each country. The two-digit country codes can be used when a seller is creating a 'ship-to' and/or an 'exclude ship-to' location list.
	//
	DetailNameCodeTypeCountryDetails DetailNameCodeType = "CountryDetails"

	//
	// This enumeration value is specified to list the primary currencies of each country. The three-digit currency codes are used when a seller is expressing a dollar value in API calls. For example, the <b>currencyID</b> attribute value in the <b>StartPrice</b> field of an <b>AddItem</b> call.
	//
	DetailNameCodeTypeCurrencyDetails DetailNameCodeType = "CurrencyDetails"

	//
	// This enumeration value is specified to view all payment methods that are accepted on the specified eBay site. Note that the accepted payment methods can vary by category and/or by listing format, so the seller may also want to make a <b>GetCategoryFeatures</b> call, passing in the listing category ID, and setting the <b>FeatureID</b> value to <code>PaymentMethods</code>.
	//
	DetailNameCodeTypePaymentOptionDetails DetailNameCodeType = "PaymentOptionDetails"

	//
	// This enumeration value is specified to list the local regions within the specified country.
	//
	DetailNameCodeTypeRegionDetails DetailNameCodeType = "RegionDetails"

	//
	// This enumeration value is specified to list the geographical regions and country codes.
	//
	DetailNameCodeTypeShippingLocationDetails DetailNameCodeType = "ShippingLocationDetails"

	//
	// This enumeration value is specified to list the shipping service options available on the specified eBay site to ship domestic and international orders. The returned data on each available shipping service will include the shipping carrier name and service, the actual shipping service enumeration value that will be used in an <b>AddItem</b> call, the expected shipping time range, the package types that can be used for that shipping service, and whether the shipping service is for domestic or international shipping. In addition to this information, the seller will have to look for a value of <code>true</code> in the <b>ValidForSellingFlow</b> field. If the value in this field is <code>false</code>, it indicates that the shipping service is no longer available for shipping.
	//
	DetailNameCodeTypeShippingServiceDetails DetailNameCodeType = "ShippingServiceDetails"

	//
	// This enumeration value is specified to list the eBay sites that are supported in Trading API calls. The <b>SiteID</b> values that are returned for each country are specified as an HTTP header if the seller wants to see site metadata returned for that particular country.
	//
	DetailNameCodeTypeSiteDetails DetailNameCodeType = "SiteDetails"

	//
	// This enumeration value is specified to list the different tax jurisdictions (such as states or provinces) within the specified eBay site. The two-digit <b>JurisdictionID</b> codes that are returned are used when a seller is setting/configuring sales tax rates in a Sales Tax Table or when creating a listing. For example, the <b>SalesTax.SalesTaxState</b> field of an <b>AddItem</b> call.
	//
	DetailNameCodeTypeTaxJurisdiction DetailNameCodeType = "TaxJurisdiction"

	//
	// This enumeration value is specified to list the different eBay URLs associated with the specified eBay site.
	//
	DetailNameCodeTypeURLDetails DetailNameCodeType = "URLDetails"

	//
	// This enumeration value is specified to list the names of the different global time zones. The returned information includes the number of hours that each time zone is either ahead or behind UTC time, and it also indicates if the time zone participates in 'Daylight Savings'.
	//
	DetailNameCodeTypeTimeZoneDetails DetailNameCodeType = "TimeZoneDetails"

	//
	// This enumeration value is specified to list all international regions and individual countries.
	//
	DetailNameCodeTypeRegionOfOriginDetails DetailNameCodeType = "RegionOfOriginDetails"

	//
	// This enumeration value is specified to list the handling time values (in number of business days) that the seller can set on a listing. The seller must ship an order line item within this time or risk getting a seller defect. For the US, the supported handling times are 0-3 days. Some listing categories supported 'extended handling' time, and if this is the case, the handling times will be longer, and the <b>ExtendedHandling</b> field will be returned as <code>true</code>.
	//
	DetailNameCodeTypeDispatchTimeMaxDetails DetailNameCodeType = "DispatchTimeMaxDetails"

	//
	// This enumeration value is specified to list the maximum thresholds for Item Specifics in listings. These thresholds include the maximum number of item specifics that can be used for an item (or item variation), as well as the maximum number of characters that can be used for Item Specific names and values.
	//
	DetailNameCodeTypeItemSpecificDetails DetailNameCodeType = "ItemSpecificDetails"

	//
	// This enumeration value is no longer applicable, and should not be used.
	//
	//
	DetailNameCodeTypeUnitOfMeasurementDetails DetailNameCodeType = "UnitOfMeasurementDetails"

	//
	// This enumeration value is specified to list the shipping package types that are supported by the specified eBay site. A seller can also just use the <b>ShippingServiceDetails</b> filter, and the supported shipping package types for each shipping service option will be returned.
	//
	DetailNameCodeTypeShippingPackageDetails DetailNameCodeType = "ShippingPackageDetails"

	//
	// Reserved for future use.
	//
	DetailNameCodeTypeCustomCode DetailNameCodeType = "CustomCode"

	//
	// This enumeration value is specified to list the shipping carriers supported by the specified eBay site for domestic and international shipping.
	//
	DetailNameCodeTypeShippingCarrierDetails DetailNameCodeType = "ShippingCarrierDetails"

	//
	// This enumeration value is specified to list the minimum starting prices for each applicable listing format for the specified eBay site. The price input into the <b>StartPrice</b> field of an <b>AddItem</b> call must be at or above this minimum threshold value or the listing will be blocked.
	//
	DetailNameCodeTypeListingStartPriceDetails DetailNameCodeType = "ListingStartPriceDetails"

	//
	// This enumeration value is specified to list the return policy values that can be passed in through the <b>ReturnPolicy</b> container of an Add/Revise/Relist API call. These values include the return period, the 'Money back' options that the seller can make available to the buyers, and who pays for return shipping (Buyer or Seller).
	// <br><br>
	// <span class="tablenote"><b>Note:</b> Starting in September 2018, the <b>GetCategoryFeatures</b> call will start returning category-level metadata for both domestic and international return policies, and developers should make plans to use that call for this metadata, as return policy metadata will eventually get deprecated from <b>GeteBayDetails</b> call.</span>
	//
	DetailNameCodeTypeReturnPolicyDetails DetailNameCodeType = "ReturnPolicyDetails"

	//
	// This value is specified to list the Buyer Requirement values that can be passed in through the <b>BuyerRequirementDetails</b> container of an Add/Revise/Relist API call.
	//
	DetailNameCodeTypeBuyerRequirementDetails DetailNameCodeType = "BuyerRequirementDetails"

	//
	// This value is specified to list the listing features/upgrades that are enabled or disabled for the specified site.
	//
	DetailNameCodeTypeListingFeatureDetails DetailNameCodeType = "ListingFeatureDetails"

	//
	// This value is specified to list the maximum thresholds when using multi-variation listings.
	//
	DetailNameCodeTypeVariationDetails DetailNameCodeType = "VariationDetails"

	//
	// This value is specified to list the geographical regions and individual countries that can be passed in to the <b>ShippingDetails.ExcludeShipToLocation</b> field in an Add/Revise/Relist API call. Multiple <b>ShippingDetails.ExcludeShipToLocation</b> can be used, and any region or country value that is passed in to one of these fields will exclude that region or country as a "ship-to" location.
	//
	DetailNameCodeTypeExcludeShippingLocationDetails DetailNameCodeType = "ExcludeShippingLocationDetails"

	//
	// This value is specified to list whether or not a recoupment policy is enforced on either the listing site or the seller's registration site.
	//
	DetailNameCodeTypeRecoupmentPolicyDetails DetailNameCodeType = "RecoupmentPolicyDetails"

	//
	// This value is specified to list the shipping service categories (Standard, Expedited, Economy) supported for the site.
	//
	DetailNameCodeTypeShippingCategoryDetails DetailNameCodeType = "ShippingCategoryDetails"

	//
	// Specify this value to get the appropriate text to insert into a product
	// identifier field (EAN, ISBN, UPC, MPN/Brand) if eBay is prompting/expecting
	// one of these fields in the call request, but the identifiers do not
	// exist/apply for the product. The
	// <b>ProductDetails.ProductIdentifierUnavailableText</b> field that
	// is returned in the response will contain the actual text that should be passed
	// into the relevant product identification fields when creating a listing.
	//
	DetailNameCodeTypeProductDetails DetailNameCodeType = "ProductDetails"
)

//
// This enumerated type is a list of the systems used to deliver buyer/seller notifications.
//
type DeviceTypeCodeType string

const (

	//
	// This enumeration value indicates that buyer/seller notifications will be delivered through the Platform Notifications system.
	//
	DeviceTypeCodeTypePlatform DeviceTypeCodeType = "Platform"

	//
	// This enumeration value indicates that buyer/seller notifications will be delivered through the SMS system to a wireless device.
	//
	DeviceTypeCodeTypeSMS DeviceTypeCodeType = "SMS"

	//
	// This enumeration value indicates that buyer/seller notifications will be delivered through the Client Alerts system.
	//
	DeviceTypeCodeTypeClientAlerts DeviceTypeCodeType = "ClientAlerts"

	//
	// Reserved for internal or future use.
	//
	DeviceTypeCodeTypeCustomCode DeviceTypeCodeType = "CustomCode"
)

//
// This enumeration type lists the possible states of a purchased digital delivery card.
//
type DigitalStatusCodeType string

const (

	//
	// This enumeration value indicates that the digital gift card has yet to be activated by the buyer or recipient of gift card.
	//
	DigitalStatusCodeTypeInactive DigitalStatusCodeType = "Inactive"

	//
	// This enumeration value indicates that the digital gift card has been activated by the buyer or recipient of gift card.
	//
	DigitalStatusCodeTypeActivated DigitalStatusCodeType = "Activated"

	//
	// This enumeration value indicates that the digital gift card has been downloaded by the buyer or recipient of gift card. The next step would be to activate the gift card.
	//
	DigitalStatusCodeTypeDownloaded DigitalStatusCodeType = "Downloaded"

	//
	// This enumeration value indicates that the digital gift card has been deactivated.
	//
	DigitalStatusCodeTypeDeactivated DigitalStatusCodeType = "Deactivated"

	//
	// This value is reserved for internal or future use.
	//
	DigitalStatusCodeTypeCustomCode DigitalStatusCodeType = "CustomCode"
)

//
// This enumerated type is used to specify if the discount used for a promotional sale is a price (dollar value) discount or a percentage (of sale price) discount.
//
type DiscountCodeType string

const (

	//
	// The enumeration value indicates that the discount being offered is a percentage discount, which means a percentage of the total price to the buyer is being discounted. So, if the total price for an order line item is $100, the <b>DiscountType</b> is <code>Percentage</code>, and the <b>DiscountValue</b> is <code>15.0</code> (percent), the buyer will pay just $85.00 for the order line item.
	//
	DiscountCodeTypePercentage DiscountCodeType = "Percentage"

	//
	// The enumeration value indicates that the discount being offered is a price discount, which means the total price to the buyer is being reduced by this amount. So, if the total price for an order line item is $100, the <b>DiscountType</b> is <code>Price</code>, and the <b>DiscountValue</b> is <code>20.0</code> (dollars), the buyer will pay just $80.00 for the order line item.
	//
	DiscountCodeTypePrice DiscountCodeType = "Price"

	//
	// This value is reserved for future use.
	//
	DiscountCodeTypeCustomCode DiscountCodeType = "CustomCode"
)

//
// This enumerated type is used by the seller to set the shipping discount type. Some of these shipping discount types apply to flat-rate shipping and others apply to calculated shipping.
//
type DiscountNameCodeType string

const (

	//
	// The cost to ship each item beyond the first item (where the item with the
	// highest shipping cost is selected by eBay as the first item).
	// Let's say the buyer purchases three items, each set to ship for $8, and
	// the seller set EachAdditionalAmount to $6.  The cost to ship three items would
	// normally be $24, but since the seller specified $6, the total shipping
	// cost would be $8 + $6 + $6, or $20.
	// For flat shipping discount profile only.
	//
	DiscountNameCodeTypeEachAdditionalAmount DiscountNameCodeType = "EachAdditionalAmount"

	//
	// The amount by which to reduce the cost to ship each item beyond the
	// first item (where the item with the highest shipping cost is selected by eBay
	// as the first item).
	// Let's say the buyer purchases three items, each set to ship for $8, and
	// the seller set EachAdditionalAmountOff to $2.  The cost to ship three items would
	// normally be $24, but since the seller specified $2, the total shipping
	// cost would be $24 - (two additional items x $2), or $20.
	// For flat shipping discount profile only.
	//
	DiscountNameCodeTypeEachAdditionalAmountOff DiscountNameCodeType = "EachAdditionalAmountOff"

	//
	// The percentage by which to reduce the cost to ship each item beyond
	// the first item (where the item with the highest shipping cost is selected by
	// eBay as the first item).
	// Let's say the buyer purchases three items, each set to ship for $8, and
	// the seller set EachAdditionalPercentOff to 0.25.  The cost to ship three items would
	// normally be $24, but since the seller specified 0.25 ($2 out of 8), the total shipping
	// cost would be $24 - (two additional items x $2), or $20.
	// For flat rate shipping discount profile only.
	//
	DiscountNameCodeTypeEachAdditionalPercentOff DiscountNameCodeType = "EachAdditionalPercentOff"

	//
	// Shipping cost is the total of what it would cost to ship each item individually.
	// This is simply a way to define how shipping is to be calculated--there is no
	// discount for the buyer with this selection.
	// For calculated shipping discount profile only.
	//
	DiscountNameCodeTypeIndividualItemWeight DiscountNameCodeType = "IndividualItemWeight"

	//
	// Shipping cost is based on the total weight of all individual items.
	// This is simply a way to define how shipping is to be calculated--there is no
	// discount for the buyer with this selection.
	// For calculated shipping discount profile only.
	//
	DiscountNameCodeTypeCombinedItemWeight DiscountNameCodeType = "CombinedItemWeight"

	//
	// The amount of weight to subtract for each item beyond the first item
	// before shipping costs are calculated. For example, there may be less packing
	// material when the items are combined in one box than if they were shipped
	// individually. Let's say the buyer purchases three items, each 10 oz. in weight, and
	// the seller set WeightOff to 2 oz.  The combined weight would be 30 oz., but since
	// the seller specified 2 oz. off, the total weight for shipping cost calculation
	// would be 30 oz. - (two additional items x 2 oz.), or 26 oz.
	// For calculated shipping discount profile only.
	//
	DiscountNameCodeTypeWeightOff DiscountNameCodeType = "WeightOff"

	//
	// Shipping cost X applies if the total cost of items purchased is Y.
	// For promotional discount only.
	//
	DiscountNameCodeTypeShippingCostXForAmountY DiscountNameCodeType = "ShippingCostXForAmountY"

	//
	// Shipping cost X applies if the total number of items purchased is N.
	// For promotional discount only.
	//
	DiscountNameCodeTypeShippingCostXForItemCountN DiscountNameCodeType = "ShippingCostXForItemCountN"

	//
	// The shipping cost will not exceed this.
	// For promotional discount only.
	//
	DiscountNameCodeTypeMaximumShippingCostPerOrder DiscountNameCodeType = "MaximumShippingCostPerOrder"

	//
	// Reserved for internal or future use.
	//
	DiscountNameCodeTypeCustomCode DiscountNameCodeType = "CustomCode"
)

//
// This enumerated type is used in the response of Add/Revise/Relist item calls to indicate if eBay has applied a Special offer or Promotional discount to the order line item.
//
type DiscountReasonCodeType string

const (

	//
	// An offer that applies to a limited number of listings during the offering
	// period. Example:  "There is no insertion fee for up to 5 auctions when
	// listing between 12/1 and 12/10."
	//
	DiscountReasonCodeTypeSpecialOffer DiscountReasonCodeType = "SpecialOffer"

	//
	// An offer that applies to an unlimited number of listings during the offering
	// period. Example:  "Get subtitle for $0.10 in Tech category when listing between
	// 12/25 and 12/28.  No limit to the number of items listed during this period."
	//
	DiscountReasonCodeTypePromotion DiscountReasonCodeType = "Promotion"

	//
	// Reserved for future use
	//
	DiscountReasonCodeTypeCustomCode DiscountReasonCodeType = "CustomCode"
)

//
// This enumerated type is used to control how the "Pay Now" button is displayed on a listing.
//
type DisplayPayNowButtonCodeType string

const (

	//
	// This enumeration value indicates that the "Pay Now" button will be displayed no matter what payment method the buyer uses.
	//
	DisplayPayNowButtonCodeTypeShowPayNowButtonForAllPaymentMethods DisplayPayNowButtonCodeType = "ShowPayNowButtonForAllPaymentMethods"

	//
	// This enumeration value indicates that the "Pay Now" button will only be displayed if the buyer is using PayPal as the payment method.
	//
	DisplayPayNowButtonCodeTypeShowPayNowButtonForPayPalOnly DisplayPayNowButtonCodeType = "ShowPayNowButtonForPayPalOnly"

	//
	// Reserved for internal or future use
	//
	DisplayPayNowButtonCodeTypeCustomCode DisplayPayNowButtonCodeType = "CustomCode"
)

//
// This enumerated type contains a list of eBay subscriptions that an eBay user may be subscribed to.
//
type EBaySubscriptionTypeCodeType string

const (

	//
	// This eBay subscription is no longer available.
	//
	EBaySubscriptionTypeCodeTypeSellerAssistant EBaySubscriptionTypeCodeType = "SellerAssistant"

	//
	// This eBay subscription is no longer available.
	//
	EBaySubscriptionTypeCodeTypeSellerAssistantPro EBaySubscriptionTypeCodeType = "SellerAssistantPro"

	//
	// This value indicates that the user has a Basic eBay Store membership. See the <a href="http://pages.ebay.com/sellerinformation/stores/Subscriptions.html target="_blank">Welcome to eBay Stores</a> help page for more information on eBay Store subscriptions.
	//
	EBaySubscriptionTypeCodeTypeEBayStoreBasic EBaySubscriptionTypeCodeType = "EBayStoreBasic"

	//
	// This value indicates that the user has a Premium eBay Store membership. See the <a href="http://pages.ebay.com/sellerinformation/stores/Subscriptions.html target="_blank">Welcome to eBay Stores</a> help page for more information on eBay Store subscriptions.
	//
	EBaySubscriptionTypeCodeTypeEBayStoreFeatured EBaySubscriptionTypeCodeType = "EBayStoreFeatured"

	//
	// This value indicates that the user has a Anchor eBay Store membership. See the <a href="http://pages.ebay.com/sellerinformation/stores/Subscriptions.html target="_blank">Welcome to eBay Stores</a> help page for more information on eBay Store subscriptions.
	//
	EBaySubscriptionTypeCodeTypeEBayStoreAnchor EBaySubscriptionTypeCodeType = "EBayStoreAnchor"

	//
	// This value indicates that the user has a Selling Manager subscription. Selling Manager is free to all sellers and can be subscribed to through the <b>Subscriptions</b> section of My eBay. See the <a href="http://pages.ebay.com/help/sell/selling-manager-subscription.html target="_blank">Selling Manager and Selling Manager Pro</a> help page for more information on Selling Manager.
	//
	EBaySubscriptionTypeCodeTypeSellingManager EBaySubscriptionTypeCodeType = "SellingManager"

	//
	// This value indicates that the user has a Selling Manager Pro subscription. Selling Manager Pro is free to all sellers for the first 30 days, and a Selling Manager Pro subscription is included at no charge for eBay Store Premium and Anchor subscriptions. Selling Manager Pro can be subscribed to through the <b>Subscriptions</b> section of My eBay. See the <a href="http://pages.ebay.com/help/sell/selling-manager-subscription.html target="_blank">Selling Manager and Selling Manager Pro</a> help page for more information on Selling Manager Pro.
	//
	EBaySubscriptionTypeCodeTypeSellingManagerPro EBaySubscriptionTypeCodeType = "SellingManagerPro"

	//
	// This value is no longer applicable because Picture Manager has been EOLed.
	//
	EBaySubscriptionTypeCodeTypePictureManagerLevel1 EBaySubscriptionTypeCodeType = "PictureManagerLevel1"

	//
	// This value is no longer applicable because Picture Manager has been EOLed.
	//
	EBaySubscriptionTypeCodeTypePictureManagerLevel2 EBaySubscriptionTypeCodeType = "PictureManagerLevel2"

	//
	// This value is no longer applicable because Picture Manager has been EOLed.
	//
	EBaySubscriptionTypeCodeTypePictureManagerLevel3 EBaySubscriptionTypeCodeType = "PictureManagerLevel3"

	//
	// This value is no longer applicable because Picture Manager has been EOLed.
	//
	EBaySubscriptionTypeCodeTypePictureManagerLevel4 EBaySubscriptionTypeCodeType = "PictureManagerLevel4"

	//
	// This value is no longer applicable because Picture Manager has been EOLed.
	//
	EBaySubscriptionTypeCodeTypePictureManagerLevel5 EBaySubscriptionTypeCodeType = "PictureManagerLevel5"

	//
	// This value is no longer applicable because Picture Manager has been EOLed.
	//
	EBaySubscriptionTypeCodeTypePictureManagerLevel6 EBaySubscriptionTypeCodeType = "PictureManagerLevel6"

	//
	// This value is no longer applicable because Picture Manager has been EOLed.
	//
	EBaySubscriptionTypeCodeTypePictureManagerLevel7 EBaySubscriptionTypeCodeType = "PictureManagerLevel7"

	//
	// Basic Sales Reports are no longer available. Sellers should subsribe to Sales Reports Plus instead.
	//
	EBaySubscriptionTypeCodeTypeSellerReportsBasic EBaySubscriptionTypeCodeType = "SellerReportsBasic"

	//
	// This value indicates that the user has a Sales Reports Plus subscription. A user can subscribe to Sales Report Plus through the <b>Subscriptions</b> section of My eBay. See the <a href="http://pages.ebay.com/help/sell/viewing-sales-reports.html target="_blank">Sales Report Plus</a> help page for more information.
	//
	EBaySubscriptionTypeCodeTypeSellerReportsPlus EBaySubscriptionTypeCodeType = "SellerReportsPlus"

	//
	// This value indicates that the user has a File Exchange subscription. A user can subscribe to File Exchange through the <b>Subscriptions</b> section of My eBay. See the <a href="http://pages.ebay.com/sellerinformation/sellingresources/fileexchange.html target="_blank">File Exchange</a> help page for more information.
	//
	EBaySubscriptionTypeCodeTypeFileExchange EBaySubscriptionTypeCodeType = "FileExchange"

	//
	// This value indicates that the Motors Dealer has a Local Market Specialty subscription. This type of account is used to sell in the Motorcycles, Powersports, and Other Vehicles and Trailers categories. Not Cars and Trucks.
	//
	EBaySubscriptionTypeCodeTypeLocalMarketSpecialty EBaySubscriptionTypeCodeType = "LocalMarketSpecialty"

	//
	// This value indicates that the Motors Dealer has a Local Market Regular  subscription. This type of account is used to sell in all eBay Motors categories.
	//
	EBaySubscriptionTypeCodeTypeLocalMarketRegular EBaySubscriptionTypeCodeType = "LocalMarketRegular"

	//
	// This value indicates that the Motors Dealer has a Local Market Premium  subscription. This type of account is used to sell in all eBay Motors categories.
	//
	EBaySubscriptionTypeCodeTypeLocalMarketPremium EBaySubscriptionTypeCodeType = "LocalMarketPremium"

	EBaySubscriptionTypeCodeTypeCustomCode EBaySubscriptionTypeCodeType = "CustomCode"
)

//
// This enumeration type is used to indicate whether an application/URL/device is enabled to receive notifications, or to indicate whether a specific notification event is enabled.
//
type EnableCodeType string

const (

	//
	// This enumeration value indicates that an application/URL/device is enabled to receive notifications, or to indicate that a specific notification event is enabled.
	//
	EnableCodeTypeEnable EnableCodeType = "Enable"

	//
	// This enumeration value indicates that an application/URL/device is disabled, or being blocked from receiving notifications, or to indicate that a specific notification event is disabled.
	//
	EnableCodeTypeDisable EnableCodeType = "Disable"

	//
	// Reserved for future use.
	//
	EnableCodeTypeCustomCode EnableCodeType = "CustomCode"
)

//
// This enumeration type is used to indicate the type of logo that will be included in the customized email that will be sent by the seller to the winning bidder in an auction listing.
//
type EndOfAuctionLogoTypeCodeType string

const (

	//
	// This enumeration value indicates that the PayPal Winning Bidder Notice logo will be used in the end of auction email to winning bidder.
	//
	EndOfAuctionLogoTypeCodeTypeWinningBidderNotice EndOfAuctionLogoTypeCodeType = "WinningBidderNotice"

	//
	// This enumeration value indicates that the eBay seller's Store logo will be used in the end of auction email to winning bidder.
	//
	EndOfAuctionLogoTypeCodeTypeStore EndOfAuctionLogoTypeCodeType = "Store"

	//
	// This enumeration value indicates that a custom logo will be used in the end of auction email to winning bidder. The location (URL) of this custom logo is specified in the <b>LogoURL</b> field.
	//
	EndOfAuctionLogoTypeCodeTypeCustomized EndOfAuctionLogoTypeCodeType = "Customized"

	//
	// Reserved for internal or future use.
	//
	EndOfAuctionLogoTypeCodeTypeCustomCode EndOfAuctionLogoTypeCodeType = "CustomCode"

	//
	// This enumeration value indicates that no logo will be used in the end of auction email to winning bidder.
	//
	EndOfAuctionLogoTypeCodeTypeNone EndOfAuctionLogoTypeCodeType = "None"
)

//
// This type defines the reasons that a seller can end an item listing early. This value is required if the seller ends a listing early. This can be on an item that hasn't
// sold and has no bids or on an item that has bids and the seller wants to sell the item to the high bidder now.
//
type EndReasonCodeType string

const (

	//
	// Use this enumeration value in an End listing call if the seller is ending a listing because the item was lost or is broken.
	//
	EndReasonCodeTypeLostOrBroken EndReasonCodeType = "LostOrBroken"

	//
	// Use this enumeration value in an End listing call if the seller is ending a listing because the item is no longer available for sale.
	//
	EndReasonCodeTypeNotAvailable EndReasonCodeType = "NotAvailable"

	//
	// Use this enumeration value in an End listing call if the seller is ending a listing because the start price or reserve price is incorrect.
	//
	EndReasonCodeTypeIncorrect EndReasonCodeType = "Incorrect"

	//
	// Use this enumeration value in an End listing call if the seller is ending a listing because the listing contained an error (other than start price or reserve price).
	//
	EndReasonCodeTypeOtherListingError EndReasonCodeType = "OtherListingError"

	//
	// Reserved for internal or future use.
	//
	EndReasonCodeTypeCustomCode EndReasonCodeType = "CustomCode"

	//
	// Use this enumeration value in an End listing call if the seller is ending a listing because they want to sell an auction item to the current high bidder. A seller can end a listing early in order to sell to the current high bidder when the listing has qualifying bids (i.e., there is a current high bid that,
	// when applicable, meets the minimum reserve price) and there is more than 12 hours before the listing ends.
	// <br>
	// <b>Note</b>: In the last 12 hours of an item listing, you cannot end an item early if it has bids.
	//
	EndReasonCodeTypeSellToHighBidder EndReasonCodeType = "SellToHighBidder"

	//
	// The vehicle was sold. Applies to local classified listings for vehicles only.
	//
	EndReasonCodeTypeSold EndReasonCodeType = "Sold"

	//
	// For internal use only. This enumeration value cannot be used by the seller in an End listing call, but it will get returned in <b>GetItem</b> if a listing was administratively ended by eBay if the item in a listing becomes unpurchasable due to the eBay Catalog product associated with the listing being removed from the catalog.
	//
	EndReasonCodeTypeProductDeleted EndReasonCodeType = "ProductDeleted"
)

//
// This enumerated type is deprecated.
//
type EscrowCodeType string

const (

	//
	// This field is deprecated.
	//
	EscrowCodeTypeByBuyer EscrowCodeType = "ByBuyer"

	//
	// This field is deprecated.
	//
	EscrowCodeTypeBySeller EscrowCodeType = "BySeller"

	//
	// This field is deprecated.
	//
	EscrowCodeTypeNone EscrowCodeType = "None"

	//
	// This field is deprecated.
	//
	EscrowCodeTypeCustomCode EscrowCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type ExternalProductCodeType string

const (

	//
	// This value is not used.
	//
	ExternalProductCodeTypeISBN ExternalProductCodeType = "ISBN"

	//
	// This value is not used.
	//
	ExternalProductCodeTypeUPC ExternalProductCodeType = "UPC"

	//
	// This value is not used.
	//
	ExternalProductCodeTypeProductID ExternalProductCodeType = "ProductID"

	//
	// This value is not used.
	//
	ExternalProductCodeTypeEAN ExternalProductCodeType = "EAN"

	//
	// This value is not used.
	//
	ExternalProductCodeTypeKeywords ExternalProductCodeType = "Keywords"

	//
	// This value is not used.
	//
	ExternalProductCodeTypeMPN ExternalProductCodeType = "MPN"

	//
	// This value is not used.
	//
	ExternalProductCodeTypeCustomCode ExternalProductCodeType = "CustomCode"
)

//
// Enumerated type that lists all possible values that can be passed into the <b>FeatureID</b> field in a <b>GetCategoryFeatures</b> call. The <b>FeatureID</b> field is to used to check if specific listing features are enabled at the site or category level. Multiple <b>FeatureID</b> fields can be used in the request. If no <b>FeatureID</b> fields are used, the call retrieves data for all features defined within this enumerated type.
//
type FeatureIDCodeType string

const (

	//
	// If this value is specified, supported site-default and category-specific listing durations values for each listing type are returned in the <b>SiteDefaults.ListingDuration</b> and <b>Category.ListingDuration</b> fields of the <b>GetCategoryFeatures</b> response.
	// <br><br>
	// <bold>Note:</bold> Listing durations for Local Market listings are not
	// supported by <b>GetCategoryFeatures</b>. See to the <a href="http://developer.ebay.com/devzone/guides/ebayfeatures/Development/Sites-eBayMotors.html#LocalMarketListings">Local Market Listing</a>
	// documentation in the Features Guide for valid listing durations for Local Market listings.
	//
	FeatureIDCodeTypeListingDurations FeatureIDCodeType = "ListingDurations"

	//
	// If this value is specified, the <b>SiteDefaults.BestOfferEnabled</b> and <b>Category.BestOfferEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports the Best Offer feature, and which categories allow the Best Offer feature.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature can be set for auction listings on the US, Canada, UK, Germany, Australia, France, Italy, and Spain marketplaces, but keep in mind that Best Offer and Buy It Now cannot be used simultaneously in a listing. Also, once a qualifying bid is made on an auction listing, the Best Offer feature is disabled, and any pending offer or counteroffers are no longer valid.
	// </span>
	//
	FeatureIDCodeTypeBestOfferEnabled FeatureIDCodeType = "BestOfferEnabled"

	//
	// This value is <b>deprecated</b>, as Dutch-style auctions are no longer available on any eBay sites.
	//
	FeatureIDCodeTypeDutchBINEnabled FeatureIDCodeType = "DutchBINEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ShippingTermsRequired</b> and <b>Category.ShippingTermsRequired</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site, and individual categories on that site, require at least one domestic shipping service option (with cost) to be specified before an item is listed.
	//
	FeatureIDCodeTypeShippingTermsRequired FeatureIDCodeType = "ShippingTermsRequired"

	//
	// If this value is specified, the <b>SiteDefaults.UserConsentRequired</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site requires a prospective bidder of an auction item to read and agree to the terms in eBay's privacy policy before bidding on the item.
	//
	FeatureIDCodeTypeUserConsentRequired FeatureIDCodeType = "UserConsentRequired"

	//
	// If this value is specified, the <b>SiteDefaults.HomePageFeaturedEnabled</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports the featuring of items within a special area of eBay's home page. This is a listing enhancement that requires a fee, and support for this feature varies by site.
	//
	FeatureIDCodeTypeHomePageFeaturedEnabled FeatureIDCodeType = "HomePageFeaturedEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.AdFormatEnabled</b> and <b>Category.AdFormatEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support Classified Ad listings.
	//
	FeatureIDCodeTypeAdFormatEnabled FeatureIDCodeType = "AdFormatEnabled"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeDigitalDeliveryEnabled FeatureIDCodeType = "DigitalDeliveryEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.BestOfferCounterEnabled</b> and <b>Category.BestOfferCounterEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports the Best Offer counter offers, and which categories allow the Best Offer counter offers.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature can be set for auction listings on the US, Canada, UK, Germany, Australia, France, Italy, and Spain marketplaces, but keep in mind that Best Offer and Buy It Now cannot be used simultaneously in a listing. Also, once a qualifying bid is made on an auction listing, the Best Offer feature is disabled, and any pending offer or counteroffers are no longer valid.
	// </span>
	//
	FeatureIDCodeTypeBestOfferCounterEnabled FeatureIDCodeType = "BestOfferCounterEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.BestOfferAutoDeclineEnabled</b> and <b>Category.BestOfferAutoDeclineEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto decline feature. With the Best Offer auto decline feature, the seller sets a price threshold, and all Best Offers and counter offers below this price value are automatically declined without any seller action.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature can be set for auction listings on the US, Canada, UK, Germany, Australia, France, Italy, and Spain marketplaces, but keep in mind that Best Offer and Buy It Now cannot be used simultaneously in a listing. Also, once a qualifying bid is made on an auction listing, the Best Offer feature is disabled, and any pending offer or counteroffers are no longer valid.
	// </span>
	//
	FeatureIDCodeTypeBestOfferAutoDeclineEnabled FeatureIDCodeType = "BestOfferAutoDeclineEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ProPackEnabled</b> and <b>Category.ProPackEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Pro Pack listing enhancement bundle.
	//
	FeatureIDCodeTypeProPack FeatureIDCodeType = "ProPack"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeBasicUpgradePack FeatureIDCodeType = "BasicUpgradePack"

	//
	// If this value is specified, the <b>SiteDefaults.ValuePackEnabled</b> and <b>Category.ValuePackEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Value Pack listing enhancement bundle. The Value Pack bundle includes the Gallery Plus feature, a listing subtitle, and use of a Listing Designer template.
	//
	FeatureIDCodeTypeValuePack FeatureIDCodeType = "ValuePack"

	//
	// If this value is specified, the <b>SiteDefaults.ProPackPlusEnabled</b> and <b>Category.ProPackPlusEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Pro Pack Plus listing enhancement bundle. The Pro Pack Plus bundle includes the Bold Title, Border, Highlight, Featured, and Gallery features for a discounted price.
	//
	FeatureIDCodeTypeProPackPlus FeatureIDCodeType = "ProPackPlus"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketSpecialitySubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Local Market listings for sellers with a specialty subscription to Local Market for Vehicles.
	//
	FeatureIDCodeTypeLocalMarketSpecialitySubscription FeatureIDCodeType = "LocalMarketSpecialitySubscription"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketRegularSubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Local Market listings for sellers with a regular subscription to Local Market for Vehicles.
	//
	FeatureIDCodeTypeLocalMarketRegularSubscription FeatureIDCodeType = "LocalMarketRegularSubscription"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketPremiumSubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Local Market listings for sellers with a premium subscription to Local Market for Vehicles.
	//
	FeatureIDCodeTypeLocalMarketPremiumSubscription FeatureIDCodeType = "LocalMarketPremiumSubscription"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketNonSubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Local Market listings for sellers without a subscription to Local Market for Vehicles.
	//
	FeatureIDCodeTypeLocalMarketNonSubscription FeatureIDCodeType = "LocalMarketNonSubscription"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeExpressEnabled FeatureIDCodeType = "ExpressEnabled"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeExpressPicturesRequired FeatureIDCodeType = "ExpressPicturesRequired"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeExpressConditionRequired FeatureIDCodeType = "ExpressConditionRequired"

	//
	// If this value is specified, the <b>SiteDefaults.SellerContactDetailsEnabled</b> and <b>Category.SellerContactDetailsEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow the seller to provide contact information within a Classified Ad listing. This feature is only applicable to Classified Ad listings.
	//
	FeatureIDCodeTypeSellerContactDetailsEnabled FeatureIDCodeType = "SellerContactDetailsEnabled"

	//
	// Reserved for internal or future use.
	//
	FeatureIDCodeTypeCustomCode FeatureIDCodeType = "CustomCode"

	//
	// If this value is specified, the <b>SiteDefaults.MinimumReservePrice</b> and <b>Category.MinimumReservePrice</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories require a minimum Reserve Price for auction listings. This feature is only applicable to Auction listings and only if the seller decides to set a Reserve Price for the auction.
	//
	FeatureIDCodeTypeMinimumReservePrice FeatureIDCodeType = "MinimumReservePrice"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeTransactionConfirmationRequestEnabled FeatureIDCodeType = "TransactionConfirmationRequestEnabled"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeStoreInventoryEnabled FeatureIDCodeType = "StoreInventoryEnabled"

	//
	// If this value is specified, the integer values in the <b>LocalListingDistancesRegular</b>, <b>LocalListingDistancesSpecialty</b>, and <b>LocalListingDistancesNonSubscription</b> fields in the <b>GetCategoryFeatures</b> response will indicate the radius (in miles) of the selling area for Local Market Vehicle listings, based on Local Market subscription status of the motor vehicle seller (specialty subscription, regular subscription, or no subscription).
	//
	FeatureIDCodeTypeLocalListingDistances FeatureIDCodeType = "LocalListingDistances"

	//
	// This enumeration value is no longer applicable, as Skype communication between eBay members is no longer supported.
	//
	FeatureIDCodeTypeSkypeMeTransactionalEnabled FeatureIDCodeType = "SkypeMeTransactionalEnabled"

	//
	// This enumeration value is no longer applicable, as Skype communication between eBay members is no longer supported.
	//
	FeatureIDCodeTypeSkypeMeNonTransactionalEnabled FeatureIDCodeType = "SkypeMeNonTransactionalEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdPaymentMethodEnabled</b> and <b>Category.ClassifiedAdPaymentMethodEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not (and when) accepted payment methods are displayed to buyers for the specified eBay site and for individual categories. This feature is only applicable for Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdPaymentMethodEnabled FeatureIDCodeType = "ClassifiedAdPaymentMethodEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdShippingMethodEnabled</b> and <b>Category.ClassifiedAdShippingMethodEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the display of available shipping methods to buyers. This feature is only applicable for Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdShippingMethodEnabled FeatureIDCodeType = "ClassifiedAdShippingMethodEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdBestOfferEnabled</b> and <b>Category.ClassifiedAdBestOfferEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer feature for Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdBestOfferEnabled FeatureIDCodeType = "ClassifiedAdBestOfferEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdCounterOfferEnabled</b> and <b>Category.ClassifiedAdCounterOfferEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support Best Offer counter offers for Classified Ad listings. This feature is only applicable for Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdCounterOfferEnabled FeatureIDCodeType = "ClassifiedAdCounterOfferEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdAutoDeclineEnabled</b> and <b>Category.ClassifiedAdAutoDeclineEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto decline feature for Classified Ad listings. With the Best Offer auto decline feature, the seller sets a price threshold, and all Best Offers and counter offers below this price value are automatically declined without any seller action. This feature is only applicable for Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdAutoDeclineEnabled FeatureIDCodeType = "ClassifiedAdAutoDeclineEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdContactByEmailEnabled</b> and <b>Category.ClassifiedAdContactByEmailEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow the seller to provide a contact email address within a Classified Ad listing. This feature is only applicable to Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdContactByEmailEnabled FeatureIDCodeType = "ClassifiedAdContactByEmailEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdContactByPhoneEnabled</b> and <b>Category.ClassifiedAdContactByPhoneEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow the seller to provide a contact phone number within a Classified Ad listing. This feature is only applicable to Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdContactByPhoneEnabled FeatureIDCodeType = "ClassifiedAdContactByPhoneEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.SafePaymentRequired</b> and <b>Category.SafePaymentRequired</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site, and individual categories on that site, require that the seller set at least one accepted payment method in the listing that is certified by eBay to be a "safe payment method".
	//
	FeatureIDCodeTypeSafePaymentRequired FeatureIDCodeType = "SafePaymentRequired"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeMaximumBestOffersAllowed FeatureIDCodeType = "MaximumBestOffersAllowed"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeClassifiedAdMaximumBestOffersAllowed FeatureIDCodeType = "ClassifiedAdMaximumBestOffersAllowed"

	//
	// This value is <b>deprecated</b> and should no longer be used. To verify if the seller's contact information can be shared with prospective buyers in the listing, use the <b>SellerContactDetailsEnabled</b> enumeration value instead.
	//
	FeatureIDCodeTypeClassifiedAdContactByEmailAvailable FeatureIDCodeType = "ClassifiedAdContactByEmailAvailable"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeClassifiedAdPayPerLeadEnabled FeatureIDCodeType = "ClassifiedAdPayPerLeadEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ItemSpecificsEnabled</b> and <b>Category.ItemSpecificsEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate if the eBay site and individual categories support the use of Item Specifics in listings.
	//
	FeatureIDCodeTypeItemSpecificsEnabled FeatureIDCodeType = "ItemSpecificsEnabled"

	//
	// <span class="tablenote"><b>Note:</b>
	// This value is deprecated since it is only applicable to the eBay India site, and this marketplace is no longer available.</span>
	// If this value is specified, the <b>SiteDefaults.PaisaPayFullEscrowEnabled</b> and <b>Category.PaisaPayFullEscrowEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories on that site support Paisa Pay Full Escrow as an accepted payment method. This field is only relevant to listings on the eBay India site, which is the only site where Paisa Pay is available.
	//
	FeatureIDCodeTypePaisaPayFullEscrowEnabled FeatureIDCodeType = "PaisaPayFullEscrowEnabled"

	//
	// This value is deprecated and should no longer be used. Use <b>ISBNEnabled</b> instead.
	//
	//
	FeatureIDCodeTypeISBNIdentifierEnabled FeatureIDCodeType = "ISBNIdentifierEnabled"

	//
	// This value is deprecated and should no longer be used. Use <b>UPCEnabled</b> instead.
	//
	//
	FeatureIDCodeTypeUPCIdentifierEnabled FeatureIDCodeType = "UPCIdentifierEnabled"

	//
	// This value is deprecated and should no longer be used. Use <b>EANEnabled</b> instead.
	//
	//
	FeatureIDCodeTypeEANIdentifierEnabled FeatureIDCodeType = "EANIdentifierEnabled"

	//
	// If this value is specified, the <b>Category.BrandMPNIdentifierEnabled</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not individual categories on the specified site support the ability of a seller to identify a product through a Brand/Manufacturer Part Number (MPN) combination.
	//
	FeatureIDCodeTypeBrandMPNIdentifierEnabled FeatureIDCodeType = "BrandMPNIdentifierEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdAutoAcceptEnabled</b> and <b>Category.ClassifiedAdAutoAcceptEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto accept feature for Classified Ad listings. With the Best Offer auto accept feature, the seller sets a price threshold, and all Best Offers and counter offers at or above this price value are automatically accepted without any seller action. This feature is only applicable for Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdAutoAcceptEnabled FeatureIDCodeType = "ClassifiedAdAutoAcceptEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.BestOfferAutoAcceptEnabled</b> and <b>Category.BestOfferAutoAcceptEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto accept feature. With the Best Offer auto accept feature, the seller sets a price threshold, and all Best Offers and counter offers at or above this price value are automatically accepted without any seller action.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature can be set for auction listings on the US, Canada, UK, Germany, Australia, France, Italy, and Spain marketplaces, but keep in mind that Best Offer and Buy It Now cannot be used simultaneously in a listing. Also, once a qualifying bid is made on an auction listing, the Best Offer feature is disabled, and any pending offer or counteroffers are no longer valid.
	// </span>
	//
	FeatureIDCodeTypeBestOfferAutoAcceptEnabled FeatureIDCodeType = "BestOfferAutoAcceptEnabled"

	//
	// If this value is specified, the <b>CrossBorderTradeNorthAmericaEnabled</b>, <b>CrossBorderTradeGBEnabled</b>, and <b>CrossBorderTradeAustraliaEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the International Site Visibility (Cross-Border Trade) feature, and on which sites. With the International Site Visibility feature, the seller is able to create a listing and make this listing available on multiple eBay sites (not just their domestic eBay site). The International Site Visibility feature is discussed more on the <a href="http://pages.ebay.com/help/sell/globalexposure.html">Getting exposure on international sites</a> help topic.
	//
	FeatureIDCodeTypeCrossBorderTradeEnabled FeatureIDCodeType = "CrossBorderTradeEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.PayPalBuyerProtectionEnabled</b> and <b>Category.PayPalBuyerProtectionEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories are enabled with PayPal Purchase Protection. Of course, an eligible item must be purchased with PayPal to be eligible for PayPal Purchase Protection.
	//
	FeatureIDCodeTypePayPalBuyerProtectionEnabled FeatureIDCodeType = "PayPalBuyerProtectionEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.BuyerGuaranteeEnabled</b> and <b>Category.BuyerGuaranteeEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories are enabled with the Australian version of the Buyer Protection program. This enumeration value is only applicable to the eBay Australia site.
	//
	FeatureIDCodeTypeBuyerGuaranteeEnabled FeatureIDCodeType = "BuyerGuaranteeEnabled"

	//
	// <span class="tablenote"><b>Note:</b>
	// This value is deprecated since it is only applicable to the eBay India site, and this marketplace is no longer available.</span>
	// If this value is specified, the <b>Category.INEscrowWorkflowTimeline</b> fields in the <b>GetCategoryFeatures</b> response will indicate the escrow workflows that will be used for individual categories on the eBay India site. This enumeration value is only applicable to the eBay India site, and only if Paisa Pay Full Escrow is an accepted payment method.
	//
	FeatureIDCodeTypeINEscrowWorkflowTimeline FeatureIDCodeType = "INEscrowWorkflowTimeline"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeCombinedFixedPriceTreatment FeatureIDCodeType = "CombinedFixedPriceTreatment"

	//
	// If this value is specified, the <b>SiteDefaults.GalleryFeaturedDurations</b> container in the <b>GetCategoryFeatures</b> response will indicate the listing duration times that the Featured Gallery feature may be enabled for a listing.
	//
	FeatureIDCodeTypeGalleryFeaturedDurations FeatureIDCodeType = "GalleryFeaturedDurations"

	//
	// If this value is specified, the <b>SiteDefaults.PayPalRequired</b> and <b>Category.PayPalRequired</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories require PayPal as one of the accepted payment methods in a listing. This value is not applicable in countries where PayPal is not available.
	//
	FeatureIDCodeTypePayPalRequired FeatureIDCodeType = "PayPalRequired"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProAdFormatEnabled</b> and <b>Category.eBayMotorsProAdFormatEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow motor vehicles to be sold through Classified Ads. This value is only applicable for eBay Motors Pro users.
	//
	FeatureIDCodeTypeEBayMotorsProAdFormatEnabled FeatureIDCodeType = "eBayMotorsProAdFormatEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProContactByPhoneEnabled</b> and <b>Category.eBayMotorsProContactByPhoneEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Motors Pro users to provide contact phone numbers within a Motor Vehicles Classified Ad listing. The <b>Category.eBayMotorsProPhoneCount</b> field indicates how many contact phone numbers are supported in each listing. This feature is only applicable to Motor Vehicles Classified Ad listings.
	//
	FeatureIDCodeTypeEBayMotorsProContactByPhoneEnabled FeatureIDCodeType = "eBayMotorsProContactByPhoneEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProContactByAddressEnabled</b> and <b>Category.eBayMotorsProContactByAddressEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Motors Pro users to provide contact street addresses within a Motor Vehicles Classified Ad listing. The <b>Category.eBayMotorsProStreetCount</b> field indicates how many contact street addresses are supported in each listing. This feature is only applicable to Motor Vehicles Classified Ad listings.
	//
	FeatureIDCodeTypeEBayMotorsProContactByAddressEnabled FeatureIDCodeType = "eBayMotorsProContactByAddressEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProCompanyNameEnabled</b> and <b>Category.eBayMotorsProCompanyNameEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Motors Pro users to provide a company name within a Motor Vehicles Classified Ad listing. This feature is only applicable to Motor Vehicles Classified Ad listings.
	//
	FeatureIDCodeTypeEBayMotorsProCompanyNameEnabled FeatureIDCodeType = "eBayMotorsProCompanyNameEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProContactByEmailEnabled</b> and <b>Category.eBayMotorsProContactByEmailEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Motors Pro users to provide a contact email address within a Motor Vehicles Classified Ad listing. This feature is only applicable to Motor Vehicles Classified Ad listings.
	//
	FeatureIDCodeTypeEBayMotorsProContactByEmailEnabled FeatureIDCodeType = "eBayMotorsProContactByEmailEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProBestOfferEnabled</b> and <b>Category.eBayMotorsProBestOfferEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer feature for Motor Vehicles Classified Ad listings.
	//
	FeatureIDCodeTypeEBayMotorsProBestOfferEnabled FeatureIDCodeType = "eBayMotorsProBestOfferEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProAutoAcceptEnabled</b> and <b>Category.eBayMotorsProAutoAcceptEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto accept feature for Motor Vehicles Classified Ad listings. With the Best Offer auto accept feature, the seller sets a price threshold, and all Best Offers and counter offers at or above this price value are automatically accepted without any seller action. This feature is only applicable for Motor Vehicles Classified Ad listings, and is only available to eBay Motors Pro users.
	//
	FeatureIDCodeTypeEBayMotorsProAutoAcceptEnabled FeatureIDCodeType = "eBayMotorsProAutoAcceptEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProAutoDeclineEnabled</b> and <b>Category.eBayMotorsProAutoDeclineEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto decline feature for Motor Vehicles Classified Ad listings. With the Best Offer auto decline feature, the seller sets a price threshold, and all Best Offers and counter offers below this price value are automatically declined without any seller action. This feature is only applicable for Motor Vehicles Classified Ad listings, and is only available to eBay Motors Pro users.
	//
	FeatureIDCodeTypeEBayMotorsProAutoDeclineEnabled FeatureIDCodeType = "eBayMotorsProAutoDeclineEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProPaymentMethodCheckOutEnabled</b> and <b>Category.eBayMotorsProPaymentMethodCheckOutEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not (and when) accepted payment methods are displayed to buyers for the specified eBay site and for individual categories. This feature is only applicable for Motor Vehicles Classified Ad listings, and is only available to eBay Motors Pro users.
	//
	FeatureIDCodeTypeEBayMotorsProPaymentMethodCheckOutEnabled FeatureIDCodeType = "eBayMotorsProPaymentMethodCheckOutEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProShippingMethodEnabled</b> and <b>Category.eBayMotorsProShippingMethodEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the display of available shipping methods to buyers. This feature is only applicable for Motor Vehicles Classified Ad listings, and is only available to eBay Motors Pro users.
	//
	FeatureIDCodeTypeEBayMotorsProShippingMethodEnabled FeatureIDCodeType = "eBayMotorsProShippingMethodEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProCounterOfferEnabled</b> and <b>Category.eBayMotorsProCounterOfferEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support Best Offer counter offers for Motor Vehicles Classified Ad listings. This feature is only applicable for Motor Vehicles Classified Ad listings, and is only available to eBay Motors Pro users.
	//
	FeatureIDCodeTypeEBayMotorsProCounterOfferEnabled FeatureIDCodeType = "eBayMotorsProCounterOfferEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.eBayMotorsProSellerContactDetailsEnabled</b> and <b>Category.eBayMotorsProSellerContactDetailsEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow the seller to provide contact information within a Motor Vehicles Classified Ad listing. This feature is only applicable for Motor Vehicles Classified Ad listings, and is only available to eBay Motors Pro users.
	//
	FeatureIDCodeTypeEBayMotorsProSellerContactDetailsEnabled FeatureIDCodeType = "eBayMotorsProSellerContactDetailsEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketAdFormatEnabled</b> and <b>Category.LocalMarketAdFormatEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow motor vehicles to be sold through Local Market Classified Ads. Motors Local Market listings are only available to eBay sellers who are Licensed Vehicle Dealers on eBay.
	//
	FeatureIDCodeTypeLocalMarketAdFormatEnabled FeatureIDCodeType = "LocalMarketAdFormatEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketContactByPhoneEnabled</b> and <b>Category.LocalMarketContactByPhoneEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Licensed Vehicle Dealers to provide contact phone numbers within a Motors Local Market listing. The <b>Category.LocalMarketPhoneCount</b> field indicates how many contact phone numbers are supported in each listing. This feature is only applicable to Motors Local Market listings.
	//
	FeatureIDCodeTypeLocalMarketContactByPhoneEnabled FeatureIDCodeType = "LocalMarketContactByPhoneEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketContactByAddressEnabled</b> and <b>Category.LocalMarketContactByAddressEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Licensed Vehicle Dealers to provide contact street addresses within a Motors Local Market listing. This feature is only applicable to Motors Local Market listings.
	//
	FeatureIDCodeTypeLocalMarketContactByAddressEnabled FeatureIDCodeType = "LocalMarketContactByAddressEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketCompanyNameEnabled</b> and <b>Category.LocalMarketCompanyNameEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Licensed Vehicle Dealers to provide a company name within a Motors Local Market listing. This feature is only applicable to Motors Local Market listings.
	//
	FeatureIDCodeTypeLocalMarketCompanyNameEnabled FeatureIDCodeType = "LocalMarketCompanyNameEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketContactByEmailEnabled</b> and <b>Category.LocalMarketContactByEmailEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Licensed Vehicle Dealers to provide contact email addresses within a Motors Local Market listing. This feature is only applicable to Motors Local Market listings.
	//
	FeatureIDCodeTypeLocalMarketContactByEmailEnabled FeatureIDCodeType = "LocalMarketContactByEmailEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketBestOfferEnabled</b> and <b>Category.LocalMarketBestOfferEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer feature for Motors Local Market listings.
	//
	FeatureIDCodeTypeLocalMarketBestOfferEnabled FeatureIDCodeType = "LocalMarketBestOfferEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketAutoAcceptEnabled</b> and <b>Category.LocalMarketAutoAcceptEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto accept feature for Motors Local Market listings. With the Best Offer auto accept feature, the seller sets a price threshold, and all Best Offers and counter offers at or above this price value are automatically accepted without any seller action. This feature is only applicable for Motors Local Market listings, and is only available to eBay Licensed Vehicle Dealers.
	//
	FeatureIDCodeTypeLocalMarketAutoAcceptEnabled FeatureIDCodeType = "LocalMarketAutoAcceptEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketAutoDeclineEnabled</b> and <b>Category.LocalMarketAutoDeclineEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Best Offer auto decline feature for Motors Local Market listings. With the Best Offer auto decline feature, the seller sets a price threshold, and all Best Offers and counter offers below this price value are automatically declined without any seller action. This feature is only applicable for Motors Local Market listings, and is only available to eBay Licensed Vehicle Dealers.
	//
	FeatureIDCodeTypeLocalMarketAutoDeclineEnabled FeatureIDCodeType = "LocalMarketAutoDeclineEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketPaymentMethodCheckOutEnabled</b> and <b>Category.LocalMarketPaymentMethodCheckOutEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not (and when) accepted payment methods are displayed to buyers for the specified eBay site and for individual categories. This feature is only applicable for Motors Local Market listings, and is only available to eBay Licensed Vehicle Dealers.
	//
	FeatureIDCodeTypeLocalMarketPaymentMethodCheckOutEnabled FeatureIDCodeType = "LocalMarketPaymentMethodCheckOutEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketShippingMethodEnabled</b> and <b>Category.LocalMarketShippingMethodEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the display of available shipping methods to buyers. This feature is only applicable for Motors Local Market listings, and is only available to eBay Licensed Vehicle Dealers.
	//
	FeatureIDCodeTypeLocalMarketShippingMethodEnabled FeatureIDCodeType = "LocalMarketShippingMethodEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketCounterOfferEnabled</b> and <b>Category.LocalMarketCounterOfferEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support Best Offer counter offers for Motors Local Market listings. This feature is only applicable for Motors Local Market listings, and is only available to eBay Licensed Vehicle Dealers.
	//
	FeatureIDCodeTypeLocalMarketCounterOfferEnabled FeatureIDCodeType = "LocalMarketCounterOfferEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.LocalMarketSellerContactDetailsEnabled</b> and <b>Category.LocalMarketSellerContactDetailsEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow the seller to provide contact information within a Motors Local Market listing. This feature is only applicable for Motors Local Market listings, and is only available to eBay Licensed Vehicle Dealers.
	//
	FeatureIDCodeTypeLocalMarketSellerContactDetailsEnabled FeatureIDCodeType = "LocalMarketSellerContactDetailsEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdContactByAddressEnabled</b> and <b>Category.ClassifiedAdContactByAddressEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow sellers to provide contact street addresses within a Classified Ad listing. The <b>Category.ClassifiedAdStreetCount</b> field indicates how many street addresses are allowed in each listing. This feature is only applicable to Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdContactByAddressEnabled FeatureIDCodeType = "ClassifiedAdContactByAddressEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ClassifiedAdCompanyNameEnabled</b> and <b>Category.ClassifiedAdCompanyNameEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow sellers to provide a company name within a Classified Ad listing. This feature is only applicable to Classified Ad listings.
	//
	FeatureIDCodeTypeClassifiedAdCompanyNameEnabled FeatureIDCodeType = "ClassifiedAdCompanyNameEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.SpecialitySubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Motors National listings for sellers with a specialty dealer subscription for selling motor vehicles.
	//
	FeatureIDCodeTypeSpecialitySubscription FeatureIDCodeType = "SpecialitySubscription"

	//
	// If this value is specified, the <b>SiteDefaults.RegularSubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Motors National listings for sellers with a regular dealer subscription for selling motor vehicles.
	//
	FeatureIDCodeTypeRegularSubscription FeatureIDCodeType = "RegularSubscription"

	//
	// If this value is specified, the <b>SiteDefaults.PremiumSubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Motors National listings for sellers with a premium dealer subscription for selling motor vehicles.
	//
	FeatureIDCodeTypePremiumSubscription FeatureIDCodeType = "PremiumSubscription"

	//
	// If this value is specified, the <b>SiteDefaults.NonSubscription</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site supports Motors National listings for sellers without a dealer subscription for selling motor vehicles.
	//
	FeatureIDCodeTypeNonSubscription FeatureIDCodeType = "NonSubscription"

	//
	// If this value is specified, the <b>SiteDefaults.IntangibleEnabled</b> and <b>Category.IntangibleEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow sellers to sell intangible items.
	//
	FeatureIDCodeTypeIntangibleEnabled FeatureIDCodeType = "IntangibleEnabled"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypePayPalRequiredForStoreOwner FeatureIDCodeType = "PayPalRequiredForStoreOwner"

	//
	// If this value is specified, the <b>SiteDefaults.ReviseQuantityAllowed</b> and <b>Category.ReviseQuantityAllowed</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow sellers to revise quantity in a multi-quantity, fixed-price listing while the listing is in a semi- or fully-restricted mode (such as when the listing already has sales or when the listing is scheduled to end within 12 hours). This value is only applicable to fixed-price listings.
	//
	FeatureIDCodeTypeReviseQuantityAllowed FeatureIDCodeType = "ReviseQuantityAllowed"

	//
	// If this value is specified, the <b>SiteDefaults.RevisePriceAllowed</b> and <b>Category.RevisePriceAllowed</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow sellers to revise the price in a fixed-price listing while the listing is in a semi- or fully-restricted mode (such as when the listing already has sales or when the listing is scheduled to end within 12 hours). This value is only applicable to fixed-price listings.
	//
	FeatureIDCodeTypeRevisePriceAllowed FeatureIDCodeType = "RevisePriceAllowed"

	//
	// If this value is specified, the <b>SiteDefaults.StoreOwnerExtendedListingDurationsEnabled</b> and <b>Category.StoreOwnerExtendedListingDurationsEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay Store sellers to create fixed-price listings with longer listing durations than sellers without eBay Stores. This value is only applicable to fixed-price listings.
	//
	FeatureIDCodeTypeStoreOwnerExtendedListingDurationsEnabled FeatureIDCodeType = "StoreOwnerExtendedListingDurationsEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.StoreOwnerExtendedListingDurations</b> container in the <b>GetCategoryFeatures</b> response will indicate the extended listing duration times that eBay Store sellers may set when creating a fixed-price listing.  This value is only applicable to fixed-price listings. The site and category must support extended listing durations (<b>StoreOwnerExtendedListingDurationsEnabled</b>=true).
	//
	FeatureIDCodeTypeStoreOwnerExtendedListingDurations FeatureIDCodeType = "StoreOwnerExtendedListingDurations"

	//
	// If this value is specified, the <b>SiteDefaults.ReturnPolicyEnabled</b> and <b>Category.ReturnPolicyEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories allow eBay sellers to create a return policy for the listing.
	//
	FeatureIDCodeTypeReturnPolicyEnabled FeatureIDCodeType = "ReturnPolicyEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.HandlingTimeEnabled</b> and <b>Category.HandlingTimeEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories require eBay sellers to set a handling time for products sold within the listing. The handling time is the maximum number of business days the seller commits to for preparing an item to be shipped after receiving a cleared payment. The seller's handling time does not include the shipping time (the carrier's transit time).
	//
	FeatureIDCodeTypeHandlingTimeEnabled FeatureIDCodeType = "HandlingTimeEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.PaymentMethod</b> and <b>SiteDefaults.PaymentMethod</b> fields in the <b>GetCategoryFeatures</b> response will indicate the accepted payment methods at the eBay site level and within the individual categories.
	//
	FeatureIDCodeTypePaymentMethods FeatureIDCodeType = "PaymentMethods"

	//
	// If this value is specified, the <b>Category.MaxFlatShippingCost</b> fields in the <b>GetCategoryFeatures</b> response will indicate the maximum flat-rate shipping costs that the seller may charge the buyer to ship one item domestically. At least one available shipping service option has to be under this value. Handling cost (if any) goes toward this maximum cost threshold.
	//
	FeatureIDCodeTypeMaxFlatShippingCost FeatureIDCodeType = "MaxFlatShippingCost"

	//
	// If this value is specified, the <b>SiteDefaults.MaxFlatShippingCostCBTExempt</b> boolean field in the <b>GetCategoryFeatures</b> response will indicate whether or not sellers, who sell items to domestic buyers, but are shipping the item from another country, are exempt from the <b>MaxFlatShippingCost</b> threshold.
	//
	FeatureIDCodeTypeMaxFlatShippingCostCBTExempt FeatureIDCodeType = "MaxFlatShippingCostCBTExempt"

	//
	// If this value is specified, the <b>Category.Group1MaxFlatShippingCost</b> fields in the <b>GetCategoryFeatures</b> response will indicate the maximum flat-rate shipping costs that the seller may charge the buyer to ship one item domestically using a Group 1 shipping service. At least one available Group 1 shipping service option has to be under this value. Handling cost (if any) goes toward this maximum cost threshold.
	//
	FeatureIDCodeTypeGroup1MaxFlatShippingCost FeatureIDCodeType = "Group1MaxFlatShippingCost"

	//
	// If this value is specified, the <b>Category.Group2MaxFlatShippingCost</b> fields in the <b>GetCategoryFeatures</b> response will indicate the maximum flat-rate shipping costs that the seller may charge the buyer to ship one item domestically using a Group 2 shipping service. At least one available Group 2 shipping service option has to be under this value. Handling cost (if any) goes toward this maximum cost threshold.
	//
	FeatureIDCodeTypeGroup2MaxFlatShippingCost FeatureIDCodeType = "Group2MaxFlatShippingCost"

	//
	// If this value is specified, the <b>Category.Group3MaxFlatShippingCost</b> fields in the <b>GetCategoryFeatures</b> response will indicate the maximum flat-rate shipping costs that the seller may charge the buyer to ship one item domestically using a Group 3 shipping service. At least one available Group 3 shipping service option has to be under this value. Handling cost (if any) goes toward this maximum cost threshold.
	//
	FeatureIDCodeTypeGroup3MaxFlatShippingCost FeatureIDCodeType = "Group3MaxFlatShippingCost"

	//
	// If this value is specified, the <b>SiteDefaults.VariationsEnabled</b> and <b>Category.VariationsEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support multi-variation listings. Variations are items within the same listing that are logically the same product, but differ slightly in size, color, or other aspect.
	//
	FeatureIDCodeTypeVariationsEnabled FeatureIDCodeType = "VariationsEnabled"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeAttributeConversionEnabled FeatureIDCodeType = "AttributeConversionEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.FreeGalleryPlusEnabled</b> and <b>Category.FreeGalleryPlusEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support a free Gallery Plus upgrade. The Gallery Plus feature includes the picture zoom-in option (when you hover the mouse over the picture) and the ability to enlarge the photo by clicking a link.
	//
	FeatureIDCodeTypeFreeGalleryPlusEnabled FeatureIDCodeType = "FreeGalleryPlusEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.FreePicturePackEnabled</b> and <b>Category.FreePicturePackEnabled</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support a free Picture Pack upgrade. The Picture Pack feature is only available for eBay Motors vehicle listings. The Picture Pack feature includes up to 12 supersized photos with the zoom-in feature enabled for each one.
	//
	FeatureIDCodeTypeFreePicturePackEnabled FeatureIDCodeType = "FreePicturePackEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.ItemCompatibilityEnabled</b> and <b>Category.ItemCompatibilityEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the Parts Compatibility feature, and if so, the mode of compatibility that is used (by application or by specification). The Parts Compatibility feature allows sellers to list their motor vehicles parts and accessories items with parts compatibility name-value pairs specific to motor vehicles, and allows potential buyers to search for these items using parts compatibility search fields.
	//
	FeatureIDCodeTypeCompatibilityEnabled FeatureIDCodeType = "CompatibilityEnabled"

	//
	// If this value is specified, the  <b>Category.MinCompatibleApplications</b> fields in the <b>GetCategoryFeatures</b> response will indicate the minimum number of compatible applications that must be specified when listing a motor vehicle part or accessory in the given category.
	//
	FeatureIDCodeTypeMinCompatibleApplications FeatureIDCodeType = "MinCompatibleApplications"

	//
	// If this value is specified, the  <b>Category.MaxCompatibleApplications</b> fields in the <b>GetCategoryFeatures</b> response will indicate the maximum number of compatible applications that can be specified when listing a motor vehicle part or accessory in the given category.
	//
	FeatureIDCodeTypeMaxCompatibleApplications FeatureIDCodeType = "MaxCompatibleApplications"

	//
	// If this value is specified, the <b>Category.ConditionEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate which individual categories support (and even require) the use of <b>ConditionID</b> values to specify the condition of an item within a listing.
	//
	FeatureIDCodeTypeConditionEnabled FeatureIDCodeType = "ConditionEnabled"

	//
	// If this value is specified, the  <b>Category.Condition</b> containers in the <b>GetCategoryFeatures</b> response will include Condition ID values and item conditions like 'Very Good', 'Acceptable', 'Used', etc. for all categories that support the use of Condition ID values.
	//
	FeatureIDCodeTypeConditionValues FeatureIDCodeType = "ConditionValues"

	//
	// If this value is specified, the  <b>Category.ValueCategory</b> boolean fields in the <b>GetCategoryFeatures</b> response will indicate the categories that are considered by eBay to be 'Value Categories'. 'Value Categories' are generally categories where buyers can find good deals on items. If sellers decide to list within a value category, only this category may be used, and a secondary category is not supported.
	//
	FeatureIDCodeTypeValueCategory FeatureIDCodeType = "ValueCategory"

	//
	// This enumeration value is no longer applicable. Use the <code>ProductRequiredEnabled</code> enumeration value instead to see if a category requires that listings be associated with an eBay Catalog product.
	//
	FeatureIDCodeTypeProductCreationEnabled FeatureIDCodeType = "ProductCreationEnabled"

	//
	// If this value is specified, the <b>Category.EANEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not items listed in the corresponding category may utilize EANs to identify a product. A value of <code>Disabled</code> indicates that EANs cannot be used for the category, a value of <code>Enabled</code> indicates that EANs can be used for the category, and a value of <code>Required</code> indicates that an EAN is required when listing a product in this category.
	//
	FeatureIDCodeTypeEANEnabled FeatureIDCodeType = "EANEnabled"

	//
	// If this value is specified, the <b>Category.ISBNEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not items listed in the corresponding category may utilize ISBNs to identify a product. A value of <code>Disabled</code> indicates that ISBNs cannot be used for the category, a value of <code>Enabled</code> indicates that ISBNs can be used for the category, and a value of <code>Required</code> indicates that an ISBN is required when listing a product in this category.
	//
	FeatureIDCodeTypeISBNEnabled FeatureIDCodeType = "ISBNEnabled"

	//
	// If this value is specified, the <b>Category.UPCEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not items listed in the corresponding category may utilize UPCs to identify a product. A value of <code>Disabled</code> indicates that UPCs cannot be used for the category, a value of <code>Enabled</code> indicates that UPCs can be used for the category, and a value of <code>Required</code> indicates that a UPC is required when listing a product in this category.
	//
	FeatureIDCodeTypeUPCEnabled FeatureIDCodeType = "UPCEnabled"

	//
	// If this value is specified, the <b>Category.MaxGranularFitmentCount</b> fields in the <b>GetCategoryFeatures</b> response will indicate how many Parts Compatibility name-value pairs may be passed in for each motor vehicle aspect (Year, Make, and Model) in a motor vehicle parts and accessory listing. granularity. This field is only applicable to motor vehicle parts and accessory listings.
	//
	FeatureIDCodeTypeMaxGranularFitmentCount FeatureIDCodeType = "MaxGranularFitmentCount"

	//
	// If this value is specified, the <b>Category.CompatibleVehicleType</b> fields in the <b>GetCategoryFeatures</b> response will indicate the type of vehicle that parts compatibility name-value pairs in a listing will be referring to, such as 'cars and trucks', 'all-terrain vehicles (ATV)', 'boats', and 'motorcycles'. This field is only applicable to motor vehicle parts and accessory listings.
	//
	FeatureIDCodeTypeCompatibleVehicleType FeatureIDCodeType = "CompatibleVehicleType"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypePaymentOptionsGroup FeatureIDCodeType = "PaymentOptionsGroup"

	//
	// If this value is specified, the <b>Category.ShippingProfileCategoryGroup</b> fields in the <b>GetCategoryFeatures</b> response will indicate which shipping business policy category group that each category will inherit as the default category group. Currently, there are only two Business Policies category groups - 'MOTORS_VEHICLE' covers all motor-vehicle related categories, and 'ALL' covers all other categories.
	//
	FeatureIDCodeTypeShippingProfileCategoryGroup FeatureIDCodeType = "ShippingProfileCategoryGroup"

	//
	// If this value is specified, the <b>Category.PaymentProfileCategoryGroup</b> fields in the <b>GetCategoryFeatures</b> response will indicate which payment business policy category group that each category will inherit as the default category group. Currently, there are only two Business Policies category groups - 'MOTORS_VEHICLE' covers all motor-vehicle related categories, and 'ALL' covers all other categories.
	//
	FeatureIDCodeTypePaymentProfileCategoryGroup FeatureIDCodeType = "PaymentProfileCategoryGroup"

	//
	// If this value is specified, the <b>Category.ReturnPolicyProfileCategoryGroup</b> fields in the <b>GetCategoryFeatures</b> response will indicate which return policy business policy category group that each category will inherit as the default category group. Currently, there are only two Business Policies category groups - 'MOTORS_VEHICLE' covers all motor-vehicle related categories, and 'ALL' covers all other categories.
	//
	FeatureIDCodeTypeReturnPolicyProfileCategoryGroup FeatureIDCodeType = "ReturnPolicyProfileCategoryGroup"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeVINSupported FeatureIDCodeType = "VINSupported"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeVRMSupported FeatureIDCodeType = "VRMSupported"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeSellerProvidedTitleSupported FeatureIDCodeType = "SellerProvidedTitleSupported"

	//
	// This value is <b>deprecated</b> and should no longer be used.
	//
	FeatureIDCodeTypeDepositSupported FeatureIDCodeType = "DepositSupported"

	//
	// If this value is specified, the <b>SiteDefaults.GlobalShippingEnabled</b> and <b>Category.GlobalShippingEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate if the eBay site and individual categories support the Global Shipping Program (GSP) as a means for shipping items internationally. The GSP feature is only applicable to shipping items internationally.
	//
	FeatureIDCodeTypeGlobalShippingEnabled FeatureIDCodeType = "GlobalShippingEnabled"

	//
	// If this value is specified, the <b>SiteDefaults.AdditionalCompatibilityEnabled</b> and <b>Category.AdditionalCompatibilityEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate whether or not the specified eBay site and individual categories support the second-generation Parts Compatibility feature where parts-compatibility name-value pairs can be passed in for boats, motorcycles, and other vehicles instead of just cars and trucks. This feature is only applicable to motor vehicle parts and accessory listings.
	//
	FeatureIDCodeTypeAdditionalCompatibilityEnabled FeatureIDCodeType = "AdditionalCompatibilityEnabled"

	//
	// If this value is specified, the <b>Category.PickupDropOffEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate that items listed in the corresponding category may be enabled with the 'Click and Collect' feature. With the 'Click and Collect' feature, a buyer can purchase certain items on the eBay site and collect them at a local store. Buyers are notified by eBay once their items are available. A <code>false</code> value in this field indicates that items listed in the category are not eligible for the 'Click and Collect' feature.
	// <br/><br/>
	// The 'Click and Collect' feature is only available to large merchants on the eBay UK (site ID - 3), eBay Australia (Site ID - 15), and eBay Germany (Site ID - 77) sites.
	//
	FeatureIDCodeTypePickupDropOffEnabled FeatureIDCodeType = "PickupDropOffEnabled"

	//
	// If this value is specified, the <b>Category.DigitalGoodDeliveryEnabled</b> fields in the <b>GetCategoryFeatures</b> response will indicate that digital gift cards can be listed in the corresponding category. A <code>false</code> value in this field indicates that digital gift cards may not be listed in the category.
	// <br/><br/>
	// Digital gift cards are currently only supported on the US site. There are some restrictions when it comes to selling gift cards, including the following:
	//
	// <ul>
	// <li>Each seller can only have one gift card listing at any given time;</li>
	// <li>The maximum dollar value of the gift card may not exceed 500.00; and</li>
	// <li>prepaid credit cards from American Express, Discover, MasterCard, or Visa are not allowed.</li>
	// </ul>
	// For more information on eBay's Gift Card policy, see the <a href="http://pages.ebay.com/help/policies/gift.html">Gift cards policy</a> Help page.
	//
	FeatureIDCodeTypeDigitalGoodDeliveryEnabled FeatureIDCodeType = "DigitalGoodDeliveryEnabled"

	//
	// This value is used to see if an eBay Product ID (e.g. ePID) can be used in an Add/Revise/Relist API call to identify which motorcycles and/or scooters are compatible with a motor vehicle part or accessory is supported. ePIDs can only be used to identify motorcycles and scooters on the Germany and UK sites.
	// <br/><br/>
	// For more information on using an ePID to identify a compatible motorcycle or scooter through an Add/Revise/Relist API call on the Germany or UK site, see the documentation for the <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request.Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.NameValueList</a> container.
	//
	FeatureIDCodeTypeEpidSupported FeatureIDCodeType = "EpidSupported"

	//
	// This value is used to see if a K Type vehicle number in an Add/Revise/Relist API call to identify which cars and/or trucks are compatible with a motor vehicle part or accessory is supported. K type vehicle numbers can only be used to identify cars and trucks on the Germany site.
	// <br/><br/>
	// For more information on using a K Type vehicle number to identify a compatible car or truck through an Add/Revise/Relist API call on the Germany site, see the documentation for the <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request.Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.NameValueList</a> container.
	//
	FeatureIDCodeTypeKTypeSupported FeatureIDCodeType = "KTypeSupported"

	//
	// This value is used to see if the site supports product-based listings, and if a category requires association with an eBay Catalog product when listing/revising/relisting an item.
	// <br><br>
	// The <b>Category.ProductRequiredEnabled</b> field will only be returned if the category supports/requires association with an eBay Catalog product. For more information on Product-Based Shopping Experience, see the <a href="
	// https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> page.
	//
	FeatureIDCodeTypeProductRequiredEnabled FeatureIDCodeType = "ProductRequiredEnabled"

	//
	// Use this ID to return the values you can specify for whether or not a seller accepts domestic returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeDomesticReturnsAcceptedValues FeatureIDCodeType = "DomesticReturnsAcceptedValues"

	//
	// Use this ID to return the values you can specify for whether or not a seller accepts international returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeInternationalReturnsAcceptedValues FeatureIDCodeType = "InternationalReturnsAcceptedValues"

	//
	// Use this ID to return the values you can specify for the return duration for domestic returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeDomesticReturnsDurationValues FeatureIDCodeType = "DomesticReturnsDurationValues"

	//
	// Use this ID to return the values you can specify for the return duration for international returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeInternationalReturnsDurationValues FeatureIDCodeType = "InternationalReturnsDurationValues"

	//
	// Use this ID to return the values you can specify for who pays any return shipping costs for domestic returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeDomesticReturnsShipmentPayeeValues FeatureIDCodeType = "DomesticReturnsShipmentPayeeValues"

	//
	// Use this ID to return the values you can specify for who pays any return shipping costs for international returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeInternationalReturnsShipmentPayeeValues FeatureIDCodeType = "InternationalReturnsShipmentPayeeValues"

	//
	// In US, sellers can offer item replacement in addition to offering a money-back refund for domestic returns. Use this ID to return whether or not the seller can offer <code>MoneyBackorReplacement</code> for the specified category.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeDomesticRefundMethodValues FeatureIDCodeType = "DomesticRefundMethodValues"

	//
	// In US, sellers can offer item replacement in addition to offering a money-back refund for international returns. Use this ID to return whether or not the seller can offer <code>MoneyBackorReplacement</code> for the specified category.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeInternationalRefundMethodValues FeatureIDCodeType = "InternationalRefundMethodValues"

	//
	// In some EU countries, sellers are legally required to describe the return policy they offer. The value returned by this field indicates if sellers can provide such description within the given marketplace and category.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	FeatureIDCodeTypeReturnPolicyDescriptionEnabled FeatureIDCodeType = "ReturnPolicyDescriptionEnabled"
)

//
// Enumerated type that indicates if the Featured First listing upgrade is enabled for the specified site, and whether it is restricted to a specific seller level.
//
type FeaturedFirstCodeType string

const (

	//
	// This enumeration value indicates that the Featured First listing upgrade is enabled for all sellers on the site.
	//
	FeaturedFirstCodeTypeEnabled FeaturedFirstCodeType = "Enabled"

	//
	// This enumeration value indicates that the Featured First listing upgrade is not available for any sellers on the site.
	//
	FeaturedFirstCodeTypeDisabled FeaturedFirstCodeType = "Disabled"

	//
	// This enumeration value indicates that the Featured First listing upgrade is only enabled for Power Sellers on the site.
	//
	FeaturedFirstCodeTypePowerSellerOnly FeaturedFirstCodeType = "PowerSellerOnly"

	//
	// This enumeration value indicates that the Featured First listing upgrade is only enabled for Top-Rated Sellers on the site.
	//
	FeaturedFirstCodeTypeTopRatedSellerOnly FeaturedFirstCodeType = "TopRatedSellerOnly"

	//
	// Reserved for internal or future use.
	//
	FeaturedFirstCodeTypeCustomCode FeaturedFirstCodeType = "CustomCode"
)

//
// Enumerated type that indicates if the Featured Plus listing upgrade is enabled for the specified site, and whether it is restricted to a specific seller level.
//
type FeaturedPlusCodeType string

const (

	//
	// This enumeration value indicates that the Featured Plus listing upgrade is enabled for all sellers on the site.
	//
	FeaturedPlusCodeTypeEnabled FeaturedPlusCodeType = "Enabled"

	//
	// This enumeration value indicates that the Featured Plus listing upgrade is not available for any sellers on the site.
	//
	FeaturedPlusCodeTypeDisabled FeaturedPlusCodeType = "Disabled"

	//
	// This enumeration value indicates that the Featured Plus listing upgrade is only enabled for Power Sellers on the site.
	//
	FeaturedPlusCodeTypePowerSellerOnly FeaturedPlusCodeType = "PowerSellerOnly"

	//
	// This enumeration value indicates that the Featured Plus listing upgrade is only enabled for Top-Rated Sellers on the site.
	//
	FeaturedPlusCodeTypeTopRatedSellerOnly FeaturedPlusCodeType = "TopRatedSellerOnly"

	//
	// Reserved for internal or future use.
	//
	FeaturedPlusCodeTypeCustomCode FeaturedPlusCodeType = "CustomCode"
)

//
// This enumerated type consists of the different Federal Express shipping rates that sellers can offer to buyers. The shipping rates for the major US shipping carriers can be selected in the Shipping rate preferences in My eBay, or through the <b>SetUserPreferences</b> call.
//
type FedExRateOptionCodeType string

const (

	//
	// This enumeration value indicates that the seller offers buyers the standard Federal Express shipping rates.
	//
	FedExRateOptionCodeTypeFedExStandardList FedExRateOptionCodeType = "FedExStandardList"

	//
	// This enumeration value indicates that the seller offers buyers Federal Express counter rates.
	//
	FedExRateOptionCodeTypeFedExCounter FedExRateOptionCodeType = "FedExCounter"

	//
	// This enumeration value indicates that the seller offers buyers discounted Federal Express shipping rates. Buyers will get these discounted shipping rates as long as they use the eBay-generated shipping labels.
	//
	FedExRateOptionCodeTypeFedExDiscounted FedExRateOptionCodeType = "FedExDiscounted"

	//
	// Reserved for internal or future use
	//
	FedExRateOptionCodeTypeCustomCode FedExRateOptionCodeType = "CustomCode"
)

//
// Applicable to sites that support the Detailed Seller Ratings feature.
// The FeedbackRatingDetailCodeType is the list of areas for detailed seller ratings. When buyers leave an overall Feedback rating (positive, neutral, or negative) for a seller, they also can leave ratings in four areas: item as described, communication, shipping time, and charges for shipping and handling. Users retrieve detailed ratings as averages of the ratings left by buyers.
//
type FeedbackRatingDetailCodeType string

const (

	//
	// Detailed seller rating in the area of "item as described."
	//
	FeedbackRatingDetailCodeTypeItemAsDescribed FeedbackRatingDetailCodeType = "ItemAsDescribed"

	//
	// Detailed seller rating in the area of "communication."
	//
	FeedbackRatingDetailCodeTypeCommunication FeedbackRatingDetailCodeType = "Communication"

	//
	// Detailed seller rating in the area of "shipping time." Inapplicable to
	// motor vehicle items.
	//
	FeedbackRatingDetailCodeTypeShippingTime FeedbackRatingDetailCodeType = "ShippingTime"

	//
	// Detailed seller rating in the area of "charges for shipping and handling."
	// Inapplicable to motor vehicle items.
	//
	FeedbackRatingDetailCodeTypeShippingAndHandlingCharges FeedbackRatingDetailCodeType = "ShippingAndHandlingCharges"

	//
	// (out) Reserved for internal or future use.
	//
	FeedbackRatingDetailCodeTypeCustomCode FeedbackRatingDetailCodeType = "CustomCode"
)

//
// The color of a feedback score star visually denotes the
// range in which the member's summary feedback score falls. The score
// is the net positive feedback minus the net negative feedback left
// for the member.
//
type FeedbackRatingStarCodeType string

const (

	//
	// No graphic displayed, feedback score 0-9.
	//
	FeedbackRatingStarCodeTypeNone FeedbackRatingStarCodeType = "None"

	//
	// Yellow Star, feedback score 10-49.
	//
	FeedbackRatingStarCodeTypeYellow FeedbackRatingStarCodeType = "Yellow"

	//
	// Blue Star, feedback score 50-99.
	//
	FeedbackRatingStarCodeTypeBlue FeedbackRatingStarCodeType = "Blue"

	//
	// Turquoise Star, feedback score 100-499.
	//
	FeedbackRatingStarCodeTypeTurquoise FeedbackRatingStarCodeType = "Turquoise"

	//
	// Purple Star, feedback score 500-999.
	//
	FeedbackRatingStarCodeTypePurple FeedbackRatingStarCodeType = "Purple"

	//
	// Red Star, feedback score 1,000-4,999
	//
	FeedbackRatingStarCodeTypeRed FeedbackRatingStarCodeType = "Red"

	//
	// Green Star, feedback score 5,000-9,999.
	//
	FeedbackRatingStarCodeTypeGreen FeedbackRatingStarCodeType = "Green"

	//
	// Yellow Shooting Star, feedback score 10,000-24,999.
	//
	FeedbackRatingStarCodeTypeYellowShooting FeedbackRatingStarCodeType = "YellowShooting"

	//
	// Turquoise Shooting Star, feedback score 25,000-49,999.
	//
	FeedbackRatingStarCodeTypeTurquoiseShooting FeedbackRatingStarCodeType = "TurquoiseShooting"

	//
	// Purple Shooting Star, feedback score 50,000-99,999.
	//
	FeedbackRatingStarCodeTypePurpleShooting FeedbackRatingStarCodeType = "PurpleShooting"

	//
	// Red Shooting Star, feedback score 100,000-499,999.
	//
	FeedbackRatingStarCodeTypeRedShooting FeedbackRatingStarCodeType = "RedShooting"

	//
	// Green Shooting Star, feedback score 500,000-999,999.
	//
	FeedbackRatingStarCodeTypeGreenShooting FeedbackRatingStarCodeType = "GreenShooting"

	//
	// Silver Shooting Star, feedback score 1,000,000 and above.
	//
	FeedbackRatingStarCodeTypeSilverShooting FeedbackRatingStarCodeType = "SilverShooting"

	//
	// Reserved for internal or future use.
	//
	FeedbackRatingStarCodeTypeCustomCode FeedbackRatingStarCodeType = "CustomCode"
)

//
// This enumerated type is used to indicate the type of response to a Feedback entry.
//
type FeedbackResponseCodeType string

const (

	//
	// This enumeration value is used in the <b>ResponseType</b> field of a <b>RespondToFeedback</b> call if the user is replying to a Feedback entry left by another user.
	//
	FeedbackResponseCodeTypeReply FeedbackResponseCodeType = "Reply"

	//
	// This enumeration value is used in the <b>ResponseType</b> field of a <b>RespondToFeedback</b> call if the user is following up on a Feedback entry comment left by another user.
	//
	FeedbackResponseCodeTypeFollowUp FeedbackResponseCodeType = "FollowUp"

	//
	// Reserved for future use.
	//
	FeedbackResponseCodeTypeCustomCode FeedbackResponseCodeType = "CustomCode"
)

//
// This enumerated type is used to indicate the length of the time period for which Detailed Seller Ratings are evaluated under the <b>AverageRatingSummary</b> container returned in the <b>GetFeedback</b> call.
//
type FeedbackSummaryPeriodCodeType string

const (

	//
	// This enumeration value indicates that the Detailed Seller Rating statistics shown under each <b>AverageRatingDetails</b> container were compiled over the last 30 days.
	//
	FeedbackSummaryPeriodCodeTypeThirtyDays FeedbackSummaryPeriodCodeType = "ThirtyDays"

	//
	// This enumeration value indicates that the Detailed Seller Rating statistics shown under each <b>AverageRatingDetails</b> container were compiled over the last 52 weeks, or one year.
	//
	FeedbackSummaryPeriodCodeTypeFiftyTwoWeeks FeedbackSummaryPeriodCodeType = "FiftyTwoWeeks"

	//
	// Reserved for internal or future use.
	//
	FeedbackSummaryPeriodCodeTypeCustomCode FeedbackSummaryPeriodCodeType = "CustomCode"
)

//
// This enumerated type consists of the values that may be used in the request of a <b>GetFeedback</b> call in order to retrieve a specific type of Feedback.
//
type FeedbackTypeCodeType string

const (

	//
	// This enumeration value will be used in the <b>FeedbackType</b> field of a <b>GetFeedback</b> call if the user only wants to retrieve the Feedback data that they have received acting as a seller.
	//
	FeedbackTypeCodeTypeFeedbackReceivedAsSeller FeedbackTypeCodeType = "FeedbackReceivedAsSeller"

	//
	// This enumeration value will be used in the <b>FeedbackType</b> field of a <b>GetFeedback</b> call if the user only wants to retrieve the Feedback data that they have received acting as a buyer.
	//
	FeedbackTypeCodeTypeFeedbackReceivedAsBuyer FeedbackTypeCodeType = "FeedbackReceivedAsBuyer"

	//
	// This enumeration value will be used in the <b>FeedbackType</b> field of a <b>GetFeedback</b> call if the user wants to retrieve the Feedback data that they have received acting as a seller and buyer.
	//
	FeedbackTypeCodeTypeFeedbackReceived FeedbackTypeCodeType = "FeedbackReceived"

	//
	// This enumeration value will be used in the <b>FeedbackType</b> field of a <b>GetFeedback</b> call if the user wants to retrieve the Feedback they have left for their order partners while acting as a seller or buyer.
	//
	FeedbackTypeCodeTypeFeedbackLeft FeedbackTypeCodeType = "FeedbackLeft"

	//
	// Reserved for internal or future use.
	//
	FeedbackTypeCodeTypeCustomCode FeedbackTypeCodeType = "CustomCode"
)

//
// This type is deprecated, as shipping insurance is no longer applicable or supported in eBay APIs.
//
type FlatRateInsuranceRangeCodeType string

const (

	//
	// Shipping insurance is no longer applicable or supported in eBay APIs.
	//
	FlatRateInsuranceRangeCodeTypeFlatRateInsuranceRange1 FlatRateInsuranceRangeCodeType = "FlatRateInsuranceRange1"

	//
	// Shipping insurance is no longer applicable or supported in eBay APIs.
	//
	FlatRateInsuranceRangeCodeTypeFlatRateInsuranceRange2 FlatRateInsuranceRangeCodeType = "FlatRateInsuranceRange2"

	//
	// Shipping insurance is no longer applicable or supported in eBay APIs.
	//
	FlatRateInsuranceRangeCodeTypeFlatRateInsuranceRange3 FlatRateInsuranceRangeCodeType = "FlatRateInsuranceRange3"

	//
	// Shipping insurance is no longer applicable or supported in eBay APIs.
	//
	FlatRateInsuranceRangeCodeTypeFlatRateInsuranceRange4 FlatRateInsuranceRangeCodeType = "FlatRateInsuranceRange4"

	//
	// Shipping insurance is no longer applicable or supported in eBay APIs.
	//
	FlatRateInsuranceRangeCodeTypeFlatRateInsuranceRange5 FlatRateInsuranceRangeCodeType = "FlatRateInsuranceRange5"

	//
	// Shipping insurance is no longer applicable or supported in eBay APIs.
	//
	FlatRateInsuranceRangeCodeTypeFlatRateInsuranceRange6 FlatRateInsuranceRangeCodeType = "FlatRateInsuranceRange6"

	//
	// Shipping insurance is no longer applicable or supported in eBay APIs.
	//
	FlatRateInsuranceRangeCodeTypeCustomCode FlatRateInsuranceRangeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type FlatShippingRateOptionCodeType string

const (

	//
	// This value is not used.
	//
	FlatShippingRateOptionCodeTypeChargeAmountForEachAdditionalItem FlatShippingRateOptionCodeType = "ChargeAmountForEachAdditionalItem"

	//
	// This value is not used.
	//
	FlatShippingRateOptionCodeTypeDeductAmountFromEachAdditionalItem FlatShippingRateOptionCodeType = "DeductAmountFromEachAdditionalItem"

	//
	// This value is not used.
	//
	FlatShippingRateOptionCodeTypeShipAdditionalItemsFree FlatShippingRateOptionCodeType = "ShipAdditionalItemsFree"

	//
	// This value is not used.
	//
	FlatShippingRateOptionCodeTypeCustomCode FlatShippingRateOptionCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type GallerySortFilterCodeType string

const (

	//
	// This value is not used.
	//
	GallerySortFilterCodeTypeShowAnyItems GallerySortFilterCodeType = "ShowAnyItems"

	//
	// This value is not used.
	//
	GallerySortFilterCodeTypeShowItemsWithGalleryImagesFirst GallerySortFilterCodeType = "ShowItemsWithGalleryImagesFirst"

	//
	// This value is not used.
	//
	GallerySortFilterCodeTypeShowOnlyItemsWithGalleryImages GallerySortFilterCodeType = "ShowOnlyItemsWithGalleryImages"

	//
	// This value is not used.
	//
	GallerySortFilterCodeTypeCustomCode GallerySortFilterCodeType = "CustomCode"
)

//
// Enumeration type that returns the status of the gallery image generation. That status returns either a value of 'Success' or a value that indicates why the gallery image has not been generated.
//
type GalleryStatusCodeType string

const (

	//
	// The Gallery image was successfully generated.
	//
	GalleryStatusCodeTypeSuccess GalleryStatusCodeType = "Success"

	//
	// The Gallery image has not yet been generated.
	//
	GalleryStatusCodeTypePending GalleryStatusCodeType = "Pending"

	//
	// The URL for the image file is not valid.
	//
	GalleryStatusCodeTypeInvalidUrl GalleryStatusCodeType = "InvalidUrl"

	//
	// The URL does not start with <code>http:// </code> or <code>https:// </code>.
	//
	GalleryStatusCodeTypeInvalidProtocol GalleryStatusCodeType = "InvalidProtocol"

	//
	// There is a problem with the image file.
	//
	GalleryStatusCodeTypeInvalidFile GalleryStatusCodeType = "InvalidFile"

	//
	// The server containing the image file was unavailable.
	//
	GalleryStatusCodeTypeServerDown GalleryStatusCodeType = "ServerDown"

	//
	// The image file could not be found.
	//
	GalleryStatusCodeTypeImageNonExistent GalleryStatusCodeType = "ImageNonExistent"

	//
	// The image file failed to transfer.
	//
	GalleryStatusCodeTypeImageReadTimeOut GalleryStatusCodeType = "ImageReadTimeOut"

	//
	// The image file is not in JPG, BMP, GIF, TIF, or PNG format.
	//
	GalleryStatusCodeTypeInvalidFileFormat GalleryStatusCodeType = "InvalidFileFormat"

	//
	// We were not able to process the image file.
	//
	GalleryStatusCodeTypeImageProcessingError GalleryStatusCodeType = "ImageProcessingError"

	//
	// Reserved for internal <b>only</b>.
	//
	GalleryStatusCodeTypeCustomCode GalleryStatusCodeType = "CustomCode"
)

//
// Indicates which Gallery image enhancements to apply to the listing.
//
type GalleryTypeCodeType string

const (

	//
	// Gallery is supported free on all sites. So this field is useful only for removing an existing feature setting when using <b>RelistItem</b>.
	//
	GalleryTypeCodeTypeNone GalleryTypeCodeType = "None"

	//
	// Highlights the listing by randomly placing it at the top of the search results.
	// When Featured is included in an item listing, the listing also automatically gets the
	// Gallery and Plus functionality at no extra cost.
	// <br><br>
	// <span class="tablenote"><b>Sites That Support Featured:</b>
	// You can check if a site supports Featured by using the
	// <b>GeteBayDetails</b> call and passing in <b>ListingFeatureDetails</b>
	// in the <b>DetailName</b> field. In the response, check the
	// <b>ListingFeatureDetails</b> container for <b>FeaturedFirst</b>.
	// </span>
	//
	GalleryTypeCodeTypeFeatured GalleryTypeCodeType = "Featured"

	//
	// This feature, which is free on all sites, adds a Gallery image in the search results. A Gallery image is an image that was uploaded and copied to EPS (eBay Picture Service). This copy is stored  for 30 days or until the image is associated with a listing. Once the image is associated with a listing, the period is extended to 90 days after the item's sale_end date  and is extended again if the item is relisted or used in subsequent listings.  As part of storing a copy, EPS also makes additional sizes available (thumbnail,  main image, supersize,  popup, etc.), which are used by the various Gallery enhancements.
	// <br/><br/>
	// All images must comply to the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Pictures-Intro.html">Picture Requirements.</a>
	//
	GalleryTypeCodeTypeGallery GalleryTypeCodeType = "Gallery"

	//
	// Adds a Gallery Plus icon to the listing.
	// <br/><br/>
	// When Plus is selected in a request that specifies at least two images (using ItemType.PictureDetailsType.PictureURL), the Gallery Plus feature automatically includes a Gallery Showcase of all the listing's images.
	// <br><br>
	// The Gallery Showcase displays when hovering over or clicking on the listing's Gallery Plus icon in the search results. The Showcase window displays a large (400px x 400px) preview image which is first image specified PictureURL, as well as up to 11 (64 px x 64 px) selectable thumbnails for the remaining EPS images. Clicking on the preview image displays the item's listing page.
	// <br/><br/>
	// If Plus is selected and the request includes only one EPS image or any self-hosted images, the listing includes a Gallery Plus icon that, when hovered over or clicked, displays a large (400px x 400px) preview image of the item. Clicking the image displays the View Item page for that listing.
	// <br><br>
	// When using RelistItem or ReviseItem (item has no bids and more than 12 hours before the listing's end), Plus can be unselected in the request. However, the Plus fee will still apply if a previous request selected Plus. There is at most one Plus fee per listing.
	// <br><br>
	// When "Plus" is included in an item listing, the listing also automatically gets the
	// Gallery functionality at no extra cost. "Gallery" does not need to be specified
	// separately in the listing.
	// <br><br>
	// Listing images that are originally smaller than 400px x 400px are centered in the
	// preview frame. Images that are originally larger than 400px x 400px are scaled down
	// to 400px on their longest side (maintaining their original aspect ratio).
	//
	GalleryTypeCodeTypePlus GalleryTypeCodeType = "Plus"

	//
	// Reserved for internal use <b>only</b>.
	//
	GalleryTypeCodeTypeCustomCode GalleryTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type GeneralPaymentMethodCodeType string

const (

	//
	// This value is not used.
	//
	GeneralPaymentMethodCodeTypeOther GeneralPaymentMethodCodeType = "Other"

	//
	// This value is not used.
	//
	GeneralPaymentMethodCodeTypeEcheck GeneralPaymentMethodCodeType = "Echeck"

	//
	// This value is not used.
	//
	GeneralPaymentMethodCodeTypeACH GeneralPaymentMethodCodeType = "ACH"

	//
	// This value is not used.
	//
	GeneralPaymentMethodCodeTypeCreditcard GeneralPaymentMethodCodeType = "Creditcard"

	//
	// This value is not used.
	//
	GeneralPaymentMethodCodeTypePayPalBalance GeneralPaymentMethodCodeType = "PayPalBalance"

	//
	// This value is not used.
	//
	GeneralPaymentMethodCodeTypeCustomCode GeneralPaymentMethodCodeType = "CustomCode"
)

//
// This enumerated type is used to indicate if an eBay site or category supports Motors National Listings and/or Motors Local Market listings.
//
type GeographicExposureCodeType string

const (

	//
	// If this enumeration value is returned, the eBay site or category only supports Motors National Listings for the corresponding Motors dealer subscription level/type.
	//
	GeographicExposureCodeTypeNational GeographicExposureCodeType = "National"

	//
	// If this enumeration value is returned, the eBay site or category only supports Motors Local Market Listings for the corresponding Motors dealer subscription level/type.
	//
	GeographicExposureCodeTypeLocalOnly GeographicExposureCodeType = "LocalOnly"

	//
	// If this enumeration value is returned, the eBay site or category supports Motors National Listings and Motors Local Market listing for the corresponding Motors dealer subscription level/type.
	//
	GeographicExposureCodeTypeLocalOptional GeographicExposureCodeType = "LocalOptional"

	//
	// Reserved for internal or future use.
	//
	GeographicExposureCodeTypeCustomCode GeographicExposureCodeType = "CustomCode"
)

//
// This enumerated type defines the values that can be used in the <b>CallMode</b> field of the <b>GetAllBidders</b> call request to control which type of auction bidders are returned in the response.
//
type GetAllBiddersModeCodeType string

const (

	//
	// This enumeration value is used if the user wants to retrieve all bidders on an active or recently-ended auction listing. This value can be used by any user, and it is the default value if the <b>CallMode</b> field is not included in the call request.
	//
	GetAllBiddersModeCodeTypeViewAll GetAllBiddersModeCodeType = "ViewAll"

	//
	// This enumeration value is used if the user wants to retrieve all non-winning bidders for a recently-ended auction listing. This value can be only be used by the seller of the item.
	//
	GetAllBiddersModeCodeTypeEndedListing GetAllBiddersModeCodeType = "EndedListing"

	//
	// This enumeration value is used if the user wants to retrieve all non-winning bidders, for a recently-ended auction listing, who are eligible for, and who accept Second Chance Offers. This value can be only be used by the seller of the item.  See <"http://pages.ebay.com/help/sell/second_chance_offer.html#when" target="_blank">When to use a Second Chance Offer</a> for more information on Second Chance Offers.
	//
	GetAllBiddersModeCodeTypeSecondChanceEligibleEndedListing GetAllBiddersModeCodeType = "SecondChanceEligibleEndedListing"

	//
	// Reserved for internal or future use.
	//
	GetAllBiddersModeCodeTypeCustomCode GetAllBiddersModeCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> This enumerated type is deprecated as the Gift Icon feature is no longer available on any eBay Marketplace sites.
// </span>
//
type GiftIconCodeType string

const (

	//
	// The listing feature is enabled for the site.
	//
	GiftIconCodeTypeEnabled GiftIconCodeType = "Enabled"

	//
	// The listing feature is disabled for the site.
	//
	GiftIconCodeTypeDisabled GiftIconCodeType = "Disabled"

	//
	// Reserved for internal or future use.
	//
	GiftIconCodeTypeCustomCode GiftIconCodeType = "CustomCode"
)

//
// Specifies a predefined subset of fields to return. The predefined set of fields
// can vary for different calls. Only applicable to certain calls (see request types
// that include a GranularityLevel property). For calls that support this filter, see
// the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/eBay-SelectingFields.html">eBay Features Guide</a> for a list of the output fields that are returned for
// each level. Only one level can be specified at a time. For GetSellerList, use
// DetailLevel or GranularityLevel in a given request, but not both. For
// GetSellerList, if GranularityLevel is specified, DetailLevel is ignored.
//
type GranularityLevelCodeType string

const (

	//
	// (in) For each record in the response, retrieves less data than Medium.
	// See the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/eBay-SelectingFields.html">eBay Features Guide</a> for a list of the output fields
	// that are returned when this level is specified.
	//
	GranularityLevelCodeTypeCoarse GranularityLevelCodeType = "Coarse"

	//
	// For each record in the response, retrieves more data than Medium.
	// See the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/eBay-SelectingFields.html">eBay Features Guide</a> for a list of the output fields
	// that are returned when this level is specified.
	//
	GranularityLevelCodeTypeFine GranularityLevelCodeType = "Fine"

	//
	// For each record in the response, retrieves more data than Coarse and less data
	// than Fine. See the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/eBay-SelectingFields.html">eBay Features Guide</a> for a list of the output fields
	// that are returned when this level is specified.
	//
	GranularityLevelCodeTypeMedium GranularityLevelCodeType = "Medium"

	GranularityLevelCodeTypeCustomCode GranularityLevelCodeType = "CustomCode"
)

//
// How packaging/handling cost is to be determined for <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-AnItem.html#CombinedInvoice">Combined Invoice</a>
// orders.
//
type HandlingNameCodeType string

const (

	//
	// After eBay assigns the highest packaging/handling cost to the first item, the
	// packaging/handling cost for each additional item is $n.
	//
	HandlingNameCodeTypeEachAdditionalAmount HandlingNameCodeType = "EachAdditionalAmount"

	//
	// After eBay assigns the highest packaging/handling cost to the first item, the
	// packaging/handling cost for each additional item is to be reduced by amount N.
	//
	HandlingNameCodeTypeEachAdditionalAmountOff HandlingNameCodeType = "EachAdditionalAmountOff"

	//
	// After eBay assigns the highest packaging/handling cost to the first item, the
	// packaging/handling cost for each additional item is to be reduced by N percent.
	//
	HandlingNameCodeTypeEachAdditionalPercentOff HandlingNameCodeType = "EachAdditionalPercentOff"

	//
	// The total packaging/handling cost is to be the sum of the
	// packaging/handling costs of the individual items.
	//
	HandlingNameCodeTypeIndividualHandlingFee HandlingNameCodeType = "IndividualHandlingFee"

	//
	// The packaging/handling cost is to be N for the entire order.
	//
	HandlingNameCodeTypeCombinedHandlingFee HandlingNameCodeType = "CombinedHandlingFee"

	//
	// Reserved for internal or future use.
	//
	HandlingNameCodeTypeCustomCode HandlingNameCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> This enumerated type is deprecated as the Highlighted listing feature is no longer available on any eBay Marketplace sites.
// </span>
//
type HighlightCodeType string

const (

	//
	// The listing feature is enabled for the site.
	//
	HighlightCodeTypeEnabled HighlightCodeType = "Enabled"

	//
	// The listing feature is disabled for the site.
	//
	HighlightCodeTypeDisabled HighlightCodeType = "Disabled"

	//
	// Reserved for internal or future use.
	//
	HighlightCodeTypeCustomCode HighlightCodeType = "CustomCode"
)

//
// Enumerated type containing a list of visit counter styles that can be used in an eBay listing to track page visits.
//
type HitCounterCodeType string

const (

	//
	// No hit counter. The number of page views will not be available.
	//
	HitCounterCodeTypeNoHitCounter HitCounterCodeType = "NoHitCounter"

	//
	// A basic style hit counter (US only). Non-US sites will return errors if they use HonestyStyle as input, and should use BasicStyle instead.
	//
	HitCounterCodeTypeHonestyStyle HitCounterCodeType = "HonestyStyle"

	//
	// A green LED, computer-style hit counter (US only). Non-US sites will return errors if they use GreenLED as input, and should use RetroStyle instead.
	//
	HitCounterCodeTypeGreenLED HitCounterCodeType = "GreenLED"

	//
	// A hidden hit counter (US only). The number of page views will only be available to
	// the item's seller. For faster "View Item" page loads, use HiddenStyle.
	//
	HitCounterCodeTypeHidden HitCounterCodeType = "Hidden"

	//
	// A basic style hit counter.
	//
	HitCounterCodeTypeBasicStyle HitCounterCodeType = "BasicStyle"

	//
	// A retro, computer-style hit counter.
	//
	HitCounterCodeTypeRetroStyle HitCounterCodeType = "RetroStyle"

	//
	// A hidden hit counter. The number of page views will only be available to
	// the item's seller.
	//
	HitCounterCodeTypeHiddenStyle HitCounterCodeType = "HiddenStyle"

	//
	// Reserved for internal or future use
	//
	HitCounterCodeTypeCustomCode HitCounterCodeType = "CustomCode"
)

//
// Specifies whether a listing feature is available for the site specified in the request.
//
type HomePageFeaturedCodeType string

const (

	//
	// The listing feature is enabled for the site.
	//
	HomePageFeaturedCodeTypeEnabled HomePageFeaturedCodeType = "Enabled"

	//
	// The listing feature is disabled for the site.
	//
	HomePageFeaturedCodeTypeDisabled HomePageFeaturedCodeType = "Disabled"

	//
	// Reserved for internal or future use.
	//
	HomePageFeaturedCodeTypeCustomCode HomePageFeaturedCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note:</b>
// This enumerated type is deprecated since it is only applicable to the eBay India site, and this marketplace is no longer available.</span>
//
type INEscrowWorkflowTimelineCodeType string

const (

	//
	// Default Escrow timelines apply.
	//
	INEscrowWorkflowTimelineCodeTypeDefault INEscrowWorkflowTimelineCodeType = "Default"

	//
	// Special Escrow timelines for Workflow A applies.
	//
	INEscrowWorkflowTimelineCodeTypeWorkflowA INEscrowWorkflowTimelineCodeType = "WorkflowA"

	//
	// Special Escrow timelines for Workflow B applies.
	//
	INEscrowWorkflowTimelineCodeTypeWorkflowB INEscrowWorkflowTimelineCodeType = "WorkflowB"

	//
	// (out) Reserved for internal or future use.
	//
	INEscrowWorkflowTimelineCodeTypeCustomCode INEscrowWorkflowTimelineCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible states of a buyer's Item Not Received (INR) inquiry.
//
type InquiryStatusCodeType string

const (

	//
	// This value indicates that the INR inquiry is invalid.
	//
	InquiryStatusCodeTypeInvalid InquiryStatusCodeType = "Invalid"

	//
	// This value indicates that the INR inquiry is not applicable.
	//
	InquiryStatusCodeTypeNotApplicable InquiryStatusCodeType = "NotApplicable"

	//
	// This value indicates that the INR inquiry is pending a response from the buyer.
	//
	InquiryStatusCodeTypeTrackInquiryPendingBuyerResponse InquiryStatusCodeType = "TrackInquiryPendingBuyerResponse"

	//
	// This value indicates that the INR inquiry is pending a response from the  seller.
	//
	InquiryStatusCodeTypeTrackInquiryPendingSellerResponse InquiryStatusCodeType = "TrackInquiryPendingSellerResponse"

	//
	// This value indicates that the INR inquiry was closed with a refund issued to the buyer.
	//
	InquiryStatusCodeTypeTrackInquiryClosedWithRefund InquiryStatusCodeType = "TrackInquiryClosedWithRefund"

	//
	// This value indicates that the INR inquiry was closed with no refund issued to the buyer.
	//
	InquiryStatusCodeTypeTrackInquiryClosedNoRefund InquiryStatusCodeType = "TrackInquiryClosedNoRefund"

	//
	// This value indicates that the INR inquiry was escalated to an eBay Money Back Guarantee case, and it is pending a response from the buyer.
	//
	InquiryStatusCodeTypeTrackInquiryEscalatedPendingBuyer InquiryStatusCodeType = "TrackInquiryEscalatedPendingBuyer"

	//
	// This value indicates that the INR inquiry was escalated to an eBay Money Back Guarantee case, and it is pending a response from the seller.
	//
	InquiryStatusCodeTypeTrackInquiryEscalatedPendingSeller InquiryStatusCodeType = "TrackInquiryEscalatedPendingSeller"

	//
	// This value indicates that the INR inquiry was escalated to an eBay Money Back Guarantee case, and it is pending a response from eBay Customer Support.
	//
	InquiryStatusCodeTypeTrackInquiryEscalatedPendingCS InquiryStatusCodeType = "TrackInquiryEscalatedPendingCS"

	//
	// This value indicates that the INR inquiry was escalated to an eBay Money Back Guarantee case, but it was closed with a refund issued to the buyer.
	//
	InquiryStatusCodeTypeTrackInquiryEscalatedClosedWithRefund InquiryStatusCodeType = "TrackInquiryEscalatedClosedWithRefund"

	//
	// This value indicates that the INR inquiry was escalated to an eBay Money Back Guarantee case, but it was closed with no refund issued to the buyer.
	//
	InquiryStatusCodeTypeTrackInquiryEscalatedClosedNoRefund InquiryStatusCodeType = "TrackInquiryEscalatedClosedNoRefund"

	//
	// Reserved for internal or future use.
	//
	InquiryStatusCodeTypeCustomCode InquiryStatusCodeType = "CustomCode"
)

//
// This type is deprecated, as shipping insurance is no longer applicable or supported in eBay APIs.
//
type InsuranceOptionCodeType string

const (

	//
	// The seller offers the buyer the choice of paying
	// for shipping insurance or not.
	//
	InsuranceOptionCodeTypeOptional InsuranceOptionCodeType = "Optional"

	//
	// The seller requires that the buyer pay for
	// shipping insurance.
	//
	InsuranceOptionCodeTypeRequired InsuranceOptionCodeType = "Required"

	//
	// The seller does not offer shipping insurance to the buyer.
	//
	InsuranceOptionCodeTypeNotOffered InsuranceOptionCodeType = "NotOffered"

	//
	// The seller is not charging separately for shipping
	// insurance costs; any insurance is already included in the
	// base shipping cost.
	//
	InsuranceOptionCodeTypeIncludedInShippingHandling InsuranceOptionCodeType = "IncludedInShippingHandling"

	//
	// Shipping insurance is not offered as a separate option on the site
	// where the item is listed. (Some shipping services, such as
	// DE_InsuredExpressOrCourier, include insurance as part of the service.) If
	// another insurance option is specified in the listing request and the site does
	// not support shipping insurance as a separate option, eBay will reset the
	// insurance option to this value. At the time of this writing, this option is
	// only meaningful for the eBay Germany, Austria, and Switzerland sites.
	//
	InsuranceOptionCodeTypeNotOfferedOnSite InsuranceOptionCodeType = "NotOfferedOnSite"

	//
	// Reserved for internal or future use
	//
	InsuranceOptionCodeTypeCustomCode InsuranceOptionCodeType = "CustomCode"
)

//
// This type is deprecated, as shipping insurance is no longer applicable or supported in eBay APIs.
//
type InsuranceSelectedCodeType string

const (

	//
	// Shipping insurance was not offered.
	//
	InsuranceSelectedCodeTypeNotOffered InsuranceSelectedCodeType = "NotOffered"

	//
	// Shipping insurance was offered but not selected.
	//
	InsuranceSelectedCodeTypeOfferedNotSelected InsuranceSelectedCodeType = "OfferedNotSelected"

	//
	// Shipping insurance was offered and selected.
	//
	InsuranceSelectedCodeTypeOfferedSelected InsuranceSelectedCodeType = "OfferedSelected"

	//
	// Shipping insurance was required.
	//
	InsuranceSelectedCodeTypeRequired InsuranceSelectedCodeType = "Required"

	//
	// Shipping insurance was included in Shipping and Handling fee.
	//
	InsuranceSelectedCodeTypeIncludedInShippingHandling InsuranceSelectedCodeType = "IncludedInShippingHandling"

	//
	// (out) Reserved for internal or future use.
	//
	InsuranceSelectedCodeTypeCustomCode InsuranceSelectedCodeType = "CustomCode"
)

//
// Defines options to track a listing by the eBay item ID or the seller's SKU.
// In some calls, elements of this type are only returned in the response when
// the value is set to SKU on the item.
//
type InventoryTrackingMethodCodeType string

const (

	//
	// Indicates the seller prefers to track the listing by its eBay item ID.
	// This is the default for all listings.
	//
	InventoryTrackingMethodCodeTypeItemID InventoryTrackingMethodCodeType = "ItemID"

	//
	// Indicates the seller prefers to track the listing by their own SKU.
	// <br/><br/>
	// When you track by SKU, it means you can pass in your SKU instead of
	// the eBay item ID in other calls that support SKU as an input field.
	// If you choose SKU as your tracking preference for a listing,
	// the value in <b>Item.SKU</b> must be unique across your active listings.
	// You cannot create new listings with the same <b>Item.SKU</b> value while
	// the listing is active (that is, until the existing listing with that
	// SKU has ended).
	// <br/><br/>
	// However, you can use <b>ReviseInventoryStatus</b> to update the quantity
	// and/or price for the existing SKU as needed. When revising a listing
	// where the <b>InventoryTrackingMethod</b> was set to SKU, you must pass in both
	// the <b>InventoryTrackingMethod</b> tag (with the value set to SKU) and the SKU
	// tag with the SKU value from your original listing.
	//
	InventoryTrackingMethodCodeTypeSKU InventoryTrackingMethodCodeType = "SKU"

	//
	// Reserved for internal or future use.
	//
	InventoryTrackingMethodCodeTypeCustomCode InventoryTrackingMethodCodeType = "CustomCode"
)

//
// This enumerated type list the possible status values regarding whether or not a buyer received an order line item within the estimated delivery date timeframe.
//
type ItemArrivedWithinEDDCodeType string

const (

	//
	// This value indicates that the question about the order line item arriving within the estimated delivery time was never surfaced to the buyer when the buyer left feedback for the transaction.
	//
	ItemArrivedWithinEDDCodeTypeEddQuestionWasNotAsked ItemArrivedWithinEDDCodeType = "EddQuestionWasNotAsked"

	//
	// This value indicates that the question about the order line item arriving within the estimated delivery time was surfaced to the buyer, but the buyer did not answer this question when they left feedback for the transaction.
	//
	ItemArrivedWithinEDDCodeTypeBuyerDidntProvideAnswer ItemArrivedWithinEDDCodeType = "BuyerDidntProvideAnswer"

	//
	// This value indicates that the buyer indicated that the order line item did arrive within the estimated delivery date when they left feedback for the transaction.
	//
	ItemArrivedWithinEDDCodeTypeBuyerIndicatedItemArrivedWithinEDDRange ItemArrivedWithinEDDCodeType = "BuyerIndicatedItemArrivedWithinEDDRange"

	//
	// This value indicates that the buyer indicated that the order line item did not arrive within the estimated delivery date when they left feedback for the transaction.
	//
	ItemArrivedWithinEDDCodeTypeBuyerIndicatedItemNotArrivedWithinEDDRange ItemArrivedWithinEDDCodeType = "BuyerIndicatedItemNotArrivedWithinEDDRange"

	//
	// (out) Reserved for internal or future use.
	//
	ItemArrivedWithinEDDCodeTypeCustomCode ItemArrivedWithinEDDCodeType = "CustomCode"
)

//
// Used to indicate whether the parts compatibility feature is enabled for a
// category.
//
type ItemCompatibilityEnabledCodeType string

const (

	//
	// Parts Compatibility is not supported for the given category.
	//
	ItemCompatibilityEnabledCodeTypeDisabled ItemCompatibilityEnabledCodeType = "Disabled"

	//
	// Parts Compatibility may be entered by application only for the given category.
	// Entering parts compatibility by application specifies the assemblies (e.g., a
	// specific year, make, and model of car) to which the item applies. Parts
	// compatibility by application can be specified by listing with a catalog
	// product that supports parts compatibility or by specifying parts compatibility
	// by application manually (<b> Item.ItemCompatibilityList</b>).
	//
	ItemCompatibilityEnabledCodeTypeByApplication ItemCompatibilityEnabledCodeType = "ByApplication"

	//
	// Parts Compatibility may be entered by specification only for the given
	// category. Entering parts compatibility by specification involves specifying
	// the part's relevant dimensions or characteristics (e.g., Section Width, Aspect
	// Ratio, Rim Diammeter, Load Index, and Speed Rating values for a tire) using
	// attributes.
	//
	ItemCompatibilityEnabledCodeTypeBySpecification ItemCompatibilityEnabledCodeType = "BySpecification"

	//
	// (out) Reserved for internal or future use.
	//
	ItemCompatibilityEnabledCodeTypeCustomCode ItemCompatibilityEnabledCodeType = "CustomCode"
)

//
// Specifies a predefined subset of item conditions. The predefined set of fields
// can vary for different calls.
//
type ItemConditionCodeType string

const (

	//
	// The seller specified the Item Condition as New, or
	// did not specify a condition.
	// (Excludes items that the seller listed as Used.)
	//
	ItemConditionCodeTypeNew ItemConditionCodeType = "New"

	//
	// The seller specified the Item Condition as Used, or
	// did not specify a condition.
	// (Excludes items that the seller listed as New.)
	//
	ItemConditionCodeTypeUsed ItemConditionCodeType = "Used"

	//
	// (out) Reserved for internal or future use.
	//
	ItemConditionCodeTypeCustomCode ItemConditionCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type ItemFormatSortFilterCodeType string

const (

	//
	// This value is not used.
	//
	ItemFormatSortFilterCodeTypeShowAnyItems ItemFormatSortFilterCodeType = "ShowAnyItems"

	//
	// This value is not used.
	//
	ItemFormatSortFilterCodeTypeShowItemsWithBINFirst ItemFormatSortFilterCodeType = "ShowItemsWithBINFirst"

	//
	// This value is not used.
	//
	ItemFormatSortFilterCodeTypeShowOnlyItemsWithBIN ItemFormatSortFilterCodeType = "ShowOnlyItemsWithBIN"

	//
	// This value is not used.
	//
	ItemFormatSortFilterCodeTypeShowOnlyStoreItems ItemFormatSortFilterCodeType = "ShowOnlyStoreItems"

	//
	// This value is not used.
	//
	ItemFormatSortFilterCodeTypeCustomCode ItemFormatSortFilterCodeType = "CustomCode"
)

//
// Type that represents the unique identifier for an eBay listing.
//
type ItemIDType string

//
// This enumerated type is deprecated.
//
type ItemSortFilterCodeType string

const (

	//
	// This value is not used.
	//
	ItemSortFilterCodeTypeEndingLast ItemSortFilterCodeType = "EndingLast"

	//
	// This value is not used.
	//
	ItemSortFilterCodeTypeEndingSoonest ItemSortFilterCodeType = "EndingSoonest"

	//
	// Sort items by price, with the highest price first.
	//
	ItemSortFilterCodeTypeHighestPrice ItemSortFilterCodeType = "HighestPrice"

	//
	// This value is not used.
	//
	ItemSortFilterCodeTypeLowestPrice ItemSortFilterCodeType = "LowestPrice"

	//
	// This value is not used.
	//
	ItemSortFilterCodeTypeNewlyListed ItemSortFilterCodeType = "NewlyListed"

	//
	// This value is not used.
	//
	ItemSortFilterCodeTypeRandomlySelected ItemSortFilterCodeType = "RandomlySelected"

	//
	// This value is not used.
	//
	ItemSortFilterCodeTypeCustomCode ItemSortFilterCodeType = "CustomCode"
)

//
// This enumerated type contains the possible values that can be used when sorting results in the <b>GetItemsAwaitingFeedback</b>, <b>GetMyeBayBuying</b>, and <b>GetMyeBaySelling</b> calls. Assume that each of sort values can be used in any of the three calls above unless it is specifically called out that a certain enumeration value will not work/is not applicable to a call.
//
type ItemSortTypeCodeType string

const (

	//
	// This enumeration value is used to sort listings and orders according to Item ID value in ascending order.
	//
	ItemSortTypeCodeTypeItemID ItemSortTypeCodeType = "ItemID"

	//
	// This enumeration value is used to sort listings according to item price value in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypePrice ItemSortTypeCodeType = "Price"

	//
	// This enumeration value is used to sort listings or orders according to the starting price value in ascending order.  This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeStartPrice ItemSortTypeCodeType = "StartPrice"

	//
	// This enumeration value is used to sort listings or orders according to listing title in ascending (alphabetical) order.
	//
	ItemSortTypeCodeTypeTitle ItemSortTypeCodeType = "Title"

	//
	// This enumeration value is used to sort auction listings according to the number of bids received in ascending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeBidCount ItemSortTypeCodeType = "BidCount"

	//
	// This enumeration value is used to sort fixed-price listings and orders according to item quantity in ascending order. This enumeration value is only applicable to fixed-price listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeQuantity ItemSortTypeCodeType = "Quantity"

	//
	// This enumeration value is used to sort listings and orders according to start time in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeStartTime ItemSortTypeCodeType = "StartTime"

	//
	// This enumeration value is used to sort listings and orders according to end time in ascending order.
	//
	ItemSortTypeCodeTypeEndTime ItemSortTypeCodeType = "EndTime"

	//
	// This enumeration value is used to sort listings and orders according to the seller's user ID in ascending (alphabetical) order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeSellerUserID ItemSortTypeCodeType = "SellerUserID"

	//
	// This enumeration value is used to sort active listings and orders according to the time left before listing ends (in ascending order). This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeTimeLeft ItemSortTypeCodeType = "TimeLeft"

	//
	// This enumeration value is used to sort listings according to the listing duration in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeListingDuration ItemSortTypeCodeType = "ListingDuration"

	//
	// This enumeration value is used to sort listings and orders according to the listing type in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeListingType ItemSortTypeCodeType = "ListingType"

	//
	// This enumeration value is used to sort listings and orders according to the current/final price in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeCurrentPrice ItemSortTypeCodeType = "CurrentPrice"

	//
	// This enumeration value is used to sort auction listings and orders according to the reserve price in ascending order. This enumeration value is only applicable when a seller wants to retrieve information on their own auction listings that have reserve prices set on them. This enumeration is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeReservePrice ItemSortTypeCodeType = "ReservePrice"

	//
	// This enumeration value is used by a buyer to sort auction listings and orders according to the maximum bid price that they placed on an auction listing in ascending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeMaxBid ItemSortTypeCodeType = "MaxBid"

	//
	// This enumeration value is used to sort auction listings according to the number of unique bidders in ascending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBidderCount ItemSortTypeCodeType = "BidderCount"

	//
	// This enumeration value is used to sort auction listings according to the user ID of the highest bidder in ascending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeHighBidderUserID ItemSortTypeCodeType = "HighBidderUserID"

	//
	// This enumeration value is used to sort listings according to the buyer's user ID in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBuyerUserID ItemSortTypeCodeType = "BuyerUserID"

	//
	// This enumeration value is used to sort listings according to the buyer's location in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBuyerPostalCode ItemSortTypeCodeType = "BuyerPostalCode"

	//
	// This enumeration value is used to sort listings according to the buyer's email address in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls, and a buyer's email address will only be exposed to the seller withing two weeks of order purchase.
	//
	ItemSortTypeCodeTypeBuyerEmail ItemSortTypeCodeType = "BuyerEmail"

	//
	// This enumeration value is used to sort listings and orders according to the seller's email address in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeSellerEmail ItemSortTypeCodeType = "SellerEmail"

	//
	// This enumeration value is used to sort orders according to item price value in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeTotalPrice ItemSortTypeCodeType = "TotalPrice"

	//
	// This enumeration value is used to sort listings and orders according to the number of users watching the listing in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeWatchCount ItemSortTypeCodeType = "WatchCount"

	//
	// This enumeration value is used to sort active listings according to the number of Best Offers that the listing has received in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBestOfferCount ItemSortTypeCodeType = "BestOfferCount"

	//
	// This enumeration value is used to sort listings and orders according to the number of questions that the listing has received in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeQuestionCount ItemSortTypeCodeType = "QuestionCount"

	//
	// This enumeration value is used to sort orders according to the cost to ship one unit of the order line item in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeShippingServiceCost ItemSortTypeCodeType = "ShippingServiceCost"

	//
	// This enumeration value is used to sort orders according to the type of feedback that a user received in ascending order. The Feedback ratings are defined in <b>CommentTypeCodeType</b>.
	//
	ItemSortTypeCodeTypeFeedbackReceived ItemSortTypeCodeType = "FeedbackReceived"

	//
	// This enumeration value is used to sort orders according to the type of feedback that a user left for another user in ascending order. The Feedback ratings are defined in <b>CommentTypeCodeType</b>.
	//
	ItemSortTypeCodeTypeFeedbackLeft ItemSortTypeCodeType = "FeedbackLeft"

	//
	// This enumeration value is used to sort listings and orders according to the eBay user ID of the order partner/owner of listing in ascending order.
	//
	ItemSortTypeCodeTypeUserID ItemSortTypeCodeType = "UserID"

	//
	// This enumeration value is used to sort order line items according to the quantity sold in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeQuantitySold ItemSortTypeCodeType = "QuantitySold"

	//
	// This enumeration value is used by the buyer in a <b>GetMyeBayBuying</b> call to sort all Best Offers made in ascending order according to the dollar amount of the Best Offer. This sort  option is only applicable if the buyer has at least one pending Best Offer on an order line item. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeBestOffer ItemSortTypeCodeType = "BestOffer"

	//
	// This enumeration value is used to sort order line items according to quantity available for purchase in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call, and it is only relevant to the <b>WatchList</b> container of the <b>GetMyeBayBuying</b> call.
	//
	ItemSortTypeCodeTypeQuantityAvailable ItemSortTypeCodeType = "QuantityAvailable"

	//
	// This enumeration value is used to sort purchased line items according to the quantity purchased by the buyer in ascending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeQuantityPurchased ItemSortTypeCodeType = "QuantityPurchased"

	//
	// This enumeration value is no longer applicable as Half.com has been shut down, and eBay marketplace is the only remaining platform.
	//
	ItemSortTypeCodeTypeWonPlatform ItemSortTypeCodeType = "WonPlatform"

	//
	// This enumeration value is no longer applicable as Half.com has been shut down, and eBay marketplace is the only remaining platform.
	//
	ItemSortTypeCodeTypeSoldPlatform ItemSortTypeCodeType = "SoldPlatform"

	//
	// This enumeration value is used to sort listings according to the listing duration in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeListingDurationDescending ItemSortTypeCodeType = "ListingDurationDescending"

	//
	// This enumeration value is used to sort listings and orders according to the listing type in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeListingTypeDescending ItemSortTypeCodeType = "ListingTypeDescending"

	//
	// This enumeration value is used to sort listings and orders according to the current/final price in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeCurrentPriceDescending ItemSortTypeCodeType = "CurrentPriceDescending"

	//
	// This enumeration value is used to sort auction listings and orders according to the reserve price in descending order. This enumeration value is only applicable when a seller wants to retrieve information on their own auction listings that have reserve prices set on them. This enumeration is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeReservePriceDescending ItemSortTypeCodeType = "ReservePriceDescending"

	//
	// This enumeration value is used by a buyer to sort auction listings and orders according to the maximum bid price that they placed on an auction listing in descending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeMaxBidDescending ItemSortTypeCodeType = "MaxBidDescending"

	//
	// This enumeration value is used to sort auction listings according to the number of unique bidders in descending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBidderCountDescending ItemSortTypeCodeType = "BidderCountDescending"

	//
	// This enumeration value is used to sort auction listings according to the user ID of the highest bidder in descending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeHighBidderUserIDDescending ItemSortTypeCodeType = "HighBidderUserIDDescending"

	//
	// This enumeration value is used to sort listings according to the buyer's user ID in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBuyerUserIDDescending ItemSortTypeCodeType = "BuyerUserIDDescending"

	//
	// This enumeration value is used to sort listings according to the buyer's location in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBuyerPostalCodeDescending ItemSortTypeCodeType = "BuyerPostalCodeDescending"

	//
	// This enumeration value is used to sort listings according to the buyer's email address in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls, and a buyer's email address will only be exposed to the seller withing two weeks of order purchase.
	//
	ItemSortTypeCodeTypeBuyerEmailDescending ItemSortTypeCodeType = "BuyerEmailDescending"

	//
	// This enumeration value is used to sort listings and orders according to the seller's email address in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeSellerEmailDescending ItemSortTypeCodeType = "SellerEmailDescending"

	//
	// This enumeration value is used to sort orders according to item price value in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeTotalPriceDescending ItemSortTypeCodeType = "TotalPriceDescending"

	//
	// This enumeration value is used to sort listings and orders according to the number of users watching the listing in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeWatchCountDescending ItemSortTypeCodeType = "WatchCountDescending"

	//
	// This enumeration value is used to sort listings and orders according to the number of questions that the listing has received in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeQuestionCountDescending ItemSortTypeCodeType = "QuestionCountDescending"

	//
	// This enumeration value is used to sort orders according to the cost to ship one unit of the order line item in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeShippingServiceCostDescending ItemSortTypeCodeType = "ShippingServiceCostDescending"

	//
	// This enumeration value is used to sort orders according to the type of feedback that a user received in descending order. The Feedback ratings are defined in <b>CommentTypeCodeType</b>.
	//
	ItemSortTypeCodeTypeFeedbackReceivedDescending ItemSortTypeCodeType = "FeedbackReceivedDescending"

	//
	// This enumeration value is used to sort orders according to the type of feedback that a user left for another user in descending order. The Feedback ratings are defined in <b>CommentTypeCodeType</b>.
	//
	ItemSortTypeCodeTypeFeedbackLeftDescending ItemSortTypeCodeType = "FeedbackLeftDescending"

	//
	// This enumeration value is used to sort listings and orders according to the eBay user ID of the order partner/owner of listing in descending order.
	//
	ItemSortTypeCodeTypeUserIDDescending ItemSortTypeCodeType = "UserIDDescending"

	//
	// This enumeration value is used to sort order line items according to the quantity sold in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeQuantitySoldDescending ItemSortTypeCodeType = "QuantitySoldDescending"

	//
	// This enumeration value is used to sort active listings according to the number of Best Offers that the listing has received in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBayBuying</b> calls.
	//
	ItemSortTypeCodeTypeBestOfferCountDescending ItemSortTypeCodeType = "BestOfferCountDescending"

	//
	// This enumeration value is used to sort order line items according to quantity available for purchase in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call, and it is only relevant to the <b>WatchList</b> container of the <b>GetMyeBayBuying</b> call.
	//
	ItemSortTypeCodeTypeQuantityAvailableDescending ItemSortTypeCodeType = "QuantityAvailableDescending"

	//
	// This enumeration value is used to sort purchased line items according to the quantity purchased by the buyer in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeQuantityPurchasedDescending ItemSortTypeCodeType = "QuantityPurchasedDescending"

	//
	// This enumeration value is used by the buyer in a <b>GetMyeBayBuying</b> call to sort all Best Offers made in descending order according to the dollar amount of the Best Offer. This sort  option is only applicable if the buyer has at least one pending Best Offer on an order line item. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeBestOfferDescending ItemSortTypeCodeType = "BestOfferDescending"

	//
	// This enumeration value is used to sort listings and orders according to Item ID value in descending order.
	//
	ItemSortTypeCodeTypeItemIDDescending ItemSortTypeCodeType = "ItemIDDescending"

	//
	// This enumeration value is used to sort listings according to item price value in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypePriceDescending ItemSortTypeCodeType = "PriceDescending"

	//
	// This enumeration value is used to sort listings or orders according to the starting price value in descending order.  This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeStartPriceDescending ItemSortTypeCodeType = "StartPriceDescending"

	//
	// This enumeration value is used to sort listings or orders according to listing title in descending (alphabetical) order.
	//
	ItemSortTypeCodeTypeTitleDescending ItemSortTypeCodeType = "TitleDescending"

	//
	// This enumeration value is used to sort auction listings according to the number of bids received in descending order. This enumeration value is only applicable to auction listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeBidCountDescending ItemSortTypeCodeType = "BidCountDescending"

	//
	// This enumeration value is used to sort fixed-price listings and orders according to item quantity in descending order. This enumeration value is only applicable to fixed-price listings, and is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeQuantityDescending ItemSortTypeCodeType = "QuantityDescending"

	//
	// This enumeration value is used to sort listings and orders according to start time in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeStartTimeDescending ItemSortTypeCodeType = "StartTimeDescending"

	//
	// This enumeration value is used to sort listings and orders according to end time in descending order.
	//
	ItemSortTypeCodeTypeEndTimeDescending ItemSortTypeCodeType = "EndTimeDescending"

	//
	// This enumeration value is used to sort listings and orders according to the seller's user ID in descending order. This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> or <b>GetMyeBaySelling</b> calls.
	//
	ItemSortTypeCodeTypeSellerUserIDDescending ItemSortTypeCodeType = "SellerUserIDDescending"

	//
	// This enumeration value is used to sort active listings and orders according to the time left before listing ends (in descending order). This enumeration value is not applicable to the <b>GetItemsAwaitingFeedback</b> call.
	//
	ItemSortTypeCodeTypeTimeLeftDescending ItemSortTypeCodeType = "TimeLeftDescending"

	//
	// This enumeration value is no longer applicable as Half.com has been shut down, and eBay marketplace is the only remaining platform.
	//
	ItemSortTypeCodeTypeWonPlatformDescending ItemSortTypeCodeType = "WonPlatformDescending"

	//
	// This enumeration value is no longer applicable as Half.com has been shut down, and eBay marketplace is the only remaining platform.
	//
	ItemSortTypeCodeTypeSoldPlatformDescending ItemSortTypeCodeType = "SoldPlatformDescending"

	//
	// This enumeration value is used by the seller of a classified ad listing in a <b>GetMyeBaySelling</b> call to sort classified ad listings according to the total number of leads (prospective buyer inquiries) in ascending order. Each lead involves an email to the buyer, and the <b>LeadCount</b> value includes read and unread emails.
	//
	ItemSortTypeCodeTypeLeadCount ItemSortTypeCodeType = "LeadCount"

	//
	// This enumeration value is used by the seller of a classified ad listing in a <b>GetMyeBaySelling</b> call to sort classified ad listings according to the number of new leads (prospective buyer inquiries) in ascending order. Each lead involves an email to the buyer, and the <b>NewLeadCount</b> value only includes unread emails.
	//
	ItemSortTypeCodeTypeNewLeadCount ItemSortTypeCodeType = "NewLeadCount"

	//
	// This enumeration value is used by the seller of a classified ad listing in a <b>GetMyeBaySelling</b> call to sort classified ad listings according to the total number of leads (prospective buyer inquiries) in descending order. Each lead involves an email to the buyer, and the <b>LeadCount</b> value includes read and unread emails.
	//
	ItemSortTypeCodeTypeLeadCountDescending ItemSortTypeCodeType = "LeadCountDescending"

	//
	// This enumeration value is used by the seller of a classified ad listing in a <b>GetMyeBaySelling</b> call to sort classified ad listings according to the number of new leads (prospective buyer inquiries) in descending order. Each lead involves an email to the buyer, and the <b>NewLeadCount</b> value only includes unread emails.
	//
	ItemSortTypeCodeTypeNewLeadCountDescending ItemSortTypeCodeType = "NewLeadCountDescending"

	//
	// The pay-per-lead feature is no longer available, so this value is no longer
	// applicable.
	//
	ItemSortTypeCodeTypeClassifiedAdPayPerLeadFee ItemSortTypeCodeType = "ClassifiedAdPayPerLeadFee"

	//
	// The pay-per-lead feature is no longer available, so this value is no longer
	// applicable.
	//
	ItemSortTypeCodeTypeClassifiedAdPayPerLeadFeeDescending ItemSortTypeCodeType = "ClassifiedAdPayPerLeadFeeDescending"

	//
	// Reserved for internal or future use.
	//
	ItemSortTypeCodeTypeCustomCode ItemSortTypeCodeType = "CustomCode"
)

//
// This enumerated type is used by <b>GetItem</b>, and indicates the source for an Item Specific.
//
type ItemSpecificSourceCodeType string

const (

	//
	// This enumeration value indicates that the corresponding Item Specific was specified by the seller in Add/Revise/Relist call or flow. In an Add/Revise/Relist API call, Item Specifics for a listing are specified through the <b>ItemSpecifics.NameValueList</b> or <b>VariationSpecifics.NameValueList</b> (for a variation in a multiple-variation listing) containers.
	//
	ItemSpecificSourceCodeTypeItemSpecific ItemSpecificSourceCodeType = "ItemSpecific"

	//
	// This value is no longer applicable and should not be returned.
	//
	ItemSpecificSourceCodeTypeAttribute ItemSpecificSourceCodeType = "Attribute"

	//
	// This enumeration value indicates that the corresponding Item Specific was derived from a product in the eBay Catalog, and was automatically picked up by the listing when the seller created, revised, or relisted an item referencing and matching an eBay catalog product through the use of an ePID or GTIN value in the <b>ProductListingDetails</b> container.
	//
	ItemSpecificSourceCodeTypeProduct ItemSpecificSourceCodeType = "Product"

	//
	// Reserved for future use.
	//
	ItemSpecificSourceCodeTypeCustomCode ItemSpecificSourceCodeType = "CustomCode"
)

//
// This enumerated type is used to indicate whether an eBay marketplace and/or category supports the use of Item Specifics when creating, revising, or relisting an item.
//
type ItemSpecificsEnabledCodeType string

const (

	//
	// This enumeration value indicates that the seller may not use Item Specifics for the specified eBay marketplace or corresponding category.
	//
	ItemSpecificsEnabledCodeTypeDisabled ItemSpecificsEnabledCodeType = "Disabled"

	//
	// This enumeration value indicates that the seller may use Item Specifics for the specified eBay marketplace or corresponding category.
	//
	ItemSpecificsEnabledCodeTypeEnabled ItemSpecificsEnabledCodeType = "Enabled"

	//
	// (out) Reserved for internal or future use.
	//
	ItemSpecificsEnabledCodeTypeCustomCode ItemSpecificsEnabledCodeType = "CustomCode"
)

//
// Enumerated type containing values that provide more information on the type of
// filtering the buyer used when setting up a Saved Search in My eBay.
//
type ItemTypeCodeType string

const (

	//
	// When setting up filtering for the Saved Search, the buyer was only looking for
	// auction items (with or without the Buy It Now option), so only selected the <b>Auction</b> checkbox in the
	// <b>Format</b> dialog box. When this filter is used in a Saved Search,
	// fixed-price items and classified ad listings are not retrieved for the buyer.
	//
	ItemTypeCodeTypeAuctionItemsOnly ItemTypeCodeType = "AuctionItemsOnly"

	//
	// When setting up filtering for the Saved Search, the buyer was looking for all
	// fixed-price items and auction items with Buy It Now available, so only selected the
	// <b>Buy It Now</b> checkbox in the <b>Format</b> dialog box.
	// When this filter is used in a Saved Search, auction items (without the Buy It Now
	// option) and classified ad listings are not retrieved for the buyer.
	//
	ItemTypeCodeTypeFixedPricedItem ItemTypeCodeType = "FixedPricedItem"

	//
	// When setting up filtering for the Saved Search, the buyer was looking for all
	// items closely associated with the search term, so selected all buying formats
	// (Auction, Buy It Now, and Classified Ads). All items are retrieved for the buyer,
	// including auction items (with or without the Buy It Now option), fixed-price
	// items, and classified ad listings.
	//
	ItemTypeCodeTypeAllItems ItemTypeCodeType = "AllItems"

	//
	// When setting up filtering for the Saved Search, the buyer was only looking for
	// items sold by sellers with eBay stores, so selected the
	// <b>Sellers with eBay stores</b> checkbox in the
	// <b>Seller</b> dialog box. When this filter is used in a Saved Search,
	// only items for sale in an eBay store are retrieved for the buyer.
	//
	ItemTypeCodeTypeStoreInventoryOnly ItemTypeCodeType = "StoreInventoryOnly"

	//
	//
	// Excludes listings that have listing type set to StoresFixedPrice.
	// Excludes listings that have listing type set to AdType.
	// Excludes auction listings in which BuyItNowEnabled is false.
	//
	ItemTypeCodeTypeFixedPriceExcludeStoreInventory ItemTypeCodeType = "FixedPriceExcludeStoreInventory"

	//
	//
	// Excludes listings that have listing type set to StoresFixedPrice.
	//
	ItemTypeCodeTypeExcludeStoreInventory ItemTypeCodeType = "ExcludeStoreInventory"

	//
	//
	// Retrieves listings whether or not listing type is set to StoresFixedPrice;
	// include auction items.
	//
	ItemTypeCodeTypeAllItemTypes ItemTypeCodeType = "AllItemTypes"

	//
	//
	// Retrieves fixed-price items.
	// Whether StoresFixedPrice items are retrieved does not depend on the site default.
	// The StoresFixedPrice items are retrieved after the basic fixed price items.
	// Items are retrieved whether or not listing type is set to StoresFixedPrice.
	// Does not retrieve items for which listing type is AdType.
	// Does not retrieve auction items for which BuyItNowEnabled is false.
	//
	ItemTypeCodeTypeAllFixedPriceItemTypes ItemTypeCodeType = "AllFixedPriceItemTypes"

	//
	// Reserved for internal or future use.
	//
	ItemTypeCodeTypeCustomCode ItemTypeCodeType = "CustomCode"

	//
	// When setting up filtering for the Saved Search, the buyer was only looking for
	// classified ad listings, so only selected the <b>Classified ads</b> checkbox in the
	// <b>Format</b> dialog box. When this filter is used in a Saved Search,
	// auction (with or without the Buy It Now option) and fixed-price items
	// are not retrieved for the buyer.
	//
	ItemTypeCodeTypeClassifiedItemsOnly ItemTypeCodeType = "ClassifiedItemsOnly"

	//
	//
	// Restricts listings to return only items that have the Ad Format feature.
	//
	ItemTypeCodeTypeAdFormat ItemTypeCodeType = "AdFormat"
)

//
// This enumerated type contains the list of values that can be used by the seller to set
// the duration (number of days or Good 'Til Cancelled) of a listing.
// <br><br>
// Listing durations available to the seller may vary based on the site, category, listing
// type, and the seller's selling profile, so it is a best practice for the seller to call
// <b>GetCategoryFeatures</b> with <b>ListingDurations</b>
// included as a <b>FeatureID</b> value in the call request. The
// <b>GetCategoryFeatures</b> response will include the complete list
// of listing duration values that can be used for the various listing types.
//
type ListingDurationCodeType string

const (

	//
	// This value is used to set the duration of the listing to one day. A one-day listing
	// duration is typically only available to sellers with a Feedback score of 10 or
	// higher, so sellers with a Feedback score of less than 10 may be restricted from
	// using a one-day listing duration. The seller can call
	// <b>GetCategoryFeatures</b> with <b>ListingDurations</b>
	// included as a <b>FeatureID</b> value in the call request to see if the
	// one-day listing duration is available.
	// <br><br>
	// A one-day listing duration is generally applicable to an auction listing or to a
	// Real Estate Classified Ad.
	//
	ListingDurationCodeTypeDays_1 ListingDurationCodeType = "Days_1"

	//
	// This value is used to set the duration of the listing to three days.
	// <br><br>
	// A three-day listing duration is applicable to most listing types.
	//
	ListingDurationCodeTypeDays_3 ListingDurationCodeType = "Days_3"

	//
	// This value is used to set the duration of the listing to five days.
	// <br><br>
	// A five-day listing duration is applicable to most listing types.
	//
	ListingDurationCodeTypeDays_5 ListingDurationCodeType = "Days_5"

	//
	// This value is used to set the duration of the listing to seven days.
	// <br><br>
	// A seven-day listing duration is applicable to most listing types.
	//
	ListingDurationCodeTypeDays_7 ListingDurationCodeType = "Days_7"

	//
	// This value is used to set the duration of the listing to 10 days.
	// <br><br>
	// A 10-day listing duration is applicable to most listing types.
	//
	ListingDurationCodeTypeDays_10 ListingDurationCodeType = "Days_10"

	//
	// This value is used to set the duration of the listing to 14 days.
	// <br><br>
	// A 14-day listing duration is typically only applicable to Classified Ad listings
	// in specific categories.
	//
	ListingDurationCodeTypeDays_14 ListingDurationCodeType = "Days_14"

	//
	// This value is used to set the duration of the listing to 21 days.
	// <br><br>
	// A 21-day listing duration is typically only applicable to eBay Motors Local
	// Market vehicle listings, a listing type that is only available to eBay Motors
	// Dealers.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> This value is scheduled to be wired off for eBay Motors Local Listings, and Motors sellers can start using a 30-day listing duration instead (<code>Days_30</code>).
	// </span>
	//
	ListingDurationCodeTypeDays_21 ListingDurationCodeType = "Days_21"

	//
	// This value is used to set the duration of the listing to 30 days.
	// <br><br>
	// A 30-day listing duration is typically available for fixed-price listing, Classified Ad listings, and Real Estate auction listings.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> As of October 2018, this value was enabled for eBay Motors Local Listings, and the <code>Days_21</code> enumeration value will get wired off for  eBay Motors Local Listings.
	// </span>
	//
	ListingDurationCodeTypeDays_30 ListingDurationCodeType = "Days_30"

	//
	// This value is used to set the duration of the listing to 60 days.
	// <br><br>
	// A 60-day listing duration is typically only applicable to Classified Ad listings
	// in specific categories.
	//
	ListingDurationCodeTypeDays_60 ListingDurationCodeType = "Days_60"

	//
	// This value is used to set the duration of the listing to 90 days.
	// <br><br>
	// A 90-day listing duration is generally only applicable to a Real Estate Classified
	// Ad.
	//
	ListingDurationCodeTypeDays_90 ListingDurationCodeType = "Days_90"

	//
	// This value is used to set the duration of the listing to 120 days.
	// <br><br>
	// An 120-day listing duration is typically only applicable to Classified Ad listings
	// in specific categories.
	//
	ListingDurationCodeTypeDays_120 ListingDurationCodeType = "Days_120"

	//
	// This value is used to set the duration of the listing to "Good 'Til Cancelled". This
	// option is available for fixed-price and Classified Ad listings. "Good 'Til
	// Cancelled" fixed-price listings will be relisted automatically every 30 days until
	// all inventory is sold out (e.g., <b>Item.Quantity</b>=0 in a
	// single-variation fixed-price listing, or all occurences of
	// <b>Item.Variations.Variation.Quantity</b>=0 in a multi-variation
	// fixed-price listing), or the seller ends the fixed-price listing.
	//
	ListingDurationCodeTypeGTC ListingDurationCodeType = "GTC"

	//
	// This value is reserved for internal or future use.
	//
	ListingDurationCodeTypeCustomCode ListingDurationCodeType = "CustomCode"
)

//
// This enumerated type contains the list of values that can be used by the seller to set
// the duration of a Featured Gallery in a fixed-price listing. Once set for a listing, the
// Featured Gallery duration can be increased from 'Days_7' to 'Lifetime' (throughout
// life of listing), but the duration cannot be decreased from 'Lifetime' to 'Days_7'.
//
type ListingEnhancementDurationCodeType string

const (

	// This value sets the Featured Gallery duration to one day. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_1 ListingEnhancementDurationCodeType = "Days_1"

	// This value sets the Featured Gallery duration to two days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_2 ListingEnhancementDurationCodeType = "Days_2"

	// This value sets the Featured Gallery duration to three days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_3 ListingEnhancementDurationCodeType = "Days_3"

	// This value sets the Featured Gallery duration to four days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_4 ListingEnhancementDurationCodeType = "Days_4"

	// This value sets the Featured Gallery duration to five days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_5 ListingEnhancementDurationCodeType = "Days_5"

	// This value sets the Featured Gallery duration to six days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_6 ListingEnhancementDurationCodeType = "Days_6"

	// This value sets the Featured Gallery duration to seven days. If a
	// listing has a Featured Gallery duration of seven days, it is possible to revise that
	// item and set the Featured Gallery duration to 'Lifetime' (throughout
	// life of listing) (
	ListingEnhancementDurationCodeTypeDays_7 ListingEnhancementDurationCodeType = "Days_7"

	// This value sets the Featured Gallery duration to eight days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_8 ListingEnhancementDurationCodeType = "Days_8"

	// This value sets the Featured Gallery duration to nine days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_9 ListingEnhancementDurationCodeType = "Days_9"

	// This value sets the Featured Gallery duration to 10 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_10 ListingEnhancementDurationCodeType = "Days_10"

	// This value sets the Featured Gallery duration to 11 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_11 ListingEnhancementDurationCodeType = "Days_11"

	// This value sets the Featured Gallery duration to 12 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_12 ListingEnhancementDurationCodeType = "Days_12"

	// This value sets the Featured Gallery duration to 13 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_13 ListingEnhancementDurationCodeType = "Days_13"

	// This value sets the Featured Gallery duration to 14 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_14 ListingEnhancementDurationCodeType = "Days_14"

	// This value sets the Featured Gallery duration to 15 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_15 ListingEnhancementDurationCodeType = "Days_15"

	// This value sets the Featured Gallery duration to 16 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_16 ListingEnhancementDurationCodeType = "Days_16"

	// This value sets the Featured Gallery duration to 17 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_17 ListingEnhancementDurationCodeType = "Days_17"

	// This value sets the Featured Gallery duration to 18 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_18 ListingEnhancementDurationCodeType = "Days_18"

	// This value sets the Featured Gallery duration to 19 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_19 ListingEnhancementDurationCodeType = "Days_19"

	// This value sets the Featured Gallery duration to 20 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_20 ListingEnhancementDurationCodeType = "Days_20"

	// This value sets the Featured Gallery duration to 21 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_21 ListingEnhancementDurationCodeType = "Days_21"

	// This value sets the Featured Gallery duration to 22 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_22 ListingEnhancementDurationCodeType = "Days_22"

	// This value sets the Featured Gallery duration to 23 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_23 ListingEnhancementDurationCodeType = "Days_23"

	// This value sets the Featured Gallery duration to 24 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_24 ListingEnhancementDurationCodeType = "Days_24"

	// This value sets the Featured Gallery duration to 25 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_25 ListingEnhancementDurationCodeType = "Days_25"

	// This value sets the Featured Gallery duration to 26 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_26 ListingEnhancementDurationCodeType = "Days_26"

	// This value sets the Featured Gallery duration to 27 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_27 ListingEnhancementDurationCodeType = "Days_27"

	// This value sets the Featured Gallery duration to 28 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_28 ListingEnhancementDurationCodeType = "Days_28"

	// This value sets the Featured Gallery duration to 29 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_29 ListingEnhancementDurationCodeType = "Days_29"

	// This value sets the Featured Gallery duration to 30 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_30 ListingEnhancementDurationCodeType = "Days_30"

	// This value sets the Featured Gallery duration to 31 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_31 ListingEnhancementDurationCodeType = "Days_31"

	// This value sets the Featured Gallery duration to 32 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_32 ListingEnhancementDurationCodeType = "Days_32"

	// This value sets the Featured Gallery duration to 33 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_33 ListingEnhancementDurationCodeType = "Days_33"

	// This value sets the Featured Gallery duration to 34 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_34 ListingEnhancementDurationCodeType = "Days_34"

	// This value sets the Featured Gallery duration to 35 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_35 ListingEnhancementDurationCodeType = "Days_35"

	// This value sets the Featured Gallery duration to 36 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_36 ListingEnhancementDurationCodeType = "Days_36"

	// This value sets the Featured Gallery duration to 37 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_37 ListingEnhancementDurationCodeType = "Days_37"

	// This value sets the Featured Gallery duration to 38 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_38 ListingEnhancementDurationCodeType = "Days_38"

	// This value sets the Featured Gallery duration to 39 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_39 ListingEnhancementDurationCodeType = "Days_39"

	// This value sets the Featured Gallery duration to 40 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_40 ListingEnhancementDurationCodeType = "Days_40"

	// This value sets the Featured Gallery duration to 41 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_41 ListingEnhancementDurationCodeType = "Days_41"

	// This value sets the Featured Gallery duration to 42 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_42 ListingEnhancementDurationCodeType = "Days_42"

	// This value sets the Featured Gallery duration to 43 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_43 ListingEnhancementDurationCodeType = "Days_43"

	// This value sets the Featured Gallery duration to 44 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_44 ListingEnhancementDurationCodeType = "Days_44"

	// This value sets the Featured Gallery duration to 45 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_45 ListingEnhancementDurationCodeType = "Days_45"

	// This value sets the Featured Gallery duration to 46 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_46 ListingEnhancementDurationCodeType = "Days_46"

	// This value sets the Featured Gallery duration to 47 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_47 ListingEnhancementDurationCodeType = "Days_47"

	// This value sets the Featured Gallery duration to 48 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_48 ListingEnhancementDurationCodeType = "Days_48"

	// This value sets the Featured Gallery duration to 49 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_49 ListingEnhancementDurationCodeType = "Days_49"

	// This value sets the Featured Gallery duration to 50 days. This
	// value is deprecated.
	ListingEnhancementDurationCodeTypeDays_50 ListingEnhancementDurationCodeType = "Days_50"

	//
	// This duration enables the Featured Gallery feature for the life of the listing. Once the
	// Featured Gallery duration is set to 'Lifetime' for a listing, it cannot be changed.
	//
	ListingEnhancementDurationCodeTypeLifetime ListingEnhancementDurationCodeType = "Lifetime"

	//
	// This value is reserved for internal or future use.
	//
	ListingEnhancementDurationCodeTypeCustomCode ListingEnhancementDurationCodeType = "CustomCode"
)

//
// Type defining all listing upgrades that may be available to the seller when listing an
// item. The listing upgrades that are available vary by site and by the seller's
// account status. To discover which listing upgrades are available,
// call <b>GeteBayDetails</b>, pass in the appropriate <b>SiteID</b> value and set the <b>DetailName</b> input
// filter to <code>ListingFeatureDetails</code>, and then look for the <b>ListingFeatureDetails</b> container
// in the response. Listing upgrades will either be listed as <code>Enabled</code> or <code>Disabled</code>.
//
type ListingEnhancementsCodeType string

const (

	//
	// <span class="tablenote"><b>Note:</b>
	// The Picture Border feature is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	// <br>
	// If specified, the seller wants to add a border around the listing's pictures. Applicable listing fees apply.
	// <br>
	// <br>
	//
	ListingEnhancementsCodeTypeBorder ListingEnhancementsCodeType = "Border"

	//
	// If specified, the seller wants the title for the item's listing to
	// be in boldface type. Applicable listing fees apply.
	// Does not affect the item subtitle (Item.SubTitle), if any.
	// Not applicable to eBay Motors.
	//
	ListingEnhancementsCodeTypeBoldTitle ListingEnhancementsCodeType = "BoldTitle"

	//
	// <span class="tablenote"><b>Note:</b>
	// The Featured listing feature is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	// Listing is a "Featured Plus" item. The item will display
	// prominently in the Featured Items section of its category list, and it will
	// stand out on search results pages. It will also display in the regular, non-
	// featured item list. Only available to users with a Feedback rating of 10 or
	// greater.
	//
	ListingEnhancementsCodeTypeFeatured ListingEnhancementsCodeType = "Featured"

	//
	// <span class="tablenote"><b>Note:</b>
	// The Highlighted listing feature is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	// Listing is highlighted in a different color in lists.
	//
	ListingEnhancementsCodeTypeHighlight ListingEnhancementsCodeType = "Highlight"

	//
	// Listing will have a chance to rotate into a special display
	// on eBay's Home page. Your item is very likely to show up on the Home page,
	// although eBay does not guarantee that your item will be highlighted
	// in this way. This is the highest level of visibility on eBay.
	// <br><br>
	// Not applicable for eBay Motors. In order to feature the listing
	// on eBay Motors home page, use PictureDetails.GalleryType.Featured instead. See
	// GalleryTypeCodeType for more information.
	//
	ListingEnhancementsCodeTypeHomePageFeatured ListingEnhancementsCodeType = "HomePageFeatured"

	//
	// <span class="tablenote"><b>Note:</b>
	// The Pro Pack Bundle is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	// Listing is using ProPackBundle (a feature pack).
	// Applies only to vehicle listings on eBay Motors (US and Canada), and
	// to the Parts and Accessories category in the eBay Motors US site.
	// Contains the BoldTitle, Border, Featured and Highlight features.
	//
	ListingEnhancementsCodeTypeProPackBundle ListingEnhancementsCodeType = "ProPackBundle"

	//
	// <span class="tablenote"><b>Note:</b>
	// The Basic Upgrade Pack Bundle is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	//
	ListingEnhancementsCodeTypeBasicUpgradePackBundle ListingEnhancementsCodeType = "BasicUpgradePackBundle"

	//
	// Listing is using ValuePack bundle (a feature pack),
	// which combines the features Gallery, Subtitle, and Listing Designer for a discounted price. Support for this feature varies by site and category.
	// <br><br>
	// Whenever ValuePackBundle is
	// selected in a request, the Value Pack bundle is
	// automatically upgraded to the Gallery Plus feature at no extra cost (see
	// Item.PictureDetails.GalleryType.Plus for more information on Gallery Plus).
	// The Gallery Plus upgrade will display on all
	// sites and categories that support ValuePackBundle.
	//
	ListingEnhancementsCodeTypeValuePackBundle ListingEnhancementsCodeType = "ValuePackBundle"

	//
	// <span class="tablenote"><b>Note:</b>
	// The Pro Pack Plus Bundle is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	// Support for this feature varies by site and category.
	// A ProPackPlusBundle listing is using ProPackPlus bundle (a feature pack),
	// which combines the features of BoldTitle, Border, Highlight, Featured (which
	// is equivalent to a GalleryType value of Featured), and
	// Gallery, for a discounted price.
	// Note that if, for example, in AddItem, if you use ProPackPlusBundle and
	// a GalleryType value of Gallery, then the resulting item will have a GalleryType
	// value of Featured.
	//
	ListingEnhancementsCodeTypeProPackPlusBundle ListingEnhancementsCodeType = "ProPackPlusBundle"

	//
	// Reserved for internal or future use.
	//
	ListingEnhancementsCodeTypeCustomCode ListingEnhancementsCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type ListingFlowCodeType string

const (

	//
	// This value is not used.
	//
	ListingFlowCodeTypeAddItem ListingFlowCodeType = "AddItem"

	//
	// This value is not used.
	//
	ListingFlowCodeTypeReviseItem ListingFlowCodeType = "ReviseItem"

	//
	// This value is not used.
	//
	ListingFlowCodeTypeRelistItem ListingFlowCodeType = "RelistItem"

	//
	// This value is not used.
	//
	ListingFlowCodeTypeCustomCode ListingFlowCodeType = "CustomCode"
)

//
// Specifies an active or ended listing's status in eBay's processing
// workflow. If a listing ends with a sale (or sales), eBay needs to
// update the sale details (e.g., total price and buyer/high bidder)
// and the final value fee. This processing can take several minutes.
// If you retrieve a sold item and no details about the buyer/high
// bidder are returned or no final value fee is available, use this
// listing status information to determine whether eBay has finished
// processing the listing.
//
type ListingStatusCodeType string

const (

	//
	// The listing is still active or the listing has ended with
	// a sale but eBay has not completed processing the sale details
	// (e.g., total price and high bidder). A multi-item listing is
	// considered active until all items have winning bids or
	// purchases or the listing ends with at least one winning bid or
	// purchase. If the listing has ended with a sale but this Active
	// status is returned, please allow several minutes for eBay to
	// finish processing the listing.
	//
	ListingStatusCodeTypeActive ListingStatusCodeType = "Active"

	//
	// The listing has ended. If the listing ended with a sale,
	// eBay has completed processing of the sale. All sale information
	// returned from eBay (e.g., total price and high bidder) should be
	// considered accurate and complete. However, the final value fee is
	// not yet available.
	//
	ListingStatusCodeTypeEnded ListingStatusCodeType = "Ended"

	//
	// The listing has closed and eBay has completed processing the sale. All
	// sale information returned from eBay (e.g., total price and high bidder) should
	// be considered accurate and complete. Although the Final Value Fee (FVF) for
	// FixedPriceItem and StoresFixedPrice items is returned by GetSellerTransactions
	// and GetItemTransactions, all other listing types (excluding Buy It Now
	// purchases) require the listing status to be Completed before the Final Value
	// Fee is returned.
	//
	ListingStatusCodeTypeCompleted ListingStatusCodeType = "Completed"

	//
	// Reserved for internal or future use.
	//
	ListingStatusCodeTypeCustomCode ListingStatusCodeType = "CustomCode"

	//
	// Reserved for internal or future use.
	//
	ListingStatusCodeTypeCustom ListingStatusCodeType = "Custom"
)

//
// This enumerated type defines the two subtypes that can be used if the main listing type (in <strong>ListingType</strong> field) is <code>LeadGeneration</code>. A <strong>ListingSubtype2</strong> value must be specified if the <strong>ListingType</strong> value is set to <code>LeadGeneration</code>.
//
type ListingSubtypeCodeType string

const (

	//
	// This value indicates that the lead generation listing is a classifed ad. Note that only some eBay categories support classified ad listings. Use the <strong>GetCategoryFeatures</strong> call (with <strong>FeatureID</strong> value set to <code>AdFormatEnabled</code>) to see which categories support classified ad listings.
	//
	ListingSubtypeCodeTypeClassifiedAd ListingSubtypeCodeType = "ClassifiedAd"

	//
	// This value indicates that the lead generation listing is a US Motors Local Market listing. Note that only some eBay Motors categories support Motors Local Market listings. Use the <strong>GetCategoryFeatures</strong> call (with the <strong>SITEID</strong> header set to <code>100</code> and the <strong>FeatureID</strong> value set to <code>LocalMarketAdFormatEnabled</code>) to see which eBay Motors categories support Motors Local Market listings.
	//
	ListingSubtypeCodeTypeLocalMarketBestOfferOnly ListingSubtypeCodeType = "LocalMarketBestOfferOnly"

	//
	// Reserved for internal or future use
	//
	ListingSubtypeCodeTypeCustomCode ListingSubtypeCodeType = "CustomCode"
)

//
// This enumerated type contains the valid selling formats for eBay listings.
//
type ListingTypeCodeType string

const (

	//
	// Unknown or undefined auction type. Applicable to
	// user preferences and other informational use cases.
	//
	ListingTypeCodeTypeUnknown ListingTypeCodeType = "Unknown"

	//
	// This value indicates a single-quantity auction listing. In an auction listing, prospective buyers engage in a competitive bidding process, although Buy It Now may be offered as long as no bids have been placed. Auctions occur on the eBay marketplace site, and the auction listings will also appear in the seller's eBay Store (if the seller has an eBay Store).
	//
	ListingTypeCodeTypeChinese ListingTypeCodeType = "Chinese"

	//
	// This value is no longer applicable.
	//
	//
	ListingTypeCodeTypeDutch ListingTypeCodeType = "Dutch"

	//
	// This value is no longer applicable.
	//
	//
	ListingTypeCodeTypeLive ListingTypeCodeType = "Live"

	//
	// This enumeration value is only applicable to the <b>GetMyeBaySelling</b> call. This value is used in the <b>ActiveList.ListingType</b> field if the seller only wants to retrieve active listings that are in the auction format.
	//
	ListingTypeCodeTypeAuction ListingTypeCodeType = "Auction"

	//
	// Advertisement to solicit inquiries on listings such as real estate. Permits
	// no bidding on that item, service, or property. To express interest, a buyer
	// fills in a contact form that eBay forwards to the seller as a lead. This
	// format does not enable buyers and sellers to transact online through eBay,
	// and eBay Feedback is not available for ad format listings.
	//
	ListingTypeCodeTypeAdType ListingTypeCodeType = "AdType"

	//
	// This value is no longer applicable.
	//
	//
	ListingTypeCodeTypeStoresFixedPrice ListingTypeCodeType = "StoresFixedPrice"

	//
	// Second chance offer made to a non-winning bidder on an ended listing.
	// A seller can make an offer to a non-winning bidder when either the winning bidder
	// has failed to pay for an item or the seller has a duplicate of the item.
	// A seller can create a Second Chance Offer immediately after a listing ends and up to
	// 60 days after the end of the listing.
	// <br/><br/>
	// eBay does not charge an Insertion Fee,
	// but if the bidder accepts the offer, the regular Final Value Fee is charged.
	// In the case of an Unpaid Item, the seller should ensure that everything has
	// been done to resolve the issue with the winning bidder before sending a
	// Second Chance Offer to another bidder.
	// <br/><br/>
	// See the Unpaid Items Process for details.
	// Make sure you're aware of other rules and restrictions surrounding Second Chance Offers.
	// Use <b>AddSecondChanceItem</b> to submit Second Chance Offers.
	// Listed on eBay, but does not appear when browsing or searching listings.
	//
	ListingTypeCodeTypePersonalOffer ListingTypeCodeType = "PersonalOffer"

	//
	// A basic fixed-price item format. Bids do not occur.
	// The quantity of items is one or more.
	// <br><br>
	// Also known as Buy It Now Only on some sites (not to be confused with the <b>BuyItNow</b> option that
	// is available for auctions).
	// <br><br>
	// Sellers must meet certain feedback requirements and/or be ID Verified to use this format.
	// See <a href="http://developer.ebay.com/DevZone/feedback/Concepts/FeedbackAPIGuide.html">eBay Features Guide</a>
	// for more information.
	// <br><br>
	// Fixed-price listings are listed on eBay.com, and they are listed in
	// the seller's eBay Store if the seller is a Store owner.
	// Stores fixed price items will be treated as basic
	// fixed-price items. Permitted durations of 30 days
	// and GTC are now available for store and non-store subscribers (in addition
	// to the existing durations of 3, 5, 7, and 10 days).
	//
	ListingTypeCodeTypeFixedPriceItem ListingTypeCodeType = "FixedPriceItem"

	//
	// <span class="tablenote"><b>Note: </b> API support for Half.com listings is being deprecated, so this value will no longer be applicable.
	// </span>
	// Half.com listing (item is listed on Half.com, not on eBay).
	// You must be a registered Half.com seller to use this format.
	//
	ListingTypeCodeTypeHalf ListingTypeCodeType = "Half"

	//
	// Lead Generation format (advertisement-style listing to solicit inquiries or offers, no bidding or fixed price, listed on eBay).
	//
	ListingTypeCodeTypeLeadGeneration ListingTypeCodeType = "LeadGeneration"

	//
	// This value is no longer applicable.
	//
	//
	ListingTypeCodeTypeExpress ListingTypeCodeType = "Express"

	//
	// Reserved for internal or future use. You can ignore Shopping.com items in your results.
	//
	ListingTypeCodeTypeShopping ListingTypeCodeType = "Shopping"

	//
	// Reserved for internal or future use.
	//
	ListingTypeCodeTypeCustomCode ListingTypeCodeType = "CustomCode"
)

//
// This enumerated type is used by <b>OrderType</b> and <b>TransactionType</b> to indicate which logistics plan was selected by the buyer at the order or order line item level. Currently, this type is only supporting the "Click and Collect" and digital gift card use cases, but more logistics plan types may be added in the future.
//
type LogisticsPlanCodeType string

const (

	//
	// This value indicates that the buyer has selected "Click and Collect" as the logistics plan. With the 'Click and Collect' feature, a buyer can purchase certain items on eBay and collect them at a local store. Buyers are notified by eBay once their items are available. The "Click and Collect" feature is only available to large merchants on the eBay UK (site ID - 3), eBay Australia (Site ID - 15), and eBay Germany (Site ID - 77) sites.
	//
	LogisticsPlanCodeTypePickUpDropOff LogisticsPlanCodeType = "PickUpDropOff"

	//
	// This value indicates that the order or order line item is a digital gift card that will be delivered to the buyer or the recipient of the gift card by email.
	//
	LogisticsPlanCodeTypeDigitalDelivery LogisticsPlanCodeType = "DigitalDelivery"

	//
	// This value is reserved for internal or future use.
	//
	LogisticsPlanCodeTypeCustomCode LogisticsPlanCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type LogoTypeCodeType string

const (

	//
	// This field is deprecated.
	//
	LogoTypeCodeTypeWinningBidderNotice LogoTypeCodeType = "WinningBidderNotice"

	//
	// This field is deprecated.
	//
	LogoTypeCodeTypeStore LogoTypeCodeType = "Store"

	//
	// This field is deprecated.
	//
	LogoTypeCodeTypeCustom LogoTypeCodeType = "Custom"

	//
	// This field is deprecated.
	//
	LogoTypeCodeTypeCustomCode LogoTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type MailOptionsTypeCodeType string

const (

	//
	// This field is deprecated.
	//
	MailOptionsTypeCodeTypeDoNotSendEmail MailOptionsTypeCodeType = "DoNotSendEmail"

	//
	// This field is deprecated.
	//
	MailOptionsTypeCodeTypeEmailCopyToSender MailOptionsTypeCodeType = "EmailCopyToSender"

	//
	// This field is deprecated.
	//
	MailOptionsTypeCodeTypeHideSenderEmailAddress MailOptionsTypeCodeType = "HideSenderEmailAddress"

	//
	// This field is deprecated.
	//
	MailOptionsTypeCodeTypeCustomCode MailOptionsTypeCodeType = "CustomCode"
)

//
// Valid application status codes, either MarkUp (application was marked up,
// communication is restored) or MarkDown (application was marked down, no
// communication).
//
type MarkUpMarkDownEventTypeCodeType string

const (

	//
	// Status indicating the application was or is marked up.
	//
	MarkUpMarkDownEventTypeCodeTypeMarkUp MarkUpMarkDownEventTypeCodeType = "MarkUp"

	//
	// Status indicating the application was marked down.
	//
	MarkUpMarkDownEventTypeCodeTypeMarkDown MarkUpMarkDownEventTypeCodeType = "MarkDown"

	//
	// Reserved for future internal or external use.
	//
	MarkUpMarkDownEventTypeCodeTypeCustomCode MarkUpMarkDownEventTypeCodeType = "CustomCode"
)

//
// This type is deprecated.
//
type MerchDisplayCodeType string

const (

	//
	// This value is not used.
	//
	MerchDisplayCodeTypeDefaultTheme MerchDisplayCodeType = "DefaultTheme"

	//
	// This value is not used.
	//
	MerchDisplayCodeTypeStoreTheme MerchDisplayCodeType = "StoreTheme"

	//
	// This value is not used.
	//
	MerchDisplayCodeTypeCustomCode MerchDisplayCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type MerchandizingPrefCodeType string

const (

	//
	// This value is not used.
	//
	MerchandizingPrefCodeTypeOptIn MerchandizingPrefCodeType = "OptIn"

	//
	// This value is not used.
	//
	MerchandizingPrefCodeTypeOptOut MerchandizingPrefCodeType = "OptOut"

	//
	// This value is not used.
	//
	MerchandizingPrefCodeTypeCustomCode MerchandizingPrefCodeType = "CustomCode"
)

//
// This enumerated type is used to indicate whether or not a question has been answered.
//
type MessageStatusTypeCodeType string

const (

	//
	// The question has been answered at least once.
	//
	MessageStatusTypeCodeTypeAnswered MessageStatusTypeCodeType = "Answered"

	//
	// The question has not yet been answered.
	//
	MessageStatusTypeCodeTypeUnanswered MessageStatusTypeCodeType = "Unanswered"

	//
	// Reserved for future or internal use.
	//
	MessageStatusTypeCodeTypeCustomCode MessageStatusTypeCodeType = "CustomCode"
)

type MessageTypeCodeType string

const (

	//
	// Member to Member message initiated by bidder/potential bidder
	// to a seller of a particular item.
	//
	MessageTypeCodeTypeAskSellerQuestion MessageTypeCodeType = "AskSellerQuestion"

	//
	// Member to Member message initiated as a response
	// to an Ask A Question message.
	//
	MessageTypeCodeTypeResponseToASQQuestion MessageTypeCodeType = "ResponseToASQQuestion"

	//
	// Member to Member message initiated by any eBay member
	// to another eBay member.
	//
	MessageTypeCodeTypeContactEbayMember MessageTypeCodeType = "ContactEbayMember"

	//
	// Member message between order partners within 90 days
	// after creation of the order.
	//
	MessageTypeCodeTypeContactTransactionPartner MessageTypeCodeType = "ContactTransactionPartner"

	//
	// Member to Member message initiated as a response
	// to a Contact eBay Member message.
	//
	MessageTypeCodeTypeResponseToContacteBayMember MessageTypeCodeType = "ResponseToContacteBayMember"

	//
	// Member to Member message initiated by any eBay member
	// to another eBay member who has posted on a community forum
	// within the past 7 days.
	//
	MessageTypeCodeTypeContacteBayMemberViaCommunityLink MessageTypeCodeType = "ContacteBayMemberViaCommunityLink"

	//
	// Reserved for future or internal use.
	//
	MessageTypeCodeTypeCustomCode MessageTypeCodeType = "CustomCode"

	//
	// All message types.
	//
	MessageTypeCodeTypeAll MessageTypeCodeType = "All"

	//
	// Member to Member message initiated by sellers to their
	// bidders during an active listing.
	//
	MessageTypeCodeTypeContactMyBidder MessageTypeCodeType = "ContactMyBidder"

	//
	// Member message initiated after eBay receives an email sent by an
	// eBay member's email client to another eBay member.
	//
	MessageTypeCodeTypeContacteBayMemberViaAnonymousEmail MessageTypeCodeType = "ContacteBayMemberViaAnonymousEmail"

	//
	// Indicates that an inquiry has been sent to the seller regarding the
	// corresponding classified ad listing.
	//
	MessageTypeCodeTypeClassifiedsContactSeller MessageTypeCodeType = "ClassifiedsContactSeller"

	//
	// Indicates that a Best Offer has been made on the seller's corresponding
	// classified ad listing. This message type is only applicable to Classified
	// categories that allow the Best Offer feature, such as motor vehicles.
	//
	MessageTypeCodeTypeClassifiedsBestOffer MessageTypeCodeType = "ClassifiedsBestOffer"
)

//
// This enumerated type defines the special price treatments that can be set up for listings enabled with the Minimum Advertised Price feature. The Minimum Advertised Price (MAP) feature is only supported on the eBay US site.
//
type MinimumAdvertisedPriceExposureCodeType string

const (

	//
	// This enumeration value indicates that the buyer must add the item to his/her cart before the discounted price can be displayed. To enable this pricing treatment when adding/revising/relisting an item, include the <b>DiscountPriceInfo.MinimumAdvertisedPriceExposure</b> field in an Add/Revise/Relist calls and set its value to <code>PreCheckout</code>.
	//
	MinimumAdvertisedPriceExposureCodeTypePreCheckout MinimumAdvertisedPriceExposureCodeType = "PreCheckout"

	//
	// This enumeration value indicates that the discounted price will only be shown to the buyer once the buyer reaches the eBay Checkout page. To enable this pricing treatment when adding/revising/relisting an item, include the <b>DiscountPriceInfo.MinimumAdvertisedPriceExposure</b> field in an Add/Revise/Relist calls and set its value to <code>DuringCheckout</code>.
	//
	MinimumAdvertisedPriceExposureCodeTypeDuringCheckout MinimumAdvertisedPriceExposureCodeType = "DuringCheckout"

	//
	// This enumeration value indicates that the discounted price is shown on the View Item page, and the buyer is not required to add the item to his/her cart or click Buy button to view the discounted price. To enable this pricing treatment when adding/revising/relisting an item, include the <b>DiscountPriceInfo.MinimumAdvertisedPriceExposure</b> field in an Add/Revise/Relist call and set its value to <code>None</code>.
	//
	MinimumAdvertisedPriceExposureCodeTypeNone MinimumAdvertisedPriceExposureCodeType = "None"

	//
	// Reserved for future use.
	//
	MinimumAdvertisedPriceExposureCodeTypeCustomCode MinimumAdvertisedPriceExposureCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type MismatchTypeCodeType string

const (

	//
	// This value is not used.
	//
	MismatchTypeCodeTypeOverPayment MismatchTypeCodeType = "OverPayment"

	//
	// This value is not used.
	//
	MismatchTypeCodeTypeUnderPayment MismatchTypeCodeType = "UnderPayment"

	//
	// (out) Reserved for internal or future use
	//
	MismatchTypeCodeTypeCustomCode MismatchTypeCodeType = "CustomCode"
)

//
// This enumerated type defines the values that can be used when adding, modiying, or
// deleting a shipping discount profile (through the <b>ModifyActionCode</b>
// field in <b>SetShippingDiscountProfiles</b>), or when adding, modiying, or
// deleting a promotional sale (through the <b>Action</b>
// field in <b>SetPromotionalSale</b>), or when adding or removing one or more
// listings from the promotional sale (through the <b>Action</b>
// field in <b>SetPromotionalSaleListings</b>).
// <br/><br/>
// For <b>SetPromotionalSaleListings</b>, the specified action ('Add' or
// 'Delete') will apply to all listings specified in the <b>PromotionalSaleItemIDArray</b>
// container. A promotional sale can also be applied to all listings of a specified
// category (using <b>CategoryID</b> in the
// <b>SetPromotionalSaleListings</b> request). However, an entire category
// of listings cannot be removed from a promotional sale. In other words, the
// <b>Action </b> field cannot be set to 'Delete' if a
// <b>CategoryID</b> is specified.
//
type ModifyActionCodeType string

const (

	//
	// For <b>SetPromotionalSale</b>, this value is used in the request to
	// create a new promotional sale.
	// <br/><br/>
	// For <b>SetPromotionalSaleListings</b>, this value is used in the request
	// to apply an existing promotional sale to one or more active items or to an entire
	// category of active items.
	// <br/><br/>
	// For <b>SetShippingDiscountProfiles</b>, this value is used in the request
	// to create a new shipping discount profile.
	//
	ModifyActionCodeTypeAdd ModifyActionCodeType = "Add"

	//
	// For <b>SetPromotionalSale</b>, this value is used in the request to
	// delete an existing promotional sale.
	// <br/><br/>
	// For <b>SetPromotionalSaleListings</b>, this value is used in the request
	// to remove one or more active items from an existing promotional sale. This value
	// cannot be used if a <b>CategoryID</b> is specified in the request.
	// <br/><br/>
	// For <b>SetShippingDiscountProfiles</b>, this value is used in the request
	// to delete an existing shipping discount profile.
	//
	ModifyActionCodeTypeDelete ModifyActionCodeType = "Delete"

	//
	// For <b>SetPromotionalSale</b>, this value is used in the request to
	// modify an existing promotional sale.
	// <br/><br/>
	// For <b>SetShippingDiscountProfiles</b>, this value is used in the request
	// to modify an existing shipping discount profile.
	//
	ModifyActionCodeTypeUpdate ModifyActionCodeType = "Update"

	//
	// Reserved for future use.
	//
	ModifyActionCodeTypeCustomCode ModifyActionCodeType = "CustomCode"
)

//
// This type is deprecated.
//
type MyMessagesAlertIDType string

//
// This enumerated type is deprecated.
//
type MyMessagesAlertResolutionStatusCode string

const (

	//
	// This field is deprecated.
	//
	MyMessagesAlertResolutionStatusCodeUnresolved MyMessagesAlertResolutionStatusCode = "Unresolved"

	//
	// This field is deprecated.
	//
	MyMessagesAlertResolutionStatusCodeResolvedByAutoResolution MyMessagesAlertResolutionStatusCode = "ResolvedByAutoResolution"

	//
	// This field is deprecated.
	//
	MyMessagesAlertResolutionStatusCodeResolvedByUser MyMessagesAlertResolutionStatusCode = "ResolvedByUser"

	//
	// This field is deprecated.
	//
	MyMessagesAlertResolutionStatusCodeCustomCode MyMessagesAlertResolutionStatusCode = "CustomCode"
)

//
// Type defining the <b>ExternalMessageID</b> field used in
// <b>GetMyMessages</b> to identify a specific eBay message to retrieve.
// Up to 10 <b>ExternalMessageID</b> values can be specified in one API call.
// The <b>ExternalMessageIDs</b> container is only available for use on the
// eBay US site (SiteID 0).
//
type MyMessagesExternalMessageIDType string

//
// This enumerated type contains the operations that can be used in a <b>ReviseMyMessagesFolders</b> call.
//
type MyMessagesFolderOperationCodeType string

const (

	//
	// This enumeration value is used to create one or more custom folders in <b>My eBay Messages</b>. For a 'Display' operation, the new folder name(s) are specified in  one or more <b>FolderName</b> fields. The maximum length of a folder name is 15 characters. Up to 10 new folders can be created with one <b>ReviseMyMessagesFolders</b> call, but this is also limited by how many custom folders exist at the time of the call, as only a maximum of 10 custom folders are supported in <b>My eBay Messages</b>.
	//
	MyMessagesFolderOperationCodeTypeDisplay MyMessagesFolderOperationCodeType = "Display"

	//
	// This enumeration value is used to rename one or more existing folders in <b>My eBay Messages</b>. For a 'Rename' operation, the unique identifier(s) of the message folder(s) to rename are specified in one or more <b>FolderID</b> fields, and the new name for the folder(s) are specified in one or more <b>FolderName</b> fields.
	// <br/><br/>
	// The <b>FolderID</b> and <b>FolderName</b> values can be retrieved by calling <b>GetMyMessages</b> with a <b>DetailLevel</b> value set to <code>ReturnSummary</code>, or these folder names and identifiers can be found by navigating to <b>My eBay Messages</b> (Folder ID values are displayed at the end of the browser's URL when that folder is opened).
	// <br/><br/>
	// The maximum length of a folder name is 15 characters. The Inbox and Sent folders cannot be renamed.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> If multiple folders will be renamed with one call, the user must pay close attention to the order of the <b>FolderID</b> and <b>FolderName</b> fields, as eBay will process these requests in order according to the placement of the the <b>FolderID</b> and <b>FolderName</b> fields. So, the existing folder identified by the first <b>FolderID</b> field in the request payload will get renamed to the folder name passed into the first <b>FolderName</b> field in the request payload, and so on.
	// </span>
	//
	MyMessagesFolderOperationCodeTypeRename MyMessagesFolderOperationCodeType = "Rename"

	//
	// This enumeration value is used to remove one or more custom folders in <b>My eBay Messages</b>. For a 'Remove' operation, the folder(s) to remove are specified in one or more <b>FolderID</b> fields. The <b>FolderID</b> values for a <b>My eBay Messages</b> folders can be retrieved by calling <b>GetMyMessages</b> with a <b>DetailLevel</b> value set to <code>ReturnSummary</code>, or these folder IDs can be found by navigating to a specific folder in <b>My eBay Messages</b>, and the ID value for the opened folder is displayed at the end of the browser's URL.
	// <br/><br/>
	// A <b>My eBay Messages</b> folder must be empty before being removed, and an error is returned if a user tries to remove a non-empty folder.
	// <br/><br/>
	// The Inbox and Sent folders cannot be removed under any circumstance.
	//
	MyMessagesFolderOperationCodeTypeRemove MyMessagesFolderOperationCodeType = "Remove"

	//
	// Reserved for future or internal use.
	//
	MyMessagesFolderOperationCodeTypeCustomCode MyMessagesFolderOperationCodeType = "CustomCode"
)

//
// Type defining the <b>MessageID</b> field used in
// <b>GetMyMessages</b>, <b>ReviseMyMessages</b>, and
// <b>DeleteMyMessages</b> to identify a specific eBay message to retrieve,
// revise, or delete, respectively. Up to 10 <b>MessageID</b> values can be
// specified in one API call.
//
type MyMessagesMessageIDType string

//
// Enumerated type that indicates whether or not a nonprofit charity organization is
// registered with the PayPal Giving Fund. See the <a href="http://pages.ebay.com/help/sell/nonprofit.html#enrolling">Enrolling your nonprofit</a> help topic for more information on registering with
// the PayPal Giving Fund and the benefits that come with being a registered eBay for Charity organization.
//
type AddressTypeCodeType string

const (

	//
	// This value indicates that the address contained in the <b>NonProfitAddress</b>
	// container is for a non-registered charity organization.
	//
	AddressTypeCodeTypeContact AddressTypeCodeType = "Contact"

	//
	// This value indicates that the address contained in the <b>NonProfitAddress</b>
	// container is for a charity organization registered with the PayPal Giving Fund.
	//
	AddressTypeCodeTypeRegistered AddressTypeCodeType = "Registered"

	//
	// This value is reserved for internal or future use.
	//
	AddressTypeCodeTypeCustomCode AddressTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type NotificationDeliveryStatusCodeType string

const (
	NotificationDeliveryStatusCodeTypeCustomCode NotificationDeliveryStatusCodeType = "CustomCode"

	NotificationDeliveryStatusCodeTypeDelivered NotificationDeliveryStatusCodeType = "Delivered"

	NotificationDeliveryStatusCodeTypeFailed NotificationDeliveryStatusCodeType = "Failed"

	NotificationDeliveryStatusCodeTypeRejected NotificationDeliveryStatusCodeType = "Rejected"

	NotificationDeliveryStatusCodeTypeMarkedDown NotificationDeliveryStatusCodeType = "MarkedDown"
)

//
// Defines all property names that can be used.
//
type NotificationEventPropertyNameCodeType string

const (

	//
	// Property name for WatchedItemEndingSoon events, enabling a user to specify a time in minutes
	// before the end of the listing. Acceptable values: 5, 10, 15, 30, 60, 75, and 180. For example,
	// to receive a WatchedItemEndingSoon notification 30 minutes before the item listing ends,
	// specify 30.
	//
	NotificationEventPropertyNameCodeTypeTimeLeft NotificationEventPropertyNameCodeType = "TimeLeft"

	//
	// Reserved for future use.
	//
	NotificationEventPropertyNameCodeTypeCustomCode NotificationEventPropertyNameCodeType = "CustomCode"
)

//
// Valid notification status codes
//
type NotificationEventStateCodeType string

const (

	//
	// Status indicating the notification is newly created
	//
	NotificationEventStateCodeTypeNew NotificationEventStateCodeType = "New"

	//
	// Status indicating the notification was failed
	//
	NotificationEventStateCodeTypeFailed NotificationEventStateCodeType = "Failed"

	//
	// Status indicating the end user application is marked down
	//
	NotificationEventStateCodeTypeMarkedDown NotificationEventStateCodeType = "MarkedDown"

	//
	// Status indicating the notification is pending
	//
	NotificationEventStateCodeTypePending NotificationEventStateCodeType = "Pending"

	//
	// Status indicating the notification is failed pending
	//
	NotificationEventStateCodeTypeFailedPending NotificationEventStateCodeType = "FailedPending"

	//
	// Status indicating the notification is marked down pending
	//
	NotificationEventStateCodeTypeMarkedDownPending NotificationEventStateCodeType = "MarkedDownPending"

	//
	// Status indicating the notification was successfully delivered
	//
	NotificationEventStateCodeTypeDelivered NotificationEventStateCodeType = "Delivered"

	//
	// Status indicating the notification was unable to deliver
	//
	NotificationEventStateCodeTypeUndeliverable NotificationEventStateCodeType = "Undeliverable"

	//
	// Status indicating the notification was rejected
	//
	NotificationEventStateCodeTypeRejected NotificationEventStateCodeType = "Rejected"

	//
	// Status indicating the notification was cancelled
	//
	NotificationEventStateCodeTypeCanceled NotificationEventStateCodeType = "Canceled"

	//
	// Reserved for future internal or external use
	//
	NotificationEventStateCodeTypeCustomCode NotificationEventStateCodeType = "CustomCode"
)

//
// Enumerated type that contains the complete list of platform notifications that
// can be sent out to subscribed users, servers, or applications. Some notifications are
// only sent to buyers or sellers, and some are sent to both buyers and sellers.
//
type NotificationEventTypeCodeType string

const (

	//
	// This notification is for internal or future use.
	//
	NotificationEventTypeCodeTypeNone NotificationEventTypeCodeType = "None"

	//
	// This notification is sent to a subscribed buyer when another buyer has outbid
	// (placed a higher bid) the subscribed buyer on an auction listing, and
	// the subscribed buyer is no longer the current high bidder.
	// <br><br>
	// This notification is only applicable for auction listings.
	//
	NotificationEventTypeCodeTypeOutBid NotificationEventTypeCodeType = "OutBid"

	//
	// This notification is sent to all subscribed bidders of an auction item and to
	// the subscribed seller of the auction item as soon as the auction listing ends
	// with or without a winning bidder. This notification will also be sent to
	// subscribed bidders and the subscribed seller if the auction ends as a
	// result of a buyer using the auction listing's Buy It Now feature.
	// <br><br>
	// This notification is only applicable for auction listings.
	//
	NotificationEventTypeCodeTypeEndOfAuction NotificationEventTypeCodeType = "EndOfAuction"

	//
	// This notification is sent to the subscribed seller when the winning bidder
	// or buyer has paid for the auction or fixed-price item and completed the checkout process.
	// <br><br>
	// For multiple line item orders, an <b>AuctionCheckoutComplete</b> notification is only generated for one of the line items in the order. In this case, the seller would look for the containing order number for the line item in the <b>Transaction.ContainingOrder.OrderID</b> field, and then make a <b>GetOrders</b> call (using the container order ID as an input filter) to retrieve complete information for the order.
	//
	NotificationEventTypeCodeTypeAuctionCheckoutComplete NotificationEventTypeCodeType = "AuctionCheckoutComplete"

	//
	// This notification is sent to a subscribed seller when a buyer/winning bidder
	// is requesting a total price before paying for the item.
	// <br><br>
	// This notification is applicable for auction listings and for fixed-price listings that do not require immediate payment.
	//
	NotificationEventTypeCodeTypeCheckoutBuyerRequestsTotal NotificationEventTypeCodeType = "CheckoutBuyerRequestsTotal"

	//
	// This notification is sent to a subscribed buyer or seller when that buyer or seller has left Feedback for the other party in the order, or has received Feedback from the other party in the order. Feedback is given at the order line item level.
	//
	NotificationEventTypeCodeTypeFeedback NotificationEventTypeCodeType = "Feedback"

	//
	// This notification is deprecated. Use the <b>Feedback</b> notification instead.
	//
	NotificationEventTypeCodeTypeFeedbackForSeller NotificationEventTypeCodeType = "FeedbackForSeller"

	//
	// This notification is sent to a subscribed seller each time a buyer purchases an item in a single or multiple-quantity, fixed-price listing.
	// <br><br>
	// This notification is only applicable for fixed-price listings.
	//
	NotificationEventTypeCodeTypeFixedPriceTransaction NotificationEventTypeCodeType = "FixedPriceTransaction"

	//
	// This notification is sent to a subscribed buyer when that buyer is offered a Second Chance Offer from the seller, after that buyer failed to win the original auction of the item.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeSecondChanceOffer NotificationEventTypeCodeType = "SecondChanceOffer"

	//
	// This notification is sent to a subscribed seller when an eBay user has used the Ask a Question feature on the seller's active listing. An eBay user does not have to be an active bidder on an auction listing to ask a seller a question.
	// <br><br>
	// If subscribed to by a seller and when applicable, this notification will appear in the <b>GetMemberMessages</b> call response.
	//
	NotificationEventTypeCodeTypeAskSellerQuestion NotificationEventTypeCodeType = "AskSellerQuestion"

	//
	// This notification is sent to a subscribed seller each time one of the subscribed seller's items is listed or relisted. This notification is also triggered when the Unpaid Item Assistant mechanism relists an item for the seller.
	//
	NotificationEventTypeCodeTypeItemListed NotificationEventTypeCodeType = "ItemListed"

	//
	// This notification is sent to a subscribed seller when one of the subscribed seller's items is revised.
	// <br><br>
	// If subscribed to by a seller and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeItemRevised NotificationEventTypeCodeType = "ItemRevised"

	//
	// This notification is sent to a subscribed seller each time a buyer responds to an Unpaid Item or Cancel Transaction case that the subscribed seller has opened up against the buyer.
	//
	NotificationEventTypeCodeTypeBuyerResponseDispute NotificationEventTypeCodeType = "BuyerResponseDispute"

	//
	// This notification is sent to a subscribed buyer if a seller opens up an Unpaid Item or Cancel Transaction case against the subscribed buyer.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear through the <b>GetDispute</b> call response.
	//
	NotificationEventTypeCodeTypeSellerOpenedDispute NotificationEventTypeCodeType = "SellerOpenedDispute"

	//
	// This notification is sent to a subscribed buyer each time a seller responds to an Item Not Received or (Item) Significantly Not As Described case that the subscribed buyer has opened up against the seller.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetDispute</b> call response.
	//
	NotificationEventTypeCodeTypeSellerRespondedToDispute NotificationEventTypeCodeType = "SellerRespondedToDispute"

	//
	// This notification is sent to the subscribed buyer and seller if the seller closes an Unpaid Item or Cancel Transaction case against the buyer.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetDispute</b> call response.
	//
	NotificationEventTypeCodeTypeSellerClosedDispute NotificationEventTypeCodeType = "SellerClosedDispute"

	//
	// This notification is sent to a subscribed seller if a potential buyer has made a Best Offer on a Best Offer-enabled listing.
	// <br><br>
	// If subscribed to by a seller and when applicable, this notification will appear in the <b>GetBestOffers</b> call response.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature can be set for auction listings on the US, Canada, UK, Germany, Australia, France, Italy, and Spain marketplaces, but keep in mind that Best Offer and Buy It Now cannot be used simultaneously in a listing. Also, once a qualifying bid is made on an auction listing, the Best Offer feature is disabled, and any pending offer or counteroffers are no longer valid.
	// </span>
	//
	NotificationEventTypeCodeTypeBestOffer NotificationEventTypeCodeType = "BestOffer"

	//
	// This notification is deprecated and can no longer be used.
	//
	NotificationEventTypeCodeTypeMyMessagesAlertHeader NotificationEventTypeCodeType = "MyMessagesAlertHeader"

	//
	// This notification is deprecated. Use <b>MyMessagesHighPriorityMessage</b> instead.
	//
	NotificationEventTypeCodeTypeMyMessagesAlert NotificationEventTypeCodeType = "MyMessagesAlert"

	//
	// This notification is sent to a subscribed buyer or seller when eBay sends a message to that user's InBox.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetMyMessages</b> call response. For this notification to be returned in <b>GetMyMessages</b>, the <b>DetailLevel</b> value in the <b>GetMyMessages</b> request must be set to <code>ReturnHeaders</code>.
	// <br><br>
	// <b>MyMessageseBayMessageHeader</b> and <b>MyMessageseBayMessage</b> cannot be subscribed
	// to at the same time or specified in the same call.
	//
	NotificationEventTypeCodeTypeMyMessageseBayMessageHeader NotificationEventTypeCodeType = "MyMessageseBayMessageHeader"

	//
	// This notification is sent to a subscribed buyer or seller when eBay sends a message to that user's InBox.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetMyMessages</b> call response. For this notification to be returned in <b>GetMyMessages</b>, the <b>DetailLevel</b> value in the <b>GetMyMessages</b> request must be set to <code>ReturnMessages</code>.
	// <br><br>
	// <b>MyMessageseBayMessageHeader</b> and <b>MyMessageseBayMessage</b> cannot be subscribed
	// to at the same time or specified in the same call.
	//
	NotificationEventTypeCodeTypeMyMessageseBayMessage NotificationEventTypeCodeType = "MyMessageseBayMessage"

	//
	// This notification is sent to a subscribed buyer or seller when another eBay user sends a message to that user's InBox.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetMyMessages</b> call response. For this notification to be returned in <b>GetMyMessages</b>, the <b>DetailLevel</b> value in the <b>GetMyMessages</b> request must be set to <code>ReturnHeaders</code>.
	// <br><br>
	// <b>MyMessagesM2MMessageHeader</b> and <b>MyMessagesM2MMessage</b> cannot
	// be subscribed to at the same time or specified in the same call.
	//
	NotificationEventTypeCodeTypeMyMessagesM2MMessageHeader NotificationEventTypeCodeType = "MyMessagesM2MMessageHeader"

	//
	// This notification is sent to a subscribed buyer or seller when another eBay user sends a message to that user's InBox.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetMyMessages</b> call response. For this notification to be returned in <b>GetMyMessages</b>, the <b>DetailLevel</b> value in the <b>GetMyMessages</b> request must be set to <code>ReturnMessages</code>.
	// <br><br>
	// <b>MyMessagesM2MMessageHeader</b> and <b>MyMessagesM2MMessage</b> cannot
	// be subscribed to at the same time or specified in the same call.
	//
	NotificationEventTypeCodeTypeMyMessagesM2MMessage NotificationEventTypeCodeType = "MyMessagesM2MMessage"

	//
	// This notification is sent to a subscribed seller when a buyer opens an Item Not Received dispute against that seller.
	// <br><br>
	// If subscribed to by the seller and when applicable, this notification will appear in the <b>GetDispute</b> call response.
	//
	NotificationEventTypeCodeTypeINRBuyerOpenedDispute NotificationEventTypeCodeType = "INRBuyerOpenedDispute"

	//
	// This notification is sent to a subscribed seller when a buyer responds to an Item Not Received dispute opened by that buyer.
	// <br><br>
	// If subscribed to by the seller and when applicable, this notification will appear in the <b>GetDispute</b> call response.
	//
	NotificationEventTypeCodeTypeINRBuyerRespondedToDispute NotificationEventTypeCodeType = "INRBuyerRespondedToDispute"

	//
	// This notification is sent to a subscribed seller when a buyer closes an Item Not Received dispute opened by that buyer.
	// <br><br>
	// If subscribed to by the seller and when applicable, this notification will appear in the <b>GetDispute</b> call response.
	//
	NotificationEventTypeCodeTypeINRBuyerClosedDispute NotificationEventTypeCodeType = "INRBuyerClosedDispute"

	//
	// This notification is sent to a subscribed buyer when a seller responds to an Item Not Received dispute opened by the buyer.
	// <br><br>
	// If subscribed to by the buyer and when applicable, this notification will appear in the <b>GetDispute</b> call response.
	//
	NotificationEventTypeCodeTypeINRSellerRespondedToDispute NotificationEventTypeCodeType = "INRSellerRespondedToDispute"

	//
	// This notification is deprecated. Use <b>AuctionCheckoutComplete</b> instead.
	//
	NotificationEventTypeCodeTypeCheckout NotificationEventTypeCodeType = "Checkout"

	//
	// This notification is sent to a subscribed buyer when a listing that the buyer is watching is ending soon. This event has a <b>TimeLeft</b> property that defines the 'ending soon' threshold value.
	//
	NotificationEventTypeCodeTypeWatchedItemEndingSoon NotificationEventTypeCodeType = "WatchedItemEndingSoon"

	//
	// This notification is sent to a subscribed buyer or seller when a listing ends. This notification can be triggered by an
	// <b>ItemWon</b>, an <b>ItemSold</b>, or an <b>ItemUnsold</b> event.
	//
	NotificationEventTypeCodeTypeItemClosed NotificationEventTypeCodeType = "ItemClosed"

	//
	// This notification is sent to a subscribed buyer or seller when a listing is administratively taken down by eBay.
	//
	NotificationEventTypeCodeTypeItemSuspended NotificationEventTypeCodeType = "ItemSuspended"

	//
	// This notification is sent to a subscribed seller when an eBay listing ends in a sale.
	//
	NotificationEventTypeCodeTypeItemSold NotificationEventTypeCodeType = "ItemSold"

	//
	// This notification is sent to a subscribed seller when the duration of an eBay listing has been extended.
	//
	NotificationEventTypeCodeTypeItemExtended NotificationEventTypeCodeType = "ItemExtended"

	//
	// This notification is sent to a subscribed buyer or seller when that user has modified their eBay user ID.
	//
	NotificationEventTypeCodeTypeUserIDChanged NotificationEventTypeCodeType = "UserIDChanged"

	//
	// This notification is sent to a subscribed buyer or seller when that user has changed the email address associated with the user account. This notification is available for Client Alerts and for SMS only. Not applicable to Platform Notifications.
	//
	NotificationEventTypeCodeTypeEmailAddressChanged NotificationEventTypeCodeType = "EmailAddressChanged"

	//
	// This notification is sent to a subscribed buyer or seller when that user has changed the password used for login. This notification is available for Client Alerts and for SMS only. Not applicable to Platform Notifications.
	//
	NotificationEventTypeCodeTypePasswordChanged NotificationEventTypeCodeType = "PasswordChanged"

	//
	// This notification is sent to a subscribed buyer or seller when that user has changed the password hint. This notification is available for Client Alerts and for SMS only. Not applicable to Platform Notifications.
	//
	NotificationEventTypeCodeTypePasswordHintChanged NotificationEventTypeCodeType = "PasswordHintChanged"

	//
	// This notification is sent to a subscribed seller when that seller has changed the payment methods used to pay seller fees for the account. This notification is available for Client Alerts and for SMS only. Not applicable to Platform Notifications.
	//
	NotificationEventTypeCodeTypePaymentDetailChanged NotificationEventTypeCodeType = "PaymentDetailChanged"

	//
	// This notification is sent to a subscribed buyer or seller when that eBay user's account is suspended. This notification is available for Client Alerts and for SMS only. Not applicable to Platform Notifications.
	//
	NotificationEventTypeCodeTypeAccountSuspended NotificationEventTypeCodeType = "AccountSuspended"

	//
	// An informational alert about account activity. A buyer or seller can subscribe to receive an account activity summary via SMS or Client Alerts. The user can specify the period (time range) for the account summary and can select how often the summary is to be sent. It is not triggered by an event but rather by an eBay daemon process that monitors a schedule database.
	//
	NotificationEventTypeCodeTypeAccountSummary NotificationEventTypeCodeType = "AccountSummary"

	//
	// This notification is deprecated.
	//
	NotificationEventTypeCodeTypeThirdPartyCartCheckout NotificationEventTypeCodeType = "ThirdPartyCartCheckout"

	//
	// This notification is sent to a subscribed seller when the seller has
	// revised a listing and added a nonprofit organization to receive a percentage (10 percent up to 100 percent) of the proceeds.
	//
	NotificationEventTypeCodeTypeItemRevisedAddCharity NotificationEventTypeCodeType = "ItemRevisedAddCharity"

	//
	// This notification is sent to a subscribed buyer when that buyer adds an item to the Watch List.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeItemAddedToWatchList NotificationEventTypeCodeType = "ItemAddedToWatchList"

	//
	// This notification is sent to a subscribed buyer when that buyer removes an item from the Watch List.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeItemRemovedFromWatchList NotificationEventTypeCodeType = "ItemRemovedFromWatchList"

	//
	// This notification is deprecated.
	//
	NotificationEventTypeCodeTypeItemAddedToBidGroup NotificationEventTypeCodeType = "ItemAddedToBidGroup"

	//
	// This notification is deprecated.
	//
	NotificationEventTypeCodeTypeItemRemovedFromBidGroup NotificationEventTypeCodeType = "ItemRemovedFromBidGroup"

	//
	// This notification is sent to a subscribed buyer or seller when that user leaves feedback for an order partner.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetFeedback</b> call response.
	//
	NotificationEventTypeCodeTypeFeedbackLeft NotificationEventTypeCodeType = "FeedbackLeft"

	//
	// This notification is sent to a subscribed buyer or seller when that user receives feedback from an order partner.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetFeedback</b> call response.
	//
	NotificationEventTypeCodeTypeFeedbackReceived NotificationEventTypeCodeType = "FeedbackReceived"

	//
	// This notification is sent to a subscribed buyer or seller when that user's Feedback star has changed.
	// Sent to a subscribing third party when a user's Feedback star level changes.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetUser</b> call response.
	//
	NotificationEventTypeCodeTypeFeedbackStarChanged NotificationEventTypeCodeType = "FeedbackStarChanged"

	//
	// This notification is sent to a subscribed buyer when that buyer places a bid for an auction item.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeBidPlaced NotificationEventTypeCodeType = "BidPlaced"

	//
	// This notification is sent to a subscribed seller each time a prospective buyer places a bid for the seller's auction item.
	// <br><br>
	// If subscribed to by a seller and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeBidReceived NotificationEventTypeCodeType = "BidReceived"

	//
	// This notification is sent to a subscribed buyer if that buyer is the winner of an auction item.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeItemWon NotificationEventTypeCodeType = "ItemWon"

	//
	// This notification is sent to a subscribed buyer if that buyer did not end up as the highest bidder for an auction item.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeItemLost NotificationEventTypeCodeType = "ItemLost"

	//
	// This notification is sent to a subscribed seller when an auction listing ends with no winning bidder or when a fixed-price listing ends with no sale(s).
	// <br><br>
	// If subscribed to by a seller and when applicable, this notification will appear in the <b>GetItem</b> call response.
	//
	NotificationEventTypeCodeTypeItemUnsold NotificationEventTypeCodeType = "ItemUnsold"

	//
	// This notification is sent to a subscribed buyer when a seller makes a counter offer to the buyer's Best Offer on an item.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetBestOffers</b> call response.
	//
	NotificationEventTypeCodeTypeCounterOfferReceived NotificationEventTypeCodeType = "CounterOfferReceived"

	//
	// This notification is sent to a subscribed buyer when a seller declines the buyer's Best Offer on an item.
	// <br><br>
	// If subscribed to by a buyer and when applicable, this notification will appear in the <b>GetBestOffers</b> call response.
	//
	NotificationEventTypeCodeTypeBestOfferDeclined NotificationEventTypeCodeType = "BestOfferDeclined"

	//
	// This notification is sent to a subscribed seller each time a prospective buyer places a Best Offer on an item.
	//
	NotificationEventTypeCodeTypeBestOfferPlaced NotificationEventTypeCodeType = "BestOfferPlaced"

	//
	// This notification is deprecated. Use <b>ItemAddedToWatchList</b> notification instead.
	//
	NotificationEventTypeCodeTypeAddToWatchList NotificationEventTypeCodeType = "AddToWatchList"

	//
	// This notification is deprecated. Use <b>BidPlaced</b>  notification instead.
	//
	NotificationEventTypeCodeTypePlaceOffer NotificationEventTypeCodeType = "PlaceOffer"

	//
	// This notification is deprecated. Use <b>ItemRemovedFromWatchList</b> notification instead. ItemRemovedFromWatchList
	//
	NotificationEventTypeCodeTypeRemoveFromWatchList NotificationEventTypeCodeType = "RemoveFromWatchList"

	//
	// This notification is deprecated.
	//
	NotificationEventTypeCodeTypeAddToBidGroup NotificationEventTypeCodeType = "AddToBidGroup"

	//
	// This notification is deprecated.
	//
	NotificationEventTypeCodeTypeRemoveFromBidGroup NotificationEventTypeCodeType = "RemoveFromBidGroup"

	//
	// This notification is deprecated.
	//
	NotificationEventTypeCodeTypeItemsCanceled NotificationEventTypeCodeType = "ItemsCanceled"

	//
	// This notification is sent to a subscribed buyer or seller if that user's authentication token is revoked.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetTokenStatus</b> call response.
	//
	NotificationEventTypeCodeTypeTokenRevocation NotificationEventTypeCodeType = "TokenRevocation"

	//
	// This notification is sent to a subscribed seller when that seller's Bulk Data Exchange job completes.
	//
	NotificationEventTypeCodeTypeBulkDataExchangeJobCompleted NotificationEventTypeCodeType = "BulkDataExchangeJobCompleted"

	//
	// Reserved for future use.
	//
	NotificationEventTypeCodeTypeCustomCode NotificationEventTypeCodeType = "CustomCode"

	//
	// This notification is sent to a subscribed buyer and seller when that seller has marked an item as 'shipped'.
	//
	NotificationEventTypeCodeTypeItemMarkedShipped NotificationEventTypeCodeType = "ItemMarkedShipped"

	//
	// This notification is sent to a subscribed buyer and seller when that seller has marked an order as 'paid'.
	//
	NotificationEventTypeCodeTypeItemMarkedPaid NotificationEventTypeCodeType = "ItemMarkedPaid"

	//
	// This notification is sent to a subscribing buyer or seller when a response to the eBay Money Back Guarantee case is due from that user. When an eBay Money Back Guarantee case is opened, this notification is only sent to the seller involved in the case and not the buyer.
	//
	NotificationEventTypeCodeTypeEBPMyResponseDue NotificationEventTypeCodeType = "EBPMyResponseDue"

	//
	// This notification is sent to the subscribed buyer or seller when a response to the eBay Money Back Guarantee case is due from the other party in the case.
	//
	NotificationEventTypeCodeTypeEBPOtherPartyResponseDue NotificationEventTypeCodeType = "EBPOtherPartyResponseDue"

	//
	// This notification is sent to the subscribed buyer or seller when an eBay Money Back Guarantee case is escalated to eBay customer support.
	//
	NotificationEventTypeCodeTypeEBPEscalatedCase NotificationEventTypeCodeType = "EBPEscalatedCase"

	//
	// This notification is sent to the subscribed buyer or seller when the decision of an eBay Money Back Guarantee case is appealed.
	//
	NotificationEventTypeCodeTypeEBPAppealedCase NotificationEventTypeCodeType = "EBPAppealedCase"

	//
	// This notification is sent to the subscribed seller when payment (to eBay or buyer) related to the outcome of an eBay Money Back Guarantee case is due.
	//
	NotificationEventTypeCodeTypeEBPMyPaymentDue NotificationEventTypeCodeType = "EBPMyPaymentDue"

	//
	// This notification is sent to the subscribed seller when payment (to eBay or buyer) related to the outcome of an eBay Money Back Guarantee case is processed.
	//
	NotificationEventTypeCodeTypeEBPPaymentDone NotificationEventTypeCodeType = "EBPPaymentDone"

	//
	// This notification is sent to the subscribed buyer or seller when an appeal of an eBay Money Back Guarantee case decision has been closed.
	//
	NotificationEventTypeCodeTypeEBPClosedAppeal NotificationEventTypeCodeType = "EBPClosedAppeal"

	//
	// This notification is sent to the subscribed buyer or seller when an eBay Money Back Guarantee case has been closed.
	//
	NotificationEventTypeCodeTypeEBPClosedCase NotificationEventTypeCodeType = "EBPClosedCase"

	//
	// This notification is sent to a subscribed buyer or seller when that user receives a high-priority message in InBox.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetMyMessages</b> call response. For this notification to be returned in <b>GetMyMessages</b>, the <b>DetailLevel</b> value in the <b>GetMyMessages</b> request must be set to <code>ReturnMessages</code>.
	// <br><br>
	// <b>MyMessagesHighPriorityMessage</b>,  <b>MyMessagesM2MMessage</b>, and <b>MyMessagesHighPriorityMessageHeader</b> cannot
	// be subscribed to at the same time or specified in the same call.
	//
	NotificationEventTypeCodeTypeMyMessagesHighPriorityMessage NotificationEventTypeCodeType = "MyMessagesHighPriorityMessage"

	//
	// This notification is sent to a subscribed buyer or seller when that user receives a high-priority message in InBox.
	// <br><br>
	// If subscribed to by a buyer or seller, and when applicable, this notification will appear in the <b>GetMyMessages</b> call response. For this notification to be returned in <b>GetMyMessages</b>, the <b>DetailLevel</b> value in the <b>GetMyMessages</b> request must be set to <code>ReturnHeaders</code>.
	// <br><br>
	// <b>MyMessagesHighPriorityMessage</b>,  <b>MyMessagesM2MMessage</b>, and <b>MyMessagesHighPriorityMessageHeader</b> cannot
	// be subscribed to at the same time or specified in the same call.
	//
	NotificationEventTypeCodeTypeMyMessagesHighPriorityMessageHeader NotificationEventTypeCodeType = "MyMessagesHighPriorityMessageHeader"

	//
	// This notification is sent to a subscribed buyer or seller when an eBay Money Back Guarantee case has been put on hold by eBay customer support.
	//
	NotificationEventTypeCodeTypeEBPOnHoldCase NotificationEventTypeCodeType = "EBPOnHoldCase"

	//
	// This notification is sent to a subscribed seller after the buyer's payment on an order has cleared.
	//
	NotificationEventTypeCodeTypeReadyToShip NotificationEventTypeCodeType = "ReadyToShip"

	//
	// This notification is sent to a subscribed seller when eBay is prepared to send the seller's funds for an order that was previously placed on hold.
	//
	NotificationEventTypeCodeTypeReadyForPayout NotificationEventTypeCodeType = "ReadyForPayout"

	//
	// This notification is sent to a subscribed buyer when the listing of the auction item where the buyer has an active bid is about
	// to end. This event has a <b>TimeLeft</b> property that defines the 'ending soon' threshold value.
	//
	NotificationEventTypeCodeTypeBidItemEndingSoon NotificationEventTypeCodeType = "BidItemEndingSoon"

	//
	// This notification is sent to a subscribed buyer when an item in the buyer's shopping cart is about
	// to end. This event has a <b>TimeLeft</b> property that defines the 'ending soon' threshold value.
	//
	NotificationEventTypeCodeTypeShoppingCartItemEndingSoon NotificationEventTypeCodeType = "ShoppingCartItemEndingSoon"

	//
	// This notification is sent to a subscribed buyer or seller when a return request involving those users is created.
	//
	NotificationEventTypeCodeTypeReturnCreated NotificationEventTypeCodeType = "ReturnCreated"

	//
	// This notification is sent to a subscribed seller when a return request is waiting for information from the seller, like a Return Merchandise Authorization (RMA) number or a correct return address.
	//
	NotificationEventTypeCodeTypeReturnWaitingForSellerInfo NotificationEventTypeCodeType = "ReturnWaitingForSellerInfo"

	//
	// This notification is sent to a subscribed buyer or seller when information from the seller (e.g. a Return Merchandise Authorization number) is overdue.
	//
	NotificationEventTypeCodeTypeReturnSellerInfoOverdue NotificationEventTypeCodeType = "ReturnSellerInfoOverdue"

	//
	// This notification is sent to a subscribed buyer or seller when the buyer has shipped a return item back to the seller.
	//
	NotificationEventTypeCodeTypeReturnShipped NotificationEventTypeCodeType = "ReturnShipped"

	//
	// This notification is sent to a subscribed buyer or seller when a return item is received by the seller.
	//
	NotificationEventTypeCodeTypeReturnDelivered NotificationEventTypeCodeType = "ReturnDelivered"

	//
	// This notification is sent to a subscribed buyer or seller when a refund to the buyer is overdue on a return.
	//
	NotificationEventTypeCodeTypeReturnRefundOverdue NotificationEventTypeCodeType = "ReturnRefundOverdue"

	//
	// This notification is sent to a subscribed buyer or seller when a return request is closed.
	//
	NotificationEventTypeCodeTypeReturnClosed NotificationEventTypeCodeType = "ReturnClosed"

	//
	// This notification is sent to a subscribed buyer or seller when a return request is escalated into a eBay Money Back Guarantee case.
	//
	NotificationEventTypeCodeTypeReturnEscalated NotificationEventTypeCodeType = "ReturnEscalated"

	//
	// This notification is sent to a subscribed seller when a buyer has requested an order cancellation.
	//
	NotificationEventTypeCodeTypeBuyerCancelRequested NotificationEventTypeCodeType = "BuyerCancelRequested"

	//
	// This notification is no longer applicable. Do not use.
	//
	NotificationEventTypeCodeTypeUnmatchedPaymentReceived NotificationEventTypeCodeType = "UnmatchedPaymentReceived"

	//
	// This notification is sent to a subscribed seller when a refund to the buyer has been successfully processed.
	//
	NotificationEventTypeCodeTypeRefundSuccess NotificationEventTypeCodeType = "RefundSuccess"

	//
	// This notification is sent to a subscribed seller when a refund to the buyer has failed.
	//
	NotificationEventTypeCodeTypeRefundFailure NotificationEventTypeCodeType = "RefundFailure"

	//
	// This notification is sent to a subscribed seller when the buyer has opened up an Item Not Received inquiry against an order line item.
	//
	NotificationEventTypeCodeTypeOrderInquiryOpened NotificationEventTypeCodeType = "OrderInquiryOpened"

	//
	// This notification is sent to a subscribed seller alerting the seller that the buyer will soon be eligible to escalate an Item Not Received inquiry into an eBay Money Back Guarantee case.
	//
	NotificationEventTypeCodeTypeOrderInquiryReminderForEscalation NotificationEventTypeCodeType = "OrderInquiryReminderForEscalation"

	//
	// This notification is sent to a subscribed seller alerting the seller that he/she should provide shipment tracking information to the buyer in order to expedite the closure of an Item Not Received inquiry, and to avoid the possibility that the buyer will escalate the inquiry into an eBay Money Back Guarantee case.
	//
	NotificationEventTypeCodeTypeOrderInquiryProvideShipmentInformation NotificationEventTypeCodeType = "OrderInquiryProvideShipmentInformation"

	//
	// This notification is sent to a subscribed seller when an Item Not Received inquiry against an order line item has closed.
	//
	NotificationEventTypeCodeTypeOrderInquiryClosed NotificationEventTypeCodeType = "OrderInquiryClosed"

	//
	// This notification is sent to a subscribed seller when an Item Not Received inquiry against an order line item has been escalated to an eBay Money Back Guarantee case.
	//
	NotificationEventTypeCodeTypeOrderInquiryEscalatedToCase NotificationEventTypeCodeType = "OrderInquiryEscalatedToCase"

	//
	// This notification is sent to a subscribed buyer when an In-Store Pickup or Click and Collect order is ready to be picked up at the merchant's store.
	//
	NotificationEventTypeCodeTypeItemReadyForPickup NotificationEventTypeCodeType = "ItemReadyForPickup"

	//
	// This notification is sent to a subscribed seller when the quantity of a multiple-quantity, Good 'Til Cancelled, fixed-price listing has reached '0'. This notification will only be sent if the seller has the out-of-stock feature turned on in My eBay Preferences.
	//
	NotificationEventTypeCodeTypeItemOutOfStock NotificationEventTypeCodeType = "ItemOutOfStock"

	//
	// This notification is sent to a subscribed seller if an eBay courier was unable to deliver an eBay Scheduled Delivery order to a buyer. This notification is only applicable for eBay Scheduled Delivery orders, which are only available in the London (UK) area.
	//
	NotificationEventTypeCodeTypeBuyerNoShow NotificationEventTypeCodeType = "BuyerNoShow"

	//
	// This notification is no longer applicable.
	//
	NotificationEventTypeCodeTypeWebnextMobilePhotoSync NotificationEventTypeCodeType = "WebnextMobilePhotoSync"

	//
	// This notification is sent to a subscribed buyer if payment is still due for an order.
	//
	NotificationEventTypeCodeTypePaymentReminder NotificationEventTypeCodeType = "PaymentReminder"

	//
	// This notification is sent to a subscribed seller if an eBay courier has picked up an eBay On Demand Delivery order from a store for delivery to a buyer. This notification is only applicable for eBay On Demand Delivery orders, which are only available in the London (UK) area.
	//
	NotificationEventTypeCodeTypeEBNOrderPickedUp NotificationEventTypeCodeType = "EBNOrderPickedUp"

	//
	// This notification is sent to a subscribed seller if an eBay On Demand Delivery order has been cancelled. This notification is only applicable for eBay On Demand Delivery orders, which are only available in the London (UK) area.
	//
	NotificationEventTypeCodeTypeEBNOrderCanceled NotificationEventTypeCodeType = "EBNOrderCanceled"

	//
	// This notification is sent to a subscribed buyer or seller if the status of a member-to-member message has changed.
	//
	NotificationEventTypeCodeTypeM2MMessageStatusChange NotificationEventTypeCodeType = "M2MMessageStatusChange"
)

//
// This type is deprecated.
//
type NotificationPayloadTypeCodeType string

const (

	//
	// New Schema format (used by the new schema XML API and SOAP API).
	//
	NotificationPayloadTypeCodeTypeEBLSchemaSOAP NotificationPayloadTypeCodeType = "eBLSchemaSOAP"

	//
	// Reserved for internal or future use
	//
	NotificationPayloadTypeCodeTypeCustomCode NotificationPayloadTypeCodeType = "CustomCode"
)

//
// Defines roles for platform notifications.
//
type NotificationRoleCodeType string

const (

	//
	// (in) Specifies that you want to set or return application-level
	// preferences. Default value.
	//
	NotificationRoleCodeTypeApplication NotificationRoleCodeType = "Application"

	//
	// (in) Specifies that you want to set or return user-level preferences.
	//
	NotificationRoleCodeTypeUser NotificationRoleCodeType = "User"

	//
	// (in) Specifies that you want to set or return user data-level preferences.
	//
	NotificationRoleCodeTypeUserData NotificationRoleCodeType = "UserData"

	//
	// (in) Specifies that you want to set or return event-level preferences.
	//
	NotificationRoleCodeTypeEvent NotificationRoleCodeType = "Event"

	//
	// Reserved for future use
	//
	NotificationRoleCodeTypeCustomCode NotificationRoleCodeType = "CustomCode"
)

//
// A unique identifier for an order.
//
type OrderIDType string

//
// This enumerated type is deprecated
//
type OrderRoleCodeType string

const (
	OrderRoleCodeTypeBuyer OrderRoleCodeType = "Buyer"

	OrderRoleCodeTypeSeller OrderRoleCodeType = "Seller"

	OrderRoleCodeTypeCustomCode OrderRoleCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible values for order states. Some of these values can be used as <b>OrderStatus</b> filters in the <b>GetOrders</b> request payload, and some of these values may be returned in any of the order management calls under the <b>OrderStatus</b> field. See the individual value descriptions for more information on how they are used and/or when they are returned.
//
type OrderStatusCodeType string

const (

	//
	// This value indicates that the order is not yet complete. An order in the <code>Active</code> state means that the buyer has not initiated payment for the order. While an order is in this state, it can be combined into a <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-AnItem.html#CombinedInvoice">Combined Invoice</a>, a buyer can request a cancellation, and/or a seller can update payment details (including a change in order price) or shipping details (including shipping cost and shipping service).
	// <br><br>
	// This value can be used a filter value in the <b>OrderStatus</b> field of the <b>GetOrders</b> request payload, and it can also be returned in any of the order management calls.
	//
	OrderStatusCodeTypeActive OrderStatusCodeType = "Active"

	//
	// This value can be used a filter value in the <b>OrderStatus</b> field, and if used, all inactive orders will be returned.
	//
	OrderStatusCodeTypeInactive OrderStatusCodeType = "Inactive"

	//
	// This value indicates that the order is paid for and complete. An order in the <code>Completed</code> state means that no other changes to the order can be made.
	// <br><br>
	// This value can be used a filter value in the <b>OrderStatus</b> field of the <b>GetOrders</b> request payload, and it can also be returned in any of the order management calls.
	//
	OrderStatusCodeTypeCompleted OrderStatusCodeType = "Completed"

	//
	// This value indicates that the order has been cancelled. Depending on whether payment was made or not, the seller may also need to refund the buyer after an order is cancelled.
	// <br><br>
	// This value can be used a filter value in the <b>OrderStatus</b> field of the <b>GetOrders</b> request payload, and it can also be returned in any of the order management calls.
	//
	OrderStatusCodeTypeCancelled OrderStatusCodeType = "Cancelled"

	//
	// This enumeration value was only used for the deprecated Half.com site, so is no longer applicable and should not be used as an <b>OrderStatus</b> value in the <b>GetOrders</b> request payload.
	//
	OrderStatusCodeTypeShipped OrderStatusCodeType = "Shipped"

	//
	// This value is not used.
	//
	OrderStatusCodeTypeDefault OrderStatusCodeType = "Default"

	//
	// This enumeration value is no longer applicable and should not be used as an <b>OrderStatus</b> value in the <b>GetOrders</b> request payload.
	//
	OrderStatusCodeTypeAuthenticated OrderStatusCodeType = "Authenticated"

	//
	// This enumeration value indicates that the order is currently in the state of being processed, but is not yet complete.
	// <br><br>
	// This value is not supported by the <b>OrderStatus</b> field of the <b>GetOrders</b> request payload, but it can be returned in any of the order management calls.
	//
	OrderStatusCodeTypeInProcess OrderStatusCodeType = "InProcess"

	//
	// This enumeration value is no longer applicable and should not be used as an <b>OrderStatus</b> value in the <b>GetOrders</b> request payload.
	//
	OrderStatusCodeTypeInvalid OrderStatusCodeType = "Invalid"

	//
	// Reserved for internal or future use.
	//
	OrderStatusCodeTypeCustomCode OrderStatusCodeType = "CustomCode"

	//
	// This enumeration value is passed into the <b>OrderStatus</b> of <b>GetOrders</b> to retrieve orders in all states. This is the default value. This value is not applicable to the response payloads of the order management calls.
	//
	OrderStatusCodeTypeAll OrderStatusCodeType = "All"

	//
	// This value indicates that a buyer has initiated a cancellation request on the order. If a seller sees an order in this state, that seller must either approve or reject the cancellation request through My eBay Web flows or through the Post-Order API cancellation calls.
	// <br/><br/>
	// This enumeration value cannot be used as an <b>OrderStatus</b> value in the <b>GetOrders</b> request payload.
	//
	OrderStatusCodeTypeCancelPending OrderStatusCodeType = "CancelPending"
)

type OrderStatusFilterCodeType string

const (

	//
	// All applicable sold listings, regardless of
	// their Paid or Shipped status.
	//
	OrderStatusFilterCodeTypeAll OrderStatusFilterCodeType = "All"

	//
	// Sold listings that have not yet been marked as
	// Paid in My eBay.
	//
	OrderStatusFilterCodeTypeAwaitingPayment OrderStatusFilterCodeType = "AwaitingPayment"

	//
	// Sold listings that have not yet been marked as
	// Shipped in My eBay.
	//
	OrderStatusFilterCodeTypeAwaitingShipment OrderStatusFilterCodeType = "AwaitingShipment"

	//
	// Sold listings that have been marked as
	// Paid and Shipped in My eBay.
	//
	OrderStatusFilterCodeTypePaidAndShipped OrderStatusFilterCodeType = "PaidAndShipped"

	//
	// Reserved for future or internal use.
	//
	OrderStatusFilterCodeTypeCustomCode OrderStatusFilterCodeType = "CustomCode"
)

//
// Specifies the payment status of an order, as
// seen by the buyer and seller.
//
type PaidStatusCodeType string

const (

	//
	// The buyer has not completed checkout, but has not paid through PayPal or
	// PaisaPay (but please also see the documentation for PaymentHoldStatus and its applicable values).
	// The buyer might have paid using another method, but the payment
	// might not have been received or cleared.
	// Important: Please see the documentation for PaymentHoldStatus and its applicable values.
	// PaymentHoldStatus contains the current status of a hold on a PayPal payment.
	//
	PaidStatusCodeTypeNotPaid PaidStatusCodeType = "NotPaid"

	//
	// The buyer has not completed the checkout process and so has not made payment.
	//
	PaidStatusCodeTypeBuyerHasNotCompletedCheckout PaidStatusCodeType = "BuyerHasNotCompletedCheckout"

	//
	// The buyer has made a PayPal payment, but the seller has not yet received it.
	//
	PaidStatusCodeTypePaymentPendingWithPayPal PaidStatusCodeType = "PaymentPendingWithPayPal"

	//
	// The buyer has made a PayPal payment, and the payment is complete.
	// But please also see the documentation for PaymentHoldStatus and its applicable values.
	// PaymentHoldStatus contains the current status of a hold on a PayPal payment.
	//
	PaidStatusCodeTypePaidWithPayPal PaidStatusCodeType = "PaidWithPayPal"

	//
	// The order is marked as paid by either the buyer or seller.
	//
	PaidStatusCodeTypeMarkedAsPaid PaidStatusCodeType = "MarkedAsPaid"

	//
	// The buyer has made an escrow payment, but the seller has not yet received it.
	//
	PaidStatusCodeTypePaymentPendingWithEscrow PaidStatusCodeType = "PaymentPendingWithEscrow"

	//
	// The buyer has made an escrow payment, and the seller has received payment.
	//
	PaidStatusCodeTypePaidWithEscrow PaidStatusCodeType = "PaidWithEscrow"

	//
	// The buyer has made an escrow payment, but has cancelled the payment.
	//
	PaidStatusCodeTypeEscrowPaymentCancelled PaidStatusCodeType = "EscrowPaymentCancelled"

	//
	// The buyer has paid with PaisaPay, but the payment is still being processed.
	// The seller has not yet received payment.
	//
	PaidStatusCodeTypePaymentPendingWithPaisaPay PaidStatusCodeType = "PaymentPendingWithPaisaPay"

	//
	// The buyer has paid with PaisaPay, and the payment is complete.
	//
	PaidStatusCodeTypePaidWithPaisaPay PaidStatusCodeType = "PaidWithPaisaPay"

	//
	// The buyer has made a payment other than PayPal, but the
	// payment is still being processed.
	//
	PaidStatusCodeTypePaymentPending PaidStatusCodeType = "PaymentPending"

	//
	// This enumeration value is deprecated since eBay India is no longer a functioning marketplace.
	//
	PaidStatusCodeTypePaymentPendingWithPaisaPayEscrow PaidStatusCodeType = "PaymentPendingWithPaisaPayEscrow"

	//
	// This enumeration value is deprecated since eBay India is no longer a functioning marketplace.
	//
	PaidStatusCodeTypePaidWithPaisaPayEscrow PaidStatusCodeType = "PaidWithPaisaPayEscrow"

	//
	// The selected payment method is PaisaPay, but the buyer has not made the payment.
	//
	PaidStatusCodeTypePaisaPayNotPaid PaidStatusCodeType = "PaisaPayNotPaid"

	//
	// The buyer's payment was refunded.
	//
	PaidStatusCodeTypeRefunded PaidStatusCodeType = "Refunded"

	//
	// The selected payment method is COD and the buyer will make the payment upon delivery.
	//
	PaidStatusCodeTypeWaitingForCODPayment PaidStatusCodeType = "WaitingForCODPayment"

	//
	// The buyer has paid for the order with the COD payment method.
	//
	PaidStatusCodeTypePaidCOD PaidStatusCodeType = "PaidCOD"

	//
	// Reserved for future use.
	//
	PaidStatusCodeTypeCustomCode PaidStatusCodeType = "CustomCode"

	//
	// The order has been paid for.
	//
	PaidStatusCodeTypePaid PaidStatusCodeType = "Paid"

	//
	// This value indicates that the buyer was offered the 'Pay Upon Invoice' option. The 'Pay Upon Invoice' option is only available to eligible German buyers as part of Progressive Checkout on the German site. If a German buyer is offered the 'Pay Upon Invoice' option, that buyer is not required to pay for the order until after receiving an order invoice from the seller.
	//
	PaidStatusCodeTypePayUponInvoice PaidStatusCodeType = "PayUponInvoice"
)

//
// Enumerated type that defines PayPal account levels.
//
type PayPalAccountLevelCodeType string

const (

	//
	// This enumeration value indicates that the user's PayPal account is unverified.
	//
	PayPalAccountLevelCodeTypeUnverified PayPalAccountLevelCodeType = "Unverified"

	//
	// This enumeration value indicates that the user's international PayPal account is unverified.
	//
	PayPalAccountLevelCodeTypeInternationalUnverified PayPalAccountLevelCodeType = "InternationalUnverified"

	//
	// This enumeration value indicates that the user's PayPal account is verified.
	//
	PayPalAccountLevelCodeTypeVerified PayPalAccountLevelCodeType = "Verified"

	//
	// This enumeration value indicates that the user's international PayPal account is verified.
	//
	PayPalAccountLevelCodeTypeInternationalVerified PayPalAccountLevelCodeType = "InternationalVerified"

	//
	// This enumeration value indicates that the user's PayPal account is a trusted account.
	//
	PayPalAccountLevelCodeTypeTrusted PayPalAccountLevelCodeType = "Trusted"

	//
	// This enumeration value indicates that the user's PayPal account information is unknown.
	//
	PayPalAccountLevelCodeTypeUnknown PayPalAccountLevelCodeType = "Unknown"

	//
	// This enumeration value indicates that the user's PayPal account is invalid.
	//
	PayPalAccountLevelCodeTypeInvalid PayPalAccountLevelCodeType = "Invalid"

	//
	// Reserved for internal or future use
	//
	PayPalAccountLevelCodeTypeCustomCode PayPalAccountLevelCodeType = "CustomCode"
)

//
// Enumerated type that defines PayPal account states.
//
type PayPalAccountStatusCodeType string

const (

	//
	// This enumeration value indicates that the user's PayPal account is active.
	//
	PayPalAccountStatusCodeTypeActive PayPalAccountStatusCodeType = "Active"

	//
	// This enumeration value indicates that the user's PayPal account is closed.
	//
	PayPalAccountStatusCodeTypeClosed PayPalAccountStatusCodeType = "Closed"

	//
	// This enumeration value indicates that the user's PayPal account is in a highly restricted state.
	//
	PayPalAccountStatusCodeTypeHighRestricted PayPalAccountStatusCodeType = "HighRestricted"

	//
	// This enumeration value indicates that the user's PayPal account is in a low restricted state.
	//
	PayPalAccountStatusCodeTypeLowRestricted PayPalAccountStatusCodeType = "LowRestricted"

	//
	// This enumeration value indicates that the user's PayPal account is locked.
	//
	PayPalAccountStatusCodeTypeLocked PayPalAccountStatusCodeType = "Locked"

	//
	// Reserved for internal or future use
	//
	PayPalAccountStatusCodeTypeCustomCode PayPalAccountStatusCodeType = "CustomCode"

	//
	// This enumeration value indicates that the user's PayPal account is wired off.
	//
	PayPalAccountStatusCodeTypeWireOff PayPalAccountStatusCodeType = "WireOff"

	//
	// This enumeration value indicates that the state of the user's PayPal account is unknown.
	//
	PayPalAccountStatusCodeTypeUnknown PayPalAccountStatusCodeType = "Unknown"

	//
	// This enumeration value indicates that the user's PayPal account is invalid.
	//
	PayPalAccountStatusCodeTypeInvalid PayPalAccountStatusCodeType = "Invalid"
)

//
// Enumerated type that defines PayPal account types.
//
type PayPalAccountTypeCodeType string

const (

	//
	// This enumeration value indicates that the user's PayPal account is a Personal account.
	//
	PayPalAccountTypeCodeTypePersonal PayPalAccountTypeCodeType = "Personal"

	//
	// This enumeration value indicates that the user's PayPal account is a Premier account.
	//
	PayPalAccountTypeCodeTypePremier PayPalAccountTypeCodeType = "Premier"

	//
	// This enumeration value indicates that the user's PayPal account is a Business account.
	//
	PayPalAccountTypeCodeTypeBusiness PayPalAccountTypeCodeType = "Business"

	//
	// This enumeration value indicates that the user's PayPal account type is unknown.
	//
	PayPalAccountTypeCodeTypeUnknown PayPalAccountTypeCodeType = "Unknown"

	//
	// This enumeration value indicates that the user's PayPal account is invalid.
	//
	PayPalAccountTypeCodeTypeInvalid PayPalAccountTypeCodeType = "Invalid"

	//
	// Reserved for internal or future use
	//
	PayPalAccountTypeCodeTypeCustomCode PayPalAccountTypeCodeType = "CustomCode"
)

//
// Enumerated type that contains all possible reasons why the buyer's payment for
// the order is being held by PayPal instead of being distributed to the seller's
// account. A seller's funds for an order can be held by PayPal for as little as
// three days after the buyer receives the order, but the hold can be up to 21
// days based on the scenario, and in some cases, the seller's lack of action in
// helping to expedite the release of funds.
//
type PaymentHoldReasonCodeType string

const (

	//
	// This value indicates that the buyer's payment for the order is being held
	// by PayPal because the seller is new to selling on eBay. Sellers are
	// considered "new" until they have met all three criteria below:
	// <ul>
	// <li>More than 90 days have passed since first successful sale</li>
	// <li>More than 25 domestic sales</li>
	// <li>More than $250.00 in total sales</li>
	// </ul>
	//
	PaymentHoldReasonCodeTypeNewSeller PaymentHoldReasonCodeType = "NewSeller"

	//
	// This value indicates that the buyer's payment for the order is being held
	// by PayPal because the seller has been classified as a Below Standard
	// seller.
	//
	PaymentHoldReasonCodeTypeBelowStandardSeller PaymentHoldReasonCodeType = "BelowStandardSeller"

	//
	// This value indicates that the buyer's payment for the order is being held
	// by PayPal because an eBay Money Back Guarantee case has been filed against
	// the order. If this value is returned, the seller can expedite the release
	// of PayPal funds into their account by resolving the eBay Money Back Guarantee
	// case, as indicated by a value of 'ResolveeBPCase' returned in a
	// <b>PaymentHoldDetails.RequiredSellerActionArray.RequiredSellerAction</b>
	// field.
	//
	PaymentHoldReasonCodeTypeEbpCaseOpen PaymentHoldReasonCodeType = "EbpCaseOpen"

	//
	// This value indicates that the buyer's payment for the order is being held
	// by PayPal because the seller has recently been reinstated as an active eBay
	// seller after their account went through a suspension/restricted period.
	// <br/><br/>
	// After a seller's account is suspended and then reinstated, that seller is
	// treated as a new seller, and must meet the same requirements that a new
	// seller must meet to get beyong the "New Seller" status.
	//
	PaymentHoldReasonCodeTypeReinstatementAfterSuspension PaymentHoldReasonCodeType = "ReinstatementAfterSuspension"

	//
	// This value indicates that the buyer's payment for the order is being held
	// by PayPal because the seller is classified as a casual seller on eBay.
	//
	PaymentHoldReasonCodeTypeCasualSeller PaymentHoldReasonCodeType = "CasualSeller"

	//
	// This value indicates that the buyer's payment for the order is being held
	// by PayPal because the seller's PayPal account (identified in
	// <b>Transaction.PayPalEmailAddress</b>) is new and is not
	// fully set up to receive funds.
	//
	PaymentHoldReasonCodeTypeNewPaypalAccountAdded PaymentHoldReasonCodeType = "NewPaypalAccountAdded"

	//
	// This value indicates that the reason for the buyer's payment for the order
	// being held by PayPal is not known.
	//
	PaymentHoldReasonCodeTypeNotAvailable PaymentHoldReasonCodeType = "NotAvailable"

	//
	// This value is reserved for internal or future use.
	//
	PaymentHoldReasonCodeTypeSellerIsOnBlackList PaymentHoldReasonCodeType = "SellerIsOnBlackList"

	//
	// This value is returned if the reason for the buyer's payment for the order
	// being held by PayPal cannot be classified by any of the other enumeration
	// values.
	//
	PaymentHoldReasonCodeTypeOther PaymentHoldReasonCodeType = "Other"

	//
	// This value is reserved for internal or future use.
	//
	PaymentHoldReasonCodeTypeNone PaymentHoldReasonCodeType = "None"

	//
	// This value is reserved for internal or future use.
	//
	PaymentHoldReasonCodeTypeCustomCode PaymentHoldReasonCodeType = "CustomCode"
)

//
// Enumerated type that contains the list of possible values that can be returned
// in the PaymentHoldStatus container.
//
type PaymentHoldStatusCodeType string

const (

	//
	// This value indicates a possible issue with a buyer. If this value is returned,
	// the TransactionArray.Transaction.SellerPaidStatus field is returned as NotPaid
	// in GetMyeBaySelling, and the TransactionArray.Transaction.BuyerPaidStatus field
	// is returned as PaidWithPayPal in GetMyeBayBuying.
	//
	PaymentHoldStatusCodeTypePaymentReview PaymentHoldStatusCodeType = "PaymentReview"

	//
	// This value indicates a possible issue with a seller. If this value is returned,
	// the TransactionArray.Transaction.SellerPaidStatus field is returned as
	// PaidWithPayPal in GetMyeBaySelling, and the
	// TransactionArray.Transaction.BuyerPaidStatus field is returned as PaidWithPayPal
	// in GetMyeBayBuying.
	//
	PaymentHoldStatusCodeTypeMerchantHold PaymentHoldStatusCodeType = "MerchantHold"

	//
	// This value indicates that a payment hold on the item has been released.
	//
	PaymentHoldStatusCodeTypeReleased PaymentHoldStatusCodeType = "Released"

	//
	// This value indicates that there is no payment hold on the item.
	//
	PaymentHoldStatusCodeTypeNone PaymentHoldStatusCodeType = "None"

	//
	// This value indicates that there is a "new seller hold" on the item. PayPal
	// may hold payments to a new seller for up to 21 days.
	// Sellers are
	// considered "new" until they have met all three criteria below:
	// <ul>
	// <li>More than 90 days have passed since first successful sale</li>
	// <li>More than 25 domestic sales</li>
	// <li>More than $250.00 in total sales</li>
	// </ul>
	//
	PaymentHoldStatusCodeTypeNewSellerHold PaymentHoldStatusCodeType = "NewSellerHold"

	//
	// This value indicates that there is a payment hold on the item.
	//
	PaymentHoldStatusCodeTypePaymentHold PaymentHoldStatusCodeType = "PaymentHold"

	//
	// This value indicates that the process for the release of funds for the
	// order has been initiated.
	//
	PaymentHoldStatusCodeTypeReleasePending PaymentHoldStatusCodeType = "ReleasePending"

	//
	// This value indicates that the funds are available in the seller's PayPal
	// account.
	//
	PaymentHoldStatusCodeTypeReleaseConfirmed PaymentHoldStatusCodeType = "ReleaseConfirmed"

	//
	// This value is no longer used.
	//
	PaymentHoldStatusCodeTypeReleaseFailed PaymentHoldStatusCodeType = "ReleaseFailed"

	//
	// This value is reserved for internal or future use.
	//
	PaymentHoldStatusCodeTypeCustomCode PaymentHoldStatusCodeType = "CustomCode"
)

//
// This enumerated type indicates the type of payment instructions included in the shipping package.
//
type PaymentInstructionCodeType string

const (

	//
	// This enumeration value indicates that payment instructions were included in the shipping package for the 'Pay Upon Invoice' order.
	//
	PaymentInstructionCodeTypePaymentInstruction PaymentInstructionCodeType = "PaymentInstruction"

	//
	// Reserved for internal or future use.
	//
	PaymentInstructionCodeTypeCustomCode PaymentInstructionCodeType = "CustomCode"
)

//
// Used for specifying items for which a specific payment method or methods are accepted.
//
type PaymentMethodSearchCodeType string

const (

	//
	// PayPal payment method.
	//
	PaymentMethodSearchCodeTypePayPal PaymentMethodSearchCodeType = "PayPal"

	//
	// PaisaPay payment method.
	//
	PaymentMethodSearchCodeTypePaisaPay PaymentMethodSearchCodeType = "PaisaPay"

	//
	// Either the PayPal or the PaisaPay payment method.
	//
	PaymentMethodSearchCodeTypePayPalOrPaisaPay PaymentMethodSearchCodeType = "PayPalOrPaisaPay"

	PaymentMethodSearchCodeTypeCustomCode PaymentMethodSearchCodeType = "CustomCode"

	//
	// This enumeration value is deprecated since eBay India is no longer a functioning marketplace.
	//
	PaymentMethodSearchCodeTypePaisaPayEscrowEMI PaymentMethodSearchCodeType = "PaisaPayEscrowEMI"
)

//
// This enumerated type is deprecated.
//
type PaymentOptionsGroupEnabledCodeType string

const (

	//
	// This value is not used.
	//
	PaymentOptionsGroupEnabledCodeTypeEBayPaymentProcessEnabled PaymentOptionsGroupEnabledCodeType = "eBayPaymentProcessEnabled"

	//
	// This value is not used.
	//
	PaymentOptionsGroupEnabledCodeTypeNonStandardPaymentsEnabled PaymentOptionsGroupEnabledCodeType = "NonStandardPaymentsEnabled"

	//
	// This value is not used.
	//
	PaymentOptionsGroupEnabledCodeTypeEBayPaymentProcessExcluded PaymentOptionsGroupEnabledCodeType = "eBayPaymentProcessExcluded"

	//
	// This value is not used.
	//
	PaymentOptionsGroupEnabledCodeTypeCustomCode PaymentOptionsGroupEnabledCodeType = "CustomCode"
)

//
// Type defining the values that can be returned in the <b>eBayPaymentStatus</b>
// field of order management calls. These values indicate the current status of the buyer's
// payment for an order.
//
type PaymentStatusCodeType string

const (

	//
	// This value indicates that the buyer's payment for the order has cleared. A
	// <b>CheckoutStatus.eBayPaymentStatus</b> value of 'NoPaymentFailure'
	// and a <b>CheckoutStatus.Status</b> value of 'Complete' indicates that
	// checkout is complete.
	//
	PaymentStatusCodeTypeNoPaymentFailure PaymentStatusCodeType = "NoPaymentFailure"

	//
	// This value indicates that the buyer's eCheck bounced. This value is only applicable
	// if the seller accepts eChecks as a form of payment.
	//
	PaymentStatusCodeTypeBuyerECheckBounced PaymentStatusCodeType = "BuyerECheckBounced"

	//
	// This value indicates that the buyer's payment via a credit card failed. This value
	// is only applicable if the seller accepts credit cards as a form of payment.
	//
	PaymentStatusCodeTypeBuyerCreditCardFailed PaymentStatusCodeType = "BuyerCreditCardFailed"

	//
	// This value indicates that the seller reported the buyer's payment as failed.
	//
	PaymentStatusCodeTypeBuyerFailedPaymentReportedBySeller PaymentStatusCodeType = "BuyerFailedPaymentReportedBySeller"

	//
	// This value indicates that the buyer's PayPal payment is in process. This value
	// is only applicable if the buyer has selected PayPal as the payment method.
	//
	PaymentStatusCodeTypePayPalPaymentInProcess PaymentStatusCodeType = "PayPalPaymentInProcess"

	//
	// This value indicates that the buyer's non-PayPal payment is in process. This value
	// is only applicable if the buyer has selected a payment method other than PayPal.
	//
	PaymentStatusCodeTypePaymentInProcess PaymentStatusCodeType = "PaymentInProcess"

	//
	// Reserved for internal or future use.
	//
	PaymentStatusCodeTypeCustomCode PaymentStatusCodeType = "CustomCode"
)

//
// Type defining the possible states of a payment transaction. This type is used by several containers in order management-related calls.
//
type PaymentTransactionStatusCodeType string

const (

	//
	// This value indicates that the payment transaction failed.
	//
	PaymentTransactionStatusCodeTypeFailed PaymentTransactionStatusCodeType = "Failed"

	//
	// This value indicates that the payment transaction succeeded.
	//
	PaymentTransactionStatusCodeTypeSucceeded PaymentTransactionStatusCodeType = "Succeeded"

	//
	// This value indicates that the payment transaction is pending.
	//
	PaymentTransactionStatusCodeTypePending PaymentTransactionStatusCodeType = "Pending"

	//
	// Reserved for internal or future use.
	//
	PaymentTransactionStatusCodeTypeCustomCode PaymentTransactionStatusCodeType = "CustomCode"
)

//
// <br>
// <span class="tablenote"><b>Note: </b> This type is only applicable to the <b>GetSellerPayments</b> call, which is only relevant to Half.com orders, and since the Half.com site has been shut down, this type is no longer applicable.
// </span>
//
//
type PaymentTypeCodeType string

const (

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down.
	// </span>
	//
	PaymentTypeCodeTypeSale PaymentTypeCodeType = "Sale"

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down.
	// </span>
	//
	PaymentTypeCodeTypeRefund PaymentTypeCodeType = "Refund"

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down.
	// </span>
	//
	PaymentTypeCodeTypeSellerDeniedPayment PaymentTypeCodeType = "SellerDeniedPayment"

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down.
	// </span>
	//
	PaymentTypeCodeTypeAdminReversal PaymentTypeCodeType = "AdminReversal"

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down.
	// </span>
	//
	PaymentTypeCodeTypeAllOther PaymentTypeCodeType = "AllOther"

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down
	// </span>
	//
	PaymentTypeCodeTypeRentalExtension PaymentTypeCodeType = "RentalExtension"

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down.
	// </span>
	//
	PaymentTypeCodeTypeRentalBuyout PaymentTypeCodeType = "RentalBuyout"

	//
	// <span class="tablenote"><b>Note: </b> <b>PaymentTypeCodeType</b> and all of its values will no longer be applicable since the Half.com site has been shut down.
	// </span>
	//
	PaymentTypeCodeTypeCustomCode PaymentTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PayoutMethodType string

const (

	//
	// This value is not used.
	//
	PayoutMethodTypePAYPAL PayoutMethodType = "PAYPAL"

	//
	// This value is not used.
	//
	PayoutMethodTypeEFT PayoutMethodType = "EFT"

	//
	// This value is not used.
	//
	PayoutMethodTypeMONEYBOOKERS PayoutMethodType = "MONEYBOOKERS"
)

//
// Enumerated type that defines eBay Seller Levels.
//
type PerformanceStatusCodeType string

const (

	//
	// This enumeration value indicates that the user's Seller Level is Top-Rated.
	//
	PerformanceStatusCodeTypeTopRated PerformanceStatusCodeType = "TopRated"

	//
	// This enumeration value indicates that the user's Seller Level is Above Standard.
	//
	PerformanceStatusCodeTypeAboveStandard PerformanceStatusCodeType = "AboveStandard"

	//
	// This enumeration value indicates that the user's Seller Level is Standard.
	//
	PerformanceStatusCodeTypeStandard PerformanceStatusCodeType = "Standard"

	//
	// This enumeration value indicates that the user's Seller Level is Below Standard.
	//
	PerformanceStatusCodeTypeBelowStandard PerformanceStatusCodeType = "BelowStandard"

	//
	// Reserved for internal use.
	//
	PerformanceStatusCodeTypeCustomCode PerformanceStatusCodeType = "CustomCode"
)

//
// Type defining the time periods used when evaluating the number of buying policy
// violations and unpaid item strikes that a buyer has against their account.
//
type PeriodCodeType string

const (

	//
	// This value is no longer used.
	//
	PeriodCodeTypeDays_1 PeriodCodeType = "Days_1"

	//
	// This value indicates that the evaluation period is set back 30 days from the
	// present date.
	//
	PeriodCodeTypeDays_30 PeriodCodeType = "Days_30"

	//
	// This value indicates that the evaluation period is set back 180 days from the
	// present date.
	//
	PeriodCodeTypeDays_180 PeriodCodeType = "Days_180"

	//
	// This value indicates that the evaluation period is set back 360 days from the
	// present date.
	//
	PeriodCodeTypeDays_360 PeriodCodeType = "Days_360"

	//
	// This value indicates that the evaluation period is set back 540 days from the
	// present date.
	//
	PeriodCodeTypeDays_540 PeriodCodeType = "Days_540"

	//
	// This value is reserved for future or internal use.
	//
	PeriodCodeTypeCustomCode PeriodCodeType = "CustomCode"
)

//
// Specifies the type of image display used in a listing. Some options are
// only available if images are hosted through eBay Picture Services (EPS).
// Cannot be used with Listing Designer layouts (specified in Item.ListingDesigner).
//
type PhotoDisplayCodeType string

const (

	//
	// No special image display options. Valid for US Motors listings.
	//
	PhotoDisplayCodeTypeNone PhotoDisplayCodeType = "None"

	//
	// This value is no longer applicable.
	//
	PhotoDisplayCodeTypeSlideShow PhotoDisplayCodeType = "SlideShow"

	//
	// Increase the size of each image and allow buyers to enlarge images
	// further. Only available for site-hosted (EPS) images. Not valid for US Motors
	// listings. For all sites that do not automatically upgrade SuperSize to
	// PicturePack (see note below), specifying no SuperSize-qualified images is now
	// accepted in the request.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// SuperSize is automatically upgraded to PicturePack for the same SuperSize
	// fee on the US Motors Parts & Accessories Category and US (site ID 0)
	// and CA (site ID 2) and CAFR (site ID 210). This upgrade applies
	// only to EPS images.
	// </span>
	//
	PhotoDisplayCodeTypeSuperSize PhotoDisplayCodeType = "SuperSize"

	//
	// Increase the number of images displayed. This is only available for
	// images hosted with eBay. See GetCategoryFeatures and the
	// online Help (on the eBay site) for additional information.
	// <br><br>
	// Picture Pack applies to all sites
	// (including US	Motors), except for NL (site ID 146). You can specify a minimum of
	// one EPS picture, or no SuperSize-qualified EPS pictures in the request. For
	// the NL site, PicturePack is replaced with SuperSize.
	//
	PhotoDisplayCodeTypePicturePack PhotoDisplayCodeType = "PicturePack"

	//
	// This value is no longer applicable.
	//
	PhotoDisplayCodeTypeSiteHostedPictureShow PhotoDisplayCodeType = "SiteHostedPictureShow"

	//
	// This value is no longer applicable.
	//
	PhotoDisplayCodeTypeVendorHostedPictureShow PhotoDisplayCodeType = "VendorHostedPictureShow"

	//
	// This is valid for US Motors listing only. For other listings, use SuperSize.
	//
	PhotoDisplayCodeTypeSuperSizePictureShow PhotoDisplayCodeType = "SuperSizePictureShow"

	//
	// Reserved for internal use <b>only</b>.
	//
	PhotoDisplayCodeTypeCustomCode PhotoDisplayCodeType = "CustomCode"
)

//
// Simple type defining all possible local pickup methods for buyers. A <strong>PickupMethodCodeType</strong> value is always returned under the <strong>PickupOptions</strong> and <strong>PickupMethodSelected</strong> containers.
//
type PickupMethodCodeType string

const (

	//
	// This value indicates that the buyer will pick up the In-Store Pickup item at the merchant's physical store.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A merchant must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings.
	// </span>
	//
	PickupMethodCodeTypeInStorePickup PickupMethodCodeType = "InStorePickup"

	//
	// This value indicates that the buyer will pick up the "Click and Collect" item at the merchant's physical store.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A merchant must be eligible for the "Click and Collect" feature to list an item that is eligible for "Click and Collect". At this time, the "Click and Collect" feature is only available to large merchants on the eBay UK (site ID - 3), eBay Australia (Site ID - 15), and eBay Germany (Site ID - 77) sites. sites.
	//
	PickupMethodCodeTypePickUpDropOff PickupMethodCodeType = "PickUpDropOff"

	//
	// Reserved for internal or future use.
	//
	PickupMethodCodeTypeCustomCode PickupMethodCodeType = "CustomCode"
)

//
// Simple type defining all possible states for an In-Store Pickup order. The value of the  <strong>PickupStatus</strong> field (returned under the <strong>PickupMethodSelected</strong> container) can change during the lifecycle of the order based on the notifications that a merchant sends to eBay through the <strong>Inbound Notifications API</strong>.
// <br/><br/>
// <span class="tablenote">
// <strong>Note:</strong> At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings.
// </span>
//
type PickupStatusCodeType string

const (

	//
	// This value indicates that the current status value of the In-Store Pickup order is invalid.
	//
	PickupStatusCodeTypeInvalid PickupStatusCodeType = "Invalid"

	//
	// This value indicates that the current status value of the In-Store Pickup order is not applicable.
	//
	PickupStatusCodeTypeNotApplicable PickupStatusCodeType = "NotApplicable"

	//
	// This status indicates that the In-Store Pickup order has yet to be acknowledged by the merchant. This is typically the state before the merchant sends the <strong>ORDER.READY_FOR_PICKUP</strong> notification to eBay through the <strong>Inbound Notifications API</strong>.
	//
	PickupStatusCodeTypePendingMerchantConfirmation PickupStatusCodeType = "PendingMerchantConfirmation"

	//
	// This status indicates that the In-Store Pickup order is ready to be picked up by the buyer. This state occurs after the merchant sends the <strong>ORDER.READY_FOR_PICKUP</strong> notification to eBay through the <strong>Inbound Notifications API</strong>.
	//
	PickupStatusCodeTypeReadyToPickup PickupStatusCodeType = "ReadyToPickup"

	//
	// This status indicates that the In-Store Pickup order has been picked up by the buyer. This state occurs after the merchant sends the <strong>ORDER.PICKEDUP</strong> notification to eBay through the <strong>Inbound Notifications API</strong>.
	//
	PickupStatusCodeTypePickedup PickupStatusCodeType = "Pickedup"

	//
	// This status indicates that the In-Store Pickup order has been cancelled by the merchant, because the product was out of stock. This state occurs after the merchant sends the <strong>ORDER.PICKUP_CANCELED</strong> notification (with the <strong>CANCEL_TYPE</strong> parameter in the notification payload set to "OUT_OF_STOCK") to eBay through the <strong>Inbound Notifications API</strong>.
	//
	PickupStatusCodeTypePickupCancelledOutOfStock PickupStatusCodeType = "PickupCancelledOutOfStock"

	//
	// This status indicates that the In-Store Pickup order has been cancelled by the merchant, because the buyer rejected the item. This state occurs after the merchant sends the <strong>ORDER.PICKUP_CANCELED</strong> notification (with the <strong>CANCEL_TYPE</strong> parameter in the notification payload set to "BUYER_REJECTED") to eBay through the <strong>Inbound Notifications API</strong>.
	//
	PickupStatusCodeTypePickupCancelledBuyerRejected PickupStatusCodeType = "PickupCancelledBuyerRejected"

	//
	// This status indicates that the In-Store Pickup order has been cancelled by the merchant, because the buyer never showed up to pick up the item. This state occurs after the merchant sends the <strong>ORDER.PICKUP_CANCELED</strong> notification (with the <strong>CANCEL_TYPE</strong> parameter in the notification payload set to "BUYER_NO_SHOW") to eBay through the <strong>Inbound Notifications API</strong>.
	//
	PickupStatusCodeTypePickupCancelledBuyerNoShow PickupStatusCodeType = "PickupCancelledBuyerNoShow"

	//
	// This status indicates that the In-Store Pickup order has been cancelled, and the exact reason is not available.
	//
	PickupStatusCodeTypePickupCancelled PickupStatusCodeType = "PickupCancelled"

	//
	// This value is reserved for internal or future use.
	//
	PickupStatusCodeTypeCustomCode PickupStatusCodeType = "CustomCode"
)

//
// Indicates the format of the picture returned. Sometimes this is different than the format of the uploaded picture.
//
type PictureFormatCodeType string

const (

	//
	// Indicates the picture was returned in JPG format. Uploaded pictures in JPG, TIF, or BMP will be returned as JPG.
	//
	PictureFormatCodeTypeJPG PictureFormatCodeType = "JPG"

	//
	// Indicates the picture was returned in GIF format.
	//
	PictureFormatCodeTypeGIF PictureFormatCodeType = "GIF"

	//
	// Indicates the picture was returned in PNG format.
	//
	PictureFormatCodeTypePNG PictureFormatCodeType = "PNG"

	//
	// Reserved for internal use <b>only</b>.
	//
	PictureFormatCodeTypeCustomCode PictureFormatCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PictureManagerActionCodeType string

const (

	//
	// This value is not used.
	//
	PictureManagerActionCodeTypeAdd PictureManagerActionCodeType = "Add"

	//
	// This value is not used.
	//
	PictureManagerActionCodeTypeDelete PictureManagerActionCodeType = "Delete"

	//
	// This value is not used.
	//
	PictureManagerActionCodeTypeRename PictureManagerActionCodeType = "Rename"

	//
	// This value is not used.
	//
	PictureManagerActionCodeTypeMove PictureManagerActionCodeType = "Move"

	//
	// This value is not used.
	//
	PictureManagerActionCodeTypeChange PictureManagerActionCodeType = "Change"

	//
	// This value is not used.
	//
	PictureManagerActionCodeTypeCustomCode PictureManagerActionCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PictureManagerDetailLevelCodeType string

const (

	//
	// This value is not used.
	//
	PictureManagerDetailLevelCodeTypeReturnAll PictureManagerDetailLevelCodeType = "ReturnAll"

	//
	// This value is not used.
	//
	PictureManagerDetailLevelCodeTypeReturnSubscription PictureManagerDetailLevelCodeType = "ReturnSubscription"

	//
	// This value is not used.
	//
	PictureManagerDetailLevelCodeTypeReturnPicture PictureManagerDetailLevelCodeType = "ReturnPicture"

	//
	// This value is not used.
	//
	PictureManagerDetailLevelCodeTypeCustomCode PictureManagerDetailLevelCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PictureManagerPictureDisplayTypeCodeType string

const (

	//
	// This value is not used.
	//
	PictureManagerPictureDisplayTypeCodeTypeThumbnail PictureManagerPictureDisplayTypeCodeType = "Thumbnail"

	//
	// This value is not used.
	//
	PictureManagerPictureDisplayTypeCodeTypeBIBO PictureManagerPictureDisplayTypeCodeType = "BIBO"

	//
	// This value is not used.
	//
	PictureManagerPictureDisplayTypeCodeTypeStandard PictureManagerPictureDisplayTypeCodeType = "Standard"

	//
	// This value is not used.
	//
	PictureManagerPictureDisplayTypeCodeTypeLarge PictureManagerPictureDisplayTypeCodeType = "Large"

	//
	// This value is not used.
	//
	PictureManagerPictureDisplayTypeCodeTypeSupersize PictureManagerPictureDisplayTypeCodeType = "Supersize"

	//
	// This value is not used.
	//
	PictureManagerPictureDisplayTypeCodeTypeOriginal PictureManagerPictureDisplayTypeCodeType = "Original"

	//
	// This value is not used.
	//
	PictureManagerPictureDisplayTypeCodeTypeCustomCode PictureManagerPictureDisplayTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PictureManagerSubscriptionLevelCodeType string

const (

	//
	// This value is not used.
	//
	PictureManagerSubscriptionLevelCodeTypeFree PictureManagerSubscriptionLevelCodeType = "Free"

	//
	// This value is not used.
	//
	PictureManagerSubscriptionLevelCodeTypeLevel1 PictureManagerSubscriptionLevelCodeType = "Level1"

	//
	// This value is not used.
	//
	PictureManagerSubscriptionLevelCodeTypeLevel2 PictureManagerSubscriptionLevelCodeType = "Level2"

	//
	// This value is not used.
	//
	PictureManagerSubscriptionLevelCodeTypeLevel3 PictureManagerSubscriptionLevelCodeType = "Level3"

	//
	// This value is not used.
	//
	PictureManagerSubscriptionLevelCodeTypeLevel4 PictureManagerSubscriptionLevelCodeType = "Level4"

	//
	// This value is not used.
	//
	PictureManagerSubscriptionLevelCodeTypeCustomCode PictureManagerSubscriptionLevelCodeType = "CustomCode"
)

//
// Specifies whether to generate the 'standard' set of images for each picture or to also generate a super-sized image.
// <br/><br/>
// <b>Note:</b> This type is used only for images that will be used in a listing.
//
type PictureSetCodeType string

const (

	//
	// Indicates to generate the "Standard" set of images, which is a set of 7 images of various sizes, for each <b>ExternalPictureURL</b> submitted in the request.
	// This is the default. <b>Note:</b> This field is used only for images that will be used in a listing.
	//
	PictureSetCodeTypeStandard PictureSetCodeType = "Standard"

	//
	// Indicates to generate the "Standard" set <i>plus</i> a super-sized image for each <b>ExternalPictureURL</b> submitted in the request.
	// In order to include the super-sized image in the Add Item calls, you must also specify <b>Item.PictureDetails.PhotoDisplay.Supersize</b> or <b>Item.PictureDetails.PhotoDisplay.PicturePack</b>.
	// <b>Note:</b> This field is used only for images that will be used in a listing.
	//
	PictureSetCodeTypeSupersize PictureSetCodeType = "Supersize"

	//
	// This field is no longer returned.
	//
	PictureSetCodeTypeLarge PictureSetCodeType = "Large"

	//
	// Reserved for internal use <b>only</b>.
	//
	PictureSetCodeTypeCustomCode PictureSetCodeType = "CustomCode"
)

//
// Enumerated type used to specify where a listing's image(s) are hosted.
//
type PictureSourceCodeType string

const (

	//
	// This value indicates that the image(s) specified in the <b>PictureURL</b> field(s) are hosted by eBay Picture Services.
	//
	PictureSourceCodeTypeEPS PictureSourceCodeType = "EPS"

	//
	// This value is deprecated.
	//
	PictureSourceCodeTypePictureManager PictureSourceCodeType = "PictureManager"

	//
	// This value indicates that the image(s) specified in the <b>PictureURL</b> field(s) are hosted by a third-party vendor. Note that if pictures are externally-hosted, they must be hosted on a site that is using the 'https' protocol.
	//
	PictureSourceCodeTypeVendor PictureSourceCodeType = "Vendor"

	//
	// (out) Reserved for internal or future use.
	//
	PictureSourceCodeTypeCustomCode PictureSourceCodeType = "CustomCode"
)

//
// Values to be used in choosing that an uploaded picture is added to the available pictures on the eBay site.
//
type PictureUploadPolicyCodeType string

const (

	//
	// Specifies that an uploaded picture is added to the pictures available to a
	// seller on the eBay site.
	//
	PictureUploadPolicyCodeTypeAdd PictureUploadPolicyCodeType = "Add"

	//
	// Specifies, first, that all pictures available to a seller on the eBay site are
	// removed, and then second, that the currently uploaded picture is made
	// available to the seller.
	//
	PictureUploadPolicyCodeTypeClearAndAdd PictureUploadPolicyCodeType = "ClearAndAdd"

	//
	// Reserved for internal use ONLY.
	//
	PictureUploadPolicyCodeTypeCustomCode PictureUploadPolicyCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PictureWatermarkCodeType string

const (

	//
	// This value is not used.
	//
	PictureWatermarkCodeTypeUser PictureWatermarkCodeType = "User"

	//
	// This value is not used.
	//
	PictureWatermarkCodeTypeIcon PictureWatermarkCodeType = "Icon"

	//
	// This value is not used.
	//
	PictureWatermarkCodeTypeCustomCode PictureWatermarkCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PolicyComplianceStatusCodeType string

const (

	//
	// This value is not used.
	//
	PolicyComplianceStatusCodeTypeGood PolicyComplianceStatusCodeType = "Good"

	//
	// This value is not used.
	//
	PolicyComplianceStatusCodeTypeFair PolicyComplianceStatusCodeType = "Fair"

	//
	// This value is not used.
	//
	PolicyComplianceStatusCodeTypePoor PolicyComplianceStatusCodeType = "Poor"

	//
	// This value is not used.
	//
	PolicyComplianceStatusCodeTypeFailing PolicyComplianceStatusCodeType = "Failing"

	//
	// This value is not used.
	//
	PolicyComplianceStatusCodeTypeCustomCode PolicyComplianceStatusCodeType = "CustomCode"
)

//
// Specifies the criteria for filtering search results by site, where site is determined by the site ID in the request.
//
type PreferredLocationCodeType string

const (

	//
	// (in) Items listed in the currency implied by the site specified in the
	// request.
	//
	PreferredLocationCodeTypeListedInCurrencyImplied PreferredLocationCodeType = "ListedInCurrencyImplied"

	//
	// (in) Items located in the country implied by the site specified in the
	// request.
	//
	PreferredLocationCodeTypeLocatedInCountryImplied PreferredLocationCodeType = "LocatedInCountryImplied"

	//
	// (in) Items available to the country implied by the site specified in the
	// request. For the US site, this implies listings from ALL English-language
	// countries that are available to the US.
	//
	PreferredLocationCodeTypeAvailableInCountryImplied PreferredLocationCodeType = "AvailableInCountryImplied"

	//
	// (in) Items listed on the site specified in the request, regardless of listing
	// currency.
	//
	PreferredLocationCodeTypeSiteImplied PreferredLocationCodeType = "SiteImplied"

	//
	// (in) Items located in Belgium or listed on one of the two Belgian sites.
	//
	PreferredLocationCodeTypeBelgiumListing PreferredLocationCodeType = "BelgiumListing"

	//
	// (out) Reserved for internal or future use.
	//
	PreferredLocationCodeTypeCustomCode PreferredLocationCodeType = "CustomCode"
)

//
// This enumerated type defines the available discount price treatments that can be set up by eligible sellers.
//
type PricingTreatmentCodeType string

const (

	//
	// This enumeration value indicates that Strikethrough Pricing is enabled for the order line item. If this value is returned, the price in the <b>OriginalRetailPrice</b> field will be crossed out in the View Item page.
	//
	PricingTreatmentCodeTypeSTP PricingTreatmentCodeType = "STP"

	//
	// This enumeration value indicates that Minimum Advertised Pricing is enabled for the order line item. If this value is returned, the minimum advertised price is found in the <b>MinimumAdvertisedPrice</b> field.
	//
	PricingTreatmentCodeTypeMAP PricingTreatmentCodeType = "MAP"

	//
	// This enumeration value indicates that neither Strikethrough Pricing or Minimum Advertised Pricing is enabled for the order line item.
	//
	PricingTreatmentCodeTypeNone PricingTreatmentCodeType = "None"

	//
	// This enumeration value indicates that Made For Outlet Comparison Pricing is enabled for the order line item. If this value is returned, the Made For Outlet Comparison price is found in the <b>MadeForOutletComparisonPrice</b> field.
	//
	PricingTreatmentCodeTypeMFO PricingTreatmentCodeType = "MFO"

	//
	// Reserved for future use.
	//
	PricingTreatmentCodeTypeCustomCode PricingTreatmentCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> This enumerated type is deprecated as the Pro Pack Bundle feature is no longer available on any eBay Marketplace sites.
// </span>
//
type ProPackCodeType string

const (

	//
	// This value indicates that the Pro Pack listing upgrade is available for all sellers on the listing site.
	//
	ProPackCodeTypeEnabled ProPackCodeType = "Enabled"

	//
	// This value indicates that the Pro Pack listing upgrade is not available to any sellers on the listing site.
	//
	ProPackCodeTypeDisabled ProPackCodeType = "Disabled"

	//
	// This value indicates that the Pro Pack listing upgrade is only available to seller with Power Seller status on the listing site.
	//
	ProPackCodeTypePowerSellerOnly ProPackCodeType = "PowerSellerOnly"

	//
	// This value indicates that the Pro Pack listing upgrade is only available to Top Rated sellers on the listing site.
	//
	ProPackCodeTypeTopRatedSellerOnly ProPackCodeType = "TopRatedSellerOnly"

	//
	// Reserved for internal or future use.
	//
	ProPackCodeTypeCustomCode ProPackCodeType = "CustomCode"
)

//
// Values indicate whether product creation is enabled, disabled or required for a category.
//
type ProductCreationEnabledCodeType string

const (

	//
	// Product creation is not supported for the category.
	// AddItem family calls can still list with product.
	//
	ProductCreationEnabledCodeTypeDisabled ProductCreationEnabledCodeType = "Disabled"

	//
	// Product Creation is supported for the category.
	// AddItem family calls can still list with product but can go through new product creation flow.
	//
	ProductCreationEnabledCodeTypeEnabled ProductCreationEnabledCodeType = "Enabled"

	//
	// Product Creation is required for the category.
	// AddItem family calls have to list with a product. If no product exists can go through new product creation flow.
	//
	ProductCreationEnabledCodeTypeRequired ProductCreationEnabledCodeType = "Required"

	//
	// (out) Reserved for internal or future use.
	//
	ProductCreationEnabledCodeTypeCustomCode ProductCreationEnabledCodeType = "CustomCode"
)

//
// This enumeration type contains the values that may be returned in the <b>EANEnabled</b>, <b>ISBNEnabled</b>, and <b>UPCEnabled</b> fields at the site level (<b>SiteDefaults</b> container) and category level (<b>Category</b> nodes) to indicate which sites and categories support, require, or do not support the use of product identifiers to help create a listing.
//
type ProductIdentiferEnabledCodeType string

const (

	//
	// This enumeration value indicates that a product identifier (EAN, ISBN, UPC) may not be used to help create a listing. If returned at the site level (<b>SiteDefaults</b> container), most categories on the site (specified in the X-EBAY-API-SITEID) do not support the use of product identifiers. If returned at the category level (<b>Category</b> nodes), that specific category does not support the use of product identifiers.
	//
	ProductIdentiferEnabledCodeTypeDisabled ProductIdentiferEnabledCodeType = "Disabled"

	//
	// This enumeration value indicates that a product identifier (EAN, ISBN, UPC) may be used to help create a listing. If returned at the site level (<b>SiteDefaults</b> container), most categories on the site (specified in the X-EBAY-API-SITEID) support the use of product identifiers. If returned at the category level (<b>Category</b> nodes), that specific category supports the use of product identifiers.
	//
	ProductIdentiferEnabledCodeTypeEnabled ProductIdentiferEnabledCodeType = "Enabled"

	//
	// This enumeration value indicates that a product identifier (EAN, ISBN, UPC) is required when creating a listing. If returned at the site level (<b>SiteDefaults</b> container), most categories on the site (specified in the X-EBAY-API-SITEID) require the use of product identifiers. If returned at the category level (<b>Category</b> nodes), that specific category requires the use of product identifiers when creating a listing.
	//
	ProductIdentiferEnabledCodeTypeRequired ProductIdentiferEnabledCodeType = "Required"

	//
	// This value is for future use.
	//
	ProductIdentiferEnabledCodeTypeCustomCode ProductIdentiferEnabledCodeType = "CustomCode"
)

//
// This enumerated type contains the values that indicate whether or not a product brand within an eBay category requires an eBay seller to create/revise a listing using an eBay catalog product.
//
type ProductRequiredCodeType string

const (

	//
	// If this enumeration value is returned for a brand, the eBay seller is not required to use an eBay catalog product when creating or revising their listing in this category for this product brand. Although not required, the seller will still have an option to use an eBay catalog product if one exists for their product.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> For more information about the Product-Based Shopping Experience requirement, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	// </span>
	//
	ProductRequiredCodeTypeDisabled ProductRequiredCodeType = "Disabled"

	//
	// If this enumeration value is returned, the eBay seller is required to use an eBay catalog product when creating or revising their listing in this category for this product brand. A listing can be associated with an eBay catalog product by using the Add/Revise/Relist calls. For complete information on how to create or revise a listing using a eBay catalog product, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse-phase2-trading-workflows.html#" target="_blank">Phase 2 recommended workflows using Trading API</a> topic in the <b>Product-Based Shopping Experience Playbook</b>.
	//
	ProductRequiredCodeTypeEnabled ProductRequiredCodeType = "Enabled"

	//
	// (out) Reserved for internal or future use.
	//
	ProductRequiredCodeTypeCustomCode ProductRequiredCodeType = "CustomCode"
)

//
// This enumerated type is used by the <b>ProductRequiredEnabled</b>  field that is returned under the <b>Category</b> container of a <b>GetCategoryFeatures</b> response. The <b>Category.ProductRequiredEnabled</b> field will only be returned in if <code>Enabled</code>.
// <br>
// <br>
// <span class="tablenote"><b>Note:</b>
// Initially, Product-Based Shopping Experience (PBSE) is only enabled on the US, UK, Australia, Canada (English), and Germany sites. For more information on PBSE, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
// </span>
//
type ProductRequiredEnabledCodeType string

const (

	//
	// This value indicates that the category does not require listings to be associated with an eBay Catalog product. Currently, this value is not applicable/used, since the <b>Category.ProductRequiredEnabled</b> field is only returned if the value is <code>Enabled</code>.
	//
	ProductRequiredEnabledCodeTypeDisabled ProductRequiredEnabledCodeType = "Disabled"

	//
	// This value indicates that the category require listings to be associated with an eBay Catalog product. For information on finding and associating an eBay Catalog product to a listing, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	//
	ProductRequiredEnabledCodeTypeEnabled ProductRequiredEnabledCodeType = "Enabled"

	//
	// (out) Reserved for internal or future use.
	//
	ProductRequiredEnabledCodeTypeCustomCode ProductRequiredEnabledCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type ProductSortCodeType string

const (

	//
	// This value is not used.
	//
	ProductSortCodeTypePopularityAsc ProductSortCodeType = "PopularityAsc"

	//
	// This value is not used.
	//
	ProductSortCodeTypePopularityDesc ProductSortCodeType = "PopularityDesc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeRatingAsc ProductSortCodeType = "RatingAsc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeRatingDesc ProductSortCodeType = "RatingDesc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeReviewCountAsc ProductSortCodeType = "ReviewCountAsc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeReviewCountDesc ProductSortCodeType = "ReviewCountDesc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeItemCountAsc ProductSortCodeType = "ItemCountAsc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeItemCountDesc ProductSortCodeType = "ItemCountDesc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeTitleAsc ProductSortCodeType = "TitleAsc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeTitleDesc ProductSortCodeType = "TitleDesc"

	//
	// This value is not used.
	//
	ProductSortCodeTypeCustomCode ProductSortCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type ProductStateCodeType string

const (

	//
	// This value is not used.
	//
	ProductStateCodeTypeUpdate ProductStateCodeType = "Update"

	//
	// This value is not used.
	//
	ProductStateCodeTypeUpdateMajor ProductStateCodeType = "UpdateMajor"

	//
	// This value is not used.
	//
	ProductStateCodeTypeUpdateNoDetails ProductStateCodeType = "UpdateNoDetails"

	//
	// This value is not used.
	//
	ProductStateCodeTypeMerge ProductStateCodeType = "Merge"

	//
	// This value is not used.
	//
	ProductStateCodeTypeDelete ProductStateCodeType = "Delete"

	//
	// This value is not used.
	//
	ProductStateCodeTypeCustomCode ProductStateCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type ProductUseCaseCodeType string

const (

	//
	// This value is not used.
	//
	ProductUseCaseCodeTypeAddItem ProductUseCaseCodeType = "AddItem"

	//
	// This value is not used.
	//
	ProductUseCaseCodeTypeReviseItem ProductUseCaseCodeType = "ReviseItem"

	//
	// This value is not used.
	//
	ProductUseCaseCodeTypeRelistItem ProductUseCaseCodeType = "RelistItem"

	//
	// This value is not used.
	//
	ProductUseCaseCodeTypeCustomCode ProductUseCaseCodeType = "CustomCode"
)

//
// Enumerated type that defines the category group values. Business Policies profiles (Payment,
// Shipping, and Return Policy) are linked to category groups.
//
type ProfileCategoryGroupCodeType string

const (

	//
	// Default value.
	//
	ProfileCategoryGroupCodeTypeInherit ProfileCategoryGroupCodeType = "Inherit"

	//
	// None.
	//
	ProfileCategoryGroupCodeTypeNone ProfileCategoryGroupCodeType = "None"

	//
	// For Business Policies, the 'ALL' enumeration value represents all eBay categories except for motor vehicles.
	//
	ProfileCategoryGroupCodeTypeALL ProfileCategoryGroupCodeType = "ALL"

	//
	// For Business Policies, the 'MOTORS_VEHICLE' enumeration value represents all motor vehicle categories.
	//
	ProfileCategoryGroupCodeTypeMOTORS_VEHICLE ProfileCategoryGroupCodeType = "MOTORS_VEHICLE"
)

//
// This enumerated type is deprecated.
//
type PromotionItemPriceTypeCodeType string

const (

	//
	// This value is not used.
	//
	PromotionItemPriceTypeCodeTypeAuctionPrice PromotionItemPriceTypeCodeType = "AuctionPrice"

	//
	// This value is not used.
	//
	PromotionItemPriceTypeCodeTypeBuyItNowPrice PromotionItemPriceTypeCodeType = "BuyItNowPrice"

	//
	// This value is not used.
	//
	PromotionItemPriceTypeCodeTypeBestOfferOnlyPrice PromotionItemPriceTypeCodeType = "BestOfferOnlyPrice"

	//
	// This value is not used.
	//
	PromotionItemPriceTypeCodeTypeClassifiedAdPrice PromotionItemPriceTypeCodeType = "ClassifiedAdPrice"

	//
	// This value is not used.
	//
	PromotionItemPriceTypeCodeTypeCustomCode PromotionItemPriceTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PromotionItemSelectionCodeType string

const (

	//
	// This value is not used.
	//
	PromotionItemSelectionCodeTypeManual PromotionItemSelectionCodeType = "Manual"

	//
	// This value is not used.
	//
	PromotionItemSelectionCodeTypeAutomatic PromotionItemSelectionCodeType = "Automatic"

	//
	// This value is not used.
	//
	PromotionItemSelectionCodeTypeCustomCode PromotionItemSelectionCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PromotionMethodCodeType string

const (

	//
	// This value is not used.
	//
	PromotionMethodCodeTypeCrossSell PromotionMethodCodeType = "CrossSell"

	//
	// This value is not used.
	//
	PromotionMethodCodeTypeUpSell PromotionMethodCodeType = "UpSell"

	//
	// This value is not used.
	//
	PromotionMethodCodeTypeCustomCode PromotionMethodCodeType = "CustomCode"
)

//
// This type is deprecated.
//
type PromotionSchemeCodeType string

const (

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeItemToItem PromotionSchemeCodeType = "ItemToItem"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeItemToStoreCat PromotionSchemeCodeType = "ItemToStoreCat"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeStoreToStoreCat PromotionSchemeCodeType = "StoreToStoreCat"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeItemToDefaultRule PromotionSchemeCodeType = "ItemToDefaultRule"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeDefaultRule PromotionSchemeCodeType = "DefaultRule"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeCategoryProximity PromotionSchemeCodeType = "CategoryProximity"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeRelatedCategoryRule PromotionSchemeCodeType = "RelatedCategoryRule"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeDefaultUpSellLogic PromotionSchemeCodeType = "DefaultUpSellLogic"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeDefaultCrossSellLogic PromotionSchemeCodeType = "DefaultCrossSellLogic"

	//
	// This value is not used.
	//
	PromotionSchemeCodeTypeCustomCode PromotionSchemeCodeType = "CustomCode"
)

//
// Values indicate the status of a sale. Used for the Promotional Price Display
// feature, which enables sellers to apply discounts across many listings.
//
type PromotionalSaleStatusCodeType string

const (

	//
	// The promotional sale is active.
	//
	PromotionalSaleStatusCodeTypeActive PromotionalSaleStatusCodeType = "Active"

	//
	// The promotional sale is scheduled. That is, the start time is in the future.
	//
	PromotionalSaleStatusCodeTypeScheduled PromotionalSaleStatusCodeType = "Scheduled"

	//
	// The status of the promotional sale is pending. When first scheduling a Sale,
	// if you select over 200 listings to be in any given Sale, it will take some
	// time for eBay to process the request.
	//
	PromotionalSaleStatusCodeTypeProcessing PromotionalSaleStatusCodeType = "Processing"

	//
	// The promotional sale is inactive, the sale has ended. You can reschedule a
	// sale once it has ended, but you will need to wait at least 24 hours before it
	// can become active.
	//
	PromotionalSaleStatusCodeTypeInactive PromotionalSaleStatusCodeType = "Inactive"

	//
	// The promotional sale has been deleted. Deleted promotional sales cannot be
	// updated or reactivated.
	//
	PromotionalSaleStatusCodeTypeDeleted PromotionalSaleStatusCodeType = "Deleted"

	//
	// Reserved for internal or future use.
	//
	PromotionalSaleStatusCodeTypeCustomCode PromotionalSaleStatusCodeType = "CustomCode"
)

//
// Values specify or indicate the type of promotional sale offered.
// Promotional sales give store owners the ability to apply discounts and/or
// free shipping across many listings for a specific duration.
//
type PromotionalSaleTypeCodeType string

const (

	//
	// Sale offers price discount only.
	//
	PromotionalSaleTypeCodeTypePriceDiscountOnly PromotionalSaleTypeCodeType = "PriceDiscountOnly"

	//
	// Sale offers free shipping only.
	//
	PromotionalSaleTypeCodeTypeFreeShippingOnly PromotionalSaleTypeCodeType = "FreeShippingOnly"

	//
	// Sale offers both price discount and free shipping.
	//
	PromotionalSaleTypeCodeTypePriceDiscountAndFreeShipping PromotionalSaleTypeCodeType = "PriceDiscountAndFreeShipping"

	//
	// Reserved for internal or future use.
	//
	PromotionalSaleTypeCodeTypeCustomCode PromotionalSaleTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type PurchasePurposeTypeCodeType string

const (

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeOther PurchasePurposeTypeCodeType = "Other"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeBuyNowItem PurchasePurposeTypeCodeType = "BuyNowItem"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeShoppingCart PurchasePurposeTypeCodeType = "ShoppingCart"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeAuctionItem PurchasePurposeTypeCodeType = "AuctionItem"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeGiftCertificates PurchasePurposeTypeCodeType = "GiftCertificates"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeSubscription PurchasePurposeTypeCodeType = "Subscription"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeDonation PurchasePurposeTypeCodeType = "Donation"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeEBayBilling PurchasePurposeTypeCodeType = "eBayBilling"

	//
	// This value is not used.
	//
	PurchasePurposeTypeCodeTypeCustomCode PurchasePurposeTypeCodeType = "CustomCode"
)

//
// Indicates the text message type of the item's quantity availability.
//
type QuantityAvailableHintCodeType string

const (

	//
	// (out) The message "Limited quantity available" is shown in the web
	// flow (e.g., for a flash sale or a Daily Deal).
	//
	QuantityAvailableHintCodeTypeLimited QuantityAvailableHintCodeType = "Limited"

	//
	// (out) The message "More than 10 available" is shown in the web flow.
	// 10 is the value of QuantityThreshold tag based on the seller's
	// preference.
	//
	QuantityAvailableHintCodeTypeMoreThan QuantityAvailableHintCodeType = "MoreThan"

	//
	// Reserved for internal or future use.
	//
	QuantityAvailableHintCodeTypeCustomCode QuantityAvailableHintCodeType = "CustomCode"
)

//
// Enumerated type used by the <b>QuantityOperator</b> field that is returned under the <b>FavoriteSearch</b> container in a <b>GetMyeBayBuying</b> call. The values in this type indicate how the quantity of the item that the prospective desires compares to the quantity available.
//
type QuantityOperatorCodeType string

const (

	//
	// This enumeration value indicates that the quantity sought (specified in <b>Quantity</b> field) is less than the quantity available (specified in <b>TotalAvailable</b> field).
	//
	QuantityOperatorCodeTypeLessThan QuantityOperatorCodeType = "LessThan"

	//
	// This enumeration value indicates that the quantity sought (specified in <b>Quantity</b> field) is less than or equal to the quantity available (specified in <b>TotalAvailable</b> field).
	//
	QuantityOperatorCodeTypeLessThanOrEqual QuantityOperatorCodeType = "LessThanOrEqual"

	//
	// This enumeration value indicates that the quantity sought (specified in <b>Quantity</b> field) is equal to the quantity available (specified in <b>TotalAvailable</b> field).
	//
	QuantityOperatorCodeTypeEqual QuantityOperatorCodeType = "Equal"

	//
	// This enumeration value indicates that the quantity sought (specified in <b>Quantity</b> field) is greater than the quantity available (specified in <b>TotalAvailable</b> field).
	//
	QuantityOperatorCodeTypeGreaterThan QuantityOperatorCodeType = "GreaterThan"

	//
	// This enumeration value indicates that the quantity sought (specified in <b>Quantity</b> field) is greater than or equal to the quantity available (specified in <b>TotalAvailable</b> field).
	//
	QuantityOperatorCodeTypeGreaterThanOrEqual QuantityOperatorCodeType = "GreaterThanOrEqual"

	//
	// Reserved for internal or future use.
	//
	QuantityOperatorCodeTypeCustomCode QuantityOperatorCodeType = "CustomCode"
)

//
// Enumerated type used by the member messaging calls to indicate the type of question that was asked.
//
type QuestionTypeCodeType string

const (

	//
	// This enumeration value indicates that a general question was asked about the order line item.
	//
	QuestionTypeCodeTypeGeneral QuestionTypeCodeType = "General"

	//
	// This enumeration value indicates that a question about shipping the order line item was asked.
	//
	QuestionTypeCodeTypeShipping QuestionTypeCodeType = "Shipping"

	//
	// This enumeration value indicates that a payment question was asked about the order line item.
	//
	QuestionTypeCodeTypePayment QuestionTypeCodeType = "Payment"

	//
	// This enumeration value indicates that a question was asked about a shipment that involves multiple packages.
	//
	QuestionTypeCodeTypeMultipleItemShipping QuestionTypeCodeType = "MultipleItemShipping"

	//
	// This enumeration value indicates that question was asked about a customized subject.
	//
	QuestionTypeCodeTypeCustomizedSubject QuestionTypeCodeType = "CustomizedSubject"

	//
	// This enumeration value indicates that question does not have a subject.
	//
	QuestionTypeCodeTypeNone QuestionTypeCodeType = "None"

	//
	// Reserved for future or internal use.
	//
	QuestionTypeCodeTypeCustomCode QuestionTypeCodeType = "CustomCode"
)

//
// The status of a payment.
//
type RCSPaymentStatusCodeType string

const (

	//
	// Order line item payment has been canceled.
	// (Reserved for future use.)
	//
	RCSPaymentStatusCodeTypeCanceled RCSPaymentStatusCodeType = "Canceled"

	//
	// Order line item payment is completed.
	//
	RCSPaymentStatusCodeTypePaid RCSPaymentStatusCodeType = "Paid"

	//
	// Order line item is awaiting payment.
	//
	RCSPaymentStatusCodeTypePending RCSPaymentStatusCodeType = "Pending"

	//
	// (out) Reserved for internal or future use.
	//
	RCSPaymentStatusCodeTypeCustomCode RCSPaymentStatusCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type RangeCodeType string

const (

	//
	// This value is not used.
	//
	RangeCodeTypeHigh RangeCodeType = "High"

	//
	// This value is not used.
	//
	RangeCodeTypeLow RangeCodeType = "Low"

	//
	// This value is not used.
	//
	RangeCodeTypeCustomCode RangeCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible reasons why an auction listing
// is being hidden from search on the eBay site.
//
type ReasonHideFromSearchCodeType string

const (

	//
	// This value indicates that the auction listing is being hidden from search on the eBay site because the
	// listing has been determined by eBay to be a duplicate listing with zero bids.
	// <br/><br/>
	// This enumeration is associated with eBay Duplicate Listings Policy, which has taken
	// effect on the US, CA, CA-FR, and eBay Motors (Parts and Accessories only) sites.
	// Event Tickets, Real Estate, and Motor Vehicle categories are excluded from this
	// policy. For more information, read
	// <a href="http://pages.ebay.com/help/policies/listing-multi.html">eBay's Duplicate Listings Policy</a> help page.
	//
	ReasonHideFromSearchCodeTypeDuplicateListing ReasonHideFromSearchCodeType = "DuplicateListing"

	//
	// This value indicates that the listing is hidden from search because the quantity is zero. However, the listing is still alive and will
	// reappear in the search results when the quantity is set to something greater than zero. For more information,
	// see <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/ebay/SetUserPreferences.html#Request.OutOfStockControlPreference">SetUserPreferences.OutOfStockControlPreference</a>.
	//
	ReasonHideFromSearchCodeTypeOutOfStock ReasonHideFromSearchCodeType = "OutOfStock"
)

//
// A seller can make a Transaction Confirmation Request (TCR) for an item. This code
// list contains values to specify the current relationship between the seller and
// the potential buyer. For a seller to make a Transaction Confirmation Request (TCR)
// for an item, the potential buyer must meet one of the criteria in this code list.
//
type RecipientRelationCodeType string

const (

	//
	// Indicates that the recipient has one or more bids on the item; the relationship is "bidder."
	//
	RecipientRelationCodeType1 RecipientRelationCodeType = "1"

	//
	// Indicates that the recipient has one or more Best Offers on the item; the
	// relationship is "Best Offer buyer."
	//
	RecipientRelationCodeType2 RecipientRelationCodeType = "2"

	//
	// Indicates that the recipient has asked the seller a question about the item;
	// the relationship is "a member with an ASQ question."
	//
	RecipientRelationCodeType3 RecipientRelationCodeType = "3"

	//
	// Indicates that the recipient has a postal code; the relationship is "a member
	// with a postal code."
	//
	RecipientRelationCodeType4 RecipientRelationCodeType = "4"

	//
	// Reserved for internal or future use.
	//
	RecipientRelationCodeTypeCustomCode RecipientRelationCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type RecommendationEngineCodeType string

const (

	//
	// This value is not used.
	//
	RecommendationEngineCodeTypeListingAnalyzer RecommendationEngineCodeType = "ListingAnalyzer"

	//
	// This value is not used.
	//
	RecommendationEngineCodeTypeSIFFTAS RecommendationEngineCodeType = "SIFFTAS"

	//
	// This value is not used.
	//
	RecommendationEngineCodeTypeProductPricing RecommendationEngineCodeType = "ProductPricing"

	//
	// This value is not used.
	//
	RecommendationEngineCodeTypeCustomCode RecommendationEngineCodeType = "CustomCode"

	//
	// This value is not used.
	//
	RecommendationEngineCodeTypeSuggestedAttributes RecommendationEngineCodeType = "SuggestedAttributes"

	//
	// This value is not used.
	//
	RecommendationEngineCodeTypeItemSpecifics RecommendationEngineCodeType = "ItemSpecifics"
)

//
// This enumerated type contains the possible refund, exchange, or store credit options that a
// seller may offer a buyer when the buyer wants to return the item.
//
type RefundOptionsCodeType string

const (

	//
	// This value indicates that the seller will refund the buyer the cost of the item, excluding shipping and handling costs and any restocking fee (US only).
	// <br><br>
	// The seller should use the <b>ReturnPolicy.Description</b> field in the Add API call to explain how the refund will be handled (such as whether the refund will occur via PayPal).
	//
	RefundOptionsCodeTypeMoneyBack RefundOptionsCodeType = "MoneyBack"

	//
	// <span class="tablenote"><b>Note:</b>
	// This value is deprecated on the US site, and all listings attempting to use this
	// value will be blocked.
	// </span>
	// This value indicates that the seller will exchange the returned item for another item.
	// The seller should use the <b>ReturnPolicy.Description</b> field in the Add API call to explain how this will occur (such as whether the seller will send an identical item in place of the returned item).
	//
	RefundOptionsCodeTypeExchange RefundOptionsCodeType = "Exchange"

	//
	// <span class="tablenote"><b>Note:</b>
	// This value is deprecated on the US site, and all listings attempting to use this
	// value will be blocked.
	// </span>
	// The seller will give the buyer a credit toward the purchase of another item. The seller should use the <b>ReturnPolicy.Description</b> field in the Add API call to explain how the buyer can redeem this credit.
	//
	RefundOptionsCodeTypeMerchandiseCredit RefundOptionsCodeType = "MerchandiseCredit"

	//
	// <span class="tablenote"><b>Note:</b>
	// US sellers that are willing to refund buyers or offer an identical replacement item, should use the <code>MoneyBackOrReplacement</code> value instead of <code>MoneyBackOrExchange</code>.
	// </span>
	// This value indicates that the seller will refund the buyer the cost of the item, excluding shipping and handling costs and any restocking fee (US only), or the seller will exchange the returned item for another identical item.
	// <br><br>
	// The seller should use the <b>ReturnPolicy.Description</b> field in the Add API call to explain how the refund will be handled, such as whether the refund will occur via PayPal, or how the exchange will occur, such as whether the seller will send an identical item in place of the returned item.
	//
	RefundOptionsCodeTypeMoneyBackOrExchange RefundOptionsCodeType = "MoneyBackOrExchange"

	//
	// <span class="tablenote"><b>Note:</b>
	// This value is only available on the US site. US sellers should use this value (and not <code>MoneyBackOrExchange</code>) if they are willing to refund buyers or offer an identical replacement item.
	// </span>
	// This value indicates that the seller will refund the buyer the cost of the item (excluding shipping and handling costs and any restocking fee) through eBay returns, or the seller will replace the returned item with another identical item.
	// <br><br>
	// The seller should use the <b>ReturnPolicy.Description</b> field in the Add API call to explain to buyer that are refunds and replacements will be handled through the eBay returns process.
	//
	RefundOptionsCodeTypeMoneyBackOrReplacement RefundOptionsCodeType = "MoneyBackOrReplacement"

	//
	// Reserved for internal or future use.
	//
	RefundOptionsCodeTypeCustomCode RefundOptionsCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type RefundFailureCodeType string

const (

	//
	// This value is not used.
	//
	RefundFailureCodeTypePaypalBillingAgreementCanceled RefundFailureCodeType = "PaypalBillingAgreementCanceled"

	//
	// This value is not used.
	//
	RefundFailureCodeTypePaypalRiskDeclinesTransaction RefundFailureCodeType = "PaypalRiskDeclinesTransaction"

	//
	// This value is not used.
	//
	RefundFailureCodeTypeCustomCode RefundFailureCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type RefundLineTypeCodeType string

const (

	//
	// This value is not used.
	//
	RefundLineTypeCodeTypePurchasePrice RefundLineTypeCodeType = "PurchasePrice"

	//
	// This value is not used.
	//
	RefundLineTypeCodeTypeShippingPrice RefundLineTypeCodeType = "ShippingPrice"

	//
	// This value is not used.
	//
	RefundLineTypeCodeTypeAdditional RefundLineTypeCodeType = "Additional"

	//
	// This value is not used.
	//
	RefundLineTypeCodeTypeCustomCode RefundLineTypeCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> This type is only used for Half.com order refunds, and since the Half.com site has been shut down, this type will also be deprecated.
// </span>
// Explanation of the reason that the refund is being issued. Applicable to Half.com refunds only.
//
type RefundReasonCodeType string

const (

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundReasonCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// Seller is unable to ship the product to the buyer.
	//
	RefundReasonCodeTypeCannotShipProduct RefundReasonCodeType = "CannotShipProduct"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundReasonCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// Seller shipped the wrong item to the buyer.
	//
	RefundReasonCodeTypeWrongItemShipped RefundReasonCodeType = "WrongItemShipped"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundReasonCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The buyer returned the item due to its quality.
	//
	RefundReasonCodeTypeItemBadQuality RefundReasonCodeType = "ItemBadQuality"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundReasonCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The buyer returned the item due to damage.
	//
	RefundReasonCodeTypeItemDamaged RefundReasonCodeType = "ItemDamaged"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundReasonCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The buyer decided they did not want the item.
	//
	RefundReasonCodeTypeBuyerRemorse RefundReasonCodeType = "BuyerRemorse"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundReasonCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The seller has another reason for issuing a Half.com refund.
	//
	RefundReasonCodeTypeOther RefundReasonCodeType = "Other"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundReasonCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// (out) Reserved for internal or future use.
	//
	RefundReasonCodeTypeCustomCode RefundReasonCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type RefundStatusCodeType string

const (

	//
	// This value is not used.
	//
	RefundStatusCodeTypeSuccessful RefundStatusCodeType = "Successful"

	//
	// This value is not used.
	//
	RefundStatusCodeTypePending RefundStatusCodeType = "Pending"

	//
	// This value is not used.
	//
	RefundStatusCodeTypeFailed RefundStatusCodeType = "Failed"

	//
	// This value is not used.
	//
	RefundStatusCodeTypeCustomCode RefundStatusCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> This type is only used for Half.com order refunds, and since the Half.com site has been shut down, this type will also be deprecated.
// </span>
// Explanation of the reason that the refund is being issued. Applicable to Half.com
// refunds only.
//
type RefundTypeCodeType string

const (

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundTypeCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The seller has issued a refund for the transaction price that
	// was originally paid to the seller.
	// (The seller's shipping reimbursement is not included
	// if Half.com calculates the refund amount).
	//
	RefundTypeCodeTypeFull RefundTypeCodeType = "Full"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundTypeCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The seller has issued a refund for the transaction price and
	// shipping reimbursement that was originally paid to the seller.
	// (The buyer's return shipping costs
	// might not be included if Half.com calculates the refund amount.)
	//
	RefundTypeCodeTypeFullPlusShipping RefundTypeCodeType = "FullPlusShipping"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundTypeCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The seller has issued a refund amount that is different from
	// the full refund (with or without shipping). If specified,
	// it may be helpful to explain the amount in your note to the buyer.
	//
	RefundTypeCodeTypeCustomOrPartial RefundTypeCodeType = "CustomOrPartial"

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundTypeCodeType</b> and all of its values are no longer applicable since the Half.com site has been shut down.
	// </span>
	// (out) Reserved for internal or future use.
	//
	RefundTypeCodeTypeCustomCode RefundTypeCodeType = "CustomCode"
)

//
// Enumerated type defining the refund types that a merchant can offer a buyer who is returning an In-Store Pickup item to the store.
//
type RefundSourceTypeCodeType string

const (

	//
	// This value indicates that the merchant issued a store credit to the buyer for the amount of the returned item(s).
	//
	RefundSourceTypeCodeTypeStoreCredit RefundSourceTypeCodeType = "StoreCredit"

	//
	// This value indicates that the merchant issued a cash refund (or debit card/credit card reversal) to the buyer for the amount of the returned item(s).
	//
	RefundSourceTypeCodeTypePaymentRefund RefundSourceTypeCodeType = "PaymentRefund"

	//
	// This value is reserved for internal or future use.
	//
	RefundSourceTypeCodeTypeCustomCode RefundSourceTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type RefundingSourceTypeCodeType string

const (

	//
	// This value is not used.
	//
	RefundingSourceTypeCodeTypeScheduledPayout RefundingSourceTypeCodeType = "ScheduledPayout"

	//
	// This value is not used.
	//
	RefundingSourceTypeCodeTypePaypal RefundingSourceTypeCodeType = "Paypal"

	//
	// This value is not used.
	//
	RefundingSourceTypeCodeTypeBankAccount RefundingSourceTypeCodeType = "BankAccount"

	//
	// (out) Reserved for internal or future use.
	//
	RefundingSourceTypeCodeTypeCustomCode RefundingSourceTypeCodeType = "CustomCode"
)

//
// Enumerated type that defines the list of possible actions that a seller can
// take to expedite the release of funds for an order into their account.
//
type RequiredSellerActionCodeType string

const (

	//
	// This value indicates that there is an open eBay Money Back Guarantee case
	// involving the seller and the item. The seller must address and get
	// the case resolved before the funds can be scheduled for release to the
	// seller's account. See the
	// <a href="http://developer.ebay.com/Devzone/guides/ebayfeatures/Development/Post-Order.html">Resolving Order Issues</a>
	// page for information about retrieving and managing eBay Money Back Guarantee cases.
	//
	RequiredSellerActionCodeTypeResolveeBPCase RequiredSellerActionCodeType = "ResolveeBPCase"

	//
	// This value indicates that the seller must mark the order line item as shipped to expedite
	// the release of funds into their account. The seller can use the <b>CompleteSale</b>
	// call to mark an item as shipped. If an order line item is marked as shipped, it is possible
	// that the seller's funds for the order will be released as soon as seven days after the latest
	// estimated delivery date.
	//
	RequiredSellerActionCodeTypeMarkAsShipped RequiredSellerActionCodeType = "MarkAsShipped"

	//
	// This value indicates that the seller should contact eBay Customer Support to discover
	// the next required action to expedite the release of funds into their account.
	//
	RequiredSellerActionCodeTypeContacteBayCS RequiredSellerActionCodeType = "ContacteBayCS"

	//
	// This value indicates that the seller must resolve the PayPal Buyer Protection case filed
	// against the order line item to expedite the release of funds into their account.
	//
	RequiredSellerActionCodeTypeResolvePPPIcase RequiredSellerActionCodeType = "ResolvePPPIcase"

	//
	// This value is no longer used.
	//
	RequiredSellerActionCodeTypeSetupPayoutMethod RequiredSellerActionCodeType = "SetupPayoutMethod"

	//
	// This value is no longer used.
	//
	RequiredSellerActionCodeTypeUpdatePayoutMethod RequiredSellerActionCodeType = "UpdatePayoutMethod"

	//
	// This value is no longer used.
	//
	RequiredSellerActionCodeTypeNone RequiredSellerActionCodeType = "None"

	//
	// This value indicates that the seller must provide the buyer the tracking information for
	// the order line item to expedite the release of funds into their account. The seller can
	// use the <b>CompleteSale</b> call to provide tracking information for an
	// order line item. If the tracking information for an order line item is provided, it is
	// possible that the seller's funds for the order will be released as soon as three days
	// after eBay has confirmed that the item has been delivered.
	//
	RequiredSellerActionCodeTypeUploadTrackingInfo RequiredSellerActionCodeType = "UploadTrackingInfo"

	//
	// This value indicates that the buyer has not received the item, and the buyer has contacted
	// the seller through the eBay system in an effort to resolve the issue with the seller. The
	// seller must make it right with the buyer in order to expedite the release of funds into
	// their account.
	//
	RequiredSellerActionCodeTypeResolveBuyerMessageInr RequiredSellerActionCodeType = "ResolveBuyerMessageInr"

	//
	// This value indicates that the buyer has received the item, but the item is not as
	// described in the listing; hence, the buyer has contacted the seller through the eBay
	// system in an effort to resolve the issue with the seller. The seller must make it right
	// with the buyer in order to expedite the release of funds into their account.
	//
	RequiredSellerActionCodeTypeResolveBuyerMessageSnad RequiredSellerActionCodeType = "ResolveBuyerMessageSnad"

	//
	// This value is reserved for internal or future use.
	//
	RequiredSellerActionCodeTypeCustomCode RequiredSellerActionCodeType = "CustomCode"

	//
	// This value indicates that the buyer is returning the item through eBay's managed return
	// process. Upon receiving the returned item from the buyer, the seller must issue a refund
	// to the buyer within five business days, and shortly after this happens, eBay will credit
	// the seller's account with the Final Value Fee that was originally assessed on the sale
	// of the item.
	//
	RequiredSellerActionCodeTypeResolveReturn RequiredSellerActionCodeType = "ResolveReturn"
)

//
// This type is deprecated, as sellers are no longer allowed to set a restocking fee through a listings's return policy.
//
//
//
type RestockingFeeCodeType string

const (

	//
	// This value indicates that the seller will not charge a restocking fee to the
	// buyer if the item is returned.
	//
	RestockingFeeCodeTypeNoRestockingFee RestockingFeeCodeType = "NoRestockingFee"

	//
	// This value indicates that the seller charges the buyer a restocking fee of 10
	// percent of the item's purchase price if the item is returned.
	//
	RestockingFeeCodeTypePercent_10 RestockingFeeCodeType = "Percent_10"

	//
	// This value indicates that the seller charges the buyer a restocking fee of 15
	// percent of the item's purchase price if the item is returned.
	//
	RestockingFeeCodeTypePercent_15 RestockingFeeCodeType = "Percent_15"

	//
	// This value indicates that the seller charges the buyer a restocking fee of up to 20
	// percent of the item's purchase price if the item is returned.
	//
	RestockingFeeCodeTypePercent_20 RestockingFeeCodeType = "Percent_20"

	//
	// This is no longer a valid value.
	//
	RestockingFeeCodeTypePercent_25 RestockingFeeCodeType = "Percent_25"

	//
	// (out) Reserved for internal or future use.
	//
	RestockingFeeCodeTypeCustomCode RestockingFeeCodeType = "CustomCode"
)

//
// Enumerated type that defines the possible states of an eBay return request.
//
type ReturnStatusCodeType string

const (

	//
	// This value indicates that the return request is invalid.
	//
	ReturnStatusCodeTypeInvalid ReturnStatusCodeType = "Invalid"

	//
	// This value indicates that the return request is not applicable.
	//
	ReturnStatusCodeTypeNotApplicable ReturnStatusCodeType = "NotApplicable"

	//
	// This value indicates that the return request has been initiated by the buyer and is pending approval by the seller.
	//
	ReturnStatusCodeTypeReturnRequestPendingApproval ReturnStatusCodeType = "ReturnRequestPendingApproval"

	//
	// This value indicates that the buyer's return request was rejected by the seller.
	//
	ReturnStatusCodeTypeReturnRequestRejected ReturnStatusCodeType = "ReturnRequestRejected"

	//
	// This value indicates that a return request was successfully opened by the buyer.
	//
	ReturnStatusCodeTypeReturnOpen ReturnStatusCodeType = "ReturnOpen"

	//
	// This value indicates that the buyer has return shipped the item(s) in the return request back to the seller.
	//
	ReturnStatusCodeTypeReturnShipped ReturnStatusCodeType = "ReturnShipped"

	//
	// This value indicates that the seller has received the item(s) that the buyer return shipped.
	//
	ReturnStatusCodeTypeReturnDelivered ReturnStatusCodeType = "ReturnDelivered"

	//
	// This value indicates that a return request was closed with a refund issued to the buyer.
	//
	ReturnStatusCodeTypeReturnClosedWithRefund ReturnStatusCodeType = "ReturnClosedWithRefund"

	//
	// This value indicates that a return request was closed after being escalated to an eBay return case.
	//
	ReturnStatusCodeTypeReturnClosedEscalated ReturnStatusCodeType = "ReturnClosedEscalated"

	//
	// This value indicates that a return request was closed with no refund issued to the buyer.
	//
	ReturnStatusCodeTypeReturnClosedNoRefund ReturnStatusCodeType = "ReturnClosedNoRefund"

	//
	// This value indicates that a return request was escalated to an eBay return case, and the case is awaiting a response from the buyer.
	//
	ReturnStatusCodeTypeReturnEscalatedPendingBuyer ReturnStatusCodeType = "ReturnEscalatedPendingBuyer"

	//
	// This value indicates that a return request was escalated to an eBay return case, and the case is awaiting a response from the seller.
	//
	ReturnStatusCodeTypeReturnEscalatedPendingSeller ReturnStatusCodeType = "ReturnEscalatedPendingSeller"

	//
	// This value indicates that a return request was escalated to an eBay return case, and the case is awaiting a response from eBay Customer Support.
	//
	ReturnStatusCodeTypeReturnEscalatedPendingCS ReturnStatusCodeType = "ReturnEscalatedPendingCS"

	//
	// This value indicates that a return request was escalated to an eBay return case, but the case was closed with a refund issued to the buyer.
	//
	ReturnStatusCodeTypeReturnEscalatedClosedWithRefund ReturnStatusCodeType = "ReturnEscalatedClosedWithRefund"

	//
	// This value indicates that a return request was escalated to an eBay return case, but the case was closed with no refund issued to the buyer.
	//
	ReturnStatusCodeTypeReturnEscalatedClosedNoRefund ReturnStatusCodeType = "ReturnEscalatedClosedNoRefund"

	//
	// This value indicates that a return request was escalated to an eBay return case.
	//
	ReturnStatusCodeTypeReturnEscalated ReturnStatusCodeType = "ReturnEscalated"

	//
	// This value indicates that the return request is currently in the pending state.
	//
	ReturnStatusCodeTypeReturnRequestPending ReturnStatusCodeType = "ReturnRequestPending"

	//
	// This value indicates that the return request was closed with a refund to the buyer.
	//
	ReturnStatusCodeTypeReturnRequestClosedWithRefund ReturnStatusCodeType = "ReturnRequestClosedWithRefund"

	//
	// This value indicates that the return request was closed with no refund to the buyer.
	//
	ReturnStatusCodeTypeReturnRequestClosedNoRefund ReturnStatusCodeType = "ReturnRequestClosedNoRefund"

	//
	// Reserved for internal or future use.
	//
	ReturnStatusCodeTypeCustomCode ReturnStatusCodeType = "CustomCode"
)

//
// Specified whether returns are accepted.
//
type ReturnsAcceptedOptionsCodeType string

const (

	//
	// The seller accepts returns, subject to other details
	// specified in the policy.
	//
	ReturnsAcceptedOptionsCodeTypeReturnsAccepted ReturnsAcceptedOptionsCodeType = "ReturnsAccepted"

	//
	// The seller does not accept returns.
	//
	ReturnsAcceptedOptionsCodeTypeReturnsNotAccepted ReturnsAcceptedOptionsCodeType = "ReturnsNotAccepted"

	//
	// (out) Reserved for internal or future use.
	//
	ReturnsAcceptedOptionsCodeTypeCustomCode ReturnsAcceptedOptionsCodeType = "CustomCode"
)

//
// This enum defines the different options that are available for specifying whether or not the seller accepts returns.
//
type ReturnsAcceptedCodeType string

const (

	//
	// <code>ReturnsAccepted</code> indicates the seller does accept returns.
	//
	ReturnsAcceptedCodeTypeReturnsAccepted ReturnsAcceptedCodeType = "ReturnsAccepted"

	//
	// <code>ReturnsNotAccepted</code> indicates the seller does <i>not</i> accept returns.
	//
	ReturnsAcceptedCodeTypeReturnsNotAccepted ReturnsAcceptedCodeType = "ReturnsNotAccepted"
)

//
// This enum defines the different options that are available for specifying the available return durations. This is the amount of time the seller gives the buyer for initiating a return once they receive the item.
//
type ReturnsDurationCodeType string

const (

	//
	// <code>Days_14</code> indicates the buyer has 14 days to initiate a return.
	//
	ReturnsDurationCodeTypeDays_14 ReturnsDurationCodeType = "Days_14"

	//
	// <code>Days_30</code> indicates the buyer has 30 days to initiate a return.
	//
	ReturnsDurationCodeTypeDays_30 ReturnsDurationCodeType = "Days_30"

	//
	// <code>Days_60</code> indicates the buyer has 60 days to initiate a return.
	//
	ReturnsDurationCodeTypeDays_60 ReturnsDurationCodeType = "Days_60"
)

//
// This enum defines the different options that are available for specifying the available refund methods.
//
type ReturnsRefundMethodCodeType string

const (

	//
	// <code>MoneyBack</code> indicates the seller will refund the cost of the item returned.
	//
	ReturnsRefundMethodCodeTypeMoneyBack ReturnsRefundMethodCodeType = "MoneyBack"

	//
	// Available on the US marketplace only, <code>MoneyBackorReplacement</code> indicates the seller will refund the cost of the item returned or they will replace the returned item.
	//
	ReturnsRefundMethodCodeTypeMoneyBackorReplacement ReturnsRefundMethodCodeType = "MoneyBackorReplacement"
)

//
// This enum defines the different options that are available for specifying the return shipment payee.
//
type ReturnsShipmentPayeeCodeType string

const (

	//
	// <code>Buyer</code> indicates the buyer is responsible for paying for the return shipping.
	//
	ReturnsShipmentPayeeCodeTypeBuyer ReturnsShipmentPayeeCodeType = "Buyer"

	//
	// <code>Seller</code> indicates the seller is responsible for paying for the return shipping.
	//
	ReturnsShipmentPayeeCodeTypeSeller ReturnsShipmentPayeeCodeType = "Seller"
)

//
// This enumerated type contains the list of values that can be used by the seller in an Add/Revise/Relist call to set the number of days (after the purchase date) that a buyer has to return an item (if the return policy states that items can be returned) for a refund or an exchange. These same values are also returned in the <b>GeteBayDetails</b> call.
// <br><br>
// <span class="tablenote"><b>Note:</b> The <b>GeteBayDetails</b> call returns site-default Return Policy settings. For most categories within a given eBay site, the supported Return Policy options/values are the same, but there a few exceptions. To discover what return durations that a particular category supports, call <b>GetCategoryFeatures</b> and include <code>DomesticReturnsDurationValues</code> and/or <code>InternationalReturnsDurationValues</code> as <b>FeatureID</b> values to see the return durations available for domestic and international returns, respectively.
// </span>
//
type ReturnsWithinOptionsCodeType string

const (

	//
	// This value is deprecated. Listings created or revised with this value will be
	// blocked.
	//
	ReturnsWithinOptionsCodeTypeDays_3 ReturnsWithinOptionsCodeType = "Days_3"

	//
	// This value is deprecated. Listings created or revised with this value will be
	// blocked.
	//
	ReturnsWithinOptionsCodeTypeDays_7 ReturnsWithinOptionsCodeType = "Days_7"

	//
	// This value is deprecated. Listings created or revised with this value will be
	// blocked.
	//
	ReturnsWithinOptionsCodeTypeDays_10 ReturnsWithinOptionsCodeType = "Days_10"

	//
	// The seller specifies this value to enable a 14-day return policy. A buyer must
	// return an item within 14 days after purchase in order to receive a refund or
	// an exchange/replacement item.
	//
	ReturnsWithinOptionsCodeTypeDays_14 ReturnsWithinOptionsCodeType = "Days_14"

	//
	// The seller specifies this value to enable a 30-day return policy. A buyer must
	// return an item within 30 days after purchase in order to receive a refund or
	// an exchange/replacement item.
	// <br/>
	// <span class="tablenote"><b>Note: </b> To qualify as a Top-Rated Plus listing, a 30-day (or longer) return period must be set.
	// </span>
	//
	ReturnsWithinOptionsCodeTypeDays_30 ReturnsWithinOptionsCodeType = "Days_30"

	//
	// The seller specifies this value to enable a 60-day return policy. A buyer must
	// return an item within 60 days after purchase in order to receive a refund or
	// an exchange/replacement item.
	//
	ReturnsWithinOptionsCodeTypeDays_60 ReturnsWithinOptionsCodeType = "Days_60"

	//
	// The seller specifies this value to enable a one-month return policy. A buyer must return an item within one month after purchase in order to receive a refund or an exchange.
	// <br/>
	// <span class="tablenote"><b>Note: </b> This value, historically only supported on the DE and AT sites, is scheduled to be deprecated, and DE and AT sellers may be blocked if they do use this value. Use <code>Days_30</code> instead.
	// </span>
	//
	ReturnsWithinOptionsCodeTypeMonths_1 ReturnsWithinOptionsCodeType = "Months_1"

	//
	// This value is reserved for internal or future use.
	//
	ReturnsWithinOptionsCodeTypeCustomCode ReturnsWithinOptionsCodeType = "CustomCode"
)

//
// Primitive type that represents a stock-keeping unit (SKU).
// The usage of this string may vary in different contexts.
// For usage information and rules, see the fields that reference this type.
//
type SKUType string

//
// Type of SMS subscription error.
//
type SMSSubscriptionErrorCodeCodeType string

const (

	//
	// Aggregator not available.
	//
	SMSSubscriptionErrorCodeCodeTypeSMSAggregatorNotAvailable SMSSubscriptionErrorCodeCodeType = "SMSAggregatorNotAvailable"

	//
	// Phone number invalid.
	//
	SMSSubscriptionErrorCodeCodeTypePhoneNumberInvalid SMSSubscriptionErrorCodeCodeType = "PhoneNumberInvalid"

	//
	// Phone number has changed.
	//
	SMSSubscriptionErrorCodeCodeTypePhoneNumberChanged SMSSubscriptionErrorCodeCodeType = "PhoneNumberChanged"

	//
	// The carrier has changed.
	//
	SMSSubscriptionErrorCodeCodeTypePhoneNumberCarrierChanged SMSSubscriptionErrorCodeCodeType = "PhoneNumberCarrierChanged"

	//
	// The user has requested to be unregistered.
	//
	SMSSubscriptionErrorCodeCodeTypeUserRequestedUnregistration SMSSubscriptionErrorCodeCodeType = "UserRequestedUnregistration"

	//
	// (out) Reserved for internal or future use.
	//
	SMSSubscriptionErrorCodeCodeTypeCustomCode SMSSubscriptionErrorCodeCodeType = "CustomCode"
)

//
// The current state of user SMS subscription.
//
type SMSSubscriptionUserStatusCodeType string

const (

	//
	// (out) Registered.
	//
	SMSSubscriptionUserStatusCodeTypeRegistered SMSSubscriptionUserStatusCodeType = "Registered"

	//
	// (out) Unregistered.
	//
	SMSSubscriptionUserStatusCodeTypeUnregistered SMSSubscriptionUserStatusCodeType = "Unregistered"

	//
	// (out) Pending subscription.
	//
	SMSSubscriptionUserStatusCodeTypePending SMSSubscriptionUserStatusCodeType = "Pending"

	//
	// (out) Subscription failed.
	//
	SMSSubscriptionUserStatusCodeTypeFailed SMSSubscriptionUserStatusCodeType = "Failed"

	//
	// (out) Reserved for internal or future use.
	//
	SMSSubscriptionUserStatusCodeTypeCustomCode SMSSubscriptionUserStatusCodeType = "CustomCode"
)

//
// This enumerated type lists the possible values that can be returned under the
// <b>FavoriteSearch.SearchFlag</b> field of a
// <b>GetMyeBayBuying</b> response. These values are output only and are
// controlled by the filter types used in a buyer's Saved Search.
//
type SearchFlagCodeType string

const (

	//
	// This value being returned in the <b>FavoriteSearch.SearchFlag</b>
	// field indicates that the buyer selected the <b>eBay for Charity</b>
	// option in the Saved Search.
	//
	SearchFlagCodeTypeCharity SearchFlagCodeType = "Charity"

	//
	// This value is no longer applicable as Gift Icon and Gift Services are deprecated.
	//
	SearchFlagCodeTypeGift SearchFlagCodeType = "Gift"

	//
	// This value is no longer applicable as the Now and New feature is deprecated.
	//
	SearchFlagCodeTypeNowAndNew SearchFlagCodeType = "NowAndNew"

	//
	// This value being returned in the <b>FavoriteSearch.SearchFlag</b>
	// field indicates that the buyer selected the <b>Local pickup</b>
	// option in the Saved Search. A buyer would select the <b>Local Pickup</b>
	// filter in a Saved Search to restrict retrieved listings to those that offer 'local pickup'
	// as an option to buyers.
	//
	SearchFlagCodeTypeLocalSearch SearchFlagCodeType = "LocalSearch"

	//
	// This value being returned in the <b>FavoriteSearch.SearchFlag</b>
	// field indicates that the buyer selected the <b>Free shipping</b>
	// option in the Saved Search. A buyer would select the <b>Free shipping</b>
	// filter in a Saved Search to restrict retrieved listings to those that offer a free
	// shipping option to that specific buyer (the availability of free shipping may
	// be dependent on the buyer's location).
	//
	SearchFlagCodeTypeFreeShipping SearchFlagCodeType = "FreeShipping"

	//
	// This value is no longer applicable as there is always a gallery picture by
	// default since all listings must have at least one picture.
	//
	SearchFlagCodeTypeGallery SearchFlagCodeType = "Gallery"

	//
	// This value is no longer applicable as there is now a requirement that all
	// listings have at least one picture.
	//
	SearchFlagCodeTypePicture SearchFlagCodeType = "Picture"

	//
	// This value is no longer applicable as the Get It Fast feature is deprecated.
	//
	SearchFlagCodeTypeGetItFast SearchFlagCodeType = "GetItFast"

	//
	// This value being returned in the <b>FavoriteSearch.SearchFlag</b>
	// field indicates that the buyer selected the <b>Items listed as lots</b>
	// option in the Saved Search. A buyer would select the <b>Items listed as lots</b>
	// filter in a Saved Search to restrict retrieved listings to those that are offering
	// a "lot" of items in one listing. Specifically, a "lot" is defined as, "a group of
	// similar or identical items that are sold together to one buyer."
	//
	SearchFlagCodeTypeLot SearchFlagCodeType = "Lot"

	//
	// This value is only applicable to the German site and if the user is searching for
	// motor vehicle listings. This value being returned in the
	// <b>FavoriteSearch.SearchFlag</b> field indicates that the buyer
	// selected a filter in a Saved Search to restrict retrieved eBay Germany motor
	// vehicle listings that are also being displayed on the mobile.de vehicle
	// marketplace.
	//
	SearchFlagCodeTypeGermanMotorsSearchable SearchFlagCodeType = "GermanMotorsSearchable"

	//
	// This value is no longer applicable as the World of Good site no longer exists.
	//
	SearchFlagCodeTypeWorldOfGood SearchFlagCodeType = "WorldOfGood"

	//
	// This value is no longer applicable.
	//
	SearchFlagCodeTypeDigitalDelivery SearchFlagCodeType = "DigitalDelivery"

	//
	// Reserved for internal or future use.
	//
	SearchFlagCodeTypeCustomCode SearchFlagCodeType = "CustomCode"
)

//
// The Search standing that you have earned.
//
type SearchStandingStatusCodeType string

const (

	//
	// Your listings may receive higher placement in search results
	// that are sorted by Best Match.
	// You earn this standing when you provide excellent customer service to eBay buyers
	// (such as good BuyerSatisfaction.Status and high detailed seller ratings).
	// If you already have a raised search standing, you can still boost your
	// ratings and increase the visibility of your items by maintaining or
	// improving your customer service.
	//
	SearchStandingStatusCodeTypeRaised SearchStandingStatusCodeType = "Raised"

	//
	// Listings recieve standard placement in search results that are sorted by Best Match.
	//
	SearchStandingStatusCodeTypeStandard SearchStandingStatusCodeType = "Standard"

	//
	// Your listings may receive lower placement in search results that
	// are sorted by Best Match.
	// You earn this standing when you have not been successful in providing
	// eBay buyers with the customer service they expect.
	// You can still take positive steps to improve your customer service
	// and increase your ratings.
	//
	SearchStandingStatusCodeTypeLowered SearchStandingStatusCodeType = "Lowered"

	//
	// Reserved for internal or future use.
	//
	SearchStandingStatusCodeTypeCustomCode SearchStandingStatusCodeType = "CustomCode"
)

//
// This enumerated type contains the list of values that can be used by the seller to set the length of time that a Second Chance Offer or a Transaction Confirmation Request will be available to a specific recipient to whom the Second Chance Offer or Transaction Confirmation Request was presented. The recipient must purchase the Second Chance or Transaction Confirmation Request item within this time or the offer will expire. Second Chance Offers are only applicable for closed auction listings and Transaction Confirmation Requests are only applicable for an eBay Motors listing that were closed and converted to a Transaction Confirmation Request.
//
type SecondChanceOfferDurationCodeType string

const (

	//
	// The seller specifies this value to make the Second Chance offer available to the bidder for one day. This value will affect the <b>EndTime</b> value returned in the <b>AddSecondChanceItem</b> or <b>AddTransactionConfirmationItem</b> responses.
	//
	SecondChanceOfferDurationCodeTypeDays_1 SecondChanceOfferDurationCodeType = "Days_1"

	//
	// The seller specifies this value to make the Second Chance offer available to the bidder for three days. This value will affect the <b>EndTime</b> value returned in the <b>AddSecondChanceItem</b> or <b>AddTransactionConfirmationItem</b> responses.
	//
	SecondChanceOfferDurationCodeTypeDays_3 SecondChanceOfferDurationCodeType = "Days_3"

	//
	// The seller specifies this value to make the Second Chance offer available to the bidder for five days. This value will affect the <b>AddSecondChanceItem</b> or <b>AddTransactionConfirmationItem</b> responses.
	//
	SecondChanceOfferDurationCodeTypeDays_5 SecondChanceOfferDurationCodeType = "Days_5"

	//
	// The seller specifies this value to make the Second Chance offer available to the bidder for seven days. This value will affect the <b>EndTime</b> value returned in the <b>AddSecondChanceItem</b> or <b>AddTransactionConfirmationItem</b> responses.
	//
	SecondChanceOfferDurationCodeTypeDays_7 SecondChanceOfferDurationCodeType = "Days_7"

	//
	// This value is reserved for internal or future use.
	//
	SecondChanceOfferDurationCodeTypeCustomCode SecondChanceOfferDurationCodeType = "CustomCode"
)

//
// This enumerated type contains the values that will be returned in a <b>GetCategorySpecifics</b> call. The value that is returned will determine how a seller uses/sets mandatory and recommended Item Specifics.
//
type SelectionModeCodeType string

const (

	//
	// Automatic criteria. Reserved for future use.
	//
	SelectionModeCodeTypeAutomatic SelectionModeCodeType = "Automatic"

	//
	// Manual criteria. Reserved for future use.
	//
	SelectionModeCodeTypeManual SelectionModeCodeType = "Manual"

	//
	// Indicates that mandatory and recommended Item Specifics will be pre-filled after a successful <b>Add</b>/<b>Revise</b>/<b>Relist</b> call if eBay is able to match a provided eBay Product ID (ePID), Global Trade Identification Number (UPC, EAN, ISBN), or Brand/MPN pair to an eBay catalog product.
	//
	SelectionModeCodeTypePrefilled SelectionModeCodeType = "Prefilled"

	//
	// Indicates that the seller must use the exact string provided in the corresponding <b>NameRecommendation.Name</b> field when creating, revising, or relisting an item and using that particular Item Specific.
	//
	SelectionModeCodeTypeSelectionOnly SelectionModeCodeType = "SelectionOnly"

	//
	// Indicates that the seller is allowed to specify their own value(s) for the corresponding Item Specific when creating, revising, or relisting an item and using that particular Item Specific.
	//
	SelectionModeCodeTypeFreeText SelectionModeCodeType = "FreeText"

	//
	// Reserved for future use.
	//
	SelectionModeCodeTypeCustomCode SelectionModeCodeType = "CustomCode"
)

//
// Enumerated type that contains the different states of a seller's account.
//
type SellerAccountStatusCodeType string

const (

	//
	// Your account is current.
	//
	SellerAccountStatusCodeTypeCurrent SellerAccountStatusCodeType = "Current"

	//
	// Your account is past due.
	//
	SellerAccountStatusCodeTypePastDue SellerAccountStatusCodeType = "PastDue"

	//
	// Your account is on hold and risking suspension.
	//
	SellerAccountStatusCodeTypeOnHold SellerAccountStatusCodeType = "OnHold"

	//
	// Reserved for internal or future use.
	//
	SellerAccountStatusCodeTypeCustomCode SellerAccountStatusCodeType = "CustomCode"
)

//
// Type of seller account. This value is returned if the user is a
// business seller with a site ID of 77 (Germany), 3 (UK), 205 (Ireland) or 0 (US Motors).
//
type SellerBusinessCodeType string

const (

	//
	// Type of seller account not defined.
	//
	SellerBusinessCodeTypeUndefined SellerBusinessCodeType = "Undefined"

	//
	// Private seller account.
	//
	SellerBusinessCodeTypePrivate SellerBusinessCodeType = "Private"

	//
	// Commercial seller account.
	//
	SellerBusinessCodeTypeCommercial SellerBusinessCodeType = "Commercial"

	//
	// Reserved for internal or future use.
	//
	SellerBusinessCodeTypeCustomCode SellerBusinessCodeType = "CustomCode"
)

//
// Alerts can be either informational or a warning that identifies a problem.
//
type SellerDashboardAlertSeverityCodeType string

const (

	//
	// The alert message is informational in nature.
	// <br><br>
	// Some examples: you might get a PowerSeller status message if your PowerSeller
	// level has been increased, a policy-compliance message if you have no recent
	// policy violations, a buyer-satisfaction message if you are providing excellent
	// customer service, or a seller-account message if there is a new notice available
	// about your payment status.
	//
	SellerDashboardAlertSeverityCodeTypeInformational SellerDashboardAlertSeverityCodeType = "Informational"

	//
	// The alert message is a warning that identifies a problem.
	// <br><br>
	// For example, you might get a PowerSeller status warning if you missed the
	// PowerSeller sales requirements in the past month. Or you might get a
	// policy-compliance warning if you recently listed an item with excessive
	// shipping costs, or a seller-account warning if a collections message
	// asks you to pay now to make sure no restrictions are placed on your account.
	//
	SellerDashboardAlertSeverityCodeTypeWarning SellerDashboardAlertSeverityCodeType = "Warning"

	//
	// The alert message is a strong warning that indicates a serious problem.
	// <br><br>
	// For example, you might get a PowerSeller status strong warning if you have lost
	// your PowerSeller status because of policy violations, or you might get a
	// policy-compliance strong warning if your account has been restricted.
	//
	SellerDashboardAlertSeverityCodeTypeStrongWarning SellerDashboardAlertSeverityCodeType = "StrongWarning"

	//
	// Reserved for internal (or future) use.
	//
	SellerDashboardAlertSeverityCodeTypeCustomCode SellerDashboardAlertSeverityCodeType = "CustomCode"
)

//
// This type was deprecated along with the Seller Guarantee feature.
//
type SellerGuaranteeLevelCodeType string

const (

	//
	// (out) Not eligible for Seller Level Guarantee
	//
	SellerGuaranteeLevelCodeTypeNotEligible SellerGuaranteeLevelCodeType = "NotEligible"

	//
	// (out) Regular eligibility level
	//
	SellerGuaranteeLevelCodeTypeRegular SellerGuaranteeLevelCodeType = "Regular"

	//
	// (out) Premium eligibility level
	//
	SellerGuaranteeLevelCodeTypePremium SellerGuaranteeLevelCodeType = "Premium"

	//
	// (out) Ultra eligibility level
	//
	SellerGuaranteeLevelCodeTypeUltra SellerGuaranteeLevelCodeType = "Ultra"

	//
	// (out) Reserved for internal or future use.
	//
	SellerGuaranteeLevelCodeTypeCustomCode SellerGuaranteeLevelCodeType = "CustomCode"
)

//
// Indicates the user's eBay PowerSeller tier. PowerSellers are distinguished in 5
// tiers based on average monthly sales. Benefits and services vary for each tier.
// eBay calculates eligibility for each tier monthly.
//
type SellerLevelCodeType string

const (

	//
	// Bronze (lowest tier)
	//
	SellerLevelCodeTypeBronze SellerLevelCodeType = "Bronze"

	//
	// Silver (between Bronze and Gold)
	//
	SellerLevelCodeTypeSilver SellerLevelCodeType = "Silver"

	//
	// Gold (between Silver and Platinum)
	//
	SellerLevelCodeTypeGold SellerLevelCodeType = "Gold"

	//
	// Platinum (between Gold and Titanium)
	//
	SellerLevelCodeTypePlatinum SellerLevelCodeType = "Platinum"

	//
	// Titanium (highest tier)
	//
	SellerLevelCodeTypeTitanium SellerLevelCodeType = "Titanium"

	//
	// Not a PowerSeller (eBay has not yet evaluated your PowerSeller status, or
	// you have not chosen to be a member of the PowerSeller program,
	// or you lost your PowerSeller status due to a policy violation.)
	//
	SellerLevelCodeTypeNone SellerLevelCodeType = "None"

	//
	// Reserved for internal or future use
	//
	SellerLevelCodeTypeCustomCode SellerLevelCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type SellerPIStatusCodeType string

const (

	//
	// This value is not used.
	//
	SellerPIStatusCodeTypeAcceptedUA SellerPIStatusCodeType = "AcceptedUA"

	//
	// This value is not used.
	//
	SellerPIStatusCodeTypeMustAcceptUA SellerPIStatusCodeType = "MustAcceptUA"

	//
	// This value is not used.
	//
	SellerPIStatusCodeTypePIEnabled SellerPIStatusCodeType = "PIEnabled"

	//
	// This value is not used.
	//
	SellerPIStatusCodeTypeCustomCode SellerPIStatusCodeType = "CustomCode"
)

//
// This enumerated type defines the payment methods that an eBay user can use to pay fees on monthly eBay invoice.
//
type SellerPaymentMethodCodeType string

const (

	//
	// This enumeration value indicates that eBay does not currently have a payment method on file for the eBay user.
	//
	SellerPaymentMethodCodeTypeNothingOnFile SellerPaymentMethodCodeType = "NothingOnFile"

	//
	// This enumeration value indicates that eBay will use the credit card on file to process the eBay user's monthly invoice.
	//
	SellerPaymentMethodCodeTypeCreditCard SellerPaymentMethodCodeType = "CreditCard"

	//
	// This enumeration value indicates that eBay will use the user's PayPal account to process the monthly invoice.
	//
	SellerPaymentMethodCodeTypePayPal SellerPaymentMethodCodeType = "PayPal"

	//
	// This enumeration value indicates that eBay will debit the bank account on file to process the eBay user's monthly invoice.
	//
	SellerPaymentMethodCodeTypeDirectDebit SellerPaymentMethodCodeType = "DirectDebit"

	//
	// This enumeration value indicates that eBay will debit the bank account on file to process the eBay user's monthly invoice. A signature will be needed from the eBay user before a payment can be processed.
	//
	SellerPaymentMethodCodeTypeDirectDebitPendingSignatureMandate SellerPaymentMethodCodeType = "DirectDebitPendingSignatureMandate"

	//
	// This enumeration value indicates that the eBay user will use eBay Direct Pay to pay the monthly invoice.
	//
	SellerPaymentMethodCodeTypeEBayDirectPay SellerPaymentMethodCodeType = "eBayDirectPay"

	//
	// (out) Reserved for internal or future use
	//
	SellerPaymentMethodCodeTypeCustomCode SellerPaymentMethodCodeType = "CustomCode"

	//
	// This enumeration value indicates that eBay will debit the bank account on file to process the eBay user's monthly invoice. However, the bank account information must be verified before a payment can be processed.
	//
	SellerPaymentMethodCodeTypeDirectDebitPendingVerification SellerPaymentMethodCodeType = "DirectDebitPendingVerification"
)

//
// This enumerated type is deprecated.
//
type SellereBayPaymentProcessStatusCodeType string

const (

	//
	// This value is not used.
	//
	SellereBayPaymentProcessStatusCodeTypeAcceptedUA SellereBayPaymentProcessStatusCodeType = "AcceptedUA"

	//
	// This value is not used.
	//
	SellereBayPaymentProcessStatusCodeTypeMustAcceptUA SellereBayPaymentProcessStatusCodeType = "MustAcceptUA"

	//
	// This value is not used.
	//
	SellereBayPaymentProcessStatusCodeTypeEBayPaymentProcessEnabled SellereBayPaymentProcessStatusCodeType = "eBayPaymentProcessEnabled"

	//
	// This value is not used.
	//
	SellereBayPaymentProcessStatusCodeTypeCustomCode SellereBayPaymentProcessStatusCodeType = "CustomCode"
)

//
// Container for various alert types.
//
type SellingManagerAlertTypeCodeType string

const (

	//
	// Indicates that an alert related to a sold listing has been issued.
	//
	SellingManagerAlertTypeCodeTypeSold SellingManagerAlertTypeCodeType = "Sold"

	//
	// Indicates that an alert related to inventory has been issued.
	//
	SellingManagerAlertTypeCodeTypeInventory SellingManagerAlertTypeCodeType = "Inventory"

	//
	// Indicates that an automation alert has been sent because a listing did
	// not conform to listing automation rules.
	//
	SellingManagerAlertTypeCodeTypeAutomation SellingManagerAlertTypeCodeType = "Automation"

	//
	// Indicates that an alert related to PaisaPay has been issued.
	//
	SellingManagerAlertTypeCodeTypePaisaPay SellingManagerAlertTypeCodeType = "PaisaPay"

	//
	// Indicates that an alert has been issued for negative feedback received, bad
	// email, or an unpaid item dispute.
	//
	SellingManagerAlertTypeCodeTypeGeneral SellingManagerAlertTypeCodeType = "General"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerAlertTypeCodeTypeCustomCode SellingManagerAlertTypeCodeType = "CustomCode"
)

//
// Enumerated type that defines the values that control how soon the item is relisted after the original listing ends.
//
type SellingManagerAutoRelistOptionCodeType string

const (

	//
	// If this value is set, the item is relisted immediately after the original listing ends.
	//
	SellingManagerAutoRelistOptionCodeTypeRelistImmediately SellingManagerAutoRelistOptionCodeType = "RelistImmediately"

	//
	// If this value is set, the item is relisted after a specified number of days and/or hours. If this value is set, the <b>RelistAfterDays</b> and/or the <b>RelistAfterHours</b> fields must also be set.
	//
	SellingManagerAutoRelistOptionCodeTypeRelistAfterDaysHours SellingManagerAutoRelistOptionCodeType = "RelistAfterDaysHours"

	//
	// If this value is set, the item is relisted at a specific time of day, either the day when the listing ends (if the specified time has not passed), or the day after (if the specified time has already passed on that day). If this value is set, the <b>RelistAtSpecificTimeOfDay</b> field must also be set.
	//
	SellingManagerAutoRelistOptionCodeTypeRelistAtSpecificTimeOfDay SellingManagerAutoRelistOptionCodeType = "RelistAtSpecificTimeOfDay"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerAutoRelistOptionCodeTypeCustomCode SellingManagerAutoRelistOptionCodeType = "CustomCode"
)

//
// Specifies the type of auto relist that will be performed.
//
type SellingManagerAutoRelistTypeCodeType string

const (

	//
	// If the item is unsold, relist the item once.
	//
	SellingManagerAutoRelistTypeCodeTypeRelistOnceIfNotSold SellingManagerAutoRelistTypeCodeType = "RelistOnceIfNotSold"

	//
	// Relist the item continuously, until it is sold.
	//
	SellingManagerAutoRelistTypeCodeTypeRelistContinuouslyUntilSold SellingManagerAutoRelistTypeCodeType = "RelistContinuouslyUntilSold"

	//
	// Relist the item continuously.
	//
	SellingManagerAutoRelistTypeCodeTypeRelistContinuously SellingManagerAutoRelistTypeCodeType = "RelistContinuously"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerAutoRelistTypeCodeTypeCustomCode SellingManagerAutoRelistTypeCodeType = "CustomCode"
)

//
// SellingManagerAutoSecondChanceOfferTypeCodeType - Specifies the type of Second Chance Offer automation rule that will be added to an item.
//
type SellingManagerAutoSecondChanceOfferTypeCodeType string

const (

	//
	// Sends a Second Chance Offer to all bidders who bid more than a specific amount.
	//
	SellingManagerAutoSecondChanceOfferTypeCodeTypeBidsGreaterThanAmount SellingManagerAutoSecondChanceOfferTypeCodeType = "BidsGreaterThanAmount"

	//
	// Sends a Second Chance Offer to all bidders who bid more than the cost plus a specific amount.
	//
	SellingManagerAutoSecondChanceOfferTypeCodeTypeBidsGreaterThanCostPlusAmount SellingManagerAutoSecondChanceOfferTypeCodeType = "BidsGreaterThanCostPlusAmount"

	//
	// Sends a Second Chance Offer to all bidders who bid more than the cost plus a specific percentage.
	//
	SellingManagerAutoSecondChanceOfferTypeCodeTypeBidsGreaterThanCostPlusPercentage SellingManagerAutoSecondChanceOfferTypeCodeType = "BidsGreaterThanCostPlusPercentage"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerAutoSecondChanceOfferTypeCodeTypeCustomCode SellingManagerAutoSecondChanceOfferTypeCodeType = "CustomCode"
)

//
// Indicates the filters for Selling Manager automation listings.
//
type SellingManagerAutomationPropertyTypeCodeType string

const (

	//
	// Item failed to be listed using automation rules.
	//
	SellingManagerAutomationPropertyTypeCodeTypeItemListFailedAutomationRules SellingManagerAutomationPropertyTypeCodeType = "ItemListFailedAutomationRules"

	//
	// Relist item automation rule failed.
	//
	SellingManagerAutomationPropertyTypeCodeTypeItemRelistFailedAutomationRules SellingManagerAutomationPropertyTypeCodeType = "ItemRelistFailedAutomationRules"

	//
	// Item failed to be listed with Second Chance offer automation rule.
	//
	SellingManagerAutomationPropertyTypeCodeTypeItemListFailedSecondChanceOfferAutoRules SellingManagerAutomationPropertyTypeCodeType = "ItemListFailedSecondChanceOfferAutoRules"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerAutomationPropertyTypeCodeTypeCustomCode SellingManagerAutomationPropertyTypeCodeType = "CustomCode"
)

//
// Specifies the Selling Manager email status.
//
type SellingManagerEmailSentStatusCodeType string

const (

	//
	// Email sent successfully.
	//
	SellingManagerEmailSentStatusCodeTypeSuccessful SellingManagerEmailSentStatusCodeType = "Successful"

	//
	// Sending of email failed.
	//
	SellingManagerEmailSentStatusCodeTypeFailed SellingManagerEmailSentStatusCodeType = "Failed"

	//
	// Email is not yet sent and is in Queue.
	//
	SellingManagerEmailSentStatusCodeTypePending SellingManagerEmailSentStatusCodeType = "Pending"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerEmailSentStatusCodeTypeCustomCode SellingManagerEmailSentStatusCodeType = "CustomCode"
)

//
// Specifies the Selling Manager email type enumeration values.
//
type SellingManagerEmailTypeCodeType string

const (

	//
	// Email logged manually. For example, the seller manually adds an entry to
	// track email sent to a buyer offline.
	//
	SellingManagerEmailTypeCodeTypeManualEntry SellingManagerEmailTypeCodeType = "ManualEntry"

	//
	// Winning Buyer Notification.
	//
	SellingManagerEmailTypeCodeTypeWinningBuyerEmail SellingManagerEmailTypeCodeType = "WinningBuyerEmail"

	//
	// Payment Reminder emails.
	//
	SellingManagerEmailTypeCodeTypePaymentReminderEmail SellingManagerEmailTypeCodeType = "PaymentReminderEmail"

	//
	// Payment received notification.
	//
	SellingManagerEmailTypeCodeTypePaymentReceivedEmail SellingManagerEmailTypeCodeType = "PaymentReceivedEmail"

	//
	// Request shipping address email.
	//
	SellingManagerEmailTypeCodeTypeRequestForShippingAddressEmail SellingManagerEmailTypeCodeType = "RequestForShippingAddressEmail"

	//
	// Feedback Reminder emails.
	//
	SellingManagerEmailTypeCodeTypeFeedbackReminderEmail SellingManagerEmailTypeCodeType = "FeedbackReminderEmail"

	//
	// Shipment sent email.
	//
	SellingManagerEmailTypeCodeTypeShipmentSentEmail SellingManagerEmailTypeCodeType = "ShipmentSentEmail"

	//
	// Personalized emails.
	//
	SellingManagerEmailTypeCodeTypePersonalizedEmail SellingManagerEmailTypeCodeType = "PersonalizedEmail"

	//
	// Invoice notification emails.
	//
	SellingManagerEmailTypeCodeTypeInvoiceNotification SellingManagerEmailTypeCodeType = "InvoiceNotification"

	//
	// Custom email template 1.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate1 SellingManagerEmailTypeCodeType = "CustomEmailTemplate1"

	//
	// Custom email template 2.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate2 SellingManagerEmailTypeCodeType = "CustomEmailTemplate2"

	//
	// Custom email template 3.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate3 SellingManagerEmailTypeCodeType = "CustomEmailTemplate3"

	//
	// Custom email template 4.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate4 SellingManagerEmailTypeCodeType = "CustomEmailTemplate4"

	//
	// Custom email template 5.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate5 SellingManagerEmailTypeCodeType = "CustomEmailTemplate5"

	//
	// Custom email template 6.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate6 SellingManagerEmailTypeCodeType = "CustomEmailTemplate6"

	//
	// Custom email template 7.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate7 SellingManagerEmailTypeCodeType = "CustomEmailTemplate7"

	//
	// Custom email template 8.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate8 SellingManagerEmailTypeCodeType = "CustomEmailTemplate8"

	//
	// Custom email template 9.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate9 SellingManagerEmailTypeCodeType = "CustomEmailTemplate9"

	//
	// Custom email template 10.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate10 SellingManagerEmailTypeCodeType = "CustomEmailTemplate10"

	//
	// Custom email template 11.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate11 SellingManagerEmailTypeCodeType = "CustomEmailTemplate11"

	//
	// Custom email template 12.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate12 SellingManagerEmailTypeCodeType = "CustomEmailTemplate12"

	//
	// Custom email template 13.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate13 SellingManagerEmailTypeCodeType = "CustomEmailTemplate13"

	//
	// Custom email template 14.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate14 SellingManagerEmailTypeCodeType = "CustomEmailTemplate14"

	//
	// Custom email template 15.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate15 SellingManagerEmailTypeCodeType = "CustomEmailTemplate15"

	//
	// Custom email template 16.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate16 SellingManagerEmailTypeCodeType = "CustomEmailTemplate16"

	//
	// Custom email template 17.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate17 SellingManagerEmailTypeCodeType = "CustomEmailTemplate17"

	//
	// Custom email template 18.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate18 SellingManagerEmailTypeCodeType = "CustomEmailTemplate18"

	//
	// Custom email template 19.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate19 SellingManagerEmailTypeCodeType = "CustomEmailTemplate19"

	//
	// Custom email template 20.
	//
	SellingManagerEmailTypeCodeTypeCustomEmailTemplate20 SellingManagerEmailTypeCodeType = "CustomEmailTemplate20"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerEmailTypeCodeTypeCustomCode SellingManagerEmailTypeCodeType = "CustomCode"
)

//
// Container for other alerts for Selling Manager.
//
type SellingManagerGeneralPropertyTypeCodeType string

const (

	//
	// Items that received negative feeback.
	//
	SellingManagerGeneralPropertyTypeCodeTypeNegativeFeedbackReceived SellingManagerGeneralPropertyTypeCodeType = "NegativeFeedbackReceived"

	//
	// Unpaid item disputes require your response.
	//
	SellingManagerGeneralPropertyTypeCodeTypeUnpaidItemDispute SellingManagerGeneralPropertyTypeCodeType = "UnpaidItemDispute"

	//
	// Emails not set because of HTML or active content.
	//
	SellingManagerGeneralPropertyTypeCodeTypeBadEmailTemplate SellingManagerGeneralPropertyTypeCodeType = "BadEmailTemplate"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerGeneralPropertyTypeCodeTypeCustomCode SellingManagerGeneralPropertyTypeCodeType = "CustomCode"
)

//
// Indicates the filters for Selling Manager Inventory listings.
//
type SellingManagerInventoryPropertyTypeCodeType string

const (

	//
	// Products which are out of stock.
	//
	SellingManagerInventoryPropertyTypeCodeTypeProductsOutOfStock SellingManagerInventoryPropertyTypeCodeType = "ProductsOutOfStock"

	//
	// Products that are active.
	//
	SellingManagerInventoryPropertyTypeCodeTypeActive SellingManagerInventoryPropertyTypeCodeType = "Active"

	//
	// Products that are inactive.
	//
	SellingManagerInventoryPropertyTypeCodeTypeInActive SellingManagerInventoryPropertyTypeCodeType = "InActive"

	//
	// Products low on inventory.
	//
	SellingManagerInventoryPropertyTypeCodeTypeLowStock SellingManagerInventoryPropertyTypeCodeType = "LowStock"

	//
	// Products with listings.
	//
	SellingManagerInventoryPropertyTypeCodeTypeWithListings SellingManagerInventoryPropertyTypeCodeType = "WithListings"

	//
	// Products without listings.
	//
	SellingManagerInventoryPropertyTypeCodeTypeWithoutListings SellingManagerInventoryPropertyTypeCodeType = "WithoutListings"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerInventoryPropertyTypeCodeTypeCustomCode SellingManagerInventoryPropertyTypeCodeType = "CustomCode"
)

// Mark paid status type.
//
type SellingManagerPaidStatusCodeType string

const (

	//
	// The status of the order is "paid."
	//
	SellingManagerPaidStatusCodeTypePaid SellingManagerPaidStatusCodeType = "Paid"

	//
	// The status of the order is "partially paid."
	//
	SellingManagerPaidStatusCodeTypePartiallyPaid SellingManagerPaidStatusCodeType = "PartiallyPaid"

	//
	// The status of the order is "unpaid."
	//
	SellingManagerPaidStatusCodeTypeUnpaid SellingManagerPaidStatusCodeType = "Unpaid"

	//
	// The status of the order is "pending."
	//
	SellingManagerPaidStatusCodeTypePending SellingManagerPaidStatusCodeType = "Pending"

	//
	// The status of the order is "refunded."
	//
	SellingManagerPaidStatusCodeTypeRefunded SellingManagerPaidStatusCodeType = "Refunded"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerPaidStatusCodeTypeCustomCode SellingManagerPaidStatusCodeType = "CustomCode"
)

//
// Container for the PaisaPay alert types.
//
type SellingManagerPaisaPayPropertyTypeCodeType string

const (

	//
	// PaisaPay items awaiting shipment.
	//
	SellingManagerPaisaPayPropertyTypeCodeTypePaisaPayAwaitingShipment SellingManagerPaisaPayPropertyTypeCodeType = "PaisaPayAwaitingShipment"

	//
	// PaisaPay items for which time extension requests are rejected by the buyers.
	//
	SellingManagerPaisaPayPropertyTypeCodeTypePaisaPayTimeExtensionRequestDeclined SellingManagerPaisaPayPropertyTypeCodeType = "PaisaPayTimeExtensionRequestDeclined"

	//
	// PaisaPay items for which the item receipt has not yet been confirmed by the buyer or not
	// yet been auto-confirmed by the system.
	//
	SellingManagerPaisaPayPropertyTypeCodeTypePaisaPayPendingReceived SellingManagerPaisaPayPropertyTypeCodeType = "PaisaPayPendingReceived"

	//
	// PaisaPay items for which buyers have filed "Item not received".
	//
	SellingManagerPaisaPayPropertyTypeCodeTypePaisaPayRefundInitiated SellingManagerPaisaPayPropertyTypeCodeType = "PaisaPayRefundInitiated"

	//
	// PaisaPay items for which the seller has requested a time extension to enter the
	// shipping information.
	//
	SellingManagerPaisaPayPropertyTypeCodeTypePaisaPayTimeExtensionRequested SellingManagerPaisaPayPropertyTypeCodeType = "PaisaPayTimeExtensionRequested"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerPaisaPayPropertyTypeCodeTypeCustomCode SellingManagerPaisaPayPropertyTypeCodeType = "CustomCode"
)

//
// Sorting specifications for retrieved Selling Manager Inventory products.
//
type SellingManagerProductSortCodeType string

const (

	//
	// Sort products by by quantity currently listed.
	//
	SellingManagerProductSortCodeTypeActiveQuantity SellingManagerProductSortCodeType = "ActiveQuantity"

	//
	// Sort unlisted products by availability to list.
	//
	SellingManagerProductSortCodeTypeAvailableToList SellingManagerProductSortCodeType = "AvailableToList"

	//
	// Sort by average price of sold items.
	//
	SellingManagerProductSortCodeTypeAveragePrice SellingManagerProductSortCodeType = "AveragePrice"

	//
	// Sort by average unit cost of items.
	//
	SellingManagerProductSortCodeTypeAverageUnitCost SellingManagerProductSortCodeType = "AverageUnitCost"

	//
	// Sort products by label.
	//
	SellingManagerProductSortCodeTypeCustomLabel SellingManagerProductSortCodeType = "CustomLabel"

	//
	// Sort by product name.
	//
	SellingManagerProductSortCodeTypeProductName SellingManagerProductSortCodeType = "ProductName"

	//
	// Sort by submitted date.
	//
	SellingManagerProductSortCodeTypeLastSubmittedDate SellingManagerProductSortCodeType = "LastSubmittedDate"

	//
	// Sort by quantity scheduled to be listed.
	//
	SellingManagerProductSortCodeTypeScheduledQuantity SellingManagerProductSortCodeType = "ScheduledQuantity"

	//
	// Sort by quantity sold.
	//
	SellingManagerProductSortCodeTypeSoldQuantity SellingManagerProductSortCodeType = "SoldQuantity"

	//
	// Sort by the percentage of ended listings that had a sale.
	//
	SellingManagerProductSortCodeTypeSuccessPercent SellingManagerProductSortCodeType = "SuccessPercent"

	//
	// Sort by number of unsold items.
	//
	SellingManagerProductSortCodeTypeUnsoldQuantity SellingManagerProductSortCodeType = "UnsoldQuantity"

	//
	// Sort products by folder name.
	//
	SellingManagerProductSortCodeTypeFolderName SellingManagerProductSortCodeType = "FolderName"

	SellingManagerProductSortCodeTypeCustomCode SellingManagerProductSortCodeType = "CustomCode"
)

//
// Specifies search term types for Selling Manager listings.
//
type SellingManagerSearchTypeCodeType string

const (

	//
	// Search for listings based on Buyer ID.
	//
	SellingManagerSearchTypeCodeTypeBuyerUserID SellingManagerSearchTypeCodeType = "BuyerUserID"

	//
	// Search for listings based on Buyers email.
	//
	SellingManagerSearchTypeCodeTypeBuyerEmail SellingManagerSearchTypeCodeType = "BuyerEmail"

	//
	// Search for listings based on Buyers full name.
	//
	SellingManagerSearchTypeCodeTypeBuyerFullName SellingManagerSearchTypeCodeType = "BuyerFullName"

	//
	// Search for listings based on ItemID.
	//
	SellingManagerSearchTypeCodeTypeItemID SellingManagerSearchTypeCodeType = "ItemID"

	//
	// Search for listings based on Item Title.
	//
	SellingManagerSearchTypeCodeTypeTitle SellingManagerSearchTypeCodeType = "Title"

	//
	// Search for listings based on Product ID.
	//
	SellingManagerSearchTypeCodeTypeProductID SellingManagerSearchTypeCodeType = "ProductID"

	//
	// Search for listings based on Product Name.
	//
	SellingManagerSearchTypeCodeTypeProductName SellingManagerSearchTypeCodeType = "ProductName"

	//
	// Search for listings based on SKU.
	//
	SellingManagerSearchTypeCodeTypeCustomLabel SellingManagerSearchTypeCodeType = "CustomLabel"

	//
	// Search for listings based on the sale record ID.
	// <br/><br/>
	// When an item is sold, Selling Manager generates a sale record.
	// A sale record contains buyer information, shipping, and other information.
	// A sale record is displayed in the Sold view in Selling Manager.
	// <br/><br/>
	// In the following calls,
	// the value for the sale record ID is in the <b>SellingManagerSalesRecordNumber</b> field:
	// <b>GetItemTransactions</b>, <b>GetSellerTransactions</b>, <b>GetOrders</b>, <b>GetOrderTransactions</b>.
	// In the Selling Manager calls, the value for the sale record ID is in the
	// <b>SaleRecordID</b> field. The sale record ID can be for a single or multiple line item order.
	// <br/><br/>
	// For orders that occurred within the last 30 days, passing only the <b>SaleRecordID </b> into the <b>GetSellingManagerSoldListings</b>
	// request will return the sale record. However, for sales that occurred more than 30 days ago, the <b>SaleDateRange</b> container
	// must also be used, passing in a date range that includes the date on which the specific sale occurred.
	//
	SellingManagerSearchTypeCodeTypeSaleRecordID SellingManagerSearchTypeCodeType = "SaleRecordID"

	//
	// Reserved for internal or future use.
	//
	SellingManagerSearchTypeCodeTypeCustomCode SellingManagerSearchTypeCodeType = "CustomCode"
)

//
// Contains values for shipped status.
//
type SellingManagerShippedStatusCodeType string

const (

	//
	// The shipped status is "shipped."
	//
	SellingManagerShippedStatusCodeTypeShipped SellingManagerShippedStatusCodeType = "Shipped"

	//
	// The shipped status is "unshipped."
	//
	SellingManagerShippedStatusCodeTypeUnshipped SellingManagerShippedStatusCodeType = "Unshipped"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerShippedStatusCodeTypeCustomCode SellingManagerShippedStatusCodeType = "CustomCode"
)

//
// Indicates the filters for Selling Manager sold listings.
//
type SellingManagerSoldListingsPropertyTypeCodeType string

const (

	//
	// Item is not paid and not shipped.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeNotPaidNotShipped SellingManagerSoldListingsPropertyTypeCodeType = "NotPaidNotShipped"

	//
	// Item is paid but not shipped.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePaidNotShipped SellingManagerSoldListingsPropertyTypeCodeType = "PaidNotShipped"

	//
	// Item is paid but not shipped.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePrintShippingLabel SellingManagerSoldListingsPropertyTypeCodeType = "PrintShippingLabel"

	//
	// Item is paid for and is shipped.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePaidShipped SellingManagerSoldListingsPropertyTypeCodeType = "PaidShipped"

	//
	// An alert has been issued about a listing that is paid with no feedback left.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePaidNoFeedback SellingManagerSoldListingsPropertyTypeCodeType = "PaidNoFeedback"

	//
	// Payment Reminder emails not sent due to system error.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePaymentReminderSendError SellingManagerSoldListingsPropertyTypeCodeType = "PaymentReminderSendError"

	//
	// Payment received notification not sent due to system error.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePaymentReceivedNotificationSendError SellingManagerSoldListingsPropertyTypeCodeType = "PaymentReceivedNotificationSendError"

	//
	// Request shipping address emails not sent due to system error.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeRequestForShippingAddressSendError SellingManagerSoldListingsPropertyTypeCodeType = "RequestForShippingAddressSendError"

	//
	// Request shipping address emails not sent due to system error.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeShippingNotificationSendError SellingManagerSoldListingsPropertyTypeCodeType = "ShippingNotificationSendError"

	//
	// Personalized emails not sent due to system error.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePersonalizedEmailsSendError SellingManagerSoldListingsPropertyTypeCodeType = "PersonalizedEmailsSendError"

	//
	// Winning Buyer Notification not sent due to system error.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeWinningBuyerNotificationSendError SellingManagerSoldListingsPropertyTypeCodeType = "WinningBuyerNotificationSendError"

	//
	// Final value fee credit requests can be filed.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeFeeCreditRequest SellingManagerSoldListingsPropertyTypeCodeType = "FeeCreditRequest"

	//
	// If true, indicates that the PayPal Payment Received alert has been issued.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePayPalPayment SellingManagerSoldListingsPropertyTypeCodeType = "PayPalPayment"

	//
	// Automated feedback message is not sent.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeFeedbackMessageNotSent SellingManagerSoldListingsPropertyTypeCodeType = "FeedbackMessageNotSent"

	//
	// Feedback Reminder emails not sent due to system error.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeFeedbackReminderSendError SellingManagerSoldListingsPropertyTypeCodeType = "FeedbackReminderSendError"

	//
	// Item is not shipped.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeNotShipped SellingManagerSoldListingsPropertyTypeCodeType = "NotShipped"

	//
	// Listing eligible for unpaid item reminder
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeUnpaidItemReminder SellingManagerSoldListingsPropertyTypeCodeType = "UnpaidItemReminder"

	//
	// Escrow status is Cancelled.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEscrowCancelled SellingManagerSoldListingsPropertyTypeCodeType = "EscrowCancelled"

	//
	// Escrow status is Completed.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEscrowCompleted SellingManagerSoldListingsPropertyTypeCodeType = "EscrowCompleted"

	//
	// Escrow status is Initiated.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEscrowInitiated SellingManagerSoldListingsPropertyTypeCodeType = "EscrowInitiated"

	//
	// Escrow status is in refund state.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEscrowManageRefund SellingManagerSoldListingsPropertyTypeCodeType = "EscrowManageRefund"

	//
	// Item is shipped and Escrow status is in Release payment.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEscrowReleasePayment SellingManagerSoldListingsPropertyTypeCodeType = "EscrowReleasePayment"

	//
	// Payment is confirmed and item can be shipped to buyer.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEscrowShipToBuyer SellingManagerSoldListingsPropertyTypeCodeType = "EscrowShipToBuyer"

	//
	// All Escrow states.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEscrowSoldAll SellingManagerSoldListingsPropertyTypeCodeType = "EscrowSoldAll"

	//
	// Item is shipped and feedback is not yet received.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeShippedAndAwaitingFeedback SellingManagerSoldListingsPropertyTypeCodeType = "ShippedAndAwaitingFeedback"

	//
	// New international sale.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeInternationalSale SellingManagerSoldListingsPropertyTypeCodeType = "InternationalSale"

	//
	// Charity filter.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeEBayGivingWorksDonationOwed SellingManagerSoldListingsPropertyTypeCodeType = "eBayGivingWorksDonationOwed"

	//
	// Payment is overdue.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePaymentOverDue SellingManagerSoldListingsPropertyTypeCodeType = "PaymentOverDue"

	//
	// Payment is done with PaisaPay Escrow.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypePadiWithPaisaPayEscrow SellingManagerSoldListingsPropertyTypeCodeType = "PadiWithPaisaPayEscrow"

	//
	// Failed to send custom email template 1.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate1SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate1SendError"

	//
	// Failed to send custom email template 2.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate2SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate2SendError"

	//
	// Failed to send custom email template 3.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate3SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate3SendError"

	//
	// Failed to send custom email template 4.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate4SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate4SendError"

	//
	// Failed to send custom email template 5.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate5SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate5SendError"

	//
	// Failed to send custom email template 6.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate6SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate6SendError"

	//
	// Failed to send custom email template 7.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate7SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate7SendError"

	//
	// Failed to send custom email template 8.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate8SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate8SendError"

	//
	// Failed to send custom email template 9.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate9SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate9SendError"

	//
	// Failed to send custom email template 10.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate10SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate10SendError"

	//
	// Failed to send custom email template 11.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate11SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate11SendError"

	//
	// Failed to send custom email template 12.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate12SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate12SendError"

	//
	// Failed to send custom email template 13.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate13SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate13SendError"

	//
	// Failed to send custom email template 14.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate14SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate14SendError"

	//
	// Failed to send custom email template 15.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate15SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate15SendError"

	//
	// Failed to send custom email template 16.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate16SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate16SendError"

	//
	// Failed to send custom email template 17.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate17SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate17SendError"

	//
	// Failed to send custom email template 18.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate18SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate18SendError"

	//
	// Failed to send custom email template 19.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate19SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate19SendError"

	//
	// Failed to send custom email template 20.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomEmailTemplate20SendError SellingManagerSoldListingsPropertyTypeCodeType = "CustomEmailTemplate20SendError"

	//
	// Reserved for future use. If a buyer requests to return an item, the seller's response is required.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeResponseRequiredForReturnCase SellingManagerSoldListingsPropertyTypeCodeType = "ResponseRequiredForReturnCase"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerSoldListingsPropertyTypeCodeTypeCustomCode SellingManagerSoldListingsPropertyTypeCodeType = "CustomCode"
)

//
// SellingManagerSoldListingsSortType - Specifies the fields that can be used to sort the listings.
//
type SellingManagerSoldListingsSortTypeCodeType string

const (

	//
	// Sorts listings by sales Record ID.
	//
	SellingManagerSoldListingsSortTypeCodeTypeSalesRecordID SellingManagerSoldListingsSortTypeCodeType = "SalesRecordID"

	//
	// Sorts listings by Buyer email or ID.
	//
	SellingManagerSoldListingsSortTypeCodeTypeBuyerEmail SellingManagerSoldListingsSortTypeCodeType = "BuyerEmail"

	//
	// Sorts listings by sale format.
	//
	SellingManagerSoldListingsSortTypeCodeTypeSaleFormat SellingManagerSoldListingsSortTypeCodeType = "SaleFormat"

	//
	// Sorts listings by Custom label.
	//
	SellingManagerSoldListingsSortTypeCodeTypeCustomLabel SellingManagerSoldListingsSortTypeCodeType = "CustomLabel"

	//
	// Sorts listings by Total Price.
	//
	SellingManagerSoldListingsSortTypeCodeTypeTotalPrice SellingManagerSoldListingsSortTypeCodeType = "TotalPrice"

	//
	// Sorts listings by Sale Date.
	//
	SellingManagerSoldListingsSortTypeCodeTypeSaleDate SellingManagerSoldListingsSortTypeCodeType = "SaleDate"

	//
	// Sorts listings by Paid Date.
	//
	SellingManagerSoldListingsSortTypeCodeTypePaidDate SellingManagerSoldListingsSortTypeCodeType = "PaidDate"

	//
	// Sorts listings by Emails sent.
	//
	SellingManagerSoldListingsSortTypeCodeTypeEmailsSent SellingManagerSoldListingsSortTypeCodeType = "EmailsSent"

	//
	// Sorts listings by Checkout status.
	//
	SellingManagerSoldListingsSortTypeCodeTypeCheckoutState SellingManagerSoldListingsSortTypeCodeType = "CheckoutState"

	//
	// Sorts by Paid status.
	//
	SellingManagerSoldListingsSortTypeCodeTypePaidState SellingManagerSoldListingsSortTypeCodeType = "PaidState"

	//
	// Sorts by Shipped state.
	//
	SellingManagerSoldListingsSortTypeCodeTypeShippedState SellingManagerSoldListingsSortTypeCodeType = "ShippedState"

	//
	// Sorts by feedback left.
	//
	SellingManagerSoldListingsSortTypeCodeTypeFeedbackLeft SellingManagerSoldListingsSortTypeCodeType = "FeedbackLeft"

	//
	// Sorts by FeedbackReceived.
	//
	SellingManagerSoldListingsSortTypeCodeTypeFeedbackReceived SellingManagerSoldListingsSortTypeCodeType = "FeedbackReceived"

	//
	// Sorts by Shipped Date.
	//
	SellingManagerSoldListingsSortTypeCodeTypeShippedDate SellingManagerSoldListingsSortTypeCodeType = "ShippedDate"

	//
	// Sorts by buyer Postal code.
	//
	SellingManagerSoldListingsSortTypeCodeTypeBuyerPostalCode SellingManagerSoldListingsSortTypeCodeType = "BuyerPostalCode"

	//
	// Sorts by Days since sale.
	//
	SellingManagerSoldListingsSortTypeCodeTypeDaysSinceSale SellingManagerSoldListingsSortTypeCodeType = "DaysSinceSale"

	//
	// Sort by Start price.
	//
	SellingManagerSoldListingsSortTypeCodeTypeStartPrice SellingManagerSoldListingsSortTypeCodeType = "StartPrice"

	//
	// Sort by ReservePrice.
	//
	SellingManagerSoldListingsSortTypeCodeTypeReservePrice SellingManagerSoldListingsSortTypeCodeType = "ReservePrice"

	//
	// Sorts by Sold site.
	//
	SellingManagerSoldListingsSortTypeCodeTypeSoldOn SellingManagerSoldListingsSortTypeCodeType = "SoldOn"

	//
	// Sorts by Shipping cost.
	//
	SellingManagerSoldListingsSortTypeCodeTypeShippingCost SellingManagerSoldListingsSortTypeCodeType = "ShippingCost"

	//
	// Sorts by Listed site.
	//
	SellingManagerSoldListingsSortTypeCodeTypeListedOn SellingManagerSoldListingsSortTypeCodeType = "ListedOn"

	//
	// (out) Reserved for internal or future use.
	//
	SellingManagerSoldListingsSortTypeCodeTypeCustomCode SellingManagerSoldListingsSortTypeCodeType = "CustomCode"
)

//
// Specifies the action to take for an item's My eBay notes.
//
type SetUserNotesActionCodeType string

const (

	//
	// Creates or replaces an item's My eBay notes. Note that if
	// the specified item already has notes in My eBay, the new
	// notes will completely replace the existing notes. They will
	// not be appended.
	//
	SetUserNotesActionCodeTypeAddOrUpdate SetUserNotesActionCodeType = "AddOrUpdate"

	//
	// Deletes any existing My eBay notes for the specified item.
	// Specifying Delete when no notes exist does nothing, but does
	// not return an error.
	//
	SetUserNotesActionCodeTypeDelete SetUserNotesActionCodeType = "Delete"

	//
	// Reserved for internal or future use.
	//
	SetUserNotesActionCodeTypeCustomCode SetUserNotesActionCodeType = "CustomCode"
)

//
// Status of the delivery.
//
type ShipmentDeliveryStatusCodeType string

const (

	//
	// Created (default).
	//
	ShipmentDeliveryStatusCodeTypeCreated ShipmentDeliveryStatusCodeType = "Created"

	//
	// Dropped off.
	//
	ShipmentDeliveryStatusCodeTypeDroppedOff ShipmentDeliveryStatusCodeType = "DroppedOff"

	//
	// In transit.
	//
	ShipmentDeliveryStatusCodeTypeInTransit ShipmentDeliveryStatusCodeType = "InTransit"

	//
	// Delivered.
	//
	ShipmentDeliveryStatusCodeTypeDelivered ShipmentDeliveryStatusCodeType = "Delivered"

	//
	// Returned.
	//
	ShipmentDeliveryStatusCodeTypeReturned ShipmentDeliveryStatusCodeType = "Returned"

	//
	// Cancelled.
	//
	ShipmentDeliveryStatusCodeTypeCanceled ShipmentDeliveryStatusCodeType = "Canceled"

	//
	// Label printed.
	//
	ShipmentDeliveryStatusCodeTypeLabelPrinted ShipmentDeliveryStatusCodeType = "LabelPrinted"

	//
	// Unconfirmed.
	//
	ShipmentDeliveryStatusCodeTypeUnconfirmed ShipmentDeliveryStatusCodeType = "Unconfirmed"

	//
	// Unknown.
	//
	ShipmentDeliveryStatusCodeTypeUnknown ShipmentDeliveryStatusCodeType = "Unknown"

	//
	// Error.
	//
	ShipmentDeliveryStatusCodeTypeError ShipmentDeliveryStatusCodeType = "Error"

	//
	// Reserved for future use.
	//
	ShipmentDeliveryStatusCodeTypeCustomCode ShipmentDeliveryStatusCodeType = "CustomCode"
)

type ShipmentStatusCodeType string

const (
	ShipmentStatusCodeTypeActive ShipmentStatusCodeType = "Active"

	ShipmentStatusCodeTypeCanceled ShipmentStatusCodeType = "Canceled"

	ShipmentStatusCodeTypeCustomCode ShipmentStatusCodeType = "CustomCode"
)

//
// Identifies a shipping carrier used to ship an order, and the countries served by that carrier.
// <br/><br/>
// <span class="tablenote">
// <strong>Note:</strong> Commonly used shipping carriers can also be found by calling <b>GeteBayDetails</b> with <b>DetailName</b> set to <b>ShippingCarrierDetails</b> and examining the returned <strong>ShippingCarrierDetails.ShippingCarrier</strong> field.
// </span>
//
type ShippingCarrierCodeType string

const (

	//
	// United Parcel Service
	// <br/>
	// In CompleteSale call requests, the value <code>UPS</code> also represents UPS Mail Innovations. Available in US, IE, UK, FR, IT, DE, CH, ES, AT, CN, BE, PL, NL.
	//
	ShippingCarrierCodeTypeUPS ShippingCarrierCodeType = "UPS"

	//
	// U.S. Postal Service
	// <br/>
	// &nbsp;&nbsp;Available in US, CN, UK, DE.
	//
	ShippingCarrierCodeTypeUSPS ShippingCarrierCodeType = "USPS"

	//
	// FedEx
	// <br/>
	// &nbsp;&nbsp;In CompleteSale call requests, the value <code>FedEx</code> also represents FedEx SmartPost. Available in US, IE, UK, FR, IT, DE, CH, AU, ES, AT, CN, BE, PL, NL.
	//
	ShippingCarrierCodeTypeFedEx ShippingCarrierCodeType = "FedEx"

	//
	// Deutsche Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeDeutschePost ShippingCarrierCodeType = "DeutschePost"

	//
	// DHL Express
	// <br/>
	// &nbsp;&nbsp;Available in IE, US, ID, MX, MY, CA, UK, FR, IT, HK, TW, DE, CH, KR, AU, ES, AT, CN, SG, BE, TH, NL.
	//
	ShippingCarrierCodeTypeDHL ShippingCarrierCodeType = "DHL"

	//
	// Hermes Group
	// <br/>
	// &nbsp;&nbsp;Available in US, AT, UK, DE.
	//
	ShippingCarrierCodeTypeHermes ShippingCarrierCodeType = "Hermes"

	//
	// iloxx eService
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeILoxx ShippingCarrierCodeType = "iLoxx"

	//
	// Use this code for any carrier not listed here.
	//
	ShippingCarrierCodeTypeOther ShippingCarrierCodeType = "Other"

	//
	// Coliposte Domestic
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeColiposteDomestic ShippingCarrierCodeType = "ColiposteDomestic"

	//
	// Coliposte International
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeColiposteInternational ShippingCarrierCodeType = "ColiposteInternational"

	//
	// Chronopost
	// <br/>
	// &nbsp;&nbsp;Available in US, FR, UK, DE.
	//
	ShippingCarrierCodeTypeChronopost ShippingCarrierCodeType = "Chronopost"

	//
	// Correos
	// <br/>
	// &nbsp;&nbsp;Available in ES, US, UK, DE.
	//
	ShippingCarrierCodeTypeCorreos ShippingCarrierCodeType = "Correos"

	//
	// Seur (reserved for future use).
	//
	ShippingCarrierCodeTypeSeur ShippingCarrierCodeType = "Seur"

	//
	// Nacex
	// <br/>
	// &nbsp;&nbsp;Available in ES, US, UK, DE.
	//
	ShippingCarrierCodeTypeNacex ShippingCarrierCodeType = "Nacex"

	//
	// 4PX
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeFourPX ShippingCarrierCodeType = "FourPX"

	//
	// 4PX China
	// <br/>
	// &nbsp;&nbsp;Available in US, CN, UK.
	//
	ShippingCarrierCodeTypeFourPXCHINA ShippingCarrierCodeType = "FourPXCHINA"

	//
	// 4PX Express
	// <br/>
	// &nbsp;&nbsp;Available in UK, DE.
	//
	ShippingCarrierCodeTypeFourPXExpress ShippingCarrierCodeType = "FourPXExpress"

	//
	// 4PX Express Co. Ltd
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeFourPXLTD ShippingCarrierCodeType = "FourPXLTD"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeSevenLSP ShippingCarrierCodeType = "SevenLSP"

	//
	// A-1 Courier
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeA1CourierServices ShippingCarrierCodeType = "A1CourierServices"

	//
	// ABF Freight
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeABF ShippingCarrierCodeType = "ABF"

	//
	// AeroPost
	// <br/>
	// &nbsp;&nbsp;Available in JM, GT, CR, PA, TT, SV, CO, HN, CL, DO.
	//
	ShippingCarrierCodeTypeAeroPost ShippingCarrierCodeType = "AeroPost"

	//
	// Allied Express
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeALLIEDEXPRESS ShippingCarrierCodeType = "ALLIEDEXPRESS"

	//
	// AMWST
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeAMWST ShippingCarrierCodeType = "AMWST"

	//
	// An Post
	// <br/>
	// &nbsp;&nbsp;Available in IE.
	//
	ShippingCarrierCodeTypeAnPost ShippingCarrierCodeType = "AnPost"

	//
	// APC Postal Logistics
	// <br/>
	// &nbsp;&nbsp;Available in UK.
	//
	ShippingCarrierCodeTypeAPC ShippingCarrierCodeType = "APC"

	//
	// Aramex
	// <br/>
	// &nbsp;&nbsp;Available in US, BH, IL, AE, IN, UA, KW, SA, QA.
	//
	ShippingCarrierCodeTypeARAMEX ShippingCarrierCodeType = "ARAMEX"

	//
	// Arvato
	// <br/>
	// &nbsp;&nbsp;Available in US, CA, UK, FR, IT, GR, DE, CH, AT, BE, NL, SI, LT, SK.
	//
	ShippingCarrierCodeTypeARVATO ShippingCarrierCodeType = "ARVATO"

	//
	// ASM
	// <br/>
	// &nbsp;&nbsp;Available in ES.
	//
	ShippingCarrierCodeTypeASM ShippingCarrierCodeType = "ASM"

	//
	// Australia Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE, AU.
	//
	ShippingCarrierCodeTypeAustraliaPost ShippingCarrierCodeType = "AustraliaPost"

	//
	// Australian Air Express
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeAustralianAirExpress ShippingCarrierCodeType = "AustralianAirExpress"

	//
	// Averitt Express
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeAVRT ShippingCarrierCodeType = "AVRT"

	//
	// bpost
	// <br/>
	// &nbsp;&nbsp;Also coded as <code>BELGIANPOST</code>. Available in US, UK, DE, MO, BE.
	//
	ShippingCarrierCodeTypeBPost ShippingCarrierCodeType = "BPost"

	//
	// BRT Bartolini
	// <br/>
	// &nbsp;&nbsp;Available in IT.
	//
	ShippingCarrierCodeTypeBartolini ShippingCarrierCodeType = "Bartolini"

	//
	// Belgian Post Group
	// <br/>
	// &nbsp;&nbsp;Also coded as <code>BPost</code>. Available in US, UK, DE MO, BE.
	//
	ShippingCarrierCodeTypeBELGIANPOST ShippingCarrierCodeType = "BELGIANPOST"

	//
	// BKNS
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeBKNS ShippingCarrierCodeType = "BKNS"

	//
	// Blue Package Delivery
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeBluePackage ShippingCarrierCodeType = "BluePackage"

	//
	// BusinessPost
	// <br/>
	// &nbsp;&nbsp;Available in UK.
	//
	ShippingCarrierCodeTypeBusinessPost ShippingCarrierCodeType = "BusinessPost"

	//
	// Canpar Courier
	// <br/>
	// &nbsp;&nbsp;Available in US, CA, IT, UK, DE, AU
	//
	ShippingCarrierCodeTypeCanPar ShippingCarrierCodeType = "CanPar"

	//
	// Central Freight Lines
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeCENF ShippingCarrierCodeType = "CENF"

	//
	// CEVA Logistics
	// <br/>
	// &nbsp;&nbsp;Available in US, IT.
	//
	ShippingCarrierCodeTypeCEVA ShippingCarrierCodeType = "CEVA"

	//
	// China Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeChinaPost ShippingCarrierCodeType = "ChinaPost"

	//
	// Chronoexpres
	// <br/>
	// &nbsp;&nbsp;Available in ES.
	//
	ShippingCarrierCodeTypeChronoexpres ShippingCarrierCodeType = "Chronoexpres"

	//
	// Chukou1
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeCHUKOU1 ShippingCarrierCodeType = "CHUKOU1"

	//
	// Chunghwa Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeChunghwaPost ShippingCarrierCodeType = "ChunghwaPost"

	//
	// CitiPost
	// <br/>
	// &nbsp;&nbsp;Available in US, IE, CA, UK, FR, IT, HK, DE, AU, ES, CN, BE, UZ, PL, NL.
	//
	ShippingCarrierCodeTypeCitiPost ShippingCarrierCodeType = "CitiPost"

	//
	// Citylink
	// <br/>
	// &nbsp;&nbsp;Available in IE.
	//
	ShippingCarrierCodeTypeCityLink ShippingCarrierCodeType = "CityLink"

	//
	// Click & Quick
	// <br/>
	// &nbsp;&nbsp;Available in IT.
	//
	ShippingCarrierCodeTypeClickandQuick ShippingCarrierCodeType = "ClickandQuick"

	//
	// XPO Logistics (formerly Con-way Freight)
	// <br/>
	// &nbsp;&nbsp;Con-way Freight is now part of XPO Logistics. Available in US.
	//
	ShippingCarrierCodeTypeCNWY ShippingCarrierCodeType = "CNWY"

	//
	// Colissimo
	// <br/>
	// &nbsp;&nbsp;Available in FR.
	//
	ShippingCarrierCodeTypeColissimo ShippingCarrierCodeType = "Colissimo"

	//
	// CollectPlus
	// <br/>
	// &nbsp;&nbsp;Available in UK.
	//
	ShippingCarrierCodeTypeCollectPlus ShippingCarrierCodeType = "CollectPlus"

	//
	// CPC Logistics
	// <br/>
	// &nbsp;&nbsp;Available in US, CA, UK, DE.
	//
	ShippingCarrierCodeTypeCPC ShippingCarrierCodeType = "CPC"

	//
	// DAI Post
	// <br/>
	// &nbsp;&nbsp;Available in UK, AU.
	//
	ShippingCarrierCodeTypeDAIPost ShippingCarrierCodeType = "DAIPost"

	//
	// Day & Ross
	// <br/>
	// &nbsp;&nbsp;Available in US, CA, UK, AU.
	//
	ShippingCarrierCodeTypeDayandRoss ShippingCarrierCodeType = "DayandRoss"

	//
	// DB Schenker
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeDBSchenker ShippingCarrierCodeType = "DBSchenker"

	//
	// DHL Express
	// <br/>
	// &nbsp;&nbsp;Available in IT, DE.
	//
	ShippingCarrierCodeTypeDHLEXPRESS ShippingCarrierCodeType = "DHLEXPRESS"

	//
	// DHL Global Mail
	// <br/>
	// &nbsp;&nbsp;Formerly coded as <code>DHLG</code>. Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeDHLGlobalMail ShippingCarrierCodeType = "DHLGlobalMail"

	//
	// DHL EKB
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeDHLEKB ShippingCarrierCodeType = "DHLEKB"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Use <code>DHLGlobalMail</code> instead.
	//
	ShippingCarrierCodeTypeDHLG ShippingCarrierCodeType = "DHLG"

	//
	// Die Schweizerische Post
	// <br/>
	// &nbsp;&nbsp;Available in CH.
	//
	ShippingCarrierCodeTypeDieSchweizerischePost ShippingCarrierCodeType = "DieSchweizerischePost"

	//
	// DPD (Dynamic Parcel Distribution)
	// <br/>
	// &nbsp;&nbsp;Available in IE, BG, AT, UK, HR, BE, HU, PL, CZ, DE, NL, CH.
	//
	ShippingCarrierCodeTypeDPD ShippingCarrierCodeType = "DPD"

	//
	// DPX Thailand
	// <br/>
	// &nbsp;&nbsp;Available in US, TH.
	//
	ShippingCarrierCodeTypeDPXThailand ShippingCarrierCodeType = "DPXThailand"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeDucros ShippingCarrierCodeType = "Ducros"

	//
	// E-go
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeEGO ShippingCarrierCodeType = "EGO"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeEMF ShippingCarrierCodeType = "EMF"

	//
	// DPD France (formerly Exapaq)
	// <br/>
	// &nbsp;&nbsp;Exapaq is now part of DPD France. Available in FR.
	//
	ShippingCarrierCodeTypeExapaq ShippingCarrierCodeType = "Exapaq"

	//
	// Fastway
	// <br/>
	// &nbsp;&nbsp;Available in IE.
	//
	ShippingCarrierCodeTypeFastway ShippingCarrierCodeType = "Fastway"

	//
	// Fastway Couriers
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeFASTWAYCOURIERS ShippingCarrierCodeType = "FASTWAYCOURIERS"

	//
	// FedEx SmartPost
	// <br/>
	// &nbsp;&nbsp;In CompleteSale call requests only, specify FedEx SmartPost with the value <code>FedEx</code>. Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeFedExSmartPost ShippingCarrierCodeType = "FedExSmartPost"

	//
	// Flyt
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeFLYT ShippingCarrierCodeType = "FLYT"

	//
	// Flyt Express
	// <br/>
	// &nbsp;&nbsp;Available in UK, DE.
	//
	ShippingCarrierCodeTypeFLYTExpress ShippingCarrierCodeType = "FLYTExpress"

	//
	// Flyt Express US Direct line
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeFlytExpressUSDirectline ShippingCarrierCodeType = "FlytExpressUSDirectline"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeFTFT ShippingCarrierCodeType = "FTFT"

	//
	// FulfilExpress-AccStation
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeFulfilExpressAccStation ShippingCarrierCodeType = "FulfilExpressAccStation"

	//
	// FulfilExpress-eForCity
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeFulfilExpresseForCity ShippingCarrierCodeType = "FulfilExpresseForCity"

	//
	// FulfilExpress-EverydaySource
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeFulfilExpressEverydaySource ShippingCarrierCodeType = "FulfilExpressEverydaySource"

	//
	// FulfilExpress-iTrimming
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeFulfilExpressiTrimming ShippingCarrierCodeType = "FulfilExpressiTrimming"

	//
	// GLS (General Logistics Systems)
	// <br/>
	// &nbsp;&nbsp;Available in IE, ES, AT, IT, FR, BE, DE, NL.
	//
	ShippingCarrierCodeTypeGLS ShippingCarrierCodeType = "GLS"

	//
	// MXD Group (formerly Home Direct USA)
	// <br/>
	// &nbsp;&nbsp;Home Direct USA is now part of MXD Group. Available in US.
	//
	ShippingCarrierCodeTypeHDUSA ShippingCarrierCodeType = "HDUSA"

	//
	// n/a
	// <br/>
	// Use <code>Yodel</code> instead.
	//
	ShippingCarrierCodeTypeHomeDeliveryNetwork ShippingCarrierCodeType = "HomeDeliveryNetwork"

	//
	// Hong Kong Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE, AU.
	//
	ShippingCarrierCodeTypeHongKongPost ShippingCarrierCodeType = "HongKongPost"

	//
	// Hunter Express
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeHUNTEREXPRESS ShippingCarrierCodeType = "HUNTEREXPRESS"

	//
	// India Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeIndiaPost ShippingCarrierCodeType = "IndiaPost"

	//
	// Indonesia Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeIndonesiaPost ShippingCarrierCodeType = "IndonesiaPost"

	//
	// Interlink Express
	// <br/>
	// &nbsp;&nbsp;Available in UK.
	//
	ShippingCarrierCodeTypeInterlink ShippingCarrierCodeType = "Interlink"

	//
	// InterPost
	// <br/>
	// &nbsp;&nbsp;Available in IE, US, CA, UK, FR, IT, HK, DE, RO, AU, ES, AT, CN, CY, BE, PL, NL.
	//
	ShippingCarrierCodeTypeInterPost ShippingCarrierCodeType = "InterPost"

	//
	// IoInvio
	// <br/>
	// &nbsp;&nbsp;Available in IT.
	//
	ShippingCarrierCodeTypeIoInvio ShippingCarrierCodeType = "IoInvio"

	//
	// UPS i-parcel
	// <br/>
	// &nbsp;&nbsp;Available in US, MX, MY, SG, HK, ZA, TR, CH, JP, BR.
	//
	ShippingCarrierCodeTypeIparcel ShippingCarrierCodeType = "Iparcel"

	//
	// Israel Post
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeIsraelPost ShippingCarrierCodeType = "IsraelPost"

	//
	// Japan Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeJapanPost ShippingCarrierCodeType = "JapanPost"

	//
	// Kiala (UPS Access Point)
	// <br/>
	// &nbsp;&nbsp;Available in ES, US, FR, UK, BE, DE, NL.
	//
	ShippingCarrierCodeTypeKIALA ShippingCarrierCodeType = "KIALA"

	//
	// Korea Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeKoreaPost ShippingCarrierCodeType = "KoreaPost"

	//
	// La Poste
	// <br/>
	// &nbsp;&nbsp;Available in US, FR, UK, DE.
	//
	ShippingCarrierCodeTypeLAPOSTE ShippingCarrierCodeType = "LAPOSTE"

	//
	// Landmark Global
	// <br/>
	// &nbsp;&nbsp;Available in US, NZ, NO.
	//
	ShippingCarrierCodeTypeLandmark ShippingCarrierCodeType = "Landmark"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeLDSO ShippingCarrierCodeType = "LDSO"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeLTL ShippingCarrierCodeType = "LTL"

	//
	// Malaysia Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeMALAYSIAPOST ShippingCarrierCodeType = "MALAYSIAPOST"

	//
	// Manna Distribution Services
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeMannaFreight ShippingCarrierCodeType = "MannaFreight"

	//
	// Metapack
	// <br/>
	// &nbsp;&nbsp;Available in UK.
	//
	ShippingCarrierCodeTypeMetapack ShippingCarrierCodeType = "Metapack"

	//
	// MNG Kargo
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, TR.
	//
	ShippingCarrierCodeTypeMNGTurkey ShippingCarrierCodeType = "MNGTurkey"

	//
	// Mondial Relay
	// <br/>
	// &nbsp;&nbsp;Available in FR.
	//
	ShippingCarrierCodeTypeMondialRelay ShippingCarrierCodeType = "MondialRelay"

	//
	// MRW
	// <br/>
	// &nbsp;&nbsp;Available in ES.
	//
	ShippingCarrierCodeTypeMRW ShippingCarrierCodeType = "MRW"

	//
	// MSI Transportation
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeMSI ShippingCarrierCodeType = "MSI"

	//
	// New England Motor Freight
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeNEMF ShippingCarrierCodeType = "NEMF"

	//
	// Old Dominion Freight Line
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeODFL ShippingCarrierCodeType = "ODFL"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeOFFD ShippingCarrierCodeType = "OFFD"

	//
	// OnTrac Shipping
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeONTRACK ShippingCarrierCodeType = "ONTRACK"

	//
	// Osterreichische Post
	// <br/>
	// &nbsp;&nbsp;Available in AT.
	//
	ShippingCarrierCodeTypeOsterreichischePostAG ShippingCarrierCodeType = "OsterreichischePostAG"

	//
	// UPS Freight (formerly Overnite)
	// <br/>
	// &nbsp;&nbsp;Overnite is now part of UPS Freight. Available in US.
	//
	ShippingCarrierCodeTypeOVNT ShippingCarrierCodeType = "OVNT"

	//
	// International Bridge Domestic delivery
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeParcelPool ShippingCarrierCodeType = "ParcelPool"

	//
	// Parcelforce
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeParcelforce ShippingCarrierCodeType = "Parcelforce"

	//
	// PHLPost (Philippine Postal Corporation)
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypePhilpost ShippingCarrierCodeType = "Philpost"

	//
	// Pilot Freight Services
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypePilot ShippingCarrierCodeType = "Pilot"

	//
	// PITT OHIO
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypePITD ShippingCarrierCodeType = "PITD"

	//
	// Poczta Polska
	// <br/>
	// &nbsp;&nbsp;Available in PL.
	//
	ShippingCarrierCodeTypePocztaPolska ShippingCarrierCodeType = "PocztaPolska"

	//
	// Pocztex
	// <br/>
	// &nbsp;&nbsp;Available in PL.
	//
	ShippingCarrierCodeTypePocztex ShippingCarrierCodeType = "Pocztex"

	//
	// Post Italiano
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypePOSTITALIANO ShippingCarrierCodeType = "POSTITALIANO"

	//
	// PostNL
	// <br/>
	// &nbsp;&nbsp;Available in NL.
	//
	ShippingCarrierCodeTypePostNL ShippingCarrierCodeType = "PostNL"

	//
	// PostNord
	// <br/>
	// &nbsp;&nbsp;Available in UK, NO.
	//
	ShippingCarrierCodeTypePostNordNorway ShippingCarrierCodeType = "PostNordNorway"

	//
	// Poste Italiane
	// <br/>
	// &nbsp;&nbsp;Available in IT.
	//
	ShippingCarrierCodeTypePosteItaliane ShippingCarrierCodeType = "PosteItaliane"

	//
	// LaserShip (formerly Prestige Expedite)
	// <br/>
	// &nbsp;&nbsp;Prestige Expedite is now part of LaserShip. Available in US.
	//
	ShippingCarrierCodeTypePrestige ShippingCarrierCodeType = "Prestige"

	//
	// Quantium Solutions
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE, AU.
	//
	ShippingCarrierCodeTypeQuantium ShippingCarrierCodeType = "Quantium"

	//
	// Reddaway
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeRETL ShippingCarrierCodeType = "RETL"

	//
	// Royal Mail
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeRoyalMail ShippingCarrierCodeType = "RoyalMail"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeRRUN ShippingCarrierCodeType = "RRUN"

	//
	// Saia LTL Freight
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeSAIA ShippingCarrierCodeType = "SAIA"

	//
	// SDA Express Courier
	// <br/>
	// &nbsp;&nbsp;Available in IT.
	//
	ShippingCarrierCodeTypeSDA ShippingCarrierCodeType = "SDA"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeSFC ShippingCarrierCodeType = "SFC"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeSFCExpress ShippingCarrierCodeType = "SFCExpress"

	//
	// Singapore Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeSINGAPOREPOST ShippingCarrierCodeType = "SINGAPOREPOST"

	//
	// Siodemka (DPD Poland)
	// <br/>
	// &nbsp;&nbsp;Available in PL.
	//
	ShippingCarrierCodeTypeSiodemka ShippingCarrierCodeType = "Siodemka"

	//
	// Sioli & Fontana
	// <br/>
	// &nbsp;&nbsp;Available in US, CA, IT.
	//
	ShippingCarrierCodeTypeSioliandFontana ShippingCarrierCodeType = "SioliandFontana"

	//
	// Skynet (Malaysia)
	// <br/>
	// &nbsp;&nbsp;Available in US, MY.
	//
	ShippingCarrierCodeTypeSkynetMalaysia ShippingCarrierCodeType = "SkynetMalaysia"

	//
	// Smart Send Courier Service
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeSMARTSEND ShippingCarrierCodeType = "SMARTSEND"

	//
	// SGT Corriere Espresso
	// <br/>
	// &nbsp;&nbsp;Available in IT.
	//
	ShippingCarrierCodeTypeSogetras ShippingCarrierCodeType = "Sogetras"

	//
	// Spediamo
	// <br/>
	// &nbsp;&nbsp;Available in IT.
	//
	ShippingCarrierCodeTypeSpediamo ShippingCarrierCodeType = "Spediamo"

	//
	// Spee-Dee Delivery Service
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeSpeeDee ShippingCarrierCodeType = "SpeeDee"

	//
	// StarTrack
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeStarTrack ShippingCarrierCodeType = "StarTrack"

	//
	// Suntek Express LTD
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeSuntekExpressLTD ShippingCarrierCodeType = "SuntekExpressLTD"

	//
	// Swiss Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, CH.
	//
	ShippingCarrierCodeTypeSwissPost ShippingCarrierCodeType = "SwissPost"

	//
	// TELE
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeTELE ShippingCarrierCodeType = "TELE"

	//
	// Temando (shipping broker)
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeTEMANDO ShippingCarrierCodeType = "TEMANDO"

	//
	// Thailand Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeTHAILANDPOST ShippingCarrierCodeType = "THAILANDPOST"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeTNT ShippingCarrierCodeType = "TNT"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeTNTEXPRESS ShippingCarrierCodeType = "TNTEXPRESS"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeTNTPost ShippingCarrierCodeType = "TNTPost"

	//
	// Toll (Japan Post)
	// <br/>
	// &nbsp;&nbsp;Available in AU.
	//
	ShippingCarrierCodeTypeToll ShippingCarrierCodeType = "Toll"

	//
	// TPG Logistics
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeTPG ShippingCarrierCodeType = "TPG"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeTWW ShippingCarrierCodeType = "TWW"

	//
	// UBI Smart Parcel
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeUBI ShippingCarrierCodeType = "UBI"

	//
	// UK Mail
	// <br/>
	// &nbsp;&nbsp;Available in UK.
	//
	ShippingCarrierCodeTypeUKMail ShippingCarrierCodeType = "UKMail"

	//
	// UPS Mail Innovations
	// <br/>
	// &nbsp;&nbsp;In CompleteSale call requests only, specify UPS Mail Innovations with the value <code>UPS</code>. Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeUPSMailInnovations ShippingCarrierCodeType = "UPSMailInnovations"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeUPSC ShippingCarrierCodeType = "UPSC"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeUSFG ShippingCarrierCodeType = "USFG"

	//
	// USPS Commercial ePacket
	// <br/>
	// &nbsp;&nbsp;Available in US, CA.
	//
	ShippingCarrierCodeTypeUSPSCeP ShippingCarrierCodeType = "USPSCeP"

	//
	// USPS Priority Mail International
	// <br/>
	// &nbsp;&nbsp;Available in US, CA.
	//
	ShippingCarrierCodeTypeUSPSPMI ShippingCarrierCodeType = "USPSPMI"

	//
	// Vietnam Post
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeVietnamPost ShippingCarrierCodeType = "VietnamPost"

	//
	// Vitran Express
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeVITR ShippingCarrierCodeType = "VITR"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeWATKINS ShippingCarrierCodeType = "WATKINS"

	//
	// WIN.IT America
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE, AU.
	//
	ShippingCarrierCodeTypeWinit ShippingCarrierCodeType = "Winit"

	//
	// n/a
	// <br/>
	// &nbsp;&nbsp;Not currently supported.
	//
	ShippingCarrierCodeTypeWise ShippingCarrierCodeType = "Wise"

	//
	// wnDirect
	// <br/>
	// &nbsp;&nbsp;Available in US, CA, IT, FR, UK, RU, AU.
	//
	ShippingCarrierCodeTypeWNdirect ShippingCarrierCodeType = "WNdirect"

	//
	// WPX Delivery Solutions
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeWPX ShippingCarrierCodeType = "WPX"

	//
	// YANWEN Express
	// <br/>
	// &nbsp;&nbsp;Available in US, UK, DE.
	//
	ShippingCarrierCodeTypeYANWEN ShippingCarrierCodeType = "YANWEN"

	//
	// Yodel
	// <br/>
	// &nbsp;&nbsp;Available in UK.
	//
	ShippingCarrierCodeTypeYodel ShippingCarrierCodeType = "Yodel"

	//
	// YRC Freight
	// <br/>
	// &nbsp;&nbsp;Available in US.
	//
	ShippingCarrierCodeTypeYRC ShippingCarrierCodeType = "YRC"

	//
	// Reserved for internal or future use
	//
	ShippingCarrierCodeTypeCustomCode ShippingCarrierCodeType = "CustomCode"
)

//
// This enumerated type contains the values that specify the party (seller/buyer) who will be responsible for paying the return shipping cost if an item is returned. One of these values is set by the seller when establishing/setting a return policy for an item.
// <br><br>
// <span class="tablenote"><b>Note:</b> The <b>GeteBayDetails</b> call returns site-default Return Policy settings. For most categories within a given eBay site, the supported Return Policy options/values are the same, but there a few exceptions. To discover what return shipping 'payee' values that a particular category supports, call <b>GetCategoryFeatures</b> and include <code>DomesticReturnsShipmentPayeeValues</code> and/or <code>InternationalReturnsShipmentPayeeValues</code> as <b>FeatureID</b> values to see the return shipping 'payee' values available for domestic and international returns, respectively.
// </span>
//
type ShippingCostPaidByOptionsCodeType string

const (

	//
	// This value indicates that the buyer is responsible for paying the return shipping cost. Note that the buyer will not be responsible for return shipping cost if the the buyer's reason for the return is related to the received item not being as described in the listing, or if the item has arrived damaged or with missing parts.
	//
	ShippingCostPaidByOptionsCodeTypeBuyer ShippingCostPaidByOptionsCodeType = "Buyer"

	//
	// This value indicates that the seller is responsible for paying the return shipping cost.
	//
	ShippingCostPaidByOptionsCodeTypeSeller ShippingCostPaidByOptionsCodeType = "Seller"

	//
	// (out) Reserved for internal or future use.
	//
	ShippingCostPaidByOptionsCodeTypeCustomCode ShippingCostPaidByOptionsCodeType = "CustomCode"

	//
	// This value is no longer applicable.
	//
	ShippingCostPaidByOptionsCodeTypeEUSeller_ReturnRights ShippingCostPaidByOptionsCodeType = "EUSeller_ReturnRights"

	//
	// This value is no longer applicable.
	//
	ShippingCostPaidByOptionsCodeTypeEUSeller_CancelRights ShippingCostPaidByOptionsCodeType = "EUSeller_CancelRights"

	//
	// This value is no longer applicable.
	//
	ShippingCostPaidByOptionsCodeTypeEUBuyer_CancelRightsUnder40 ShippingCostPaidByOptionsCodeType = "EUBuyer_CancelRightsUnder40"
)

//
// Miscellaneous details of the shipment.
//
type ShippingFeatureCodeType string

const (

	//
	// Confirmation requested.
	//
	ShippingFeatureCodeTypeDeliveryConfirmation ShippingFeatureCodeType = "DeliveryConfirmation"

	//
	// Signature requested upon receipt.
	//
	ShippingFeatureCodeTypeSignatureConfirmation ShippingFeatureCodeType = "SignatureConfirmation"

	//
	// Stealth postage.
	//
	ShippingFeatureCodeTypeStealthPostage ShippingFeatureCodeType = "StealthPostage"

	//
	// Saturday delivery.
	//
	ShippingFeatureCodeTypeSaturdayDelivery ShippingFeatureCodeType = "SaturdayDelivery"

	//
	// Other.
	//
	ShippingFeatureCodeTypeOther ShippingFeatureCodeType = "Other"

	//
	// Not defined.
	//
	ShippingFeatureCodeTypeNotDefined ShippingFeatureCodeType = "NotDefined"

	//
	// (out) Reserved for internal or future use.
	//
	ShippingFeatureCodeTypeCustomCode ShippingFeatureCodeType = "CustomCode"
)

//
// The nature of the package used to ship the item(s).
// Required for calculated shipping only. Not all package types
// are supported by a specific shipping service (ShippingServiceCodeType).
//
type ShippingPackageCodeType string

const (

	//
	// None
	//
	ShippingPackageCodeTypeNone ShippingPackageCodeType = "None"

	//
	// Letter
	//
	ShippingPackageCodeTypeLetter ShippingPackageCodeType = "Letter"

	//
	// LargeEnvelope
	//
	ShippingPackageCodeTypeLargeEnvelope ShippingPackageCodeType = "LargeEnvelope"

	//
	// USPS Large Package/Oversize 1
	//
	ShippingPackageCodeTypeUSPSLargePack ShippingPackageCodeType = "USPSLargePack"

	//
	// Very Large Package/Oversize 2
	//
	ShippingPackageCodeTypeVeryLargePack ShippingPackageCodeType = "VeryLargePack"

	//
	// Extra Large Package/Oversize 3
	//
	ShippingPackageCodeTypeExtraLargePack ShippingPackageCodeType = "ExtraLargePack"

	//
	// UPS Letter
	//
	ShippingPackageCodeTypeUPSLetter ShippingPackageCodeType = "UPSLetter"

	//
	// USPS Flat Rate Envelope
	//
	ShippingPackageCodeTypeUSPSFlatRateEnvelope ShippingPackageCodeType = "USPSFlatRateEnvelope"

	//
	// Package/thick envelope
	//
	ShippingPackageCodeTypePackageThickEnvelope ShippingPackageCodeType = "PackageThickEnvelope"

	//
	// Roll
	//
	ShippingPackageCodeTypeRoll ShippingPackageCodeType = "Roll"

	//
	// Europallet
	//
	ShippingPackageCodeTypeEuropallet ShippingPackageCodeType = "Europallet"

	//
	// Onewaypallet
	//
	ShippingPackageCodeTypeOneWayPallet ShippingPackageCodeType = "OneWayPallet"

	//
	// Bulky goods
	//
	ShippingPackageCodeTypeBulkyGoods ShippingPackageCodeType = "BulkyGoods"

	//
	// Furniture
	//
	ShippingPackageCodeTypeFurniture ShippingPackageCodeType = "Furniture"

	//
	// Cars
	//
	ShippingPackageCodeTypeCars ShippingPackageCodeType = "Cars"

	//
	// Motorbikes
	//
	ShippingPackageCodeTypeMotorbikes ShippingPackageCodeType = "Motorbikes"

	//
	// Caravan
	//
	ShippingPackageCodeTypeCaravan ShippingPackageCodeType = "Caravan"

	//
	// Industry vehicles
	//
	ShippingPackageCodeTypeIndustryVehicles ShippingPackageCodeType = "IndustryVehicles"

	//
	// Parcel or padded Envelope
	//
	ShippingPackageCodeTypeParcelOrPaddedEnvelope ShippingPackageCodeType = "ParcelOrPaddedEnvelope"

	//
	// Small Canada Post Box
	//
	ShippingPackageCodeTypeSmallCanadaPostBox ShippingPackageCodeType = "SmallCanadaPostBox"

	//
	// Medium Canada Post Box
	//
	ShippingPackageCodeTypeMediumCanadaPostBox ShippingPackageCodeType = "MediumCanadaPostBox"

	//
	// Large Canada Post Box
	//
	ShippingPackageCodeTypeLargeCanadaPostBox ShippingPackageCodeType = "LargeCanadaPostBox"

	//
	// Small Canada Post Bubble Mailer
	//
	ShippingPackageCodeTypeSmallCanadaPostBubbleMailer ShippingPackageCodeType = "SmallCanadaPostBubbleMailer"

	//
	// Medium Canada Post Bubble Mailer
	//
	ShippingPackageCodeTypeMediumCanadaPostBubbleMailer ShippingPackageCodeType = "MediumCanadaPostBubbleMailer"

	//
	// Large Canada Post Bubble Mailer
	//
	ShippingPackageCodeTypeLargeCanadaPostBubbleMailer ShippingPackageCodeType = "LargeCanadaPostBubbleMailer"

	//
	// Padded Bags
	//
	ShippingPackageCodeTypePaddedBags ShippingPackageCodeType = "PaddedBags"

	//
	// Tough Bags
	//
	ShippingPackageCodeTypeToughBags ShippingPackageCodeType = "ToughBags"

	//
	// Expandable Tough Bags
	//
	ShippingPackageCodeTypeExpandableToughBags ShippingPackageCodeType = "ExpandableToughBags"

	//
	// Mailing Boxes
	//
	ShippingPackageCodeTypeMailingBoxes ShippingPackageCodeType = "MailingBoxes"

	//
	// Winepak
	//
	ShippingPackageCodeTypeWinepak ShippingPackageCodeType = "Winepak"

	//
	// Reserved for internal or future use.
	//
	ShippingPackageCodeTypeCustomCode ShippingPackageCodeType = "CustomCode"
)

//
// A shipping rate scale for shipping through USPS that affects the shipping cost calculated for USPS (lower if <strong>ShippingRateType</strong> is <code>DailyPickup</code>). For calculated shipping only.
//
type ShippingRateTypeCodeType string

const (

	//
	// "On-demand" shipping rate scale.
	//
	ShippingRateTypeCodeTypeOnDemand ShippingRateTypeCodeType = "OnDemand"

	//
	// "Daily pickup" shipping rate scale.
	//
	ShippingRateTypeCodeTypeDailyPickup ShippingRateTypeCodeType = "DailyPickup"

	//
	// "Standard List" shipping rate scale.
	//
	ShippingRateTypeCodeTypeStandardList ShippingRateTypeCodeType = "StandardList"

	//
	// "Counter" shipping rate scale.
	//
	ShippingRateTypeCodeTypeCounter ShippingRateTypeCodeType = "Counter"

	//
	// "Discounted" shipping rate scale.
	//
	ShippingRateTypeCodeTypeDiscounted ShippingRateTypeCodeType = "Discounted"

	//
	// "Commercial Plus" shipping rate scale.
	//
	ShippingRateTypeCodeTypeCommercialPlus ShippingRateTypeCodeType = "CommercialPlus"

	//
	// "Commercial Plus Discounted Rate1" shipping rate scale.
	//
	ShippingRateTypeCodeTypeGoldSilver ShippingRateTypeCodeType = "GoldSilver"

	//
	// "Commercial Plus Discounted Rate2" shipping rate scale.
	//
	ShippingRateTypeCodeTypePlatTitanium ShippingRateTypeCodeType = "PlatTitanium"

	//
	// (out) Reserved for internal or future use.
	//
	ShippingRateTypeCodeTypeCustomCode ShippingRateTypeCodeType = "CustomCode"
)

//
// Regions to which the seller is willing to ship the item.
// These values are applicable to ShipToLocation.
//
type ShippingRegionCodeType string

const (

	//
	// Africa
	//
	ShippingRegionCodeTypeAfrica ShippingRegionCodeType = "Africa"

	//
	// Asia
	//
	ShippingRegionCodeTypeAsia ShippingRegionCodeType = "Asia"

	//
	// Caribbean
	//
	ShippingRegionCodeTypeCaribbean ShippingRegionCodeType = "Caribbean"

	//
	// Europe
	//
	ShippingRegionCodeTypeEurope ShippingRegionCodeType = "Europe"

	//
	// Latin America
	//
	ShippingRegionCodeTypeLatinAmerica ShippingRegionCodeType = "LatinAmerica"

	//
	// Middle East
	//
	ShippingRegionCodeTypeMiddleEast ShippingRegionCodeType = "MiddleEast"

	//
	// North America
	//
	ShippingRegionCodeTypeNorthAmerica ShippingRegionCodeType = "NorthAmerica"

	//
	// Oceania (Pacific region other than Asia)
	//
	ShippingRegionCodeTypeOceania ShippingRegionCodeType = "Oceania"

	//
	// South America
	//
	ShippingRegionCodeTypeSouthAmerica ShippingRegionCodeType = "SouthAmerica"

	//
	// European Union
	//
	ShippingRegionCodeTypeEuropeanUnion ShippingRegionCodeType = "EuropeanUnion"

	//
	// Seller will not ship the item.
	//
	ShippingRegionCodeTypeWillNotShip ShippingRegionCodeType = "WillNotShip"

	//
	// Seller has specified Worldwide or eBay has
	// determined that the specified regions add up to Worldwide.
	//
	ShippingRegionCodeTypeWorldwide ShippingRegionCodeType = "Worldwide"

	//
	// Americas
	//
	ShippingRegionCodeTypeAmericas ShippingRegionCodeType = "Americas"

	ShippingRegionCodeTypeNone ShippingRegionCodeType = "None"

	//
	// Reserved for internal or future use
	//
	ShippingRegionCodeTypeCustomCode ShippingRegionCodeType = "CustomCode"
)

//
// A shipping service used to ship an item. Applications should not depend on the completeness of <strong>ShippingServiceCodeType</strong>. Instead, applications should call GeteBayDetails, with a <strong>DetailName</strong> value of <code>ShippingServiceDetails</code>, to return the complete list of shipping services. To check for the shipping services available for a specific site, specify the site ID in the header.
// <br/><br/>
// <span class="tablenote">
// <strong>Note:</strong> It is possible that some of the returned shipping services can no longer be used in the AddItem family of calls. To distinguish between the valid and invalid shipping services, look for the <strong>ValidForSellingFlow</strong> flag in the <strong>ShippingServiceDetails</strong> node. If this flag is not returned for a specific shipping service, that shipping service can no longer be used in the AddItem family of calls.
// </span>
//
type ShippingServiceCodeType string

const (

	//
	// UPS Ground
	//
	ShippingServiceCodeTypeUPSGround ShippingServiceCodeType = "UPSGround"

	//
	// UPS 3rd Day
	//
	ShippingServiceCodeTypeUPS3rdDay ShippingServiceCodeType = "UPS3rdDay"

	//
	// UPS 2nd Day
	//
	ShippingServiceCodeTypeUPS2ndDay ShippingServiceCodeType = "UPS2ndDay"

	//
	// UPS Next Day
	//
	ShippingServiceCodeTypeUPSNextDay ShippingServiceCodeType = "UPSNextDay"

	//
	// USPS Priority
	//
	ShippingServiceCodeTypeUSPSPriority ShippingServiceCodeType = "USPSPriority"

	//
	// USPS Parcel Select Non-Presort
	//
	ShippingServiceCodeTypeUSPSParcel ShippingServiceCodeType = "USPSParcel"

	//
	// USPS Standard Post
	//
	ShippingServiceCodeTypeUSPSStandardPost ShippingServiceCodeType = "USPSStandardPost"

	//
	// USPS Media
	//
	ShippingServiceCodeTypeUSPSMedia ShippingServiceCodeType = "USPSMedia"

	//
	// USPS First Class
	//
	ShippingServiceCodeTypeUSPSFirstClass ShippingServiceCodeType = "USPSFirstClass"

	//
	// Standard shipping method
	//
	ShippingServiceCodeTypeShippingMethodStandard ShippingServiceCodeType = "ShippingMethodStandard"

	//
	// Reserved for internal or future use
	//
	ShippingServiceCodeTypeShippingMethodExpress ShippingServiceCodeType = "ShippingMethodExpress"

	//
	// USPS Priority Mail Express
	//
	ShippingServiceCodeTypeUSPSExpressMail ShippingServiceCodeType = "USPSExpressMail"

	//
	// UPS Next Day Air
	//
	ShippingServiceCodeTypeUPSNextDayAir ShippingServiceCodeType = "UPSNextDayAir"

	//
	// UPS Next Day Air
	//
	ShippingServiceCodeTypeUPS2DayAirAM ShippingServiceCodeType = "UPS2DayAirAM"

	//
	// USPS Priority Mail Express Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSExpressMailFlatRateEnvelope ShippingServiceCodeType = "USPSExpressMailFlatRateEnvelope"

	//
	// USPS Priority Mail Express Padded Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSExpressMailPaddedFlatRateEnvelope ShippingServiceCodeType = "USPSExpressMailPaddedFlatRateEnvelope"

	//
	// USPS Priority Mail Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailFlatRateEnvelope ShippingServiceCodeType = "USPSPriorityMailFlatRateEnvelope"

	//
	// USPS Priority Mail Small Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailSmallFlatRateBox ShippingServiceCodeType = "USPSPriorityMailSmallFlatRateBox"

	//
	// USPS Priority Mail Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailFlatRateBox ShippingServiceCodeType = "USPSPriorityMailFlatRateBox"

	//
	// USPS Priority Mail Large Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailLargeFlatRateBox ShippingServiceCodeType = "USPSPriorityMailLargeFlatRateBox"

	//
	// USPS Priority Mail Padded Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailPaddedFlatRateEnvelope ShippingServiceCodeType = "USPSPriorityMailPaddedFlatRateEnvelope"

	//
	// USPS Priority Mail Legal Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailLegalFlatRateEnvelope ShippingServiceCodeType = "USPSPriorityMailLegalFlatRateEnvelope"

	//
	// USPS Priority Mail Express Legal Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSExpressMailLegalFlatRateEnvelope ShippingServiceCodeType = "USPSExpressMailLegalFlatRateEnvelope"

	//
	// USPS Priority Mail Regional Box A
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailRegionalBoxA ShippingServiceCodeType = "USPSPriorityMailRegionalBoxA"

	//
	// USPS Priority Mail Regional Box B
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailRegionalBoxB ShippingServiceCodeType = "USPSPriorityMailRegionalBoxB"

	//
	// USPS Priority Mail Regional Box C
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailRegionalBoxC ShippingServiceCodeType = "USPSPriorityMailRegionalBoxC"

	//
	// USPS Priority Mail Express Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSExpressMailFlatRateBox ShippingServiceCodeType = "USPSExpressMailFlatRateBox"

	//
	// Other (see description)
	//
	ShippingServiceCodeTypeOther ShippingServiceCodeType = "Other"

	//
	// Local Delivery/Pickup
	//
	ShippingServiceCodeTypeLocalDelivery ShippingServiceCodeType = "LocalDelivery"

	//
	// Not Selected
	//
	ShippingServiceCodeTypeNotSelected ShippingServiceCodeType = "NotSelected"

	//
	// International Not Selected
	//
	ShippingServiceCodeTypeInternationalNotSelected ShippingServiceCodeType = "InternationalNotSelected"

	//
	// Standard International Flat Rate Shipping
	//
	ShippingServiceCodeTypeStandardInternational ShippingServiceCodeType = "StandardInternational"

	//
	// Expedited International Flat Rate Shipping
	//
	ShippingServiceCodeTypeExpeditedInternational ShippingServiceCodeType = "ExpeditedInternational"

	//
	// USPS Global Express Mail
	//
	ShippingServiceCodeTypeUSPSGlobalExpress ShippingServiceCodeType = "USPSGlobalExpress"

	//
	// USPS Global Priority Mail
	//
	ShippingServiceCodeTypeUSPSGlobalPriority ShippingServiceCodeType = "USPSGlobalPriority"

	//
	// USPS Economy Parcel Post
	//
	ShippingServiceCodeTypeUSPSEconomyParcel ShippingServiceCodeType = "USPSEconomyParcel"

	//
	// USPS Economy Letter Post
	//
	ShippingServiceCodeTypeUSPSEconomyLetter ShippingServiceCodeType = "USPSEconomyLetter"

	//
	// USPS Airmail Letter Post
	//
	ShippingServiceCodeTypeUSPSAirmailLetter ShippingServiceCodeType = "USPSAirmailLetter"

	//
	// USPS Airmail Parcel Post
	//
	ShippingServiceCodeTypeUSPSAirmailParcel ShippingServiceCodeType = "USPSAirmailParcel"

	//
	// UPS Worldwide Express Plus
	//
	ShippingServiceCodeTypeUPSWorldWideExpressPlus ShippingServiceCodeType = "UPSWorldWideExpressPlus"

	//
	// UPS Worldwide Express
	//
	ShippingServiceCodeTypeUPSWorldWideExpress ShippingServiceCodeType = "UPSWorldWideExpress"

	//
	// UPS Worldwide Expedited
	//
	ShippingServiceCodeTypeUPSWorldWideExpedited ShippingServiceCodeType = "UPSWorldWideExpedited"

	//
	// UPS Worldwide Saver
	//
	ShippingServiceCodeTypeUPSWorldwideSaver ShippingServiceCodeType = "UPSWorldwideSaver"

	//
	// UPS Standard To Canada
	//
	ShippingServiceCodeTypeUPSStandardToCanada ShippingServiceCodeType = "UPSStandardToCanada"

	//
	// USPS Priority Mail Express International Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSExpressMailInternationalFlatRateEnvelope ShippingServiceCodeType = "USPSExpressMailInternationalFlatRateEnvelope"

	//
	// USPS Priority Mail Express International Padded Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSExpressMailInternationalPaddedFlatRateEnvelope ShippingServiceCodeType = "USPSExpressMailInternationalPaddedFlatRateEnvelope"

	//
	// USPS Priority Mail International Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailInternationalFlatRateEnvelope ShippingServiceCodeType = "USPSPriorityMailInternationalFlatRateEnvelope"

	//
	// USPS Priority Mail International Small Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailInternationalSmallFlatRateBox ShippingServiceCodeType = "USPSPriorityMailInternationalSmallFlatRateBox"

	//
	// USPS Priority Mail International Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	// The seller must also specify a package size of Package/Thick Envelope when
	// using a calculated shipping service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailInternationalFlatRateBox ShippingServiceCodeType = "USPSPriorityMailInternationalFlatRateBox"

	//
	// USPS Priority Mail International Large Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailInternationalLargeFlatRateBox ShippingServiceCodeType = "USPSPriorityMailInternationalLargeFlatRateBox"

	//
	// USPS Priority Mail International Padded Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailInternationalPaddedFlatRateEnvelope ShippingServiceCodeType = "USPSPriorityMailInternationalPaddedFlatRateEnvelope"

	//
	// USPS Priority Mail International Legal Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSPriorityMailInternationalLegalFlatRateEnvelope ShippingServiceCodeType = "USPSPriorityMailInternationalLegalFlatRateEnvelope"

	//
	// USPS Priority Mail Express International Legal Flat Rate Envelope
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSExpressMailInternationalLegalFlatRateEnvelope ShippingServiceCodeType = "USPSExpressMailInternationalLegalFlatRateEnvelope"

	//
	// USPS Priority Mail Express International Flat Rate Box
	// To use this service, a seller must specify the package weight so that eBay
	// can validate the weight against the maximum weight limit for the service.
	//
	ShippingServiceCodeTypeUSPSExpressMailInternationalFlatRateBox ShippingServiceCodeType = "USPSExpressMailInternationalFlatRateBox"

	//
	// Other International Shipping (see description)
	//
	ShippingServiceCodeTypeOtherInternational ShippingServiceCodeType = "OtherInternational"

	//
	// Standardversand (unversichert)
	//
	ShippingServiceCodeTypeAT_StandardDispatch ShippingServiceCodeType = "AT_StandardDispatch"

	//
	// Versicherter Versand
	//
	ShippingServiceCodeTypeAT_InsuredDispatch ShippingServiceCodeType = "AT_InsuredDispatch"

	//
	// Einschreiben (Versand inkl. Einschreibengebuhr)
	//
	ShippingServiceCodeTypeAT_Writing ShippingServiceCodeType = "AT_Writing"

	//
	// Nachnahme (Versand inkl. Nachnahmegebuhr)
	//
	ShippingServiceCodeTypeAT_COD ShippingServiceCodeType = "AT_COD"

	//
	// Express- oder Kurierversand
	//
	ShippingServiceCodeTypeAT_ExpressOrCourier ShippingServiceCodeType = "AT_ExpressOrCourier"

	//
	// Versicherter Express- oder Kurierversand
	//
	ShippingServiceCodeTypeAT_InsuredExpressOrCourier ShippingServiceCodeType = "AT_InsuredExpressOrCourier"

	//
	// Sonder-/Speditionsversand (z.B. Mobel, KFZ)
	//
	ShippingServiceCodeTypeAT_SpecialDispatch ShippingServiceCodeType = "AT_SpecialDispatch"

	//
	// Versicherter Sonder-/Speditionsversand (z.B. Mobel, KFZ)
	//
	ShippingServiceCodeTypeAT_InsuredSpecialDispatch ShippingServiceCodeType = "AT_InsuredSpecialDispatch"

	//
	// Sonstige (Siehe Artikelbeschreibung)
	//
	ShippingServiceCodeTypeAT_Sonstige ShippingServiceCodeType = "AT_Sonstige"

	//
	// Unversicherter Versand International
	//
	ShippingServiceCodeTypeAT_UnversicherterVersandInternational ShippingServiceCodeType = "AT_UnversicherterVersandInternational"

	//
	// Versicherter Versand International
	//
	ShippingServiceCodeTypeAT_VersicherterVersandInternational ShippingServiceCodeType = "AT_VersicherterVersandInternational"

	//
	// Sonstiger Versand International
	//
	ShippingServiceCodeTypeAT_SonstigerVersandInternational ShippingServiceCodeType = "AT_SonstigerVersandInternational"

	//
	// Unversicherter Express Versand International
	//
	ShippingServiceCodeTypeAT_UnversicherterExpressVersandInternational ShippingServiceCodeType = "AT_UnversicherterExpressVersandInternational"

	//
	// Versicherter Express Versand International
	//
	ShippingServiceCodeTypeAT_VersicherterExpressVersandInternational ShippingServiceCodeType = "AT_VersicherterExpressVersandInternational"

	//
	// Sparversand aus dem Ausland
	//
	ShippingServiceCodeTypeAT_EconomyDeliveryFromAbroad ShippingServiceCodeType = "AT_EconomyDeliveryFromAbroad"

	//
	// Standardversand aus dem Ausland
	//
	ShippingServiceCodeTypeAT_StandardDeliveryFromAbroad ShippingServiceCodeType = "AT_StandardDeliveryFromAbroad"

	//
	// Expressversand aus dem Ausland
	//
	ShippingServiceCodeTypeAT_ExpressDeliveryFromAbroad ShippingServiceCodeType = "AT_ExpressDeliveryFromAbroad"

	//
	// Versand mit Nachverfolgung aus dem Ausland
	//
	ShippingServiceCodeTypeAT_TrackedDeliveryFromAbroad ShippingServiceCodeType = "AT_TrackedDeliveryFromAbroad"

	//
	// Regular
	//
	ShippingServiceCodeTypeAU_Regular ShippingServiceCodeType = "AU_Regular"

	//
	// Express
	//
	ShippingServiceCodeTypeAU_Express ShippingServiceCodeType = "AU_Express"

	//
	// Registered
	//
	ShippingServiceCodeTypeAU_Registered ShippingServiceCodeType = "AU_Registered"

	//
	// Courier
	//
	ShippingServiceCodeTypeAU_Courier ShippingServiceCodeType = "AU_Courier"

	//
	// Other
	//
	ShippingServiceCodeTypeAU_Other ShippingServiceCodeType = "AU_Other"

	//
	// EMS International Courier - Parcels
	//
	ShippingServiceCodeTypeAU_EMSInternationalCourierParcels ShippingServiceCodeType = "AU_EMSInternationalCourierParcels"

	//
	// EMS International Courier - Documents
	//
	ShippingServiceCodeTypeAU_EMSInternationalCourierDocuments ShippingServiceCodeType = "AU_EMSInternationalCourierDocuments"

	//
	// Express Post International - Documents
	//
	ShippingServiceCodeTypeAU_ExpressPostInternationalDocuments ShippingServiceCodeType = "AU_ExpressPostInternationalDocuments"

	//
	// Air Mail
	//
	ShippingServiceCodeTypeAU_AirMailInternational ShippingServiceCodeType = "AU_AirMailInternational"

	//
	// Economy Air
	//
	ShippingServiceCodeTypeAU_EconomyAirInternational ShippingServiceCodeType = "AU_EconomyAirInternational"

	//
	// Sea Mail
	//
	ShippingServiceCodeTypeAU_SeaMailInternational ShippingServiceCodeType = "AU_SeaMailInternational"

	//
	// Standard International Flat Rate Postage
	//
	ShippingServiceCodeTypeAU_StandardInternational ShippingServiceCodeType = "AU_StandardInternational"

	//
	// Expedited international flat rate postage
	//
	ShippingServiceCodeTypeAU_ExpeditedInternational ShippingServiceCodeType = "AU_ExpeditedInternational"

	//
	// Other international postage
	//
	ShippingServiceCodeTypeAU_OtherInternational ShippingServiceCodeType = "AU_OtherInternational"

	//
	// Australia Post Registered Post International Padded Bag 1 kg
	//
	ShippingServiceCodeTypeAU_AusPostRegisteredPostInternationalPaddedBag1kg ShippingServiceCodeType = "AU_AusPostRegisteredPostInternationalPaddedBag1kg"

	//
	// Australia Post Registered Post International Padded Bag 500 g
	//
	ShippingServiceCodeTypeAU_AusPostRegisteredPostInternationalPaddedBag500g ShippingServiceCodeType = "AU_AusPostRegisteredPostInternationalPaddedBag500g"

	//
	// Australia Post Registered Post International Parcel
	//
	ShippingServiceCodeTypeAU_AusPostRegisteredPostInternationalParcel ShippingServiceCodeType = "AU_AusPostRegisteredPostInternationalParcel"

	//
	// Expedited delivery from outside Australia
	//
	ShippingServiceCodeTypeAU_ExpeditedDeliveryFromOutsideAU ShippingServiceCodeType = "AU_ExpeditedDeliveryFromOutsideAU"

	//
	// Economy delivery from outside Australia
	//
	ShippingServiceCodeTypeAU_EconomyDeliveryFromOutsideAU ShippingServiceCodeType = "AU_EconomyDeliveryFromOutsideAU"

	//
	// Standard Delivery From Outside AU
	//
	ShippingServiceCodeTypeAU_StandardDeliveryFromOutsideAU ShippingServiceCodeType = "AU_StandardDeliveryFromOutsideAU"

	//
	// Australian Air Express Metro 15 kg
	//
	ShippingServiceCodeTypeAU_AustralianAirExpressMetro15kg ShippingServiceCodeType = "AU_AustralianAirExpressMetro15kg"

	//
	// Australian Air Express Flat Rate 5 kg
	//
	ShippingServiceCodeTypeAU_AustralianAirExpressFlatRate5kg ShippingServiceCodeType = "AU_AustralianAirExpressFlatRate5kg"

	//
	// Australian Air Express Flat Rate 3 kg
	//
	ShippingServiceCodeTypeAU_AustralianAirExpressFlatRate3kg ShippingServiceCodeType = "AU_AustralianAirExpressFlatRate3kg"

	//
	// Australian Air Express Flat Rate 1 kg
	//
	ShippingServiceCodeTypeAU_AustralianAirExpressFlatRate1kg ShippingServiceCodeType = "AU_AustralianAirExpressFlatRate1kg"

	//
	// Express delivery (1-3 business days) in Australia
	//
	ShippingServiceCodeTypeAU_ExpressDelivery ShippingServiceCodeType = "AU_ExpressDelivery"

	//
	// Standard delivery (1-6 business days) in Australia
	//
	ShippingServiceCodeTypeAU_StandardDelivery ShippingServiceCodeType = "AU_StandardDelivery"

	//
	// eBay/Australian Post 3 kg Flat Rate Satchel
	//
	ShippingServiceCodeTypeAU_eBayAusPost3kgFlatRateSatchel ShippingServiceCodeType = "AU_eBayAusPost3kgFlatRateSatchel"

	//
	// eBay/Australian Post 500 g Flat Rate Satchel
	//
	ShippingServiceCodeTypeAU_eBayAusPost500gFlatRateSatchel ShippingServiceCodeType = "AU_eBayAusPost500gFlatRateSatchel"

	//
	// Freight delivery in Australia. Used for heavy and bulky items.
	//
	ShippingServiceCodeTypeAU_Freight ShippingServiceCodeType = "AU_Freight"

	//
	// Livraison standard a partir de l'etranger
	//
	ShippingServiceCodeTypeBEFR_StandardDelivery ShippingServiceCodeType = "BEFR_StandardDelivery"

	//
	// Livraison express
	//
	ShippingServiceCodeTypeBEFR_PriorityDelivery ShippingServiceCodeType = "BEFR_PriorityDelivery"

	//
	// Colis
	//
	ShippingServiceCodeTypeBEFR_ParcelPost ShippingServiceCodeType = "BEFR_ParcelPost"

	//
	// Courrier en recommande
	//
	ShippingServiceCodeTypeBEFR_RegisteredMail ShippingServiceCodeType = "BEFR_RegisteredMail"

	//
	// Autre service de livraison
	//
	ShippingServiceCodeTypeBEFR_Other ShippingServiceCodeType = "BEFR_Other"

	//
	// De Post
	//
	ShippingServiceCodeTypeBEFR_DePostInternational ShippingServiceCodeType = "BEFR_DePostInternational"

	//
	// UPS
	//
	ShippingServiceCodeTypeBEFR_UPSInternational ShippingServiceCodeType = "BEFR_UPSInternational"

	//
	// FedEx
	//
	ShippingServiceCodeTypeBEFR_FedExInternational ShippingServiceCodeType = "BEFR_FedExInternational"

	//
	// DHL
	//
	ShippingServiceCodeTypeBEFR_DHLInternational ShippingServiceCodeType = "BEFR_DHLInternational"

	//
	// TPG Post/TNT (Netherlands)
	//
	ShippingServiceCodeTypeBEFR_TPGPostTNTInternational ShippingServiceCodeType = "BEFR_TPGPostTNTInternational"

	//
	// Frais de livraison internationale fixes
	//
	ShippingServiceCodeTypeBEFR_StandardInternational ShippingServiceCodeType = "BEFR_StandardInternational"

	//
	// Frais fixes pour livraison internationale express
	//
	ShippingServiceCodeTypeBEFR_ExpeditedInternational ShippingServiceCodeType = "BEFR_ExpeditedInternational"

	//
	// Autres livraisons internationales (voir description)
	//
	ShippingServiceCodeTypeBEFR_OtherInternational ShippingServiceCodeType = "BEFR_OtherInternational"

	//
	// La Poste (France)
	//
	ShippingServiceCodeTypeBEFR_LaPosteInternational ShippingServiceCodeType = "BEFR_LaPosteInternational"

	// La Poste - livraison standard (1 a 2 jours ouvrables)
	ShippingServiceCodeTypeBEFR_LaPosteStandardShipping ShippingServiceCodeType = "BEFR_LaPosteStandardShipping"

	// La Poste - envoi recommande (1 jour ouvrable)
	ShippingServiceCodeTypeBEFR_LaPosteCertifiedShipping ShippingServiceCodeType = "BEFR_LaPosteCertifiedShipping"

	// La Poste - Taxipost LLS (2 jours ouvrables)
	ShippingServiceCodeTypeBEFR_LaPosteTaxipostLLS ShippingServiceCodeType = "BEFR_LaPosteTaxipostLLS"

	// La Poste - Taxipost 24h (1 jour ouvrable)
	ShippingServiceCodeTypeBEFR_LaPosteTaxipost24h ShippingServiceCodeType = "BEFR_LaPosteTaxipost24h"

	// Autres livraisons
	ShippingServiceCodeTypeBEFR_LaPosteTaxipostSecur ShippingServiceCodeType = "BEFR_LaPosteTaxipostSecur"

	// La Poste - livraison standard
	ShippingServiceCodeTypeBEFR_PostInternationalStandard ShippingServiceCodeType = "BEFR_PostInternationalStandard"

	// La Poste - envoi recommande
	ShippingServiceCodeTypeBEFR_PostInternationalRegistered ShippingServiceCodeType = "BEFR_PostInternationalRegistered"

	// TNT
	ShippingServiceCodeTypeBEFR_TNTInternational ShippingServiceCodeType = "BEFR_TNTInternational"

	//
	// Livraison economique a partir de l'etranger
	//
	ShippingServiceCodeTypeBEFR_EconomyDeliveryFromAbroad ShippingServiceCodeType = "BEFR_EconomyDeliveryFromAbroad"

	//
	// Livraison standard a partir de l'etranger
	//
	ShippingServiceCodeTypeBEFR_StandardDeliveryFromAbroad ShippingServiceCodeType = "BEFR_StandardDeliveryFromAbroad"

	//
	// Livraison express a partir de l'etranger
	//
	ShippingServiceCodeTypeBEFR_ExpressDeliveryFromAbroad ShippingServiceCodeType = "BEFR_ExpressDeliveryFromAbroad"

	//
	// Livraison a partir de l'etranger avec suivi de commande
	//
	ShippingServiceCodeTypeBEFR_TrackedDeliveryFromAbroad ShippingServiceCodeType = "BEFR_TrackedDeliveryFromAbroad"

	//
	// Standard Delivery
	//
	ShippingServiceCodeTypeBENL_StandardDelivery ShippingServiceCodeType = "BENL_StandardDelivery"

	//
	// Priority Delivery
	//
	ShippingServiceCodeTypeBENL_PriorityDelivery ShippingServiceCodeType = "BENL_PriorityDelivery"

	//
	// Parcel Post
	//
	ShippingServiceCodeTypeBENL_ParcelPost ShippingServiceCodeType = "BENL_ParcelPost"

	//
	// Registered Mail
	//
	ShippingServiceCodeTypeBENL_RegisteredMail ShippingServiceCodeType = "BENL_RegisteredMail"

	//
	// Other Shipping Service
	//
	ShippingServiceCodeTypeBENL_Other ShippingServiceCodeType = "BENL_Other"

	//
	// De Post
	//
	ShippingServiceCodeTypeBENL_DePostInternational ShippingServiceCodeType = "BENL_DePostInternational"

	//
	// UPS
	//
	ShippingServiceCodeTypeBENL_UPSInternational ShippingServiceCodeType = "BENL_UPSInternational"

	//
	// FedEx
	//
	ShippingServiceCodeTypeBENL_FedExInternational ShippingServiceCodeType = "BENL_FedExInternational"

	//
	// DHL
	//
	ShippingServiceCodeTypeBENL_DHLInternational ShippingServiceCodeType = "BENL_DHLInternational"

	//
	// TPG Post/TNT (Netherlands)
	//
	ShippingServiceCodeTypeBENL_TPGPostTNTInternational ShippingServiceCodeType = "BENL_TPGPostTNTInternational"

	//
	// Standard International
	//
	ShippingServiceCodeTypeBENL_StandardInternational ShippingServiceCodeType = "BENL_StandardInternational"

	//
	// Expedited International
	//
	ShippingServiceCodeTypeBENL_ExpeditedInternational ShippingServiceCodeType = "BENL_ExpeditedInternational"

	//
	// Other International Shipping Services
	//
	ShippingServiceCodeTypeBENL_OtherInternational ShippingServiceCodeType = "BENL_OtherInternational"

	//
	// La Poste (France)
	//
	ShippingServiceCodeTypeBENL_LaPosteInternational ShippingServiceCodeType = "BENL_LaPosteInternational"

	// De Post - standaardverzending (1 tot 2 werkdagen)
	ShippingServiceCodeTypeBENL_DePostStandardShipping ShippingServiceCodeType = "BENL_DePostStandardShipping"

	// De Post - aangetekende zending (1 werkdag)
	ShippingServiceCodeTypeBENL_DePostCertifiedShipping ShippingServiceCodeType = "BENL_DePostCertifiedShipping"

	// De Post - Taxipost LLS (2 werkdagen)
	ShippingServiceCodeTypeBENL_DePostTaxipostLLS ShippingServiceCodeType = "BENL_DePostTaxipostLLS"

	// De Post - Taxipost 24u (1 werkdag)
	ShippingServiceCodeTypeBENL_DePostTaxipost24h ShippingServiceCodeType = "BENL_DePostTaxipost24h"

	// De Post - Taxipost Secur (1 werkdag)
	ShippingServiceCodeTypeBENL_DePostTaxipostSecur ShippingServiceCodeType = "BENL_DePostTaxipostSecur"

	// Andere verzending
	ShippingServiceCodeTypeBENL_OtherShippingMethods ShippingServiceCodeType = "BENL_OtherShippingMethods"

	// De Post - standaardverzending
	ShippingServiceCodeTypeBENL_PostInternationalStandard ShippingServiceCodeType = "BENL_PostInternationalStandard"

	// De Post - aangetekende zending
	ShippingServiceCodeTypeBENL_PostInternationalRegistered ShippingServiceCodeType = "BENL_PostInternationalRegistered"

	// TNT
	ShippingServiceCodeTypeBENL_TNTInternational ShippingServiceCodeType = "BENL_TNTInternational"

	// Voordelige verzending uit het buitenland
	ShippingServiceCodeTypeBENL_EconomyDeliveryFromAbroad ShippingServiceCodeType = "BENL_EconomyDeliveryFromAbroad"

	// Standaardverzending uit het buitenland
	ShippingServiceCodeTypeBENL_StandardDeliveryFromAbroad ShippingServiceCodeType = "BENL_StandardDeliveryFromAbroad"

	// Express verzending uit het buitenland
	ShippingServiceCodeTypeBENL_ExpressDeliveryFromAbroad ShippingServiceCodeType = "BENL_ExpressDeliveryFromAbroad"

	// Verzending uit het buitenland met internationale tracking
	ShippingServiceCodeTypeBENL_TrackedDeliveryFromAbroad ShippingServiceCodeType = "BENL_TrackedDeliveryFromAbroad"

	//
	// Standard Delivery
	//
	ShippingServiceCodeTypeCA_StandardDelivery ShippingServiceCodeType = "CA_StandardDelivery"

	//
	// Expedited delivery
	//
	ShippingServiceCodeTypeCA_ExpeditedDelivery ShippingServiceCodeType = "CA_ExpeditedDelivery"

	//
	// Canada Post Lettermail
	//
	ShippingServiceCodeTypeCA_PostLettermail ShippingServiceCodeType = "CA_PostLettermail"

	//
	// Canada Post Regular Parcel
	//
	ShippingServiceCodeTypeCA_PostRegularParcel ShippingServiceCodeType = "CA_PostRegularParcel"

	//
	// Canada Post Expedited Parcel
	//
	ShippingServiceCodeTypeCA_PostExpeditedParcel ShippingServiceCodeType = "CA_PostExpeditedParcel"

	//
	// Canada Post Xpresspost - International
	//
	ShippingServiceCodeTypeCA_PostXpresspost ShippingServiceCodeType = "CA_PostXpresspost"

	//
	// Canada Post Priority Courier
	//
	ShippingServiceCodeTypeCA_PostPriorityCourier ShippingServiceCodeType = "CA_PostPriorityCourier"

	//
	// Canada Post Expedited Flat Rate Box
	//
	ShippingServiceCodeTypeCanadaPostExpeditedFlatRateBox ShippingServiceCodeType = "CanadaPostExpeditedFlatRateBox"

	//
	//
	// (This value is no longer used.)
	//
	ShippingServiceCodeTypeCA_PostExpeditedFlatRateBox ShippingServiceCodeType = "CA_PostExpeditedFlatRateBox"

	//
	// Standard International Flat Rate Shipping
	//
	ShippingServiceCodeTypeCA_StandardInternational ShippingServiceCodeType = "CA_StandardInternational"

	//
	// Expedited International Flat Rate Shipping
	//
	ShippingServiceCodeTypeCA_ExpeditedInternational ShippingServiceCodeType = "CA_ExpeditedInternational"

	//
	// Other International Shipping (see description)
	//
	ShippingServiceCodeTypeCA_OtherInternational ShippingServiceCodeType = "CA_OtherInternational"

	//
	// Canada Post Expedited Parcel - USA
	//
	ShippingServiceCodeTypeCA_PostExpeditedParcelUSA ShippingServiceCodeType = "CA_PostExpeditedParcelUSA"

	//
	// Canada Post Small Packets - USA
	//
	ShippingServiceCodeTypeCA_PostSmallPacketsUSA ShippingServiceCodeType = "CA_PostSmallPacketsUSA"

	//
	// Canada Post Xpresspost - USA
	//
	ShippingServiceCodeTypeCA_PostXpresspostUSA ShippingServiceCodeType = "CA_PostXpresspostUSA"

	//
	// Canada Post Xpresspost - International
	//
	ShippingServiceCodeTypeCA_PostXpresspostInternational ShippingServiceCodeType = "CA_PostXpresspostInternational"

	//
	// Canada Post International Parcel - Surface
	//
	ShippingServiceCodeTypeCA_PostInternationalParcelSurface ShippingServiceCodeType = "CA_PostInternationalParcelSurface"

	//
	// Canada Post International Parcel - Air
	//
	ShippingServiceCodeTypeCA_PostInternationalParcelAir ShippingServiceCodeType = "CA_PostInternationalParcelAir"

	//
	// Small Packets - International
	//
	ShippingServiceCodeTypeCA_SmallPacketsInternational ShippingServiceCodeType = "CA_SmallPacketsInternational"

	//
	// Purolator International
	//
	ShippingServiceCodeTypeCA_PurolatorInternational ShippingServiceCodeType = "CA_PurolatorInternational"

	//
	// Canada Post Small Packets - USA - Ground
	//
	ShippingServiceCodeTypeCA_PostSmallPacketsUSAGround ShippingServiceCodeType = "CA_PostSmallPacketsUSAGround"

	//
	// Canada Post Small Packets - USA - Air
	//
	ShippingServiceCodeTypeCA_PostSmallPacketsUSAAir ShippingServiceCodeType = "CA_PostSmallPacketsUSAAir"

	//
	// Small Packets - International - Ground
	//
	ShippingServiceCodeTypeCA_SmallPacketsInternationalGround ShippingServiceCodeType = "CA_SmallPacketsInternationalGround"

	//
	// Small Packets - International - Air
	//
	ShippingServiceCodeTypeCA_SmallPacketsInternationalAir ShippingServiceCodeType = "CA_SmallPacketsInternationalAir"

	//
	// Canada Post USA Letter-post
	//
	ShippingServiceCodeTypeCA_PostUSALetterPost ShippingServiceCodeType = "CA_PostUSALetterPost"

	//
	// Canada Post International Letter-post
	//
	ShippingServiceCodeTypeCA_PostInternationalLetterPost ShippingServiceCodeType = "CA_PostInternationalLetterPost"

	//
	//
	// (This value is no longer used.)
	//
	ShippingServiceCodeTypeCA_PostExpeditedFlatRateBoxUSA ShippingServiceCodeType = "CA_PostExpeditedFlatRateBoxUSA"

	//
	// UPS Express Canada
	//
	ShippingServiceCodeTypeCA_UPSExpressCanada ShippingServiceCodeType = "CA_UPSExpressCanada"

	//
	// UPS Express Saver Canada
	//
	ShippingServiceCodeTypeCA_UPSExpressSaverCanada ShippingServiceCodeType = "CA_UPSExpressSaverCanada"

	//
	// UPS Expedited Canada
	//
	ShippingServiceCodeTypeCA_UPSExpeditedCanada ShippingServiceCodeType = "CA_UPSExpeditedCanada"

	//
	// UPS Standard Canada
	//
	ShippingServiceCodeTypeCA_UPSStandardCanada ShippingServiceCodeType = "CA_UPSStandardCanada"

	//
	// UPS Express United States
	//
	ShippingServiceCodeTypeCA_UPSExpressUnitedStates ShippingServiceCodeType = "CA_UPSExpressUnitedStates"

	//
	// UPS Expedited United States
	//
	ShippingServiceCodeTypeCA_UPSExpeditedUnitedStates ShippingServiceCodeType = "CA_UPSExpeditedUnitedStates"

	//
	// UPS 3 Day Select United States
	//
	ShippingServiceCodeTypeCA_UPS3DaySelectUnitedStates ShippingServiceCodeType = "CA_UPS3DaySelectUnitedStates"

	//
	// UPS Standard United States
	//
	ShippingServiceCodeTypeCA_UPSStandardUnitedStates ShippingServiceCodeType = "CA_UPSStandardUnitedStates"

	//
	// UPS Worldwide Express
	//
	ShippingServiceCodeTypeCA_UPSWorldWideExpress ShippingServiceCodeType = "CA_UPSWorldWideExpress"

	//
	// UPS Worldwide Expedited
	//
	ShippingServiceCodeTypeCA_UPSWorldWideExpedited ShippingServiceCodeType = "CA_UPSWorldWideExpedited"

	//
	// Canada Post Priority Worldwide
	//
	ShippingServiceCodeTypeCA_PriorityWorldwide ShippingServiceCodeType = "CA_PriorityWorldwide"

	//
	// Canada Post Expedited Flat Rate Box USA
	//
	ShippingServiceCodeTypeCanadaPostExpeditedFlatRateBoxUSA ShippingServiceCodeType = "CanadaPostExpeditedFlatRateBoxUSA"

	//
	// Canada Post Tracked Packet - USA
	//
	ShippingServiceCodeTypeCA_PostTrackedPacketsUSA ShippingServiceCodeType = "CA_PostTrackedPacketsUSA"

	//
	// Canada Post Tracked Packet - International
	//
	ShippingServiceCodeTypeCA_PostTrackedPacketsInternational ShippingServiceCodeType = "CA_PostTrackedPacketsInternational"

	//
	// Freight
	//
	ShippingServiceCodeTypeCA_Freight ShippingServiceCodeType = "CA_Freight"

	//
	// Standardversand (A-Post/Priority)
	//
	ShippingServiceCodeTypeCH_StandardDispatchAPost ShippingServiceCodeType = "CH_StandardDispatchAPost"

	//
	// Standardversand (B-Post/Economy)
	//
	ShippingServiceCodeTypeCH_StandardDispatchBPost ShippingServiceCodeType = "CH_StandardDispatchBPost"

	//
	// Versicherter Versand (z.B. Assurance/Fragile)
	//
	ShippingServiceCodeTypeCH_InsuredDispatch ShippingServiceCodeType = "CH_InsuredDispatch"

	//
	// Einschreiben (Versand inkl. Einschreibengebuhr)
	//
	ShippingServiceCodeTypeCH_Writing ShippingServiceCodeType = "CH_Writing"

	//
	// Nachnahme (Versand inkl. Nachnahmegebuhr)
	//
	ShippingServiceCodeTypeCH_COD ShippingServiceCodeType = "CH_COD"

	//
	// Express- oder Kurierversand
	//
	ShippingServiceCodeTypeCH_ExpressOrCourier ShippingServiceCodeType = "CH_ExpressOrCourier"

	//
	// Versicherter Express- oder Kurierversand
	//
	ShippingServiceCodeTypeCH_InsuredExpressOrCourier ShippingServiceCodeType = "CH_InsuredExpressOrCourier"

	//
	// Sonder-/Speditionsversand (z.B. Mobel, KFZ)
	//
	ShippingServiceCodeTypeCH_SpecialDispatch ShippingServiceCodeType = "CH_SpecialDispatch"

	//
	// Versicherter Sonder-/Speditionsversand (z.B. Mobel, KFZ)
	//
	ShippingServiceCodeTypeCH_InsuredSpecialDispatch ShippingServiceCodeType = "CH_InsuredSpecialDispatch"

	//
	// Sonstige (Siehe Artikelbeschreibung)
	//
	ShippingServiceCodeTypeCH_Sonstige ShippingServiceCodeType = "CH_Sonstige"

	//
	// Sonstiger Versand (Siehe Artikelbeschreibung)
	//
	ShippingServiceCodeTypeCH_SonstigerVersandInternational ShippingServiceCodeType = "CH_SonstigerVersandInternational"

	//
	// ECONOMY Sendungen
	//
	ShippingServiceCodeTypeCH_EconomySendungenInternational ShippingServiceCodeType = "CH_EconomySendungenInternational"

	//
	// PRIORITY Sendungen
	//
	ShippingServiceCodeTypeCH_PrioritySendungenInternational ShippingServiceCodeType = "CH_PrioritySendungenInternational"

	//
	// URGENT Sendungen
	//
	ShippingServiceCodeTypeCH_UrgentSendungenInternational ShippingServiceCodeType = "CH_UrgentSendungenInternational"

	//
	// Sparversand aus dem Ausland
	//
	ShippingServiceCodeTypeCH_EconomyDeliveryFromAbroad ShippingServiceCodeType = "CH_EconomyDeliveryFromAbroad"

	//
	// Standardversand aus dem Ausland
	//
	ShippingServiceCodeTypeCH_StandardDeliveryFromAbroad ShippingServiceCodeType = "CH_StandardDeliveryFromAbroad"

	//
	// Expressversand aus dem Ausland
	//
	ShippingServiceCodeTypeCH_ExpressDeliveryFromAbroad ShippingServiceCodeType = "CH_ExpressDeliveryFromAbroad"

	//
	// Versand mit Nachverfolgung aus dem Ausland
	//
	ShippingServiceCodeTypeCH_TrackedDeliveryFromAbroad ShippingServiceCodeType = "CH_TrackedDeliveryFromAbroad"

	//
	// Seller door delivery (limited to the city)
	//
	ShippingServiceCodeTypeCN_PersonalDelivery ShippingServiceCodeType = "CN_PersonalDelivery"

	//
	// China Post Post Office
	//
	ShippingServiceCodeTypeCN_RegularPackage ShippingServiceCodeType = "CN_RegularPackage"

	//
	// Logistics company express
	//
	ShippingServiceCodeTypeCN_DeliveryCompanyExpress ShippingServiceCodeType = "CN_DeliveryCompanyExpress"

	//
	// EMS Express
	//
	ShippingServiceCodeTypeCN_PostOfficeExpress ShippingServiceCodeType = "CN_PostOfficeExpress"

	//
	// Other (see item description)
	//
	ShippingServiceCodeTypeCN_Others ShippingServiceCodeType = "CN_Others"

	//
	// China Post Express Mail
	//
	ShippingServiceCodeTypeCN_FastPostOffice ShippingServiceCodeType = "CN_FastPostOffice"

	//
	// City Express
	//
	ShippingServiceCodeTypeCN_ExpressDeliverySameCity ShippingServiceCodeType = "CN_ExpressDeliverySameCity"

	//
	// Off-site delivery
	//
	ShippingServiceCodeTypeCN_ExpressDeliveryOtherCities ShippingServiceCodeType = "CN_ExpressDeliveryOtherCities"

	//
	// International Standard Fixed Freight
	//
	ShippingServiceCodeTypeCN_StandardInternational ShippingServiceCodeType = "CN_StandardInternational"

	//
	// International courier fixed freight
	//
	ShippingServiceCodeTypeCN_ExpeditedInternational ShippingServiceCodeType = "CN_ExpeditedInternational"

	//
	// Other international shipping charges (see note)
	//
	ShippingServiceCodeTypeCN_OtherInternational ShippingServiceCodeType = "CN_OtherInternational"

	//
	// COD (same city only)
	//
	ShippingServiceCodeTypeCN_CODInternational ShippingServiceCodeType = "CN_CODInternational"

	//
	// Standard Mailing
	//
	ShippingServiceCodeTypeCN_StandardMailingInternational ShippingServiceCodeType = "CN_StandardMailingInternational"

	//
	// Regular logistics
	//
	ShippingServiceCodeTypeCN_RegularLogisticsInternational ShippingServiceCodeType = "CN_RegularLogisticsInternational"

	//
	// EMS
	//
	ShippingServiceCodeTypeCN_EMSInternational ShippingServiceCodeType = "CN_EMSInternational"

	//
	// Others (see description)
	//
	ShippingServiceCodeTypeCN_OthersInternational ShippingServiceCodeType = "CN_OthersInternational"

	//
	// Unversicherter Versand
	//
	ShippingServiceCodeTypeDE_StandardDispatch ShippingServiceCodeType = "DE_StandardDispatch"

	//
	// Versicherter Versand
	//
	ShippingServiceCodeTypeDE_InsuredDispatch ShippingServiceCodeType = "DE_InsuredDispatch"

	//
	// Einschreiben (Versand inkl. Einschreibengebuhr)
	//
	ShippingServiceCodeTypeDE_Writing ShippingServiceCodeType = "DE_Writing"

	//
	// Nachnahme (Versand inkl. Nachnahmegebuhr)
	//
	ShippingServiceCodeTypeDE_COD ShippingServiceCodeType = "DE_COD"

	//
	// Express- oder Kurierversand
	//
	ShippingServiceCodeTypeDE_ExpressOrCourier ShippingServiceCodeType = "DE_ExpressOrCourier"

	//
	// Versicherter Express- oder Kurierversand
	//
	ShippingServiceCodeTypeDE_InsuredExpressOrCourier ShippingServiceCodeType = "DE_InsuredExpressOrCourier"

	//
	// Sonderversand (z.B. Mobel, KFZ)DE_DHLPackchen
	//
	ShippingServiceCodeTypeDE_SpecialDispatch ShippingServiceCodeType = "DE_SpecialDispatch"

	//
	// Versicherter Sonderversand (z.B. Mobel, KFZ)
	//
	ShippingServiceCodeTypeDE_InsuredSpecialDispatch ShippingServiceCodeType = "DE_InsuredSpecialDispatch"

	//
	// Unversicherter Versand
	//
	ShippingServiceCodeTypeDE_UnversicherterVersand ShippingServiceCodeType = "DE_UnversicherterVersand"

	//
	// Deutsche Post Brief
	//
	ShippingServiceCodeTypeDE_DeutschePostBrief ShippingServiceCodeType = "DE_DeutschePostBrief"

	//
	// eBay DHL Paket 24/7 (Abgabe und Lieferung an Packstation)
	//
	ShippingServiceCodeTypeDE_eBayDHLPaket24x7 ShippingServiceCodeType = "DE_eBayDHLPaket24x7"

	//
	// DHL Postpaket
	//
	ShippingServiceCodeTypeDE_DHLPostpaket ShippingServiceCodeType = "DE_DHLPostpaket"

	//
	// DHL Packchen International
	//
	ShippingServiceCodeTypeDE_DHLPackchen ShippingServiceCodeType = "DE_DHLPackchen"

	//
	// Deutsche Post Warensendung
	//
	ShippingServiceCodeTypeDE_DeutschePostWarensendung ShippingServiceCodeType = "DE_DeutschePostWarensendung"

	//
	// Deutsche Post Buchersendung
	//
	ShippingServiceCodeTypeDE_DeutschePostBuchersendung ShippingServiceCodeType = "DE_DeutschePostBuchersendung"

	//
	// Hermes Paket (unversichert)
	//
	ShippingServiceCodeTypeDE_HermesPaketUnversichert ShippingServiceCodeType = "DE_HermesPaketUnversichert"

	//
	// Hermes Paket (versichert)
	//
	ShippingServiceCodeTypeDE_HermesPaketVersichert ShippingServiceCodeType = "DE_HermesPaketVersichert"

	//
	// iloxx Transport XXL
	//
	ShippingServiceCodeTypeDE_IloxxTransportXXL ShippingServiceCodeType = "DE_IloxxTransportXXL"

	//
	// iloxx Express
	//
	ShippingServiceCodeTypeDE_IloxxUbernachtExpress ShippingServiceCodeType = "DE_IloxxUbernachtExpress"

	//
	// iloxx Standard
	//
	ShippingServiceCodeTypeDE_IloxxStandard ShippingServiceCodeType = "DE_IloxxStandard"

	//
	// Sonstige (Siehe Artikelbeschreibung)
	//
	ShippingServiceCodeTypeDE_Sonstige ShippingServiceCodeType = "DE_Sonstige"

	//
	// Unversicherter Versand
	//
	ShippingServiceCodeTypeDE_UnversicherterVersandInternational ShippingServiceCodeType = "DE_UnversicherterVersandInternational"

	//
	// Versicherter Versand
	//
	ShippingServiceCodeTypeDE_VersicherterVersandInternational ShippingServiceCodeType = "DE_VersicherterVersandInternational"

	//
	// DHL Postpaket International
	//
	ShippingServiceCodeTypeDE_DHLPostpaketInternational ShippingServiceCodeType = "DE_DHLPostpaketInternational"

	//
	// DHL Packchen International
	//
	ShippingServiceCodeTypeDE_DHLPackchenInternational ShippingServiceCodeType = "DE_DHLPackchenInternational"

	//
	// Sonstiger Versand (Siehe Artikelbeschreibung)
	//
	ShippingServiceCodeTypeDE_SonstigerVersandInternational ShippingServiceCodeType = "DE_SonstigerVersandInternational"

	//
	// Unversicherter Express - Versand
	//
	ShippingServiceCodeTypeDE_UnversicherterExpressVersandInternational ShippingServiceCodeType = "DE_UnversicherterExpressVersandInternational"

	//
	// Versicherter Express - Versand
	//
	ShippingServiceCodeTypeDE_VersicherterExpressVersandInternational ShippingServiceCodeType = "DE_VersicherterExpressVersandInternational"

	//
	// Deutsche Post Brief (Land)
	//
	ShippingServiceCodeTypeDE_DeutschePostBriefLandInternational ShippingServiceCodeType = "DE_DeutschePostBriefLandInternational"

	//
	// Deutsche Post Brief (Luft)
	//
	ShippingServiceCodeTypeDE_DeutschePostBriefLuftInternational ShippingServiceCodeType = "DE_DeutschePostBriefLuftInternational"

	//
	// iloxx Europa
	//
	ShippingServiceCodeTypeDE_IloxxEuropaInternational ShippingServiceCodeType = "DE_IloxxEuropaInternational"

	//
	// iloxx World Wide
	//
	ShippingServiceCodeTypeDE_IloxxWorldWideInternational ShippingServiceCodeType = "DE_IloxxWorldWideInternational"

	// Paketversand
	ShippingServiceCodeTypeDE_Paket ShippingServiceCodeType = "DE_Paket"

	// Expressversand
	ShippingServiceCodeTypeDE_Express ShippingServiceCodeType = "DE_Express"

	// DHL Paket
	ShippingServiceCodeTypeDE_DHLPaket ShippingServiceCodeType = "DE_DHLPaket"

	// Deutsche Post Buecher-/Warensendung
	ShippingServiceCodeTypeDE_DPBuecherWarensendung ShippingServiceCodeType = "DE_DPBuecherWarensendung"

	// Hermes Paket
	ShippingServiceCodeTypeDE_HermesPaket ShippingServiceCodeType = "DE_HermesPaket"

	// iloxx Transport
	ShippingServiceCodeTypeDE_IloxxTransport ShippingServiceCodeType = "DE_IloxxTransport"

	// Sonstige
	ShippingServiceCodeTypeDE_SonstigeDomestic ShippingServiceCodeType = "DE_SonstigeDomestic"

	// Einschreiben (inkl. aller Gebuehren)
	ShippingServiceCodeTypeDE_Einschreiben ShippingServiceCodeType = "DE_Einschreiben"

	// Nachnahme (inkl. aller Gebuehren)
	ShippingServiceCodeTypeDE_Nachname ShippingServiceCodeType = "DE_Nachname"

	// Sonderversand
	ShippingServiceCodeTypeDE_SpecialDelivery ShippingServiceCodeType = "DE_SpecialDelivery"

	// UPS
	ShippingServiceCodeTypeDE_UPS ShippingServiceCodeType = "DE_UPS"

	// DPD
	ShippingServiceCodeTypeDE_DPD ShippingServiceCodeType = "DE_DPD"

	// GLS
	ShippingServiceCodeTypeDE_GLS ShippingServiceCodeType = "DE_GLS"

	// Paketversand
	ShippingServiceCodeTypeDE_PaketInternational ShippingServiceCodeType = "DE_PaketInternational"

	// DHL Paket International
	ShippingServiceCodeTypeDE_DHLPaketInternational ShippingServiceCodeType = "DE_DHLPaketInternational"

	// DHL Paket International Express
	ShippingServiceCodeTypeDE_DHLPaketIntlExpress ShippingServiceCodeType = "DE_DHLPaketIntlExpress"

	// Sonstige
	ShippingServiceCodeTypeDE_SonstigeInternational ShippingServiceCodeType = "DE_SonstigeInternational"

	// Expressversand
	ShippingServiceCodeTypeDE_ExpressInternational ShippingServiceCodeType = "DE_ExpressInternational"

	// Deutsche Post Brief
	ShippingServiceCodeTypeDE_DPBriefInternational ShippingServiceCodeType = "DE_DPBriefInternational"

	// iloxx Transport International
	ShippingServiceCodeTypeDE_IloxxTransportInternational ShippingServiceCodeType = "DE_IloxxTransportInternational"

	// Hermes Paket International
	ShippingServiceCodeTypeDE_HermesPaketInternational ShippingServiceCodeType = "DE_HermesPaketInternational"

	// UPS International
	ShippingServiceCodeTypeDE_UPSInternational ShippingServiceCodeType = "DE_UPSInternational"

	// DPD International
	ShippingServiceCodeTypeDE_DPDInternational ShippingServiceCodeType = "DE_DPDInternational"

	// GLS International
	ShippingServiceCodeTypeDE_GLSInternational ShippingServiceCodeType = "DE_GLSInternational"

	//
	// eBay Hermes Paket Shop2Shop (Kaeufer erhaelt E-Mail von Hermes bei Zustellung)
	//
	ShippingServiceCodeTypeDE_eBayHermesPaketShop2ShopKaeufer ShippingServiceCodeType = "DE_eBayHermesPaketShop2ShopKaeufer"

	//
	// Hermes Paket Shop2Shop (Kaeufer erhaelt E-Mail von Hermes bei Zustellung)
	//
	ShippingServiceCodeTypeDE_HermesPaketShop2ShopKaeufer ShippingServiceCodeType = "DE_HermesPaketShop2ShopKaeufer"

	//
	// eBay Hermes Paket Shop2Shop
	//
	ShippingServiceCodeTypeDE_eBayHermesPaketShop2Shop ShippingServiceCodeType = "DE_eBayHermesPaketShop2Shop"

	//
	// Hermes Paket Shop2Shop
	//
	ShippingServiceCodeTypeDE_HermesPaketShop2Shop ShippingServiceCodeType = "DE_HermesPaketShop2Shop"

	//
	// Hermes Paket Sperrgut
	//
	ShippingServiceCodeTypeDE_HermesPaketSperrgut ShippingServiceCodeType = "DE_HermesPaketSperrgut"

	//
	// eBay Hermes Paket Sperrgut Shop2Shop (Abgabe und Zustellung im Paketshop)
	//
	ShippingServiceCodeTypeDE_eBayHermesPaketSperrgutShop2Shop ShippingServiceCodeType = "DE_eBayHermesPaketSperrgutShop2Shop"

	//
	// DHL Paeckchen Packstation
	//
	ShippingServiceCodeTypeDE_DHLPaeckchenPackstation ShippingServiceCodeType = "DE_DHLPaeckchenPackstation"

	//
	// DHL Paket Packstation
	//
	ShippingServiceCodeTypeDE_DHLPaketPackstation ShippingServiceCodeType = "DE_DHLPaketPackstation"

	//
	// eBay DHL Paeckchen
	//
	ShippingServiceCodeTypeDE_eBayDHLPaeckchen ShippingServiceCodeType = "DE_eBayDHLPaeckchen"

	//
	// DHL Star-Paeckchen
	//
	ShippingServiceCodeTypeDE_DHLStarPaeckchen ShippingServiceCodeType = "DE_DHLStarPaeckchen"

	//
	// Versand mit Nachverfolgung aus dem Ausland
	//
	ShippingServiceCodeTypeDE_TrackedDeliveryFromAbroad ShippingServiceCodeType = "DE_TrackedDeliveryFromAbroad"

	//
	// Cartas nacionales hasta 20 gr
	//
	ShippingServiceCodeTypeES_CartasNacionalesHasta20 ShippingServiceCodeType = "ES_CartasNacionalesHasta20"

	//
	// Correos: cartas ordinarias
	//
	ShippingServiceCodeTypeES_CartasNacionalesDeMas20 ShippingServiceCodeType = "ES_CartasNacionalesDeMas20"

	//
	// Cartas internacionales hasta 20 gr
	//
	ShippingServiceCodeTypeES_CartasInternacionalesHasta20 ShippingServiceCodeType = "ES_CartasInternacionalesHasta20"

	//
	// Cartas internacionales de mas de 20 gr
	//
	ShippingServiceCodeTypeES_CartasInternacionalesDeMas20 ShippingServiceCodeType = "ES_CartasInternacionalesDeMas20"

	//
	// Paquete Azul (nacional) hasta 2 kg
	//
	ShippingServiceCodeTypeES_PaqueteAzulHasta2kg ShippingServiceCodeType = "ES_PaqueteAzulHasta2kg"

	//
	// Correos: Postal Expres
	//
	ShippingServiceCodeTypeES_PaqueteAzulDeMas2kg ShippingServiceCodeType = "ES_PaqueteAzulDeMas2kg"

	//
	// Paquete Internacional Economico
	//
	ShippingServiceCodeTypeES_PaqueteInternacionalEconomico ShippingServiceCodeType = "ES_PaqueteInternacionalEconomico"

	//
	// Otro courier 24 horas
	//
	ShippingServiceCodeTypeES_Urgente ShippingServiceCodeType = "ES_Urgente"

	//
	// Otros (ver descripcion)
	//
	ShippingServiceCodeTypeES_Otros ShippingServiceCodeType = "ES_Otros"

	//
	// Envio internacional estandar
	//
	ShippingServiceCodeTypeES_StandardInternational ShippingServiceCodeType = "ES_StandardInternational"

	//
	// Envio internacional urgente
	//
	ShippingServiceCodeTypeES_ExpeditedInternational ShippingServiceCodeType = "ES_ExpeditedInternational"

	//
	// Envio internacional economico
	//
	ShippingServiceCodeTypeES_OtherInternational ShippingServiceCodeType = "ES_OtherInternational"

	//
	// Cartas y tarjetas postales internacionales
	//
	ShippingServiceCodeTypeES_CartasPostalInternational ShippingServiceCodeType = "ES_CartasPostalInternational"

	//
	// Ems postal expres internacional
	//
	ShippingServiceCodeTypeES_EmsPostalExpressInternational ShippingServiceCodeType = "ES_EmsPostalExpressInternational"

	//
	// Paquete internacional economico
	//
	ShippingServiceCodeTypeES_EconomyPacketInternational ShippingServiceCodeType = "ES_EconomyPacketInternational"

	//
	// Envio economico desde el extranjero
	//
	ShippingServiceCodeTypeES_EconomyDeliveryFromAbroad ShippingServiceCodeType = "ES_EconomyDeliveryFromAbroad"

	//
	// Envio estandar desde el extranjero
	//
	ShippingServiceCodeTypeES_StandardDeliveryFromAbroad ShippingServiceCodeType = "ES_StandardDeliveryFromAbroad"

	//
	// Envio urgente desde el extranjero
	//
	ShippingServiceCodeTypeES_ExpressDeliveryFromAbroad ShippingServiceCodeType = "ES_ExpressDeliveryFromAbroad"

	//
	// Envio desde el extranjero con seguimiento
	//
	ShippingServiceCodeTypeES_TrackedDeliveryFromAbroad ShippingServiceCodeType = "ES_TrackedDeliveryFromAbroad"

	//
	// Entrega a un Kiala point hasta 8 kg
	//
	ShippingServiceCodeTypeES_ENTREGA_KIALA_8KG ShippingServiceCodeType = "ES_ENTREGA_KIALA_8KG"

	//
	// Chronoposte International Classic
	//
	ShippingServiceCodeTypeFR_ChronoposteInternationalClassic ShippingServiceCodeType = "FR_ChronoposteInternationalClassic"

	//
	// Coliposte Colissimo Direct
	//
	ShippingServiceCodeTypeFR_ColiposteColissimoDirect ShippingServiceCodeType = "FR_ColiposteColissimoDirect"

	//
	// DHL Express Europack
	//
	ShippingServiceCodeTypeFR_DHLExpressEuropack ShippingServiceCodeType = "FR_DHLExpressEuropack"

	//
	// UPS Standard
	//
	ShippingServiceCodeTypeFR_UPSStandard ShippingServiceCodeType = "FR_UPSStandard"

	//
	// Lettre
	//
	ShippingServiceCodeTypeFR_PostOfficeLetter ShippingServiceCodeType = "FR_PostOfficeLetter"

	//
	// Lettre avec suivi
	//
	ShippingServiceCodeTypeFR_PostOfficeLetterFollowed ShippingServiceCodeType = "FR_PostOfficeLetterFollowed"

	//
	// Lettre recommandee
	//
	ShippingServiceCodeTypeFR_PostOfficeLetterRecommended ShippingServiceCodeType = "FR_PostOfficeLetterRecommended"

	//
	// Colissimo
	//
	ShippingServiceCodeTypeFR_ColiposteColissimo ShippingServiceCodeType = "FR_ColiposteColissimo"

	//
	// Colissimo Recommande
	//
	ShippingServiceCodeTypeFR_ColiposteColissimoRecommended ShippingServiceCodeType = "FR_ColiposteColissimoRecommended"

	//
	// Contre remboursement
	//
	ShippingServiceCodeTypeFR_UPSStandardAgainstRefund ShippingServiceCodeType = "FR_UPSStandardAgainstRefund"

	//
	// Autre mode d'envoi de courrier
	//
	ShippingServiceCodeTypeFR_Autre ShippingServiceCodeType = "FR_Autre"

	//
	// Ecopli
	//
	ShippingServiceCodeTypeFR_Ecopli ShippingServiceCodeType = "FR_Ecopli"

	//
	// Colieco
	//
	ShippingServiceCodeTypeFR_Colieco ShippingServiceCodeType = "FR_Colieco"

	//
	// Autre mode d'envoi de colis
	//
	ShippingServiceCodeTypeFR_AuteModeDenvoiDeColis ShippingServiceCodeType = "FR_AuteModeDenvoiDeColis"

	//
	// Remise en main propre
	//
	ShippingServiceCodeTypeFR_RemiseEnMainPropre ShippingServiceCodeType = "FR_RemiseEnMainPropre"

	//
	// Autre livraison internationale standard
	//
	ShippingServiceCodeTypeFR_StandardInternational ShippingServiceCodeType = "FR_StandardInternational"

	//
	// Autre livraison internationale express
	//
	ShippingServiceCodeTypeFR_ExpeditedInternational ShippingServiceCodeType = "FR_ExpeditedInternational"

	//
	// Autre livraison internationale economique
	//
	ShippingServiceCodeTypeFR_OtherInternational ShippingServiceCodeType = "FR_OtherInternational"

	//
	// La Poste - Courrier International Prioritaire
	//
	ShippingServiceCodeTypeFR_LaPosteInternationalPriorityCourier ShippingServiceCodeType = "FR_LaPosteInternationalPriorityCourier"

	//
	// La Poste - Courrier International Economique
	//
	ShippingServiceCodeTypeFR_LaPosteInternationalEconomyCourier ShippingServiceCodeType = "FR_LaPosteInternationalEconomyCourier"

	//
	// La Poste - Colissimo International
	//
	ShippingServiceCodeTypeFR_LaPosteColissimoInternational ShippingServiceCodeType = "FR_LaPosteColissimoInternational"

	//
	// La Poste - Colis Economique International
	//
	ShippingServiceCodeTypeFR_LaPosteColisEconomiqueInternational ShippingServiceCodeType = "FR_LaPosteColisEconomiqueInternational"

	//
	// La Poste - Colissimo Emballage International
	//
	ShippingServiceCodeTypeFR_LaPosteColissimoEmballageInternational ShippingServiceCodeType = "FR_LaPosteColissimoEmballageInternational"

	//
	// Chronopost Classic International
	//
	ShippingServiceCodeTypeFR_ChronopostClassicInternational ShippingServiceCodeType = "FR_ChronopostClassicInternational"

	//
	// Chronopost Premium International
	//
	ShippingServiceCodeTypeFR_ChronopostPremiumInternational ShippingServiceCodeType = "FR_ChronopostPremiumInternational"

	//
	// UPS Standard
	//
	ShippingServiceCodeTypeFR_UPSStandardInternational ShippingServiceCodeType = "FR_UPSStandardInternational"

	//
	// UPS Express
	//
	ShippingServiceCodeTypeFR_UPSExpressInternational ShippingServiceCodeType = "FR_UPSExpressInternational"

	//
	// DHL
	//
	ShippingServiceCodeTypeFR_DHLInternational ShippingServiceCodeType = "FR_DHLInternational"

	//
	// La Poste Lettre Max
	//
	ShippingServiceCodeTypeFR_LaPosteLetterMax ShippingServiceCodeType = "FR_LaPosteLetterMax"

	//
	// Livraison en Relais Kiala
	//
	ShippingServiceCodeTypeFR_KIALA_DELIVERY ShippingServiceCodeType = "FR_KIALA_DELIVERY"

	//
	// Livraison a partir de l'etranger avec suivi de commande
	//
	ShippingServiceCodeTypeFR_TrackedDeliveryFromAbroad ShippingServiceCodeType = "FR_TrackedDeliveryFromAbroad"

	//
	// National - Regular
	//
	ShippingServiceCodeTypeIN_Regular ShippingServiceCodeType = "IN_Regular"

	//
	// National - Express
	//
	ShippingServiceCodeTypeIN_Express ShippingServiceCodeType = "IN_Express"

	//
	// National - COD
	//
	ShippingServiceCodeTypeIN_NationalCOD ShippingServiceCodeType = "IN_NationalCOD"

	//
	// Local - Courier
	//
	ShippingServiceCodeTypeIN_Courier ShippingServiceCodeType = "IN_Courier"

	//
	// Local - COD
	//
	ShippingServiceCodeTypeIN_LocalCOD ShippingServiceCodeType = "IN_LocalCOD"

	//
	// International - Standard
	//
	ShippingServiceCodeTypeIN_StandardInternational ShippingServiceCodeType = "IN_StandardInternational"

	//
	// International - Expedited
	//
	ShippingServiceCodeTypeIN_ExpeditedInternational ShippingServiceCodeType = "IN_ExpeditedInternational"

	//
	// International - other
	//
	ShippingServiceCodeTypeIN_OtherInternational ShippingServiceCodeType = "IN_OtherInternational"

	//
	// Flat Rate COD
	//
	ShippingServiceCodeTypeIN_FlatRateCOD ShippingServiceCodeType = "IN_FlatRateCOD"

	//
	// Buyer picks up and pays
	//
	ShippingServiceCodeTypeIN_BuyerPicksUpAndPays ShippingServiceCodeType = "IN_BuyerPicksUpAndPays"

	//
	// Posta ordinaria
	//
	ShippingServiceCodeTypeIT_RegularMail ShippingServiceCodeType = "IT_RegularMail"

	//
	// Posta prioritaria
	//
	ShippingServiceCodeTypeIT_PriorityMail ShippingServiceCodeType = "IT_PriorityMail"

	//
	// Posta raccomandata
	//
	ShippingServiceCodeTypeIT_MailRegisteredLetter ShippingServiceCodeType = "IT_MailRegisteredLetter"

	//
	// Posta raccomandata con contrassegno
	//
	ShippingServiceCodeTypeIT_MailRegisteredLetterWithMark ShippingServiceCodeType = "IT_MailRegisteredLetterWithMark"

	//
	// Posta assicurata
	//
	ShippingServiceCodeTypeIT_InsuredMail ShippingServiceCodeType = "IT_InsuredMail"

	//
	// Posta celere
	//
	ShippingServiceCodeTypeIT_QuickMail ShippingServiceCodeType = "IT_QuickMail"

	//
	// Pacco ordinario
	//
	ShippingServiceCodeTypeIT_RegularPackage ShippingServiceCodeType = "IT_RegularPackage"

	//
	// Pacco celere 1
	//
	ShippingServiceCodeTypeIT_QuickPackage1 ShippingServiceCodeType = "IT_QuickPackage1"

	//
	// Pacco celere 3
	//
	ShippingServiceCodeTypeIT_QuickPackage3 ShippingServiceCodeType = "IT_QuickPackage3"

	//
	// Corriere espresso
	//
	ShippingServiceCodeTypeIT_ExpressCourier ShippingServiceCodeType = "IT_ExpressCourier"

	//
	// Paccocelere Maxi
	//
	ShippingServiceCodeTypeIT_ExpressPackageMaxi ShippingServiceCodeType = "IT_ExpressPackageMaxi"

	//
	// Spedizione internazionale standard a prezzo fisso
	//
	ShippingServiceCodeTypeIT_StandardInternational ShippingServiceCodeType = "IT_StandardInternational"

	//
	// Spedizione internazionale celere a prezzo fisso
	//
	ShippingServiceCodeTypeIT_ExpeditedInternational ShippingServiceCodeType = "IT_ExpeditedInternational"

	//
	// Altre spedizioni internazionali (vedi descrizione)
	//
	ShippingServiceCodeTypeIT_OtherInternational ShippingServiceCodeType = "IT_OtherInternational"

	//
	// Spedizione tracciata dall estero
	//
	ShippingServiceCodeTypeIT_TrackedDeliveryFromAbroad ShippingServiceCodeType = "IT_TrackedDeliveryFromAbroad"

	//
	// Standaardverzending
	//
	ShippingServiceCodeTypeNL_StandardDelivery ShippingServiceCodeType = "NL_StandardDelivery"

	//
	// Pakketpost
	//
	ShippingServiceCodeTypeNL_ParcelPost ShippingServiceCodeType = "NL_ParcelPost"

	//
	// Verzending met ontvangstbevestiging
	//
	ShippingServiceCodeTypeNL_RegisteredMail ShippingServiceCodeType = "NL_RegisteredMail"

	//
	// Andere verzendservice
	//
	ShippingServiceCodeTypeNL_Other ShippingServiceCodeType = "NL_Other"

	//
	// TPG Post/TNT
	//
	ShippingServiceCodeTypeNL_TPGPostTNTInternational ShippingServiceCodeType = "NL_TPGPostTNTInternational"

	//
	// UPS
	//
	ShippingServiceCodeTypeNL_UPSInternational ShippingServiceCodeType = "NL_UPSInternational"

	//
	// FedEx
	//
	ShippingServiceCodeTypeNL_FedExInternational ShippingServiceCodeType = "NL_FedExInternational"

	//
	// DHL
	//
	ShippingServiceCodeTypeNL_DHLInternational ShippingServiceCodeType = "NL_DHLInternational"

	//
	// DPD (Germany)
	//
	ShippingServiceCodeTypeNL_DPDGBRInternational ShippingServiceCodeType = "NL_DPDGBRInternational"

	//
	// GLS (Business only)
	//
	ShippingServiceCodeTypeNL_GLSBusinessInternational ShippingServiceCodeType = "NL_GLSBusinessInternational"

	//
	// Vaste kosten standaard internationale verzending
	//
	ShippingServiceCodeTypeNL_StandardInternational ShippingServiceCodeType = "NL_StandardInternational"

	//
	// Vaste kosten versnelde internationale verzending
	//
	ShippingServiceCodeTypeNL_ExpeditedInternational ShippingServiceCodeType = "NL_ExpeditedInternational"

	//
	// Andere internationale verzending (zie beschrijving)
	//
	ShippingServiceCodeTypeNL_OtherInternational ShippingServiceCodeType = "NL_OtherInternational"

	//
	// Voordelige verzending uit het buitenland
	//
	ShippingServiceCodeTypeNL_EconomyDeliveryFromAbroad ShippingServiceCodeType = "NL_EconomyDeliveryFromAbroad"

	//
	// Standaardverzending uit het buitenland
	//
	ShippingServiceCodeTypeNL_StandardDeliveryFromAbroad ShippingServiceCodeType = "NL_StandardDeliveryFromAbroad"

	//
	// Verzending per expresse uit het buitenland
	//
	ShippingServiceCodeTypeNL_ExpressDeliveryFromAbroad ShippingServiceCodeType = "NL_ExpressDeliveryFromAbroad"

	//
	// Verzending met internationale tracering uit het buitenland
	//
	ShippingServiceCodeTypeNL_TrackedDeliveryFromAbroad ShippingServiceCodeType = "NL_TrackedDeliveryFromAbroad"

	//
	// Post office plus registration
	//
	ShippingServiceCodeTypeTW_RegisteredMail ShippingServiceCodeType = "TW_RegisteredMail"

	//
	// Post office without registration
	//
	ShippingServiceCodeTypeTW_UnregisteredMail ShippingServiceCodeType = "TW_UnregisteredMail"

	//
	// Post office cash on delivery
	//
	ShippingServiceCodeTypeTW_COD ShippingServiceCodeType = "TW_COD"

	//
	// Home delivery
	//
	ShippingServiceCodeTypeTW_DwellingMatchPost ShippingServiceCodeType = "TW_DwellingMatchPost"

	//
	// Home delivery cash on delivery
	//
	ShippingServiceCodeTypeTW_DwellingMatchCOD ShippingServiceCodeType = "TW_DwellingMatchCOD"

	//
	// Face to face
	//
	ShippingServiceCodeTypeTW_SelfPickup ShippingServiceCodeType = "TW_SelfPickup"

	//
	// Freight delivery
	//
	ShippingServiceCodeTypeTW_ParcelPost ShippingServiceCodeType = "TW_ParcelPost"

	//
	// Express delivery
	//
	ShippingServiceCodeTypeTW_ExpressMail ShippingServiceCodeType = "TW_ExpressMail"

	//
	// Other
	//
	ShippingServiceCodeTypeTW_Other ShippingServiceCodeType = "TW_Other"

	//
	// Post Office Airbag
	//
	ShippingServiceCodeTypeTW_CPInternationalLetterPost ShippingServiceCodeType = "TW_CPInternationalLetterPost"

	//
	// Post office air parcel
	//
	ShippingServiceCodeTypeTW_CPInternationalParcelPost ShippingServiceCodeType = "TW_CPInternationalParcelPost"

	//
	// Post office aviation registered packet
	//
	ShippingServiceCodeTypeTW_CPInternationalRegisteredLetterPost ShippingServiceCodeType = "TW_CPInternationalRegisteredLetterPost"

	//
	// Post office aviation registration package
	//
	ShippingServiceCodeTypeTW_CPInternationalRegisteredParcelPost ShippingServiceCodeType = "TW_CPInternationalRegisteredParcelPost"

	//
	// Post Office International Express EMS
	//
	ShippingServiceCodeTypeTW_CPInternationalEMS ShippingServiceCodeType = "TW_CPInternationalEMS"

	//
	// Post office international land and water package
	//
	ShippingServiceCodeTypeTW_CPInternationalOceanShippingParcel ShippingServiceCodeType = "TW_CPInternationalOceanShippingParcel"

	//
	// FedEx International Priority
	//
	ShippingServiceCodeTypeTW_FedExInternationalPriority ShippingServiceCodeType = "TW_FedExInternationalPriority"

	//
	// FedEx International Economy
	//
	ShippingServiceCodeTypeTW_FedExInternationalEconomy ShippingServiceCodeType = "TW_FedExInternationalEconomy"

	//
	// UPS Worldwide Expedited
	//
	ShippingServiceCodeTypeTW_UPSWorldwideExpedited ShippingServiceCodeType = "TW_UPSWorldwideExpedited"

	//
	// UPS Worldwide Express
	//
	ShippingServiceCodeTypeTW_UPSWorldwideExpress ShippingServiceCodeType = "TW_UPSWorldwideExpress"

	//
	// UPS Worldwide Express Plus
	//
	ShippingServiceCodeTypeTW_UPSWorldwideExpressPlus ShippingServiceCodeType = "TW_UPSWorldwideExpressPlus"

	//
	// Other international shipping charges (see description)
	//
	ShippingServiceCodeTypeTW_OtherInternational ShippingServiceCodeType = "TW_OtherInternational"

	//
	// Royal Mail 1st Class
	//
	ShippingServiceCodeTypeUK_RoyalMailFirstClassStandard ShippingServiceCodeType = "UK_RoyalMailFirstClassStandard"

	//
	// Royal Mail 2nd Class
	//
	ShippingServiceCodeTypeUK_RoyalMailSecondClassStandard ShippingServiceCodeType = "UK_RoyalMailSecondClassStandard"

	//
	// Royal Mail 1st Class Signed For
	//
	ShippingServiceCodeTypeUK_RoyalMailFirstClassRecorded ShippingServiceCodeType = "UK_RoyalMailFirstClassRecorded"

	//
	// Royal Mail 2nd Class Signed For
	//
	ShippingServiceCodeTypeUK_RoyalMailSecondClassRecorded ShippingServiceCodeType = "UK_RoyalMailSecondClassRecorded"

	//
	// Royal Mail Special Delivery
	//
	ShippingServiceCodeTypeUK_RoyalMailSpecialDelivery ShippingServiceCodeType = "UK_RoyalMailSpecialDelivery"

	//
	//
	// (This value is no longer used.)
	//
	ShippingServiceCodeTypeUK_RoyalMailStandardParcel ShippingServiceCodeType = "UK_RoyalMailStandardParcel"

	//
	// Parcelforce 24
	//
	ShippingServiceCodeTypeUK_Parcelforce24 ShippingServiceCodeType = "UK_Parcelforce24"

	//
	// Parcelforce 48
	//
	ShippingServiceCodeTypeUK_Parcelforce48 ShippingServiceCodeType = "UK_Parcelforce48"

	//
	// Other Courier
	//
	ShippingServiceCodeTypeUK_OtherCourier ShippingServiceCodeType = "UK_OtherCourier"

	//
	// Hermes Tracked
	//
	ShippingServiceCodeTypeUK_myHermesDoorToDoorService ShippingServiceCodeType = "UK_myHermesDoorToDoorService"

	//
	// Collect+ : drop at store-delivery to door
	//
	ShippingServiceCodeTypeUK_CollectDropAtStoreDeliveryToDoor ShippingServiceCodeType = "UK_CollectDropAtStoreDeliveryToDoor"

	//
	// Seller's Standard Rate
	//
	ShippingServiceCodeTypeUK_SellersStandardRate ShippingServiceCodeType = "UK_SellersStandardRate"

	//
	// Collection in Person
	//
	ShippingServiceCodeTypeUK_CollectInPerson ShippingServiceCodeType = "UK_CollectInPerson"

	//
	// Sellers Standard International Rate
	//
	ShippingServiceCodeTypeUK_SellersStandardInternationalRate ShippingServiceCodeType = "UK_SellersStandardInternationalRate"

	//
	// Royal Mail Airmail
	//
	ShippingServiceCodeTypeUK_RoyalMailAirmailInternational ShippingServiceCodeType = "UK_RoyalMailAirmailInternational"

	//
	// Royal Mail Airsure
	//
	ShippingServiceCodeTypeUK_RoyalMailAirsureInternational ShippingServiceCodeType = "UK_RoyalMailAirsureInternational"

	//
	// Royal Mail Surface Mail
	//
	ShippingServiceCodeTypeUK_RoyalMailSurfaceMailInternational ShippingServiceCodeType = "UK_RoyalMailSurfaceMailInternational"

	//
	// Royal Mail International Signed-for
	//
	ShippingServiceCodeTypeUK_RoyalMailInternationalSignedFor ShippingServiceCodeType = "UK_RoyalMailInternationalSignedFor"

	//
	// Royal Mail HM Forces Mail
	//
	ShippingServiceCodeTypeUK_RoyalMailHMForcesMailInternational ShippingServiceCodeType = "UK_RoyalMailHMForcesMailInternational"

	//
	// Parcelforce International Datapost
	//
	ShippingServiceCodeTypeUK_ParcelForceInternationalDatapost ShippingServiceCodeType = "UK_ParcelForceInternationalDatapost"

	//
	// Parcelforce Ireland 24
	//
	ShippingServiceCodeTypeUK_ParcelForceIreland24International ShippingServiceCodeType = "UK_ParcelForceIreland24International"

	//
	// Parcelforce Euro 48
	//
	ShippingServiceCodeTypeUK_ParcelForceEuro48International ShippingServiceCodeType = "UK_ParcelForceEuro48International"

	//
	// Parcelforce International Scheduled
	//
	ShippingServiceCodeTypeUK_ParcelForceInternationalScheduled ShippingServiceCodeType = "UK_ParcelForceInternationalScheduled"

	//
	// Other courier or delivery service
	//
	ShippingServiceCodeTypeUK_OtherCourierOrDeliveryInternational ShippingServiceCodeType = "UK_OtherCourierOrDeliveryInternational"

	//
	// Collect in person
	//
	ShippingServiceCodeTypeUK_CollectInPersonInternational ShippingServiceCodeType = "UK_CollectInPersonInternational"

	//
	// Parcelforce Global Express
	//
	ShippingServiceCodeTypeUK_ParcelForceIntlExpress ShippingServiceCodeType = "UK_ParcelForceIntlExpress"

	//
	// Parcelforce Global Value
	//
	ShippingServiceCodeTypeUK_ParcelForceIntlValue ShippingServiceCodeType = "UK_ParcelForceIntlValue"

	//
	// Parcelforce Global Economy (Not available for destinations in Europe)
	//
	ShippingServiceCodeTypeUK_ParcelForceIntlEconomy ShippingServiceCodeType = "UK_ParcelForceIntlEconomy"

	//
	// Tracked delivery from outside abroad
	//
	ShippingServiceCodeTypeUK_TrackedDeliveryFromAbroad ShippingServiceCodeType = "UK_TrackedDeliveryFromAbroad"

	//
	// International tracked postage
	//
	ShippingServiceCodeTypeUK_IntlTrackedPostage ShippingServiceCodeType = "UK_IntlTrackedPostage"

	//
	// Seller's standard rate
	//
	ShippingServiceCodeTypeIE_SellersStandardRate ShippingServiceCodeType = "IE_SellersStandardRate"

	//
	// First Class Letter Service
	//
	ShippingServiceCodeTypeIE_FirstClassLetterService ShippingServiceCodeType = "IE_FirstClassLetterService"

	//
	// SwiftPost National
	//
	ShippingServiceCodeTypeIE_SwiftPostNational ShippingServiceCodeType = "IE_SwiftPostNational"

	//
	// Registered Post
	//
	ShippingServiceCodeTypeIE_RegisteredPost ShippingServiceCodeType = "IE_RegisteredPost"

	//
	// EMS SDS Courier
	//
	ShippingServiceCodeTypeIE_EMSSDSCourier ShippingServiceCodeType = "IE_EMSSDSCourier"

	//
	// Economy SDS Courier
	//
	ShippingServiceCodeTypeIE_EconomySDSCourier ShippingServiceCodeType = "IE_EconomySDSCourier"

	//
	// Other courier
	//
	ShippingServiceCodeTypeIE_OtherCourier ShippingServiceCodeType = "IE_OtherCourier"

	//
	// Collection in person
	//
	ShippingServiceCodeTypeIE_CollectionInPerson ShippingServiceCodeType = "IE_CollectionInPerson"

	//
	// Seller's Standard International Rate
	//
	ShippingServiceCodeTypeIE_SellersStandardRateInternational ShippingServiceCodeType = "IE_SellersStandardRateInternational"

	//
	// International Economy Service
	//
	ShippingServiceCodeTypeIE_InternationalEconomyService ShippingServiceCodeType = "IE_InternationalEconomyService"

	//
	// International Priority Service
	//
	ShippingServiceCodeTypeIE_InternationalPriorityService ShippingServiceCodeType = "IE_InternationalPriorityService"

	//
	// SwiftPost Express
	//
	ShippingServiceCodeTypeIE_SwiftPostExpressInternational ShippingServiceCodeType = "IE_SwiftPostExpressInternational"

	//
	// SwiftPost International
	//
	ShippingServiceCodeTypeIE_SwiftPostInternational ShippingServiceCodeType = "IE_SwiftPostInternational"

	//
	// EMS SDS Courier
	//
	ShippingServiceCodeTypeIE_EMSSDSCourierInternational ShippingServiceCodeType = "IE_EMSSDSCourierInternational"

	//
	// Economy SDS Courier
	//
	ShippingServiceCodeTypeIE_EconomySDSCourierInternational ShippingServiceCodeType = "IE_EconomySDSCourierInternational"

	//
	// Other courier or delivery service
	//
	ShippingServiceCodeTypeIE_OtherCourierInternational ShippingServiceCodeType = "IE_OtherCourierInternational"

	//
	// International collection in person
	//
	ShippingServiceCodeTypeIE_CollectionInPersonInternational ShippingServiceCodeType = "IE_CollectionInPersonInternational"

	//
	// Economy delivery from abroad
	//
	ShippingServiceCodeTypeIE_EconomyDeliveryFromAbroad ShippingServiceCodeType = "IE_EconomyDeliveryFromAbroad"

	//
	// Standard delivery from abroad
	//
	ShippingServiceCodeTypeIE_StandardDeliveryFromAbroad ShippingServiceCodeType = "IE_StandardDeliveryFromAbroad"

	//
	// Express delivery from abroad
	//
	ShippingServiceCodeTypeIE_ExpressDeliveryFromAbroad ShippingServiceCodeType = "IE_ExpressDeliveryFromAbroad"

	//
	// Tracked delivery from abroad
	//
	ShippingServiceCodeTypeIE_TrackedDeliveryFromAbroad ShippingServiceCodeType = "IE_TrackedDeliveryFromAbroad"

	//
	// Domestic Regular shipping
	//
	ShippingServiceCodeTypePL_DomesticRegular ShippingServiceCodeType = "PL_DomesticRegular"

	//
	// Domestic Special shipping
	//
	ShippingServiceCodeTypePL_DomesticSpecial ShippingServiceCodeType = "PL_DomesticSpecial"

	//
	// Przesylka z zagranicy - ekonomiczna
	//
	ShippingServiceCodeTypePL_EconomyDeliveryFromAbroad ShippingServiceCodeType = "PL_EconomyDeliveryFromAbroad"

	//
	// Przesylka z zagranicy - standardowa
	//
	ShippingServiceCodeTypePL_StandardDeliveryFromAbroad ShippingServiceCodeType = "PL_StandardDeliveryFromAbroad"

	//
	// Przesylka z zagranicy - ekspresowa
	//
	ShippingServiceCodeTypePL_ExpressDeliveryFromAbroad ShippingServiceCodeType = "PL_ExpressDeliveryFromAbroad"

	//
	// Przesylka z zagranicy - ze sledzeniem
	//
	ShippingServiceCodeTypePL_TrackedDeliveryFromAbroad ShippingServiceCodeType = "PL_TrackedDeliveryFromAbroad"

	//
	// Service associated with FreightQuote.com
	//
	ShippingServiceCodeTypeFreightShipping ShippingServiceCodeType = "FreightShipping"

	//
	//
	// (This value is no longer used.)
	//
	ShippingServiceCodeTypeFreightOtherShipping ShippingServiceCodeType = "FreightOtherShipping"

	//
	// Service associated with any freight service other than FreightQuote.com
	//
	ShippingServiceCodeTypeFreight ShippingServiceCodeType = "Freight"

	//
	// Freight Shipping International
	//
	ShippingServiceCodeTypeFreightShippingInternational ShippingServiceCodeType = "FreightShippingInternational"

	//
	// US Postal Service Ground
	//
	ShippingServiceCodeTypeUSPSGround ShippingServiceCodeType = "USPSGround"

	//
	// Overnight flat rate shipping service (domestic only)
	//
	ShippingServiceCodeTypeShippingMethodOvernight ShippingServiceCodeType = "ShippingMethodOvernight"

	//
	// Reserved for internal or future use
	//
	ShippingServiceCodeTypeCustomCode ShippingServiceCodeType = "CustomCode"

	//
	// USPS Priority Flat Rate Envelope
	//
	ShippingServiceCodeTypeUSPSPriorityFlatRateEnvelope ShippingServiceCodeType = "USPSPriorityFlatRateEnvelope"

	//
	// USPS Priority Flat Rate Box
	//
	ShippingServiceCodeTypeUSPSPriorityFlatRateBox ShippingServiceCodeType = "USPSPriorityFlatRateBox"

	//
	// USPS Global Priority Mail Small Envelope
	//
	ShippingServiceCodeTypeUSPSGlobalPrioritySmallEnvelope ShippingServiceCodeType = "USPSGlobalPrioritySmallEnvelope"

	//
	// USPS Global Priority Mail Large Envelope
	//
	ShippingServiceCodeTypeUSPSGlobalPriorityLargeEnvelope ShippingServiceCodeType = "USPSGlobalPriorityLargeEnvelope"

	//
	// USPS Priority Mail Express Flat Rate Envelope
	//
	ShippingServiceCodeTypeUSPSExpressFlatRateEnvelope ShippingServiceCodeType = "USPSExpressFlatRateEnvelope"

	//
	// UPS Worldwide Express Box 10 Kg
	//
	ShippingServiceCodeTypeUPSWorldWideExpressBox10kg ShippingServiceCodeType = "UPSWorldWideExpressBox10kg"

	//
	// UPS Worldwide Express Box 25 Kg
	//
	ShippingServiceCodeTypeUPSWorldWideExpressBox25kg ShippingServiceCodeType = "UPSWorldWideExpressBox25kg"

	//
	// UPS Worldwide Express Plus Box 10 Kg
	//
	ShippingServiceCodeTypeUPSWorldWideExpressPlusBox10kg ShippingServiceCodeType = "UPSWorldWideExpressPlusBox10kg"

	//
	// UPS Worldwide Express Plus box 25 Kg
	//
	ShippingServiceCodeTypeUPSWorldWideExpressPlusBox25kg ShippingServiceCodeType = "UPSWorldWideExpressPlusBox25kg"

	//
	// Local pick up only
	//
	ShippingServiceCodeTypeHK_LocalPickUpOnly ShippingServiceCodeType = "HK_LocalPickUpOnly"

	//
	// Local courier
	//
	ShippingServiceCodeTypeHK_LocalCourier ShippingServiceCodeType = "HK_LocalCourier"

	//
	// Domestic regular shipping
	//
	ShippingServiceCodeTypeHK_DomesticRegularShipping ShippingServiceCodeType = "HK_DomesticRegularShipping"

	//
	// Domestic special shipping
	//
	ShippingServiceCodeTypeHK_DomesticSpecialShipping ShippingServiceCodeType = "HK_DomesticSpecialShipping"

	//
	// International regular shipping
	//
	ShippingServiceCodeTypeHK_InternationalRegularShipping ShippingServiceCodeType = "HK_InternationalRegularShipping"

	//
	// International special shipping
	//
	ShippingServiceCodeTypeHK_InternationalSpecialShipping ShippingServiceCodeType = "HK_InternationalSpecialShipping"

	//
	// Local pick up only
	//
	ShippingServiceCodeTypeSG_LocalPickUpOnly ShippingServiceCodeType = "SG_LocalPickUpOnly"

	//
	// Local courier
	//
	ShippingServiceCodeTypeSG_LocalCourier ShippingServiceCodeType = "SG_LocalCourier"

	//
	// Domestic standard mail
	//
	ShippingServiceCodeTypeSG_DomesticStandardMail ShippingServiceCodeType = "SG_DomesticStandardMail"

	//
	// Domestic non standard mail
	//
	ShippingServiceCodeTypeSG_DomesticNonStandardMail ShippingServiceCodeType = "SG_DomesticNonStandardMail"

	//
	// Domestic Speedpost Islandwide
	//
	ShippingServiceCodeTypeSG_DomesticSpeedpostIslandwide ShippingServiceCodeType = "SG_DomesticSpeedpostIslandwide"

	//
	// International standard mail
	//
	ShippingServiceCodeTypeSG_InternationalStandardMail ShippingServiceCodeType = "SG_InternationalStandardMail"

	//
	// International Express Mail Service (EMS)
	//
	ShippingServiceCodeTypeSG_InternationalExpressMailService ShippingServiceCodeType = "SG_InternationalExpressMailService"

	//
	// International courier (DHL, FedEx, UPS)
	//
	ShippingServiceCodeTypeSG_InternationalCourier ShippingServiceCodeType = "SG_InternationalCourier"

	//
	// De Post zending - NON PRIOR (2 werkdagen)
	//
	ShippingServiceCodeTypeBENL_DePostZendingNONPRIOR ShippingServiceCodeType = "BENL_DePostZendingNONPRIOR"

	//
	// De Post zending - PRIOR (1 werkdag)
	//
	ShippingServiceCodeTypeBENL_DePostZendingPRIOR ShippingServiceCodeType = "BENL_DePostZendingPRIOR"

	//
	// De Post zending - aangetekend (1 werkdag)
	//
	ShippingServiceCodeTypeBENL_DePostZendingAangetekend ShippingServiceCodeType = "BENL_DePostZendingAangetekend"

	//
	// Kilopost pakje (2 werkdagen)
	//
	ShippingServiceCodeTypeBENL_KilopostPakje ShippingServiceCodeType = "BENL_KilopostPakje"

	//
	// Taxipost (express)
	//
	ShippingServiceCodeTypeBENL_Taxipost ShippingServiceCodeType = "BENL_Taxipost"

	//
	// Kiala afhaalpunt (1 tot 4 werkdagen)
	//
	ShippingServiceCodeTypeBENL_KialaAfhaalpunt ShippingServiceCodeType = "BENL_KialaAfhaalpunt"

	//
	// Vaste kosten standaard verzending
	//
	ShippingServiceCodeTypeBENL_VasteKostenStandaardVerzending ShippingServiceCodeType = "BENL_VasteKostenStandaardVerzending"

	//
	// Vaste kosten versnelde verzending
	//
	ShippingServiceCodeTypeBENL_VasteKostenVersneldeVerzending ShippingServiceCodeType = "BENL_VasteKostenVersneldeVerzending"

	//
	// Verzekerde verzending
	//
	ShippingServiceCodeTypeBENL_VerzekerdeVerzending ShippingServiceCodeType = "BENL_VerzekerdeVerzending"

	//
	// La Poste envoi NON PRIOR (2 jours ouvrables)
	//
	ShippingServiceCodeTypeBEFR_LaPosteEnvoiNONPRIOR ShippingServiceCodeType = "BEFR_LaPosteEnvoiNONPRIOR"

	//
	// La Poste envoi PRIOR (1 jour ouvrable)
	//
	ShippingServiceCodeTypeBEFR_LaPosteEnvoiPRIOR ShippingServiceCodeType = "BEFR_LaPosteEnvoiPRIOR"

	//
	// La Poste envoi recommande (1 jour ouvrable)
	//
	ShippingServiceCodeTypeBEFR_LaPosteEnvoiRecommande ShippingServiceCodeType = "BEFR_LaPosteEnvoiRecommande"

	//
	// Paquet Kilopost (2 jours ouvrables)
	//
	ShippingServiceCodeTypeBEFR_PaquetKilopost ShippingServiceCodeType = "BEFR_PaquetKilopost"

	//
	// Taxipost (express)
	//
	ShippingServiceCodeTypeBEFR_Taxipost ShippingServiceCodeType = "BEFR_Taxipost"

	//
	// Point retrait Kiala (1 a 4 jours ouvrables)
	//
	ShippingServiceCodeTypeBEFR_PointRetraitKiala ShippingServiceCodeType = "BEFR_PointRetraitKiala"

	//
	// Livraison standard - prix forfaitaire
	//
	ShippingServiceCodeTypeBEFR_LivraisonStandardPrixforFaitaire ShippingServiceCodeType = "BEFR_LivraisonStandardPrixforFaitaire"

	//
	// Livraison express - prix forfaitaire
	//
	ShippingServiceCodeTypeBEFR_LivraisonExpressPrixforFaitaire ShippingServiceCodeType = "BEFR_LivraisonExpressPrixforFaitaire"

	//
	// Livraison securisee
	//
	ShippingServiceCodeTypeBEFR_LivraisonSecurise ShippingServiceCodeType = "BEFR_LivraisonSecurise"

	//
	// De Post zending - PRIOR
	//
	ShippingServiceCodeTypeBENL_DePostZendingPRIORInternational ShippingServiceCodeType = "BENL_DePostZendingPRIORInternational"

	//
	// De Post zending - NON PRIOR
	//
	ShippingServiceCodeTypeBENL_DePostZendingNONPRIORInternational ShippingServiceCodeType = "BENL_DePostZendingNONPRIORInternational"

	//
	// De Post zending - aangetekend
	//
	ShippingServiceCodeTypeBENL_DePostZendingAangetekendInternational ShippingServiceCodeType = "BENL_DePostZendingAangetekendInternational"

	//
	// Kilopost pakje Internationaal
	//
	ShippingServiceCodeTypeBENL_KilopostPakjeInternational ShippingServiceCodeType = "BENL_KilopostPakjeInternational"

	//
	// Taxipost expressverzending
	//
	ShippingServiceCodeTypeBENL_TaxipostExpressverzending ShippingServiceCodeType = "BENL_TaxipostExpressverzending"

	//
	// Verzekerde verzending
	//
	ShippingServiceCodeTypeBENL_VerzekerdeVerzendingInternational ShippingServiceCodeType = "BENL_VerzekerdeVerzendingInternational"

	//
	// La Poste envoie PRIOR
	//
	ShippingServiceCodeTypeBEFR_LaPosteenvoiePRIOR ShippingServiceCodeType = "BEFR_LaPosteenvoiePRIOR"

	//
	// La Poste envoie NON PRIOR
	//
	ShippingServiceCodeTypeBEFR_LaPosteenvoieNONPRIOR ShippingServiceCodeType = "BEFR_LaPosteenvoieNONPRIOR"

	//
	// La Poste envoie recommande
	//
	ShippingServiceCodeTypeBEFR_LaPosteenvoieRecommande ShippingServiceCodeType = "BEFR_LaPosteenvoieRecommande"

	//
	// Paquet  Kilopost Internationale
	//
	ShippingServiceCodeTypeBEFR_PaquetKilopostInternationale ShippingServiceCodeType = "BEFR_PaquetKilopostInternationale"

	//
	// BEFR_Express Taxipost
	//
	ShippingServiceCodeTypeBEFR_ExpressTaxipost ShippingServiceCodeType = "BEFR_ExpressTaxipost"

	//
	// Livraison standard internationale - prix forfaitaire
	//
	ShippingServiceCodeTypeBEFR_LivraisonStandardInternationalePrixforFaitaire ShippingServiceCodeType = "BEFR_LivraisonStandardInternationalePrixforFaitaire"

	//
	// Livraison express internationale - prix forfaitaire
	//
	ShippingServiceCodeTypeBEFR_LivraisonExpressInternationalePrixforFaitaire ShippingServiceCodeType = "BEFR_LivraisonExpressInternationalePrixforFaitaire"

	//
	// Livraison securisee
	//
	ShippingServiceCodeTypeBEFR_LivraisonSecuriseInternational ShippingServiceCodeType = "BEFR_LivraisonSecuriseInternational"

	//
	// Chronopost
	//
	ShippingServiceCodeTypeFR_Chronopost ShippingServiceCodeType = "FR_Chronopost"

	//
	// Royal Mail Special Delivery; 1:00 pm
	//
	ShippingServiceCodeTypeUK_RoyalMailSpecialDeliveryNextDay ShippingServiceCodeType = "UK_RoyalMailSpecialDeliveryNextDay"

	//
	// Canada Post Light Packet International
	//
	ShippingServiceCodeTypeCA_PostLightPacketInternational ShippingServiceCodeType = "CA_PostLightPacketInternational"

	//
	// Canada Post Light Packet USA
	//
	ShippingServiceCodeTypeCA_PostLightPacketUSA ShippingServiceCodeType = "CA_PostLightPacketUSA"

	//
	// DHL
	//
	ShippingServiceCodeTypePL_DHLInternational ShippingServiceCodeType = "PL_DHLInternational"

	//
	// Przesylka zagraniczna - zwykla
	//
	ShippingServiceCodeTypePL_InternationalRegular ShippingServiceCodeType = "PL_InternationalRegular"

	//
	// Przesylka zagraniczna - priorytetowa
	//
	ShippingServiceCodeTypePL_InternationalSpecial ShippingServiceCodeType = "PL_InternationalSpecial"

	//
	// UPS
	//
	ShippingServiceCodeTypePL_UPSInternational ShippingServiceCodeType = "PL_UPSInternational"

	//
	// Normes de livraison postale
	//
	ShippingServiceCodeTypeCAFR_StandardDelivery ShippingServiceCodeType = "CAFR_StandardDelivery"

	//
	// Expedition acceleree
	//
	ShippingServiceCodeTypeCAFR_ExpeditedDelivery ShippingServiceCodeType = "CAFR_ExpeditedDelivery"

	//
	// Postes Canada, Poste-lettres
	//
	ShippingServiceCodeTypeCAFR_PostLettermail ShippingServiceCodeType = "CAFR_PostLettermail"

	//
	// Postes Canada, Colis standard
	//
	ShippingServiceCodeTypeCAFR_PostRegularParcel ShippingServiceCodeType = "CAFR_PostRegularParcel"

	//
	// Postes Canada, Colis acceleres
	//
	ShippingServiceCodeTypeCAFR_PostExpeditedParcel ShippingServiceCodeType = "CAFR_PostExpeditedParcel"

	//
	// Postes Canada, Xpresspost
	//
	ShippingServiceCodeTypeCAFR_PostXpresspost ShippingServiceCodeType = "CAFR_PostXpresspost"

	//
	// Postes Canada, Messageries prioritaires
	//
	ShippingServiceCodeTypeCAFR_PostPriorityCourier ShippingServiceCodeType = "CAFR_PostPriorityCourier"

	//
	// Expedition standard - International, tarif fixe
	//
	ShippingServiceCodeTypeCAFR_StandardInternational ShippingServiceCodeType = "CAFR_StandardInternational"

	//
	// Expedition acceleree - International, tarif fixe
	//
	ShippingServiceCodeTypeCAFR_ExpeditedInternational ShippingServiceCodeType = "CAFR_ExpeditedInternational"

	//
	// Autres services d'expedition internationale (voir description)
	//
	ShippingServiceCodeTypeCAFR_OtherInternational ShippingServiceCodeType = "CAFR_OtherInternational"

	//
	// Postes Canada, Colis acceleres - E.U.
	//
	ShippingServiceCodeTypeCAFR_PostExpeditedParcelUSA ShippingServiceCodeType = "CAFR_PostExpeditedParcelUSA"

	//
	// Postes Canada, Petits paquets - E.U.
	//
	ShippingServiceCodeTypeCAFR_PostSmallPacketsUSA ShippingServiceCodeType = "CAFR_PostSmallPacketsUSA"

	//
	// Postes Canada, Xpresspost - E.U.
	//
	ShippingServiceCodeTypeCAFR_PostXpresspostUSA ShippingServiceCodeType = "CAFR_PostXpresspostUSA"

	//
	// Postes Canada, Xpresspost - International
	//
	ShippingServiceCodeTypeCAFR_PostXpresspostInternational ShippingServiceCodeType = "CAFR_PostXpresspostInternational"

	//
	// Postes Canada, Colis international de surface
	//
	ShippingServiceCodeTypeCAFR_PostInternationalParcelSurface ShippingServiceCodeType = "CAFR_PostInternationalParcelSurface"

	//
	// Postes Canada, Colis-avion - International
	//
	ShippingServiceCodeTypeCAFR_PostInternationalParcelAir ShippingServiceCodeType = "CAFR_PostInternationalParcelAir"

	//
	// Petits paquets - International
	//
	ShippingServiceCodeTypeCAFR_SmallPacketsInternational ShippingServiceCodeType = "CAFR_SmallPacketsInternational"

	//
	// Purolator International
	//
	ShippingServiceCodeTypeCAFR_PurolatorInternational ShippingServiceCodeType = "CAFR_PurolatorInternational"

	//
	// Postes Canada, Petits paquets - E.U. service de surface
	//
	ShippingServiceCodeTypeCAFR_PostSmallPacketsUSAGround ShippingServiceCodeType = "CAFR_PostSmallPacketsUSAGround"

	//
	// Postes Canada, Petits paquets - E.U. par avion
	//
	ShippingServiceCodeTypeCAFR_PostSmallPacketsUSAAir ShippingServiceCodeType = "CAFR_PostSmallPacketsUSAAir"

	//
	// Petits paquets - International, courrier-surface
	//
	ShippingServiceCodeTypeCAFR_SmallPacketsInternationalGround ShippingServiceCodeType = "CAFR_SmallPacketsInternationalGround"

	//
	// Petits paquets - International, courrier-avion
	//
	ShippingServiceCodeTypeCAFR_SmallPacketsInternationalAir ShippingServiceCodeType = "CAFR_SmallPacketsInternationalAir"

	//
	// Postes Canada, Poste aux lettres - E.U.
	//
	ShippingServiceCodeTypeCAFR_PostUSALetterPost ShippingServiceCodeType = "CAFR_PostUSALetterPost"

	//
	// Postes Canada, Poste aux lettres - International
	//
	ShippingServiceCodeTypeCAFR_PostInternationalLetterPost ShippingServiceCodeType = "CAFR_PostInternationalLetterPost"

	//
	// UPS Express Saver
	//
	ShippingServiceCodeTypeCAFR_UPSExpressCanada ShippingServiceCodeType = "CAFR_UPSExpressCanada"

	//
	// UPS Express Saver Canada
	//
	ShippingServiceCodeTypeCAFR_UPSExpressSaverCanada ShippingServiceCodeType = "CAFR_UPSExpressSaverCanada"

	//
	// UPS Expedited Canada
	//
	ShippingServiceCodeTypeCAFR_UPSExpeditedCanada ShippingServiceCodeType = "CAFR_UPSExpeditedCanada"

	//
	// UPS Standard au Canada
	//
	ShippingServiceCodeTypeCAFR_UPSStandardCanada ShippingServiceCodeType = "CAFR_UPSStandardCanada"

	//
	// UPS Express Etats-Unis
	//
	ShippingServiceCodeTypeCAFR_UPSExpressUnitedStates ShippingServiceCodeType = "CAFR_UPSExpressUnitedStates"

	//
	// UPS Expedited Etats-Unis
	//
	ShippingServiceCodeTypeCAFR_UPSExpeditedUnitedStates ShippingServiceCodeType = "CAFR_UPSExpeditedUnitedStates"

	//
	// 3Day Select aux Etats-Unis
	//
	ShippingServiceCodeTypeCAFR_UPS3DaySelectUnitedStates ShippingServiceCodeType = "CAFR_UPS3DaySelectUnitedStates"

	//
	// UPS Standard aux Etats-Unis
	//
	ShippingServiceCodeTypeCAFR_UPSStandardUnitedStates ShippingServiceCodeType = "CAFR_UPSStandardUnitedStates"

	//
	// UPS Worlwide Express
	//
	ShippingServiceCodeTypeCAFR_UPSWorldWideExpress ShippingServiceCodeType = "CAFR_UPSWorldWideExpress"

	//
	// UPS Worlwide Expedited
	//
	ShippingServiceCodeTypeCAFR_UPSWorldWideExpedited ShippingServiceCodeType = "CAFR_UPSWorldWideExpedited"

	//
	// Royal Mail Special Delivery 9:00 am
	//
	ShippingServiceCodeTypeUK_RoyalMailSpecialDelivery9am ShippingServiceCodeType = "UK_RoyalMailSpecialDelivery9am"

	//
	// USPS First Class Mail Intl / First Class Package Intl Service
	//
	ShippingServiceCodeTypeUSPSFirstClassMailInternational ShippingServiceCodeType = "USPSFirstClassMailInternational"

	//
	// USPS Priority Mail International
	//
	ShippingServiceCodeTypeUSPSPriorityMailInternational ShippingServiceCodeType = "USPSPriorityMailInternational"

	//
	// USPS Priority Mail Express International
	//
	ShippingServiceCodeTypeUSPSExpressMailInternational ShippingServiceCodeType = "USPSExpressMailInternational"

	//
	// Standardpauschale fur internationalen Versand
	//
	ShippingServiceCodeTypeCH_StandardInternational ShippingServiceCodeType = "CH_StandardInternational"

	//
	// Expresspauschale fur internationalen Versand
	//
	ShippingServiceCodeTypeCH_ExpeditedInternational ShippingServiceCodeType = "CH_ExpeditedInternational"

	//
	// Sonstiger Versand (Siehe Artikelbeschreibung)
	//
	ShippingServiceCodeTypeCH_SonstigerVersandSieheArtikelbeschreibung ShippingServiceCodeType = "CH_SonstigerVersandSieheArtikelbeschreibung"

	//
	// International Standard Fixed Rate for Taiwan
	//
	ShippingServiceCodeTypeTW_StandardInternationalFixedRate ShippingServiceCodeType = "TW_StandardInternationalFixedRate"

	//
	// International Express Fixed Rate for Taiwan
	//
	ShippingServiceCodeTypeTW_ExpeditedInternationalFixedRate ShippingServiceCodeType = "TW_ExpeditedInternationalFixedRate"

	//
	// USPS Global Express Guaranteed
	//
	ShippingServiceCodeTypeUSPSGlobalExpressGuaranteed ShippingServiceCodeType = "USPSGlobalExpressGuaranteed"

	//
	// Regular with Insurance
	//
	ShippingServiceCodeTypeAU_RegularWithInsurance ShippingServiceCodeType = "AU_RegularWithInsurance"

	//
	// Express with Insurance
	//
	ShippingServiceCodeTypeAU_ExpressWithInsurance ShippingServiceCodeType = "AU_ExpressWithInsurance"

	//
	// Deutsche Post Warensendung
	//
	ShippingServiceCodeTypeDE_DeutschePostWarensendungInternational ShippingServiceCodeType = "DE_DeutschePostWarensendungInternational"

	//
	// Deutsche Post Byendung
	//
	ShippingServiceCodeTypeDE_DeutschePostByendung ShippingServiceCodeType = "DE_DeutschePostByendung"

	//
	// Hermes Paket (unversichert)
	//
	ShippingServiceCodeTypeDE_HermesPaketUnversichertInternational ShippingServiceCodeType = "DE_HermesPaketUnversichertInternational"

	//
	// Hermes Paket (versichert)
	//
	ShippingServiceCodeTypeDE_HermesPaketVersichertInternational ShippingServiceCodeType = "DE_HermesPaketVersichertInternational"

	//
	// iloxx Transport XXL
	//
	ShippingServiceCodeTypeDE_iLoxxTransportXXLInternational ShippingServiceCodeType = "DE_iLoxxTransportXXLInternational"

	//
	// iloxx Ubernacht Express
	//
	ShippingServiceCodeTypeDE_iLoxxUbernachtExpressInternational ShippingServiceCodeType = "DE_iLoxxUbernachtExpressInternational"

	//
	// iloxx Standard
	//
	ShippingServiceCodeTypeDE_iLoxxStandardInternational ShippingServiceCodeType = "DE_iLoxxStandardInternational"

	//
	// Standardpauschale fur internationalen Versand
	//
	ShippingServiceCodeTypeDE_StandardInternational ShippingServiceCodeType = "DE_StandardInternational"

	//
	// Expresspauschale fur internationalen Versand
	//
	ShippingServiceCodeTypeDE_ExpeditedInternational ShippingServiceCodeType = "DE_ExpeditedInternational"

	//
	// Deutsche Post Presse & Bucher Economy
	//
	ShippingServiceCodeTypeDE_DeutschePostBriefIntlEcon ShippingServiceCodeType = "DE_DeutschePostBriefIntlEcon"

	//
	// Deutsche Post Presse & Bucher Priority
	//
	ShippingServiceCodeTypeDE_DeutschePostBriefIntlPri ShippingServiceCodeType = "DE_DeutschePostBriefIntlPri"

	//
	// AT_BITTE_TREFFEN_SIE_EINE_AUSWAHL
	//
	ShippingServiceCodeTypeAT_BitteTreffenSieEineAuswahl ShippingServiceCodeType = "AT_BitteTreffenSieEineAuswahl"

	//
	// Einschreiben (Versand inkl. Einschreibengebuhr)
	//
	ShippingServiceCodeTypeAT_EinschreibenVersandInklEinschreibengebuhr ShippingServiceCodeType = "AT_EinschreibenVersandInklEinschreibengebuhr"

	//
	// Nachnahme (Versand inkl. Nachnahmegebuhr)
	//
	ShippingServiceCodeTypeAT_NachnahmeVersandInklNachnahmegebuhr ShippingServiceCodeType = "AT_NachnahmeVersandInklNachnahmegebuhr"

	//
	// Express- oder Kurierversand
	//
	ShippingServiceCodeTypeAT_ExpressOrCourierInternational ShippingServiceCodeType = "AT_ExpressOrCourierInternational"

	//
	// Versicherter Express- oder Kurierversand
	//
	ShippingServiceCodeTypeAT_InsuredExpressOrCourierInternational ShippingServiceCodeType = "AT_InsuredExpressOrCourierInternational"

	//
	// Sonderversand (z.B. Sperrgut, KFZ)
	//
	ShippingServiceCodeTypeAT_SpecialDispatchInternational ShippingServiceCodeType = "AT_SpecialDispatchInternational"

	//
	// Versicherter Sonderversand (z.B. Sperrgut, KFZ)
	//
	ShippingServiceCodeTypeAT_InsuredSpecialDispatchInternational ShippingServiceCodeType = "AT_InsuredSpecialDispatchInternational"

	//
	// Standardpauschale fur internationalen Versand
	//
	ShippingServiceCodeTypeAT_StandardInternational ShippingServiceCodeType = "AT_StandardInternational"

	//
	// Expresspauschale fur internationalen Versand
	//
	ShippingServiceCodeTypeAT_ExpeditedInternational ShippingServiceCodeType = "AT_ExpeditedInternational"

	//
	// Sonstiger Versand (Siehe Artikelbeschreibung)
	//
	ShippingServiceCodeTypeAT_OtherInternationalShipping ShippingServiceCodeType = "AT_OtherInternationalShipping"

	//
	// CH_BITTE_TREFFEN_SIE_EINE_AUSWAHL
	//
	ShippingServiceCodeTypeCH_BitteTreffenSieEineAuswahl ShippingServiceCodeType = "CH_BitteTreffenSieEineAuswahl"

	//
	// Unversicherter Versand
	//
	ShippingServiceCodeTypeCH_UnversicherterVersand ShippingServiceCodeType = "CH_UnversicherterVersand"

	//
	// Versicherter Versand
	//
	ShippingServiceCodeTypeCH_VersicherterVersand ShippingServiceCodeType = "CH_VersicherterVersand"

	//
	// Einschreiben (Versand inkl. Einschreibengebuhr)
	//
	ShippingServiceCodeTypeCH_EinschreibenVersandInklEinschreibengebuhr ShippingServiceCodeType = "CH_EinschreibenVersandInklEinschreibengebuhr"

	//
	// Nachnahme (Versand inkl. Nachnahmegebuhr)
	//
	ShippingServiceCodeTypeCH_NachnahmeVersandInklNachnahmegebuhr ShippingServiceCodeType = "CH_NachnahmeVersandInklNachnahmegebuhr"

	//
	// Express- oder Kurierversand
	//
	ShippingServiceCodeTypeCH_ExpressOrCourierInternational ShippingServiceCodeType = "CH_ExpressOrCourierInternational"

	//
	// Versicherter Express- oder Kurierversand
	//
	ShippingServiceCodeTypeCH_InsuredExpressOrCourierInternational ShippingServiceCodeType = "CH_InsuredExpressOrCourierInternational"

	//
	// Sonderversand (z.B. Sperrgut, KFZ)
	//
	ShippingServiceCodeTypeCH_SonderversandZBSperrgutKFZ ShippingServiceCodeType = "CH_SonderversandZBSperrgutKFZ"

	//
	// Versicherter Sonderversand (z.B. Sperrgut, KFZ)
	//
	ShippingServiceCodeTypeCH_VersicherterSonderversandZBSperrgutKFZ ShippingServiceCodeType = "CH_VersicherterSonderversandZBSperrgutKFZ"

	//
	// Standardversand (A-Post/Priority)
	//
	ShippingServiceCodeTypeCH_StandardversandAPostPriority ShippingServiceCodeType = "CH_StandardversandAPostPriority"

	//
	// Standardversand (B-Post/Economy)
	//
	ShippingServiceCodeTypeCH_StandardversandBPostEconomy ShippingServiceCodeType = "CH_StandardversandBPostEconomy"

	//
	// DE_BITTE_TREFFEN_SIE_EINE_AUSWAHL
	//
	ShippingServiceCodeTypeDE_BitteTreffenSieEineAuswahl ShippingServiceCodeType = "DE_BitteTreffenSieEineAuswahl"

	//
	// Einschreiben (Versand inkl. Einschreibengebuhr)
	//
	ShippingServiceCodeTypeDE_EinschreibenVersandInklEinschreibengebuhr ShippingServiceCodeType = "DE_EinschreibenVersandInklEinschreibengebuhr"

	//
	// Nachnahme (Versand inkl. Nachnahmegebuhr)
	//
	ShippingServiceCodeTypeDE_NachnahmeVersandInklNachnahmegebuhr ShippingServiceCodeType = "DE_NachnahmeVersandInklNachnahmegebuhr"

	//
	// Express- oder Kurierversand
	//
	ShippingServiceCodeTypeDE_ExpressOrCourierInternational ShippingServiceCodeType = "DE_ExpressOrCourierInternational"

	//
	// Versicherter Express- oder Kurierversand
	//
	ShippingServiceCodeTypeDE_InsuredExpressOrCourierInternational ShippingServiceCodeType = "DE_InsuredExpressOrCourierInternational"

	//
	// Sonderversand (z.B. Mobel, KFZ)
	//
	ShippingServiceCodeTypeDE_SonderversandZBMobelKFZ ShippingServiceCodeType = "DE_SonderversandZBMobelKFZ"

	//
	// Versicherter Sonderversand (z.B. Mobel, KFZ)
	//
	ShippingServiceCodeTypeDE_VersicherterSonderversandZBMobelKFZ ShippingServiceCodeType = "DE_VersicherterSonderversandZBMobelKFZ"

	//
	// Deutsche Post Brief
	//
	ShippingServiceCodeTypeDE_DeutschePostBriefInternational ShippingServiceCodeType = "DE_DeutschePostBriefInternational"

	//
	// Standard Int'l Flat Rate Postage
	//
	ShippingServiceCodeTypeIE_StandardInternationalFlatRatePostage ShippingServiceCodeType = "IE_StandardInternationalFlatRatePostage"

	//
	// Expedited Int'l Flat Rate Postage
	//
	ShippingServiceCodeTypeIE_ExpeditedInternationalFlatRatePostage ShippingServiceCodeType = "IE_ExpeditedInternationalFlatRatePostage"

	//
	// Other Int'l Postage (see description)
	//
	ShippingServiceCodeTypeIE_OtherInternationalPostage ShippingServiceCodeType = "IE_OtherInternationalPostage"

	//
	// Standard Int'l Flat Rate Postage
	//
	ShippingServiceCodeTypeUK_StandardInternationalFlatRatePostage ShippingServiceCodeType = "UK_StandardInternationalFlatRatePostage"

	//
	// Expedited Int'l Flat Rate Postage
	//
	ShippingServiceCodeTypeUK_ExpeditedInternationalFlatRatePostage ShippingServiceCodeType = "UK_ExpeditedInternationalFlatRatePostage"

	//
	// Other Int'l Postage (see description)
	//
	ShippingServiceCodeTypeUK_OtherInternationalPostage ShippingServiceCodeType = "UK_OtherInternationalPostage"

	//
	// Chronopost - Chrono Relais
	//
	ShippingServiceCodeTypeFR_ChronopostChronoRelais ShippingServiceCodeType = "FR_ChronopostChronoRelais"

	//
	// Chrono 10
	//
	ShippingServiceCodeTypeFR_Chrono10 ShippingServiceCodeType = "FR_Chrono10"

	//
	// Chrono 13
	//
	ShippingServiceCodeTypeFR_Chrono13 ShippingServiceCodeType = "FR_Chrono13"

	//
	// Chrono 18
	//
	ShippingServiceCodeTypeFR_Chrono18 ShippingServiceCodeType = "FR_Chrono18"

	//
	// Chronopost Express International
	//
	ShippingServiceCodeTypeFR_ChronopostExpressInternational ShippingServiceCodeType = "FR_ChronopostExpressInternational"

	//
	// PickUp Only Service
	//
	ShippingServiceCodeTypePickup ShippingServiceCodeType = "Pickup"

	//
	// Delivery
	//
	ShippingServiceCodeTypeDelivery ShippingServiceCodeType = "Delivery"

	//
	// Pickup Only Service
	//
	ShippingServiceCodeTypeCA_Pickup ShippingServiceCodeType = "CA_Pickup"

	//
	// Abholung
	//
	ShippingServiceCodeTypeDE_Pickup ShippingServiceCodeType = "DE_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeAU_Pickup ShippingServiceCodeType = "AU_Pickup"

	//
	// Small Parcels
	//
	ShippingServiceCodeTypeAU_SmallParcels ShippingServiceCodeType = "AU_SmallParcels"

	// Small Parcel With Tracking
	ShippingServiceCodeTypeAU_SmallParcelWithTracking ShippingServiceCodeType = "AU_SmallParcelWithTracking"

	// Small Parcel With Tracking And Signature
	ShippingServiceCodeTypeAU_SmallParcelWithTrackingAndSignature ShippingServiceCodeType = "AU_SmallParcelWithTrackingAndSignature"

	// Regular Parcel With Tracking
	ShippingServiceCodeTypeAU_RegularParcelWithTracking ShippingServiceCodeType = "AU_RegularParcelWithTracking"

	// Regular Parcel With Tracking And Signature
	ShippingServiceCodeTypeAU_RegularParcelWithTrackingAndSignature ShippingServiceCodeType = "AU_RegularParcelWithTrackingAndSignature"

	// PrePaid Express Post Satchel 5kg
	ShippingServiceCodeTypeAU_PrePaidExpressPostSatchel5kg ShippingServiceCodeType = "AU_PrePaidExpressPostSatchel5kg"

	//
	// PrePaid Parcel Post Satchels 500g
	//
	ShippingServiceCodeTypeAU_PrePaidParcelPostSatchels500g ShippingServiceCodeType = "AU_PrePaidParcelPostSatchels500g"

	//
	// PrePaid Parcel Post Satchels 3kg
	//
	ShippingServiceCodeTypeAU_PrePaidParcelPostSatchels3kg ShippingServiceCodeType = "AU_PrePaidParcelPostSatchels3kg"

	//
	// PrePaid Parcel Post Satchels 5kg
	//
	ShippingServiceCodeTypeAU_PrePaidParcelPostSatchels5kg ShippingServiceCodeType = "AU_PrePaidParcelPostSatchels5kg"

	//
	// PrePaid Express Post Satchel 500g
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostSatchel500g ShippingServiceCodeType = "AU_PrePaidExpressPostSatchel500g"

	//
	// PrePaid Express Post Satchel 3kg
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostSatchel3kg ShippingServiceCodeType = "AU_PrePaidExpressPostSatchel3kg"

	//
	// PrePaid Express Post Platinum 500g
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostPlatinum500g ShippingServiceCodeType = "AU_PrePaidExpressPostPlatinum500g"

	//
	// PrePaid Express Post Platinum 3kg
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostPlatinum3kg ShippingServiceCodeType = "AU_PrePaidExpressPostPlatinum3kg"

	//
	// Express Courier International
	//
	ShippingServiceCodeTypeAU_ExpressCourierInternational ShippingServiceCodeType = "AU_ExpressCourierInternational"

	//
	// Express Post International
	//
	ShippingServiceCodeTypeAU_ExpressPostInternational ShippingServiceCodeType = "AU_ExpressPostInternational"

	//
	// PrePaid Express Post International Envelope C5
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostInternationalEnvelopeC5 ShippingServiceCodeType = "AU_PrePaidExpressPostInternationalEnvelopeC5"

	//
	// PrePaid Express Post International Envelope B4
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostInternationalEnvelopeB4 ShippingServiceCodeType = "AU_PrePaidExpressPostInternationalEnvelopeB4"

	//
	// PrePaid Express Post International Satchels 2kg
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostInternationalSatchels2kg ShippingServiceCodeType = "AU_PrePaidExpressPostInternationalSatchels2kg"

	//
	// PrePaid Express Post International Satchels 3kg
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostInternationalSatchels3kg ShippingServiceCodeType = "AU_PrePaidExpressPostInternationalSatchels3kg"

	//
	// PrePaid Express Post International Box 5kg
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostInternationalBox5kg ShippingServiceCodeType = "AU_PrePaidExpressPostInternationalBox5kg"

	//
	// PrePaid Express Post International Box 10kg
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostInternationalBox10kg ShippingServiceCodeType = "AU_PrePaidExpressPostInternationalBox10kg"

	//
	// PrePaid Express Post International Box 20kg
	//
	ShippingServiceCodeTypeAU_PrePaidExpressPostInternationalBox20kg ShippingServiceCodeType = "AU_PrePaidExpressPostInternationalBox20kg"

	//
	// Registered Parcel Post
	//
	ShippingServiceCodeTypeAU_RegisteredParcelPost ShippingServiceCodeType = "AU_RegisteredParcelPost"

	//
	// Registered Small Parcel
	//
	ShippingServiceCodeTypeAU_RegisteredSmallParcel ShippingServiceCodeType = "AU_RegisteredSmallParcel"

	//
	// Registered Parcel Post Prepaid Satchel 500g
	//
	ShippingServiceCodeTypeAU_RegisteredParcelPostPrepaidSatchel500g ShippingServiceCodeType = "AU_RegisteredParcelPostPrepaidSatchel500g"

	//
	// Registered Parcel Post Prepaid Satchel 3kg
	//
	ShippingServiceCodeTypeAU_RegisteredParcelPostPrepaidSatchel3kg ShippingServiceCodeType = "AU_RegisteredParcelPostPrepaidSatchel3kg"

	//
	// Registered Parcel Post Prepaid Satchel 5kg
	//
	ShippingServiceCodeTypeAU_RegisteredParcelPostPrepaidSatchel5kg ShippingServiceCodeType = "AU_RegisteredParcelPostPrepaidSatchel5kg"

	//
	// eBay Australia Post Express Post 500g Satchel
	//
	ShippingServiceCodeTypeAU_ExpressPostSatchel500g ShippingServiceCodeType = "AU_ExpressPostSatchel500g"

	//
	// eBay Australia Post Express Post 3kg Satchel
	//
	ShippingServiceCodeTypeAU_ExpressPostSatchel3kg ShippingServiceCodeType = "AU_ExpressPostSatchel3kg"

	//
	// Enlevement
	//
	ShippingServiceCodeTypeFR_Pickup ShippingServiceCodeType = "FR_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeAT_Pickup ShippingServiceCodeType = "AT_Pickup"

	//
	// Afhalen
	//
	ShippingServiceCodeTypeBENL_Pickup ShippingServiceCodeType = "BENL_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeBEFR_Pickup ShippingServiceCodeType = "BEFR_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeCH_Pickup ShippingServiceCodeType = "CH_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeIT_Pickup ShippingServiceCodeType = "IT_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeNL_Pickup ShippingServiceCodeType = "NL_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypePL_Pickup ShippingServiceCodeType = "PL_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeES_Pickup ShippingServiceCodeType = "ES_Pickup"

	//
	// Pickup
	//
	ShippingServiceCodeTypeSG_Delivery ShippingServiceCodeType = "SG_Delivery"

	//
	// Other 24 Hour Courier
	//
	ShippingServiceCodeTypeUK_OtherCourier24 ShippingServiceCodeType = "UK_OtherCourier24"

	//
	// Other 48 Hour Courier
	//
	ShippingServiceCodeTypeUK_OtherCourier48 ShippingServiceCodeType = "UK_OtherCourier48"

	//
	// Other Courier 3 days
	//
	ShippingServiceCodeTypeUK_OtherCourier3Days ShippingServiceCodeType = "UK_OtherCourier3Days"

	//
	// Other Courier 5 days
	//
	ShippingServiceCodeTypeUK_OtherCourier5Days ShippingServiceCodeType = "UK_OtherCourier5Days"

	//
	// Courier Shipping
	//
	ShippingServiceCodeTypeCourier ShippingServiceCodeType = "Courier"

	//
	// FedEx Priority Overnight
	//
	ShippingServiceCodeTypeFedExPriorityOvernight ShippingServiceCodeType = "FedExPriorityOvernight"

	//
	// FedEx Standard Overnight
	//
	ShippingServiceCodeTypeFedExStandardOvernight ShippingServiceCodeType = "FedExStandardOvernight"

	//
	// FedEx 2Day
	//
	ShippingServiceCodeTypeFedEx2Day ShippingServiceCodeType = "FedEx2Day"

	//
	// FedEx Ground
	//
	ShippingServiceCodeTypeFedExGround ShippingServiceCodeType = "FedExGround"

	//
	// FedEx Home Delivery
	//
	ShippingServiceCodeTypeFedExHomeDelivery ShippingServiceCodeType = "FedExHomeDelivery"

	//
	// FedEx Express Saver
	//
	ShippingServiceCodeTypeFedExExpressSaver ShippingServiceCodeType = "FedExExpressSaver"

	//
	// Reserved for internal or future use
	//
	ShippingServiceCodeTypeFedExGroundDisabled ShippingServiceCodeType = "FedExGroundDisabled"

	//
	// Reserved for internal or future use
	//
	ShippingServiceCodeTypeFedExHomeDeliveryDisabled ShippingServiceCodeType = "FedExHomeDeliveryDisabled"

	//
	// FedEx International First
	//
	ShippingServiceCodeTypeFedExInternationalFirst ShippingServiceCodeType = "FedExInternationalFirst"

	//
	// FedEx International Priority
	//
	ShippingServiceCodeTypeFedExInternationalPriority ShippingServiceCodeType = "FedExInternationalPriority"

	//
	// FedEx International Economy
	//
	ShippingServiceCodeTypeFedExInternationalEconomy ShippingServiceCodeType = "FedExInternationalEconomy"

	//
	// FedEx International Ground
	//
	ShippingServiceCodeTypeFedExInternationalGround ShippingServiceCodeType = "FedExInternationalGround"

	//
	// Economy shipping from outside US
	//
	ShippingServiceCodeTypeEconomyShippingFromOutsideUS ShippingServiceCodeType = "EconomyShippingFromOutsideUS"

	//
	// Expedited shipping from outside US
	//
	ShippingServiceCodeTypeExpeditedShippingFromOutsideUS ShippingServiceCodeType = "ExpeditedShippingFromOutsideUS"

	//
	// Standard shipping from outside US
	//
	ShippingServiceCodeTypeStandardShippingFromOutsideUS ShippingServiceCodeType = "StandardShippingFromOutsideUS"

	//
	// Economy postage from outside UK
	//
	ShippingServiceCodeTypeUK_EconomyShippingFromOutside ShippingServiceCodeType = "UK_EconomyShippingFromOutside"

	//
	// Express postage from outside UK
	//
	ShippingServiceCodeTypeUK_ExpeditedShippingFromOutside ShippingServiceCodeType = "UK_ExpeditedShippingFromOutside"

	//
	// Standard postage from outside UK
	//
	ShippingServiceCodeTypeUK_StandardShippingFromOutside ShippingServiceCodeType = "UK_StandardShippingFromOutside"

	//
	// Economy postage from outside DE
	//
	ShippingServiceCodeTypeDE_SparversandAusDemAusland ShippingServiceCodeType = "DE_SparversandAusDemAusland"

	//
	// Standard postage from outside DE
	//
	ShippingServiceCodeTypeDE_StandardversandAusDemAusland ShippingServiceCodeType = "DE_StandardversandAusDemAusland"

	//
	// Express postage from outside DE
	//
	ShippingServiceCodeTypeDE_ExpressversandAusDemAusland ShippingServiceCodeType = "DE_ExpressversandAusDemAusland"

	//
	// DHL 2kg Paket (nur fuer kurze Zeit)
	//
	ShippingServiceCodeTypeDE_DHL2KGPaket ShippingServiceCodeType = "DE_DHL2KGPaket"

	//
	// Global Shipping Program
	// <br/>
	// This shipping service must be selected for the international leg of the shipment.
	//
	ShippingServiceCodeTypeInternationalPriorityShipping ShippingServiceCodeType = "InternationalPriorityShipping"

	//
	//
	// Reserved for future use.
	//
	ShippingServiceCodeTypeSameDayShipping ShippingServiceCodeType = "SameDayShipping"

	//
	// Royal Mail Tracked 24
	//
	ShippingServiceCodeTypeUK_RoyalMailNextDay ShippingServiceCodeType = "UK_RoyalMailNextDay"

	//
	// Royal Mail Tracked 48
	//
	ShippingServiceCodeTypeUK_RoyalMailTracked ShippingServiceCodeType = "UK_RoyalMailTracked"

	//
	// This value indicates that the order will be delivered by an eBay On Demand valet through the eBay On Demand Delivery program.
	//
	ShippingServiceCodeTypeEBayNowImmediateDelivery ShippingServiceCodeType = "eBayNowImmediateDelivery"
)

//
// This enumerated type defines the possible values that can be used in the <b>ShippingServiceType</b> field of the <b>ShippingServiceCostOverride</b> container.
//
type ShippingServiceType string

const (

	//
	// This value should be used if the seller is overriding shipping costs for all domestic shipping services defined in the Business Policies shipping profile.
	//
	ShippingServiceTypeDomestic ShippingServiceType = "Domestic"

	//
	// This value should be used if the seller is overriding shipping costs for all international shipping services defined in the Business Policies shipping profile.
	//
	ShippingServiceTypeInternational ShippingServiceType = "International"
)

//
// This type is no longer applicable as it only pertained to eBay Now orders, and eBay Now has been discontinued.
//
//
type ShippingTrackingEventCodeType string

const (

	//
	// This value indicates that the eBay Now order is ready for pickup by the eBay Now valet at the store.
	//
	ShippingTrackingEventCodeTypeValetReadyForPickup ShippingTrackingEventCodeType = "ValetReadyForPickup"

	//
	// This value indicates that the eBay Now order was picked up by the eBay Now valet.
	//
	ShippingTrackingEventCodeTypeValetPickedUpOrder ShippingTrackingEventCodeType = "ValetPickedUpOrder"

	//
	// This value is reserved for internal or future use.
	//
	ShippingTrackingEventCodeTypeCustomCode ShippingTrackingEventCodeType = "CustomCode"
)

//
// The shipping cost model offered by the seller.
//
type ShippingTypeCodeType string

const (

	//
	// Flat shipping model: the seller establishes the cost of shipping and cost of shipping insurance, regardless of what any buyer-selected shipping service might charge the seller.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This shipping type includes an option for a <em>Flat Rate Freight</em> shipping service. For details about freight shipping, see <a href="http://developer.ebay.com/devzone/guides/ebayfeatures/Development/Shipping-TypesCosts.html#SpecifyingFreightShipping">Specifying Freight Shipping</a> in the eBay Features Guide.
	// </span>
	//
	ShippingTypeCodeTypeFlat ShippingTypeCodeType = "Flat"

	//
	// Calculated shipping model: the cost of shipping is
	// determined in large part by the seller-offered and
	// buyer-selected shipping service. The seller might assess an
	// additional fee via PackagingHandlingCosts.
	//
	ShippingTypeCodeTypeCalculated ShippingTypeCodeType = "Calculated"

	//
	// Freight shipping model. Available only for US domestic shipping. The cost of shipping is automatically determined by an affiliated third party, FreightQuote.com, based on the item location (postal code).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This shipping type cannot be set via API, but it is automatically set by eBay when a buyer selects the FreightQuote.com option on the US eBay website.
	// <br/><br/>
	// For details about types of freight shipping that you can specify via API, see <a href="http://developer.ebay.com/devzone/guides/ebayfeatures/Development/Shipping-TypesCosts.html#SpecifyingFreightShipping">Specifying Freight Shipping</a> in the eBay Features Guide.
	// </span>
	//
	ShippingTypeCodeTypeFreight ShippingTypeCodeType = "Freight"

	//
	// Free shipping.
	// This field is output-only so if you want to use AddItem to specify a free
	// Shipping Cost, specify 0 in
	// Item.ShippingDetails.ShippingServiceOptions.ShippingServiceCost.
	//
	ShippingTypeCodeTypeFree ShippingTypeCodeType = "Free"

	//
	// The seller did not specify the shipping type.
	//
	ShippingTypeCodeTypeNotSpecified ShippingTypeCodeType = "NotSpecified"

	//
	// The seller specified one or more flat domestic shipping services
	// and one or more calculated international shipping services.
	//
	ShippingTypeCodeTypeFlatDomesticCalculatedInternational ShippingTypeCodeType = "FlatDomesticCalculatedInternational"

	//
	// The seller specified one or more calculated domestic shipping services
	// and one or more flat international shipping services.
	//
	ShippingTypeCodeTypeCalculatedDomesticFlatInternational ShippingTypeCodeType = "CalculatedDomesticFlatInternational"

	//
	// Freight shipping model. Available only for the US, UK, AU, CA and CAFR sites, and only for domestic shipping. <code>FreightFlat</code> applies to shipping with carriers that are not affiliated with eBay. It is negotiated freight, not a flat rate. Sellers negotiate the shipping cost with their chosen carrier and the buyer before completing the sale. FreightFlat shipping may be used when calculated shipping cannot be used due to the greater weight of the item.
	// <br/><br/>
	// For details about freight shipping, see <a href="http://developer.ebay.com/devzone/guides/ebayfeatures/Development/Shipping-TypesCosts.html#SpecifyingFreightShipping">Specifying Freight Shipping</a> in the eBay Features Guide.
	//
	ShippingTypeCodeTypeFreightFlat ShippingTypeCodeType = "FreightFlat"

	//
	// Reserved for future use.
	//
	ShippingTypeCodeTypeCustomCode ShippingTypeCodeType = "CustomCode"
)

//
// This enumerated type defines the sort values that can be used in the
// <b>FavoriteSearch.ItemSort</b> filter in a <b>GetMyeBayBuying</b>
// request.
//
type SimpleItemSortCodeType string

const (

	//
	// Sorts items by Best Match, and no sort order applies. If specified,
	// then Best Match sort also applies to CategoryHistogram.
	//
	SimpleItemSortCodeTypeBestMatch SimpleItemSortCodeType = "BestMatch"

	//
	// This value is reserved for future or internal use.
	//
	SimpleItemSortCodeTypeCustomCode SimpleItemSortCodeType = "CustomCode"

	//
	// Sorts by the end time of the listing, in ascending or descending order according to the
	// <b>SortOrder</b> value.
	//
	SimpleItemSortCodeTypeEndTime SimpleItemSortCodeType = "EndTime"

	//
	// Sorts by number of bids on the item, in ascending or descending order according to the
	// <b>SortOrder</b> value.
	//
	SimpleItemSortCodeTypeBidCount SimpleItemSortCodeType = "BidCount"

	//
	// Sorts by country; no sort order can be specified.
	//
	SimpleItemSortCodeTypeCountry SimpleItemSortCodeType = "Country"

	//
	// Sorts by current bid; descending order only.
	//
	SimpleItemSortCodeTypeCurrentBid SimpleItemSortCodeType = "CurrentBid"

	//
	// Sorts by distance; ascending order only.
	//
	SimpleItemSortCodeTypeDistance SimpleItemSortCodeType = "Distance"

	//
	// Sorts by the start time of the listing; recently-listed first.
	//
	SimpleItemSortCodeTypeStartDate SimpleItemSortCodeType = "StartDate"

	//
	// Sorts by BestMatchCategoryGroup, so results are grouped by Best Match within a category.
	//
	SimpleItemSortCodeTypeBestMatchCategoryGroup SimpleItemSortCodeType = "BestMatchCategoryGroup"

	//
	// Sorts by total cost, which is item cost plus shipping cost. If
	// <b>SortOrder</b> is included and set to 'Ascending', items are sorted
	// in the following order: Lowest total cost (for items where shipping was
	// properly specified); then freight-shipping items (lowest to highest); and finally,
	// items for which shipping was not specified (lowest to highest).
	//
	SimpleItemSortCodeTypePricePlusShipping SimpleItemSortCodeType = "PricePlusShipping"
)

//
// eBay sites (by the country in which each resides) on which a user is registered
// and on which items can be listed through the Trading API.
//
type SiteCodeType string

const (

	//
	// USA, site ID 0, abbreviation US, currency USD.
	// <br/>(<a href="http://www.ebay.com" target="_blank">http://www.ebay.com</a>)
	//
	SiteCodeTypeUS SiteCodeType = "US"

	//
	// Canada, site ID 2, abbreviation CA, currencies CAD and USD.
	// <br/>(<a href="http://www.ebay.ca" target="_blank">http://www.ebay.ca</a>)
	//
	SiteCodeTypeCanada SiteCodeType = "Canada"

	//
	// United Kingdom, site ID 3, abbreviation UK, currency GBP.
	// <br/>(<a href="http://www.ebay.co.uk" target="_blank">http://www.ebay.co.uk</a>)
	//
	SiteCodeTypeUK SiteCodeType = "UK"

	//
	// Australia, site ID 15, abbreviation AU, currency AUD.
	// <br/>(<a href="http://www.ebay.com.au" target="_blank">http://www.ebay.com.au</a>)
	//
	SiteCodeTypeAustralia SiteCodeType = "Australia"

	//
	// Austria, site ID 16, abbreviation AT, currency EUR.
	// <br/>(<a href="http://www.ebay.at" target="_blank">http://www.ebay.at</a>)
	//
	SiteCodeTypeAustria SiteCodeType = "Austria"

	//
	// Belgium (French), site ID 23, abbreviation BEFR, currency EUR.
	// <br/>(<a href="http://www.ebay.be" target="_blank">http://www.ebay.be</a>)
	//
	SiteCodeTypeBelgium_French SiteCodeType = "Belgium_French"

	//
	// France, site ID 71, abbreviation FR, currency EUR.
	// <br/>(<a href="http://www.ebay.fr" target="_blank">http://www.ebay.fr</a>)
	//
	SiteCodeTypeFrance SiteCodeType = "France"

	//
	// Germany, site ID 77, abbreviation DE, currency EUR.
	// <br/>(<a href="http://www.ebay.de" target="_blank">http://www.ebay.de</a>)
	//
	SiteCodeTypeGermany SiteCodeType = "Germany"

	//
	// Italy, site ID 101, abbreviation IT, currency EUR.
	// <br/>(<a href="http://www.ebay.it" target="_blank">http://www.ebay.it</a>)
	//
	SiteCodeTypeItaly SiteCodeType = "Italy"

	//
	// Belgium (Dutch), site ID 123, abbreviation BENL, currency EUR.
	// <br/>(<a href="http://www.ebay.be" target="_blank">http://www.ebay.be</a>)
	//
	SiteCodeTypeBelgium_Dutch SiteCodeType = "Belgium_Dutch"

	//
	// Netherlands, site ID 146, abbreviation NL, currency EUR.
	// <br/>(<a href="http://www.ebay.nl" target="_blank">http://www.ebay.nl</a>)
	//
	SiteCodeTypeNetherlands SiteCodeType = "Netherlands"

	//
	// Spain, site ID 186, abbreviation ES, currency EUR.
	// <br/>(<a href="http://www.ebay.es" target="_blank">http://www.ebay.es</a>)
	//
	SiteCodeTypeSpain SiteCodeType = "Spain"

	//
	// Switzerland, site ID 193, abbreviation CH, currency CHF.
	// <br/>(<a href="http://www.ebay.ch" target="_blank">http://www.ebay.ch</a>)
	//
	SiteCodeTypeSwitzerland SiteCodeType = "Switzerland"

	//
	// Taiwan, currency TWD. Note that the old eBay Taiwan site is no longer in operation, and the new site does not use this API.
	//
	SiteCodeTypeTaiwan SiteCodeType = "Taiwan"

	//
	// Although Site ID 100 is still valid in APIs, eBay Motors US is no longer its own site, but just a vertical within the eBay US site.
	//
	SiteCodeTypeEBayMotors SiteCodeType = "eBayMotors"

	//
	// Hong Kong, site ID 201, abbreviation HK, currency HKD.
	// <br/>(<a href="http://www.ebay.com.hk" target="_blank">http://www.ebay.com.hk</a>)
	//
	SiteCodeTypeHongKong SiteCodeType = "HongKong"

	//
	// Singapore, site ID 216, abbreviation SG, currency SGD.
	// <br/>(<a href="http://www.ebay.com.sg" target="_blank">http://www.ebay.com.sg</a>)
	//
	SiteCodeTypeSingapore SiteCodeType = "Singapore"

	//
	// India, site ID 203, abbreviation IN, currency INR.
	// <br/>(<a href="http://www.ebay.in" target="_blank">http://www.ebay.in</a>)
	//
	SiteCodeTypeIndia SiteCodeType = "India"

	SiteCodeTypeChina SiteCodeType = "China"

	//
	// Ireland, site ID 205, abbreviation IE, currency EUR.
	// <br/>(<a href="http://www.ebay.ie" target="_blank">http://www.ebay.ie</a>)
	//
	SiteCodeTypeIreland SiteCodeType = "Ireland"

	//
	// Malaysia, site ID 207, abbreviation MY, currency MYR.
	// <br/>(<a href="http://www.ebay.com.my" target="_blank">http://www.ebay.com.my</a>)
	//
	SiteCodeTypeMalaysia SiteCodeType = "Malaysia"

	//
	// Philippines, site ID 211, abbreviation PH, currency PHP.
	// <br/>(<a href="http://www.ebay.ph" target="_blank">http://www.ebay.ph</a>)
	//
	SiteCodeTypePhilippines SiteCodeType = "Philippines"

	//
	// Poland, site ID 212, abbreviation PL, currency PLN.
	// <br/>(<a href="http://www.ebay.pl" target="_blank">http://www.ebay.pl</a>)
	//
	SiteCodeTypePoland SiteCodeType = "Poland"

	SiteCodeTypeSweden SiteCodeType = "Sweden"

	//
	// Reserved for internal or future use.
	//
	SiteCodeTypeCustomCode SiteCodeType = "CustomCode"

	//
	// Canada French, site ID 210, abbreviation CAFR, currencies CAD and USD.
	//
	SiteCodeTypeCanadaFrench SiteCodeType = "CanadaFrench"

	//
	// Russia, site ID 215, abbreviation RU, currency RUB. Sellers must use Merchant Integration Platform (MIP) to create and revise listings on the Russia site. Russian listings cannot be created or revised through the Trading API's add and revise calls, so 'Russia' would not be a valid value to pass in through <b>Item.Site</b> field of an Add or Revise Trading API call.
	//
	SiteCodeTypeRussia SiteCodeType = "Russia"
)

//
// Site criteria for filtering search results. The site value is determined by the
// site specified in the request (the site ID in the SOAP URL or, for Unified
// Schema XML requests, the site ID in the X-EBAY-API-SITEID HTTP Header).
//
type SiteIDFilterCodeType string

const (

	//
	// (in) Items listed in the currency implied by the site specified in the
	// request.
	//
	SiteIDFilterCodeTypeListedInCurrencyImplied SiteIDFilterCodeType = "ListedInCurrencyImplied"

	//
	// (in) Items located in the country implied by the site specified in the
	// request.
	//
	SiteIDFilterCodeTypeLocatedInCountryImplied SiteIDFilterCodeType = "LocatedInCountryImplied"

	//
	// (in) Items available to the country implied by the site specified in the
	// request. For the US site, this implies listings from ALL English-language
	// countries that are available to the US.
	//
	SiteIDFilterCodeTypeAvailableInCountryImplied SiteIDFilterCodeType = "AvailableInCountryImplied"

	//
	// (in) Items listed on the site specified in the request, regardless of listing
	// currency.
	//
	SiteIDFilterCodeTypeSiteImplied SiteIDFilterCodeType = "SiteImplied"

	//
	// (in) Items located in Belgium or listed on one of the two Belgian sites.
	//
	SiteIDFilterCodeTypeBelgiumListing SiteIDFilterCodeType = "BelgiumListing"

	//
	// (out) Reserved for internal or future use.
	//
	SiteIDFilterCodeTypeCustomCode SiteIDFilterCodeType = "CustomCode"
)

//
// This type is no longer applicable as member communication through Skype has been disabled in API calls.
//
type SkypeContactOptionCodeType string

const (

	//
	// The seller can communicate with the buyer by Skype Chat.
	//
	SkypeContactOptionCodeTypeChat SkypeContactOptionCodeType = "Chat"

	//
	// The seller can communicate with the buyer by Skype Voice.
	//
	SkypeContactOptionCodeTypeVoice SkypeContactOptionCodeType = "Voice"

	//
	// Reserved for internal or future use.
	//
	SkypeContactOptionCodeTypeCustomCode SkypeContactOptionCodeType = "CustomCode"
)

//
// This type specifies the sort order of a returned array of elements. The array or list to be sorted, the sort key, and the default sort order depend on the call.
//
type SortOrderCodeType string

const (

	//
	// The results will be sorted by the specified key in ascending (low to high) order.
	//
	SortOrderCodeTypeAscending SortOrderCodeType = "Ascending"

	//
	// The results will be sorted by the specified key in descending (high to low) order.
	//
	SortOrderCodeTypeDescending SortOrderCodeType = "Descending"

	//
	// (out) Reserved for internal or future use.
	//
	SortOrderCodeTypeCustomCode SortOrderCodeType = "CustomCode"
)

//
// This type is no longer used and was replaced by <b>ShippingLocationDetails</b>.
//
type StatusCodeType string

const (

	//
	// This field is deprecated.
	//
	//
	StatusCodeTypeActive StatusCodeType = "Active"

	//
	// This field is deprecated.
	//
	//
	StatusCodeTypeInactive StatusCodeType = "Inactive"

	//
	// This field is deprecated.
	//
	//
	StatusCodeTypeCustomCode StatusCodeType = "CustomCode"
)

//
// Specifies the type of action to carry out with SetStoreCategories.
//
type StoreCategoryUpdateActionCodeType string

const (

	//
	// (in) Add the listed categories to the store.
	//
	StoreCategoryUpdateActionCodeTypeAdd StoreCategoryUpdateActionCodeType = "Add"

	//
	// (in) Delete the listed categories from the store.
	//
	StoreCategoryUpdateActionCodeTypeDelete StoreCategoryUpdateActionCodeType = "Delete"

	//
	// (in) Move the listed categories from one place in the store category
	// structure to another.
	//
	StoreCategoryUpdateActionCodeTypeMove StoreCategoryUpdateActionCodeType = "Move"

	//
	// (in) Rename the listed store categories to the names provided.
	//
	StoreCategoryUpdateActionCodeTypeRename StoreCategoryUpdateActionCodeType = "Rename"

	//
	// (out) Reserved for internal or future use.
	//
	StoreCategoryUpdateActionCodeTypeCustomCode StoreCategoryUpdateActionCodeType = "CustomCode"
)

//
// Specifies whether the Store has a custom header.
//
type StoreCustomHeaderLayoutCodeType string

const (

	//
	// Specifies that the Store does not have a custom header.
	//
	StoreCustomHeaderLayoutCodeTypeNoHeader StoreCustomHeaderLayoutCodeType = "NoHeader"

	//
	// Specifies that the Store does have a custom header.
	//
	StoreCustomHeaderLayoutCodeTypeCustomHeaderShown StoreCustomHeaderLayoutCodeType = "CustomHeaderShown"

	//
	// (out) Reserved for internal or future use.
	//
	StoreCustomHeaderLayoutCodeTypeCustomCode StoreCustomHeaderLayoutCodeType = "CustomCode"
)

//
// Specifies how the custom listing header will be displayed.
//
type StoreCustomListingHeaderDisplayCodeType string

const (

	//
	// No custom listing header is displayed.
	//
	StoreCustomListingHeaderDisplayCodeTypeNone StoreCustomListingHeaderDisplayCodeType = "None"

	//
	// The full custom listing header is displayed.
	//
	StoreCustomListingHeaderDisplayCodeTypeFull StoreCustomListingHeaderDisplayCodeType = "Full"

	//
	// The full custom listing header and the left navigation bar is displayed.
	//
	StoreCustomListingHeaderDisplayCodeTypeFullAndLeftNavigationBar StoreCustomListingHeaderDisplayCodeType = "FullAndLeftNavigationBar"

	//
	// (out) Reserved for internal or future use.
	//
	StoreCustomListingHeaderDisplayCodeTypeCustomCode StoreCustomListingHeaderDisplayCodeType = "CustomCode"
)

//
// Specifies the type of link in the custom listing header.
//
type StoreCustomListingHeaderLinkCodeType string

const (

	//
	// No type.
	//
	StoreCustomListingHeaderLinkCodeTypeNone StoreCustomListingHeaderLinkCodeType = "None"

	//
	// Link is to an About Me page.
	//
	StoreCustomListingHeaderLinkCodeTypeAboutMePage StoreCustomListingHeaderLinkCodeType = "AboutMePage"

	//
	// Link is to a custom page.
	//
	StoreCustomListingHeaderLinkCodeTypeCustomPage StoreCustomListingHeaderLinkCodeType = "CustomPage"

	//
	// Link is to a custom category.
	//
	StoreCustomListingHeaderLinkCodeTypeCustomCategory StoreCustomListingHeaderLinkCodeType = "CustomCategory"

	//
	// (out) Reserved for internal or future use.
	//
	StoreCustomListingHeaderLinkCodeTypeCustomCode StoreCustomListingHeaderLinkCodeType = "CustomCode"
)

//
// List of possible statuses for Store custom pages.
//
type StoreCustomPageStatusCodeType string

const (

	//
	// The page is visible.
	//
	StoreCustomPageStatusCodeTypeActive StoreCustomPageStatusCodeType = "Active"

	//
	// The page is to be deleted.
	//
	StoreCustomPageStatusCodeTypeDelete StoreCustomPageStatusCodeType = "Delete"

	//
	// The page is not visible.
	//
	StoreCustomPageStatusCodeTypeInactive StoreCustomPageStatusCodeType = "Inactive"

	//
	// Reserved for internal or future use.
	//
	StoreCustomPageStatusCodeTypeCustomCode StoreCustomPageStatusCodeType = "CustomCode"
)

//
// Font selection for Store configuration.
//
type StoreFontFaceCodeType string

const (

	//
	// Arial font.
	//
	StoreFontFaceCodeTypeArial StoreFontFaceCodeType = "Arial"

	//
	// Courier font.
	//
	StoreFontFaceCodeTypeCourier StoreFontFaceCodeType = "Courier"

	//
	// Times New Roman font.
	//
	StoreFontFaceCodeTypeTimes StoreFontFaceCodeType = "Times"

	//
	// Verdana font.
	//
	StoreFontFaceCodeTypeVerdana StoreFontFaceCodeType = "Verdana"

	//
	// Reserved for internal or future use.
	//
	StoreFontFaceCodeTypeCustomCode StoreFontFaceCodeType = "CustomCode"
)

//
// Font size selection for Store configuration.
//
type StoreFontSizeCodeType string

const (

	//
	// Extra extra small.
	//
	StoreFontSizeCodeTypeXXS StoreFontSizeCodeType = "XXS"

	//
	// Extra small.
	//
	StoreFontSizeCodeTypeXS StoreFontSizeCodeType = "XS"

	//
	// Small.
	//
	StoreFontSizeCodeTypeS StoreFontSizeCodeType = "S"

	//
	// Medium.
	//
	StoreFontSizeCodeTypeM StoreFontSizeCodeType = "M"

	//
	// Large.
	//
	StoreFontSizeCodeTypeL StoreFontSizeCodeType = "L"

	//
	// Extra large.
	//
	StoreFontSizeCodeTypeXL StoreFontSizeCodeType = "XL"

	//
	// Extra extra large.
	//
	StoreFontSizeCodeTypeXXL StoreFontSizeCodeType = "XXL"

	//
	// Reserved for internal or future use.
	//
	StoreFontSizeCodeTypeCustomCode StoreFontSizeCodeType = "CustomCode"
)

type StoreHeaderStyleCodeType string

const (

	//
	// The full Store header is used.
	//
	StoreHeaderStyleCodeTypeFull StoreHeaderStyleCodeType = "Full"

	//
	// A minimized Store header is used.
	//
	StoreHeaderStyleCodeTypeMinimized StoreHeaderStyleCodeType = "Minimized"

	//
	// (out) Reserved for internal or future use.
	//
	StoreHeaderStyleCodeTypeCustomCode StoreHeaderStyleCodeType = "CustomCode"
)

//
// Set of available layouts for items listed in an eBay Store.
//
type StoreItemListLayoutCodeType string

const (

	//
	// Displays item list as a single column, with smaller item pictures.
	//
	StoreItemListLayoutCodeTypeListView StoreItemListLayoutCodeType = "ListView"

	//
	// Displays item list in two columns, with larger item pictures.
	//
	StoreItemListLayoutCodeTypeGalleryView StoreItemListLayoutCodeType = "GalleryView"

	//
	// (out) Reserved for internal or future use.
	//
	StoreItemListLayoutCodeTypeCustomCode StoreItemListLayoutCodeType = "CustomCode"
)

//
// List of available options for how items are sorted in an eBay Store.
//
type StoreItemListSortOrderCodeType string

const (

	//
	// Lists items with those ending soon listed first.
	//
	StoreItemListSortOrderCodeTypeEndingFirst StoreItemListSortOrderCodeType = "EndingFirst"

	//
	// Lists items with those newly listed appearing in the list first.
	//
	StoreItemListSortOrderCodeTypeNewlyListed StoreItemListSortOrderCodeType = "NewlyListed"

	//
	// Lists items by price in ascending order. The item with the lowest
	// starting price is listed first.
	//
	StoreItemListSortOrderCodeTypeLowestPriced StoreItemListSortOrderCodeType = "LowestPriced"

	//
	// Lists items by price in descending order. The item with the highest
	// starting price is listed first.
	//
	StoreItemListSortOrderCodeTypeHighestPriced StoreItemListSortOrderCodeType = "HighestPriced"

	//
	// Lists items by combined price and shipping cost in ascending order. The item
	// with the lowest combined starting price plus shipping cost is listed first.
	//
	StoreItemListSortOrderCodeTypeLowestPricedPlusShipping StoreItemListSortOrderCodeType = "LowestPricedPlusShipping"

	//
	// Reserved for future use.
	// Lists items by combined price and shipping cost in descending order. The item
	// with the highest combined starting price plus shipping cost is listed first.
	//
	StoreItemListSortOrderCodeTypeHighestPricedPlusShipping StoreItemListSortOrderCodeType = "HighestPricedPlusShipping"

	//
	// (out) Reserved for internal or future use.
	//
	StoreItemListSortOrderCodeTypeCustomCode StoreItemListSortOrderCodeType = "CustomCode"
)

//
// User's eBay Store subscription level.
//
type StoreSubscriptionLevelCodeType string

const (

	//
	// This closes your eBay Store and cancels your eBay Store subscription.
	// All of your current Online Auction and Fixed Price items will remain active
	// until their ending date is reached or they are sold. All your Store pictures
	// hosted on eBay will be deleted unless you have a Picture Manager
	// subscription.
	//
	StoreSubscriptionLevelCodeTypeClose StoreSubscriptionLevelCodeType = "Close"

	//
	// Basic level subscription.
	//
	StoreSubscriptionLevelCodeTypeBasic StoreSubscriptionLevelCodeType = "Basic"

	//
	// Featured level subscription.
	//
	StoreSubscriptionLevelCodeTypeFeatured StoreSubscriptionLevelCodeType = "Featured"

	//
	// Anchor level subscription.
	//
	StoreSubscriptionLevelCodeTypeAnchor StoreSubscriptionLevelCodeType = "Anchor"

	//
	// Reserved for internal or future use.
	//
	StoreSubscriptionLevelCodeTypeCustomCode StoreSubscriptionLevelCodeType = "CustomCode"
)

//
// Indicates the type of string matching to use
// when a value is submitted in CharityName. If no value is
// specified, default behavior is "StartsWith." Does not
// apply to Query.
//
type StringMatchCodeType string

const (

	//
	// (in) Reserved for internal or future use.
	//
	StringMatchCodeTypeCustomCode StringMatchCodeType = "CustomCode"

	//
	// (in) Matches strings that begin with the submitted
	// value. For example, submitting a CharityName value
	// of "heart" matches "Heart of Gold," but not "Open
	// Hearts." Default behavior if no value is
	// specified.
	//
	StringMatchCodeTypeStartsWith StringMatchCodeType = "StartsWith"

	//
	// (in) Matches strings that contain the submitted
	// value. For example, submitting a CharityName value
	// of "heart" matches both "Heart of Gold" and "Open
	// Hearts."
	//
	StringMatchCodeTypeContains StringMatchCodeType = "Contains"
)

//
// How often the summary is to be delivered.
//
type SummaryFrequencyCodeType string

const (

	//
	// Deliver every Sunday.
	//
	SummaryFrequencyCodeTypeEverySunday SummaryFrequencyCodeType = "EverySunday"

	//
	// Deliver every Monday.
	//
	SummaryFrequencyCodeTypeEveryMonday SummaryFrequencyCodeType = "EveryMonday"

	//
	// Deliver every Tuesday.
	//
	SummaryFrequencyCodeTypeEveryTuesday SummaryFrequencyCodeType = "EveryTuesday"

	//
	// Deliver every Wednesday.
	//
	SummaryFrequencyCodeTypeEveryWednesday SummaryFrequencyCodeType = "EveryWednesday"

	//
	// Deliver every Thursday.
	//
	SummaryFrequencyCodeTypeEveryThursday SummaryFrequencyCodeType = "EveryThursday"

	//
	// Deliver every Friday.
	//
	SummaryFrequencyCodeTypeEveryFriday SummaryFrequencyCodeType = "EveryFriday"

	//
	// Deliver every Saturday.
	//
	SummaryFrequencyCodeTypeEverySaturday SummaryFrequencyCodeType = "EverySaturday"

	//
	// On day 1 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn1st SummaryFrequencyCodeType = "MonthlyOn1st"

	//
	// On day 2 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn2nd SummaryFrequencyCodeType = "MonthlyOn2nd"

	//
	// On day 3 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn3rd SummaryFrequencyCodeType = "MonthlyOn3rd"

	//
	// On day 4 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn4th SummaryFrequencyCodeType = "MonthlyOn4th"

	//
	// On day 5 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn5th SummaryFrequencyCodeType = "MonthlyOn5th"

	//
	// On day 6 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn6th SummaryFrequencyCodeType = "MonthlyOn6th"

	//
	// On day 7 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn7th SummaryFrequencyCodeType = "MonthlyOn7th"

	//
	// On day 8 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn8th SummaryFrequencyCodeType = "MonthlyOn8th"

	//
	// On day 9 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn9th SummaryFrequencyCodeType = "MonthlyOn9th"

	//
	// On day 10 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn10th SummaryFrequencyCodeType = "MonthlyOn10th"

	//
	// On day 11 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn11th SummaryFrequencyCodeType = "MonthlyOn11th"

	//
	// On day 12 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn12th SummaryFrequencyCodeType = "MonthlyOn12th"

	//
	// On day 13 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn13th SummaryFrequencyCodeType = "MonthlyOn13th"

	//
	// On day 14 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn14th SummaryFrequencyCodeType = "MonthlyOn14th"

	//
	// On day 15 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn15th SummaryFrequencyCodeType = "MonthlyOn15th"

	//
	// On day 16 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn16th SummaryFrequencyCodeType = "MonthlyOn16th"

	//
	// On day 17 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn17th SummaryFrequencyCodeType = "MonthlyOn17th"

	//
	// On day 18 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn18th SummaryFrequencyCodeType = "MonthlyOn18th"

	//
	// On day 19 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn19th SummaryFrequencyCodeType = "MonthlyOn19th"

	//
	// On day 20 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn20th SummaryFrequencyCodeType = "MonthlyOn20th"

	//
	// On day 21 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn21st SummaryFrequencyCodeType = "MonthlyOn21st"

	//
	// On day 22 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn22nd SummaryFrequencyCodeType = "MonthlyOn22nd"

	//
	// On day 23 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn23rd SummaryFrequencyCodeType = "MonthlyOn23rd"

	//
	// On day 24 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn24th SummaryFrequencyCodeType = "MonthlyOn24th"

	//
	// On day 25 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn25th SummaryFrequencyCodeType = "MonthlyOn25th"

	//
	// On day 26 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn26th SummaryFrequencyCodeType = "MonthlyOn26th"

	//
	// On day 27 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn27th SummaryFrequencyCodeType = "MonthlyOn27th"

	//
	// On day 28 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn28th SummaryFrequencyCodeType = "MonthlyOn28th"

	//
	// On day 29 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn29th SummaryFrequencyCodeType = "MonthlyOn29th"

	//
	// On day 30 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn30th SummaryFrequencyCodeType = "MonthlyOn30th"

	//
	// On day 31 of the month.
	//
	SummaryFrequencyCodeTypeMonthlyOn31st SummaryFrequencyCodeType = "MonthlyOn31st"

	//
	// Every 31 days.
	//
	SummaryFrequencyCodeTypeEvery31Days SummaryFrequencyCodeType = "Every31Days"

	//
	// Every 60 days.
	//
	SummaryFrequencyCodeTypeEvery60Days SummaryFrequencyCodeType = "Every60Days"

	SummaryFrequencyCodeTypeCustomCode SummaryFrequencyCodeType = "CustomCode"
)

//
// The period of time for which to create a summary.
//
type SummaryWindowPeriodCodeType string

const (

	//
	// The last 24 hours.
	//
	SummaryWindowPeriodCodeTypeLast24Hours SummaryWindowPeriodCodeType = "Last24Hours"

	//
	// The last 7 days.
	//
	SummaryWindowPeriodCodeTypeLast7Days SummaryWindowPeriodCodeType = "Last7Days"

	//
	// The last 31 days.
	//
	SummaryWindowPeriodCodeTypeLast31Days SummaryWindowPeriodCodeType = "Last31Days"

	//
	// The current week.
	//
	SummaryWindowPeriodCodeTypeCurrentWeek SummaryWindowPeriodCodeType = "CurrentWeek"

	//
	// The prior week.
	//
	SummaryWindowPeriodCodeTypeLastWeek SummaryWindowPeriodCodeType = "LastWeek"

	//
	// The current month.
	//
	SummaryWindowPeriodCodeTypeCurrentMonth SummaryWindowPeriodCodeType = "CurrentMonth"

	//
	// The prior month.
	//
	SummaryWindowPeriodCodeTypeLastMonth SummaryWindowPeriodCodeType = "LastMonth"

	//
	// The last 60 days.
	//
	SummaryWindowPeriodCodeTypeLast60Days SummaryWindowPeriodCodeType = "Last60Days"

	SummaryWindowPeriodCodeTypeCustomCode SummaryWindowPeriodCodeType = "CustomCode"
)

//
// Status values for the processing progress for the category structure changes
// specified by a SetStoreCategories request. If the SetStoreCategories call is
// processed asynchronously, then the status is returned by
// GetStoreCategoryUpdateStatus, otherwise, the status is returned in the
// SetStoreCategories response.
//
type TaskStatusCodeType string

const (

	//
	// (out) The category changes have not started.
	//
	TaskStatusCodeTypePending TaskStatusCodeType = "Pending"

	//
	// (out) The category changes are in progress.
	//
	TaskStatusCodeTypeInProgress TaskStatusCodeType = "InProgress"

	//
	// (out) The category changes completed successfully.
	//
	TaskStatusCodeTypeComplete TaskStatusCodeType = "Complete"

	//
	// (out) The category changes failed.
	//
	TaskStatusCodeTypeFailed TaskStatusCodeType = "Failed"

	//
	// (out) Reserved for internal or future use.
	//
	TaskStatusCodeTypeCustomCode TaskStatusCodeType = "CustomCode"
)

//
// Enumerated type that lists the types of taxes that may be charged to the buyer for each order line item purchased.
//
type TaxDescriptionCodeType string

const (

	//
	// This enumeration value indicates that standard sales tax was charged to the buyer against the order line item.
	//
	TaxDescriptionCodeTypeSalesTax TaxDescriptionCodeType = "SalesTax"

	//
	// This enumeration value indicates that an electronic waste recycling fee was charged to the buyer against the order line item.
	//
	TaxDescriptionCodeTypeElectronicWasteRecyclingFee TaxDescriptionCodeType = "ElectronicWasteRecyclingFee"

	//
	// This enumeration value indicates that a tire recycling fee was charged to the buyer against the order line item.
	//
	TaxDescriptionCodeTypeTireRecyclingFee TaxDescriptionCodeType = "TireRecyclingFee"

	//
	// This enumeration value indicates that a Goods and Services import tax was charged to the buyer against the order line item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> At this time, this tax type is only applicable to the Australia site.
	// </span>
	//
	TaxDescriptionCodeTypeGST TaxDescriptionCodeType = "GST"

	//
	// Reserved for internal or future use.
	//
	TaxDescriptionCodeTypeCustomCode TaxDescriptionCodeType = "CustomCode"
)

//
// This enumerated type contains the possible values that can be returned in the <b>name</b> attribute of the <b>BuyerTaxIdentifier.Attribute</b> field. Currently, this type only contains one enumeration value, but in the future, other attributes related to the tax ID may be created for this type.
//
type TaxIdentifierAttributeCodeType string

const (

	//
	// This value indicates that the value returned in the <b>BuyerTaxIdentifier.Attribute</b> field is the country that issued the buyer tax ID.
	//
	TaxIdentifierAttributeCodeTypeIssuingCountry TaxIdentifierAttributeCodeType = "IssuingCountry"

	//
	// Reserved for internal or future use.
	//
	TaxIdentifierAttributeCodeTypeCustomCode TaxIdentifierAttributeCodeType = "CustomCode"
)

//
// This type is not currently used.
//
type TaxIdentifierCodeType string

const (
	TaxIdentifierCodeTypeCodiceFiscale TaxIdentifierCodeType = "CodiceFiscale"

	TaxIdentifierCodeTypeDNI TaxIdentifierCodeType = "DNI"

	TaxIdentifierCodeTypeRussianPassport TaxIdentifierCodeType = "RussianPassport"

	TaxIdentifierCodeTypeCPFTaxID TaxIdentifierCodeType = "CPFTaxID"

	TaxIdentifierCodeTypeTurkeyID TaxIdentifierCodeType = "TurkeyID"

	//
	// Reserved for internal or future use.
	//
	TaxIdentifierCodeTypeCustomCode TaxIdentifierCodeType = "CustomCode"
)

//
// Enumerated type that lists the types of taxes that may be charged to the buyer for each order line item purchased.
//
type TaxTypeCodeType string

const (

	//
	// This enumeration value indicates that standard sales tax was charged to the buyer against the order line item.
	//
	TaxTypeCodeTypeSalesTax TaxTypeCodeType = "SalesTax"

	//
	// This enumeration value indicates that an electronic waste recycling fee was charged to the buyer against the order line item.
	//
	TaxTypeCodeTypeWasteRecyclingFee TaxTypeCodeType = "WasteRecyclingFee"

	//
	// This enumeration value indicates that a Goods and Services import tax was charged to the buyer against the order line item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> At this time, this tax type is only applicable to the Australia site.
	// </span>
	//
	TaxTypeCodeTypeGST TaxTypeCodeType = "GST"

	//
	// Reserved for internal or future use.
	//
	TaxTypeCodeTypeCustomCode TaxTypeCodeType = "CustomCode"
)

//
// This enumerated type is deprecated.
//
type TicketEventTypeCodeType string

const (

	//
	// (in) Any event (applicable to US, UK, and DE)
	//
	TicketEventTypeCodeTypeAny TicketEventTypeCodeType = "Any"

	//
	// (in) Comedy & Kabarett (Comedy and Cabaret)
	//
	TicketEventTypeCodeTypeDE_ComedyAndKabarett TicketEventTypeCodeType = "DE_ComedyAndKabarett"

	//
	// (in) Freizeit & Events (Leisure and Events)
	//
	TicketEventTypeCodeTypeDE_FreizeitAndEvents TicketEventTypeCodeType = "DE_FreizeitAndEvents"

	//
	// (in) Konzerte & Festivals (Concerts and Festivals)
	//
	TicketEventTypeCodeTypeDE_KonzerteAndFestivals TicketEventTypeCodeType = "DE_KonzerteAndFestivals"

	//
	// (in) Kultur & Klassik (Culture and Classical)
	//
	TicketEventTypeCodeTypeDE_KulturAndKlassik TicketEventTypeCodeType = "DE_KulturAndKlassik"

	//
	// (in) Musicals & Shows
	//
	TicketEventTypeCodeTypeDE_MusicalsAndShows TicketEventTypeCodeType = "DE_MusicalsAndShows"

	//
	// (in) Sportveranstaltungen (Sporting Events)
	//
	TicketEventTypeCodeTypeDE_Sportveranstaltungen TicketEventTypeCodeType = "DE_Sportveranstaltungen"

	//
	// (in) Other events that are not the above Germany event types
	// (applicable to listings on the DE site)
	//
	TicketEventTypeCodeTypeDE_Sonstige TicketEventTypeCodeType = "DE_Sonstige"

	//
	// (in) Amusement Parks (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_AmusementParks TicketEventTypeCodeType = "UK_AmusementParks"

	//
	// (in) Comedy (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_Comedy TicketEventTypeCodeType = "UK_Comedy"

	//
	// (in) Concerts/Gigs (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_ConcertsAndGigs TicketEventTypeCodeType = "UK_ConcertsAndGigs"

	//
	// (in) Conferences/Seminars (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_ConferencesAndSeminars TicketEventTypeCodeType = "UK_ConferencesAndSeminars"

	//
	// (in) Exhibitions/Shows (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_ExhibitionsAndShows TicketEventTypeCodeType = "UK_ExhibitionsAndShows"

	//
	// (in) Experiences (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_Experiences TicketEventTypeCodeType = "UK_Experiences"

	//
	// (in) Sporting events (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_SportingEvents TicketEventTypeCodeType = "UK_SportingEvents"

	//
	// (in) Theatre/Cinema/Circus (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_TheatreCinemaAndCircus TicketEventTypeCodeType = "UK_TheatreCinemaAndCircus"

	//
	// (in) Other. Events that are not the above UK types
	// (applicable to listings on the UK site)
	//
	TicketEventTypeCodeTypeUK_Other TicketEventTypeCodeType = "UK_Other"

	//
	// (in) Concerts (applicable to listings on the US site)
	//
	TicketEventTypeCodeTypeUS_Concerts TicketEventTypeCodeType = "US_Concerts"

	//
	// (in) Movies (applicable to listings on the US site)
	//
	TicketEventTypeCodeTypeUS_Movies TicketEventTypeCodeType = "US_Movies"

	//
	// (in) Sporting events (applicable to listings on the US site)
	//
	TicketEventTypeCodeTypeUS_SportingEvents TicketEventTypeCodeType = "US_SportingEvents"

	//
	// (in) Theater (applicable to listings on the US site)
	//
	TicketEventTypeCodeTypeUS_Theater TicketEventTypeCodeType = "US_Theater"

	//
	// (in) Events that are not concerts,
	// movies, sporting events, or theater events
	// (applicable to listings on the US site)
	//
	TicketEventTypeCodeTypeUS_Other TicketEventTypeCodeType = "US_Other"

	//
	// Reserved for internal or future use.
	//
	TicketEventTypeCodeTypeCustomCode TicketEventTypeCodeType = "CustomCode"
)

//
// Indicates how the application wants eBay to handle the user's token after
// the user signs in.
//
type TokenReturnMethodCodeType string

const (

	//
	// Return the token in the HTTP redirect to the application-specified
	// accept URL.
	//
	TokenReturnMethodCodeTypeRedirect TokenReturnMethodCodeType = "Redirect"

	//
	// Leave the token at eBay so that the application can get
	// the token through the FetchToken API call (SecretId required).
	//
	TokenReturnMethodCodeTypeFetchToken TokenReturnMethodCodeType = "FetchToken"

	//
	// Reserved for future use
	//
	TokenReturnMethodCodeTypeCustomCode TokenReturnMethodCodeType = "CustomCode"
)

//
// Contains the status of the token
//
type TokenStatusCodeType string

const (

	//
	// Token is Active
	//
	TokenStatusCodeTypeActive TokenStatusCodeType = "Active"

	//
	// Token is Expired
	//
	TokenStatusCodeTypeExpired TokenStatusCodeType = "Expired"

	//
	// Token is revoked by eBay
	//
	TokenStatusCodeTypeRevokedByeBay TokenStatusCodeType = "RevokedByeBay"

	//
	// Token is revoked by user
	//
	TokenStatusCodeTypeRevokedByUser TokenStatusCodeType = "RevokedByUser"

	//
	// Token is revoked by Application
	//
	TokenStatusCodeTypeRevokedByApp TokenStatusCodeType = "RevokedByApp"

	//
	// Token is Invalid
	//
	TokenStatusCodeTypeInvalid TokenStatusCodeType = "Invalid"

	//
	// Reserved for internal or future use
	//
	TokenStatusCodeTypeCustomCode TokenStatusCodeType = "CustomCode"
)

//
// Enumerated type that consists of the Top-Rated Seller programs that exist around the world.
//
type TopRatedProgramCodeType string

const (

	//
	// If this enumeration value is returned, it indicates that the eBay user is in the US Top-Rated Seller program.
	//
	TopRatedProgramCodeTypeUS TopRatedProgramCodeType = "US"

	//
	// If this enumeration value is returned, it indicates that the eBay user is in the UK Top-Rated Seller program.
	//
	TopRatedProgramCodeTypeUK TopRatedProgramCodeType = "UK"

	//
	// If this enumeration value is returned, it indicates that the eBay user is in the Germany Top-Rated Seller program.
	//
	TopRatedProgramCodeTypeDE TopRatedProgramCodeType = "DE"

	//
	// If this enumeration value is returned, it indicates that the eBay user is in the Global Top-Rated Seller program.
	//
	TopRatedProgramCodeTypeGlobal TopRatedProgramCodeType = "Global"

	//
	// Reserved for internal or future use.
	//
	TopRatedProgramCodeTypeCustomCode TopRatedProgramCodeType = "CustomCode"
)

//
// Enumerated type listing the possible roles an eBay user may have in regards to an
// eBay order.
//
type TradingRoleCodeType string

const (

	//
	// The eBay user is acting as the buyer for the order(s). In <b>GetOrders</b>,
	// this value should be passed into the <b>OrderRole</b> field in the
	// request to retrieve orders in which the calling eBay user is the buyer in the order.
	//
	TradingRoleCodeTypeBuyer TradingRoleCodeType = "Buyer"

	//
	// The eBay user is acting as the seller for the order(s). In <b>GetOrders</b>,
	// this value should be passed into the <b>OrderRole</b> field in the
	// request to retrieve orders in which the calling eBay user is the seller in the order.
	//
	TradingRoleCodeTypeSeller TradingRoleCodeType = "Seller"

	//
	// This value is reserved for future or internal use.
	//
	TradingRoleCodeTypeCustomCode TradingRoleCodeType = "CustomCode"
)

//
// <span class="tablenote"><b>Note: </b> Currently, the only supported value for this enumeration type is <code>eBay</code>. Half.com listings will no longer be supported in APIs.
// </span>
// Specifies the site on which the purchase was made.
//
type TransactionPlatformCodeType string

const (

	//
	// This value indicates the purchase occurred on an eBay marketplace site.
	//
	TransactionPlatformCodeTypeEBay TransactionPlatformCodeType = "eBay"

	//
	// <span class="tablenote"><b>Note: </b> eBay Express no longer exists.
	// </span>
	// The order line item was created on the eBay Express site.
	//
	TransactionPlatformCodeTypeExpress TransactionPlatformCodeType = "Express"

	//
	// <span class="tablenote"><b>Note: </b> Half.com listings will no longer be supported in APIs.
	// </span>
	// The order line item was created on Half.com site.
	//
	TransactionPlatformCodeTypeHalf TransactionPlatformCodeType = "Half"

	//
	// <span class="tablenote"><b>Note: </b> Shopping.com listings are no longer supported in APIs.
	// </span>
	// The order line item was created on the Shopping.com site.
	//
	TransactionPlatformCodeTypeShopping TransactionPlatformCodeType = "Shopping"

	//
	// <span class="tablenote"><b>Note: </b> World Of Good is no longer associated with eBay.
	// </span>
	// The order line item was created on the WorldOfGood site.
	//
	TransactionPlatformCodeTypeWorldOfGood TransactionPlatformCodeType = "WorldOfGood"

	//
	// Reserved for future use.
	//
	TransactionPlatformCodeTypeCustomCode TransactionPlatformCodeType = "CustomCode"
)

//
// Enumerated type defining the possible values that can returned in the attribute of the <b>Payment.ReferenceID</b> and <b>Payment.PaymentReferenceID</b> field.
//
type TransactionReferenceCodeType string

const (

	//
	// This value is the unique identifier of an external payment transaction.
	//
	TransactionReferenceCodeTypeExternalTransactionID TransactionReferenceCodeType = "ExternalTransactionID"

	//
	// No longer applicable as the eBay Now service is no longer available to buyers and sellers.
	//
	TransactionReferenceCodeTypeMandateReferenceNumber TransactionReferenceCodeType = "MandateReferenceNumber"

	//
	// This value is reserved for future or internal use.
	//
	TransactionReferenceCodeTypeCustomCode TransactionReferenceCodeType = "CustomCode"
)

//
// This enumerated type defines the rate types that United Parcel Service (UPS) can offer to sellers for shipping.
//
type UPSRateOptionCodeType string

const (

	//
	// This enumeration value indicates that the seller is currently receiving the UPS Daily Rate for shipping items.
	//
	UPSRateOptionCodeTypeUPSDailyRates UPSRateOptionCodeType = "UPSDailyRates"

	//
	// This enumeration value indicates that the seller is currently receiving the UPS On-Demand Rate for shipping items.
	//
	UPSRateOptionCodeTypeUPSOnDemandRates UPSRateOptionCodeType = "UPSOnDemandRates"

	//
	// Reserved for internal or future use
	//
	UPSRateOptionCodeTypeCustomCode UPSRateOptionCodeType = "CustomCode"
)

//
// This enumerated type consists of the different eBay URLs that can be returned under the <b>URLDetails</b> containers of a <b>GeteBayDetails</b> response.
//
type URLTypeCodeType string

const (

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the base URL for the View Item page. The user will just input the Item ID for a listing at the end of the URL to retrieve the View Item page for that listing.
	//
	URLTypeCodeTypeViewItemURL URLTypeCodeType = "ViewItemURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the base URL for the eBay User page. The user will just input the user ID for an eBay user at the end of the URL to retrieve the eBay User page.
	//
	URLTypeCodeTypeViewUserURL URLTypeCodeType = "ViewUserURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the URL for the My eBay home page.
	//
	URLTypeCodeTypeMyeBayURL URLTypeCodeType = "MyeBayURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the URL for the user's My eBay Bids/Offer page.
	//
	URLTypeCodeTypeMyeBayBiddingURL URLTypeCodeType = "MyeBayBiddingURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the URL to the 'Didn't Win' section on the user's My eBay Bids/Offer page.
	//
	URLTypeCodeTypeMyeBayNotWonURL URLTypeCodeType = "MyeBayNotWonURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the URL to the 'Bidding' section on the user's My eBay Bids/Offer page.
	//
	URLTypeCodeTypeMyeBayWonURL URLTypeCodeType = "MyeBayWonURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the URL to the user's My eBay Watch List page.
	//
	URLTypeCodeTypeMyeBayWatchingURL URLTypeCodeType = "MyeBayWatchingURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the base URL to the user's eBay Store page. The seller will just add a forward slash (/) and their eBay Store name to get to their eBay Store home page.
	//
	URLTypeCodeTypeEBayStoreURL URLTypeCodeType = "eBayStoreURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the full URL to the small version of the eBay Marketplace logo.
	//
	URLTypeCodeTypeSmallLogoURL URLTypeCodeType = "SmallLogoURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the full URL to the medium version of the eBay Marketplace logo.
	//
	URLTypeCodeTypeMediumLogoURL URLTypeCodeType = "MediumLogoURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the full URL to the large version of the eBay Marketplace logo.
	//
	URLTypeCodeTypeLargeLogoURL URLTypeCodeType = "LargeLogoURL"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the base URL that a seller needs to enter the UI flow to make a request that a missing product be added to the eBay Catalog.
	// <br/>
	// <br/>
	// The seller will also have to use a valid OAuth token, and will pass in this OAuth token through an <b>id_token</b> query parameter. So, for the US site (the base URL will vary by site), the HTTPS Sandbox endpoint might look like the following:
	// <br/>
	// <br/>
	// <code>https://www.sandbox.ebay.com/slr/prd?id_token</code>=<em>Oauth_token</em>
	// <br/>
	// <br/>
	// Different base URLs will be returned depending on whether you call <b>GeteBayDetails</b> in Sandbox or Production environment. See the <a href="
	// https://developer.ebay.com/api-docs/sell/static/inventory/pbse-catalog-change-requests_ui.html" target="_blank">Making a catalog change request using stand-alone web flows</a> topic in the Product-Based Shopping Experience Playbook for more information.
	// <br/>
	// <br/>
	// For more information on getting OAuth access tokens, see our <a href="
	// https://developer.ebay.com/api-docs/static/oauth-tokens.html" target="_blank">OAuth access tokens</a> help topic.
	//
	URLTypeCodeTypeCreateProductUrl URLTypeCodeType = "CreateProductUrl"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the base URL that a seller needs to enter the UI flow to make a request that an existing eBay Catalog product be revised. The seller will have to append the ePID value of the catalog product to the end of the URL.
	// <br/>
	// <br/>
	// The seller will also have to use a valid OAuth token, and will pass in this OAuth token through an <b>id_token</b> query parameter. So, for the US site (the base URL will vary by site), the HTTPS Sandbox endpoint might look like the following:
	// <br/>
	// <br/>
	// <code>https://www.sandbox.ebay.com/slr/prd/149167716?id_token</code>=<em>Oauth_token</em>, where '149167716' is the ePID of the catalog product.
	// <br/>
	// <br/>
	// Different base URLs will be returned depending on whether you call <b>GeteBayDetails</b> in Sandbox or Production environment. See the <a href="
	// https://developer.ebay.com/api-docs/sell/static/inventory/pbse-catalog-change-requests_ui.html" target="_blank">Making a catalog change request using stand-alone web flows</a> topic in the Product-Based Shopping Experience Playbook for more information.
	// <br/>
	// <br/>
	// For more information on getting OAuth access tokens, see our <a href="
	// https://developer.ebay.com/api-docs/static/oauth-tokens.html" target="_blank">OAuth access tokens</a> help topic.
	//
	URLTypeCodeTypeAppealProductUrl URLTypeCodeType = "AppealProductUrl"

	//
	// This value indicates that the URL in the corresponding <b>URL</b> field is the base URL that a seller needs to enter the UI flow to get the status of a catalog change request (request for a new catalog product or request to revise an existing product). The seller will have to append the identifier of the catalog change request to the end of the URL.
	// <br/>
	// <br/>
	// The seller will also have to use a valid token, and will pass in this token through an <b>id_token</b> query parameter. The authentication tokens are not yet available, but eBay will be sharing detailed instructions on how to authenticate and invoke these pages soon.
	// <br/>
	// <br/>
	// For the US site (the base URL will vary by site), the HTTPS Sandbox endpoint might look like the following:
	// <br/>
	// <br/>
	// <code>https://www.sandbox.ebay.com/slr/prd/status/5ac3cf22ca4c591b0c324749?id_token</code>=<em>token_value</em>, where '5ac3cf22ca4c591b0c324749' is the identifier of the catalog change request.
	// <br/>
	// <br/>
	// Different base URLs will be returned depending on whether you call <b>GeteBayDetails</b> in Sandbox or Production environment. See the <a href="
	// https://developer.ebay.com/api-docs/sell/static/inventory/pbse-catalog-change-requests_ui.html" target="_blank">Making a catalog change request using stand-alone web flows</a> topic in the Product-Based Shopping Experience Playbook for more information.
	//
	URLTypeCodeTypeManageProductUrl URLTypeCodeType = "ManageProductUrl"

	//
	// Reserved for future use.
	//
	URLTypeCodeTypeCustomCode URLTypeCodeType = "CustomCode"
)

//
// This enumerated type defines the rate types that United States Postal Service (USPS) can offer to sellers for shipping.
//
type USPSRateOptionCodeType string

const (

	//
	// This enumeration value indicates that the seller is currently receiving the USPS Discounted Rate for shipping items.
	//
	USPSRateOptionCodeTypeUSPSDiscounted USPSRateOptionCodeType = "USPSDiscounted"

	//
	// This enumeration value indicates that the seller is currently receiving the USPS Retail Rate for shipping items.
	//
	USPSRateOptionCodeTypeUSPSRetail USPSRateOptionCodeType = "USPSRetail"

	//
	// Reserved for internal or future use
	//
	USPSRateOptionCodeTypeCustomCode USPSRateOptionCodeType = "CustomCode"
)

//
// Units of measure that you can use to specify properties such as weight and size
// dimensions.
//
type UnitCodeType string

const (

	//
	// Kilograms
	//
	UnitCodeTypeKg UnitCodeType = "kg"

	//
	// Grams
	//
	UnitCodeTypeGm UnitCodeType = "gm"

	//
	// Pounds
	//
	UnitCodeTypeLbs UnitCodeType = "lbs"

	//
	// Ounces
	//
	UnitCodeTypeOz UnitCodeType = "oz"

	//
	// Centimeters
	//
	UnitCodeTypeCm UnitCodeType = "cm"

	//
	// Milimeters
	//
	UnitCodeTypeMm UnitCodeType = "mm"

	//
	// Inches
	//
	UnitCodeTypeInches UnitCodeType = "inches"

	//
	// Feet
	//
	UnitCodeTypeFt UnitCodeType = "ft"

	//
	// Reserved for internal or future use.
	//
	UnitCodeTypeCustomCode UnitCodeType = "CustomCode"
)

//
// Enumeration type that indicates the method used to open an Unpaid Item case.
//
type UnpaidItemCaseOpenTypeCodeType string

const (

	//
	// This value indicates that the Unpaid Item case was opened automatically
	// through eBay's Unpaid Item Assistant feature.
	//
	UnpaidItemCaseOpenTypeCodeTypeAuto UnpaidItemCaseOpenTypeCodeType = "Auto"

	//
	// This value indicates that the seller opened an Unpaid Item case manually
	// through the Resolution Center or by using the Trading API's
	// <strong>AddDispute</strong> call.
	//
	UnpaidItemCaseOpenTypeCodeTypeManual UnpaidItemCaseOpenTypeCodeType = "Manual"

	//
	// This value is reserved for future or internal use.
	//
	UnpaidItemCaseOpenTypeCodeTypeCustomCode UnpaidItemCaseOpenTypeCodeType = "CustomCode"
)

//
// Enumeration type that indicates the current status of an Unpaid Item case.
//
type UnpaidItemCaseStatusTypeCodeType string

const (

	//
	// This value indicates that the Unpaid Item case is open.
	//
	UnpaidItemCaseStatusTypeCodeTypeOpen UnpaidItemCaseStatusTypeCodeType = "Open"

	//
	// This value indicates that the Unpaid Item case is closed with payment
	// received from the buyer.
	//
	UnpaidItemCaseStatusTypeCodeTypeClosedWithPayment UnpaidItemCaseStatusTypeCodeType = "ClosedWithPayment"

	//
	// This value indicates that the Unpaid Item case is closed with no payment
	// received from the buyer.
	//
	UnpaidItemCaseStatusTypeCodeTypeClosedWithoutPayment UnpaidItemCaseStatusTypeCodeType = "ClosedWithoutPayment"

	//
	// This value is reserved for future or internal use.
	//
	UnpaidItemCaseStatusTypeCodeTypeCustomCode UnpaidItemCaseStatusTypeCodeType = "CustomCode"
)

//
// This enumerated type consists of each Unpaid Item case state.
//
type UnpaidItemStatusTypeCodeType string

const (

	//
	// This enumeration value indicates that the seller's request for a Final Value Fee credit has been denied.
	//
	UnpaidItemStatusTypeCodeTypeFinalValueFeeDenied UnpaidItemStatusTypeCodeType = "FinalValueFeeDenied"

	//
	// This enumeration value indicates that the Final Value Fee has been credited back to the seller's account.
	//
	UnpaidItemStatusTypeCodeTypeFinalValueFeeCredited UnpaidItemStatusTypeCodeType = "FinalValueFeeCredited"

	//
	// This enumeration value indicates that the seller is eligible to received a Final Value Fee credit back to the their account.
	//
	UnpaidItemStatusTypeCodeTypeFinalValueFeeEligible UnpaidItemStatusTypeCodeType = "FinalValueFeeEligible"

	//
	// This enumeration value indicates that the Unpaid Item case is currently waiting for a response from the seller.
	//
	UnpaidItemStatusTypeCodeTypeAwaitingSellerResponse UnpaidItemStatusTypeCodeType = "AwaitingSellerResponse"

	//
	// This enumeration value indicates that the Unpaid Item case is currently waiting for a response from the buyer.
	//
	UnpaidItemStatusTypeCodeTypeAwaitingBuyerResponse UnpaidItemStatusTypeCodeType = "AwaitingBuyerResponse"

	//
	// This enumeration value indicates that the Unpaid Item case has been opened by the seller against the buyer.
	//
	UnpaidItemStatusTypeCodeTypeUnpaidItemFiled UnpaidItemStatusTypeCodeType = "UnpaidItemFiled"

	//
	// This enumeration value indicates that the seller is eligible to create an Unpaid Item case against the buyer.
	//
	UnpaidItemStatusTypeCodeTypeUnpaidItemEligible UnpaidItemStatusTypeCodeType = "UnpaidItemEligible"

	//
	// Reserved for internal or future use.
	//
	UnpaidItemStatusTypeCodeTypeCustomCode UnpaidItemStatusTypeCodeType = "CustomCode"
)

//
// This is a string wrapper for the eBay ID that uniquely identifies a user. This is used by
// several other types to identify a specific eBay user, such as DisputeType.xsd, FeedbackInfoType.xsd,
// GetAllBidders, OrderType, and so on.
// <br><br>For GetAllBidders,
// some bidder information is anonymous, to protect bidders from fraud. If the seller makes
// this API call, the actual IDs of all bidders on the seller's item will be returned.
// If a bidder makes this API call, the bidder's actual ID will be returned, but information
// for all competing bidders or outside watchers will be returned as anonymized userIDs.
//
type UserIDType string

//
// Enumerated type this is used to indicate the type of user that initiated a monetary transaction.
//
type UserIdentityCodeType string

const (

	//
	// This enumeration value indicates that an eBay user initiated the monetary transaction.
	//
	UserIdentityCodeTypeEBayUser UserIdentityCodeType = "eBayUser"

	//
	// This enumeration value indicates that an eBay partner (such as Pitney Bowes) initiated the monetary transaction.
	//
	UserIdentityCodeTypeEBayPartner UserIdentityCodeType = "eBayPartner"

	//
	// This value is reserved for future use.
	//
	UserIdentityCodeTypeCustomCode UserIdentityCodeType = "CustomCode"
)

//
// These codes indicate the current state or status of an eBay
// user account.
//
type UserStatusCodeType string

const (

	//
	// This value indicates that the status of the user's eBay account is unknown. This value should seldom, if ever, be returned and typically represents a problem.
	//
	UserStatusCodeTypeUnknown UserStatusCodeType = "Unknown"

	//
	// This value indicates that the eBay user's account is suspended. A user with a suspended account cannot participate in buying or selling activity.
	//
	UserStatusCodeTypeSuspended UserStatusCodeType = "Suspended"

	//
	// This value indicates that the eBay user's account is a confirmed, active account.
	//
	UserStatusCodeTypeConfirmed UserStatusCodeType = "Confirmed"

	//
	// This value indicates that the eBay User has completed online registration, but has either not responded to confirmation email or has not yet been sent the confirmation email. Or, if this user began registration as a seller but did not complete it, the user will have this status. A seller with this status can begin to list an item but cannot complete the listing until the seller completes seller registration.
	//
	UserStatusCodeTypeUnconfirmed UserStatusCodeType = "Unconfirmed"

	//
	// This value indicates that the user originally registered on AuctionWeb (pre-eBay), but that user never re-registered on eBay. Note that there are very few (if any) eBay accounts in the 'Ghost' state.
	//
	UserStatusCodeTypeGhost UserStatusCodeType = "Ghost"

	//
	// This value indicates that the eBay user's account is in maintenance mode.
	//
	UserStatusCodeTypeInMaintenance UserStatusCodeType = "InMaintenance"

	//
	// This value indicates that the eBay user's account has been deleted.
	//
	UserStatusCodeTypeDeleted UserStatusCodeType = "Deleted"

	//
	// This value indicates that the user has completed the registration and confirmation process, but needs to complete verification of credit card information. A user has this status if this user began registration as a seller but did not complete it. A seller with this status can begin to list an item but cannot complete the listing until the seller completes seller registration.
	//
	UserStatusCodeTypeCreditCardVerify UserStatusCodeType = "CreditCardVerify"

	//
	// This value indicates that the eBay user's account is currently on hold. A common reason for a user's account to go on hold is a non-payment of the monthly eBay invoice. A user cannot sell or buy items if their account is on hold.
	//
	UserStatusCodeTypeAccountOnHold UserStatusCodeType = "AccountOnHold"

	//
	// This value indicates that the user record has been merged with another account record for the same user
	//
	UserStatusCodeTypeMerged UserStatusCodeType = "Merged"

	//
	// This value indicates that the eBay User has completed online registration, and eBay has just sent the user a registration code in a confirmation email. The eBay user will have to respond to the confirmation email to get their account confirmed.
	//
	UserStatusCodeTypeRegistrationCodeMailOut UserStatusCodeType = "RegistrationCodeMailOut"

	//
	// This value indicates that the user has scheduled an account closure but eBay has yet to process the closure request.
	//
	UserStatusCodeTypeTermPending UserStatusCodeType = "TermPending"

	//
	// <span class="tablenote"><b>Note: </b> The Half.com site has been shut down, so this value is no longer applicable.
	// </span>
	// User has completed the registration for Half.com and opted
	// to automatically also be registered with eBay, but the
	// registration confirmation is still pending
	//
	UserStatusCodeTypeUnconfirmedHalfOptIn UserStatusCodeType = "UnconfirmedHalfOptIn"

	//
	// <span class="tablenote"><b>Note: </b> The Half.com site has been shut down, so this value is no longer applicable.
	// </span>
	// User has completed the registration for Half.com and opted to automatically also be registered with eBay, but the user needs to complete verification of credit card information. A user has this status on eBay if this user began registration as a seller but did not complete it. A seller with this status can begin to list an item but cannot complete the listing until the seller completes seller registration.
	//
	UserStatusCodeTypeCreditCardVerifyHalfOptIn UserStatusCodeType = "CreditCardVerifyHalfOptIn"

	//
	// This value is no longer applicable.
	//
	UserStatusCodeTypeUnconfirmedPassport UserStatusCodeType = "UnconfirmedPassport"

	//
	// This value is no longer applicable.
	//
	UserStatusCodeTypeCreditCardVerifyPassport UserStatusCodeType = "CreditCardVerifyPassport"

	//
	// This value is no longer applicable.
	//
	UserStatusCodeTypeUnconfirmedExpress UserStatusCodeType = "UnconfirmedExpress"

	//
	// This value indicates that the user is a guest user. The user has not added a password and has not confirmed an email address.
	// The user has not signed up as a regular user, but has agreed to the User Agreement and Privacy Policy.
	// The user has been through the buying flow for a guest;
	// the user has been through checkout using the streamlined Buy-It-Now flow.
	//
	UserStatusCodeTypeGuest UserStatusCodeType = "Guest"

	//
	// Reserved for internal or future use
	//
	UserStatusCodeTypeCustomCode UserStatusCodeType = "CustomCode"
)

//
// Indicates whether or not the user is subject to VAT.
// Users who have registered with eBay as VAT-exempt are not
// subject to VAT. See documentation on Value-Added Tax (VAT).
//
type VATStatusCodeType string

const (

	//
	// (out) VAT is not applicable
	//
	VATStatusCodeTypeNoVATTax VATStatusCodeType = "NoVATTax"

	//
	// (out) Residence in a country with VAT and user is not registered as VAT-exempt
	//
	VATStatusCodeTypeVATTax VATStatusCodeType = "VATTax"

	//
	// (out) Residence in a country with VAT and user is registered as VAT-exempt
	//
	VATStatusCodeTypeVATExempt VATStatusCodeType = "VATExempt"

	//
	// (out) Reserved for internal or future use
	//
	VATStatusCodeTypeCustomCode VATStatusCodeType = "CustomCode"
)

//
// Enumerated type that defines the date format that is used for a date-related field that is returned in the <b>GetCategorySpecifics</b> call.
// on which are enforceable for validation purposes
//
type ValueFormatCodeType string

const (

	//
	// This enumeration value indicates that a full date is used, including the month, day, and year in the following format:
	// '<em>YYYYMMDD</em>'
	//
	ValueFormatCodeTypeFullDate ValueFormatCodeType = "FullDate"

	//
	// This enumeration value indicates that a partial date is used, including the month and year in the following format: '<em>YYYYMM</em>'
	//
	ValueFormatCodeTypePartialDate ValueFormatCodeType = "PartialDate"

	//
	// This enumeration value indicates that only the year is returned in the following format: '<em>YYYY</em>'
	//
	ValueFormatCodeTypeYear ValueFormatCodeType = "Year"

	//
	// Reserved for future or internal use.
	//
	ValueFormatCodeTypeCustomCode ValueFormatCodeType = "CustomCode"
)

//
// This enumeration type is used by multiple Trading API calls, including <b>GetCategorySpecifics</b> call and order management calls (like <b>GetOrders</b>).
// <br/><br/>
// The values used by <b>GetCategorySpecifics</b> is the data type of the recommended Item Specific called out in the <b>NameRecommendation.Name</b> field.
// <br/><br/>
// The values used by <b>GetOrders</b> (and other order management calls) is the type of tax ID used in the <strong>BuyerTaxIdentifier</strong> container.
//
type ValueTypeCodeType string

const (

	//
	// This value indicates that the recommended Item Specific should have numeric values with a decimal point, like 3.14159. Item Specific values cannot be  expressed as float or double types.
	//
	ValueTypeCodeTypeDecimal ValueTypeCodeType = "Decimal"

	//
	// This value indicates that the recommended Item Specific should have integer values (no decimal point), like 3. Item Specific values cannot be expressed as float or double types.
	//
	ValueTypeCodeTypeNumeric ValueTypeCodeType = "Numeric"

	//
	// This value indicates that the value(s) of the recommended Item Specific should be free-form text. This is the default value. The maximum length of a text-based Item Specific is general 65 characters, but instance aspects (like 'Bundle Description' or 'California Prop 65 Warning') are allowed longer lengths.
	//
	ValueTypeCodeTypeText ValueTypeCodeType = "Text"

	//
	// This value indicates that the recommended Item Specific is an International Standard Book Number (ISBN) value. ISBNs can contain either 10 or 13 characters.
	//
	ValueTypeCodeTypeISBN ValueTypeCodeType = "ISBN"

	//
	// This value indicates that the recommended Item Specific is a Universal Product Code (UPC) value. UPCs contain 12 characters.
	//
	ValueTypeCodeTypeUPC ValueTypeCodeType = "UPC"

	//
	// This value indicates that the recommended Item Specific is a European Article Number (EAN). EANs contain 13 characters.
	//
	ValueTypeCodeTypeEAN ValueTypeCodeType = "EAN"

	//
	// This value indicates that the value(s) of the recommended Item Specific is a date value, which will should use the date format specified in the <b>ValueFormat</b> field.
	//
	ValueTypeCodeTypeDate ValueTypeCodeType = "Date"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a Codice Fiscale ID, which is an identifier used by the Italian government to identify taxpayers in Italy.
	//
	ValueTypeCodeTypeCodiceFiscale ValueTypeCodeType = "CodiceFiscale"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a Spanish National Identity Number, which is one identifier used by the Spanish government to identify taxpayers in Spain. In Spanish, this ID is known as the 'Documento nacional de identidad'. The other tax identifier for Spanish residents is the NIE number, or 'Numero de Identidad de Extranjero'.
	//
	ValueTypeCodeTypeDNI ValueTypeCodeType = "DNI"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a Russian Passport number.
	//
	ValueTypeCodeTypeRussianPassport ValueTypeCodeType = "RussianPassport"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a Tax Registration Number, which is an identifier used by the Brazilian government to identify taxpayers in Brazil. In Portuguese, this ID is known as the 'Cadastro de Pessoas Fisicas', or 'CPF'.
	//
	ValueTypeCodeTypeCPFTaxID ValueTypeCodeType = "CPFTaxID"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a Turkish Identification Number, which is an identifier used by the Turkish government to identify taxpayers in Turkey. In Turkish, this ID is known as the 'Turkiye Cumhuriyeti Kimlik Numarasi', often abbreviated as T.C. Kimlik No.
	//
	ValueTypeCodeTypeTurkeyID ValueTypeCodeType = "TurkeyID"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a NIE Number, which is one identifier used by the Spanish government to identify taxpayers in Spain. 'NIE' stands for 'Numero de Identidad de Extranjero'. The other tax identifier for Spanish residents is the DNI number, or 'Documento nacional de identidad'. Spanish residents can also be identified by their Spanish VAT (Value-Added Tax) number, which is also called the 'Numero de Identificacion Fiscal' or NIF.
	//
	ValueTypeCodeTypeNIE ValueTypeCodeType = "NIE"

	//
	// This value indicates that the ID in the <b>ID</b> field is an NIF Number, which is also known as their Spanish VAT (Value-Added Tax) number. 'NIF' stands for 'Numero de Identificacion Fiscal'. Spanish residents can also be identified by their DNI ('Documento nacional de identidad') number or their NIE ('Numero de Identidad de Extranjero') number.
	//
	ValueTypeCodeTypeNIF ValueTypeCodeType = "NIF"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a Cedula number, which is an identifier used by the Chilean, Columbian, and Dominican Republic governments to identify taxpayers in those countries. This ID is sometimes referred to as a 'Cedula de Identidad'.
	//
	ValueTypeCodeTypeCEDULA ValueTypeCodeType = "CEDULA"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a NIT number, which is an identifier used by the Guatemalan government to identify taxpayers in Guatemala. In Spanish, this ID is known as the 'Numero de identificacion tributaria'.
	//
	ValueTypeCodeTypeNIT ValueTypeCodeType = "NIT"

	//
	// This value indicates that the identifier in the <b>ID</b> field is a driver's license number.
	//
	ValueTypeCodeTypeDriverLicense ValueTypeCodeType = "DriverLicense"

	//
	// This value indicates that the tax ID in the <b>ID</b> field is a CNPJ number, which is an identifier used by the Brazilian government to identify taxpayers in Brazil. In Portuguese, this ID is known as the 'Cadastro Nacional da Pessoa Juridica'.
	//
	ValueTypeCodeTypeCNPJ ValueTypeCodeType = "CNPJ"

	//
	// Reserved for future use.
	//
	ValueTypeCodeTypeCustomCode ValueTypeCodeType = "CustomCode"
)

//
// Enumerated type that indicates if a specific Item Specific can be used to classify pictures in a multiple-variation listing. For example, in a multiple-variation listing that featured t-shirts of numerous colors and sizes, the 'Color' Item Specific would most likely be 'Enabled', and would be a good candidate value for the <b>Variations.Pictures.VariationSpecificName</b> field in a 'FixedPriceItem' call when creating, revising, or relisting an item. Then, the seller would provide URLs to multiple pictures showcasing the available colors of the shirts. These URLs are specified through multiple <b>Variations.Pictures.VariationSpecificPictureSet.PictureURL</b> fields.
//
type VariationPictureRuleCodeType string

const (

	//
	// This value indicates that the corresponding Item Specific name must be used in the <b>Variations.Pictures.VariationSpecificName</b> field if the   seller is providing picture URLs through the <b>Variations.Pictures.VariationSpecificPictureSet</b> container in a 'FixedPriceItem' call when creating, revising, or relisting an item.
	//
	VariationPictureRuleCodeTypeRequired VariationPictureRuleCodeType = "Required"

	//
	// This value indicates that the corresponding Item Specific name can be used in the <b>Variations.Pictures.VariationSpecificName</b> field if the   seller is providing picture URLs through the <b>Variations.Pictures.VariationSpecificPictureSet</b> container in a 'FixedPriceItem' call when creating, revising, or relisting an item. Unlike the 'Required' value, 'Enabled' indicates that corresponding Item Specific name is just one option, and they may be other options to use as a <b>VariationSpecificName</b> value.
	//
	VariationPictureRuleCodeTypeEnabled VariationPictureRuleCodeType = "Enabled"

	//
	// This value indicates that the corresponding Item Specific name cannot be used in the <b>Variations.Pictures.VariationSpecificName</b> field if the seller is providing picture URLs through the <b>Variations.Pictures.VariationSpecificPictureSet</b> container in a 'FixedPriceItem' call when creating, revising, or relisting an item. The seller will have to find an Item Specific that is either 'Enabled' or 'Required'  to use as a <b>VariationSpecificName</b> value.
	//
	VariationPictureRuleCodeTypeDisabled VariationPictureRuleCodeType = "Disabled"

	//
	// Reserved for future use.
	//
	VariationPictureRuleCodeTypeCustomCode VariationPictureRuleCodeType = "CustomCode"
)

//
// This enumerated type is used to indicate if an Item Specific can be used at the variation level of a listing. This type is only applicable to categories that support multiple-variation listings. If an Item Specific cannot be used at the variation level, it usually indicates that the particular Item Specific should only be specified at the listing-level, as it is a product aspect that should be shared by all variations in the multiple-variation listing.
//
type VariationSpecificsRuleCodeType string

const (

	//
	// This value indicates that the corresponding Item Specific can be specified at the variation level. In the <b>AddFixedPriceItem</b> call, variation-specific name-value pairs are specified under the <b>Variation.VariationSpecifics.NameValueList</b> container.
	//
	VariationSpecificsRuleCodeTypeEnabled VariationSpecificsRuleCodeType = "Enabled"

	//
	// This value indicates that the corresponding Item Specific cannot be specified at the variation level. If an Item Specific cannot be used at the variation level, it usually indicates that the particular Item Specific should only be specified at the listing-level, as it is a product aspect that should be shared by all variations in the multiple-variation listing.
	//
	VariationSpecificsRuleCodeTypeDisabled VariationSpecificsRuleCodeType = "Disabled"

	//
	// Reserved for future use.
	//
	VariationSpecificsRuleCodeTypeCustomCode VariationSpecificsRuleCodeType = "CustomCode"
)

//
// The VeRO reporting status for an item.
//
type VeROItemStatusCodeType string

const (

	//
	// (out) The VeRO report request for the item has been received by eBay.
	//
	VeROItemStatusCodeTypeReceived VeROItemStatusCodeType = "Received"

	//
	// (out) The VeRO report request for the item has been submitted to eBay.
	//
	VeROItemStatusCodeTypeSubmitted VeROItemStatusCodeType = "Submitted"

	//
	// (out) The reported item has been ended by eBay.
	//
	VeROItemStatusCodeTypeRemoved VeROItemStatusCodeType = "Removed"

	//
	// (out) The VeRO report request for the item failed.
	//
	VeROItemStatusCodeTypeSubmissionFailed VeROItemStatusCodeType = "SubmissionFailed"

	//
	// (out) The VeRO report request for the item has been received by eBay, but
	// additional clarification is needed before eBay can end the item.
	//
	VeROItemStatusCodeTypeClarificationRequired VeROItemStatusCodeType = "ClarificationRequired"

	//
	// (out) Reserved for internal or future use.
	//
	VeROItemStatusCodeTypeCustomCode VeROItemStatusCodeType = "CustomCode"
)

//
// Enumerated type that contains the possible states of a VeRO Report packet. A VeRO Report packet is a set of one or more items that have been reported by a Verified Rights Owner as infringing upon the owner's intellectual property rights.
//
type VeROReportPacketStatusCodeType string

const (

	//
	// This value indicates that the VeRO Report packet has been received by eBay.
	//
	VeROReportPacketStatusCodeTypeReceived VeROReportPacketStatusCodeType = "Received"

	//
	// This value indicates that eBay is in the process of reviewing the VeRO Report packet. For a VeRO Report packet consisting of multiple items, the call user can look at the <b>ReportedItemDetails</b> container in the <b>GetVeROReportStatus</b> response to get more details about individual items in the VeRO Report packet.
	//
	VeROReportPacketStatusCodeTypeInProcess VeROReportPacketStatusCodeType = "InProcess"

	//
	// This value indicates that the VeRO Report packet has been processed by eBay.
	//
	VeROReportPacketStatusCodeTypeProcessed VeROReportPacketStatusCodeType = "Processed"

	//
	// This value is reserved for internal or future use.
	//
	VeROReportPacketStatusCodeTypeCustomCode VeROReportPacketStatusCodeType = "CustomCode"
)

//
// This type is deprecated, as product warranties are no longer applicable or supported in eBay APIs.
//
type WarrantyDurationOptionsCodeType string

const (

	//
	// This value indicates that the duration of the warranty will be one month from time of purchase. If this value is returned in the <b>ReturnPolicyDetails.WarrantyDuration</b> container of the <b>GeteBayDetails</b> response, the seller may offer this warranty duration to the buyer. The warranty duration value is specified through the <b>ReturnPolicy.WarrantyDurationOption</b> field in an add/revise/relist API call.
	//
	WarrantyDurationOptionsCodeTypeMonths_1 WarrantyDurationOptionsCodeType = "Months_1"

	//
	// This value indicates that the duration of the warranty will be three months from time of purchase. If this value is returned in the <b>ReturnPolicyDetails.WarrantyDuration</b> container of the <b>GeteBayDetails</b> response, the seller may offer this warranty duration to the buyer. The warranty duration value is specified through the <b>ReturnPolicy.WarrantyDurationOption</b> field in an add/revise/relist API call.
	//
	WarrantyDurationOptionsCodeTypeMonths_3 WarrantyDurationOptionsCodeType = "Months_3"

	//
	// This value indicates that the duration of the warranty will be six months from time of purchase. If this value is returned in the <b>ReturnPolicyDetails.WarrantyDuration</b> container of the <b>GeteBayDetails</b> response, the seller may offer this warranty duration to the buyer. The warranty duration value is specified through the <b>ReturnPolicy.WarrantyDurationOption</b> field in an add/revise/relist API call.
	//
	WarrantyDurationOptionsCodeTypeMonths_6 WarrantyDurationOptionsCodeType = "Months_6"

	//
	// This value indicates that the duration of the warranty will be one year from time of purchase. If this value is returned in the <b>ReturnPolicyDetails.WarrantyDuration</b> container of the <b>GeteBayDetails</b> response, the seller may offer this warranty duration to the buyer. The warranty duration value is specified through the <b>ReturnPolicy.WarrantyDurationOption</b> field in an add/revise/relist API call.
	//
	WarrantyDurationOptionsCodeTypeYears_1 WarrantyDurationOptionsCodeType = "Years_1"

	//
	// This value indicates that the duration of the warranty will be two years from time of purchase. If this value is returned in the <b>ReturnPolicyDetails.WarrantyDuration</b> container of the <b>GeteBayDetails</b> response, the seller may offer this warranty duration to the buyer. The warranty duration value is specified through the <b>ReturnPolicy.WarrantyDurationOption</b> field in an add/revise/relist API call.
	//
	WarrantyDurationOptionsCodeTypeYears_2 WarrantyDurationOptionsCodeType = "Years_2"

	//
	// This value indicates that the duration of the warranty will be three years from time of purchase. If this value is returned in the <b>ReturnPolicyDetails.WarrantyDuration</b> container of the <b>GeteBayDetails</b> response, the seller may offer this warranty duration to the buyer. The warranty duration value is specified through the <b>ReturnPolicy.WarrantyDurationOption</b> field in an add/revise/relist API call.
	//
	WarrantyDurationOptionsCodeTypeYears_3 WarrantyDurationOptionsCodeType = "Years_3"

	//
	// This value indicates that the duration of the warranty is longer than three years from time of purchase. If this value is returned in the <b>ReturnPolicyDetails.WarrantyDuration</b> container of the <b>GeteBayDetails</b> response, the seller may offer this warranty duration to the buyer. The warranty duration value is specified through the <b>ReturnPolicy.WarrantyDurationOption</b> field in an add/revise/relist API call.
	//
	WarrantyDurationOptionsCodeTypeYears_MoreThan3 WarrantyDurationOptionsCodeType = "Years_MoreThan3"

	//
	// This value is reserved for internal or future use.
	//
	WarrantyDurationOptionsCodeTypeCustomCode WarrantyDurationOptionsCodeType = "CustomCode"
)

//
// This type is deprecated, as product warranties are no longer applicable or supported in eBay APIs.
//
type WarrantyOfferedCodeType string

const (

	//
	// If this value is returned in the <b>ReturnPolicyDetails.WarrantyOffered</b> container of the <b>GeteBayDetails</b> response, the seller may offer a warranty to the buyer. This value that should be passed into the <b>ReturnPolicy.WarrantyOfferedOption</b> field of an add/revise/relist API call if the seller wishes to offer a warranty to the buyer.
	//
	WarrantyOfferedCodeTypeWarrantyOffered WarrantyOfferedCodeType = "WarrantyOffered"

	//
	// This value is reserved for internal or future use.
	//
	WarrantyOfferedCodeTypeCustomCode WarrantyOfferedCodeType = "CustomCode"
)

//
// This type is deprecated, as product warranties are no longer applicable or supported in eBay APIs.
//
type WarrantyTypeOptionsCodeType string

const (

	//
	// If this value is returned in the <b>ReturnPolicyDetails.WarrantyType</b> container of the <b>GeteBayDetails</b> response, the seller may offer a replacement warranty to the buyer. The seller can offer a replacement warranty through the <b>ReturnPolicy.WarrantyTypeOption</b> field in an add/revise/relist API call.
	//
	WarrantyTypeOptionsCodeTypeReplacementWarranty WarrantyTypeOptionsCodeType = "ReplacementWarranty"

	//
	// If this value is returned in the <b>ReturnPolicyDetails.WarrantyType</b> container of the <b>GeteBayDetails</b> response, the seller may offer a dealer warranty to the buyer. The seller can offer a dealer warranty through the <b>ReturnPolicy.WarrantyTypeOption</b> field in an add/revise/relist API call.
	//
	WarrantyTypeOptionsCodeTypeDealerWarranty WarrantyTypeOptionsCodeType = "DealerWarranty"

	//
	// If this value is returned in the <b>ReturnPolicyDetails.WarrantyType</b> container of the <b>GeteBayDetails</b> response, the seller may offer a manufacturer warranty to the buyer. The seller can offer a manufacturer warranty through the <b>ReturnPolicy.WarrantyTypeOption</b> field in an add/revise/relist API call.
	//
	WarrantyTypeOptionsCodeTypeManufacturerWarranty WarrantyTypeOptionsCodeType = "ManufacturerWarranty"

	//
	// This value is reserved for internal or future use.
	//
	WarrantyTypeOptionsCodeTypeCustomCode WarrantyTypeOptionsCodeType = "CustomCode"
)

//
// This enumerated type contains a list of wireless carriers that may be providing SMS messages for a Platform Notifications subscriber.
//
type WirelessCarrierIDCodeType string

const (

	//
	// This value is no longer applicable, as Cingular is no longer in existence.
	//
	WirelessCarrierIDCodeTypeCingular WirelessCarrierIDCodeType = "Cingular"

	//
	// This value indicates that T-Mobile is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeTMobile WirelessCarrierIDCodeType = "TMobile"

	//
	// This value indicates that Sprint is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeSprint WirelessCarrierIDCodeType = "Sprint"

	//
	// This value is no longer applicable, as Nextel was purchased by Sprint.
	//
	WirelessCarrierIDCodeTypeNextel WirelessCarrierIDCodeType = "Nextel"

	//
	// This value indicates that Verizon is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeVerizon WirelessCarrierIDCodeType = "Verizon"

	//
	// This value indicates that Cincinnati Bell is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeCincinnatiBell WirelessCarrierIDCodeType = "CincinnatiBell"

	//
	// This value is no longer applicable, as Dobson is no longer in existence.
	//
	WirelessCarrierIDCodeTypeDobson WirelessCarrierIDCodeType = "Dobson"

	//
	// This value is no longer applicable, as Alltel is no longer in existence.
	//
	WirelessCarrierIDCodeTypeAlltel WirelessCarrierIDCodeType = "Alltel"

	//
	// This value is no longer applicable, as Leap is no longer in existence.
	//
	WirelessCarrierIDCodeTypeLeap WirelessCarrierIDCodeType = "Leap"

	//
	// This value indicates that US Cellular is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeUSCellular WirelessCarrierIDCodeType = "USCellular"

	//
	// This value indicates that Movistar is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeMovistar WirelessCarrierIDCodeType = "Movistar"

	//
	// This value is no longer applicable, as Amena is no longer in existence.
	//
	WirelessCarrierIDCodeTypeAmena WirelessCarrierIDCodeType = "Amena"

	//
	// This value indicates that Vodafone is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeVodafone WirelessCarrierIDCodeType = "Vodafone"

	//
	// This value indicates that AT&T is providing SMS messages for the Platform Notifications subscriber.
	//
	WirelessCarrierIDCodeTypeATT WirelessCarrierIDCodeType = "ATT"

	//
	// This value is reserved for future use.
	//
	WirelessCarrierIDCodeTypeCustomCode WirelessCarrierIDCodeType = "CustomCode"
)

type RequesterCredentials CustomSecurityHeaderType

type AddDisputeRequest AddDisputeRequestType

type AddDisputeResponse AddDisputeResponseType

type AddDisputeResponseRequest AddDisputeResponseRequestType

type AddDisputeResponseResponse AddDisputeResponseResponseType

type AddFixedPriceItemRequest AddFixedPriceItemRequestType

type AddFixedPriceItemResponse AddFixedPriceItemResponseType

type AddItemRequest AddItemRequestType

type AddItemResponse AddItemResponseType

type AddItemFromSellingManagerTemplateRequest AddItemFromSellingManagerTemplateRequestType

type AddItemFromSellingManagerTemplateResponse AddItemFromSellingManagerTemplateResponseType

type AddItemsRequest AddItemsRequestType

type AddItemsResponse AddItemsResponseType

type AddMemberMessageAAQToPartnerRequest AddMemberMessageAAQToPartnerRequestType

type AddMemberMessageAAQToPartnerResponse AddMemberMessageAAQToPartnerResponseType

type AddMemberMessageRTQRequest AddMemberMessageRTQRequestType

type AddMemberMessageRTQResponse AddMemberMessageRTQResponseType

type AddMemberMessagesAAQToBidderRequest AddMemberMessagesAAQToBidderRequestType

type AddMemberMessagesAAQToBidderResponse AddMemberMessagesAAQToBidderResponseType

type AddOrderRequest AddOrderRequestType

type AddOrderResponse AddOrderResponseType

type AddSecondChanceItemRequest AddSecondChanceItemRequestType

type AddSecondChanceItemResponse AddSecondChanceItemResponseType

type AddSellingManagerInventoryFolderRequest AddSellingManagerInventoryFolderRequestType

type AddSellingManagerInventoryFolderResponse AddSellingManagerInventoryFolderResponseType

type AddSellingManagerProductRequest AddSellingManagerProductRequestType

type AddSellingManagerProductResponse AddSellingManagerProductResponseType

type AddSellingManagerTemplateRequest AddSellingManagerTemplateRequestType

type AddSellingManagerTemplateResponse AddSellingManagerTemplateResponseType

type AddToItemDescriptionRequest AddToItemDescriptionRequestType

type AddToItemDescriptionResponse AddToItemDescriptionResponseType

type AddToWatchListRequest AddToWatchListRequestType

type AddToWatchListResponse AddToWatchListResponseType

type AddTransactionConfirmationItemRequest AddTransactionConfirmationItemRequestType

type AddTransactionConfirmationItemResponse AddTransactionConfirmationItemResponseType

type CompleteSaleRequest CompleteSaleRequestType

type CompleteSaleResponse CompleteSaleResponseType

type ConfirmIdentityRequest ConfirmIdentityRequestType

type ConfirmIdentityResponse ConfirmIdentityResponseType

type DeleteMyMessagesRequest DeleteMyMessagesRequestType

type DeleteMyMessagesResponse DeleteMyMessagesResponseType

type DeleteSellingManagerInventoryFolderRequest DeleteSellingManagerInventoryFolderRequestType

type DeleteSellingManagerInventoryFolderResponse DeleteSellingManagerInventoryFolderResponseType

type DeleteSellingManagerItemAutomationRuleRequest DeleteSellingManagerItemAutomationRuleRequestType

type DeleteSellingManagerItemAutomationRuleResponse DeleteSellingManagerItemAutomationRuleResponseType

type DeleteSellingManagerProductRequest DeleteSellingManagerProductRequestType

type DeleteSellingManagerProductResponse DeleteSellingManagerProductResponseType

type DeleteSellingManagerTemplateRequest DeleteSellingManagerTemplateRequestType

type DeleteSellingManagerTemplateResponse DeleteSellingManagerTemplateResponseType

type DeleteSellingManagerTemplateAutomationRuleRequest DeleteSellingManagerTemplateAutomationRuleRequestType

type DeleteSellingManagerTemplateAutomationRuleResponse DeleteSellingManagerTemplateAutomationRuleResponseType

type DisableUnpaidItemAssistanceRequest DisableUnpaidItemAssistanceRequestType

type DisableUnpaidItemAssistanceResponse DisableUnpaidItemAssistanceResponseType

type EndFixedPriceItemRequest EndFixedPriceItemRequestType

type EndFixedPriceItemResponse EndFixedPriceItemResponseType

type EndItemRequest EndItemRequestType

type EndItemResponse EndItemResponseType

type EndItemsRequest EndItemsRequestType

type EndItemsResponse EndItemsResponseType

type ExtendSiteHostedPicturesRequest ExtendSiteHostedPicturesRequestType

type ExtendSiteHostedPicturesResponse ExtendSiteHostedPicturesResponseType

type FetchTokenRequest FetchTokenRequestType

type FetchTokenResponse FetchTokenResponseType

type GetAccountRequest GetAccountRequestType

type GetAccountResponse GetAccountResponseType

type GetAdFormatLeadsRequest GetAdFormatLeadsRequestType

type GetAdFormatLeadsResponse GetAdFormatLeadsResponseType

type GetAllBiddersRequest GetAllBiddersRequestType

type GetAllBiddersResponse GetAllBiddersResponseType

type GetApiAccessRulesRequest GetApiAccessRulesRequestType

type GetApiAccessRulesResponse GetApiAccessRulesResponseType

type GetBestOffersRequest GetBestOffersRequestType

type GetBestOffersResponse GetBestOffersResponseType

type GetBidderListRequest GetBidderListRequestType

type GetBidderListResponse GetBidderListResponseType

type GetCategoriesRequest GetCategoriesRequestType

type GetCategoriesResponse GetCategoriesResponseType

type GetCategoryFeaturesRequest GetCategoryFeaturesRequestType

type GetCategoryFeaturesResponse GetCategoryFeaturesResponseType

type GetCategoryMappingsRequest GetCategoryMappingsRequestType

type GetCategoryMappingsResponse GetCategoryMappingsResponseType

type GetCategorySpecificsRequest GetCategorySpecificsRequestType

type GetCategorySpecificsResponse GetCategorySpecificsResponseType

type GetChallengeTokenRequest GetChallengeTokenRequestType

type GetChallengeTokenResponse GetChallengeTokenResponseType

type GetCharitiesRequest GetCharitiesRequestType

type GetCharitiesResponse GetCharitiesResponseType

type GetClientAlertsAuthTokenRequest GetClientAlertsAuthTokenRequestType

type GetClientAlertsAuthTokenResponse GetClientAlertsAuthTokenResponseType

type GetContextualKeywordsRequest GetContextualKeywordsRequestType

type GetContextualKeywordsResponse GetContextualKeywordsResponseType

type GetDescriptionTemplatesRequest GetDescriptionTemplatesRequestType

type GetDescriptionTemplatesResponse GetDescriptionTemplatesResponseType

type GetDisputeRequest GetDisputeRequestType

type GetDisputeResponse GetDisputeResponseType

type GetFeedbackRequest GetFeedbackRequestType

type GetFeedbackResponse GetFeedbackResponseType

type GetItemRequest GetItemRequestType

type GetItemResponse GetItemResponseType

type GetItemShippingRequest GetItemShippingRequestType

type GetItemShippingResponse GetItemShippingResponseType

type GetItemTransactionsRequest GetItemTransactionsRequestType

type GetItemTransactionsResponse GetItemTransactionsResponseType

type GetItemsAwaitingFeedbackRequest GetItemsAwaitingFeedbackRequestType

type GetItemsAwaitingFeedbackResponse GetItemsAwaitingFeedbackResponseType

type GetMemberMessagesRequest GetMemberMessagesRequestType

type GetMemberMessagesResponse GetMemberMessagesResponseType

type GetMessagePreferencesRequest GetMessagePreferencesRequestType

type GetMessagePreferencesResponse GetMessagePreferencesResponseType

type GetMyMessagesRequest GetMyMessagesRequestType

type GetMyMessagesResponse GetMyMessagesResponseType

type GetMyeBayBuyingRequest GetMyeBayBuyingRequestType

type GetMyeBayBuyingResponse GetMyeBayBuyingResponseType

type GetMyeBayRemindersRequest GetMyeBayRemindersRequestType

type GetMyeBayRemindersResponse GetMyeBayRemindersResponseType

type GetMyeBaySellingRequest GetMyeBaySellingRequestType

type GetMyeBaySellingResponse GetMyeBaySellingResponseType

type GetNotificationPreferencesRequest GetNotificationPreferencesRequestType

type GetNotificationPreferencesResponse GetNotificationPreferencesResponseType

type GetNotificationsUsageRequest GetNotificationsUsageRequestType

type GetNotificationsUsageResponse GetNotificationsUsageResponseType

type GetOrderTransactionsRequest GetOrderTransactionsRequestType

type GetOrderTransactionsResponse GetOrderTransactionsResponseType

type GetOrdersRequest GetOrdersRequestType

type GetOrdersResponse GetOrdersResponseType

type GetPromotionalSaleDetailsRequest GetPromotionalSaleDetailsRequestType

type GetPromotionalSaleDetailsResponse GetPromotionalSaleDetailsResponseType

type GetSellerDashboardRequest GetSellerDashboardRequestType

type GetSellerDashboardResponse GetSellerDashboardResponseType

type GetSellerEventsRequest GetSellerEventsRequestType

type GetSellerEventsResponse GetSellerEventsResponseType

type GetSellerListRequest GetSellerListRequestType

type GetSellerListResponse GetSellerListResponseType

type GetSellerTransactionsRequest GetSellerTransactionsRequestType

type GetSellerTransactionsResponse GetSellerTransactionsResponseType

type GetSellingManagerAlertsRequest GetSellingManagerAlertsRequestType

type GetSellingManagerAlertsResponse GetSellingManagerAlertsResponseType

type GetSellingManagerEmailLogRequest GetSellingManagerEmailLogRequestType

type GetSellingManagerEmailLogResponse GetSellingManagerEmailLogResponseType

type GetSellingManagerInventoryRequest GetSellingManagerInventoryRequestType

type GetSellingManagerInventoryResponse GetSellingManagerInventoryResponseType

type GetSellingManagerInventoryFolderRequest GetSellingManagerInventoryFolderRequestType

type GetSellingManagerInventoryFolderResponse GetSellingManagerInventoryFolderResponseType

type GetSellingManagerItemAutomationRuleRequest GetSellingManagerItemAutomationRuleRequestType

type GetSellingManagerItemAutomationRuleResponse GetSellingManagerItemAutomationRuleResponseType

type GetSellingManagerSaleRecordRequest GetSellingManagerSaleRecordRequestType

type GetSellingManagerSaleRecordResponse GetSellingManagerSaleRecordResponseType

type GetSellingManagerSoldListingsRequest GetSellingManagerSoldListingsRequestType

type GetSellingManagerSoldListingsResponse GetSellingManagerSoldListingsResponseType

type GetSellingManagerTemplateAutomationRuleRequest GetSellingManagerTemplateAutomationRuleRequestType

type GetSellingManagerTemplateAutomationRuleResponse GetSellingManagerTemplateAutomationRuleResponseType

type GetSellingManagerTemplatesRequest GetSellingManagerTemplatesRequestType

type GetSellingManagerTemplatesResponse GetSellingManagerTemplatesResponseType

type GetSessionIDRequest GetSessionIDRequestType

type GetSessionIDResponse GetSessionIDResponseType

type GetShippingDiscountProfilesRequest GetShippingDiscountProfilesRequestType

type GetShippingDiscountProfilesResponse GetShippingDiscountProfilesResponseType

type GetStoreRequest GetStoreRequestType

type GetStoreResponse GetStoreResponseType

type GetStoreCategoryUpdateStatusRequest GetStoreCategoryUpdateStatusRequestType

type GetStoreCategoryUpdateStatusResponse GetStoreCategoryUpdateStatusResponseType

type GetStoreCustomPageRequest GetStoreCustomPageRequestType

type GetStoreCustomPageResponse GetStoreCustomPageResponseType

type GetStoreOptionsRequest GetStoreOptionsRequestType

type GetStoreOptionsResponse GetStoreOptionsResponseType

type GetStorePreferencesRequest GetStorePreferencesRequestType

type GetStorePreferencesResponse GetStorePreferencesResponseType

type GetSuggestedCategoriesRequest GetSuggestedCategoriesRequestType

type GetSuggestedCategoriesResponse GetSuggestedCategoriesResponseType

type GetTaxTableRequest GetTaxTableRequestType

type GetTaxTableResponse GetTaxTableResponseType

type GetTokenStatusRequest GetTokenStatusRequestType

type GetTokenStatusResponse GetTokenStatusResponseType

type GetUserRequest GetUserRequestType

type GetUserResponse GetUserResponseType

type GetUserContactDetailsRequest GetUserContactDetailsRequestType

type GetUserContactDetailsResponse GetUserContactDetailsResponseType

type GetUserDisputesRequest GetUserDisputesRequestType

type GetUserDisputesResponse GetUserDisputesResponseType

type GetUserPreferencesRequest GetUserPreferencesRequestType

type GetUserPreferencesResponse GetUserPreferencesResponseType

type GetVeROReasonCodeDetailsRequest GetVeROReasonCodeDetailsRequestType

type GetVeROReasonCodeDetailsResponse GetVeROReasonCodeDetailsResponseType

type GetVeROReportStatusRequest GetVeROReportStatusRequestType

type GetVeROReportStatusResponse GetVeROReportStatusResponseType

type GeteBayDetailsRequest GeteBayDetailsRequestType

type GeteBayDetailsResponse GeteBayDetailsResponseType

type GeteBayOfficialTimeRequest GeteBayOfficialTimeRequestType

type GeteBayOfficialTimeResponse GeteBayOfficialTimeResponseType

type LeaveFeedbackRequest LeaveFeedbackRequestType

type LeaveFeedbackResponse LeaveFeedbackResponseType

type MoveSellingManagerInventoryFolderRequest MoveSellingManagerInventoryFolderRequestType

type MoveSellingManagerInventoryFolderResponse MoveSellingManagerInventoryFolderResponseType

type PlaceOfferRequest PlaceOfferRequestType

type PlaceOfferResponse PlaceOfferResponseType

type RelistFixedPriceItemRequest RelistFixedPriceItemRequestType

type RelistFixedPriceItemResponse RelistFixedPriceItemResponseType

type RelistItemRequest RelistItemRequestType

type RelistItemResponse RelistItemResponseType

type RemoveFromWatchListRequest RemoveFromWatchListRequestType

type RemoveFromWatchListResponse RemoveFromWatchListResponseType

type RespondToBestOfferRequest RespondToBestOfferRequestType

type RespondToBestOfferResponse RespondToBestOfferResponseType

type RespondToFeedbackRequest RespondToFeedbackRequestType

type RespondToFeedbackResponse RespondToFeedbackResponseType

type ReviseCheckoutStatusRequest ReviseCheckoutStatusRequestType

type ReviseCheckoutStatusResponse ReviseCheckoutStatusResponseType

type ReviseFixedPriceItemRequest ReviseFixedPriceItemRequestType

type ReviseFixedPriceItemResponse ReviseFixedPriceItemResponseType

type ReviseInventoryStatusRequest ReviseInventoryStatusRequestType

type ReviseInventoryStatusResponse ReviseInventoryStatusResponseType

type ReviseItemRequest ReviseItemRequestType

type ReviseItemResponse ReviseItemResponseType

type ReviseMyMessagesRequest ReviseMyMessagesRequestType

type ReviseMyMessagesResponse ReviseMyMessagesResponseType

type ReviseMyMessagesFoldersRequest ReviseMyMessagesFoldersRequestType

type ReviseMyMessagesFoldersResponse ReviseMyMessagesFoldersResponseType

type ReviseSellingManagerInventoryFolderRequest ReviseSellingManagerInventoryFolderRequestType

type ReviseSellingManagerInventoryFolderResponse ReviseSellingManagerInventoryFolderResponseType

type ReviseSellingManagerProductRequest ReviseSellingManagerProductRequestType

type ReviseSellingManagerProductResponse ReviseSellingManagerProductResponseType

type ReviseSellingManagerSaleRecordRequest ReviseSellingManagerSaleRecordRequestType

type ReviseSellingManagerSaleRecordResponse ReviseSellingManagerSaleRecordResponseType

type ReviseSellingManagerTemplateRequest ReviseSellingManagerTemplateRequestType

type ReviseSellingManagerTemplateResponse ReviseSellingManagerTemplateResponseType

type RevokeTokenRequest RevokeTokenRequestType

type RevokeTokenResponse RevokeTokenResponseType

type SaveItemToSellingManagerTemplateRequest SaveItemToSellingManagerTemplateRequestType

type SaveItemToSellingManagerTemplateResponse SaveItemToSellingManagerTemplateResponseType

type SellerReverseDisputeRequest SellerReverseDisputeRequestType

type SellerReverseDisputeResponse SellerReverseDisputeResponseType

type SendInvoiceRequest SendInvoiceRequestType

type SendInvoiceResponse SendInvoiceResponseType

type SetMessagePreferencesRequest SetMessagePreferencesRequestType

type SetMessagePreferencesResponse SetMessagePreferencesResponseType

type SetNotificationPreferencesRequest SetNotificationPreferencesRequestType

type SetNotificationPreferencesResponse SetNotificationPreferencesResponseType

type SetPromotionalSaleRequest SetPromotionalSaleRequestType

type SetPromotionalSaleResponse SetPromotionalSaleResponseType

type SetPromotionalSaleListingsRequest SetPromotionalSaleListingsRequestType

type SetPromotionalSaleListingsResponse SetPromotionalSaleListingsResponseType

type SetSellingManagerFeedbackOptionsRequest SetSellingManagerFeedbackOptionsRequestType

type SetSellingManagerFeedbackOptionsResponse SetSellingManagerFeedbackOptionsResponseType

type SetSellingManagerItemAutomationRuleRequest SetSellingManagerItemAutomationRuleRequestType

type SetSellingManagerItemAutomationRuleResponse SetSellingManagerItemAutomationRuleResponseType

type SetSellingManagerTemplateAutomationRuleRequest SetSellingManagerTemplateAutomationRuleRequestType

type SetSellingManagerTemplateAutomationRuleResponse SetSellingManagerTemplateAutomationRuleResponseType

type SetShippingDiscountProfilesRequest SetShippingDiscountProfilesRequestType

type SetShippingDiscountProfilesResponse SetShippingDiscountProfilesResponseType

type SetStoreRequest SetStoreRequestType

type SetStoreResponse SetStoreResponseType

type SetStoreCategoriesRequest SetStoreCategoriesRequestType

type SetStoreCategoriesResponse SetStoreCategoriesResponseType

type SetStoreCustomPageRequest SetStoreCustomPageRequestType

type SetStoreCustomPageResponse SetStoreCustomPageResponseType

type SetStorePreferencesRequest SetStorePreferencesRequestType

type SetStorePreferencesResponse SetStorePreferencesResponseType

type SetTaxTableRequest SetTaxTableRequestType

type SetTaxTableResponse SetTaxTableResponseType

type SetUserNotesRequest SetUserNotesRequestType

type SetUserNotesResponse SetUserNotesResponseType

type SetUserPreferencesRequest SetUserPreferencesRequestType

type SetUserPreferencesResponse SetUserPreferencesResponseType

type UploadSiteHostedPicturesRequest UploadSiteHostedPicturesRequestType

type UploadSiteHostedPicturesResponse UploadSiteHostedPicturesResponseType

type ValidateChallengeInputRequest ValidateChallengeInputRequestType

type ValidateChallengeInputResponse ValidateChallengeInputResponseType

type ValidateTestUserRegistrationRequest ValidateTestUserRegistrationRequestType

type ValidateTestUserRegistrationResponse ValidateTestUserRegistrationResponseType

type VeROReportItemsRequest VeROReportItemsRequestType

type VeROReportItemsResponse VeROReportItemsResponseType

type VerifyAddFixedPriceItemRequest VerifyAddFixedPriceItemRequestType

type VerifyAddFixedPriceItemResponse VerifyAddFixedPriceItemResponseType

type VerifyAddItemRequest VerifyAddItemRequestType

type VerifyAddItemResponse VerifyAddItemResponseType

type VerifyAddSecondChanceItemRequest VerifyAddSecondChanceItemRequestType

type VerifyAddSecondChanceItemResponse VerifyAddSecondChanceItemResponseType

type VerifyRelistItemRequest VerifyRelistItemRequestType

type VerifyRelistItemResponse VerifyRelistItemResponseType

type ItemsCanceledEvent ItemsCanceledEventType

type NotificationMessage NotificationMessageType

type AddDisputeRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddDisputeRequest"`

	*AbstractRequestType

	//
	// This enumerated value gives the explanation of why the seller opened a case (or why seller canceled a single line item order). Not all values contained in <b>DisputeExplanationCodeType</b> are allowed in the <b>AddDispute</b> call, and the values that are allowed must match the <b>DisputeReason</b> value.
	//
	DisputeExplanation *DisputeExplanationCodeType `xml:"DisputeExplanation,omitempty"`

	//
	// The enumeration value passed into this required field will depend on the action being taken. The seller will pass in <code>BuyerHasNotPaid</code> if the seller is creating an Unpaid Item case against the buyer, or
	// <code>TransactionMutuallyCanceled</code> if the seller is cancelling a single line item order at the request of the buyer, or if the seller has ran out of stock on the item or otherwise cannot fulfill the order.
	//
	DisputeReason *DisputeReasonCodeType `xml:"DisputeReason,omitempty"`

	//
	// Unique identifier of an eBay listing. To identify a specific order line item, either an <b>ItemID</b>/<b>TransactionID</b> pair or an <b>OrderLineItemID</b> value must be passed in the request. So, unless <b>OrderLineItemID</b> is used, this field is required.
	// <br>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The unique identifier of a buyer's purchase. A <b>TransactionID</b> is created by eBay once a buyer purchases the item through a fixed-priced listing or by using the Buy It Now feature in an auction listing, or when an auction listing ends with a winning bidder. To identify a specific order line item, either an <b>ItemID</b>/<b>TransactionID</b> pair or an <b>OrderLineItemID</b> value must be passed in the request. So, unless <b>OrderLineItemID</b> is used, this field is required.
	// <br>
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier of an order line item, and is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between these two IDs. To identify a specific order line item, either an <b>ItemID</b>/<b>TransactionID</b> pair or an <b>OrderLineItemID</b> value must be passed in the request. So, unless <b>ItemID</b>/<b>TransactionID</b> pair is used, this field is required.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type AddDisputeResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddDisputeResponse"`

	*AbstractResponseType

	//
	// This field will show the unique identifier of an Unpaid Item case that was created, or the unique identifier of the order cancellation.
	//
	DisputeID *DisputeIDType `xml:"DisputeID,omitempty"`
}

type AddDisputeResponseRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddDisputeResponseRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the eBay Unpaid Item case or PayPal INR dispute. This identifier is created by eBay or PayPal upon case/dispute creation.
	//
	DisputeID *DisputeIDType `xml:"DisputeID,omitempty"`

	//
	// The text of a comment or response being posted to the case/dispute. Required when <b>DisputeActivity</b> is <b>SellerAddInformation</b>, <b>SellerComment</b>, or <b>SellerPaymentNotReceived</b>. Otherwise, this field is  optional.
	//
	MessageText string `xml:"MessageText,omitempty"`

	//
	// The type of activity the seller plans to take on the case/dispute. The allowed value is determined by the current state of the case/dispute and whether the seller is updating an Unpaid Item case or responding to a PayPal INR dispute.
	//
	DisputeActivity *DisputeActivityCodeType `xml:"DisputeActivity,omitempty"`

	//
	// The shipping carrier used to ship the item in dispute. This field is not case sensitive in the <strong>AddDisputeResponse</strong> request. Non-alphanumeric characters are not allowed. This field (along with <b>ShipmentTrackNumber</b>) is required if the value of <b>DisputeActivity</b> is set to <code>SellerShippedItem</code>.
	//
	ShippingCarrierUsed string `xml:"ShippingCarrierUsed,omitempty"`

	//
	// The tracking number associated with one package of a shipment. The seller is responsible for the accuracy of the shipment tracking number, as eBay only verifies that the tracking number is consistent with the numbering scheme used by the specified shipping carrier, but cannot verify the accuracy of the tracking number. This field (along with <b>ShippingCarrierUsed</b>) is required if the value of <b>DisputeActivity</b> is set to <code>SellerShippedItem</code>.
	//
	ShipmentTrackNumber string `xml:"ShipmentTrackNumber,omitempty"`

	//
	// This timestamp indicates the date and time when the item under dispute was
	// shipped. This field is required if the value of <b>DisputeActivity</b> is set to <code>SellerShippedItem</code>.
	//
	ShippingTime time.Time `xml:"ShippingTime,omitempty"`
}

type AddDisputeResponseResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddDisputeResponseResponse"`

	*AbstractResponseType
}

type AddFixedPriceItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddFixedPriceItemRequest"`

	*AbstractRequestType

	//
	// This container is used to specify all of the values and settings that define a new fixed-price listing.
	//
	Item *ItemType `xml:"Item,omitempty"`
}

type AddFixedPriceItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddFixedPriceItemResponse"`

	*AbstractResponseType

	//
	// Unique identifier for the new fixed-price listing. This field is returned as long as the listing was successfully created.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The SKU value for an item is returned if the seller specified a SKU value through the <b>Item.SKU</b> field in the request. In the case of a multi-variation listing, variation-level SKU values are not returned in the response. To get this data, a <b>GetItem</b> call would have to be made by the seller.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// Starting date and time for the new listing. This value is based on the time the listing was received and processed, or the time the item will be listed if the seller included the <b>Item.ScheduleTime</b> field in the request and set a custom start time of the listing (in the future).
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Date and time when the new listing is scheduled to end based on the start time and the listing duration value that was set in the <b>ListingDuration</b> field at listing time. If the value of <b>ListingDuration</b> was set to <code>GTC</code> (Good 'Til Cancelled) this value will be set 30 days ahead of the start time, although this value will be updated if the GTC listing is still alive and automatically renewed 30 days after start time.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This container is an array of fees associated with the creation of the listing. The fees do not include the Final Value Fee (FVF), which cannot be determined until an item is sold.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// The unique identifier of the primary category in which the item was listed. This field is only returned if the <b>Item.CategoryMappingAllowed</b> boolean field is included and set to <code>true</code> in the request and the Category ID passed in as the primary listing category was mapped to a new Category ID by eBay. If the primary category has not changed, or if it has expired with no replacement, this field is not returned.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary category in which the item was listed. This field is only returned if a secondary category was used, the <b>Item.CategoryMappingAllowed</b> boolean field is included and set to <code>true</code> in the request, and the Category ID passed in as the secondary listing category was mapped to a new Category ID by eBay. If the secondary category has not changed or it has expired with no replacement, this field is not returned.
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// This container is an array of one or more listing fee/upgrade discount types being offered by eBay to the seller.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// This container holds an array of one or more products in the eBay product catalog that appear to match the product being listed, just based on the information in the listing. This container will not be returned if no similar products were found in the eBay product catalog.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b> flag was included and set to 'true' in the <b>AddFixedPriceItem</b> request, and if at least one listing recommendation exists for the newly created listing. If one or more listing recommendations are returned, it will be at the seller's discretion about whether to revise the item based on eBay's listing recommendation(s).
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type AddItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddItemRequest"`

	*AbstractRequestType

	//
	// This container is used to specify all of the values and settings that define a new listing.
	//
	Item *ItemType `xml:"Item,omitempty"`
}

type AddItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddItemResponse"`

	*AbstractResponseType

	//
	// Unique identifier for the new listing. This field is returned as long as the listing was successfully created.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Starting date and time for the new listing. This value is based on the time the listing was received and processed, or the time the item will be listed if the seller included the <b>Item.ScheduleTime</b> field in the request and set a custom start time of the listing (in the future).
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Date and time when the new listing is scheduled to end based on the start time and the listing duration value that was set in the <b>ListingDuration</b> field at listing time. If the value of <b>ListingDuration</b> was set to <code>GTC</code> (Good 'Til Cancelled) this value will be set 30 days ahead of the start time, although this value will be updated if the GTC listing is still alive and automatically renewed 30 days after start time.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This container is an array of fees associated with the creation of the listing. The fees do not include the Final Value Fee (FVF), which cannot be determined until an item is sold.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// The unique identifier of the primary category in which the item was listed. This field is only returned if the <b>Item.CategoryMappingAllowed</b> boolean field is included and set to <code>true</code> in the request and the Category ID passed in as the primary listing category was mapped to a new Category ID by eBay. If the primary category has not changed, or if it has expired with no replacement, this field is not returned.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary category in which the item was listed. This field is only returned if a secondary category was used, the <b>Item.CategoryMappingAllowed</b> boolean field is included and set to <code>true</code> in the request, and the Category ID passed in as the secondary listing category was mapped to a new Category ID by eBay. If the secondary category has not changed or it has expired with no replacement, this field is not returned.
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// This container is an array of one or more listing fee/upgrade discount types being offered by eBay to the seller.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// This container holds an array of one or more products in the eBay product catalog that appear to match the product being listed, just based on the information in the listing. This container will not be returned if no similar products were found in the eBay product catalog.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b> flag was included and set to 'true' in the <b>AddItem</b> request, and if at least one listing recommendation exists for the newly created listing. If one or more listing recommendations are returned, it will be at the seller's discretion about whether to revise the item based on eBay's listing recommendation(s).
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type AddItemFromSellingManagerTemplateRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddItemFromSellingManagerTemplateRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the Selling Manager template that a seller is  using to create a listing. Unique identifiers of Selling Manager templates can be retrieved programatically by using the <b>GetSellingManagerInventory</b> call.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`

	//
	// This field allows the user to specify a time in the future when the listing being created becomes active. If this field is not used, the listing will become active immediately upon being created successfully. The time in this field should be specified in GMT format.
	//
	ScheduleTime time.Time `xml:"ScheduleTime,omitempty"`

	//
	// This container is intended for specifying setting in the listing that differ from values in the Selling Manager template being used.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// Only the following three values of <b>ItemType</b> may be used for a <b>AddItemFromSellingManagerTemplate</b> call: <b>CategoryMappingAllowed</b>, <b>PaymentMethods</b>, and <b>PayPalEmailAddress</b>.
	//
	Item *ItemType `xml:"Item,omitempty"`
}

type AddItemFromSellingManagerTemplateResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddItemFromSellingManagerTemplateResponse"`

	*AbstractResponseType

	//
	// Unique identifier for the new listing. This field is returned as long as the listing was successfully created.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Starting date and time for the new listing. This value is based on the time the listing was received and processed, or the time the item will be listed if the seller included the <b>ScheduleTime</b> field in the request and set a custom start time of the listing (in the future).
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Date and time when the new listing is scheduled to end based on the start time and the listing duration that was set at listing time.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This container is an array of fees associated with the creation of the listing. The fees do not include the Final Value Fee (FVF), which cannot be determined until an item is sold.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// The unique identifier of the primary category in which the item was listed. This field is only returned if the seller enabled the Category Mapping feature for the listing, and the Category ID passed in as the primary listing category was mapped to a new Category ID by eBay. If the primary category has not changed, or if it has expired with no replacement, this field is not returned.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary category in which the item was listed. This field is only returned if a secondary category was used, the seller enabled the Category Mapping feature for the listing, and the Category ID passed in as the secondary listing category was mapped to a new Category ID by eBay. If the secondary category has not changed or it has expired with no replacement, this field is not returned.
	//
	Category2ID string `xml:"Category2ID,omitempty"`
}

type AddItemsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddItemsRequest"`

	*AbstractRequestType

	//
	// Defines a single item to be listed on eBay. This container is similar to an <b>AddItem</b> request. Up to five of these containers can be included in one <b>AddItems</b> request.
	//
	AddItemRequestContainer []*AddItemRequestContainerType `xml:"AddItemRequestContainer,omitempty"`
}

type AddItemsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddItemsResponse"`

	*AbstractResponseType

	//
	// One <b>AddItemResponseContainer</b> container is returned for each listing that is being created with the <b>AddItems</b> call. Each container includes the <b>ItemID</b> of each newly created listings, the eBay category each item is listed under, the seller-defined SKUs of the items (if any), the listing recommendations for each item (if applicable), the start and end time of each listing, and the estimated fees that each listing will incur.
	//
	AddItemResponseContainer []*AddItemResponseContainerType `xml:"AddItemResponseContainer,omitempty"`
}

type AddMemberMessageAAQToPartnerRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddMemberMessageAAQToPartnerRequest"`

	*AbstractRequestType

	//
	// Unique identifier for the listing that is being discussed between the two order partners.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This container holds the message, and includes the subject, message body, and other details related to the message.
	//
	MemberMessage *MemberMessageType `xml:"MemberMessage,omitempty"`
}

type AddMemberMessageAAQToPartnerResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddMemberMessageAAQToPartnerResponse"`

	*AbstractResponseType
}

type AddMemberMessageRTQRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddMemberMessageRTQRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the listing about which the question was asked. This field is not required if the request includes a <b>RecipientID</b> value in the <b>MemberMessage</b> container, and the bidder/potential buyer and seller do not have more than one listing in common between one another.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This container is used by the seller to answer the question from the bidder/potential buyer. This container includes the recipient ID of the bidder/potential buyer, the message subject, the message body (where the question is answered), and other values related to the message.
	//
	MemberMessage *MemberMessageType `xml:"MemberMessage,omitempty"`
}

type AddMemberMessageRTQResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddMemberMessageRTQResponse"`

	*AbstractResponseType
}

type AddMemberMessagesAAQToBidderRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddMemberMessagesAAQToBidderRequest"`

	*AbstractRequestType

	//
	// An <b>AddMemberMessagesAAQToBidderRequestContainer</b> container is required for each message being sent to unique bidders/potential buyers.  A seller can send up to 10 messages to unique bidders/potential buyers in one <b>AddMemberMessagesAAQToBidder</b> call.
	//
	AddMemberMessagesAAQToBidderRequestContainer []*AddMemberMessagesAAQToBidderRequestContainerType `xml:"AddMemberMessagesAAQToBidderRequestContainer,omitempty"`
}

type AddMemberMessagesAAQToBidderResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddMemberMessagesAAQToBidderResponse"`

	*AbstractResponseType

	//
	// Container consisting of the <b>Ack</b> field (indicating the result of the send message operation) and the <b>CorrelationID</b> field (used to track multiple send message operations performed in one call).
	//
	AddMemberMessagesAAQToBidderResponseContainer []*AddMemberMessagesAAQToBidderResponseContainerType `xml:"AddMemberMessagesAAQToBidderResponseContainer,omitempty"`
}

type AddOrderRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddOrderRequest"`

	*AbstractRequestType

	//
	// The root container of the <b>AddOrder</b> request. In this call, the seller identifies two or more unpaid order line items from the same buyer through the <b>TransactionArray</b> container, specifies one or more accepted payment methods through the <b>PaymentMethods</b> field(s), and specifies available shipping services and other shipping details through the <b>ShippingDetails</b> container.
	//
	Order *OrderType `xml:"Order,omitempty"`
}

type AddOrderResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddOrderResponse"`

	*AbstractResponseType

	//
	// The unique identifier for the Combined Invoice order. This value is created by eBay upon a successful <b>AddOrder</b> call. This value can be used as an input filter in <a href="GetOrders.html">GetOrders</a> and <a href="GetOrderTransactions.html">GetOrderTransactions</a> to retrieve the order.
	//
	OrderID *OrderIDType `xml:"OrderID,omitempty"`

	//
	// Timestamp that indicates the date and time that the Combined Invoice order was created.
	//
	CreatedTime time.Time `xml:"CreatedTime,omitempty"`
}

type AddSecondChanceItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSecondChanceItemRequest"`

	*AbstractRequestType

	//
	// This field is used to specify the bidder that is being offered the Second Chance Offer. The eBay User ID of the bidder is used in this field. Specify only one <b>RecipientBidderUserID</b> per call. If multiple users are specified, only the last one specified receives the offer. User ID values will be returned in the <b>Offer.User.UserID</b> field of the <b>GetAllBidders</b> call response.
	//
	RecipientBidderUserID *UserIDType `xml:"RecipientBidderUserID,omitempty"`

	//
	// The amount the offer recipient must pay to purchase the item as a Second Chance Offer. This field should only be used when the original item was listed in an eBay Motors vehicle category (or in some categories on U.S. and international sites for high-priced items, such as items in many U.S. and Canada Business and Industrial categories) and it ended unsold because the reserve price was not met. Otherwise, eBay establishes the price and no price should be submitted. The price offered to the Second Chance Offer recipient is generally the highest bid that the user made on the original listing.
	//
	BuyItNowPrice *AmountType `xml:"BuyItNowPrice,omitempty"`

	//
	// This enumeration value indicates the length of time (in days) that the Second Chance Offer will be available to the recipient. Upon receiving the Second Chance Offer, the recipient bidder will have this many days to accept the offer before the offer expires. Use ne of the values in <b>SecondChanceOfferDurationCodeType</b> must be used.
	//
	Duration *SecondChanceOfferDurationCodeType `xml:"Duration,omitempty"`

	//
	// This field is used to identify the original auction listing through its unique identifier (Item ID). Upon a successful call, the Second Chance Offer will be identified by a new <b>ItemID</b> in the response.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This optional field is used to provide a message to the recipient of the Second Chance Offer. This message cannot contain HTML, asterisks, or quotes. The content in this field will be included in the Second Chance Offer email that is sent to the recipient.
	//
	SellerMessage string `xml:"SellerMessage,omitempty"`
}

type AddSecondChanceItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSecondChanceItemResponse"`

	*AbstractResponseType

	//
	// This field contains the Item ID for the Second Chance Offer that was just created with the <b>AddSecondChanceItem</b> call. Note that this Item ID will be different from the Item ID in the original auction listing that was passed in the request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This timestamp indicates the date and time when the Second Chance Offer became available to the recipient.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This timestamp indicates the date and time when the Second Chance Offer listing will expire, at which time the recipient will no longer be able to purchase the item.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`
}

type AddSellingManagerInventoryFolderRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSellingManagerInventoryFolderRequest"`

	*AbstractRequestType

	//
	// Name of the new Selling Manager inventory folder.
	//
	FolderName string `xml:"FolderName,omitempty"`

	//
	// Unique identifier of the parent Selling Manager inventory folder. If no <b>ParentFolderID</b> is submitted, the folder
	// is added at the root level.
	//
	ParentFolderID int64 `xml:"ParentFolderID,omitempty"`

	//
	// Contains comments that will be associated with this folder.
	//
	Comment string `xml:"Comment,omitempty"`
}

type AddSellingManagerInventoryFolderResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSellingManagerInventoryFolderResponse"`

	*AbstractResponseType

	//
	// The unique identifier of the newly created Selling Manager Inventory Folder. This field will generally be returned unless the call is not successful at creating the new folder.
	//
	FolderID int64 `xml:"FolderID,omitempty"`
}

type AddSellingManagerProductRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSellingManagerProductRequest"`

	*AbstractRequestType

	//
	// This container is used to provide details about the Selling Manager product, such as product name, quantity available, and unit price.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`

	//
	// This is the unique identifier of the folder in which the new product will be placed. This folder can be a new folder or a folder that already exists for the seller in Selling Manager Pro. If no folder is specified through this field, the new product is place into the <em>My Products</em> folder by default.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// This container allows the seller to specify item specifics for a product, to create a product variation group and variation specifics, and/or to specify a listing category for the product or product variation group. A product variation group can be transferred into a listing template that can create a multiple-variation listing. The listing category can either be provided through the <b>PrimaryCategoryID</b> value of this call, or through the <b>Item.PrimaryCategory.CategoryID</b> field of the subsequent <b>AddSellingManagerTemplate</b> call.
	//
	SellingManagerProductSpecifics *SellingManagerProductSpecificsType `xml:"SellingManagerProductSpecifics,omitempty"`
}

type AddSellingManagerProductResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSellingManagerProductResponse"`

	*AbstractResponseType

	//
	// This container includes the same information that was passed into the <b>SellingManagerProductDetails</b> container in the request, as well as a new <b>ProductID</b> value if the new product was successfully created.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`
}

type AddSellingManagerTemplateRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSellingManagerTemplateRequest"`

	*AbstractRequestType

	//
	// This <b>Item</b> container is similar to the one that is used in standard Add/Revise/Relist/Verify Item calls, with the difference being that some of the product-specific data/settings will be inherited through the Selling Manager product that is referenced in the call request, and not through this <b>Item</b> container. The data that is passed in this container will become part of the listing template that is created with this call.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// The name of the Selling Manager listing template is provided in this field. If you don't specify a name, then the value in the <b>Item.Title</b> field will be used as the name instead.
	//
	SaleTemplateName string `xml:"SaleTemplateName,omitempty"`

	//
	// The unique identifier of the Selling Manager product that will be associated with the listing template being created. Selling Manager Product IDs are returned in the response of a <b>AddSellingManagerProduct</b> call.
	// Alternatively, the <b>GetSellingManagerInventory</b> call can be used to retrieve active Selling Manager products for the user's account.
	//
	ProductID int64 `xml:"ProductID,omitempty"`
}

type AddSellingManagerTemplateResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddSellingManagerTemplateResponse"`

	*AbstractResponseType

	//
	// The unique identifier of the eBay category in which the product associated with the Selling Manager template will be listed. The primary listing category is provided through the <b>PrimaryCategoryID</b> field of an <b>AddSellingManagerProduct</b> call or through the <b>Item.PrimaryCategory.CategoryID</b> field.
	//
	CategoryID int64 `xml:"CategoryID,omitempty"`

	//
	// The unique identifier of the secondary eBay category in which the product associated with the Selling Manager template will be listed. This field will only be returned if defined through a <b>Item.SecondaryCategory.CategoryID</b> field.
	//
	Category2ID int64 `xml:"Category2ID,omitempty"`

	//
	// This is the unique identifier of the new Selling Manager template. This value is created by eBay upon successful creation of the Selling Manager template.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`

	//
	// Ihis field is deprecated.
	//
	SaleTemplateGroupID int64 `xml:"SaleTemplateGroupID,omitempty"`

	//
	// This is the unique name of the newly created Selling Manager template. This name will be the value that was provided in the <b>SaleTemplateName</b> field of the call request. If the <b>SaleTemplateName</b> field was omitted the Selling Manager template inherits the name specified in the <b>Item.Title</b> field instead.
	//
	SaleTemplateName string `xml:"SaleTemplateName,omitempty"`

	//
	// This container consists of details related to the Selling Manager product associated with the Selling Manager template, including the unique identifer, product name, and current quantity available.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`

	//
	// This container consists of listing fees that can be expected to be assessed against an eBay listing created with Selling Manager template. Each <b>Fee</b> container will contain the name of the listing fee, the expected amount, and any eBay promotional discount that will be applied towards the expected fee. The Final Value Fee (FVF) will never be returned in this container, as this fee cannot be determined until an item is sold.
	//
	Fees *FeesType `xml:"Fees,omitempty"`
}

type AddToItemDescriptionRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddToItemDescriptionRequest"`

	*AbstractRequestType

	//
	// This field is used to identify the active listing that will be updated with additional text in the item description field. The Item ID is a unique identifier for a listing.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This field is used to specify the text that will be appended to the end of the active listing's item description.
	// The text provided in this field must abide by the same rules/restrictions
	// applicable to the original item description supplied at listing time. For more information on these rules and restrictions, see the <a href="http://developer.ebay.com/Devzone/XML/docs/Reference/ebay/types/ItemType.html#Description">Description field of ItemType</a>.
	//
	Description string `xml:"Description,omitempty"`
}

type AddToItemDescriptionResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddToItemDescriptionResponse"`

	*AbstractResponseType
}

type AddToWatchListRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddToWatchListRequest"`

	*AbstractRequestType

	//
	// The <b>ItemID</b> of the item that is to be added to the eBay user's Watch List. The item must be a currently active item, and the total number of items in the user's Watch List (after the items in the request have been added) cannot exceed the maximum allowed number of Watch List items. One or more <b>ItemID</b> fields can be specified. A separate error node will be returned for each item that was not successfully added to the Watch List.<br> <br> The user must use either one or more <b>ItemID</b> values or one or more <b>VariationKey</b> containers, but the user may not use both of these entities in the same call.
	//
	ItemID []*ItemIDType `xml:"ItemID,omitempty"`

	//
	// This container is used to specify one or more item variations in a multi-variation, fixed-price listing that you want to add to the Watch List.
	// The listing is identified through the <b>ItemID</b> value and each item variation existing within that listing is identified through a <b>VariationSpecifics.NameValueList</b> container.
	// <br>
	// <br>
	// The user must use either one or more <b>ItemID</b> values or one or more <b>VariationKey</b> containers, but the user may not use both of these entities in the same call.
	//
	VariationKey []*VariationKeyType `xml:"VariationKey,omitempty"`
}

type AddToWatchListResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddToWatchListResponse"`

	*AbstractResponseType

	//
	// This integer value indicates the total number of items in the user's Watch List (after those specified in the call request have been successfully added).
	//
	WatchListCount int32 `xml:"WatchListCount,omitempty"`

	//
	// This integer value indicates the maximum number of items allowed in a user's Watch List. This value can vary by site and is subject to change. Currently on the US site, up to 200 items can be on the user's Watch List at any given time.
	//
	WatchListMaximum int32 `xml:"WatchListMaximum,omitempty"`
}

type AddTransactionConfirmationItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddTransactionConfirmationItemRequest"`

	*AbstractRequestType

	//
	// This field is used to specify the recipient of the Transaction
	// Confirmation Request (TCR).
	//
	RecipientUserID *UserIDType `xml:"RecipientUserID,omitempty"`

	//
	// This field is included and set to <code>true</code> if the seller wants to verify whether or not a new Transaction
	// Confirmation Request (TCR) can be created for the item. If this field is included and its value set to <code>true</code>, no TCR is actually created. If this field is included and its value set to <code>false</code>, or if it is omitted, a Transaction
	// Confirmation Request is actually created.
	//
	VerifyEligibilityOnly string `xml:"VerifyEligibilityOnly,omitempty"`

	//
	// This field is used to specify the postal code of the user to whom the seller is offering the Transaction Confirmation Request. This field is only required if the user does not meet the other options listed in <b>RecipientRelationCodeType</b>.
	//
	RecipientPostalCode string `xml:"RecipientPostalCode,omitempty"`

	//
	// The enumeration value supplied in this field specifies the current relationship between the seller and the potential buyer. A Transaction Confirmation Request (TCR) for an item can be sent to a potential buyer who has at least one of the following criteria: is an active bidder on the auction listing; has made a Best Offer on the fixed-price listing, is an eBay user who has used the Ask Seller a Question feature, or is an eBay user whose postal code is known.
	//
	RecipientRelationType *RecipientRelationCodeType `xml:"RecipientRelationType,omitempty"`

	//
	// The amount in this field is the price that the seller is asking for to purchase the motor vehicle.
	//
	NegotiatedPrice *AmountType `xml:"NegotiatedPrice,omitempty"`

	//
	// The enumeration value specified in this field will control how many days that the recipient of the offer has to purchase the motor vehicle at the price listed in the <b>NegotiatedPrice</b> field.
	//
	ListingDuration *SecondChanceOfferDurationCodeType `xml:"ListingDuration,omitempty"`

	//
	// This field is used to identify the eBay Motors listing using the unique identifier of the listing (<b>ItemID</b>).
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This is optional free-form string field that can be used by the seller to provide any comments or additional information about the Transaction Confirmation Item.
	//
	Comments string `xml:"Comments,omitempty"`
}

type AddTransactionConfirmationItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents AddTransactionConfirmationItemResponse"`

	*AbstractResponseType

	//
	// This field contains the Item ID associated with the Transaction Confirmation Item that was just created with the <b>AddTransactionConfirmationItem</b> call. This field is not returned if the request was only used to verify that a new TCR could be created.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This timestamp indicates the date and time when the Transaction Confirmation Item became available to the recipient.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This timestamp indicates the date and time when the Transaction Confirmation Item will no longer be available for purchase.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`
}

type CompleteSaleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents CompleteSaleRequest"`

	*AbstractRequestType

	//
	// Unique identifier for an eBay item listing. An <b>ItemID</b> can be paired up
	// with a corresponding <b>TransactionID</b> and used in the <b>CompleteSale</b> request
	// to identify a single line item order.
	// <br><br>
	// Unless an <b>OrderLineItemID</b> is used to identify a single line item order,
	// or the <b>OrderID</b> is used to identify a single or multiple line item
	// (Combined Invoice) order, the <b>ItemID</b>/<b>TransactionID</b> pair must be
	// specified. For a multiple line item (Combined Invoice) order, <b>OrderID</b>
	// must be used. If <b>OrderID</b> or <b>OrderLineItemID</b> are specified, the
	// <b>ItemID</b>/<b>TransactionID</b> pair is ignored if present in the same request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. The
	// <b>TransactionID</b> can be paired up with the corresponding <b>ItemID</b> and used in
	// the <b>CompleteSale</b> request to identify a single line item order.
	// <br><br>
	// Unless an <b>OrderLineItemID</b> is used to identify a single line item order,
	// or the <b>OrderID</b> is used to identify a single or multiple line item
	// (Combined Invoice) order, the <b>ItemID</b>/<b>TransactionID</b> pair must be
	// specified. For a multiple line item (Combined Invoice) order, <b>OrderID</b>
	// must be used. If <b>OrderID</b> or <b>OrderLineItemID</b> are specified, the
	// <b>ItemID</b>/<b>TransactionID</b> pair is ignored if present in the same request.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This container is used by the seller to leave feedback for the buyer for the order line item identified in the call request. The seller must include and specify all fields of this type, including the buyer's eBay User ID, the Feedback rating (a seller can only leave a buyer a 'Positive' rating), and a comment, which helps justify the Feedback rating. The eBay User ID must match the buyer who bought the order line item, or an error will occur. An error will also occur if Feedback has already been left for the buyer (either through API or the Web flow).
	// <br><br>
	// To determine if Feedback has already been left for an order line item, you can call <b class="con">GetFeedback</b>, passing in the <b class="con">OrderLineItemID</b> value in the call request.
	//
	FeedbackInfo *FeedbackInfoType `xml:"FeedbackInfo,omitempty"`

	//
	// The seller includes and sets this field to true if the order has been
	// shipped. If the call is successful, the order line item(s) are marked as
	// Shipped in My eBay.
	// <br><br>
	// If the seller includes and sets this field to false, the order line item(s)
	// are marked (or remain) as Not Shipped in My eBay.
	// <br><br>
	// If this field is not included, the shipped status of the order line
	// item(s) remain unchanged in My eBay.
	// <br><br>
	// If shipment tracking information is provided through the Shipment
	// container in the same request, the <b>Shipped</b> status is set to True
	// automatically and the <b>Shipped</b> field is not required.
	//
	Shipped bool `xml:"Shipped,omitempty"`

	//
	// The seller includes and sets this field to true if the order has been
	// paid for by the buyer. If the call is successful, the order line item(s)
	// are marked as Paid in My eBay.
	// <br><br>
	// If the seller includes and sets this field to false, the order line item(s)
	// are marked (or remain) as Not Paid in My eBay.
	// <br><br>
	// If this field is not included, the paid status of the order line
	// item(s) remain unchanged in My eBay.
	//
	Paid bool `xml:"Paid,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> DO NOT USE THIS FIELD. Previously, this field's only purpose was to classify the order to be updated as a Half.com order. However, since the Half.com site has been shut down, this field is no longer applicable.
	// </span>
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// Container consisting of shipment tracking information, shipped time, and an optional text field to provide additional details to the buyer. Setting the tracking number and shipping carrier automatically marks the item as shipped and the <b>Shipped</b> field is not required. <br><br>
	// If you supply <b>ShipmentTrackingNumber</b>, you must also supply <b>ShippingCarrierUsed</b>; otherwise you will get an error.
	// <br><br>
	// To modify the shipping tracking number and/or carrier, supply the new number in <b>ShipmentTrackingNumber</b> or supply the value for <b>ShippingCarrierUsed</b>, or both. The old number and carrier are deleted and the new ones are added.
	// <br><br>
	// To simply delete the current tracking details altogether, supply empty <b>Shipment</b> tags.
	// <br> <br>
	// <span class="tablenote"><b>Note:</b> Top-Rated sellers must have a record of uploading shipment tracking information (through site or through API) for at least 95 percent of their order line items (purchased by U.S. buyers) to keep their status as Top-Rated sellers. For more information on the requirements to becoming a Top-Rated Seller, see the <a href="http://pages.ebay.com/help/sell/top-rated.html">Becoming a Top-Rated Seller and qualifying for Top-Rated Plus</a> customer support page. </span> <br>
	//
	Shipment *ShipmentType `xml:"Shipment,omitempty"`

	//
	// A unique identifier that identifies a single line item or multiple line item order.
	// <br><br>
	// For a single line item order, the <b>OrderID</b> value is identical to the <b>OrderLineItemID</b> value that is generated upon creation of the order line item. For multiple line item orders, the <b>OrderID</b> value is created by eBay when the buyer is purchasing multiple order line items from the same seller at the same time. For multiple line item orders not going through the eBay Cart flow, a Combined Invoice order can be created by the seller through the <b>AddOrder</b> call. The <b>OrderID</b> can be used in the <b>CompleteSale</b> request to identify a single or multiple line item order.
	// <br><br> <b>OrderID</b> overrides an <b>OrderLineItemID</b> or <b>ItemID</b>/<b>TransactionID</b> pair if these fields are also specified in the same request.
	//
	OrderID string `xml:"OrderID,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. For a single line item order, the
	// <b>OrderLineItemID</b> value can be passed into the <b>OrderID</b> field in the
	// <b>CompleteSale</b> request.
	// <br><br>
	// Unless an <b>ItemID</b>/<b>TransactionID</b> pair is used to identify a single line
	// item order, or the <b>OrderID</b> is used to identify a single or multiple line
	// item (Combined Invoice) order, the <b>OrderLineItemID</b> must be specified.
	// For a multiple line item (Combined Invoice) order, <b>OrderID</b> must be
	// used. If <b>OrderLineItemID</b> is specified, the <b>ItemID</b>/<b>TransactionID</b> pair are
	// ignored if present in the same request.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type CompleteSaleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents CompleteSaleResponse"`

	*AbstractResponseType
}

type ConfirmIdentityRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ConfirmIdentityRequest"`

	*AbstractRequestType

	//
	// A string obtained by making a <b>GetSessionID</b> call, passed in redirect URL to the eBay signin page.
	//
	SessionID string `xml:"SessionID,omitempty"`
}

type ConfirmIdentityResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ConfirmIdentityResponse"`

	*AbstractResponseType

	//
	// Unique eBay user ID for the user.
	//
	UserID string `xml:"UserID,omitempty"`
}

type DeleteMyMessagesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteMyMessagesRequest"`

	*AbstractRequestType

	//
	// This field is deprecated.
	//
	AlertIDs *MyMessagesAlertIDArrayType `xml:"AlertIDs,omitempty"`

	//
	// Contains a list of up to 10 <b>MessageID</b> values.
	//
	MessageIDs *MyMessagesMessageIDArrayType `xml:"MessageIDs,omitempty"`
}

type DeleteMyMessagesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteMyMessagesResponse"`

	*AbstractResponseType
}

type DeleteSellingManagerInventoryFolderRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerInventoryFolderRequest"`

	*AbstractRequestType

	//
	// Unique ID of the Selling Manager Inventory folder to be deleted.
	//
	FolderID int64 `xml:"FolderID,omitempty"`
}

type DeleteSellingManagerInventoryFolderResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerInventoryFolderResponse"`

	*AbstractResponseType
}

type DeleteSellingManagerItemAutomationRuleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerItemAutomationRuleRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the listing from which to delete automation rules.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This field is included and set to <code>true</code> if the user would like to disable the automated relisting rule for the listing.
	//
	DeleteAutomatedRelistingRule bool `xml:"DeleteAutomatedRelistingRule,omitempty"`

	//
	// This field is included and set to <code>true</code> if the user would like to disable the automated Second Chance Offer rule for the listing.
	//
	DeleteAutomatedSecondChanceOfferRule bool `xml:"DeleteAutomatedSecondChanceOfferRule,omitempty"`
}

type DeleteSellingManagerItemAutomationRuleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerItemAutomationRuleResponse"`

	*AbstractResponseType

	//
	// This container is returned if automated listing rules are set up for the Selling Manager item.
	//
	AutomatedListingRule *SellingManagerAutoListType `xml:"AutomatedListingRule,omitempty"`

	//
	// This container is returned if automated relisting rules are set up for the Selling Manager item.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// This container is returned if automated Second Chance Offer rules are set up for the Selling Manager item.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`

	//
	// Contains fees that may be incurred when items are listed using the
	// automation rules (e.g., a scheduled listing fee). Use of an automation rule
	// does not in itself have a fee, but use can result in a fee.
	//
	Fees *FeesType `xml:"Fees,omitempty"`
}

type DeleteSellingManagerProductRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerProductRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the Selling Manager product to be deleted.
	//
	ProductID int64 `xml:"ProductID,omitempty"`
}

type DeleteSellingManagerProductResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerProductResponse"`

	*AbstractResponseType

	//
	// This container consists of the unique identifier and name of the Seller
	// Manager product.
	//
	DeletedSellingManagerProductDetails *SellingManagerProductDetailsType `xml:"DeletedSellingManagerProductDetails,omitempty"`
}

type DeleteSellingManagerTemplateRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerTemplateRequest"`

	*AbstractRequestType

	//
	// Unique identifier of the Selling Manager template to be deleted.
	// You can obtain a <b>SaleTemplateID</b> by calling <b>GetSellingManagerInventory</b>.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`
}

type DeleteSellingManagerTemplateResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerTemplateResponse"`

	*AbstractResponseType

	//
	// The unique identifier of the Selling Manager template.
	//
	DeletedSaleTemplateID string `xml:"DeletedSaleTemplateID,omitempty"`

	//
	// The name of the Selling Manager template.
	//
	DeletedSaleTemplateName string `xml:"DeletedSaleTemplateName,omitempty"`
}

type DeleteSellingManagerTemplateAutomationRuleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerTemplateAutomationRuleRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the Selling Manager template from which you want to remove automation rules.
	// You can obtain a <b>SaleTemplateID</b> by calling <b>GetSellingManagerInventory</b>.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`

	//
	// This field is included and set to <code>true</code> if the user would like to disable the automated listing rule for the Selling Manager template.
	//
	DeleteAutomatedListingRule bool `xml:"DeleteAutomatedListingRule,omitempty"`

	//
	// This field is included and set to <code>true</code> if the user would like to disable the automated relisting rule for the Selling Manager template.
	//
	DeleteAutomatedRelistingRule bool `xml:"DeleteAutomatedRelistingRule,omitempty"`

	//
	// This field is included and set to <code>true</code> if the user would like to disable the automated Second Chance Offer rule for the Selling Manager template.
	//
	DeleteAutomatedSecondChanceOfferRule bool `xml:"DeleteAutomatedSecondChanceOfferRule,omitempty"`
}

type DeleteSellingManagerTemplateAutomationRuleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DeleteSellingManagerTemplateAutomationRuleResponse"`

	*AbstractResponseType

	//
	// This container is returned if automated listing rules are set up for the Selling Manager template.
	//
	AutomatedListingRule *SellingManagerAutoListType `xml:"AutomatedListingRule,omitempty"`

	//
	// This container is returned if automated relisting rules are set up for the Selling Manager template.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// This container is returned if automated Second Chance Offer rules are set up for the Selling Manager template.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`

	//
	// Contains fees that may be incurred when items are listed using the
	// automation rules (e.g., a scheduled listing fee). Use of an automation rule
	// does not in itself have a fee, but use can result in a fee.
	//
	Fees *FeesType `xml:"Fees,omitempty"`
}

type DisableUnpaidItemAssistanceRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DisableUnpaidItemAssistanceRequest"`

	*AbstractRequestType

	//
	// Unique identifier for an eBay listing. A listing can have multiple order line items, but only one <b>ItemID</b>. To identify a specific order line item for which to disable the Unpaid Item Assistant mechanism, either an <b>ItemID</b>/<b>TransactionID</b> pair, an <b>OrderLineItemID</b>, or a <b>DisputeID</b> (if an Unpaid Item case already exists) is required in the request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The unique identifier of an order line item. An order line item is created once there is a commitment from a buyer to purchase an item. To identify a specific order line item for which to disable the Unpaid Item Assistant mechanism, either an <b>ItemID</b>/<b>TransactionID</b> pair, an <b>OrderLineItemID</b>, or a <b>DisputeID</b> (if an Unpaid Item case already exists) is required in the request.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// A unique identifier for an Unpaid Item case that is filed against an order line item. If an <b>ItemID</b>/<b>TransactionID</b> pair or an <b>OrderLineItemID</b> is used to identify an order line item, <b>DisputeID</b> cannot be used and will be ignored if it is included in the request.
	//
	DisputeID *DisputeIDType `xml:"DisputeID,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between these two IDs. To identify a specific order line item for which to disable the Unpaid Item Assistant mechanism, either an <b>ItemID</b>/<b>TransactionID</b> pair, an <b>OrderLineItemID</b>, or a <b>DisputeID</b> is required in the request.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type DisableUnpaidItemAssistanceResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents DisableUnpaidItemAssistanceResponse"`

	*AbstractResponseType
}

type EndFixedPriceItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents EndFixedPriceItemRequest"`

	*AbstractRequestType

	//
	// Unique identifier of the listing that you want to end.
	// <br><br>
	// In the <b>EndFixedPriceItem</b> request, either <b>ItemID</b> or <b>SKU</b> value is required.
	// If both are passed in and they don't refer to the same listing, eBay
	// ignores <b>SKU</b> and considers only the <b>ItemID</b>.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The seller's reason for ending the listing early is input into this required field. The seller is not allowed to use the <code>ProductDeleted</code> value, as this ending reason can only be used internally by eBay to administratively end a listing due to the associated Catalog product being removed from the eBay Catalog.
	//
	EndingReason *EndReasonCodeType `xml:"EndingReason,omitempty"`

	//
	// The seller-defined SKU (stock keeping unit) value of the item in the listing being ended. The <b>SKU</b> field can only be used to end a listing if that listing was created or relisted with an <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b> call, and the <b>Item.InventoryTrackingMethod</b> was included in the call and set to <code>SKU</code>.
	// <br><br>
	// In the <b>EndFixedPriceItem</b> request, either <b>ItemID</b> or <b>SKU</b> is required.
	// If both are passed in and they don't refer to the same listing, eBay
	// ignores <b>SKU</b> and considers only the lt;b>ItemID</b>.
	//
	SKU *SKUType `xml:"SKU,omitempty"`
}

type EndFixedPriceItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents EndFixedPriceItemResponse"`

	*AbstractResponseType

	//
	// Timestamp that indicates the date and time (GMT) that the specified  listing was ended.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// If a SKU (stock-keeping unit) exists for the item in the listing, it is returned in the response.
	//
	SKU *SKUType `xml:"SKU,omitempty"`
}

type EndItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents EndItemRequest"`

	*AbstractRequestType

	//
	// Unique item ID that identifies the listing that you want to end.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The seller's reason for ending the listing early is input into this required field. The seller is not allowed to use the <code>ProductDeleted</code> value, as this ending reason can only be used internally by eBay to administratively end a listing due to the associated Catalog product being removed from the eBay Catalog.
	//
	EndingReason *EndReasonCodeType `xml:"EndingReason,omitempty"`

	//
	// This field was previously only used to identify and end Half.com listings, and since the Half.com site has been shut down, this element is no longer applicable.
	//
	SellerInventoryID string `xml:"SellerInventoryID,omitempty"`
}

type EndItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents EndItemResponse"`

	*AbstractResponseType

	//
	// This timestamp indicates the date and time (returned in GMT) when the specified eBay listing was ended.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`
}

type EndItemsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents EndItemsRequest"`

	*AbstractRequestType

	//
	// An <b>EndItemRequestContainer</b> container is required for each eBay listing that the seller plans to end through the <b>EndItems</b> call. Up to 10 eBay listings can be ended with one <b>EndItems</b> call.
	//
	EndItemRequestContainer []*EndItemRequestContainerType `xml:"EndItemRequestContainer,omitempty"`
}

type EndItemsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents EndItemsResponse"`

	*AbstractResponseType

	//
	// Returns a response for an individually ended item. Mutiple containers will be listed if multiple items are ended.
	//
	EndItemResponseContainer []*EndItemResponseContainerType `xml:"EndItemResponseContainer,omitempty"`
}

type ExtendSiteHostedPicturesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ExtendSiteHostedPicturesRequest"`

	*AbstractRequestType

	//
	// The URL of the image hosted by eBay Picture Services. This URL is returned in the <b>SiteHostedPictureDetails.FullURL</b> field of the <b>UploadSiteHostedPictures</b> response.
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`

	//
	// The number of days by which to extend the expiration date for the
	// specified image.
	//
	ExtensionInDays int32 `xml:"ExtensionInDays,omitempty"`
}

type ExtendSiteHostedPicturesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ExtendSiteHostedPicturesResponse"`

	*AbstractResponseType

	//
	// The URL of the site-hosted picture whose expiration date was extended through the <b>ExtendSiteHostedPictures</b> call. This field will be returned if the expiration date of the site-hosted picture was successfully extended.
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`
}

type FetchTokenRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FetchTokenRequest"`

	*AbstractRequestType

	//
	// A value associated with the token retrieval request. SecretID is
	// defined by the application, and is passed in the redirect URL to the
	// eBay sign-in page. eBay recommends using a UUID for the secret ID
	// value. You must also set Username (part of the RequesterCredentials)
	// for the particular user of interest. SecretID and Username are not
	// required if SessionID is present.
	//
	SecretID string `xml:"SecretID,omitempty"`

	//
	// A value associated with the token retrieval request. eBay generates the
	// session ID when the application makes a GetSessionID request. SessionID
	// is passed in the redirect URL to the eBay sign-in page. The advantage
	// of using SessionID is that it does not require UserID as part of the
	// FetchToken request. SessionID is not required if SecretID is present.
	//
	SessionID string `xml:"SessionID,omitempty"`
}

type FetchTokenResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents FetchTokenResponse"`

	*AbstractResponseType

	//
	// The authentication token for the user.
	//
	EBayAuthToken string `xml:"eBayAuthToken,omitempty"`

	//
	// Date and time at which the token returned in eBayAuthToken expires
	// and can no longer be used to authenticate the user for that application.
	//
	HardExpirationTime time.Time `xml:"HardExpirationTime,omitempty"`

	//
	// The REST authentication token for the user.
	//
	RESTToken string `xml:"RESTToken,omitempty"`
}

type GetAccountRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetAccountRequest"`

	*AbstractRequestType

	//
	// Specifies the report format in which to return account entries.
	//
	AccountHistorySelection *AccountHistorySelectionCodeType `xml:"AccountHistorySelection,omitempty"`

	//
	// This field is used to retrieve all account entries from a specific invoice, which is identified through this <b>InvoiceDate</b> field with the timestamp of the account invoice. This field is only applicable if the  <b>AccountHistorySelection</b> value is set to 'SpecifiedInvoice'; otherwise, this field will be ignored.
	//
	InvoiceDate time.Time `xml:"InvoiceDate,omitempty"`

	//
	// This field is used to retrieve all account entries dating back to the timestamp passed into this <b>BeginDate</b> field up until the timestamp passed into the <b>EndDate</b> field. The <b>BeginDate</b> value can not be set back any further than four months into the past.
	// <br/><br/>
	// The allowed date formats are <em>YYYY-MM-DD</em> and <em>YYYY-MM-DD HH:mm:ss</em> The <b>BeginDate</b> value must be less than or equal to the <b>EndDate</b> value. The user might use the same values in both fields if that user wanted to retrieve all account entries from a specific day (if <em>YYYY-MM-DD</em> format used) or wanted to retrieve a specific account entry (if <em>YYYY-MM-DD HH:mm:ss</em> format used).
	// <br/><br/>
	// This field is only applicable if the  <b>AccountHistorySelection</b> value is set to 'BetweenSpecifiedDates'; otherwise, this field will be ignored. fiedDates' is used, both the <b>BeginDate</b> and <b>EndDate</b> must be included.
	//
	BeginDate time.Time `xml:"BeginDate,omitempty"`

	//
	// This field is used to retrieve all account entries dating up to the timestamp passed into this <b>EndDate</b> field dating back to the timestamp passed into the <b>BeginDate</b> field. The <b>EndDate</b> value can not be set for a future date.
	// <br/><br/>
	// The allowed date formats are <em>YYYY-MM-DD</em> and <em>YYYY-MM-DD HH:mm:ss</em> The <b>EndDate</b> value must be more than or equal to the <b>BeginDate</b> value. The user might use the same values in both fields if that user wanted to retrieve all account entries from a specific day (if <em>YYYY-MM-DD</em> format used) or wanted to retrieve a specific account entry (if <em>YYYY-MM-DD HH:mm:ss</em> format used).
	// <br/><br/>
	// This field is only applicable if the  <b>AccountHistorySelection</b> value is set to 'BetweenSpecifiedDates'; otherwise, this field will be ignored. If 'BetweenSpecifiedDates' is used, both the <b>BeginDate</b> and <b>EndDate</b> must be included.
	//
	EndDate time.Time `xml:"EndDate,omitempty"`

	//
	// This container is used to control how many account entries are returned on each page of data in the response. <b>PaginationType</b> is used by numerous Trading API calls, and the default and maximum values for the <b>EntriesPerPage</b> field differs with each call. For the <b>GetAccount</b> call, the default value is 500 (account entries) per page, and maximum allowed value is 2000 (account entries) per page.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// By default, the current balance of the user's account will not be returned in the call response. To retrieve the current balance of their account, the user should include the <b>ExcludeBalance</b> flag in the request and set its value to 'false'. The current balance on the account will be shown in the <b>AccountSummary.CurrentBalance</b> field in the call response.
	//
	ExcludeBalance bool `xml:"ExcludeBalance,omitempty"`

	//
	// Specifies whether to return account summary information in an
	// AccountSummary node. Default is true, to return AccountSummary.
	//
	ExcludeSummary bool `xml:"ExcludeSummary,omitempty"`

	//
	// Specifies whether to retrieve the rate used for the currency conversion for usage transactions.
	//
	IncludeConversionRate bool `xml:"IncludeConversionRate,omitempty"`

	//
	// Specifies how account entries should be sorted in the response, by an
	// element and then in ascending or descending order.
	//
	AccountEntrySortType *AccountEntrySortTypeCodeType `xml:"AccountEntrySortType,omitempty"`

	//
	// Specifies the currency used in the account report. Do not specify Currency
	// in the request unless the following conditions are met. First, the user has
	// or had multiple accounts under the same UserID. Second, the account
	// identified in the request uses the currency you specify in the request. An
	// error is returned if no account is found that uses the currency you specify
	// in the request.
	//
	Currency *CurrencyCodeType `xml:"Currency,omitempty"`

	//
	// Specifies the item ID for which to return account entries. If ItemID is
	// used, all other filters in the request are ignored. If the specified item
	// does not exist or if the requesting user is not the seller of the item, an
	// error is returned.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`
}

type GetAccountResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetAccountResponse"`

	*AbstractResponseType

	//
	// Specifies the seller's unique account number.
	//
	AccountID string `xml:"AccountID,omitempty"`

	//
	// Contains summary data for the seller's account, such as the overall
	// balance, bank account and credit card information, and amount and
	// date of any past due balances. Can also contain data for
	// one or more additional accounts, if the user has changed country
	// of residence.
	//
	AccountSummary *AccountSummaryType `xml:"AccountSummary,omitempty"`

	//
	// Indicates the currency used for monetary amounts in the report.
	//
	Currency *CurrencyCodeType `xml:"Currency,omitempty"`

	//
	// This container holds an array of account entries. The account entries that are returned are dependent on the selection that the user made in the <b>AccountHistorySelection</b> field in the call request. Each <b>AccountEntry</b> container consists of one credit, one debit, or one administrative action on the account. It is possible that no <b>AccountEntry</b> containers will be returned if no account entries exist since the last invoice (if 'LastInvoice' value is used), between the specified dates (if 'BetweenSpecifiedDates' value is used), or on a specified invoice (if 'SpecifiedInvoice' value is used).
	//
	AccountEntries *AccountEntriesType `xml:"AccountEntries,omitempty"`

	//
	// This container shows the total number of account entries and the total number of  account entry pages that exist based on the filters used in the <b>GetAccount</b> call request. The total number of account entry pages is partly controlled by the <b>Pagination.EntriesPerPage</b> value that is set in the request.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// If this boolean value is returned as 'true', there are more account entries to view on one or more pages of data. To view additional entries, the user would have to make additional <b>GetAccount</b> calls and increment the value of the <b>Pagination.PageNumber</b> field by '1' to view additional pages of account entries.
	//
	HasMoreEntries bool `xml:"HasMoreEntries,omitempty"`

	//
	// This integer value indicates the number of account entries that are being returned per virtual page of data. This value will be the same value passed into the <b>Pagination.EntriesPerPage</b> field in the request.
	//
	EntriesPerPage int32 `xml:"EntriesPerPage,omitempty"`

	//
	// This integer value indicates the current page number of account entries that is currently being shown. This value will be the same value passed into the <b>Pagination.PageNumber</b> field in the request.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`
}

type GetAdFormatLeadsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetAdFormatLeadsRequest"`

	*AbstractRequestType

	//
	// The unique identifier of an item listed on the eBay site.
	// Returned by eBay when the item is created. This ID must correspond
	// to an ad format item.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Filters the leads based on their status.
	//
	Status *MessageStatusTypeCodeType `xml:"Status,omitempty"`

	//
	// Boolean which indicates whether to return mail messages for this lead in a MemberMessage node.
	//
	IncludeMemberMessages bool `xml:"IncludeMemberMessages,omitempty"`

	//
	// Used with EndCreationTime to limit the returned leads for a user to only
	// those with a creation date greater than or equal to the specified date and
	// time.
	//
	StartCreationTime time.Time `xml:"StartCreationTime,omitempty"`

	//
	// Used with StartCreationTime to limit the returned leads for a user to only
	// those with a creation date less than or equal to the specified date and
	// time.
	//
	EndCreationTime time.Time `xml:"EndCreationTime,omitempty"`
}

type GetAdFormatLeadsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetAdFormatLeadsResponse"`

	*AbstractResponseType

	//
	// Contains contact and other information for one lead. One node is
	// returned for each lead. Only returned at a detail level of ReturnAll. At
	// least one lead must be available for the specified item to return
	// AdFormatLead.
	//
	AdFormatLead []*AdFormatLeadType `xml:"AdFormatLead,omitempty"`

	//
	// The total number of leads returned. Only returned if you do not
	// specify a detail level.
	//
	AdFormatLeadCount int32 `xml:"AdFormatLeadCount,omitempty"`
}

type GetAllBiddersRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetAllBiddersRequest"`

	*AbstractRequestType

	//
	// This is the unique identifier of the auction listing for which bidders are being retrieved. This auction listing can be active or recently ended. However, to retrieve bidders for an active auction listing, the only <b>CallMode</b> enumeration value that can be used is <code>ViewAll</code>.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The enumeration value that is passed into this field will control the set of bidders that will be retrieved in the response. To retrieve bidders from a recently-ended auction listing, any of the three values can be used. To retrieve bidders for an active auction listing, only the <code>ViewAll</code> enumeration value can be used. These values are discussed in <b>GetAllBiddersModeCodeType</b>.
	//
	CallMode *GetAllBiddersModeCodeType `xml:"CallMode,omitempty"`

	//
	// The user must include this field and set its value to <code>true</code> if the user wishes to retrieve the  <b>BiddingSummary</b> container for each bidder. The <b>BiddingSummary</b> container consists of more detailed bidding information on each bidder.
	//
	IncludeBiddingSummary bool `xml:"IncludeBiddingSummary,omitempty"`
}

type GetAllBiddersResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetAllBiddersResponse"`

	*AbstractResponseType

	//
	// This container consists of an array of bids made on the specified auction listing. Each <b>OfferType</b> object represents the data for one bid.
	//
	BidArray *OfferArrayType `xml:"BidArray,omitempty"`

	//
	// The eBay user ID for the user with the winning bid (if auction has ended) or current highest bid (if auction is still active). The seller should take note of or save this User ID as this user may be a a Second Chance Offer candidate.
	//
	HighBidder *UserIDType `xml:"HighBidder,omitempty"`

	//
	// This is the dollar amount of the winning bid (if auction has ended) or dollar amount of the current highest bid (if auction is still active).
	//
	HighestBid *AmountType `xml:"HighestBid,omitempty"`

	//
	// This enumeration value indicates the listing status of the specified listing.
	//
	ListingStatus *ListingStatusCodeType `xml:"ListingStatus,omitempty"`
}

type GetApiAccessRulesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetApiAccessRulesRequest"`

	*AbstractRequestType
}

type GetApiAccessRulesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetApiAccessRulesResponse"`

	*AbstractResponseType

	//
	// Each returned <b>ApiAccessRule</b> container includes the application's current daily, hourly, and periodic usage of a call, and the maximum amount of times that the application can make that call during the given period.
	//
	ApiAccessRule []*ApiAccessRuleType `xml:"ApiAccessRule,omitempty"`
}

type GetBestOffersRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetBestOffersRequest"`

	*AbstractRequestType

	//
	// The unique identifier of an eBay listing. If an <b>ItemID</b> is used by itself in the call request, all Best Offers in all states are retrieved for this listing. However, the seller can also combine <b>ItemID</b> and a <b>BestOfferStatus</b> value if that seller only wants to see Best Offers in a specific state. If a <b>BestOfferID</b> field is included in the call request, any <b>ItemID</b> value will be ignored since eBay will only search for and return the Best Offer identified in the <b>BestOfferID</b> field.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The unique identifier of a Best Offer. An identifier for a Best Offer is automatically created by eBay once a prospective buyer makes a Best Offer on a Best Offer-enabled listing. If a <b>BestOfferID</b> value is supplied in the call request, any <b>ItemID</b> or <b>BestOfferStatus</b> values will be ignored. Only the Best Offer identified by the <b>BestOfferID</b> value will be returned.
	//
	BestOfferID *BestOfferIDType `xml:"BestOfferID,omitempty"`

	//
	// This field can be used if the seller wants to retrieve Best Offers in a specific state. The typical use case for this field is when the seller wants to retrieve Best Offers in all states for a specific listing. In fact, the <b>All</b> value can only be used if an <b>ItemID</b> value is also supplied in the call request. If a <b>BestOfferID</b> field is included in the call request, any <b>BestOfferStatus</b> value will be ignored since eBay will only search for and return the Best Offer identified in the <b>BestOfferID</b> field.
	//
	BestOfferStatus *BestOfferStatusCodeType `xml:"BestOfferStatus,omitempty"`

	//
	// This container can be used if the seller is expecting that the <b>GetBestOffers</b> call will retrieve a large number of results, so that seller wishes to view just a subset (one page of multiple pages) of those results at a time. See this container's child fields for more information on how pagination is used.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`
}

type GetBestOffersResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetBestOffersResponse"`

	*AbstractResponseType

	//
	// All Best Offers for the item according to the filter or Best Offer ID (or both) used in the input. The buyer and seller messages are returned only if the detail level is defined. Includes the buyer and seller message only if the <code>ReturnAll</code> detail level is used. Only returned if Best Offers have been made.
	//
	BestOfferArray *BestOfferArrayType `xml:"BestOfferArray,omitempty"`

	//
	// This container consists of several details about the listing for which a Best Offer has been made, including the Item ID, the current price of the item (not the Best Offer price), and the time that the listing is scheduled to end.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// A collection of details about the Best Offers received for a specific item. Empty if there are no Best Offers.
	//
	ItemBestOffersArray *ItemBestOffersArrayType `xml:"ItemBestOffersArray,omitempty"`

	//
	// This integer value indicates the current page number of Best Offers that is currently being shown. This value will be the same value passed into the <b>Pagination.PageNumber</b> field in the request.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// Provides information about the data returned, including the number of pages and the number
	// of entries.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`
}

type GetBidderListRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetBidderListRequest"`

	*AbstractRequestType

	//
	// Indicates whether or not to limit the result set to active items. If <code>true</code>, only
	// active items are returned and the <b>EndTimeFrom</b> and <b>EndTimeTo</b> filters are
	// ignored. If <code>false</code> (or not sent), both active and ended items are returned.
	//
	ActiveItemsOnly bool `xml:"ActiveItemsOnly,omitempty"`

	//
	// Used in conjunction with <b>EndTimeTo</b>. Limits returned items to only those for
	// which the item's end date is on or after the date/time specified. Specify an
	// end date within 30 days prior to today. Items that ended more than 30 days
	// ago are omitted from the results. If specified, <b>EndTimeTo</b> must also be
	// specified. Express date/time in the format <code>YYYY-MM-DD HH:MM:SS</code>, and in GMT.
	// This field is ignored if <b>ActiveItemsOnly</b> is set to <code>true</code>.
	//
	EndTimeFrom time.Time `xml:"EndTimeFrom,omitempty"`

	//
	// Used in conjunction with <b>EndTimeFrom</b>. Limits returned items to only those for
	// which the item's end date is on or before the date/time specified. If
	// specified, <b>EndTimeFrom</b> must also be specified. Express date/time in the format
	// <code>YYYY-MM-DD HH:MM:SS</code>, and in GMT. This field is ignored if <b>ActiveItemsOnly</b> is set to
	// <code>true</code>. Note that for GTC items, whose end times automatically increment by 30
	// days every 30 days, an <b>EndTimeTo</b> value within the first 30 days of a listing will
	// refer to the listing's initial end time.
	//
	EndTimeTo time.Time `xml:"EndTimeTo,omitempty"`

	//
	// The unique identifier of an eBay user.
	// <br><br>
	// This field is generally not required unless there are multiple User IDs tied to the requester credentials that are specified through the <b>RequesterCredentials</b> header. If there are multiple User IDs tied to the requester credentials, this field allows you to specify the User ID for which you wish to retrieves bids and purchases.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// You can control some of the fields returned in the response by specifying one of two values in the <b>GranularityLevel</b> field: <code>Fine</code> or <code>Medium</code>. <code>Fine</code> returns more fields than the default, while setting this field to <code>Medium</code> returns an abbreviated set of results.
	//
	GranularityLevel *GranularityLevelCodeType `xml:"GranularityLevel,omitempty"`
}

type GetBidderListResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetBidderListResponse"`

	*AbstractResponseType

	//
	// Data for one eBay bidder.
	//
	Bidder *UserType `xml:"Bidder,omitempty"`

	//
	// Array of items the bidder has bid on, has won or has lost.
	//
	BidItemArray *ItemArrayType `xml:"BidItemArray,omitempty"`
}

type GetCategoriesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoriesRequest"`

	*AbstractRequestType

	//
	// This field is used if the user wants to retrieve category data for another eBay site (other than the one specified in the <code>X-EBAY-API-SITEID</code> request header).
	// <br>
	// <br>
	// If the user wishes to retrieve category data for the US eBay Motors site, the user must set the Site ID in the <code>X-EBAY-API-SITEID</code> request header to <code>0</code>, and then set this field's value to <code>100</code>.
	//
	CategorySiteID string `xml:"CategorySiteID,omitempty"`

	//
	// Specifies the ID of the highest-level category to return,
	// along with its subcategories.
	// If no parent category is specified, all categories are
	// returned for the specified site. (Please do not pass a value of 0; zero (0) is an invalid value for CategoryParent.)
	// To determine available category IDs, call GetCategories with
	// no filters and use a DetailLevel value of ReturnAll.
	// If you specify multiple parent categories, the hierarchy for
	// each one is returned.
	//
	CategoryParent []string `xml:"CategoryParent,omitempty"`

	//
	// Specifies the maximum depth of the category hierarchy to retrieve,
	// where the top-level categories (meta-categories) are at level 1.
	// Retrieves all category nodes with a category level less than or
	// equal to this value.
	// If not specified, retrieves categories at all applicable levels.
	// As with all calls, the actual data returned will vary depending
	// on how you configure other fields in the request
	// (including <b>DetailLevel</b>).
	//
	LevelLimit int32 `xml:"LevelLimit,omitempty"`

	//
	// This flag controls whether all eBay categories (that satisfy input filters) are returned, or only leaf categories (you can only list items in leaf categories) are returned. The default value is 'true', so if this field is omitted, all eBay categories will be returned. If you only want to retrieve leaf categories, include this flag and set it to 'false'. The actual data returned will vary depending on how you configure other fields in the request.
	//
	ViewAllNodes bool `xml:"ViewAllNodes,omitempty"`
}

type GetCategoriesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoriesResponse"`

	*AbstractResponseType

	//
	// List of the returned categories. The category array contains one CategoryType
	// object for each returned category. Returns empty if no detail level is specified.
	//
	CategoryArray *CategoryArrayType `xml:"CategoryArray,omitempty"`

	//
	// Indicates the number of categories returned (i.e., the number of CategoryType
	// objects in CategoryArray).
	//
	CategoryCount int32 `xml:"CategoryCount,omitempty"`

	//
	// Indicates the last date and time that eBay modified the category hierarchy for the
	// specified eBay site.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// Indicates the version of the category hierarchy on the
	// specified eBay site.
	//
	CategoryVersion string `xml:"CategoryVersion,omitempty"`

	//
	// If true, <b>ReservePriceAllowed</b> indicates that all categories on the
	// site allow the seller to specify a reserve price for an item.
	// If false, this field is not returned in the response and all categories on the site do not normally allow sellers to specify reserve prices.
	// The Category.ORPA (override reserve price allowed) field can override (or toggle)
	// the reserve price allowed setting for a given category.
	// For example, if <b>ReservePriceAllowed</b> is false and Category.ORPA is true,
	// the category overrides the site setting and supports reserve prices.
	// If <b>ReservePriceAllowed</b> is true and Category.ORPA is true, the category
	// overrides the site setting and does does not support reserve prices.
	//
	ReservePriceAllowed bool `xml:"ReservePriceAllowed,omitempty"`

	//
	// Indicates the lowest possible reserve price allowed for any item
	// listed in any category on the site. You can use the fields returned by <b>GetCategoryFeatures</b> to determine if a different Minimum Reserve Price is defined for the category you want to use.
	//
	MinimumReservePrice float64 `xml:"MinimumReservePrice,omitempty"`

	//
	// If true, <b>ReduceReserveAllowed</b> indicates that all categories on the
	// site allow the seller to reduce an item's reserve price.
	// If false, this field is not returned in the response and all categories on the site do not normally allow sellers to reduce an
	// item's reserve price.
	// The Category.ORRA (override reduce reserve price) field can override (or toggle)
	// the reserve price reduction setting for a given category.
	// For example, if <b>ReduceReserveAllowed</b> is false and Category.ORRA is true,
	// the category overrides the site setting and supports reducing reserve prices.
	// If <b>ReduceReserveAllowed</b> is true and Category.ORRA is true, the category
	// overrides the site setting and does does not support reducing reserve prices.
	//
	ReduceReserveAllowed bool `xml:"ReduceReserveAllowed,omitempty"`
}

type GetCategoryFeaturesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryFeaturesRequest"`

	*AbstractRequestType

	//
	// Specifies the category for which you want to retrieve the feature settings.
	// <br><br>
	// Specify a CategoryID, set DetailLevel to ReturnAll, and set
	// ViewAllNodes to true to return the default site settings, the
	// overrides for the specified category, plus all the child
	// categories that have overrides on the features they inherit.
	// <br><br>
	// If you also set AllFeaturesForCategory to true, eBay returns the site
	// defaults, plus all the settings for the specified category. Child
	// category information is not returned in this case.
	// <br><br>
	// If CategoryID is not specified, eBay returns the feature settings for
	// the site. To return details on all categories that have overrides on
	// the properties they inherit, set DetailLevel to ReturnAll, and set
	// ViewAllNodes to true. If you also set AllFeaturesForCategory to true,
	// eBay returns only the site defaults with no child category information.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// A level of depth in the category hierarchy. Retrieves all category
	// nodes with a CategoryLevel less than or equal to the LevelLimit
	// value.
	//
	LevelLimit int32 `xml:"LevelLimit,omitempty"`

	//
	// You must set <b>DetailLevel</b> to <code>ReturnAll</code> in order to correctly populate the
	// response when you set <b>ViewAllNodes</b> to true. In this case, eBay returns the
	// site defaults along with all the categories that override the feature
	// settings they inherit. Here, each Category container shows only the
	// features that it has overridden from its parent node.
	// <br><br>
	// If you also specify a <b>CategoryID</b>, eBay returns the details for that category,
	// along with containers for each of its child categories that have feature
	// overrides.
	// <br><br>
	// Note that if <b>ViewAllNodes</b> is set to false (the default) and <b>DetailLevel</b> is
	// set to <code>ReturnAll</code>, eBay returns only the leaf categories that have features
	// that override the settings they inherit. In this case, the call will not
	// return leaf categories that do not have overrides.
	//
	ViewAllNodes bool `xml:"ViewAllNodes,omitempty"`

	//
	// Use this field if you want to know if specific features are enabled at the site or root category level. Multiple <b>FeatureID</b> elements can be used in the request. If no <b>FeatureID</b> elements are used, the call retrieves data for all features, as applicable to the other request parameters.
	//
	FeatureID []*FeatureIDCodeType `xml:"FeatureID,omitempty"`

	//
	// Use this switch to view all of the feature settings for a specific category.
	// All feature settings are returned, regardless of the site default settings.
	// This element works in conjunction with CategoryID--refer to the notes for
	// that element for more details.
	// <br><br>
	// If you also set FeatureID, eBay returns the status of the specified
	// features only, for the specified category.
	//
	AllFeaturesForCategory bool `xml:"AllFeaturesForCategory,omitempty"`
}

type GetCategoryFeaturesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryFeaturesResponse"`

	*AbstractResponseType

	//
	// Returns the current version of the set of feature meta-data.
	// Compare this value to the version of the last version you
	// downloaded to determine whether the data may have changed.
	//
	CategoryVersion string `xml:"CategoryVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the
	// category hierarchy were last updated.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// A category whose feature settings are different from the settings of its parent category.<br>
	// <br>
	// For example, suppose there is a branch of the category tree with 5 category levels
	// (L1, L2, L3, L4, and L5). Suppose the feature settings for SiteDefaults, L1, L4, and L5
	// are all "A", and the settings for L2 and L3 are "B". In this case:<br>
	// L1's settings (A) match the site default, so L1 is not returned.<br>
	// L2's settings (B) are different from L1's, so L2 is returned.<br>
	// L3's settings (B) are the same as L2's, so L3 is not returned<br>
	// L4's settings (A) are different from L3's, so L4 is returned<br>
	// L5's settings (A) are the same as L4's, so L5 is not returned.<br>
	// <br>
	// If you specified a particular FeatureID in the request, this field
	// only returns feature settings for that feature.
	// Only returned when the category is different from its parent.
	// If the category has children and they aren't returned,
	// it means the children inherit the category's feature settings.
	//
	Category []*CategoryFeatureType `xml:"Category,omitempty"`

	//
	// Returns the feature settings defined for most categories on the site. Most categories share these settings. However, some categories can override some settings, as indicated in the Category nodes (if any).
	//
	SiteDefaults *SiteDefaultsType `xml:"SiteDefaults,omitempty"`

	//
	// Returns definitions of the various features on the site,
	// or the features you requested in FeatureID (if any).
	// Each feature has a node within FeatureDefinitions.
	//
	FeatureDefinitions *FeatureDefinitionsType `xml:"FeatureDefinitions,omitempty"`
}

type GetCategoryMappingsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryMappingsRequest"`

	*AbstractRequestType

	//
	// A version of the category mapping for the site. Filters
	// out data from the call to return only the category
	// mappings for which the data has changed since the
	// specified version. If not specified, all category
	// mappings are returned. Typically, an application passes
	// the version value of the last set of category mappings
	// that the application stored locally. The latest version
	// value is not necessarily greater than the previous value
	// that was returned. Therefore, when comparing versions,
	// only compare whether the value has changed.
	//
	CategoryVersion string `xml:"CategoryVersion,omitempty"`
}

type GetCategoryMappingsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategoryMappingsResponse"`

	*AbstractResponseType

	//
	// Mapping between an old category ID and an active category ID. Returned when
	// category mappings exist and the value of CategoryVersion is different from
	// the current version on the site.
	//
	CategoryMapping []*CategoryMappingType `xml:"CategoryMapping,omitempty"`

	//
	// Version value assigned to the current category mapping data for the site.
	// Compare this value to the version value the application stored with the mappings
	// the last time the application executed the call. If the versions are the same,
	// the data has not changed since the last time the data was retrieved and stored.
	//
	CategoryVersion string `xml:"CategoryVersion,omitempty"`
}

type GetCategorySpecificsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategorySpecificsRequest"`

	*AbstractRequestType

	//
	// A unique identifer for an eBay leaf-level category. Recommended Item Specifics names and values will be retrieved for each eBay category that is specified. Up to 100 <b>CategoryID</b> values may be specified in one call.
	// <br><br>
	// A <b>GetCategorySpecifics</b> call request requires at least one of the following: a <b>CategoryID</b> value, a <b>CategorySpecifics.CategoryID</b> value, or the
	// <b>CategorySpecificsFileInfo</b> field with its value set to <code>true</code>. <b>CategoryID</b> values and
	// <b>CategorySpecific.CategoryID</b> values can both be used in the same request.
	// <br><br>
	// Keep in mind that a high number of specified categories can result in
	// longer response times and larger result sets. If your call request happens to time out, you might want specify fewer categories. If any
	// <b>CategoryID</b> values are specified more than once, only the first instance will be used.
	//
	CategoryID []string `xml:"CategoryID,omitempty"`

	//
	// This dateTime filter can be included and used if the user only wants to check for recently-added Item Specifics names and values for one or more categories. If this filter is used, the Item Specifics recommendation engine will only check for Item Specifics names and values that have been added/changed since the date that was passed in to this field. If this field is used, the call will not return any Item Specifics data; it will only return the <b>Recommendations.Updated</b> boolean field for each specified eBay category. A <code>true</code> value in this field will indicate that the recommended Item Specifics names/values for the eBay category have changed since the timestamp passed in the <b>LastUpdateTime</b> field, and a <code>false</code> value in this field will indicate that the recommended Item Specifics names/values for the eBay category have not changed since the timestamp passed in the <b>LastUpdateTime</b> field.
	// <br><br>
	// Typically, you will pass in the timestamp value that was returned the last time you refreshed the list of Item Specifics names and values for the same categories. If the <b>Recommendations.Updated</b> flag returns <code>true</code> for any eBay categories in the response, you will want to call <b>GetCategorySpecifics</b> again for those eBay categories to get the latest names and values. As downloading all the data may affect your application's performance, it may help to only download Item Specifics data for an eBay category if the data has changed since you last checked.
	//
	LastUpdateTime time.Time `xml:"LastUpdateTime,omitempty"`

	//
	// This field can be used if you want to control the number of Item Specifics that are returned for each specified eBay category. If you only wanted to retrieve the 10 most popular Item Specifics  per category, you would include this field and set its value to <code>10</code>. Note that mandatory Item Specifics are always returned first in the response. If this field is omitted, its value defaults to 30.
	// <br><br>
	//
	MaxNames int32 `xml:"MaxNames,omitempty"`

	//
	// This field can be used if you want to control the number of values that are returned for each returned Item Specific in each specified eBay category. If you only wanted to retrieve the 10 most popular values/options for each returned Item Specific in each category, you would include this field and set its value to <code>10</code>. If this field is omitted, its value defaults to 25. Many Item Specifics will have more values than 25, so the user may want to experiment with this, including this field and setting its value quite a bit higher than 25.
	// <br><br>
	//
	MaxValuesPerName int32 `xml:"MaxValuesPerName,omitempty"`

	//
	// This field can be used if you already have an Item Specific name in mind, and you only want the recommended values for this Item Specifics name.
	// If you specify multiple eBay categories in the request, the recommendation engine may find a matching Item Specifics name for some categories, but not for others. For eBay categories where the Item Specifics name is not found, recommended Item Specifics names and values will be returned. The Item Specifics name passed in this field is case-sensitive, and wildcards are not supported.
	// <br><br>
	//
	Name string `xml:"Name,omitempty"`

	//
	// This container can be used instead of, or in conjunction with <b>CategoryID</b> values specified at the call request root level. The <b>CategorySpecific</b> container can actually be more powerful since you can pass in multiple Category ID and Item Specifics name combinations, and if you specify <b>CategoryID</b> values at the root level, only one (Item Specifics) <b>Name</b> value can be used.
	// <br><br>
	// A <b>GetCategorySpecifics</b> call request requires at least one of the following: a <b>CategoryID</b> value, a <b>CategorySpecifics.CategoryID</b> value, or the
	// <b>CategorySpecificsFileInfo</b> field with its value set to <code>true</code>. <b>CategoryID</b> values and
	// <b>CategorySpecific.CategoryID</b> values can both be used in the same request.
	// <br><br>
	// Keep in mind that a high number of specified categories can result in
	// longer response times and larger result sets. If your call request happens to time out, you might want specify fewer categories. If any
	// <b>CategorySpecifics.CategoryID</b> values are specified more than once, only the first instance will be used.
	//
	CategorySpecific []*CategoryItemSpecificsType `xml:"CategorySpecific,omitempty"`

	//
	// If this boolean field is included and set to <code>true</code>, the <b>Relationship</b> container will not be returned for any Item Specifics name or value recommendations. Relationship recommendations tell you whether an Item Specific has a logical dependency another Item Specific.
	// <br> <br>
	// For example, in a clothing category, Size Type could be
	// recommended as a parent of Size, because Size=Small would
	// mean something different to buyers depending on whether
	// Size Type=Petite or Size Type=Plus.<br>
	// <br>
	// In general, it is a good idea to retrieve and use relationship
	// recommendations, as this data can help buyers find the items
	// they want more easily.
	//
	ExcludeRelationships bool `xml:"ExcludeRelationships,omitempty"`

	//
	// If this boolean field is included and set to <code>true</code>, eBay's level of confidence in the popularity of each Item Specific name and value for the specified category is returned in the response. Some sellers may find this useful when choosing whether to use eBay's recommendation or their own Item Specifics names or values.
	// <br> <br>
	// If this field is used, either one or more <b>CategoryID</b> values and/or one or more <b>CategorySpecific.CategoryID</b> values must be specified. If you try to use this field solely with the <b>CategorySpecificsFileInfo</b> field, the request fails and no <b>TaskReferenceID</b> or <b>FileReferenceID</b> values are returned.
	//
	IncludeConfidence bool `xml:"IncludeConfidence,omitempty"`

	//
	// If this boolean field is included and set to <code>true</code>, the response includes a <b>FileReferenceID</b> and
	// <b>TaskReferenceID</b> value. Use these identifiers as inputs to the <b>downloadFile</b>
	// call in the eBay File Transfer API. That API lets you retrieve
	// a single (bulk) <b>GetCategorySpecifics</b> response with all the Item
	// Specifics recommendations available for the requested site ID.
	// (The <b>downloadFile</b> call downloads a .zip file as an
	// attachment.)<br>
	// <br>
	// Either the <b>CategorySpecificsFileInfo</b> field or one or more <b>CategoryID</b> and/or <b>CategorySpecific.CategoryID</b> values are required
	// in a <b>GetCategorySpecifics</b> call. <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// You can use the File Transfer API without using or learning
	// about the Bulk Data Exchange API or other
	// Large Merchant Services APIs.
	// </span>
	//
	CategorySpecificsFileInfo bool `xml:"CategorySpecificsFileInfo,omitempty"`
}

type GetCategorySpecificsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCategorySpecificsResponse"`

	*AbstractResponseType

	//
	// This container provide details about recommended Item Specifics and Product Identifier types.
	// Contains the most popular Item Specifics and supported/required Product Identifier types, if any, for a category
	// specified in the request, or contains information about whether
	// the recommendations have changed for that category since
	// the <b>LastUpdateTime</b> you requested. <br>
	// <br>
	// The most relevant Item Specifics are returned first. If a name
	// has multiple values, the first value is more popular.<br>
	// <br>
	// This node returns empty (or it's not returned) for a category if
	// there is no applicable data (such as when you request a parent category, a category that has no popular Item Specifics yet,
	// or a duplicate category that was already returned).
	// If you pass in the <b>CategoryID</b> and <b>Name</b> fields together, but no
	// matching values are found for the name, eBay returns the name
	// with no values (even if the name is not recommended).<br>
	// <br>
	// If <b>GetCategoryFeatures</b> indicates that Item Specifics are
	// enabled for a leaf category, but <b>GetCategorySpecifics</b> doesn't
	// return any recommendations for that category, the seller can still
	// specify their own Item Specifics in that category.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The <b>ProductIdentifiers</b> container is for future use, and is not currently returned in the <b>GetCategorySpecifics</b> call. Until the <b>ProductIdentifiers</b> container is wired on and returned, an alternative way to see if a Product Identifier type is required for a category is to identify the Product Identifier type through the <b>Recommendations.NameRecommendation.Name</b> field in the <b>GetCategorySpecifics</b> response, and then look at the corresponding  <b>Recommendations.NameRecommendation.ValidationRules.MinValues</b> field. The <b>GetCategoryFeatures</b> call can also be used, and the seller will look for the values returned for that category under the <b>EANEnabled</b>, <b>ISBNEnabled</b>, <b>UPCEnabled</b>, and <b>EANEnabled</b>, <b>ISBNEnabled</b>, <b>BrandMPNIdentifierEnabled</b> fields that indicate the Product Identifier types that are supported/required for the category.
	//
	Recommendations []*RecommendationsType `xml:"Recommendations,omitempty"`

	//
	// A <b>TaskReferenceID</b> and a <b>FileReferenceID</b> value are returned if the <b>CategorySpecificsFileInfo</b> field is included in the call request and set to <code>true</code>. These values will be used as inputs in the <b>downloadFile</b> call of the File Transfer API. That API lets you retrieve a single (bulk) <b>GetCategorySpecifics</b> response with all the Item Specifics recommendations available for the requested site ID. (The <b>downloadFile</b> call downloads a .zip file as an attachment.)
	//
	TaskReferenceID string `xml:"TaskReferenceID,omitempty"`

	//
	// A <b>TaskReferenceID</b> and a <b>FileReferenceID</b> value are returned if the <b>CategorySpecificsFileInfo</b> field is included in the call request and set to <code>true</code>. These values will be used as inputs in the <b>downloadFile</b> call of the File Transfer API. That API lets you retrieve a single (bulk) <b>GetCategorySpecifics</b> response with all the Item Specifics recommendations available for the requested site ID. (The <b>downloadFile</b> call downloads a .zip file as an attachment.)
	//
	FileReferenceID string `xml:"FileReferenceID,omitempty"`
}

type GetChallengeTokenRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetChallengeTokenRequest"`

	*AbstractRequestType
}

type GetChallengeTokenResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetChallengeTokenResponse"`

	*AbstractResponseType

	//
	// Botblock token that is used to validate that the user is a human and not a bot.
	//
	ChallengeToken string `xml:"ChallengeToken,omitempty"`

	//
	// The URL of the image your application should display to
	// the user for a botblock challenge.
	//
	ImageChallengeURL string `xml:"ImageChallengeURL,omitempty"`

	//
	// The URL of the audio clip your application should provide for sight-impaired users.
	// The audio clip corresponds to the image.
	//
	AudioChallengeURL string `xml:"AudioChallengeURL,omitempty"`
}

type GetCharitiesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCharitiesRequest"`

	*AbstractRequestType

	//
	// A unique identification number assigned to a nonprofit
	// organization when that organization registers with the PayPal Giving Fund. If a <b>CharityID</b> value is used in the request, all other search filters set in the call request will be ignored, as the call will only search for the specified nonprofit organization.
	//
	CharityID string `xml:"CharityID,omitempty"`

	//
	// This field will accept the full or partial name of a registered nonprofit organization. For example, if you pass in a value of <b>heart</b>, all registered nonprofit organizations with "heart" in their name may be returned in the response. If the <b>MatchType</b> field is used and set to <code>StartsWith</code>, the phrase "heart" must come at the beginning of the nonprofit organization's name. However, if the <b>MatchType</b> field is used and set to <code>Contains</code>, or is not used at all, all registered nonprofit organizations with "heart" in their name should be returned in the response. The string passed in this field is not case-sensitive.
	// <br/><br/>
	//
	CharityName string `xml:"CharityName,omitempty"`

	//
	// This field accept any string up to 350 characters in length. The functionality of this field is similar to the <b>CharityName</b> field, except that the call will also search for the supplied query string within the charity's mission statement (which is returned under the <b>Charity.Mission</b> field in the response) as long as the <b>IncludeDescription</b> field is included in the call request and set to <code>true</code>. If you pass in a value of <b>heart</b>, all registered nonprofit organizations with "heart" in their name or in their mission statement may be returned in the response.
	// <br/><br/>
	// The string passed in this field is not case-sensitive. The <b>MatchType</b> field will have no effect if the <b>Query</b> field is used, as the <b>MatchType</b> field will only have an effect if a <b>CharityName</b> string field is included.
	// <br/><br/>
	//
	Query string `xml:"Query,omitempty"`

	//
	// This field can be used to search for registered nonprofit organizations within a specified geographical region. Each geographical region will have an integer value associated with it. This integer value is what is passed in to this field.
	//
	CharityRegion int32 `xml:"CharityRegion,omitempty"`

	//
	// This field can be used to search for registered nonprofit organizations within a specified charity domain or category. Each charity domain will have an integer value associated with it. This integer value is what is passed in to this field. Nonprofit organizations can be associated with multiple charity domains.
	//
	CharityDomain int32 `xml:"CharityDomain,omitempty"`

	//
	// This field should be included and set to <code>true</code> if the <b>Query</b> field is used, and the user wishes to search the charity's name and its mission statement. If this field is omitted or included and set to <code>false</code>, the call will only search charity names for the specified string in the  <b>Query</b> field.
	//
	IncludeDescription bool `xml:"IncludeDescription,omitempty"`

	//
	// This filter is used if the user wants to specify where to look for the string specified in the <b>CharityName</b> field. The enumeration value input into this field controls the type of string matching to use when a value is submitted in the
	// <b>CharityName</b> field. If this field is omitted, and a <b>CharityName</b> string is used, this parameter value defaults to <code>StartsWith</code>.
	// <br/><br/>
	// This field is no applicable when a <b>Query</b> value is used.
	// <br/><br/>
	//
	MatchType *StringMatchCodeType `xml:"MatchType,omitempty"`

	//
	// This boolean field is used and set to <code>true</code> if the user wants to search for nonprofit organizations currently featured on the eBay for Charity site.
	//
	Featured bool `xml:"Featured,omitempty"`

	//
	// Reserved for future use.
	//
	CampaignID int64 `xml:"CampaignID,omitempty"`
}

type GetCharitiesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetCharitiesResponse"`

	*AbstractResponseType

	//
	// Each <b>Charity</b> container consists of information about a specific nonprofit organization. Each nonprofit organization is identified by the <b>id</b> attribute of the container. If no nonprofit organization are found that match the input criteria, no <b>Charity</b> containers are returned.
	//
	Charity []*CharityInfoType `xml:"Charity,omitempty"`
}

type GetClientAlertsAuthTokenRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetClientAlertsAuthTokenRequest"`

	*AbstractRequestType
}

type GetClientAlertsAuthTokenResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetClientAlertsAuthTokenResponse"`

	*AbstractResponseType

	//
	// This token string is required for the Login call in the Client Alerts API.
	// The Client Alerts GetUserAlerts call, which returns alerts about events
	// associated with a specific user, requires Login.
	//
	ClientAlertsAuthToken string `xml:"ClientAlertsAuthToken,omitempty"`

	//
	// A Client Alerts token expires after seven days.
	//
	HardExpirationTime time.Time `xml:"HardExpirationTime,omitempty"`
}

type GetContextualKeywordsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetContextualKeywordsRequest"`

	*AbstractRequestType

	//
	// The URL of the web page from which eBay is to extract keywords.
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// Web page encoding by which the URL is to be handled, such as ISO-8859-1.
	//
	Encoding string `xml:"Encoding,omitempty"`

	//
	// The ID of the category to which keywords are to be limited.
	// Zero or more category IDs can be specified.
	//
	CategoryID []string `xml:"CategoryID,omitempty"`
}

type GetContextualKeywordsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetContextualKeywordsResponse"`

	*AbstractResponseType

	//
	// An array of either keyword/category pairs or categories, with ranking and score.
	//
	ContextSearchAsset []*ContextSearchAssetType `xml:"ContextSearchAsset,omitempty"`
}

type GetDescriptionTemplatesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetDescriptionTemplatesRequest"`

	*AbstractRequestType

	//
	// A <b>CategoryID</b> value can be specified if the seller would like to only see the Listing Designer templates that are available for that eBay category. This field will be ignored if the <b>MotorVehicles</b> boolean field is also included in the call request and set to <code>true</code>.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This dateTime filter can be included and used if the user only wants to check for recently-added Listing Designer templates. If this filter is used, only the Listing Designer templates that have been added/modified after the specified timestamp will be returned in the response.
	// <br/><br/>
	// Typically, you will pass in the timestamp value that was returned the last time you refreshed the list of Listing Designer templates.
	//
	LastModifiedTime time.Time `xml:"LastModifiedTime,omitempty"`

	//
	// This boolean field should be included and set to <code>true</code> if the user would only like to see the Listing Designer templates that are available for motor vehicle categories. This field will override any <b>CategoryID</b> value that is specified in the call request.
	//
	MotorVehicles bool `xml:"MotorVehicles,omitempty"`
}

type GetDescriptionTemplatesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetDescriptionTemplatesResponse"`

	*AbstractResponseType

	//
	// A <b>DescriptionTemplate</b> container is retrieved for each available Listing Designer template. Each <b>DescriptionTemplate</b> container includes the unique identifier of the template, the Listing Designer Theme Group that it belongs to, the CDATA representation of the Listing Designer template, and the URL to an image that serves as an example of the Listing Designer template.
	//
	DescriptionTemplate []*DescriptionTemplateType `xml:"DescriptionTemplate,omitempty"`

	//
	// This integer value indicates the total number of Listing Designer Layout templates that were retrieved. This field is always returned, even if it is <code>0</code>
	//
	LayoutTotal int32 `xml:"LayoutTotal,omitempty"`

	//
	// The unique identifier of a Listing Designer Layout template that is now obsolete. An <b>ObsoleteLayoutID</b> field is returned for each obsolete Listing Designer Layout template.
	//
	ObsoleteLayoutID []int32 `xml:"ObsoleteLayoutID,omitempty"`

	//
	// The unique identifier of a Listing Designer Theme template that is now obsolete. An <b>ObsoleteThemeID</b> field is returned for each obsolete Listing Designer Theme template.
	//
	ObsoleteThemeID []int32 `xml:"ObsoleteThemeID,omitempty"`

	//
	// A <b>ThemeGroup</b> container is retrieved for each available Listing Designer Theme Group. Each <b>ThemeGroup</b> container includes the unique identifier of the Theme Group, the Theme Group name, and all of the Listing Designer Theme template that belong to that Theme Group.
	//
	ThemeGroup []*ThemeGroupType `xml:"ThemeGroup,omitempty"`

	//
	// This integer value indicates the total number of Listing Designer Theme templates that were retrieved. This field is always returned, even if it is <code>0</code>
	//
	ThemeTotal int32 `xml:"ThemeTotal,omitempty"`
}

type GetDisputeRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetDisputeRequest"`

	*AbstractRequestType

	//
	// The unique identifier of an seller-initiated dispute. The caller passes in this value to retrieve detailed information on a specific dispute.
	// <br/><br/>
	// <span class="tablenote"><strong>Note:</strong>
	// Buyer-initiated Money Back Guarantee cases are not supported with this call. To retrieve and manage eBay Money Back Guarantee cases, the Case Management calls of the <a href="https://developer.ebay.com/Devzone/post-order/index.html" target="_blank">Post-Order API</a> can be used instead.
	// </span>
	//
	DisputeID *DisputeIDType `xml:"DisputeID,omitempty"`
}

type GetDisputeResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetDisputeResponse"`

	*AbstractResponseType

	//
	// If the dispute that is specified in the call request is found, this <b>Dispute</b> container is returned in the response. This container includes detailed information about the dispute, the buyer and seller user IDs, and information on the listing that is associated with the dispute.
	//
	Dispute *DisputeType `xml:"Dispute,omitempty"`
}

type GetFeedbackRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetFeedbackRequest"`

	*AbstractRequestType

	//
	// The user's eBay User ID is specified in this field. If this field is used, all retrieved Feedback data will be for this eBay user. Specifies the user whose feedback data is to be returned. If this field is omitted in the call request, all retrieved Feedback records will be for the eBay user making the call.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// The unique identifier of a Feedback record. This field is used if the user wants to retrieve a specific Feedback record. If <b>FeedbackID</b> is specified in the call request, all other input fields are ignored.
	//
	FeedbackID string `xml:"FeedbackID,omitempty"`

	//
	// Unique identifier for an eBay listing. A listing can have multiple order line items, but only one <b>ItemID</b>. If <b>ItemID</b> is specified in the <b>GetFeedback</b> request, the returned Feedback record(s) are restricted to the specified <b>ItemID</b>. The maximum number of Feedback records that can be returned is 100.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. A
	// <b>TransactionID</b> can be paired up with its corresponding <b>ItemID</b> and used as
	// an input filter in the <b>GetFeedback</b> request. If an <b>ItemID</b>/<b>TransactionID</b>
	// pair or an <b>OrderLineItemID</b> value is used to retrieve a feedback record
	// on a specific order line item, the <b>FeedbackType</b> and <b>Pagination</b>
	// fields (if included) are ignored.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This field is used to retrieve Feedback records of a specific type (Positive, Negative, or Neutral) in <b>FeedbackDetailArray</b>. You can include one or two <b> CommentType</b> fields in the request. If no <b>CommentType</b> value is specified, Feedback records of all types are returned.
	//
	CommentType []*CommentTypeCodeType `xml:"CommentType,omitempty"`

	//
	// This field is used to restrict retrieved Feedback records to those that the user left for other buyers, Feedback records received as a seller, Feedback records received as a buyer, or Feedback records received as a buyer and seller. The default value is <b>FeedbackReceived</b>, so if the  <b>FeedbackType</b> field is omitted in the request, all Feedback records received by the user as a buyer and seller are returned in the response. "Feedback Left" data will not be returned in the call response.
	//
	FeedbackType *FeedbackTypeCodeType `xml:"FeedbackType,omitempty"`

	//
	// Controls the pagination of the result set. Child elements, <b>EntriesPerPage</b> and
	// <b>PageNumber</b>, specify the maximum number of individual feedback records to return
	// per call and which page of data to return. Only applicable if <b>DetailLevel</b> is
	// set to <b>ReturnAll</b> and the call is returning feedback for a <b>UserID</b>. Feedback
	// summary data is not paginated, but when pagination is used, it is returned
	// after the last feedback detail entry.
	// <br><br>
	// Accepted values for <b>Pagination.EntriesPerPage</b> for GetFeedback is 25 (the
	// default), 50, 100, and 200. If you specify a value of zero, or a value
	// greater than 200, the call fails with an error. If you specify a value between
	// one and twenty-four, the value is rounded up to 25. Values between 26 and 199
	// that are not one of the accepted values are rounded down to the nearest
	// accepted value.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. An <b>OrderLineItemID</b> can be used as an
	// input filter in the <b>GetFeedback</b> request. If an <b>OrderLineItemID</b> value is
	// used to retrieve a feedback record on a specific order line item, the
	// <b>FeedbackType</b> and <b>Pagination</b> fields (if included) are ignored.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type GetFeedbackResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetFeedbackResponse"`

	*AbstractResponseType

	//
	// Contains the individual Feedback records for the user or order line item specified in the request. There is one <b>FeedbackDetail</b> container returned for each Feedback record. Only populated with data when a detail level of <code>ReturnAll</code> is specified in the request. Not returned if you specify a <b>FeedbackID</b> in the request.
	//
	FeedbackDetailArray *FeedbackDetailArrayType `xml:"FeedbackDetailArray,omitempty"`

	//
	// Indicates the  total number of Feedback records returned in the the response. Only applicable if Feedback details are returned.
	//
	FeedbackDetailItemTotal int32 `xml:"FeedbackDetailItemTotal,omitempty"`

	//
	// Summary Feedback data for the user. Contains counts of positive, neutral,
	// and negative Feedback for pre-defined time periods. Only applicable if Feedback details are returned.
	//
	FeedbackSummary *FeedbackSummaryType `xml:"FeedbackSummary,omitempty"`

	//
	// Indicates the total feedback score for the user.
	//
	FeedbackScore int32 `xml:"FeedbackScore,omitempty"`

	//
	// Contains information regarding the pagination of data (if pagination is
	// used), including total number of pages and total number of entries. This
	// is only applicable when a User ID or no ID (requester option) is specified.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// Indicates the number of Feedback records that are being
	// returned per page of data (i.e., per call).
	// Only returned if entries are returned.
	//
	EntriesPerPage int32 `xml:"EntriesPerPage,omitempty"`

	//
	// Indicates which page of data was just returned. Will be the same as the
	// value specified in Pagination.PageNumber. (If the input is
	// higher than the total number of pages, the call fails with an error.)
	// Only returned if items are returned.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`
}

type GetItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemRequest"`

	*AbstractRequestType

	//
	// This field is used to identify the eBay listing by Item ID value.
	// <br><br>
	// <b>ItemID</b> is a required input in most cases. <b>SKU</b> can be used instead in certain
	// cases (see the description of SKU). If both <b>ItemID</b> and <b>SKU</b> are specified for
	// items where the inventory tracking method is <b>ItemID</b>, <b>ItemID</b> takes precedence.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The seller can include this field and set its value to <code>true</code> if that seller wants to see how many prospective bidders/buyers currently have the item added to their Watch Lists. The Watch count is returned in the <b>WatchCount</b> field in the response.
	// <br>
	// <br>
	// This field will only be returnd to the seller of the item.
	//
	IncludeWatchCount bool `xml:"IncludeWatchCount,omitempty"`

	//
	// This field is deprecated.
	//
	IncludeCrossPromotion bool `xml:"IncludeCrossPromotion,omitempty"`

	//
	// If this field is included and set to <code>true</code>, the call response includes the <b>ItemSpecifics</b> container
	// if Item Specifics are defined for the listing.<br>
	// <br>
	// An Item Specific is any aspect that helps define/classify the item. Many eBay categories mandate including specific Item Specifics, so it is always a good idea to make a call to <b>GetCategorySpecifics</b> to see what Item Specifics are required and which ones are recommended.<br>
	// <br>
	// Including this field and setting it to <code>true</code> will also return the <strong>UnitInfo</strong> container if applicable. The <strong>UnitInfo</strong> container will provide information about the weight, volume or other quantity measurement of a listed item. The European Union requires listings for certain types of products to include the price per unit so buyers can accurately compare prices. eBay uses the <strong>UnitType</strong> and <strong>UnitQuantity</strong> values and the item's listed price to calculate and display the per-unit price on eBay EU sites.
	//
	IncludeItemSpecifics bool `xml:"IncludeItemSpecifics,omitempty"`

	//
	// The seller will include this field and set its value to <code>true<code> if the seller wishes to view the defined sales tax rates for the various jurisdictions in the country (generally, states and provinces). Information for each defined sales tax rate will be returned in the <b>TaxTable</b> container in the response.
	// <br/><br/>
	// Even if this field is included and set to <code>true</code>, no <b>TaxTable</b> container will be returned If no sales tax rates are defined for any tax jurisdiction in the seller's sales tax table.
	// <br/><br/>
	// Sales tax tables are only available for eBay US and Canada marketplaces. Sales tax rates can be added/modified in My eBay, through the <b>SetTaxTable</b> and <b>GetTaxTable</b> calls of the Trading API, or through the Sales Tax calls of the Account API.
	//
	IncludeTaxTable bool `xml:"IncludeTaxTable,omitempty"`

	//
	// Retrieves an item that was listed by the user identified
	// in AuthToken and that is being tracked by this SKU.<br>
	// <br>
	// A SKU (stock keeping unit) is an identifier defined by a seller.
	// Some sellers use SKUs to track complex flows of products
	// and information on the client side.
	// eBay preserves the SKU on the item, enabling you
	// to obtain it before and after an order line item is created.
	// (SKU is recommended as an alternative to
	// ApplicationData.)<br>
	// <br>
	// In <b>GetItem</b>, <b>SKU</b> can only be used to retrieve one of your
	// own items, where you listed the item by using <b>AddFixedPriceItem</b>
	// or <b>RelistFixedPriceItem</b>,
	// and you set <b>Item.InventoryTrackingMethod</b> to <b>SKU</b> at
	// the time the item was listed. (These criteria are necessary to
	// uniquely identify the listing by a SKU.)<br>
	// <br>
	// Either <b>ItemID</b> or <b>SKU</b> is required in the request.
	// If both are passed, they must refer to the same item,
	// and that item must have <b>InventoryTrackingMethod</b> set to <b>SKU</b>.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// Variation-level SKU that uniquely identifes a Variation within
	// the listing identified by <b>ItemID</b>. Only applicable when the
	// seller listed the item with Variation-level SKU (<b>Variation.SKU</b>)
	// values. Retrieves all the usual <b>Item</b> fields, but limits the
	// <b>Variations</b> content to the specified Variation.
	// If not specified, the response includes all Variations.
	//
	VariationSKU *SKUType `xml:"VariationSKU,omitempty"`

	//
	// Name-value pairs that identify one or more Variations within the
	// listing identified by <b>ItemID</b>. Only applicable when the seller
	// listed the item with Variations. Retrieves all the usual <b>Item</b>
	// fields, but limits the Variations content to the specified
	// Variation(s). If the specified pairs do not match any Variation,
	// eBay returns all Variations.<br>
	// <br>
	// To retrieve only one variation, specify the full set of
	// name/value pairs that match all the name-value pairs of one
	// Variation. <br>
	// <br>
	// To retrieve multiple variations (using a wildcard),
	// specify one or more name/value pairs that partially match the
	// desired variations. For example, if the listing contains
	// Variations for shirts in different colors and sizes, specify
	// Color as Red (and no other name/value pairs) to retrieve
	// all the red shirts in all sizes (but no other colors).
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`

	//
	// A unique identifier for an order line item. An order line item is created
	// when a buyer commits to purchasing an item.
	// <br><br>
	// Since you can change active multiple-quantity fixed-price listings even
	// after one of the items has been purchased, the <b>TransactionID</b> is
	// associated with a snapshot of the item data at the time of the purchase.
	// <br><br>
	// After one item in a multi-quantity listing has been sold, sellers can not
	// change the values in the Title, Primary Category, Secondary Category,
	// Listing Duration, and Listing Type fields. However, all other fields are
	// editable.
	// <br><br>
	// Specifying a <b>TransactionID</b> in the <b>GetItem</b> request allows you to retrieve
	// a snapshot of the listing as it was when the order line item was created.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This field is used to specify whether or not to retrieve Parts
	// Compatiblity information for a motor part or accessory listing. If this field is included and set to <code>true</code>, the <b>Item.ItemCompatibilityList</b> container will be returned if a Parts Compatibility list exists for the listing. A Parts Compatibility list is a list of motor vehicles that are compatible with the listed motor part or accesory item. If a Parts Compatibility list does not exist for the listing, this field will have no effect if it is included, regardless of its value (<code>true</code> or <code>false</code>).
	// <br><br>
	// If this field is included and set to <code>false</code> or omitted, but a Parts Compatibility list does exist for the listing, the  <b>Item.ItemCompatibilityList</b> container will not be returned, but the <b>Item.ItemCompatibilityCount</b> field will be returned, and this field will simply indicate the quantity of motor vehicles that are compatible with the the listed motor part or accesory item.
	// <br><br>
	// Parts Compatibility lists are only applicable to motor parts and accessory categories on the sites that support eBay Motors - US, CA, UK, and DE.
	//
	IncludeItemCompatibilityList bool `xml:"IncludeItemCompatibilityList,omitempty"`
}

type GetItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemResponse"`

	*AbstractResponseType

	//
	// This container consists of detailed information about the retrieved listing. The amount of information that is returned is partially controlled by the filters that are set in the call request.
	//
	Item *ItemType `xml:"Item,omitempty"`
}

type GetItemShippingRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemShippingRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the eBay listing for which to retrieve estimated shipping costs for all offered shipping service options. The <b>ItemID</b> value passed into this field should be for an listing that offers at least one calculated shipping service option, and for an item that has yet to be shipped.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This field is used to specify the quantity of the item. The <b>QuantitySold</b> value defaults to <code>1</code> if not specified. If a value greater than <code>1</code> is specified in this field, the shipping service costs returned in the response will reflect the expense to ship multiple quantity of an item.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// The destination postal code (or zip code for US) is supplied in this field. <b>GetItemShipping</b> requires the destination of the shipment. Some countries will require both the <b>DestinationPostalCode</b> and the lt;b>DestinationCountryCode</b>, and some countries will accept either one or the other.
	//
	DestinationPostalCode string `xml:"DestinationPostalCode,omitempty"`

	//
	// The destination country code is supplied in this field. <b>GetItemShipping</b> requires the destination of the shipment. Some countries will require both the <b>DestinationPostalCode</b> and the lt;b>DestinationCountryCode</b>, and some countries will accept either one or the other.
	// <br><br>
	// Two-digit country codes can be found in <a href="types/CountryCodeType.html">CountryCodeType</a>.
	//
	DestinationCountryCode *CountryCodeType `xml:"DestinationCountryCode,omitempty"`
}

type GetItemShippingResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemShippingResponse"`

	*AbstractResponseType

	//
	// This container will be returned if at least one domestic or international shipping service option is available for the item. A <b>ShippingServiceOptions</b> (for domestic shipping) and/or an <b>InternationalShippingServiceOptions</b> container (for international shipping) is returned for each available calculated shipping service option. These shipping service option containers consists of estimated shipping cost and estimated shipping times.
	// <br>
	// <br>
	// Any error about shipping services (returned by a vendor of eBay's who calculates shipping costs) is returned in <b>ShippingRateErrorMessage</b>. Errors from a shipping service are likely to be related to issues with shipping specifications, such as package size and the selected shipping method not supported by a particular shipping service.
	//
	ShippingDetails *ShippingDetailsType `xml:"ShippingDetails,omitempty"`

	//
	// This container is returned in <b>GetItemShipping</b> if In-Store Pickup or Click and Collect is enabled for the listing.
	// <br/><br/>
	// In a future release, a fulfillment duration element will be added to this container and will be used to determine when the item will be ready for pickup in a store (immediately, two hours after sale, two days after sale, etc.).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup and Click and Collect features are generally only available to large retail merchants in the US, and can only be applied to multiple-quantity, fixed-price listings. In-Store Pickup is only available in the US, and Click and Collect is only available on eBay UK, Australia, and Germany sites.
	// </span>
	//
	PickUpInStoreDetails *PickupInStoreDetailsType `xml:"PickUpInStoreDetails,omitempty"`
}

type GetItemTransactionsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemTransactionsRequest"`

	*AbstractRequestType

	//
	// Unique identifier for an eBay listing. A listing can have multiple
	// order line items, but only one <b>ItemID</b>. When you use
	// <b>ItemID</b> alone, eBay returns all order line items that are associated with
	// the <b>ItemID</b>. If you pair <b>ItemID</b> with a specific <b>TransactionID</b>,
	// data on a specific order line item is returned. If <b>OrderLineItemID</b> is
	// specified in the request, any <b>ItemID</b>/<b>TransactionID</b> pair specified in the
	// same request will be ignored.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// <b>GetItemTransactions</b> doesn't support SKU as an input because this
	// call requires an identifier that is unique across your active
	// and ended listings. Even when <b>InventoryTrackingMethod</b> is set to
	// <b>SKU</b> in a listing, the SKU is only unique across your active
	// listings (not your ended listings). To retrieve order line items
	// by SKU, use <b>GetSellerTransactions</b> or <b>GetOrderTransactions</b> instead.
	// </span>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields specify a date range for retrieving order line items associated with the specified <b>ItemID</b>. The <b>ModTimeFrom</b> field is the starting date range. All of the listing's order line items that were last modified within this date range are returned in the output.  The maximum date range that may be specified is 30 days. This value cannot be set back more than 90 days in the past, as this call cannot retrieve sales older than 90 days old. The maximum date range that may be specified is 30 days. This field is not applicable if a specific <b>TransactionID</b> or <b>OrderLineItemID</b> is included in the request or if the <b>NumberOfDays</b> date filter is used.
	// <br><br>
	// If you don't specify a <b>ModTimeFrom</b>/<b>ModTimeTo</b> filter, the <b>NumberOfDays</b> time filter is used and it defaults to 30 (days).
	//
	ModTimeFrom time.Time `xml:"ModTimeFrom,omitempty"`

	//
	// The <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields specify a date range for retrieving order line items associated with the specified <b>ItemID</b>. The <b>ModTimeTo</b> field is the ending date range. All eBay order line items that were last modified within this date range are returned in the output. The maximum date range that may be specified is 30 days. If the <b>ModTimeFrom</b> field is used and the <b>ModTimeTo</b> field is omitted, the <b>ModTimeTo</b> value defaults to the present time or to 30 days past the <b>ModTimeFrom</b> value (if <b>ModTimeFrom</b> value is more than 30 days in the past). This field is not applicable if a specific <b>TransactionID</b> or <b>OrderLineItemID</b> is included in the request or if the <b>NumberOfDays</b> date filter is used.
	// <br><br>
	// If you don't specify a <b>ModTimeFrom</b>/<b>ModTimeTo</b> filter, the <b>NumberOfDays</b> time filter is used and it defaults to 30 (days).
	//
	ModTimeTo time.Time `xml:"ModTimeTo,omitempty"`

	//
	// Include a <b>TransactionID</b> field in the request if you want to retrieve the
	// data for a specific order line item. If a <b>TransactionID</b> is
	// provided, any specified time filter is ignored.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// Child elements control pagination of the output. Use the <b>EntriesPerPage</b> property to control the number of order line items to return per call and the <b>PageNumber</b> property to specify the specific page of data to return. If multiple pages of order line items are returned based on input criteria and Pagination properties, <b>GetItemTransactions</b> will need to be called multiple times (with the <b>PageNumber</b> value being increased by 1 each time) to scroll through all results.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// Indicates whether to include the Final Value Fee (FVF) for all order line items in the response. The Final Value Fee is returned in the <b>Transaction.FinalValueFee</b> field. The Final Value Fee is assessed right after the creation of an order line item.
	//
	IncludeFinalValueFee bool `xml:"IncludeFinalValueFee,omitempty"`

	//
	// Include this field and set it to True if you want the <b>ContainingOrder</b>
	// container to be returned in the response under each <b>Transaction</b> node.
	// For single line item orders, the <b>ContainingOrder.OrderID</b> value takes the
	// value of the <b>OrderLineItemID</b> value for the order line item. For
	// <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-AnItem.html#CombinedInvoice">Combined Invoice</a> orders,
	// the <b>ContainingOrder.OrderID</b> value will be shared by at
	// least two order line items that are part of the same order.
	//
	IncludeContainingOrder bool `xml:"IncludeContainingOrder,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field's purpose is to allow the seller to retrieve only eBay listings or only Half.com listings instead of both order types. Since API support for Half.com listings is being deprecated, this field is no longer necessary to use since eBay orders will be the only orders that are retrieved.
	// </span>
	// The default behavior of <b>GetItemTransactions</b> is to retrieve all order line items originating from eBay.com and Half.com. If the user wants to retrieve only eBay.com order line items or only Half.com order line items, this filter can be used to perform that function. Inserting <code>eBay</code> into this field will restrict retrieved order line items to those originating on eBay.com, and inserting <code>Half</code> into this field will restrict retrieved order line items to those originating on Half.com.
	//
	Platform *TransactionPlatformCodeType `xml:"Platform,omitempty"`

	//
	// This time filter specifies the number of days (24-hour periods) in the
	// past to search for order line items. All eBay order line items that were
	// either created or modified within this period are returned in the
	// response. If specified, <b>NumberOfDays</b> will override any date range
	// specified with the <b>ModTimeFrom</b>/<b>ModTimeTo</b> time filters. This field is not
	// applicable if a specific <b>TransactionID</b> or <b>OrderLineItemID</b> is included in
	// the request.
	//
	NumberOfDays int32 `xml:"NumberOfDays,omitempty"`

	//
	// If included in the request and set to True, all variations defined for
	// the item are returned at the root level, including variations
	// that have no sales. If not included in the request or set to false, the
	// variations with sales are still returned in separate <b>Transaction</b> nodes. This information is intended to help sellers to reconcile their
	// local inventory with eBay's records, while processing order line items
	// (without requiring a separate call to <b>GetItem</b>).
	//
	IncludeVariations bool `xml:"IncludeVariations,omitempty"`

	//
	// A unique identifier for an eBay order line item. This field is created
	// as soon as there is a commitment to buy from the seller, and its value
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. If you want to retrieve data on a
	// specific order line item, you can use an <b>OrderLineItemID</b> value in the
	// request instead of the <b>ItemID</b>/<b>TransactionID</b> pair. If an <b>OrderLineItemID</b> is
	// provided, any specified time filter is ignored.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type GetItemTransactionsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemTransactionsResponse"`

	*AbstractResponseType

	//
	// Contains the total number of pages (<b>TotalNumberOfPages</b>) and the total number
	// of entries (<b>TotalNumberOfEntries</b>) that could be returned given repeated calls
	// that use the same selection criteria as the call that returned this response.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// Indicates whether there are additional order line items to retrieve.
	// That is, indicates whether more pages of data are available to be
	// returned, given the filters that were specified in the request.
	// Returns false for the last page of data.
	//
	HasMoreTransactions bool `xml:"HasMoreTransactions,omitempty"`

	//
	// Number of order line items returned per page (per call). May be a higher value
	// than <b>ReturnedTransactionCountActual</b> if the page returned is the last page
	// and more than one page of data exists.
	//
	TransactionsPerPage int32 `xml:"TransactionsPerPage,omitempty"`

	//
	// Page number for the page of order line items the response returned.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// Number of order line items retrieved in the current page of results just returned.
	// May be a lower value than <b>TransactionsPerPage</b> if the page returned is the last
	// page and more than one page of data exists.
	//
	ReturnedTransactionCountActual int32 `xml:"ReturnedTransactionCountActual,omitempty"`

	//
	// <b>Item</b> object that spawned the order line item. It is a purchase from this item's listing
	// that the order line item represents.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// List of <b>Transaction</b> objects representing the order line items resulting
	// from the listing. Each <b>Transaction</b> object contains the data for one purchase
	// (of one or more items in the same listing). The <b>Transaction.Item</b> field is not
	// returned because the <b>Item</b> object is returned at the root level of the response.
	// See the reference guide for more information about the fields that are returned.
	//
	TransactionArray *TransactionArrayType `xml:"TransactionArray,omitempty"`

	//
	// Indicates whether the item's seller has the preference enabled that shows
	// that the seller prefers PayPal as the method of payment for an item. This
	// preference is indicated on an item's View Item page and is intended to
	// influence a buyer to use PayPal
	// to pay for the item.
	//
	PayPalPreferred bool `xml:"PayPalPreferred,omitempty"`
}

type GetItemsAwaitingFeedbackRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemsAwaitingFeedbackRequest"`

	*AbstractRequestType

	//
	// This field allows the user to control how the order line items are returned in the response.
	// Valid values are:
	// <br/><br/>
	// <br/><b>EndTime</b>
	// <br/><b>EndTimeDescending</b>
	// <br/><b>FeedbackLeft</b>
	// <br/><b>FeedbackLeftDescending</b>
	// <br/><b>FeedbackReceived</b>
	// <br/><b>FeedbackReceivedDescending</b>
	// <br/><b>Title</b>
	// <br/><b>TitleDescending</b>
	// <br/><b>UserID</b>
	// <br/><b>UserIDDescending</b>
	// <br/><br/>
	// The user can read the <a href="types/ItemSortTypeCodeType.html">ItemSortTypeCodeType</a> definition for more information on these sort values.
	//
	Sort *ItemSortTypeCodeType `xml:"Sort,omitempty"`

	//
	// This container can be used if the user only wants to see a subset of order line item results. In this container, the user will specify the number of order line items to return per page of data, and will specify the specific page of data they want to view with each call.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`
}

type GetItemsAwaitingFeedbackResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetItemsAwaitingFeedbackResponse"`

	*AbstractResponseType

	//
	// This container consists of one or more order line items that are awaiting Feedback from the user that made the call. Each order line item is returned in its own <b>TransactionArray.Transaction</b> container.
	// <br><br>
	// This container will not be returned if no order line items are awaiting Feedback from the user who made the call.
	//
	ItemsAwaitingFeedback *PaginatedTransactionArrayType `xml:"ItemsAwaitingFeedback,omitempty"`
}

type GetMemberMessagesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMemberMessagesRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the eBay listing for which you wish to retrieve member messages.
	// <br><br>
	// For <em>Ask Seller Question</em> messages, the <b>ItemID</b> and/or a date range
	// (specified with <b>StartCreationTime</b> and <b>EndCreationTime</b> fields),
	// are required, or the call will fail.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This required field indicates the type of member message to retrieve. Only the following two enumeration values are allowed. The call will fail if this field is not included in the request.
	//
	MailMessageType *MessageTypeCodeType `xml:"MailMessageType,omitempty"`

	//
	// This field allows you to retrieve only unanswered member messages or answered member messages. If this field is omitted, both answered and unanswered member messages are retrieved.
	//
	MessageStatus *MessageStatusTypeCodeType `xml:"MessageStatus,omitempty"`

	//
	// If included in the request and set to <code>true</code>, only public messages (viewable in the Item listing) are returned. If omitted or set to <code>false</code> in the request, all messages (that match other filters in the request) are returned in the response.
	//
	DisplayToPublic bool `xml:"DisplayToPublic,omitempty"`

	//
	// Used as beginning of date range filter. If specified, filters the returned messages to only those with a creation date greater than or equal to the specified date and time.
	// <br><br>
	// For Contact eBay Member (CEM) messages, <b>StartCreationTime</b> and <b>EndCreationTime</b> must be provided.
	// <br><br>
	// For Ask Seller a Question (ASQ) messages, either the <b>ItemID</b>, or a date range (specified with <b>StartCreationTime</b> and <b>EndCreationTime</b>), or both must be included.
	//
	StartCreationTime time.Time `xml:"StartCreationTime,omitempty"`

	//
	// Used as end of date range filter. If specified, filters
	// the returned messages to only those with a creation date
	// less than or equal to the specified date and time.
	// <br><br>
	// For Contact eBay Member (CEM) messages, <b>StartCreationTime</b> and <b>EndCreationTime</b>
	// must be provided.
	// <br><br>
	// For Ask Seller a Question (ASQ) messages, either the <b>ItemID</b>, or a date range
	// (specified with <b>StartCreationTime</b> and <b>EndCreationTime</b>),
	// or both must be included.
	//
	EndCreationTime time.Time `xml:"EndCreationTime,omitempty"`

	//
	// Standard pagination argument used to reduce response.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// An ID that uniquely identifies the message for a given user to be retrieved. Used for the <b>AskSellerQuestion</b> notification only.
	//
	MemberMessageID string `xml:"MemberMessageID,omitempty"`

	//
	// An eBay ID that uniquely identifies a user. For <b>GetMemberMessages</b>, this is the sender of the message. If included in the request, returns only messages from the specified sender.
	//
	SenderID *UserIDType `xml:"SenderID,omitempty"`
}

type GetMemberMessagesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMemberMessagesResponse"`

	*AbstractResponseType

	//
	// The returned member messages. Returned if messages that meet the request criteria exist. Note that <b>GetMemberMessages</b> does not return messages when, in the request, the <b>MailMessageType</b> is <b>AskSellerQuestion</b>.
	//
	MemberMessage *MemberMessageExchangeArrayType `xml:"MemberMessage,omitempty"`

	//
	// Shows the pagination of data returned by requests.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// Specifies whether the response has more items.
	//
	HasMoreItems bool `xml:"HasMoreItems,omitempty"`
}

type GetMessagePreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMessagePreferencesRequest"`

	*AbstractRequestType

	//
	// The ID of the user to retrieve ASQ subjects for. This
	// value must be specified in the request, but does not
	// need to be the same user as the user making the
	// request.
	//
	SellerID *UserIDType `xml:"SellerID,omitempty"`

	//
	// If true, indicates that the ASQ subjects for the
	// specified user should be returned.
	//
	IncludeASQPreferences bool `xml:"IncludeASQPreferences,omitempty"`
}

type GetMessagePreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMessagePreferencesResponse"`

	*AbstractResponseType

	//
	// Returns a seller's ASQ subjects, each in its own Subject
	// node. If the seller has not customized the ASQ subjects
	// using SetMessagePreferences, the call will return the
	// current default values. Returned if
	// IncludeASQPreferences = true was specified in the
	// request.
	//
	ASQPreferences *ASQPreferencesType `xml:"ASQPreferences,omitempty"`
}

type GetMyMessagesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyMessagesRequest"`

	*AbstractRequestType

	//
	// This container is deprecated.
	//
	AlertIDs *MyMessagesAlertIDArrayType `xml:"AlertIDs,omitempty"`

	//
	// This container can be used to retrieve one or more specific messages identified with their unique <b>MessageID</b> values. Up to  10 <b>MessageID</b> values can be specified with one call.
	//
	MessageIDs *MyMessagesMessageIDArrayType `xml:"MessageIDs,omitempty"`

	//
	// A unique identifier for a My Messages folder. If a <b>FolderID</b> value is provided,
	// only messages from the specified folder are returned in the response.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// The beginning of the date-range filter.
	// Filtering takes into account the entire timestamp of when messages were sent.
	// Messages expire after one year.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// The end of the date-range filter. See StartTime
	// (which is the beginning of the date-range filter).
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This field is currently available on the US site. A container for IDs that
	// uniquely identify messages for a given user. If provided at the time of message
	// creation, this ID can be used to retrieve messages and will take precedence
	// over message ID.
	//
	ExternalMessageIDs *MyMessagesExternalMessageIDArrayType `xml:"ExternalMessageIDs,omitempty"`

	//
	// Specifies how to create virtual pages in the returned list (such as total
	// number of entries and total number of pages to return).
	// Default value for <b>EntriesPerPage</b> with <b>GetMyMessages</b> is 25.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// If this field is included in the request and set to <code>true</code>, only High Priority messages are returned in the response.
	//
	IncludeHighPriorityMessageOnly bool `xml:"IncludeHighPriorityMessageOnly,omitempty"`
}

type GetMyMessagesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyMessagesResponse"`

	*AbstractResponseType

	//
	// Summary data for a given user's messages. This includes the numbers of new
	// messages, flagged messages, and total messages. The amount and type of
	// data returned is the same whether or not the request includes specific
	// Message IDs. Always/Conditionally returned logic assumes a detail level of
	// ReturnMessages.
	//
	Summary *MyMessagesSummaryType `xml:"Summary,omitempty"`

	//
	// This container is deprecated.
	//
	Alerts *MyMessagesAlertArrayType `xml:"Alerts,omitempty"`

	//
	// This container consists of an array of one or more messages that match the search criteria in the call request.
	//
	Messages *MyMessagesMessageArrayType `xml:"Messages,omitempty"`
}

type GetMyeBayBuyingRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyeBayBuyingRequest"`

	*AbstractRequestType

	//
	// Include this container and set the <b>WatchList.Include</b> field to <code>true</code> to return the list of items on the eBay user's Watch List.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of watched items that will be returned.
	//
	WatchList *ItemListCustomizationType `xml:"WatchList,omitempty"`

	//
	// Include this container and set the <b>BidList.Include</b> field to <code>true</code> to return the list of auction items on which the eBay user has bid.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of auction items that will be returned.
	//
	BidList *ItemListCustomizationType `xml:"BidList,omitempty"`

	//
	// Include this container and set the <b>BestOfferList.Include</b> field to <code>true</code> to return the list of items on which the eBay user has made a Best Offer.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of items that will be returned.
	//
	BestOfferList *ItemListCustomizationType `xml:"BestOfferList,omitempty"`

	//
	// Include this container and set the <b>WonList.Include</b> field to <code>true</code> to return the list of auction items on which the eBay user has bid on and won.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of auction items that will be returned.
	//
	WonList *ItemListCustomizationType `xml:"WonList,omitempty"`

	//
	// Include this container and set the <b>LostList.Include</b> field to <code>true</code> to return the list of auction items on which the eBay user has bid on and lost.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of auction items that will be returned.
	//
	LostList *ItemListCustomizationType `xml:"LostList,omitempty"`

	//
	// Include this container and set the <b>FavoriteSearches.Include</b> field to <code>true</code> to return the list of the eBay user's saved searches.
	//
	FavoriteSearches *MyeBaySelectionType `xml:"FavoriteSearches,omitempty"`

	//
	// Include this container and set the <b>FavoriteSellers.Include</b> field to <code>true</code> to return the list of the eBay user's saved sellers.
	//
	FavoriteSellers *MyeBaySelectionType `xml:"FavoriteSellers,omitempty"`

	//
	// Include this container and set the <b>SecondChanceOffer.Include</b> field to <code>true</code> to return any Second Chance Offers that the eBay user has received.
	//
	SecondChanceOffer *MyeBaySelectionType `xml:"SecondChanceOffer,omitempty"`

	//
	// This field is deprecated.
	//
	BidAssistantList *BidAssistantListType `xml:"BidAssistantList,omitempty"`

	//
	// Include this container and set the <b>DeletedFromWonList.Include</b> field to <code>true</code> to return the list of auction items on which the eBay user has bid on and won, but has deleted from their My eBay page.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of auction items that will be returned.
	//
	DeletedFromWonList *ItemListCustomizationType `xml:"DeletedFromWonList,omitempty"`

	//
	// Include this container and set the <b>DeletedFromLostList.Include</b> field to <code>true</code> to return the list of auction items on which the eBay user has bid on and lost, and has deleted from their My eBay page.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of auction items that will be returned.
	//
	DeletedFromLostList *ItemListCustomizationType `xml:"DeletedFromLostList,omitempty"`

	//
	// Include this container and set the <b>BuyingSummary.Include</b> field to <code>true</code> to return the <b>BuyingSummary</b> container in the response. The <b>BuyingSummary</b> container consists of buying/bidding activity counts and values.
	//
	BuyingSummary *ItemListCustomizationType `xml:"BuyingSummary,omitempty"`

	//
	// Include this container and set the <b>UserDefinedLists.Include</b> field to <code>true</code> to return one or more user-defined lists. User-defined lists are lists created by the user in My eBay and consists of a combination of items, saved sellers, and/or saved searches.
	//
	UserDefinedLists *MyeBaySelectionType `xml:"UserDefinedLists,omitempty"`

	//
	// If this field is included and set to <code>true</code>, the <b>Variations</b> node (and all variation data) is omitted for all multiple-variation listings in the response. If this field is omitted or set to <code>false</code>, the <b>Variations</b> node is returned for all multiple-variation listings in the response.
	// <br>
	//
	HideVariations bool `xml:"HideVariations,omitempty"`
}

type GetMyeBayBuyingResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyeBayBuyingResponse"`

	*AbstractResponseType

	//
	// This container consists of buying/bidding activity counts and values. For this container to be returned, the user must include the <b>BuyingSummary.Include</b> field in the request and set its value to <code>true</code>.
	//
	BuyingSummary *BuyingSummaryType `xml:"BuyingSummary,omitempty"`

	//
	// This container consists of the items on the eBay user's Watch List. This container will be returned if the eBay user has one or more items on their Watch List.
	// <br><br>
	// This container will not be returned in the response (even if there are items on the Watch List) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>WatchList.Include</b> field is omitted or set to <code>false</code>.
	//
	WatchList *PaginatedItemArrayType `xml:"WatchList,omitempty"`

	//
	// This container consists of the auction items on which the eBay user has bid. This container will be returned if the eBay user has bid on one or more auction items.
	// <br><br>
	// This container will not be returned in the response (even if there are items on the Bid List) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>BidList.Include</b> field is omitted or set to <code>false</code>.
	//
	BidList *PaginatedItemArrayType `xml:"BidList,omitempty"`

	//
	// This container consists of the items on which the eBay user has made Best Offers. This container will be returned if the eBay user has made one or more Best Offers.
	// <br><br>
	// This container will not be returned in the response (even if user has made Best Offers) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>BestOfferList.Include</b> field is omitted or set to <code>false</code>.
	//
	BestOfferList *PaginatedItemArrayType `xml:"BestOfferList,omitempty"`

	//
	// This container consists of the auction items on which the eBay user has won. This container will be returned if the eBay user has won one or more auction items.
	// <br><br>
	// This container will not be returned in the response (even if there are items on the Won List) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>WonList.Include</b> field is omitted or set to <code>false</code>.
	//
	WonList *PaginatedOrderTransactionArrayType `xml:"WonList,omitempty"`

	//
	// This container consists of the auction items on which the eBay user has bid on but lost. This container will be returned if the eBay user has lost one or more auction items.
	// <br><br>
	// This container will not be returned in the response (even if the buyer has lost one or more auction items) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>LostList.Include</b> field is omitted or set to <code>false</code>.
	//
	LostList *PaginatedItemArrayType `xml:"LostList,omitempty"`

	//
	// This container consists of the eBay user's saved searches. This container will be returned if the eBay user has one or more saved searches.
	// <br><br>
	// This container will not be returned in the response (even if the user has saved searches) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>FavoriteSearches.Include</b> field is omitted or set to <code>false</code>.
	// <br><br>
	// This container consists of the search name, search query, and other search
	// elements. The user can copy and paste the URL in the <b>SearchQuery</b> field into a browser to view the search results again.
	//
	FavoriteSearches *MyeBayFavoriteSearchListType `xml:"FavoriteSearches,omitempty"`

	//
	// This container consists of the eBay user's saved sellers. This container will be returned if the eBay user has one or more saved sellers.
	// <br><br>
	// This container will not be returned in the response (even if the user has saved sellers) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>FavoriteSellers.Include</b> field is omitted or set to <code>false</code>.
	// <br><br>
	// This container consists of the saved sellers' user IDs and eBay Store names (if applicable).
	//
	FavoriteSellers *MyeBayFavoriteSellerListType `xml:"FavoriteSellers,omitempty"`

	//
	// This container consists of the items on which the eBay user has received a Second Chance Offer. This container will be returned if the eBay user has made one or more Second Chance Offers.
	// <br><br>
	// This container will not be returned in the response (even if user has received Second Chance Offers) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>SecondChanceOffer.Include</b> field is omitted or set to <code>false</code>.
	//
	SecondChanceOffer []*ItemType `xml:"SecondChanceOffer,omitempty"`

	//
	// This field is deprecated.
	//
	BidAssistantList *BidGroupArrayType `xml:"BidAssistantList,omitempty"`

	//
	// This container consists of the auction items on which the eBay user has won but deleted from their My eBay page. This container will be returned if the eBay user has won one or more auction items but have deleted these items from My eBay.
	// <br><br>
	// This container will not be returned in the response (even if they have won and then deleted one or more items) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>DeletedFromWonList.Include</b> field is omitted or set to <code>false</code>.
	//
	DeletedFromWonList *PaginatedOrderTransactionArrayType `xml:"DeletedFromWonList,omitempty"`

	//
	// This container consists of the auction items on which the eBay user has lost and then deleted from their My eBay page. This container will be returned if the eBay user has lost one or more auction items and then deleted those items from My eBay.
	// <br><br>
	// This container will not be returned in the response (even if they have lost and then deleted one or more items) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>DeletedFromLostList.Include</b> field is omitted or set to <code>false</code>.
	//
	DeletedFromLostList *PaginatedItemArrayType `xml:"DeletedFromLostList,omitempty"`

	//
	// This container consists of data for a user-defined list that was created by the user in My eBay. User-defined lists consists of a combination of items, saved sellers, and/or saved searches.
	// <br><br>
	// This container will not be returned in the response (even if one or more user-defined lists exist) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>UserDefinedList.Include</b> field is omitted or set to <code>false</code>.
	//
	UserDefinedList []*UserDefinedListType `xml:"UserDefinedList,omitempty"`
}

type GetMyeBayRemindersRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyeBayRemindersRequest"`

	*AbstractRequestType

	//
	// This container should be included if the user wishes to retrieve the counts of My eBay Buying Reminders. Counts will only be retrieved for My eBay Buying Reminders that the user received.
	//
	BuyingReminders *ReminderCustomizationType `xml:"BuyingReminders,omitempty"`

	//
	// This container should be included if the user wishes to retrieve the counts of My eBay Selling Reminders. Counts will only be retrieved for My eBay Selling Reminders that the user received.
	//
	SellingReminders *ReminderCustomizationType `xml:"SellingReminders,omitempty"`
}

type GetMyeBayRemindersResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyeBayRemindersResponse"`

	*AbstractResponseType

	//
	// This container is returned if the user included the <b>BuyingReminders</b> container in the call request and set the <b>BuyingReminders.Include</b> value to <code>true</code>. Counts will only be retrieved for My eBay Buying Reminders that the user received during the number of days specified in the <b>BuyingReminders.DurationInDays</b> field in the call request.
	//
	BuyingReminders *RemindersType `xml:"BuyingReminders,omitempty"`

	//
	// This container is returned if the user included the <b>SellingReminders</b> container in the call request and set the <b>SellingReminders.Include</b> value to <code>true</code>. Counts will only be retrieved for My eBay Selling Reminders that the user received during the number of days specified in the <b>SellingReminders.DurationInDays</b> field in the call request.
	//
	SellingReminders *RemindersType `xml:"SellingReminders,omitempty"`
}

type GetMyeBaySellingRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyeBaySellingRequest"`

	*AbstractRequestType

	//
	// Include this container and set the <b>ScheduledList.Include</b> field to <code>true</code> to return the list of items that are scheduled to become active listings on eBay.com at a future date/time.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of Scheduled listings that will be returned.
	//
	ScheduledList *ItemListCustomizationType `xml:"ScheduledList,omitempty"`

	//
	// Include this container and set the <b>ActiveList.Include</b> field to <code>true</code> to return the list of active listings on eBay.com.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of active listings that will be returned.
	//
	ActiveList *ItemListCustomizationType `xml:"ActiveList,omitempty"`

	//
	// Include this container and set the <b>SoldList.Include</b> field to <code>true</code> to return the list of sold order line items.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of sold items that will be returned.
	//
	SoldList *ItemListCustomizationType `xml:"SoldList,omitempty"`

	//
	// Include this container and set the <b>UnsoldList.Include</b> field to <code>true</code> to return the listings that have ended without a purchase.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of unsold items that will be returned.
	//
	UnsoldList *ItemListCustomizationType `xml:"UnsoldList,omitempty"`

	//
	// This container is deprecated as a Bid List is no longer returned in <b>GetMyeBaySelling</b>.
	//
	BidList *ItemListCustomizationType `xml:"BidList,omitempty"`

	//
	// Include this container and set the <b>DeletedFromSoldList.Include</b> field to <code>true</code> to return the list of sold order line items that have since been deleted from the seller's My eBay page.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of deleted, sold items that will be returned.
	//
	DeletedFromSoldList *ItemListCustomizationType `xml:"DeletedFromSoldList,omitempty"`

	//
	// Include this container and set the <b>DeletedFromUnsoldList.Include</b> field to <code>true</code> to return the list of unsold order line items that have since been deleted from the seller's My eBay page.
	// <br><br>
	// The user also has the option of using pagination and sorting for the list of deleted, unsold items that will be returned.
	//
	DeletedFromUnsoldList *ItemListCustomizationType `xml:"DeletedFromUnsoldList,omitempty"`

	//
	// Include this container and set the <b>SellingSummary.Include</b> field to <code>true</code> to return the <b>SellingSummary</b> container in the response. The <b>SellingSummary</b> container consists of selling activity counts and values.
	//
	SellingSummary *ItemListCustomizationType `xml:"SellingSummary,omitempty"`

	//
	// If this field is included and set to <code>true</code>, the <b>Variations</b> node (and all variation data) is omitted for all multiple-variation listings in the response. If this field is omitted or set to <code>false</code>, the <b>Variations</b> node is returned for all multiple-variation listings in the response.
	// <br>
	//
	HideVariations bool `xml:"HideVariations,omitempty"`
}

type GetMyeBaySellingResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetMyeBaySellingResponse"`

	*AbstractResponseType

	//
	// This container consists of seller activity counts and values. For this container to be returned, the user must include the <b>SellingSummary.Include</b> field in the request and set its value to <code>true</code>.
	//
	SellingSummary *SellingSummaryType `xml:"SellingSummary,omitempty"`

	//
	// This container consists of the items that are scheduled to become active at a future date/time. This container will be returned if the eBay user has one or more listings scheduled to become active at a future date/time.
	// <br><br>
	// This container will not be returned in the response (even if there are listings scheduled to become active) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>ScheduledList.Include</b> field is omitted or set to <code>false</code>.
	//
	ScheduledList *PaginatedItemArrayType `xml:"ScheduledList,omitempty"`

	//
	// This container consists of active listings. This container will be returned if the eBay user has one or more active listings on eBay.com.
	// <br><br>
	// This container will not be returned in the response (even if there are one or more active listings) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>ActiveList.Include</b> field is omitted or set to <code>false</code>.
	//
	ActiveList *PaginatedItemArrayType `xml:"ActiveList,omitempty"`

	//
	// This container consists of order line items that have been sold. This container will be returned if the eBay user has one or more listings that have had recent sales.
	// <br><br>
	// This container will not be returned in the response (even if there are one or more sales) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>SoldList.Include</b> field is omitted or set to <code>false</code>.
	//
	SoldList *PaginatedOrderTransactionArrayType `xml:"SoldList,omitempty"`

	//
	// This container consists of listings that have ended without sales. This container will be returned if the eBay user has one or more listings that have ended without sales.
	// <br><br>
	// This container will not be returned in the response (even if there are one or more listings that ended without sales) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>UnsoldList.Include</b> field is omitted or set to <code>false</code>.
	//
	UnsoldList *PaginatedItemArrayType `xml:"UnsoldList,omitempty"`

	//
	// This container consists of seller activity counts and values. This container is always returned if there has been recent sell activity.
	//
	Summary *MyeBaySellingSummaryType `xml:"Summary,omitempty"`

	//
	// This container is no longer applicable to <b>GetMyeBaySelling</b>.
	//
	BidList *PaginatedItemArrayType `xml:"BidList,omitempty"`

	//
	// This container consists of listings that have had sales but have been deleted from My eBay. This container will be returned if the eBay user has one or more listings with sales that have been deleted from My eBay.
	// <br><br>
	// This container will not be returned in the response (even if there are one or more listings that have sales but have been deleted) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>DeletedFromSoldList.Include</b> field is omitted or set to <code>false</code>.
	//
	DeletedFromSoldList *PaginatedOrderTransactionArrayType `xml:"DeletedFromSoldList,omitempty"`

	//
	// This container consists of listings that have ended without sales and have been deleted from My eBay. This container will be returned if the eBay user has one or more listings with sales that have been deleted from My eBay.
	// <br><br>
	// This container will not be returned in the response (even if there are one or more listings that have sales but have been deleted) if the <b>DetailLevel</b> value is set to <code>ReturnSummary</code> and the <b>DeletedFromSoldList.Include</b> field is omitted or set to <code>false</code>.
	//
	DeletedFromUnsoldList *PaginatedItemArrayType `xml:"DeletedFromUnsoldList,omitempty"`
}

type GetNotificationPreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetNotificationPreferencesRequest"`

	*AbstractRequestType

	//
	// Specifies the type of preferences to retrieve. For example, preferences can be associated with a user, with
	// an application, or with events.
	// <br>
	//
	PreferenceLevel *NotificationRoleCodeType `xml:"PreferenceLevel,omitempty"`
}

type GetNotificationPreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetNotificationPreferencesResponse"`

	*AbstractResponseType

	//
	// Specifies application-based event preferences that have been enabled.
	//
	ApplicationDeliveryPreferences *ApplicationDeliveryPreferencesType `xml:"ApplicationDeliveryPreferences,omitempty"`

	//
	// Specifies application delivery URL Name associated with this user.
	//
	DeliveryURLName string `xml:"DeliveryURLName,omitempty"`

	//
	// Specifies user-based event preferences that have been enabled or disabled.
	//
	UserDeliveryPreferenceArray *NotificationEnableArrayType `xml:"UserDeliveryPreferenceArray,omitempty"`

	//
	// Returns user data for notification settings, such as set mobile phone.
	//
	UserData *NotificationUserDataType `xml:"UserData,omitempty"`

	//
	// Contains names and values assigned to a notification event.
	// Currently can only be set for wireless applications.
	//
	EventProperty []*NotificationEventPropertyType `xml:"EventProperty,omitempty"`
}

type GetNotificationsUsageRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetNotificationsUsageRequest"`

	*AbstractRequestType

	//
	// Specifies the start date and time for which notification information will be retrieved. <b>StartTime</b> is optional. If no <b>StartTime</b> is specified, the default value of 24 hours prior to the call time is used. If no <b>StartTime</b> is specified or if an invalid <b>StartTime</b> is specified, date range errors are returned in the response. For a <b>StartTime</b> to be valid, it must be no more than 72 hours before the time of the call, it cannot be more recent than the <b>EndTime</b>, and it cannot be later than the time of the call. If an invalid <b>StartTime</b> is specified, the default value is used.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Specifies the end date and time for which notification information will be retrieved. <b>EndTime</b> is optional. <br/><br/> If no <b>EndTime</b> is specified, the current time (the time the call is made) is used. If no <b>EndTime</b> is specified or if an invalid <b>EndTime</b> is specified, date range errors are returned in the response. For an <b>EndTime</b> to be valid, it must be no more than 72 hours before the time the of the call, it cannot be before the <b>StartTime</b>, and it cannot be later than the time of the call. If an invalid <b>EndTime</b> is specified, the current time is used.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// Specifies an item ID for which detailed notification information will be retrieved. <b>ItemID</b> is optional. If no <b>ItemID</b> is specified, the response will not include any individual notification details.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`
}

type GetNotificationsUsageResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetNotificationsUsageResponse"`

	*AbstractResponseType

	//
	// Returns the start date and time for the notification information that is
	// returned by this call.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Returns the end date and time for the notification information that is
	// returned by this call.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// List of notification objects representing the notifications sent to an
	// application for the given time period. It will only be returned if ItemID
	// was specified in the input request.
	//
	NotificationDetailsArray *NotificationDetailsArrayType `xml:"NotificationDetailsArray,omitempty"`

	//
	// List of objects representing <b>MarkUp</b> or <b>MarkDown</b> history for a given appID
	// and for given <b>StartTime</b> and <b>EndTime</b>. This node will always be returned.
	//
	MarkUpMarkDownHistory *MarkUpMarkDownHistoryType `xml:"MarkUpMarkDownHistory,omitempty"`

	//
	// Summary information about number of notifications that were successfully
	// delivered, queued, failed, connection attempts made, connection timeouts,
	// http errors for the given appID and given time period. By default, statistics
	// for only one day (Now-1day) is included. Maximum time duration allowed is 3 days
	// (Now-3days).
	//
	NotificationStatistics *NotificationStatisticsType `xml:"NotificationStatistics,omitempty"`
}

type GetOrderTransactionsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetOrderTransactionsRequest"`

	*AbstractRequestType

	//
	// This container is used if the seller wants to search for one or more specific order line items. An <b>ItemTransactionID</b> container is required for each order line item that is to be retrieved.  An order line item can be identified with an <b>ItemID</b>/<b>TransactionID</b> pair, with a <b>OrderLineItemID</b> value, or with a <b>SKU</b> value (if a SKU exists for the order line item).
	//
	ItemTransactionIDArray *ItemTransactionIDArrayType `xml:"ItemTransactionIDArray,omitempty"`

	//
	// This container is used if the seller wants to search for one or more specific orders. An <b>OrderID</b> field is required for each order that is to be retrieved.  Up to 20 <b>OrderID</b> fields can be used.
	//
	OrderIDArray *OrderIDArrayType `xml:"OrderIDArray,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field's purpose is to allow the seller to retrieve only eBay listings or only Half.com listings instead of both order types. Since the Half.com site has been shut down, this field is no longer necessary to use since eBay orders will be the only orders that are retrieved.
	// </span>
	// The default behavior of <b>GetOrderTransactions</b> is to retrieve all orders originating from eBay.com and Half.com. If the user wants to retrieve only eBay.com order line items or Half.com order line items, this filter can be used to perform that function. Inserting <code>eBay</code> into this field will restrict retrieved order line items to those originating on eBay.com, and inserting <code>Half</code> into this field will restrict retrieved order line items to those originating on Half.com.
	//
	Platform *TransactionPlatformCodeType `xml:"Platform,omitempty"`

	//
	// This field is included and set to <code>true</code> if the seller wishes to include the Final Value Fee (FVF) for each order in the response. A Final Value Fee is calculated based on total amount of the sale, including the final price of the item and shipping/handling charges. This fee is charged to a seller's account immediately upon creation of an order line item.
	//
	IncludeFinalValueFees bool `xml:"IncludeFinalValueFees,omitempty"`
}

type GetOrderTransactionsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetOrderTransactionsResponse"`

	*AbstractResponseType

	//
	// This container consists of an array of eBay orders that match the input criteria that was passed into the call request.
	//
	OrderArray *OrderArrayType `xml:"OrderArray,omitempty"`
}

type GetOrdersRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetOrdersRequest"`

	*AbstractRequestType

	//
	// A container for eBay order IDs. If one or more order IDs are specified in this container, no other call-specific input fields are applicable.
	//
	OrderIDArray *OrderIDArrayType `xml:"OrderIDArray,omitempty"`

	//
	// The <b>CreateTimeFrom</b> and <b>CreateTimeTo</b> fields specify a date range for retrieving orders. The <b>CreateTimeFrom</b> field is the starting date range. All eBay orders that were created within this date range are returned in the output. The maximum date range that may be specified with the <b>CreateTimeFrom</b> and <b>CreateTimeTo</b> fields is 90 days. <b>CreateTimeFrom</b>/<b>CreateTimeTo</b> date filters are ignored if the <b>NumberOfDays</b> date filter is used in the request, or if one or more order IDs are passed in the request. This value cannot be set back more than 90 days in the past, as this call cannot retrieve sales older than 90 days old.
	//
	CreateTimeFrom time.Time `xml:"CreateTimeFrom,omitempty"`

	//
	// The <b>CreateTimeFrom</b> and <b>CreateTimeTo</b> fields specify a date range for retrieving orders. The <b>CreateTimeTo</b> field is the ending date range. All eBay orders that were created within this date range are returned in the output. The maximum date range that may be specified with the <b>CreateTimeFrom</b> and <b>CreateTimeTo</b> fields is 90 days. If the <b>CreateTimeFrom</b> field is used and the <b>CreateTimeTo</b> field is omitted, the "TimeTo" value defaults to the present time or to 90 days past the <b>CreateTimeFrom</b> value (if <b>CreateTimeFrom</b> value is more than 90 days in the past). <b>CreateTimeFrom</b>/<b>CreateTimeTo</b> date filters are ignored if the <b>NumberOfDays</b> date filter is used in the request, or if one or more order IDs are passed in the request. <br><br> <span class="tablenote"><strong>Note:</strong> If a GetOrders call is made within a few seconds after the creation of a multiple line item order, the caller runs the risk of retrieving orders that are in an inconsistent state, since the order consolidation involved in a multi-line item order may not have been completed. For this reason, it is recommended that sellers include the <b>CreateTimeTo</b> field in the call, and set its value to: <i> Current Time</i> - 2 minutes.
	//
	CreateTimeTo time.Time `xml:"CreateTimeTo,omitempty"`

	//
	// Filters the returned orders based on the role of the user. The user's role is either buyer or seller. If this field is used with a date filter, returned orders must satisfy both the date range and the <b>OrderRole</b> value.
	//
	OrderRole *TradingRoleCodeType `xml:"OrderRole,omitempty"`

	//
	// The field is used to retrieve eBay orders that are in a specific state. If this field is used with a date filter, only orders that satisfy both the date range and the <b>OrderStatus</b> value are retrieved. <br><br> If one or more <b>OrderID</b> values are specified through the <b>OrderIDArray</b> container, the <b>OrderStatus</b> field should not be used, and it is ignored if it is used. If an <b>OrderStatus</b> value is not used and no <b>OrderID</b> values are specified, orders in all states are returned.
	//
	OrderStatus *OrderStatusCodeType `xml:"OrderStatus,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field's purpose was to allow the seller to retrieve only Half.com listings. Since the Half.com site has been shut down, this field is no longer applicable.
	// </span>
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// If many orders are	available to retrieve, you may need to call GetOrders multiple times to retrieve all the data. Each result set is returned as a page of entries. Use the Pagination filters to control the maximum number of entries to retrieve per page (i.e., per call), the page number to retrieve, and other data.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// The <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields specify a date range for retrieving existing orders that have been modified within this time window (for example, <code>Incomplete</code> status to <code>Pending</code> status or <code>Pending</code> status to <code>Complete</code> status). The <b>ModTimeFrom</b> field is the starting date range. All eBay orders that were last modified within this date range are returned in the output. The maximum date range that may be specified with the <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields is 30 days. This value cannot be set back more than 90 days in the past, as this call cannot retrieve sales older than 90 days old. <b>ModTimeFrom</b>/<b>ModTimeTo</b> date filters are ignored if the <b>CreateTimeFrom</b>/<b>CreateTimeTo</b> or <b>NumberOfDays</b> date filters are used in the request, or if one or more order IDs are passed in the request.
	//
	ModTimeFrom time.Time `xml:"ModTimeFrom,omitempty"`

	//
	// The <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields specify a date range for retrieving existing orders that have been modified within this time window (for example, <code>Incomplete</code> status to <code>Pending</code> status or <code>Pending</code> status to <code>Complete</code> status). The <b>ModTimeTo</b> field is the ending date range. All eBay orders that were last modified within this date range are returned in the output. The maximum date range that may be specified with the <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields is 30 days. If the <b>ModTimeFrom</b> field is used and the <b>ModTimeTo</b> field is omitted, the "TimeTo" value defaults to the present time (if <b>ModTimeFrom</b> value is less than 30 days in the past) or to 30 days past the <b>ModTimeFrom</b> value. <b>ModTimeFrom</b>/<b>ModTimeTo</b> date filters are ignored if the <b>CreateTimeFrom</b>/<b>CreateTimeTo</b> or <b>NumberOfDays</b> date filters are used in the request, or if one or more order IDs are passed in the request.
	//
	ModTimeTo time.Time `xml:"ModTimeTo,omitempty"`

	//
	// This filter specifies the number of days (24-hour periods) in the past to search for orders. All eBay orders that were either created or modified within this period are returned in the output. This field cannot be used in conjunction with the <b>CreateTimeFrom</b>/<b>CreateTimeTo</b> or <b>ModTimeFrom</b>/<b>ModTimeTo</b> date filters.
	// <br>
	//
	NumberOfDays int32 `xml:"NumberOfDays,omitempty"`

	//
	// Indicates whether to include the Final Value Fee (FVF) for all Transaction objects in the response. The Final Value Fee is returned in Transaction.FinalValueFee. The Final Value Fee is assessed right after the creation of an eBay order line item.
	// <br>
	//
	IncludeFinalValueFee bool `xml:"IncludeFinalValueFee,omitempty"`

	//
	// Specifies how orders returned by this call should be sorted (using <strong>LastModifiedTime</strong> as the sort key). A value of <code>Ascending</code> returns the earliest modified orders first, and a value of <code>Descending</code> returns the latest modified orders first.
	// <br/><br/>
	// Default: <code>Ascending</code>
	//
	SortingOrder *SortOrderCodeType `xml:"SortingOrder,omitempty"`
}

type GetOrdersResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetOrdersResponse"`

	*AbstractResponseType

	//
	// Contains information regarding the pagination of data, including the total number of pages and the total number of orders.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// A true value indicates that there are more orders to be retrieved. Additional <b>GetOrders</b> calls with higher page numbers or more entries per page must be made to retrieve these orders. If false, no more orders are available or no orders match the request (based on the input filters).
	//
	HasMoreOrders bool `xml:"HasMoreOrders,omitempty"`

	//
	// The set of orders that match the order IDs or filter criteria specified.
	//
	OrderArray *OrderArrayType `xml:"OrderArray,omitempty"`

	//
	// Indicates the number of orders that can be returned per page of data (i.e., per call). This is the same value specified in the <b>Pagination.EntriesPerPage</b> input (or the default value, if <b>EntriesPerPage</b> was not specified). This is not necessarily the actual number of orders returned per page (see <b>ReturnedOrderCountActual</b>).
	//
	OrdersPerPage int32 `xml:"OrdersPerPage,omitempty"`

	//
	// Indicates the page number of data returned in the response. This is the same value specified in the <b>Pagination.PageNumber</b> input. If orders are returned, the first page is 1.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// Indicates the total number of orders returned.
	//
	ReturnedOrderCountActual int32 `xml:"ReturnedOrderCountActual,omitempty"`
}

type GetPromotionalSaleDetailsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetPromotionalSaleDetailsRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the promotional sale to retrieve. This field is used if the eBay store owner only wants to retrieve a specific promotional sale. Any <b>PromotionalSaleStatus</b> fields that are included will be ignored if the <b>PromotionalSaleID</b> field is used.
	// <br><br>
	// If neither the <b>PromotionalSaleID</b> nor a <b>PromotionalSaleStatus</b> field is used, then all promotional sales for the eBay store owner are returned.
	//
	PromotionalSaleID int64 `xml:"PromotionalSaleID,omitempty"`

	//
	// One or more <b>PromotionalSaleStatus</b> fields are used if the eBay store owner wants to retrieve promotional sales in a specific state, such as <code>Active</code>, <code>Scheduled</code>, or <code>Deleted</code>. A <b>PromotionalSaleStatus</b> field is included for each status. See <a href="types/PromotionalSaleStatusCodeType.html">PromotionalSaleStatusCodeType</a> for a description of the status values that can be used in this field.
	// <br><br>
	// If neither the <b>PromotionalSaleID</b> nor a <b>PromotionalSaleStatus</b> field is used, then all promotional sales for the eBay store owner are returned.
	//
	PromotionalSaleStatus []*PromotionalSaleStatusCodeType `xml:"PromotionalSaleStatus,omitempty"`
}

type GetPromotionalSaleDetailsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetPromotionalSaleDetailsResponse"`

	*AbstractResponseType

	//
	// This container consists of an array of one or more promotional sales for an eBay store owner. A <b>PromotionalSaleDetails.PromotionalSale</b> container is returned for each promotional sale that matches the input criteria in the call request.
	//
	PromotionalSaleDetails *PromotionalSaleArrayType `xml:"PromotionalSaleDetails,omitempty"`
}

type GetSellerDashboardRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerDashboardRequest"`

	*AbstractRequestType
}

type GetSellerDashboardResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerDashboardResponse"`

	*AbstractResponseType

	//
	// Provides information about the visibility level you have earned for your
	// listings. The higher your search standing rating, the higher your items
	// will be placed in search results sorted by Best Match. Because your search
	// standing rating is directly tied to your customer service record, this
	// rating is an important way that eBay rewards you as a good seller--it
	// encourages you to give buyers the best possible shopping experience.
	// <br><br>
	// This field is returned <b>only</b> for the following sites.
	// <br><br>
	// <table>
	// <tr>  <th>Site</th> <th>Id</th>  </tr>
	// <tr>  <td>AU</td> <td>15</td>  </tr>
	// <tr>  <td>BEFR</td> <td>23</td>  </tr>
	// <tr>  <td>BENL</td> <td>123</td>  </tr>
	// <tr>  <td>CA</td> <td>2</td>  </tr>
	// <tr>  <td>ES</td> <td>186</td>  </tr>
	// <tr>  <td>FR</td> <td>71</td>  </tr>
	// <tr>  <td>IN</td> <td>203</td>  </tr>
	// <tr>  <td>IT</td> <td>101</td>  </tr>
	// <tr>  <td>MOTORS</td> <td>100</td>  </tr>
	// <tr>  <td>NL</td> <td>146</td>  </tr>
	// <tr>  <td>PL</td> <td>212</td>  </tr>
	// </table>
	//
	SearchStanding *SearchStandingDashboardType `xml:"SearchStanding,omitempty"`

	//
	// This container provides the percentage discount that the seller is eligible to receive on the Final Value Fee for each order line item. Top-Rated Sellers may be eligible for Final Value Fee discounts if their listings meet all requirements for the discount.
	//
	SellerFeeDiscount *SellerFeeDiscountDashboardType `xml:"SellerFeeDiscount,omitempty"`

	//
	// This container provides the seller's PowerSeller status, as well as any informational alerts related to the seller's PowerSeller status. If the seller has not achieved Power Seller status, a value of <code>None</code> will be returned in the <b>PowerSellerStatus.Level</b> field. A <b>PowerSellerStatus.Alert</b> container will only be returned if there is an alert/message related to the seller's PowerSeller status.
	// <br><br>
	// For eBay Germany and France, you must be a registered business seller to
	// see your Power Seller status.
	//
	PowerSellerStatus *PowerSellerDashboardType `xml:"PowerSellerStatus,omitempty"`

	//
	// This container is no longer returned in <b>GetSellerDashboard</b>.
	//
	PolicyCompliance *PolicyComplianceDashboardType `xml:"PolicyCompliance,omitempty"`

	//
	// This container provides the seller's Buyer Satisfaction status, as well as any informational alerts related to the seller's Buyer Satisfaction status. A <b>BuyerSatisfaction.Alert</b> container will only be returned if there is an alert/message related to the seller's Buyer Satisfaction status.
	// <br><br>
	// This field is not returned for all sites.
	//
	BuyerSatisfaction *BuyerSatisfactionDashboardType `xml:"BuyerSatisfaction,omitempty"`

	//
	// This container provides the seller's account status, as well as any informational alerts related to the seller's account status. A seller's account status can either be 'current' (all selling fees paid), 'past due' (seller is late paying selling fees), or 'on hold' (seller will be blocked from listing and is in danger of being suspended until selling fees are brought current). A <b>SellerAccount.Alert</b> container will only be returned if there is an alert/message related to the seller's account status.
	//
	SellerAccount *SellerAccountDashboardType `xml:"SellerAccount,omitempty"`

	//
	// This container provides the seller's performance level, as well as any informational alerts related to the seller's performance level. A <b>Performance.Alert</b> container will only be returned if there is an alert/message related to the seller's performance level.
	//
	Performance []*PerformanceDashboardType `xml:"Performance,omitempty"`
}

type GetSellerEventsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerEventsRequest"`

	*AbstractRequestType

	//
	// eBay user ID for the seller whose events are to be returned.
	// If not specified, retrieves events for the user identified by
	// the authentication token passed in the request.
	// <br/><br/>
	// <b>Note:</b> Since user information is anonymous to everyone except the bidder and the seller (during an active auction), only sellers looking for information about
	// their own listings and bidders who know the user IDs of their sellers
	// will be able to make this API call successfully.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// Describes the earliest (oldest) time to use in a time range filter based
	// on item start time. Must be specified if <b>StartTimeTo</b> is specified.
	// <br/><br/>
	// Either
	// the <b>StartTimeFrom</b>, <b>EndTimeFrom</b>, or <b>ModTimeFrom</b> filter must be specified.
	// <br/><br/>
	// If you do not specify the corresponding <b>To</b> filter,
	// it is set to the time you make the call.
	// <br/><br/>
	// For better results, the time period you use should be less than 48 hours.
	// If 3000 or more items are found, use a smaller time range.<br>
	// <br>
	// Include a 2-minute, overlapping buffer between requests.
	// For example, if <b>StartTimeTo</b> was 6:58 in a prior request,
	// the current request should use 6:56 in <b>StartTimeFrom</b>
	// (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
	//
	StartTimeFrom time.Time `xml:"StartTimeFrom,omitempty"`

	//
	// Describes the latest (most recent) date to use in a time range filter
	// based on item start time. If you specify the corresponding <b>From</b> filter,
	// but you do not include <b>StartTimeTo</b>, the <b>StartTimeTo</b> is set to
	// the time you make the call.
	//
	StartTimeTo time.Time `xml:"StartTimeTo,omitempty"`

	//
	// Describes the earliest (oldest) date to use in a time range filter based
	// on item end time. Must be specified if <b>EndTimeTo</b> is specified.
	// <br/><br/>
	// Either
	// the <b>StartTimeFrom</b>, <b>EndTimeFrom</b>, or <b>ModTimeFrom</b> filter must be specified.
	// If you do not specify the corresponding To filter,
	// it is set to the time you make the call.<br>
	// <br>
	// For better results, the time range you use should be less than 48 hours.
	// If 3000 or more items are found, use a smaller time range.<br>
	// <br>
	// Include a 2-minute, overlapping buffer between requests.
	// For example, if <b>EndTimeTo</b> was 6:58 in a prior request,
	// the current request should use 6:56 in <b>EndTimeFrom</b>
	// (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
	//
	EndTimeFrom time.Time `xml:"EndTimeFrom,omitempty"`

	//
	// Describes the latest (most recent) date to use in a time range filter
	// based on item end time.
	// <br/><br/>
	// If you specify the corresponding <b>From</b> filter,
	// but you do not include <b>EndTimeTo</b>, then <b>EndTimeTo</b> is set
	// to the time you make the call.
	//
	EndTimeTo time.Time `xml:"EndTimeTo,omitempty"`

	//
	// Describes the earliest (oldest) date to use in a time range filter based
	// on item modification time. Must be specified if <b>ModTimeTo</b> is specified. Either
	// the <b>StartTimeFrom</b>, <b>EndTimeFrom</b>, or <b>ModTimeFrom</b> filter must be specified.
	// If you do not specify the corresponding To filter,
	// it is set to the time you make the call.<br>
	// <br>
	// Include a 2-minute, overlapping buffer between requests.
	// For example, if <b>ModTimeTo</b> was 6:58 in a prior request,
	// the current request should use 6:56 in <b>ModTimeFrom</b>
	// (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
	// <br><br>
	// For better results, the time range you use should be less than 48 hours.
	// If 3000 or more items are found, use a smaller time range.
	// <br><br>
	// If an unexpected item is returned (including an old item
	// or an unchanged active item), please ignore the item.
	// Although a maintenance process may have triggered a change in the modification time, item characteristics are unchanged.
	//
	ModTimeFrom time.Time `xml:"ModTimeFrom,omitempty"`

	//
	// Describes the latest (most recent) date and time to use in a time range filter based on the time an item's record was modified. If you specify the corresponding <b>From</b> filter, but you do not include <b>ModTimeTo</b> , then <b>ModTimeTo</b> is set to the time you make the call. Include a 2-minute buffer between the current time and the <b>ModTimeTo</b> filter.
	//
	ModTimeTo time.Time `xml:"ModTimeTo,omitempty"`

	//
	// If true, response includes only items that have been modified
	// within the <b>ModTime</b> range. If false, response includes all items.
	//
	NewItemFilter bool `xml:"NewItemFilter,omitempty"`

	//
	// The seller can include this field and set its value to <code>true</code> if that seller wants to see how many prospective bidders/buyers currently have an item added to their Watch Lists. The Watch count is returned in the <b>WatchCount</b> field for each item in the response.
	//
	IncludeWatchCount bool `xml:"IncludeWatchCount,omitempty"`

	//
	// Specifies whether to force the response to include
	// variation specifics for multiple-variation listings. <br>
	// <br>
	// If false (or not specified), eBay keeps the response as small as
	// possible by not returning <b>Variation.VariationSpecifics</b>.
	// It only returns <b>Variation.SKU</b> as an identifier
	// (along with the variation price and other selling details).
	// If the variation has no SKU, then <b>Variation.VariationSpecifics</b>
	// is returned as the variation's unique identifier.<br>
	// <br>
	// If true, <b>Variation.VariationSpecifics</b> is returned.
	// (<b>Variation.SKU</b> is also returned, if the variation has a SKU.)
	// This may be useful for applications that don't track variations
	// by SKU.<br>
	// <br>
	// Ignored when <b>HideVariations</b> is set to <b>true</b>.
	// <br>
	// <br>
	// <b>Note:</b>  If the seller includes a large number of
	// variations in many listings, using this flag may degrade the
	// call's performance. Therefore, when you use this flag, you may
	// need to reduce the total number of items you're requesting at
	// once. For example, you may need to use shorter time ranges in
	// the <b>StartTimeFrom</b>, <b>EndTimeFrom</b>, or <b>ModTimeFrom</b> filters.
	//
	IncludeVariationSpecifics bool `xml:"IncludeVariationSpecifics,omitempty"`

	//
	// Specifies whether to force the response to hide
	// variation details for multiple-variation listings.<br>
	// <br>
	// If false (or not specified), eBay returns variation details (if
	// any). In this case, the amount of detail can be controlled by
	// using <b>IncludeVariationSpecifics</b>.<br>
	// <br>
	// If true, variation details are not returned (and
	// <b>IncludeVariationSpecifics</b> has no effect). This may be useful for applications that use other calls, notifications, alerts, or reports to track price and quantity details.
	//
	HideVariations bool `xml:"HideVariations,omitempty"`
}

type GetSellerEventsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerEventsResponse"`

	*AbstractResponseType

	//
	// Indicates the latest (most recent) date for any date-based filtering specified as
	// input. Specifically, this field contains the value you specified in the <b>StartTimeFrom</b>, <b>EndTimeFrom</b>, or <b>ModTimeFrom</b> filter, if you used a time filter in the request. If no time filter was specified, <b>TimeTo</b> returns the current time.
	//
	TimeTo time.Time `xml:"TimeTo,omitempty"`

	//
	// Collection of items whose last modified time matches
	// the filters specified in the request.
	// Returns empty if no items were modified within the
	// time range of the request.<br/><br/>
	// If 1 to 2999 items are returned, then the results are
	// complete. If 3000 or more items are returned, it usually means
	// additional items exist within the time range you requested,
	// but they were not all returned.
	// <br/><br/>
	// To retrieve complete results,
	// use a smaller time range in the request so that fewer than
	// 3000 are returned per response.
	//
	ItemArray *ItemArrayType `xml:"ItemArray,omitempty"`
}

type GetSellerListRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerListRequest"`

	*AbstractRequestType

	//
	// Specifies the seller whose items will be returned. <b>UserID</b> is an optional
	// input. If not specified, retrieves listings for the user identified by the
	// authentication token passed in the request. Note that since user
	// information is anonymous to everyone except the bidder and the seller
	// (during an active auction), only sellers looking for information about
	// their own listings and bidders who know the user IDs of their sellers will
	// be able to make this API call successfully.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// Specifies the list of Motors Dealer sellers for which a special set of
	// metrics can be requested. Applies to eBay Motors Pro applications only.
	//
	MotorsDealerUsers *UserIDArrayType `xml:"MotorsDealerUsers,omitempty"`

	//
	// Specifies the earliest (oldest) date to use in a date range filter based on
	// item end time. Specify either an end-time range or a start-time range
	// filter in every call request. Each of the time ranges must be a value less than
	// 120 days.
	//
	EndTimeFrom time.Time `xml:"EndTimeFrom,omitempty"`

	//
	// Specifies the latest (most recent) date to use in a date range filter based on item end time. Must be specified if <b>EndTimeFrom</b> is specified.
	//
	EndTimeTo time.Time `xml:"EndTimeTo,omitempty"`

	//
	// Specifies the order in which returned items are sorted (based on the end
	// dates of the item listings). Valid values:
	// <br>
	// 0 = No sorting<br>
	// 1 = Sort in descending order<br>
	// 2 = Sort in ascending order<br>
	//
	Sort int32 `xml:"Sort,omitempty"`

	//
	// Specifies the earliest (oldest) date to use in a date range filter based on
	// item start time. Each of the time ranges must be a value less than
	// 120 days. In all calls, at least one date-range filter must be specified
	// (i.e., you must specify either the end time range or start time range
	// in every request).
	//
	StartTimeFrom time.Time `xml:"StartTimeFrom,omitempty"`

	//
	// Specifies the latest (most recent) date to use in a date range filter based on item start time. Must be specified if <b>StartTimeFrom</b> is specified.
	//
	StartTimeTo time.Time `xml:"StartTimeTo,omitempty"`

	//
	// Contains the data controlling the pagination of the returned values. If you set a <b>DetailLevel</b> in this call, you must set pagination values. The <b>Pagination</b> field contains the number of items to be returned per page of data (per call), and the page number to return with the current call.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// Specifies the subset of item and user fields to return. See <b>GetSellerList</b> for a list of the fields that are returned for each granularity level. For <b>GetSellerLis</b>t, use <b>DetailLevel</b> or <b>GranularityLevel</b> in a request, but not both. For <b>GetSellerList</b>, if <b>GranularityLevel</b> is specified, <b>DetailLevel</b> is ignored.
	//
	GranularityLevel *GranularityLevelCodeType `xml:"GranularityLevel,omitempty"`

	//
	// Container for a set of SKUs.
	// Filters (reduces) the response to only include active listings
	// that the seller listed with any of the specified SKUs.
	// If multiple listings include the same SKU, they are
	// all returned (assuming they also match the other criteria
	// in the GetSellerList request).<br>
	// <br>
	// SKUArray can be used to retrieve items listed by the user
	// identified in AuthToken or in UserID.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Listings with matching SKUs are returned regardless of their
	// Item.InventoryTrackingMethod settings.
	// </span>
	//
	SKUArray *SKUArrayType `xml:"SKUArray,omitempty"`

	//
	// Specifies whether to include <b>WatchCount</b> in Item nodes returned. <b>WatchCount</b> is only returned with <b>DetailLevel ReturnAll</b>.
	//
	IncludeWatchCount bool `xml:"IncludeWatchCount,omitempty"`

	//
	// Specifies whether to return only items that were administratively ended
	// based on a policy violation.
	//
	AdminEndedItemsOnly bool `xml:"AdminEndedItemsOnly,omitempty"`

	//
	// The category ID for the items retrieved. If you specify <b>CategoryID</b> in a <b>GetSellerList</b> call, the response contains only items in the category you specify.
	//
	CategoryID int32 `xml:"CategoryID,omitempty"`

	//
	// If true, the <b>Variations</b> node is returned for all multi-variation listings in the response.<br> <br> <b>Note:</b> If the seller includes a large number of variations in many listings, using this flag may degrade the call's performance. Therefore, when you use this flag, you may need to reduce the total number of items you're requesting at once. <br/><br/> For example, you may need to use shorter time ranges in the <b>EndTime</b> or <b>StartTime</b> filters, fewer entries per page in <b>Pagination</b>, and/or <b>SKUArray</b>.
	//
	IncludeVariations bool `xml:"IncludeVariations,omitempty"`
}

type GetSellerListResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerListResponse"`

	*AbstractResponseType

	//
	// Contains information regarding the pagination of data (if pagination is
	// used), including total number of pages and total number of entries.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// If true, there are more items yet to be retrieved. Additional <b>GetSellerList</b> calls with higher page numbers or more items per page must be made to retrieve these items. Not returned if no items match the request.
	//
	HasMoreItems bool `xml:"HasMoreItems,omitempty"`

	//
	// Contains the list of the seller's items, one <b>ItemType</b> object per item. Returns empty if no items are available that match the request.
	//
	ItemArray *ItemArrayType `xml:"ItemArray,omitempty"`

	//
	// Indicates the number of items that are being returned per page of data (i.e., per call). Will be the same as the value specified in the <b>Pagination.EntriesPerPage</b> input. Only returned if items are returned.
	//
	ItemsPerPage int32 `xml:"ItemsPerPage,omitempty"`

	//
	// Indicates which page of data was just returned. Will be the same as the value specified in the <b>Pagination.PageNumber</b> input. (If the input is higher than the total number of pages, the call fails with an error.) Only returned if items are returned.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// Indicates the total number of items returned (i.e., the number of
	// ItemType objects in ItemArray).
	//
	ReturnedItemCountActual int32 `xml:"ReturnedItemCountActual,omitempty"`

	//
	// Indicates the seller whose items are returned. The seller is the eBay member whose <b>UserID</b> was passed in the request. If <b>UserID</b> was not specified, the seller is the user who made the request (identified by eBayAuthToken).
	//
	Seller *UserType `xml:"Seller,omitempty"`
}

type GetSellerTransactionsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerTransactionsRequest"`

	*AbstractRequestType

	//
	// The <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields specify a date range for retrieving order line items associated with the seller. The <b>ModTimeFrom</b> field is the starting date range. All of the seller's order line items that were last modified within this date range are returned in the output.  The maximum date range that may be specified is 30 days. This value cannot be set back more than 90 days in the past, as this call cannot retrieve sales older than 90 days old. This field is not applicable if the <b>NumberOfDays</b> date filter is used.
	// <br><br>
	// If you don't specify a <b>ModTimeFrom</b>/<b>ModTimeTo</b> filter, the <b>NumberOfDays</b> time filter is used and it defaults to 30 (days).
	//
	ModTimeFrom time.Time `xml:"ModTimeFrom,omitempty"`

	//
	// The <b>ModTimeFrom</b> and <b>ModTimeTo</b> fields specify a date range for retrieving
	// order line items associated with the seller. The <b>ModTimeTo</b>
	// field is the ending date range. All of the seller's order line items that were last
	// modified within this date range are returned in the output.
	// <br/><br/>
	// The maximum
	// date range that may be specified is 30 days.
	// <br/><br/>
	// If the <b>ModTimeFrom</b> field is
	// used and the <b>ModTimeTo</b> field is omitted, the <b>ModTimeTo</b> value defaults to
	// the present time or to 30 days past the <b>ModTimeFrom</b> value (if
	// <b>ModTimeFrom</b> value is more than 30 days in the past). This field is not
	// applicable if the <b>NumberOfDays</b> date filter is used.
	// <br><br>
	// If you don't specify a <b>ModTimeFrom</b>/<b>ModTimeTo</b> filter, the <b>NumberOfDays</b>
	// time filter is used and it defaults to 30 (days).
	//
	ModTimeTo time.Time `xml:"ModTimeTo,omitempty"`

	//
	// Child elements control pagination of the output. Use <b>EntriesPerPage</b> property to
	// control the number of transactions to return per call and <b>PageNumber</b> property to
	// specify the page of data to return.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// Indicates whether to include Final Value Fee (FVF) in the response. For most listing types, the Final Value Fee is returned in <b>Transaction.FinalValueFee</b>. The Final Value Fee is returned for each order line item.
	// <br>
	//
	IncludeFinalValueFee bool `xml:"IncludeFinalValueFee,omitempty"`

	//
	// Include this field and set it to <code>true</code> if you want the <b>ContainingOrder</b> container to be returned in the response under each <b>Transaction</b> node. For single line item orders, the <b>ContainingOrder.OrderID</b> value takes the value of the <b>OrderLineItemID</b> value for the order line item. For Combined Invoice orders, the <b>ContainingOrder.OrderID</b> value will be shared by at least two order line items (transactions) that are part of the same order.
	//
	IncludeContainingOrder bool `xml:"IncludeContainingOrder,omitempty"`

	//
	// Container for a set of SKUs. Filters (reduces) the response to only include order line items for listings that include any of the specified SKUs. If multiple listings include the same SKU, order line items for all of them are returned (assuming they also match the other criteria in the <b>GetSellerTransactions</b> request).<br> <br> You can combine SKUArray with <b>InventoryTrackingMethod</b>. For example, if you also pass in <code>InventoryTrackingMethod=SKU</code>, the response only includes order line items for listings that include <code>InventoryTrackingMethod=SKU</code> and one of the requested SKUs.
	//
	SKUArray *SKUArrayType `xml:"SKUArray,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field's purpose is to allow the seller to retrieve only eBay listings or only Half.com listings instead of both order types. Since the Half.com site has been shut down, this field is no longer necessary to use since eBay orders will be the only orders that are retrieved.
	// </span>
	// The default behavior of <b>GetSellerTransactions</b> is to retrieve all order line items originating from eBay.com and Half.com. If the user wants to retrieve only eBay.com order line items or Half.com order line items, this filter can be used to perform that function. Inserting 'eBay' into this field will restrict retrieved order line items to those originating on eBay.com, and inserting 'Half' into this field will restrict retrieved order line items to those originating on Half.com.
	//
	Platform *TransactionPlatformCodeType `xml:"Platform,omitempty"`

	//
	// Enables you to specify the number of days' worth of new and modified
	// order line items that you want to retrieve. The maximum value for this field is <code>30</code>
	// <br/><br/>
	// The call response contains the order line items whose status was modified within the specified number of days since the API call was made. <b>NumberOfDays</b> is often preferable to using the <b>ModTimeFrom</b> and <b>ModTimeTo</b> filters because you only need to specify one value. If you use <b>NumberOfDays</b>, then <b>ModTimeFrom</b> and <b>ModTimeTo</b> are ignored.
	// <br/><br/>
	// For this field, one day is defined as 24 hours.
	//
	NumberOfDays int32 `xml:"NumberOfDays,omitempty"`

	//
	// Filters the response to only include order line items for listings
	// that match this <b>InventoryTrackingMethod</b> setting. <br>
	// <br>
	// For example,
	// <b></b>
	// <ul>
	// <li>If you set this to <b>SKU</b>, the call returns order line items for your listings that are tracked by SKU.</li>
	// <li>If you set this to <b>ItemID</b>, the call omits order line items for your listings that are tracked by SKU.</li>
	// <li>If you don't pass this in, the call returns all order line items, regardless of whether they are tracked by <b>SKU</b>, or <b>ItemID</b>.</li>
	// </ul>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// To specify the <b>InventoryTrackingMethod</b> when you create a listing, use <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b>.
	// <b>AddFixedPriceItem</b> and <b>RelistFixedPriceItem</b> are defined in
	// the Merchant Data API (part of Large Merchant Services).
	// </span>
	// <br>
	// You can combine <b>SKUArray</b> with <b>InventoryTrackingMethod</b>.
	// For example, if you set this to SKU and you also pass in
	// <b>SKUArray</b>, the response only includes order line items for listings
	// that include <code>InventoryTrackingMethod</code> = <code>SKU</code> and one of the
	// requested SKUs.
	//
	InventoryTrackingMethod *InventoryTrackingMethodCodeType `xml:"InventoryTrackingMethod,omitempty"`

	//
	// If this field is included in the call request and set to <code>true</code>, taxpayer identification information for the buyer is returned under the <b>BuyerTaxIdentifier</b> <br><br>
	// Codice Fiscale is only applicable to buyers on the Italy and Spain sites. It is required that buyers on the Italy site provide their Codice Fiscale ID before buying an item, and sellers on the Spain site have the option of requiring buyers on the Spain site to provide their taxpayer ID.
	//
	IncludeCodiceFiscale bool `xml:"IncludeCodiceFiscale,omitempty"`
}

type GetSellerTransactionsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellerTransactionsResponse"`

	*AbstractResponseType

	//
	// Container consisting of the total number of order line items that match the input criteria and the total number of pages that must be scrolled through to view all order line items. To scroll through each page of order line item data, make subsequent <b>GetSellerTransactions</b> calls, incrementing the <b>Pagination.PageNumber</b> field by a value of '1' each time.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// This flag indicates whether there are additional pages of order line items to view. This field will be returned as <code>true</code> if there are additional pages or order line items to <code>view</code>, or <code>false</code> if the current page of order line item data is the last page of data.
	//
	HasMoreTransactions bool `xml:"HasMoreTransactions,omitempty"`

	//
	// This value indicates the number of order line items returned per page (per call) and is controlled by the <b>Pagination.EntriesPerPage</b> value passed in the call request. Unless it is the last (or possibly only) page of data (<b>HasMoreTransactions=false</b>), the <b>TransactionsPerPage</b> value should equal the <b>Pagination.EntriesPerPage</b> value passed in the call request. <br> <br> <span class="tablenote"><b>Note:</b> Due to the fact that item data on the eBay platform has a shorter retention period than order data, it is possible that some retrieved pages will contain no data. For pages that contain no data, the <b>ReturnedTransactionCountActual</b> value will be '0'. It is also possible that pages 2, 3, and 4 have no data, but pages 1 and 5 do have data. Therefore, we recommend that you scroll through each page of data (making subsequent <b>GetSellerTransactions</b> calls and incrementing the <b>Pagination.PageNumber</b> value by '1' each time) until you reach the last page, indicated by <b>HasMoreTransactions=false</b>. </span>
	//
	TransactionsPerPage int32 `xml:"TransactionsPerPage,omitempty"`

	//
	// This value indicates the page number of retrieved order line items that match the input criteria. This value is controlled by the <b>Pagination.PageNumber</b> value passed in the call request. To scroll through all pages of order line items that match the input criteria, you increment the <b>Pagination.PageNumber</b> value by <code>1</code> with each subsequent <b>GetSellerTransactions</b> call.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// This value indicates the total number of (non-empty) order line items retrieved in the current page of results. The <b>ReturnedTransactionCountActual</b> value will be lower than the <b>TransactionsPerPage</b> value if one or more empty order line items are retrieved on the page. <br> <br> <span class="tablenote"><b>Note:</b> Due to the fact that item data on the eBay platform has a shorter retention period than order data, it is possible that some retrieved pages will contain no data. For pages that contain no order line item data, the <b>ReturnedTransactionCountActual</b> value will be '0'. It is also possible that pages 2, 3, and 4 have no data, but pages 1 and 5 do have data. Therefore, we recommend that you scroll through each page of data (making subsequent <b>GetSellerTransactions</b> calls and incrementing the <b>Pagination.PageNumber</b> value by '1' each time) until you reach the last page, indicated by <b>HasMoreTransactions=false</b>. </span>
	//
	ReturnedTransactionCountActual int32 `xml:"ReturnedTransactionCountActual,omitempty"`

	//
	// Contains information about the seller whose order line items are being returned.
	// See the reference guide for information about the <b>Seller</b> object fields
	// that are returned.
	//
	Seller *UserType `xml:"Seller,omitempty"`

	//
	// List of <b>Transaction</b> objects representing the seller's recent sales.
	// Each <b>Transaction</b> object contains the data for one purchase
	// (of one or more items in the same listing).
	// See the reference guide for more information about the fields that are returned
	// for each order line item.
	//
	TransactionArray *TransactionArrayType `xml:"TransactionArray,omitempty"`

	//
	// Indicates whether the seller has the preference enabled that shows that the seller
	// prefers PayPal as the method of payment for an item. This preference is indicated on
	// an item's View Item page and is intended to influence a buyer to use PayPal
	// to pay for the item.
	//
	PayPalPreferred bool `xml:"PayPalPreferred,omitempty"`
}

type GetSellingManagerAlertsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerAlertsRequest"`

	*AbstractRequestType
}

type GetSellingManagerAlertsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerAlertsResponse"`

	*AbstractResponseType

	//
	// Container consisting of details related to a Selling Manager alert. Alert types include listing automation, inventory, item sold, and a general alert.
	//
	Alert []*SellingManagerAlertType `xml:"Alert,omitempty"`
}

type GetSellingManagerEmailLogRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerEmailLogRequest"`

	*AbstractRequestType

	//
	// Unique identifier for the eBay listing associated with the Selling
	// Manager email log. Unless the <b>OrderID</b> or <b>OrderLineItemID</b> value is
	// specified in the request, the <b>ItemID</b> and <b>TransactionID</b> fields must be
	// used to identify the Selling Manager email log to retrieve. You can
	// use <b>GetSellingManagerSoldListings</b> to retrieve the <b>ItemID</b>, <b>TransactionID</b>
	// or <b>OrderLineItemID</b> values that correspond to the Selling Manager sale
	// record (<b>SaleRecordID</b>). All four of these fields are returned under the
	// <b>SellingManagerSoldTransaction</b> container of the
	// <b>GetSellingManagerSoldListings</b> request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for the order line item associated with
	// the Selling Manager email log. Unless the <b>OrderID</b> or <b>OrderLineItemID</b>
	// value is specified in the request, the <b>ItemID</b> and <b>TransactionID</b> fields
	// must be used to identify the Selling Manager email log to retrieve.
	// You can use <b>GetSellingManagerSoldListings</b> to retrieve the <b>ItemID</b>,
	// <b>TransactionID</b> or <b>OrderLineItemID</b> values that correspond to the Selling
	// Manager sale record (<b>SaleRecordID</b>). All four of these fields are
	// returned under the <b>SellingManagerSoldTransaction</b> container of the
	// <b>GetSellingManagerSoldListings</b> request.
	//
	TransactionID int64 `xml:"TransactionID,omitempty"`

	//
	// A unique identifier that identifies a single line item or multiple line item
	// (Combined Invoice) order associated with the Selling Manager email log.
	// <br><br>
	// For a single line item order, the <b>OrderID</b> value is identical to the
	// <b>OrderLineItemID</b> value that is generated upon creation of the order line
	// item. For a Combined Payment order, the <b>OrderID</b> value is created by eBay
	// when the buyer or seller (sharing multiple, common order line items)
	// combines multiple order line items into a Combined Payment order through
	// the eBay site (or when the seller creates Combined Payment order through
	// <b>AddOrder</b>). If an <b>OrderID</b> is used in the request, the <b>OrderLineItemID</b> and
	// <b>ItemID</b>/<b>TransactionID</b> pair are not required.
	//
	OrderID *OrderIDType `xml:"OrderID,omitempty"`

	//
	// Specifies the earliest (oldest) and latest (most recent) dates to use in a
	// date range filter based on email sent date. Each of the time ranges can be
	// up to 90 days.
	//
	EmailDateRange *TimeRangeType `xml:"EmailDateRange,omitempty"`

	//
	// A unique identifier for an eBay order line item that is associated with
	// the Selling Manager email log. This field is created as soon as there
	// is a commitment to buy from the seller, and its value is based upon the
	// concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between
	// these two IDs. You can use <b>GetSellingManagerSoldListings</b> to retrieve the
	// <b>ItemID</b>, <b>TransactionID</b> or <b>OrderLineItemID</b> values that correspond to the
	// Selling Manager sale record (<b>SaleRecordID</b>). All four of these fields are
	// returned under the <b>SellingManagerSoldTransaction</b> container of the
	// <b>GetSellingManagerSoldListings</b> request. Unless an <b>OrderID</b> or an
	// <b>ItemID</b>/<b>TransactionID</b> pair is specified in the <b>GetSellingManagerSaleRecord</b>
	// request, the <b>OrderLineItemID</b> is required.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type GetSellingManagerEmailLogResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerEmailLogResponse"`

	*AbstractResponseType

	//
	// Email logs associated with this order.
	//
	EmailLog []*SellingManagerEmailLogType `xml:"EmailLog,omitempty"`
}

type GetSellingManagerInventoryRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerInventoryRequest"`

	*AbstractRequestType

	//
	// This field is used if the seller would like to sort Selling Manager Inventory results based on a specific aspect such as Product Name, Average Price, etc. See <b>SellingManagerProductSortCodeType</b> to read more about the available sorting options.
	//
	Sort *SellingManagerProductSortCodeType `xml:"Sort,omitempty"`

	//
	// This field is included if the seller wants to view Selling Manager Inventory from a specific folder.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// This container is used if the seller would like to control how many products are returned per page and which page to view.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// This field allows the seller to sort in ascending or descending order (based on the selected aspect in the <b>Sort</b> field).
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// This container is used if the seller would like to search for Selling Manager Inventory based on certain identifiers like Item ID, listing title, buyer user ID, etc. The seller will specify one of the supported search types in <b>SellingManagerSearchTypeCodeType</b>, and then provides the value for that search type.
	//
	Search *SellingManagerSearchType `xml:"Search,omitempty"`

	//
	// This field is used if the seller would like to retrieve all Selling Manager Inventory listed in a specific eBay Store Category.
	//
	StoreCategoryID int64 `xml:"StoreCategoryID,omitempty"`

	//
	// One or more <b>Filter</b> fields can be used to retrieve Selling Manager Inventory that is in a certain state, such as active listings, inactive listings, or listings that are low in stock.
	//
	Filter []*SellingManagerInventoryPropertyTypeCodeType `xml:"Filter,omitempty"`
}

type GetSellingManagerInventoryResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerInventoryResponse"`

	*AbstractResponseType

	//
	// Returns the date the inventory counts were last calculated.
	//
	InventoryCountLastCalculatedDate time.Time `xml:"InventoryCountLastCalculatedDate,omitempty"`

	//
	// Container for information about the requested products and templates.
	//
	SellingManagerProduct []*SellingManagerProductType `xml:"SellingManagerProduct,omitempty"`

	//
	// Contains the total number of pages (TotalNumberOfPages) and the total
	// number of products entries (TotalNumberOfEntries) that can be returned
	// on repeated calls with the same format and report criteria.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`
}

type GetSellingManagerInventoryFolderRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerInventoryFolderRequest"`

	*AbstractRequestType

	//
	// A unique identifier for a Selling Manager Inventory folder. The <b>FolderID</b> is used if the seller wants to retrieve a specific folder.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// This field is used to specify the number of levels of subfolders to be returned in the response. If 0, the parent folder is returned. If 1, the parent and child folders are returned. If 2, the parent and two levels of child folders are returned. Ignored if the <b>FullRecursion</b> field is included and set to <code>True</code>.
	// <br/>
	//
	MaxDepth int32 `xml:"MaxDepth,omitempty"`

	//
	// Displays the entire tree of a user's Selling Manager Inventory folders. If this is provided, the <b>FolderID</b> and <b>MaxDepth</b> fields are no longer applicable.
	//
	FullRecursion bool `xml:"FullRecursion,omitempty"`
}

type GetSellingManagerInventoryFolderResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerInventoryFolderResponse"`

	*AbstractResponseType

	//
	// This container consists of detailed information on the Selling Manager Inventory folder that matches the input criteria, as well as detailed information about any child folders if <b>FullRecursion</b> was set to <code>true</code> or if the <b>MaxDepth</b> field is set to an integer value greater than <code>0</code>.
	//
	Folder *SellingManagerFolderDetailsType `xml:"Folder,omitempty"`
}

type GetSellingManagerItemAutomationRuleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerItemAutomationRuleRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the listing whose Selling Manager automation rules you want to retrieve.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`
}

type GetSellingManagerItemAutomationRuleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerItemAutomationRuleResponse"`

	*AbstractResponseType

	//
	// The information for the automated listing rule associated with the item.
	// This field is only returned if the item was listed from a template.
	// The value in this field refers to that template's automated listing rule.
	//
	AutomatedListingRule *SellingManagerAutoListType `xml:"AutomatedListingRule,omitempty"`

	//
	// The information for the automated relisting rule associated with the item.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// The information for the automated Second Chance Offer rule associated with the item.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`

	//
	// Contains fees that may be incurred when items are listed using the
	// automation rule (e.g., a scheduled listing fee). Use of an automation rule
	// does not in itself have a fee, but use can result in a fee.
	//
	Fees *FeesType `xml:"Fees,omitempty"`
}

type GetSellingManagerSaleRecordRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerSaleRecordRequest"`

	*AbstractRequestType

	//
	// Unique identifier for the eBay listing associated with the Selling
	// Manager sale record. Unless the <b>OrderID</b> or <b>OrderLineItemID</b> value is
	// specified in the request, the <b>ItemID</b> and <b>TransactionID</b> fields must be
	// used to identify the Selling Manager sale record to retrieve. You can
	// use <b>GetSellingManagerSoldListings</b> to retrieve the <b>ItemID</b>, <b>TransactionID</b>
	// or <b>OrderLineItemID</b> values that correspond to the Selling Manager sale
	// record (<b>SaleRecordID</b>). All four of these fields are returned under the
	// <b>SellingManagerSoldTransaction</b> container of the
	// <b>GetSellingManagerSoldListings</b> request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for the order line item associated with the Selling
	// Manager sale record. Unless the <b>OrderID</b> or
	// <b>OrderLineItemID</b> value is specified in the request, the
	// <b>ItemID</b> and <b>TransactionID</b> fields must
	// be used to identify the Selling Manager sale record to retrieve. You can
	// use <b>GetSellingManagerSoldListings</b> to retrieve the
	// <b>ItemID</b>, <b>TransactionID</b> or
	// <b>OrderLineItemID</b> values that correspond to the Selling
	// Manager sale record (<b>SaleRecordID</b>). All four of these
	// fields are returned under the
	// <b>SellingManagerSoldTransaction</b> container of the
	// <b>GetSellingManagerSoldListings</b> request.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// A unique identifier that identifies a single line item or multiple line item
	// (Combined Invoice) order associated with the Selling Manager sale record(s).
	// <br><br>
	// For a single line item order, the <b>OrderID</b> value is identical to the
	// <b>OrderLineItemID</b> value that is generated upon creation of the order line
	// item. For a Combined Invoice order, the <b>OrderID</b>value is created by eBay
	// when the buyer or seller (sharing multiple, common order line items)
	// combines multiple order line items into a Combined Invoice order through
	// the eBay site (or when the seller creates Combined Invoice order through
	// <b>AddOrder</b>). If an <b>OrderID</b> is used in the request, the <b>OrderLineItemID</b> and
	// <b>ItemID</b>/<b>TransactionID</b> pair are not required.
	//
	OrderID *OrderIDType `xml:"OrderID,omitempty"`

	//
	// A unique identifier for an eBay order line item that is associated with
	// the Selling Manager sale record. This field is created as soon as there
	// is a commitment to buy from the seller, and its value is based upon the
	// concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between
	// these two IDs. You can use <b>GetSellingManagerSoldListings</b> to retrieve the
	// <b>ItemID</b>, <b>TransactionID</b> or <b>OrderLineItemID</b> values that correspond to the
	// Selling Manager sale record (<b>SaleRecordID</b>). All four of these fields are
	// returned under the <b>SellingManagerSoldTransaction</b> container of the
	// <b>GetSellingManagerSoldListings</b> request. Unless an <b>OrderID</b> or an
	// <b>ItemID</b>/<b>Transaction</b> pair is specified in the <b>GetSellingManagerSaleRecord</b>
	// request, the <b>OrderLineItemID</b> is required.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type GetSellingManagerSaleRecordResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerSaleRecordResponse"`

	*AbstractResponseType

	//
	// Contains the data in a Selling Manager Sale Record.
	//
	SellingManagerSoldOrder *SellingManagerSoldOrderType `xml:"SellingManagerSoldOrder,omitempty"`
}

type GetSellingManagerSoldListingsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerSoldListingsRequest"`

	*AbstractRequestType

	//
	// This container is used if the seller would like to search for Selling Manager Sele Records based on certain identifiers like Saler Record ID, Item ID, listing title, buyer user ID, etc. The seller will specify one of the supported search types in <b>SellingManagerSearchTypeCodeType</b>, and then provides the value for that search type.
	//
	Search *SellingManagerSearchType `xml:"Search,omitempty"`

	//
	// This field is used if the seller would like to retrieve all Selling Manager Sale Records for products listed in a specific eBay Store Category.
	//
	StoreCategoryID int64 `xml:"StoreCategoryID,omitempty"`

	//
	// One or more <b>Filter</b> fields can be used to retrieve Selling Manager Sale Records for orders that are in a certain state. See <b>SellingManagerSoldListingsPropertyTypeCodeType</b> for the supported values.
	//
	Filter []*SellingManagerSoldListingsPropertyTypeCodeType `xml:"Filter,omitempty"`

	//
	// This field is included and set to <code>true</code> if the seller would like to retrieve one or more archived orders between 90 and 120 days old.
	//
	Archived bool `xml:"Archived,omitempty"`

	//
	// This field is used if the seller would like to sort Selling Manager Sale Record results based on a specific aspect such as purchase date, checkout status, total price, etc. See <b>SellingManagerSoldListingsSortTypeCodeType</b> to read more about the available sorting options.
	//
	Sort *SellingManagerSoldListingsSortTypeCodeType `xml:"Sort,omitempty"`

	//
	// This field allows the seller to sort in ascending or descending order (based on the selected aspect in the <b>Sort</b> field).
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// This container is used if the seller would like to control how many Sale Records are returned per page and which page to view.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// This container allows the seller to retrieve orders that were purchased within a specified time range. A time range can be set up to 90 days in the past (or up to 120 days if the <b>Archived</b> field is included and set to <code>true</code>.
	//
	SaleDateRange *TimeRangeType `xml:"SaleDateRange,omitempty"`
}

type GetSellingManagerSoldListingsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerSoldListingsResponse"`

	*AbstractResponseType

	//
	// A <b>SaleRecord</b> container is returned for each order that matches the input criteria.
	//
	SaleRecord []*SellingManagerSoldOrderType `xml:"SaleRecord,omitempty"`

	//
	// Contains the total number of pages (<b>TotalNumberOfPages</b>) and the total number of products entries (<b>TotalNumberOfEntries</b>) that can be returned on repeated calls with the same format and report criteria.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`
}

type GetSellingManagerTemplateAutomationRuleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerTemplateAutomationRuleRequest"`

	*AbstractRequestType

	//
	// The unique ID of the Selling Manager Template whose Selling Manager
	// automation rules you want to retrieve.
	// You can obtain a <b>SaleTemplateID</b> by calling <b>GetSellingManagerInventory</b>.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`
}

type GetSellingManagerTemplateAutomationRuleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerTemplateAutomationRuleResponse"`

	*AbstractResponseType

	//
	// The information for the automated listing rule associated with the template.
	//
	AutomatedListingRule *SellingManagerAutoListType `xml:"AutomatedListingRule,omitempty"`

	//
	// The information for the automated relisting rule associated with the template.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// The information for the automated Second Chance Offer rule associated with the template.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`

	//
	// Contains fees that may be incurred when items are listed using the
	// automation rule (e.g., a scheduled listing fee). Use of an automation rule
	// does not in itself have a fee, but use can result in a fee.
	//
	Fees *FeesType `xml:"Fees,omitempty"`
}

type GetSellingManagerTemplatesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerTemplatesRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the Selling Manager Template whose data will be returned. A Selling Manager Template contains the data needed to list an item. One or more template IDs can be specified, each in its own field. You can obtain a <b>SaleTemplateID</b> by calling <b>GetSellingManagerInventory</b>.
	//
	SaleTemplateID []int64 `xml:"SaleTemplateID,omitempty"`
}

type GetSellingManagerTemplatesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSellingManagerTemplatesResponse"`

	*AbstractResponseType

	//
	// This container consists of an array of Selling Manager Templates that match the input criteria.
	//
	SellingManagerTemplateDetailsArray *SellingManagerTemplateDetailsArrayType `xml:"SellingManagerTemplateDetailsArray,omitempty"`
}

type GetSessionIDRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSessionIDRequest"`

	*AbstractRequestType

	//
	// The eBay Registered URL must be specified in this field. An eBay Registered URL is created and associated with a developer's Sandbox or Production key set by logging into the user's developer account on <b>developer.ebay.com</b> and going to the <b>User Tokens</b> page. The <b>RuName</b> value passed in this field must match the one specified for the specific Sandbox or Production key set being used to make the <b>GetSessionID</b> call. For more information on adding and registering your <b class="con">RuName</b>, see the <a href="../../HowTo/Tokens/GettingTokens.html#step1">Setting Up an Application to Receive Tokens</a> tutorial.
	//
	RuName string `xml:"RuName,omitempty"`
}

type GetSessionIDResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSessionIDResponse"`

	*AbstractResponseType

	//
	// A 40-character identifier supplied by eBay to an application. Used to confirm the
	// identities of the user and the application in a URL redirect during the
	// process in which the user agrees to let the application wield a user token that
	// grants the application the right to access eBay data on behalf of the user.
	// Subsequently also used as input for the <b>FetchToken</b> API call. The
	// <b>SessionID</b> value is valid for five minutes after it is retrieved.
	//
	SessionID string `xml:"SessionID,omitempty"`
}

type GetShippingDiscountProfilesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetShippingDiscountProfilesRequest"`

	*AbstractRequestType
}

type GetShippingDiscountProfilesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetShippingDiscountProfilesResponse"`

	*AbstractResponseType

	//
	// The three-digit code of the currency to be used for shipping cost discounts. A discount profile can only be associated with a listing if the <b>CurrencyID</b> value of the profile matches the <b>Item.Currency</b> value specified in a listing.
	//
	CurrencyID *CurrencyCodeType `xml:"CurrencyID,omitempty"`

	//
	// This container consists of one or more flat-rate shipping discount rules that are set up for a seller's account. This container is returned as an empty element if no flat-rate shipping discount rules are currently set for the seller's account.
	//
	FlatShippingDiscount *FlatShippingDiscountType `xml:"FlatShippingDiscount,omitempty"`

	//
	// This container consists of one or more calculated shipping discount rules that are set up for a seller's account. This container is returned as an empty element if no calculated shipping discount rules are currently set for the seller's account.
	//
	CalculatedShippingDiscount *CalculatedShippingDiscountType `xml:"CalculatedShippingDiscount,omitempty"`

	//
	// This field indicates whether or not a seller has set up a promotional shipping discount rule in the seller's account. Only one promotional shipping discount may be defined for a seller's account at any given time. This field is returned whether <code>false</code> or <code>true</code>. If <code>true</code>, details of the rule can be found in the <b>PromotionalShippingDiscountDetails</b> container.
	//
	PromotionalShippingDiscount bool `xml:"PromotionalShippingDiscount,omitempty"`

	//
	// This container consists of the handling discount applicable to a calculated shipping discount rule that is set up for a seller's account. This container is not returned if no calculated shipping discount rules are currently set for the seller's account.
	//
	CalculatedHandlingDiscount *CalculatedHandlingDiscountType `xml:"CalculatedHandlingDiscount,omitempty"`

	//
	// This container consists of information related to the promotional shipping discount rule that is set up for a seller's account. This container is not returned if no promotional shipping discount rule is set up for the seller's account.
	//
	PromotionalShippingDiscountDetails *PromotionalShippingDiscountDetailsType `xml:"PromotionalShippingDiscountDetails,omitempty"`

	//
	// This container is deprecated.
	//
	ShippingInsurance *ShippingInsuranceType `xml:"ShippingInsurance,omitempty"`

	//
	// This container is deprecated.
	//
	InternationalShippingInsurance *ShippingInsuranceType `xml:"InternationalShippingInsurance,omitempty"`

	//
	// This field indicates the number of days after the sale of an item in which the buyer or seller can combine multiple and mutual order line items into one Combined Invoice order. In a Combined Invoice order, the buyer makes one payment for all order line items, hence only unpaid order line items can be combined into a Combined Invoice order.
	//
	CombinedDuration *CombinedPaymentPeriodCodeType `xml:"CombinedDuration,omitempty"`
}

type GetStoreRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreRequest"`

	*AbstractRequestType

	//
	// Include this field and set its value to <code>true</code> if you wish to restrict the call response to only the category hierarchy data. If this field is not included or set to <code>false</code>, all store configuration data is returned.
	//
	CategoryStructureOnly bool `xml:"CategoryStructureOnly,omitempty"`

	//
	// The unique identifier of an eBay Store category. This field is used if the user wants to isolate the category hierarchy data to one particular eBay category (and its subcategories if applicable). The <b>LevelLimit</b> value will determine how many additional levels of categories are returned.
	//
	RootCategoryID int64 `xml:"RootCategoryID,omitempty"`

	//
	// This field allows the seller to limit the level of eBay Store categories that are returned. To only return top-level eBay Store categories, the user can include this field and set its value to <code>1</code>. To view a specific eBay Store Category and the next level of categories, the user could specify the unique eBay Store Category ID in the <b>RootCategoryID</b> field and then set the <b>LevelLimit</b> value to <code>2</code>. If <b>LevelLimit</b> is omitted, the complete eBay Store Category hierarchy is returned. Currently, eBay Stores support only three levels of Store categories.
	//
	LevelLimit int32 `xml:"LevelLimit,omitempty"`

	//
	// The unique identifier for an eBay Store owner. This field is only required if the user wants to view the eBay Store theme and category information for a different eBay Store owner. If this field is omitted, eBay Store theme and category information is returned for the eBay Store owner that is making the call.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`
}

type GetStoreResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreResponse"`

	*AbstractResponseType

	//
	// This container consists of detailed information on the seller's eBay Store. The amount of information in this container will partially depend on the settings made in the call request.
	//
	Store *StoreType `xml:"Store,omitempty"`
}

type GetStoreCategoryUpdateStatusRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreCategoryUpdateStatusRequest"`

	*AbstractRequestType

	//
	// The unique identifier of an eBay Store Category hierarchy change task. A <b>TaskID</b> value is returned in the response of a successful <b>SetStoreCategories</b> call.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> Depending on the breadth of changes being made to an eBay Store Category hierarchy, it is is possible that the <b>SetStoreCategories</b> call will complete the task simultaneously with the call response. A seller will know if an eBay Store Category hierarchy task was completed simultaneously if the <b>TaskID</b> value is returned as <code>0</code>, and the <b>Status</b> field is returned with a value of <code>Complete</code>. If the task was not completely simultaneously, the <b>TaskID</b> value will be a positive integer, and the <b>Status</b> field will show a value of <code>InProgress</code> or <code>Pending</code>.
	// </span>
	//
	TaskID int64 `xml:"TaskID,omitempty"`
}

type GetStoreCategoryUpdateStatusResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreCategoryUpdateStatusResponse"`

	*AbstractResponseType

	//
	// The enumeration value indicates the status of an update to the
	// eBay Store Category hierarchy.
	//
	Status *TaskStatusCodeType `xml:"Status,omitempty"`
}

type GetStoreCustomPageRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreCustomPageRequest"`

	*AbstractRequestType

	//
	// This field is used if the seller wants to retrieved detailed information on a specific custom page. If no <b>PageID</b> is specified, then all of the seller's custom pages are returned, but without the page content.
	//
	PageID int64 `xml:"PageID,omitempty"`
}

type GetStoreCustomPageResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreCustomPageResponse"`

	*AbstractResponseType

	//
	// This array consists of details for one or more of the seller's custom pages. A <b>CustomPage</b> container is returned for each custom page that matches the input criteria.
	//
	CustomPageArray *StoreCustomPageArrayType `xml:"CustomPageArray,omitempty"`
}

type GetStoreOptionsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreOptionsRequest"`

	*AbstractRequestType
}

type GetStoreOptionsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStoreOptionsResponse"`

	*AbstractResponseType

	//
	// This container consists of the current set of basic themes available for eBay Stores. Each basic theme definition consists of settings like colors, font style, and font size. This theme data can be reused in a <b>SetStore</b> call to set/modify the theme for an eBay Store.
	//
	BasicThemeArray *StoreThemeArrayType `xml:"BasicThemeArray,omitempty"`

	//
	// This container consists of the current set of advanced themes available for eBay Stores. Each advanced theme definition consists of settings like colors, font style, and font size. This theme data can be reused in a <b>SetStore</b> call to set/modify the theme for an eBay Store. Unlike basic themes, you can use any color	scheme with an advanced theme. These themes are suitable for more advanced customization.
	//
	AdvancedThemeArray *StoreThemeArrayType `xml:"AdvancedThemeArray,omitempty"`

	//
	// An array of logo identifiers for numerous product categories. These <b>LogoID</b> values can be reused in a <b>SetStore</b> call to set the logo for an eBay Store.
	//
	LogoArray *StoreLogoArrayType `xml:"LogoArray,omitempty"`

	//
	// This container consists of the different levels of eBay Store subscriptions along with the monthly subscription price.
	//
	SubscriptionArray *StoreSubscriptionArrayType `xml:"SubscriptionArray,omitempty"`

	//
	// This value indicates the maximum number of categories (meta and leaf) that can be set up in an eBay Store.
	//
	MaxCategories int32 `xml:"MaxCategories,omitempty"`

	//
	// This is the maximum number of category levels that can be set up in an eBay Store.
	//
	MaxCategoryLevels int32 `xml:"MaxCategoryLevels,omitempty"`
}

type GetStorePreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStorePreferencesRequest"`

	*AbstractRequestType
}

type GetStorePreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetStorePreferencesResponse"`

	*AbstractResponseType

	//
	// This container consists of the seller's current eBay Store preferences. Currently, the only eBay Store preferences are related to putting an eBay Store on vacation mode, but more preferences may get added in the future.
	//
	StorePreferences *StorePreferencesType `xml:"StorePreferences,omitempty"`
}

type GetSuggestedCategoriesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSuggestedCategoriesRequest"`

	*AbstractRequestType

	//
	// This field is used to specify the search query, consisting of one or
	// more keywords to search for in listing titles and descriptions.
	// The words "and" and "or" are treated like any other
	// word.
	//
	Query string `xml:"Query,omitempty"`
}

type GetSuggestedCategoriesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetSuggestedCategoriesResponse"`

	*AbstractResponseType

	//
	// This container consists of an array of suggested listing categories for an item based on the keywords that were specified in the <b>Query</b> field of the call request. Up to 10 suggested  categories may be returned. This container will not returned if no eBay categories match the query in the call request.
	//
	SuggestedCategoryArray *SuggestedCategoryArrayType `xml:"SuggestedCategoryArray,omitempty"`

	//
	// This integer value Indicates the number of suggested categories that were found that matched the keywords.
	//
	CategoryCount int32 `xml:"CategoryCount,omitempty"`
}

type GetTaxTableRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetTaxTableRequest"`

	*AbstractRequestType
}

type GetTaxTableResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetTaxTableResponse"`

	*AbstractResponseType

	//
	// The last time (in GMT) that the tax table was updated. Only returned if the user previously created a tax table and if the site has jurisdictions. <b>LastUpdateTime</b> is useful for synchronization. If you cache the user's tax table, you can use <b>GetTaxTable</b> to check if it has changed and whether you need to update the cached tax table.
	//
	LastUpdateTime time.Time `xml:"LastUpdateTime,omitempty"`

	//
	// A container of tax jurisdiction information unique to a user/site combination. Returned as an empty container if no Sales Tax Table information exists for the seller's account and no <b>DetailLevel</b> is used. If <b>DetailLevel</b> is not specified, information is only returned for the jurisdictions for which the user provided tax information. If <b>DetailLevel</b> is set to <b>ReturnAll</b>, tax information is returned for all possible jurisdictions, whether specified by the user or not. <b>ShippingIncludedInTax</b> and <b>SalesTaxPercent</b> are returned but are empty.
	//
	TaxTable *TaxTableType `xml:"TaxTable,omitempty"`
}

type GetTokenStatusRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetTokenStatusRequest"`

	*AbstractRequestType
}

type GetTokenStatusResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetTokenStatusResponse"`

	*AbstractResponseType

	//
	// This container value indicates the status and expiration date of a user token. If a user token was revoked, the date/time of the revocation is also returned under this container.
	//
	TokenStatus *TokenStatusType `xml:"TokenStatus,omitempty"`
}

type GetUserRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserRequest"`

	*AbstractRequestType

	//
	// Specify the <strong>ItemID</strong> value for a successfully concluded listing in which the
	// requestor and target user were participants (one as seller and the other
	// as buyer). Necessary to return certain data (like an email address). Not
	// necessary if the requestor is retrieving their own data.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Specify the user whose data you want returned by the call. If not specified, eBay returns data pertaining to the
	// requesting user (as specified with the <strong>eBayAuthToken</strong> value).
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// This field is deprecated.
	//
	IncludeExpressRequirements bool `xml:"IncludeExpressRequirements,omitempty"`

	//
	// If the <b>IncludeFeatureEligibility</b> flag is included and set to 'true', the call response will include a <b>QualifiesForSelling</b> flag which indicates if the eBay user is eligible to sell on eBay, and a <b>IncludeFeatureEligibility</b> container which indicates which selling features are available to the user.
	//
	IncludeFeatureEligibility bool `xml:"IncludeFeatureEligibility,omitempty"`
}

type GetUserResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserResponse"`

	*AbstractResponseType

	//
	// This container consists of detailed information about the user specified in the call request (through the <b>UserID</b> field) or the eBay user account that is tied to the <strong>eBayAuthToken</strong> value that is passed in the call request.
	// <br><br>
	// Some sensitive data will be masked/omitted if the returned eBay user is not the person making the <b>GetUser</b> call. More information on another eBay user will be revealed to the person making the call if that person has an order relationship for an eBay listing specified in the <strong>ItemID</strong> field of the call request.
	//
	User *UserType `xml:"User,omitempty"`
}

type GetUserContactDetailsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserContactDetailsRequest"`

	*AbstractRequestType

	//
	// A unique identifier for the eBay listing that the caller and order partner have in common.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// An eBay user ID that uniquely identifies a given user for whom the caller is seeking information. Either a seller's or bidder's/buyer's user ID can be specified here, as long as an bidding/order relationship exists between the requester and the user specified by this field. That is, a bidder must be bidding on the seller's active auction item, or a prospective buyer has proposed a Best Offer on a listing.
	//
	ContactID string `xml:"ContactID,omitempty"`

	//
	// An eBay user ID that uniquely identifies the person who is making the call. Either a seller's or bidder's/buyer's user ID can be specified here, as long as a bidding/order relationship exists between the requester and the user for whom information is being requested.
	//
	RequesterID string `xml:"RequesterID,omitempty"`
}

type GetUserContactDetailsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserContactDetailsResponse"`

	*AbstractResponseType

	//
	// An eBay ID that uniquely identifies the given user whose information is given in the call response.
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// Contact information for the requested contact.
	// Note that the email address is NOT returned.
	//
	ContactAddress *AddressType `xml:"ContactAddress,omitempty"`

	//
	// The date and time that the requested contact
	// registered with eBay.
	//
	RegistrationDate time.Time `xml:"RegistrationDate,omitempty"`
}

type GetUserDisputesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserDisputesRequest"`

	*AbstractRequestType

	//
	// An inclusive filter that isolates the returned disputes to a certain type such as Item Not Received or Unpaid Item disputes. eBay Money Back Guarantee cases are not retrieved with this call, even if the <b>ItemNotReceivedDisputes</b> filter is included in the request.
	//
	DisputeFilterType *DisputeFilterTypeCodeType `xml:"DisputeFilterType,omitempty"`

	//
	// The value and sequence to use to sort the returned disputes.
	//
	DisputeSortType *DisputeSortTypeCodeType `xml:"DisputeSortType,omitempty"`

	//
	// A filter that retrieves disputes whose <b>DisputeModifiedTime</b> is later than or equal to this value. Specify the time value in GMT. See the eBay Features Guide for information about specifying time values. For more precise control of the date range filter, it is a good practice to also specify <b>ModTimeTo</b>. Otherwise, the end of the date range is the present time. Filtering by date range is optional. You can use date range filters in combination with other filters like <b>DisputeFilterType</b> to control the amount of data returned.
	//
	ModTimeFrom time.Time `xml:"ModTimeFrom,omitempty"`

	//
	// A filter that retrieves disputes whose <b>DisputeModifiedTime</b> is earlier than or equal to this value. Specify the time value in GMT. See the eBay Features Guide for information about specifying time values. For more precise control of the date range filter, it is a good practice to also specify <b>ModTimeFrom</b>. Otherwise, all available disputes modified prior to the <b>ModTimeTo</b> value are returned. Filtering by date range is optional. You can use date range filters in combination with other filters like <b>DisputeFilterType</b> to control the amount of data returned.
	//
	ModTimeTo time.Time `xml:"ModTimeTo,omitempty"`

	//
	// The virtual page number of the result set to display. A result set has a number of disputes divided into virtual pages, with 200 disputes per page. The response can only display one page. The first page in the result set is number 1. Required. If not specified, a warning is returned and <b>Pagination.PageNumber</b> is set to 1 by default.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`
}

type GetUserDisputesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserDisputesResponse"`

	*AbstractResponseType

	//
	// The index of the first dispute in the current result set, relative to the total number of disputes available. Primarily useful for interpreting paginated results. For example, if 228 disputes are available and 200 results are returned per page: The first page returns a <b>StartingDisputeID</b> value of 1 and the second page returns a <b>StartingDisputeID</b> value of 201.
	//
	StartingDisputeID *DisputeIDType `xml:"StartingDisputeID,omitempty"`

	//
	// The index of the last dispute in the current result set, relative to the total number of disputes available. Primarily useful for interpreting paginated results. For example, if 228 disputes are available and 200 results are returned per page: The first page returns an <b>EndingDisputeID</b> value of 200 and the second page returns an <b>EndingDisputeID</b> value of 228.
	//
	EndingDisputeID *DisputeIDType `xml:"EndingDisputeID,omitempty"`

	//
	// The array of disputes returned.
	//
	DisputeArray *DisputeArrayType `xml:"DisputeArray,omitempty"`

	//
	// The number of disputes on each virtual page in the result set.
	// The virtual page returned is determined by <b>PageNumber</b>.
	//
	ItemsPerPage int32 `xml:"ItemsPerPage,omitempty"`

	//
	// The page of the total result set returned in the call. The entire result set
	// is virtual and the call returns only one page of it.
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// The number of disputes that involve the requester as
	// buyer or seller and match a given filter type.
	//
	DisputeFilterCount []*DisputeFilterCountType `xml:"DisputeFilterCount,omitempty"`

	//
	// The result of the pagination, including the total number
	// of virtual pages in the result set and the total number of
	// disputes returned.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`
}

type GetUserPreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserPreferencesRequest"`

	*AbstractRequestType

	//
	// If included and set to <code>true</code>, the seller's preference for receiving contact information for unsuccessful bidders is returned in the response.
	//
	ShowBidderNoticePreferences bool `xml:"ShowBidderNoticePreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's combined invoice preferences are returned in the response. These preferences are used to allow Combined Invoice orders.
	// <br>
	//
	ShowCombinedPaymentPreferences bool `xml:"ShowCombinedPaymentPreferences,omitempty"`

	//
	// This field is deprecated.
	//
	ShowCrossPromotionPreferences bool `xml:"ShowCrossPromotionPreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's payment preferences are returned in the response.
	//
	ShowSellerPaymentPreferences bool `xml:"ShowSellerPaymentPreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's preferences for the end-of-auction email sent to the winning bidder is returned in the response. These preferences are only applicable for auction listings.
	//
	ShowEndOfAuctionEmailPreferences bool `xml:"ShowEndOfAuctionEmailPreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's favorite item preferences are returned in the response.
	//
	ShowSellerFavoriteItemPreferences bool `xml:"ShowSellerFavoriteItemPreferences,omitempty"`

	//
	// This field is deprecated.
	//
	ShowProStoresPreferences bool `xml:"ShowProStoresPreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's preference for sending an email to the buyer with the shipping tracking number is returned in the response.
	//
	ShowEmailShipmentTrackingNumberPreference bool `xml:"ShowEmailShipmentTrackingNumberPreference,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's preference for requiring that the buyer supply a shipping phone number upon checkout is returned in the response. Some shipping carriers require the receiver's phone number.
	//
	ShowRequiredShipPhoneNumberPreference bool `xml:"ShowRequiredShipPhoneNumberPreference,omitempty"`

	//
	// If included and set to <code>true</code>, all of the seller's excluded shipping locations are returned in the response. The returned list mirrors the seller's current Exclude shipping locations list in My eBay's Shipping Preferences. An excluded shipping location in My eBay can be an entire geographical region (such as Middle East) or only an individual country (such as Iraq). Sellers can override these default settings for an individual listing by using the <b>Item.ShippingDetails.ExcludeShipToLocation</b> field in the <b>AddItem</b> family of calls.
	//
	ShowSellerExcludeShipToLocationPreference bool `xml:"ShowSellerExcludeShipToLocationPreference,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's Unpaid Item Assistant preferences are returned in the response. The Unpaid Item Assistant automatically opens an Unpaid Item dispute on the behalf of the seller. <br><br> <span class="tablenote"><strong>Note:</strong> To return the list of buyers excluded from the Unpaid Item Assistant mechanism, the <b>ShowUnpaidItemAssistanceExclusionList</b> field must also be included and set to <code>true</code> in the request. Excluded buyers can be viewed in the <b>UnpaidItemAssistancePreferences.ExcludedUser</b> field. </span>
	//
	ShowUnpaidItemAssistancePreference bool `xml:"ShowUnpaidItemAssistancePreference,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's preference for sending a purchase reminder email to buyers is returned in the response.
	//
	ShowPurchaseReminderEmailPreferences bool `xml:"ShowPurchaseReminderEmailPreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the list of eBay user IDs on the Unpaid Item Assistant Excluded User list is returned through the <b>UnpaidItemAssistancePreferences.ExcludedUser</b> field in the response. <br/><br/> For excluded users, an Unpaid Item dispute is not automatically filed through the UPI Assistance mechanism. The Excluded User list is managed through the <b>SetUserPreferences</b> call. <br><br> <span class="tablenote"><strong>Note:</strong> To return the list of buyers excluded from the Unpaid Item Assistant mechanism, the <b>ShowUnpaidItemAssistancePreference</b> field must also be included and set to <b>true</b> in the request. </span>
	//
	ShowUnpaidItemAssistanceExclusionList bool `xml:"ShowUnpaidItemAssistanceExclusionList,omitempty"`

	//
	// If this flag is included and set to <code>true</code>, the seller's Business Policies profile information is returned in the response. This information includes a flag that indicates whether or not the seller has opted into Business Policies, as well as Business Policies profiles (payment, shipping, and return policy) active on the seller's account.
	//
	ShowSellerProfilePreferences bool `xml:"ShowSellerProfilePreferences,omitempty"`

	//
	// If this flag is included and set to <code>true</code>, the <b>SellerReturnPreferences</b> container is returned in the response and indicates whether or not the seller has opted in to eBay Managed Returns.
	// <br><br>
	// eBay Managed Returns are currently only available on the US, UK, DE, AU, and CA (English and French) sites.
	//
	ShowSellerReturnPreferences bool `xml:"ShowSellerReturnPreferences,omitempty"`

	//
	// If this flag is included and set to <code>true</code>, the seller's preference for offering the Global Shipping Program to international buyers will be returned in <strong>OfferGlobalShippingProgramPreference</strong>.
	//
	ShowGlobalShippingProgramPreference bool `xml:"ShowGlobalShippingProgramPreference,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's same-day handling cutoff time is returned in <strong>DispatchCutoffTimePreference.CutoffTime</strong>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> This field is not applicable for sellers who have opted into the Handling Time Option of eBay Guaranteed Delivery, as this field only shows a single order cutoff time, but with the Handling Time Option, a seller can set a different order cutoff time for each business day. Currently, eBay Guaranteed Delivery is only available in the US.</span>
	// <br>
	//
	ShowDispatchCutoffTimePreferences bool `xml:"ShowDispatchCutoffTimePreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the <strong>GlobalShippingProgramListingPreference</strong> field is returned. A returned value of <code>true</code> indicates that the seller's new listings will enable the Global Shipping Program by default.
	//
	ShowGlobalShippingProgramListingPreference bool `xml:"ShowGlobalShippingProgramListingPreference,omitempty"`

	//
	// If included and set to <code>true</code>, the <strong>OverrideGSPServiceWithIntlServicePreference</strong> field is returned. A returned value of <code>true</code> indicates that for the seller's listings that specify an international shipping service for any Global Shipping-eligible country, the specified service will take precedence and be the listing's default international shipping option for buyers in that country, rather than the Global Shipping Program.
	// <br/><br/>
	// A returned value of <code>false</code> indicates that the Global Shipping program will take precedence over any international shipping service as the default option in Global Shipping-eligible listings for shipping to any Global Shipping-eligible country.
	//
	ShowOverrideGSPServiceWithIntlServicePreference bool `xml:"ShowOverrideGSPServiceWithIntlServicePreference,omitempty"`

	//
	// If included and set to <code>true</code>, the <strong>PickupDropoffSellerPreference</strong> field is returned. A returned value of <code>true</code> indicates that the seller's new listings will by default be eligible to be evaluated for the Click and Collect feature.
	// <br/><br/>
	// With the Click and Collect feature, a buyer can purchase certain items on eBay and collect them at a local store. Buyers are notified by eBay once their items are available. The Click and Collect feature is only available to large merchants on the eBay UK (site ID 3), eBay Australia (Site ID 15), and eBay Germany (Site ID 77) sites.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> The Click and Collect program no longer allows sellers to set the Click and Collect preference at the listing level.
	// </span>
	//
	ShowPickupDropoffPreferences bool `xml:"ShowPickupDropoffPreferences,omitempty"`

	//
	// If included and set to <code>true</code>, the seller's preferences related to the Out-of-Stock feature will be returned. This feature is set using the <a href="SetUserPreferences.html#Request.OutOfStockControlPreference">SetUserPreferences</a> call.
	//
	ShowOutOfStockControlPreference bool `xml:"ShowOutOfStockControlPreference,omitempty"`

	//
	// To determine whether a seller can offer eBay Plus in qualified listings, include this field and set it to <code>true</code>.
	// <br/><br/>
	// eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top Rated eBay sellers must opt in to eBay Plus, and can offer the program on a per-listing basis.
	// <br/><br/>
	// The <strong>eBayPLUSPreference</strong> container is returned in the response with information about each country where the seller is eligible to offer eBay Plus on listings (one <strong>eBayPLUSPreference</strong> container per country), as well as the seller's opt-in status and listing preference for each country.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Currently, eBay Plus is available only to buyers in Germany (DE).
	// </span>
	//
	ShoweBayPLUSPreference bool `xml:"ShoweBayPLUSPreference,omitempty"`
}

type GetUserPreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetUserPreferencesResponse"`

	*AbstractResponseType

	//
	// Container consisting of the seller's preference for receiving contact information for unsuccessful bidders. This container is returned when <b>ShowBidderNoticePreferences</b> is included and set to <code>true</code> in the request. This preference is only applicable for auction listings.
	//
	BidderNoticePreferences *BidderNoticePreferencesType `xml:"BidderNoticePreferences,omitempty"`

	//
	// Container consisting of the seller's Combined Invoice preferences. These preferences are used to allow Combined Invoice orders. This container is returned when <b>ShowCombinedPaymentPreferences</b> is included and set to <code>true</code> in the request.
	//
	//
	CombinedPaymentPreferences *CombinedPaymentPreferencesType `xml:"CombinedPaymentPreferences,omitempty"`

	//
	// This container is deprecated.
	//
	CrossPromotionPreferences *CrossPromotionPreferencesType `xml:"CrossPromotionPreferences,omitempty"`

	//
	// Container consisting of the seller's payment preferences. This container is returned when <b>ShowSellerPaymentPreferences</b> is included and set to <code>true</code> in the request.
	//
	SellerPaymentPreferences *SellerPaymentPreferencesType `xml:"SellerPaymentPreferences,omitempty"`

	//
	// Container consisting of the seller's preferences for displaying items on a buyer's Favorite Sellers' Items page or Favorite Sellers' Items digest. This container is returned when <b>ShowSellerFavoriteItemPreferences</b> is included and set to <code>true</code> in the request.
	//
	SellerFavoriteItemPreferences *SellerFavoriteItemPreferencesType `xml:"SellerFavoriteItemPreferences,omitempty"`

	//
	// Container consisting of the seller's preferences for the end-of-auction email sent to the winning bidder. This container is returned when <b>ShowEndOfAuctionEmailPreferences</b> is included and set to <code>true</code> in the request. These preferences are only applicable for auction listings.
	//
	EndOfAuctionEmailPreferences *EndOfAuctionEmailPreferencesType `xml:"EndOfAuctionEmailPreferences,omitempty"`

	//
	// Container consisting of the seller's preference for sending an email to the buyer with the shipment tracking number. This container is returned when <b>ShowEmailShipmentTrackingNumberPreference</b> is included and set to <code>true</code> in the request.
	//
	EmailShipmentTrackingNumberPreference bool `xml:"EmailShipmentTrackingNumberPreference,omitempty"`

	//
	// Container consisting of the seller's preference for requiring that the buyer supply a shipping phone number upon checkout. Some shipping carriers require the receiver's phone number. This container is returned when <b>ShowRequiredShipPhoneNumberPreference</b> is included and set to <code>true</code> in the request.
	//
	RequiredShipPhoneNumberPreference bool `xml:"RequiredShipPhoneNumberPreference,omitempty"`

	//
	// This field is deprecated.
	//
	ProStoresPreference *ProStoresCheckoutPreferenceType `xml:"ProStoresPreference,omitempty"`

	//
	// Container consisting of a seller's Unpaid Item Assistant preferences. The Unpaid Item Assistant automatically opens an Unpaid Item dispute on the behalf of the seller. This container is returned if <b>ShowUnpaidItemAssistancePreference</b> is included and set to <code>true</code> in the request.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// To return the list of buyers excluded from the Unpaid Item Assistant mechanism, the <b>ShowUnpaidItemAssistanceExclusionList</b> field must also be included and set to <code>true</code> in the request. Excluded buyers can be viewed in the <b>UnpaidItemAssistancePreferences.ExcludedUser</b> field.
	// </span>
	//
	UnpaidItemAssistancePreferences *UnpaidItemAssistancePreferencesType `xml:"UnpaidItemAssistancePreferences,omitempty"`

	//
	// Container consisting of a list of the seller's excluded shipping locations. The returned list mirrors the seller's current <a href="http://cgi5.ebay.com/ws/eBayISAPI.dll?ExcludeShippingList" target="_blank">Exclude shipping locations</a> list in My eBay's shipping preferences. An excluded shipping location in My eBay can be an entire geographical region (such as Middle East) or only an individual country (such as Iraq).
	// <br/><br/>
	// Sellers can override these default settings for an individual listing by using the <b>Item.ShippingDetails.ExcludeShipToLocation</b> field in the Add/Revise/Relist calls. This container is returned if the <b>ShowSellerExcludeShipToLocationPreference</b> field is included and set to <code>true</code> in the request.
	//
	SellerExcludeShipToLocationPreferences *SellerExcludeShipToLocationPreferencesType `xml:"SellerExcludeShipToLocationPreferences,omitempty"`

	//
	// Container consisting of a seller's preference for sending a purchase reminder email to buyers. This container is returned if the <b>ShowPurchaseReminderEmailPreferences</b> field is included and set to <code>true</code> in the request.
	//
	PurchaseReminderEmailPreferences *PurchaseReminderEmailPreferencesType `xml:"PurchaseReminderEmailPreferences,omitempty"`

	//
	// This field is deprecated along with third-party checkout.
	//
	SellerThirdPartyCheckoutDisabled bool `xml:"SellerThirdPartyCheckoutDisabled,omitempty"`

	//
	// Parent response container consisting of high-level information for all Business Policies defined for the user's account. This container is returned if <b>ShowSellerProfilePreferences</b> is included and set to <code>true</code> in the <b>GetUserPreferences</b> request (and one or more Business Policies are defined for the user's account).
	//
	SellerProfilePreferences *SellerProfilePreferencesType `xml:"SellerProfilePreferences,omitempty"`

	//
	// Container consisting of the <b>OptedIn</b> flag that indicates whether or not the seller has opted in to eBay Managed Returns. This container is only returned if <b>ShowSellerReturnPreferences</b> is included and set to <code>true</code> in the request.
	//
	SellerReturnPreferences *SellerReturnPreferencesType `xml:"SellerReturnPreferences,omitempty"`

	//
	// This flag indicates whether the seller has opted in to the Global Shipping Program and is able to offer global shipping to international buyers. Returned when <b>ShowGlobalShippingProgramPreference</b> is included and set to <code>true</code>.
	//
	OfferGlobalShippingProgramPreference bool `xml:"OfferGlobalShippingProgramPreference,omitempty"`

	//
	// Contains information about a seller's order cutoff time preferences for same-day shipping. If the seller specifies a value of '0' in <b>Item.DispatchTimeMax</b> to offer same-day handling when listing an item, the seller's shipping time commitment depends on the order cutoff time set for the listing site, as indicated by <b>DispatchCutoffTimePreference.CutoffTime</b>. Returned when <b>ShowDispatchCutoffTimePreferences</b> is included and set to <code>true</code>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> The order cutoff is may not be accurate for sellers who have opted into the Handling Time Option of eBay Guaranteed Delivery, as this field only shows a single order cutoff time, but with the Handling Time Option, a seller can set a different order cutoff time for each business day. Currently, eBay Guaranteed Delivery is only available in the US.</span>
	// <br>
	//
	DispatchCutoffTimePreference *DispatchCutoffTimePreferencesType `xml:"DispatchCutoffTimePreference,omitempty"`

	//
	// If the <b>ShowGlobalShippingProgramListingPreference</b> field is submitted and set to <code>true</code>, this flag is returned. A returned value of <code>true</code> indicates that the seller's new listings will enable the Global Shipping Program by default.
	//
	GlobalShippingProgramListingPreference bool `xml:"GlobalShippingProgramListingPreference,omitempty"`

	//
	// If the <b>ShowOverrideGSPServiceWithIntlServicePreference</b> field is submitted and set to <code>true</code>, this flag is returned. A returned value of <code>true</code> indicates that for the seller's listings that specify an international shipping service for any Global Shipping-eligible country, the specified service will take precedence and be the listing's default international shipping option for buyers in that country, rather than the Global Shipping Program.
	// <br/><br/>
	// A returned value of <code>false</code> indicates that the Global Shipping program will take precedence over any international shipping service as the default option in Global Shipping-eligible listings for shipping to any Global Shipping-eligible country.
	//
	OverrideGSPServiceWithIntlServicePreference bool `xml:"OverrideGSPServiceWithIntlServicePreference,omitempty"`

	//
	// This boolean field is returned if the <b>ShowPickupDropoffPreferences</b> field is included and set to <code>true</code> in the request. This field will be returned as <code>true</code> if the seller has enabled the Click and Collect feature at the account level. All of the seller's new listings will by default be eligible to be evaluated for the Click and Collect feature. With the Click and Collect feature, a buyer can purchase certain items on eBay and collect them at a local store. Buyers are notified by eBay once their items are available. The Click and Collect feature is only available to large merchants on the eBay UK (site ID 3), eBay Australia (Site ID 15), and eBay Germany (Site ID 77) sites.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> The Click and Collect program no longer allows sellers to set the Click and Collect preference at the listing level.
	// </span>
	//
	PickupDropoffSellerPreference bool `xml:"PickupDropoffSellerPreference,omitempty"`

	//
	// This boolean field is returned if the <b>ShowOutOfStockControlPreference</b> field is included and set to <code>true</code> in the request. This field will be returned as <code>true</code> if the seller has set
	// <a href="SetUserPreferences.html#Request.OutOfStockControlPreference">SetUserPreferences.OutOfStockControlPreference</a> to <code>true</code>.
	//
	OutOfStockControlPreference bool `xml:"OutOfStockControlPreference,omitempty"`

	//
	// Contains information about each country where the seller is eligible to offer eBay Plus on listings (one <strong>eBayPLUSPreference</strong> container per country), as well as the seller's opt-in status and listing preference for each country.
	// <br/><br/>
	// eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top Rated eBay sellers must opt in to eBay Plus to offer the program on a per-listing basis.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Currently, eBay Plus is available only to buyers in Germany (DE).
	// </span>
	//
	EBayPLUSPreference []*EBayPLUSPreferenceType `xml:"eBayPLUSPreference,omitempty"`
}

type GetVeROReasonCodeDetailsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetVeROReasonCodeDetailsRequest"`

	*AbstractRequestType

	//
	// Unique identifier for a reason code. If this <strong>ReasonCodeID</strong> field is passed in, only the details related to this <strong>ReasonCodeID</strong> will be returned. If no reason code is specified, all reason codes are returned.
	//
	ReasonCodeID int64 `xml:"ReasonCodeID,omitempty"`

	//
	// Set to true to retrieve reason codes for all sites. If not specified, reason codes are returned for the site specified in the request header only. If a <strong>ReasonCodeID</strong> value is specified, this parameter is ignored.
	//
	ReturnAllSites bool `xml:"ReturnAllSites,omitempty"`
}

type GetVeROReasonCodeDetailsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetVeROReasonCodeDetailsResponse"`

	*AbstractResponseType

	//
	// This container consists of one or more VeRO Program copyright/intellectual property infringement violation types for one or more eBay sites.
	//
	VeROReasonCodeDetails *VeROReasonCodeDetailsType `xml:"VeROReasonCodeDetails,omitempty"`
}

type GetVeROReportStatusRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetVeROReportStatusRequest"`

	*AbstractRequestType

	//
	// Packet identifier associated with the reported items for which you want to
	// retrieve status. By default, reported item details are not returned when
	// you specify the packet ID in the request. Applies only to items reported
	// with the <strong>VeROReportItems</strong> call.
	//
	VeROReportPacketID int64 `xml:"VeROReportPacketID,omitempty"`

	//
	// Unique identifier for an eBay listing reported for alleged infringement. Applies to items reported with the <strong>VeROReportItems</strong> call or by other means (e.g., through the Web flow).
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Set to true to return reported item details when you specify <strong>VeROReportPacketID</strong> in the request.
	//
	IncludeReportedItemDetails bool `xml:"IncludeReportedItemDetails,omitempty"`

	//
	// Limits returned items to only those that were submited on or after the
	// date-time specified. If specified, TimeTo must also be specified.
	// Express the date-time in the format YYYY-MM-DD HH:MM:SS, and in GMT.
	// (For information on how to convert between your local time zone
	// and GMT, see Time Values Note.) Applies to items reported with
	// VeROReportItems or by other means (e.g., through the web flow).
	// Infringement reporting data is maintained for two years after the date of
	// submission.
	// This field is ignored if <strong>VeROReportPacketID</strong> or <strong>ItemID</strong> is specified.
	//
	TimeFrom time.Time `xml:"TimeFrom,omitempty"`

	//
	// Limits returned items to only those that were submited on or before the
	// date-time specified. If specified, TimeFrom must also be specified.
	// Express date-time in the format YYYY-MM-DD HH:MM:SS, and in GMT.
	// (For information on how to convert between your local time zone
	// and GMT, see Time Values Note.) Applies to items reported with
	// VeROReportItems or by other means (e.g., through the web flow).
	// Infringement reporting data is maintained for two years after the date of
	// submission.
	// This field is ignored if <strong>VeROReportPacketID</strong> or <strong>ItemID</strong> is specified.
	//
	TimeTo time.Time `xml:"TimeTo,omitempty"`

	//
	// Contains the data controlling the pagination of the returned values: how
	// many items are returned per page of data (per call) and the number of the
	// page to return with the current call.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`
}

type GetVeROReportStatusResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GetVeROReportStatusResponse"`

	*AbstractResponseType

	//
	// Contains information regarding the pagination of data (if pagination is
	// used), including total number of pages and total number of entries.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`

	//
	// If true, there are more items yet to be retrieved. Additional
	// calls with higher page numbers or more items per page must
	// be made to retrieve these items. Not returned if no items match the
	// request.
	//
	HasMoreItems bool `xml:"HasMoreItems,omitempty"`

	//
	// Indicates the maximum number of Reported Item objects that can be returned in any given call.
	// <br/>
	//
	ItemsPerPage int32 `xml:"ItemsPerPage,omitempty"`

	//
	// Indicates the page of data returned by the current call. For instance,
	// for the first set of items can be returned, this field has a value of
	// one.
	// <br/>
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`

	//
	// The packet ID for status being returned.
	//
	VeROReportPacketID int64 `xml:"VeROReportPacketID,omitempty"`

	//
	// Status of the packet.
	//
	VeROReportPacketStatus *VeROReportPacketStatusCodeType `xml:"VeROReportPacketStatus,omitempty"`

	//
	// This container of one or more reported items that match the input criteria in the call request. Returns empty if no items are available that match the request.
	//
	ReportedItemDetails *VeROReportedItemDetailsType `xml:"ReportedItemDetails,omitempty"`
}

type GeteBayDetailsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayDetailsRequest"`

	*AbstractRequestType

	//
	// One or more <b>DetailName</b> fields may be used to control the the type of metadata that is returned in the response. If no <b>DetailName</b> fields are used, all metadata will be returned in the response. It is a good idea to familiarize yourself with the metadata that can be returned with <b>GeteBayDetails</b> by reading through the enumeration values in <a href="types/DetailNameCodeType.html">DetailNameCodeType</a>.
	//
	DetailName []*DetailNameCodeType `xml:"DetailName,omitempty"`
}

type GeteBayDetailsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayDetailsResponse"`

	*AbstractResponseType

	//
	// Lists the country code and associated name of the countries supported by
	// the eBay system, regardless of the site specified in the request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>CountryDetails</b> is included as a <b>DetailName</b> filter in the request, or if no <b>DetailName</b> filters are used in the request.
	// </span>
	//
	CountryDetails []*CountryDetailsType `xml:"CountryDetails,omitempty"`

	//
	// Lists the currencies supported by the eBay system, regardless of the site
	// specified in the request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>CurrencyDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b> filters are
	// used in the request.
	// </span>
	//
	CurrencyDetails []*CurrencyDetailsType `xml:"CurrencyDetails,omitempty"`

	//
	// A dispatch time specifies the maximum number of business days a seller commits to for shipping an item to domestic buyers after receiving a cleared payment. Returns all dispatch times in the system, regardless of the site specified in the request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>DispatchTimeMaxDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	DispatchTimeMaxDetails []*DispatchTimeMaxDetailsType `xml:"DispatchTimeMaxDetails,omitempty"`

	//
	// Although the supported payment methods for the specified eBay site are returned, it is recommended that the seller use <b>GetCategoryFeatures</b> instead, and pass in <b>PaymentMethods</b> as a <b>FeatureID</b> value in the request.
	//
	PaymentOptionDetails []*PaymentOptionDetailsType `xml:"PaymentOptionDetails,omitempty"`

	//
	// Lists the cities and other domestic regions for the specified site's country.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>RegionDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b> filters are
	// used in the request.
	// </span>
	//
	RegionDetails []*RegionDetailsType `xml:"RegionDetails,omitempty"`

	//
	// Lists the worldwide regions that can be set as shipping locations from the specified eBay site.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ShippingLocationDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ShippingLocationDetails []*ShippingLocationDetailsType `xml:"ShippingLocationDetails,omitempty"`

	//
	// Lists the shipping services supported by the specified eBay site. Returns only the shipping services that are applicable to the site specified in the request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ShippingServiceDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ShippingServiceDetails []*ShippingServiceDetailsType `xml:"ShippingServiceDetails,omitempty"`

	//
	// Lists all available eBay sites and their associated <b>SiteID</b> numbers.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>SiteDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	SiteDetails []*SiteDetailsType `xml:"SiteDetails,omitempty"`

	//
	// Details the different tax jurisdictions or tax regions applicable to the
	// site specified in the request. Note that tax jurisdictions are only applicable to the following eBay marketplaces: eBay US (Site ID 0), eBay US Motors (Site ID 100), eBay Canada (Site ID 2), and eBay Canada (French) (Site ID 210). An empty response will be returned for any other Site ID that is passed in the HTTP header.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>TaxJurisdiction</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	TaxJurisdiction []*TaxJurisdictionType `xml:"TaxJurisdiction,omitempty"`

	//
	// Lists eBay URLs that are applicable to the site specified in the request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>URLDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	URLDetails []*URLDetailsType `xml:"URLDetails,omitempty"`

	//
	// Lists the details of the time zones supported by the eBay system.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>TimeZoneDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	TimeZoneDetails []*TimeZoneDetailsType `xml:"TimeZoneDetails,omitempty"`

	//
	// Lists the site's maximum thresholds for specifying Item Specifics.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ItemSpecificDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ItemSpecificDetails []*ItemSpecificDetailsType `xml:"ItemSpecificDetails,omitempty"`

	//
	// Units of measurement are no longer returned in GeteBayDetails, so this container is no longer applicable.
	//
	UnitOfMeasurementDetails []*UnitOfMeasurementDetailsType `xml:"UnitOfMeasurementDetails,omitempty"`

	//
	// Lists the worldwide regions and individual countries that can be set as shipping locations from the specified eBay site.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>RegionOfOriginDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	RegionOfOriginDetails []*RegionOfOriginDetailsType `xml:"RegionOfOriginDetails,omitempty"`

	//
	// Lists the various shipping packages supported by the specified site.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ShippingPackageDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ShippingPackageDetails []*ShippingPackageDetailsType `xml:"ShippingPackageDetails,omitempty"`

	//
	// Lists the shipping carriers supported by the specified site.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ShippingCarrierDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ShippingCarrierDetails []*ShippingCarrierDetailsType `xml:"ShippingCarrierDetails,omitempty"`

	//
	// Lists the supported values that may be used for return policies on the specified eBay site, such as the return period, supported restocking fees, and refund options.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ReturnPolicyDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ReturnPolicyDetails *ReturnPolicyDetailsType `xml:"ReturnPolicyDetails,omitempty"`

	//
	// Lists the international return policies supported by the eBay marketplace specified in the request, such as the return periods supported by the marketplace.
	//
	InternationalReturnPolicyDetails *ReturnPolicyDetailsType `xml:"InternationalReturnPolicyDetails,omitempty"`

	//
	// Lists the minimum starting prices for the supported types of eBay listings.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ListingStartPriceDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ListingStartPriceDetails []*ListingStartPriceDetailsType `xml:"ListingStartPriceDetails,omitempty"`

	//
	// Lists the threshold values that can be passed in through the <b>BuyerRequirementDetails</b> container in the Add/Revise/Relist API calls. Buyer Requirements allow the seller to block buyers who have unpaid item defects, policy violations, low Feedback scores, and/or other undesirable qualities/statistics. Buyer Requirements are set at the seller's account level, but by using a  <b>BuyerRequirementDetails</b> container in an Add/Revise/Relist API call, the values in that container will override values set at the account level.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>BuyerRequirementDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	BuyerRequirementDetails []*SiteBuyerRequirementDetailsType `xml:"BuyerRequirementDetails,omitempty"`

	//
	// Details the listing features available for the eBay site specified in the request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ListingFeatureDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ListingFeatureDetails []*ListingFeatureDetailsType `xml:"ListingFeatureDetails,omitempty"`

	//
	// Site-level validation rules for multi-variation listings (for example, the
	// maximum number of variations per listing). Use <b>GetCategoryFeatures</b> to
	// determine which categories on a site support variations. Use
	// <b>GetCategorySpecifics</b> for rules related to recommended or required variation
	// specifics.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>VariationDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	VariationDetails *VariationDetailsType `xml:"VariationDetails,omitempty"`

	//
	// Lists the locations supported by the <b>ExcludeShipToLocation</b> feature. These are
	// locations that a seller can list as areas where they will not ship an item.
	//
	ExcludeShippingLocationDetails []*ExcludeShippingLocationDetailsType `xml:"ExcludeShippingLocationDetails,omitempty"`

	//
	// The time of the most recent modification to any feature detail. If specific
	// feature details are passed in the request, gives the most recent modification time
	// of those feature details.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// Details the recoupment policies for the site specified in the request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>RecoupmentPolicyDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	RecoupmentPolicyDetails []*RecoupmentPolicyDetailsType `xml:"RecoupmentPolicyDetails,omitempty"`

	//
	// A shipping service category supported for the site.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ShippingCategoryDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	// Each shipping service supported for a site is automatically categorized by eBay into one of the
	// shipping categories available for that site depending on how the shipping service shipping time
	// aligns with the shipping times specified by eBay for each category.
	// <br><br>
	// Notice that you cannot specify a <b>ShippingCategory</b>
	// as an input to any API call - eBay does this categorizing automatically. <b>ShippingCategory</b> is read-only data
	// that is returned in the <b>ShippingServiceDetails</b> container. One possible use of this data is to segregate shipping
	// services by <b>ShippingCategory</b> in a pick list. (For an example of this, see the Services pulldown menu in the
	// Give buyers shipping details form in the eBay Sell Your Item flow.)
	// <br><br>
	// One way to populate the picklist would be to call <b>GeteBayDetails</b>
	// with <b>DetailName</b> set to <b>ShippingServiceDetails</b>.
	// Then sort these results by <b>ShippingCategory</b> and populate the picklist.
	//
	ShippingCategoryDetails []*ShippingCategoryDetailsType `xml:"ShippingCategoryDetails,omitempty"`

	//
	// The <b>ProductDetails.ProductIdentifierUnavailableText</b>
	// field contains the actual text that should be passed into the relevant
	// product identification fields (EAN, ISBN, UPC, MPN/Brand) if eBay is
	// prompting/expecting one of these fields in the call request, but the identifiers do not exist/apply for the product. The text will vary based on the listing site. This text should only be used if no product ID exists for the product. If a product identifier value does actually exist for a product, but the seller passes in 'Does not apply' text, that listing may get penalized in search.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This container is only returned if <b>ProductDetails</b> is included as a
	// <b>DetailName</b> filter in the request, or if no <b>DetailName</b>
	// filters are used in the request.
	// </span>
	//
	ProductDetails *ProductDetailsType `xml:"ProductDetails,omitempty"`
}

type GeteBayOfficialTimeRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayOfficialTimeRequest"`

	*AbstractRequestType
}

type GeteBayOfficialTimeResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents GeteBayOfficialTimeResponse"`

	*AbstractResponseType
}

type LeaveFeedbackRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents LeaveFeedbackRequest"`

	*AbstractRequestType

	//
	// Unique identifier for an eBay listing. A listing can have multiple
	// order line items, but only one <b>ItemID</b>. Unless an
	// <b>OrderLineItemID</b> is specified in the <b>LeaveFeedback</b> request, the <b>ItemID</b> is
	// required along with the <b>TargetUser</b> to identify an order line item
	// existing between the caller and the <b>TargetUser</b> that requires feedback. A
	// Feedback comment will be posted for this order line item. If there are
	// multiple order line items between the two order partners that still
	// require feedback, the <b>TransactionID</b> will also be required to isolate the
	// targeted order line item. Feedback cannot be left for order line items
	// with creation dates more than 60 days in the past.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Textual comment that explains, clarifies, or justifies the feedback
	// score specified in <b>CommentType</b>.
	//
	CommentText string `xml:"CommentText,omitempty"`

	//
	// Score for the Feedback being left. May be Positive, Neutral, or Negative.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// Sellers can not leave neutral or negative feedback for buyers. In addition, buyers can not leave neutral or negative feedback within 7 days from the completion of the order for active Power Sellers who have been on eBay for 12 months.
	// </span>
	//
	CommentType *CommentTypeCodeType `xml:"CommentType,omitempty"`

	//
	// Unique identifier for an eBay order line item. If there
	// are multiple order line items between the two order partners that still
	// require Feedback, the <b>TransactionID</b> is required along with the
	// corresponding <b>ItemID</b> and <b>TargetUser</b> to isolate the targeted order line
	// item. If an <b>OrderLineItemID</b> is included in the response to identify a
	// specific order line item, none of the preceding fields (<b>ItemID</b>,
	// <b>TransactionID</b>, <b>TargetUser</b>) are needed. Feedback cannot be left for order
	// line items with creation dates more than 60 days in the past.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// Specifies the recipient user about whom the Feedback is being left.
	//
	TargetUser *UserIDType `xml:"TargetUser,omitempty"`

	//
	// Container for detailed seller ratings (DSRs). If a buyer is providing DSRs, they are specified in this container. Sellers have access to the number of ratings they've received, as well as to the averages of the DSRs they've received in each DSR area (i.e., to the average of ratings in the item-description area, etc.).
	//
	SellerItemRatingDetailArray *ItemRatingDetailArrayType `xml:"SellerItemRatingDetailArray,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. If an <b>OrderLineItemID</b> is included in
	// the request, the <b>ItemID</b>, <b>TransactionID</b>, and <b>TargetUser</b> fields are not
	// required. Feedback cannot be left for order line items with creation
	// dates more than 60 days in the past.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`

	//
	// This field or the <b>ItemDeliveredWithinEDD</b> field should be included if it is the buyer leaving feedback for the seller. This field will inform eBay about whether or not the buyer received the order line item within the estimated delivery date, which is established once a buyer purchases or commits to buy an item.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> A new "Late shipment rate" metric became a new component of Seller Standards beginning in February 2016. On-time shipping means that the seller shipped the item before the "handling time" expired and/or the item was received by the buyer within the estimated delivery date window, which is established once the buyer pays for the order line item. Previously, a seller's account could be dinged just for getting a low rating for the "shippping time" Detailed Seller Rating. </span>
	//
	ItemArrivedWithinEDDType *ItemArrivedWithinEDDCodeType `xml:"ItemArrivedWithinEDDType,omitempty"`

	//
	// This field or the <b>ItemArrivedWithinEDDType</b> field should be included if it is the buyer leaving feedback for the seller. This field will inform eBay about whether or not the buyer received the order line item within the estimated delivery date window, which is established once a buyer purchases or commits to buy an item. The value of this field is set to <code>true</code> if the item did arrive within the estimated delivery date, or <code>false</code> if the item arrived past the estimated delivery date.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> A new "Late shipment rate" metric became a new component of Seller Standards beginning in February 2016. On-time shipping means that the seller shipped the item before the "handling time" expired and/or the item was received by the buyer within the estimated delivery date window, which is established once the buyer pays for the order line item. Previously, a seller's account could be dinged just for getting a low rating for the "shippping time" Detailed Seller Rating. </span>
	//
	ItemDeliveredWithinEDD bool `xml:"ItemDeliveredWithinEDD,omitempty"`
}

type LeaveFeedbackResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents LeaveFeedbackResponse"`

	*AbstractResponseType

	//
	// The unique identifier of the Feedback entry that has been submitted by the caller.
	//
	FeedbackID string `xml:"FeedbackID,omitempty"`
}

type MoveSellingManagerInventoryFolderRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents MoveSellingManagerInventoryFolderRequest"`

	*AbstractRequestType

	//
	// Unique ID of the Selling Manager Inventory folder that will be moved. A user can retrieve <b>FolderID</b> values by using <b>GetSellingManagerInventoryFolder</b>.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// Unique ID of the Selling Manager Inventory folder that will be the new parent folder of the Selling Manager Inventory folder specified in the <b>FolderID</b> field. A user can retrieve <b>FolderID</b> values by using <b>GetSellingManagerInventoryFolder</b>. If this field is omitted, the Selling Manager Inventory folder specified in the <b>FolderID</b> field will be moved to the root level.
	//
	NewParentFolderID int64 `xml:"NewParentFolderID,omitempty"`
}

type MoveSellingManagerInventoryFolderResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents MoveSellingManagerInventoryFolderResponse"`

	*AbstractResponseType
}

type PlaceOfferRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents PlaceOfferRequest"`

	*AbstractRequestType

	//
	// This container is used to specifies the type of offer being made for the listing specified in the <b>ItemID</b> field. The <b>Offer.Action</b> is used to set the action that is being taken on the listing.
	//
	Offer *OfferType `xml:"Offer,omitempty"`

	//
	// Unique identifier that identifies the listing for which the action is being submitted.
	// <br><br>
	// For a multiple-variation listing, you must also identify the specific variation within that listing using the <b>VariationSpecifics</b> container.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// If a warning message is generated when the call is made, this <b>BlockOnWarning</b> will block the bid/buy action if set to <code>true</code>. If <b>BlockOnWarning</b>
	// is <code>false</code> or omitted, the bid/buy action is allowed, regardless of whether or not a warning message occurs.
	// <br>
	//
	BlockOnWarning bool `xml:"BlockOnWarning,omitempty"`

	//
	// Container for affiliate-related tags, which enable the tracking of user
	// activity. If you include the <b>AffiliateTrackingDetails</b> container in your <b>PlaceOffer</b> call, then
	// it is possible to receive affiliate commissions based on calls made by your
	// application. (See the <a href=
	// "http://www.ebaypartnernetwork.com/" target="_blank">eBay Partner Network</a>
	// for information about commissions.) Please note that affiliate tracking is not
	// available in the Sandbox environment, and that affiliate tracking is not
	// available when you make a Best Offer.
	//
	AffiliateTrackingDetails *AffiliateTrackingDetailsType `xml:"AffiliateTrackingDetails,omitempty"`

	//
	// This container is used to identify a specific variation within a multiple-variation listing identified by the <b>ItemID</b> value. This container is required when attempting to perform an action on a multiple-variation listing.
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`
}

type PlaceOfferResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents PlaceOfferResponse"`

	*AbstractResponseType

	//
	// This container indicates the current bidding/purchase state of the order line item regarding the offer extended using <b>PlaceOffer</b>. The fields that are returned under this container will depend on the attempted action and the results of that action.
	//
	SellingStatus *SellingStatusType `xml:"SellingStatus,omitempty"`

	//
	// Unique identifier for an eBay order line item. The
	// <b>TransactionID</b> field is only returned if the <b>Offer.Action</b> field was set
	// to <b>Purchase</b> in the input and the purchase was successful. A Purchase
	// action in <b>PlaceOffer</b> can be used for a fixed-price listing, or for an
	// auction listing where the Buy It Now option is available.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// Container consisting of the status for a Best Offer. This container is
	// only returned if applicable based on the listing and the value set for
	// <b>Offer.Action</b> field in the request.
	//
	BestOffer *BestOfferType `xml:"BestOffer,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. The <b>OrderLineItemID</b> field is only
	// returned if the <b>Offer.Action</b> field is set to <b>Purchase</b> in the input and
	// the purchase is successful. A Purchase action in <b>PlaceOffer</b> can be used
	// for a fixed-price listing, or for an auction listing where the Buy It
	// Now option is available.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type RelistFixedPriceItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RelistFixedPriceItemRequest"`

	*AbstractRequestType

	//
	// The <b>Item</b> container is used to configure the item that will be relisted. If the seller plans to relist the item with no changes, the only field under the <b>Item</b> container that is required is the <b>ItemID</b> field. In the <b>ItemID</b> field, the seller specifies the item that will be relisted. If the seller wishes to change anything else for the listing, the seller should include this field in the call request and give it a new value.
	// <br/><br/>
	// If the seller wants to delete one or more optional settings in the listing, the seller should use the <b>DeletedField</b> tag.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Specifies the name of the field to delete from a listing.
	// See <a href="http://developer.ebay.com/Devzone/guides/ebayfeatures/Development/Listings-RelistingItems.html">Relisting Items</a> for rules on deleting values when relisting items.
	// Also see the relevant field descriptions to determine when to use <b>DeletedField</b> (and potential consequences).
	// The request can contain zero, one, or many instances of <b>DeletedField</b> (one for each field to be deleted).
	// <br>
	// <br>
	// Some data (such as <b>Variation</b> nodes within <b>Variations</b>)
	// can't be deleted by using a <b>DeletedField</b> tag. See the relevant field
	// descriptions for how to delete such data.
	// <br>
	// <br>
	// Case-sensitivity must be taken into account when using a <b>DeletedField</b> tag to delete a field. The value passed into a <b>DeletedField</b> tag must either match the case of the schema element names in the full field path (Item.PictureDetails.GalleryURL), or the initial letter of each schema element name in the full field path must be lowercase (item.pictureDetails.galleryURL).
	// Do not change the case of letters in the middle of a field name.
	// For example, item.picturedetails.galleryUrl is not allowed.<br><br>
	// To delete a listing enhancement like 'BoldTitle', specify the value you are deleting;
	// for example, Item.ListingEnhancement[BoldTitle].
	//
	DeletedField []string `xml:"DeletedField,omitempty"`
}

type RelistFixedPriceItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RelistFixedPriceItemResponse"`

	*AbstractResponseType

	//
	// The unique identifier for the relisted item. Note that the <b>ItemID</b> value changes when a listing is relisted, so this will not be the same <b>ItemID</b> value that was passed in the call request.
	// <br/><br/>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The seller-defined SKU value for the new listing (if a SKU value exists for the item).
	// <br/><br/>
	// Note that variation-level SKU values will not be returned if a multiple-variation listing was relisted. The seller would have to make a <b>GetItem</b> call to get variation-level SKU values.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// This container consists of the estimated listing fees for the relisted item. Each type of fee is returned even if it is not appplicable (has a value of <code>0.0</code>. The Final Value Fee (FVF) is not in this container, as this value cannot be determined until a sale is made.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// This timestamp indicates the date and time when the relisted item became active on the eBay site.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This timestamp indicates the date and time when the relisted item is scheduled to end on the eBay site. This date/time is calculated by using the <b>StartTime</b> and the the listing duration.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// Unique identifier of the primary eBay category in which the item was relisted. This field is only returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.PrimaryCategory</b> field was mapped to a new category ID by eBay. If the primary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/><br/>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary eBay category (if one was used) in which the item was relisted. This field is only returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.SecondaryCategory</b> field was mapped to a new category ID by eBay. If the secondary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/><br/>
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// This field is returned if an eBay special offer or promotion is applicable to the listing.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Provides a list of products recommended by eBay which match the item information
	// provided by the seller.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b>
	// flag was included and set to 'true' in the <b>RelistFixedPriceItem</b> request, and if
	// at least one listing recommendation exists for the newly relisted item. If one or more listing recommendations are returned, it will be at the seller's discretion about whether to revise the item based on eBay's listing recommendation(s).
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type RelistItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RelistItemRequest"`

	*AbstractRequestType

	//
	// The <b>Item</b> container is used to configure the item that will be relisted. If the seller plans to relist the item with no changes, the only field under the <b>Item</b> container that is required is the <b>ItemID</b> field. In the <b>ItemID</b> field, the seller specifies the item that will be relisted. If the seller wishes to change anything else for the listing, the seller should include this field in the call request and give it a new value.
	// <br/><br/>
	// If the seller wants to delete one or more optional settings in the listing, the seller should use the <b>DeletedField</b> tag.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Specifies the name of the field to delete from a listing.
	// See <a href="http://developer.ebay.com/Devzone/guides/ebayfeatures/Development/Listings-RelistingItems.html">Relisting Items</a> for rules on deleting values when relisting items.
	// Also see the relevant field descriptions to determine when to use <b>DeletedField</b> (and potential consequences).
	// The request can contain zero, one, or many instances of <b>DeletedField</b> (one for each field to be deleted).
	// <br><br>
	// Case-sensitivity must be taken into account when using a <b>DeletedField</b> tag to delete a field. The value passed into a <b>DeletedField</b> tag must either match the case of the schema element names in the full field path (Item.PictureDetails.GalleryURL), or the initial letter of each schema element name in the full field path must be  lowercase (item.pictureDetails.galleryURL).
	// Do not change the case of letters in the middle of a field name.
	// For example, item.picturedetails.galleryUrl is not allowed.<br><br>
	// To delete a listing enhancement like 'BoldTitle', specify the value you are deleting;
	// for example, Item.ListingEnhancement[BoldTitle].
	//
	DeletedField []string `xml:"DeletedField,omitempty"`
}

type RelistItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RelistItemResponse"`

	*AbstractResponseType

	//
	// The unique identifier for the relisted item. Note that the <b>ItemID</b> value changes when a listing is relisted, so this will not be the same <b>ItemID</b> value that was passed in the call request.
	// <br/><br/>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This container consists of the estimated listing fees for the relisted item. Each type of fee is returned even if it is not appplicable (has a value of <code>0.0</code>. The Final Value Fee (FVF) is not in this container, as this value cannot be determined until a sale is made.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// This timestamp indicates the date and time when the relisted item became active on the eBay site.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This timestamp indicates the date and time when the relisted item is scheduled to end on the eBay site. This date/time is calculated by using the <b>StartTime</b> and the the listing duration.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// Unique identifier of the primary eBay category in which the item was relisted. This field is only returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.PrimaryCategory</b> field was mapped to a new category ID by eBay. If the primary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/><br/>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary eBay category (if one was used) in which the item was relisted. This field is only returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.SecondaryCategory</b> field was mapped to a new category ID by eBay. If the secondary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/><br/>
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// This field is returned if an eBay special offer or promotion is applicable to the listing.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Provides a list of products recommended by eBay which match the item information provided by the seller.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b>
	// flag was included and set to 'true' in the <b>RelistItem</b> request, and if
	// at least one listing recommendation exists for the newly relisted item. If
	// one or more listing recommendations are returned, it will be at the seller's
	// discretion about whether to revise the item based on eBay's listing
	// recommendation(s).
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type RemoveFromWatchListRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RemoveFromWatchListRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the item to be removed from the
	// user's Watch List. Multiple <b>ItemID</b> fields can be specified in the same request, but note that the <b>RemoveAllItems</b> field or <b>VariationKey</b> container cannot be specified if one or more <b>ItemID</b> fields are used.
	// <br/><br/>
	//
	ItemID []*ItemIDType `xml:"ItemID,omitempty"`

	//
	// If this field is included and set to <code>true</code>, then all the items in the user's
	// Watch List are removed. Note that if the <b>RemoveAllItems</b> field is specified, one or more <b>ItemID</b> fields or the <b>VariationKey</b> cannot be used.
	//
	RemoveAllItems bool `xml:"RemoveAllItems,omitempty"`

	//
	// This container is used if the user want to remove one or more product variations (within a multiple-variation listing) from the Watch List. Note that if the <b>VariationKey</b> container is used, one or more <b>ItemID</b> fields or the <b>RemoveAllItems</b> field cannot be used.
	//
	VariationKey []*VariationKeyType `xml:"VariationKey,omitempty"`
}

type RemoveFromWatchListResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RemoveFromWatchListResponse"`

	*AbstractResponseType

	//
	// The current number of items in the user's Watch List (considering that the items specified in the call request were successfully removed).
	//
	WatchListCount int32 `xml:"WatchListCount,omitempty"`

	//
	// The maximum number of items allowed in the user's Watch List. Currently this value is 300, and is the same for all sites and all users.
	//
	WatchListMaximum int32 `xml:"WatchListMaximum,omitempty"`
}

type RespondToBestOfferRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RespondToBestOfferRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the listing to which the seller is responding to a Best Offer.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The unique identifier of a buyer's Best Offer for the order line item. This ID is created once the buyer makes a Best Offer. It is possible that a seller will get multiple Best Offers for an order line item, and if that seller would like to decline multiple/all of the Best Offers with one <b>RespondToBestOffer</b> call, the seller would pass in each of these identifiers in a separate <b>BestOfferID</b> field. However, the seller can only accept or counter offer one Best Offer at a time.
	//
	BestOfferID []*BestOfferIDType `xml:"BestOfferID,omitempty"`

	//
	// The enumeration value that the seller passes in to this field will control whether the seller accepts or make a counter offer to a single buyer's Best Offer, or declines one or more buyers' Best Offers. A seller can decline multiple Best Offers with one call, but the seller cannot accept or counter offer multiple Best Offers with one call.
	//
	Action *BestOfferActionCodeType `xml:"Action,omitempty"`

	//
	// This optional text field allows the seller to provide more details to the buyer about the action being taken against the buyer's Best Offer.
	// <br>
	//
	SellerResponse string `xml:"SellerResponse,omitempty"`

	//
	// The seller inserts counter offer price into this field. This field is conditionally required and only applicable when the <b>Action</b> value is set to <code>Counter</code>, The counter offer price cannot exceed the Buy It Now price for a single quantity item. However, the dollar value in this field may exceed the Buy It Now price if the buyer is requesting or the seller is offering multiple quantity of the item (in a multiple-quantity listing). The quantity of the item must be specified in the <b>CounterOfferQuantity</b> field if the seller is making a counter offer.
	//
	CounterOfferPrice *AmountType `xml:"CounterOfferPrice,omitempty"`

	//
	// The seller inserts the quantity of items in the counter offer into this field. This field is conditionally required and only applicable when the <b>Action</b> value is set to <code>Counter</code>, The counter offer price must be specified in the <b>CounterOfferPrice</b> field if the seller is making a counter offer. This price should reflect the quantity of items in the counter offer. So, if the seller's counter offer 'unit' price is 15 dollars, and the item quantity is '2', the dollar value passed into the <b>CounterOfferPrice</b> field would be <code>30.0</code>.
	//
	CounterOfferQuantity int32 `xml:"CounterOfferQuantity,omitempty"`
}

type RespondToBestOfferResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RespondToBestOfferResponse"`

	*AbstractResponseType

	//
	// The <b>BestOffer.CallStatus</b> value returned in this container will indicate whether or not the action specified in the call request (accept, decline, or counter offer) was successful. The accept and counter offer actions can only be applied toward a single Best Offer. However, multiple Best Offers on a listing can be declined with one call. All Best Offers must be successfully declined with the <b>RespondToBestOffer</b> call for the <b> BestOffer.CallStatus</b> value to be <code>Success</code>.
	//
	RespondToBestOffer *BestOfferArrayType `xml:"RespondToBestOffer,omitempty"`
}

type RespondToFeedbackRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RespondToFeedbackRequest"`

	*AbstractRequestType

	//
	// A unique identifier for a Feedback record. Buying and selling partners
	// leave feedback for one another after the completion of an order.
	// Feedback is left at the order line item level, so a
	// Feedback comment for each order line item in a Combined Payment order is
	// expected from the buyer and seller. A unique <b>FeedbackID</b> is created
	// whenever a buyer leaves feedback for a seller, and vice versa. A
	// <b>FeedbackID</b> is created by eBay when feedback is left through the eBay
	// site, or through the <b>LeaveFeedback</b> call. <b>FeedbackIDs</b> can be retrieved
	// with the <b>GetFeedback</b> call. In the <b>RespondToFeedback</b> call, <b>FeedbackID</b> can
	// be used as an input filter to respond to a specific Feedback comment.
	// Since Feedback is always linked to a unique order line item, an
	// <b>ItemID</b>/<b>TransactionID</b> pair or an <b>OrderLineItemID</b> can also be used to
	// respond to a Feedback comment.
	//
	FeedbackID string `xml:"FeedbackID,omitempty"`

	//
	// Unique identifier for the eBay listing to which the user will be responding to Feedback. A listing can have multiple
	// order line items, but only one <b>ItemID</b> value. An <b>ItemID</b> can be
	// paired up with a corresponding <b>TransactionID</b> and used as an input filter
	// to respond to a Feedback comment in the <b>RespondToFeedback</b> call. Unless
	// the specific Feedback record is identified by a <b>FeedbackID</b> or an
	// <b>OrderLineItemID</b> in the request, an <b>ItemID</b>/<b>TransactionID</b> pair is
	// required.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. A
	// <b>TransactionID</b> can be paired up with its corresponding <b>ItemID</b> and used as
	// an input filter to respond to a Feedback comment in the
	// <b>RespondToFeedback</b> call. Unless the specific Feedback record is
	// identified by a <b>FeedbackID</b> or an <b>OrderLineItemID</b> in the request, an
	// <b>ItemID</b>/<b>TransactionID</b> pair is required.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// The eBay user ID of the caller's order partner. The caller is either
	// replyting to or following up on this user's Feedback comment.
	//
	TargetUserID *UserIDType `xml:"TargetUserID,omitempty"`

	//
	// Specifies whether the response is a reply or a follow-up to a Feedback
	// comment left by the user identified in the <b>TargetUserID</b> field.
	//
	ResponseType *FeedbackResponseCodeType `xml:"ResponseType,omitempty"`

	//
	// Textual comment that the user who is subject of feedback may leave in
	// response or rebuttal to the Feedback comment. Alternatively, when the
	// <b>ResponseType</b> is <b>FollowUp</b>, this value contains the text of the follow-up
	// comment.
	// <br>
	//
	ResponseText string `xml:"ResponseText,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. Since Feedback is always linked to a
	// unique order line item, an <b>OrderLineItemID</b> can be used to respond
	// to a Feedback comment.
	// <br><br>
	// Unless an <b>ItemID</b>/<b>TransactionID</b> pair or a <b>FeedbackID</b> is used to identify
	// a Feedback record, the <b>OrderLineItemID</b> must be specified.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type RespondToFeedbackResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RespondToFeedbackResponse"`

	*AbstractResponseType
}

type ReviseCheckoutStatusRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseCheckoutStatusRequest"`

	*AbstractRequestType

	//
	// Unique identifier for an eBay listing. A listing can have multiple order line items, but only one <b>ItemID</b> value. An <b>ItemID</b> can be paired up with a corresponding <b>TransactionID</b> and used as an input filter for <b>ReviseCheckoutStatus</b>. <br><br> Unless an <b>OrderLineItemID</b> is used to identify a single line item order, or the <b>OrderID</b> is used to identify a single or multiple line item (Combined Invoice) order, the <b>ItemID</b>/<b>TransactionID</b> pair must be specified. For a multiple line item (Combined Invoice) order, <b>OrderID</b> should be used. If <b>OrderID</b> or <b>OrderLineItemID</b> are specified, the <b>ItemID</b>/<b>TransactionID</b> pair is ignored if present in the same request.
	// <br/>
	// <br/>
	// It is also possible to identify a single line item order with a
	// <b>ItemID</b>/<b>BuyerID</b> combination, but this is not the most ideal approach since an error is returned if there are multiple order line items for that combination.
	// <br/>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. An order
	// line item is created once there is a commitment from a buyer to purchase
	// an item. Since an auction listing can only have one order line item
	// during the duration of the listing, the <b>TransactionID</b> for
	// auction listings is always <code>0</code>. Along with its corresponding <b>ItemID</b>, a
	// <b>TransactionID</b> is used and referenced during an order checkout flow and
	// after checkout has been completed. The <b>ItemID</b>/<b>TransactionID</b> pair can be
	// used as an input filter for <b>ReviseCheckoutStatus</b>.
	// <br><br>
	// Unless an <b>OrderLineItemID</b> is used to identify a single line item order,
	// or the <b>OrderID</b> is used to identify a single or multiple line item
	// (Combined Invoice) order, the <b>ItemID</b>/<b>TransactionID</b> pair must be
	// specified. For a multiple line item (Combined Invoice) order, <b>OrderID</b>
	// must be used. If <b>OrderID</b> or <b>OrderLineItemID</b> are specified, the
	// <b>ItemID</b>/<b>TransactionID</b> pair is ignored if present in the same request.
	// <br>
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// A unique identifier that identifies a single line item or multiple line
	// item (Combined Invoice) order.
	// <br><br>
	// For a single line item order, the <b>OrderID</b> value is identical to the
	// <b>OrderLineItemID</b> value that is generated upon creation of the order line
	// item. For a Combined Invoice order, the <b>OrderID</b> value is created by eBay
	// when the buyer or seller (sharing multiple, common order line items)
	// combines multiple order line items into a Combined Invoice order through
	// the eBay site. A Combined Invoice order can also be created by the
	// seller through the <b>AddOrder</b> call. The <b>OrderID</b> can be used as an input
	// filter for <b>ReviseCheckoutStatus</b>.
	// <br><br>
	// <b>OrderID</b> overrides an <b>OrderLineItemID</b> or <b>ItemID</b>/<b>TransactionID</b> pair if
	// these fields are also specified in the same request.
	//
	OrderID string `xml:"OrderID,omitempty"`

	//
	// The total amount paid by the buyer. For a US eBay Motors item,
	// <b>AmountPaid</b> is the total amount paid by the buyer for the deposit.
	// <b>AmountPaid</b> is optional if <b>CheckoutStatus</b> is Incomplete and required if it
	// is Complete.
	//
	AmountPaid *AmountType `xml:"AmountPaid,omitempty"`

	//
	// Payment method used by the buyer. This field is required if <b>
	// CheckoutStatus</b> is Complete and the payment method is a trusted
	// payment method other than PayPal. See eBay's
	// <a href="http://pages.ebay.com/help/policies/accepted-payments-policy.html">Accepted Payments Policy</a>.
	// If the payment method is PayPal, this field should not be used since only PayPal can set this field's
	// value to "PayPal". ReviseCheckoutStatus cannot be used for a non-trusted
	// payment method.
	// <b>Note:</b>Required or allowed payment methods vary by site and category.
	//
	PaymentMethodUsed *BuyerPaymentMethodCodeType `xml:"PaymentMethodUsed,omitempty"`

	//
	// This field is included and its value is set to <code>Complete</code> if the seller is using the <b>ReviseCheckoutStatus</b> call to mark the order as 'Paid' by including the <b>PaymentStatus</b> field and setting its value to <code>Paid</code>.
	//
	CheckoutStatus *CompleteStatusCodeType `xml:"CheckoutStatus,omitempty"`

	//
	// The shipping service selected by the buyer from among the shipping services offered by the seller (such as UPS Ground). For a list of valid values, call GeteBayDetails with DetailName set to ShippingServiceDetails. The ShippingServiceDetails.ValidForSellingFlow flag must also be present. Otherwise, that particular shipping service option is no longer valid and cannot be offered to buyers through a listing. <br/><br/> <span class="tablenote"> <strong>Note:</strong> <strong>ReviseCheckoutStatus</strong> is not available for the Global Shipping program; specifying <code>InternationalPriorityShipping</code> as a value for this field will produce an error. </span>
	//
	ShippingService string `xml:"ShippingService,omitempty"`

	//
	// An indicator of whether shipping costs were included in the
	// taxable amount.
	//
	ShippingIncludedInTax bool `xml:"ShippingIncludedInTax,omitempty"`

	//
	// This field is deprecated.
	//
	CheckoutMethod *CheckoutMethodCodeType `xml:"CheckoutMethod,omitempty"`

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	InsuranceType *InsuranceSelectedCodeType `xml:"InsuranceType,omitempty"`

	//
	// This field is used to mark the order as paid or awaiting payment in My eBay. If you specify 'Paid', My eBay displays an icon for each line item in the order to indicate that the order status is Paid. If you specify 'Pending', this indicates that the order is awaiting payment (some applications may use 'Pending' when the buyer has paid, but the funds have not yet been sent to the seller's financial institution).
	// <br>
	// <br>
	// <b>ReviseCheckoutStatus</b> cannot be used to update payment and checkout
	// status for a non-trusted payment method. See eBay's <a href="
	// http://pages.ebay.com/help/policies/accepted-payments-policy.html">
	// Accepted Payments Policy</a> for more information on trusted
	// payment methods. If the payment method is PayPal, this field should not
	// be used since PayPal automatically set this field's value to "Paid" upon
	// receiving the buyer's payment.
	//
	PaymentStatus *RCSPaymentStatusCodeType `xml:"PaymentStatus,omitempty"`

	//
	// Discount or charge agreed to by the buyer and seller. A positive value
	// indicates that the amount is an extra charge being paid to the seller by
	// the buyer. A negative value indicates that the amount is a discount given
	// to the buyer by the seller.
	//
	AdjustmentAmount *AmountType `xml:"AdjustmentAmount,omitempty"`

	//
	// For internal use only. Do not use.
	//
	ShippingAddress *AddressType `xml:"ShippingAddress,omitempty"`

	//
	// eBay user ID for the order's buyer. A single line item order can
	// actually be identified by a <b>BuyerID</b>/<b>ItemID</b> pair, but this approach is
	// not recommended since an error is returned if there are multiple
	// order line items for that combination. <b>BuyerID</b> is ignored if any other valid
	// filter or filter combination is used in the same request.
	//
	BuyerID string `xml:"BuyerID,omitempty"`

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	ShippingInsuranceCost *AmountType `xml:"ShippingInsuranceCost,omitempty"`

	//
	// The sales tax amount for the order. This field should be used if sales tax
	// was applied to the order.
	//
	SalesTax *AmountType `xml:"SalesTax,omitempty"`

	//
	// Amount of money paid for shipping.
	//
	ShippingCost *AmountType `xml:"ShippingCost,omitempty"`

	//
	// Not supported.
	//
	EncryptedID string `xml:"EncryptedID,omitempty"`

	//
	// This container is used if payment for the order occurred off of eBay, and the seller wants to pass in the external payment reference ID.
	//
	ExternalTransaction *ExternalTransactionType `xml:"ExternalTransaction,omitempty"`

	//
	// Not supported.
	//
	MultipleSellerPaymentID string `xml:"MultipleSellerPaymentID,omitempty"`

	//
	// This dollar value indicates the money due from the buyer upon delivery of the item.
	// <br><br>
	// This field should only be specified in the <b>ReviseCheckoutStatus</b> request if 'COD' (cash-on-delivery) was the payment method selected by the buyer and it is included as the <b>PaymentMethodUsed</b> value in the same request.
	//
	CODCost *AmountType `xml:"CODCost,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. For a single line item order, the
	// <b>OrderLineItemID</b> value can be passed into the <b>OrderID</b> field to revise the
	// checkout status of the order.
	// <br><br>
	// Unless an <b>ItemID</b>/<b>TransactionID</b> pair is used to identify a single line item order, or the <b>OrderID</b> is used to identify a single or multiple line item (Combined Invoice) order, the <b>OrderLineItemID</b> must be specified. For a multiple line item (Combined Invoice) order, <b>OrderID</b> should be used. If <b>OrderLineItemID</b> is specified, the <b>ItemID</b>/<b>TransactionID</b> pair are ignored if present in the same request.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type ReviseCheckoutStatusResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseCheckoutStatusResponse"`

	*AbstractResponseType
}

type ReviseFixedPriceItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseFixedPriceItemRequest"`

	*AbstractRequestType

	//
	// The <b>Item</b> container is used to make changes to the active listing. The seller must pass in the <b>ItemID</b> value for the listing that is being revised. For anything else that the seller wishes to change, such as quantity or price, the seller should include this field in the call request and give it a new value.
	// <br/><br/>
	// If the seller wants to delete one or more optional settings in the listing, the seller should use the <b>DeletedField</b> tag.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Specifies the name of a field to delete from a listing. The request can
	// contain zero, one, or many instances of <b>DeletedField</b> (one for each field
	// to be deleted). See the relevant field descriptions to determine when to
	// use <b>DeletedField</b> (and potential consequences).
	// <br><br>
	// You cannot delete required fields from a listing.
	// <br><br>
	// Some fields are optional when you first list an item (e.g.,
	// <b>SecondaryCategory</b>), but once they are set they cannot be deleted when you
	// revise an item. Some optional fields cannot be deleted if the item has
	// bids and/or ends within 12 hours. Some optional fields cannot be deleted
	// if other fields depend on them.
	// <br><br>
	// Some data (such as <b>Variation</b> nodes within the <b>Variations</b> container) can't be deleted by
	// using <b>DeletedField</b>. See the relevant field descriptions for how to delete
	// such data.
	// <br><br>
	// Use values that match the case of the
	// schema element names (<b>Item.PictureDetails.GalleryURL</b>) or make the initial
	// letter of each field name lowercase (<b>item.pictureDetails.galleryURL</b>).
	// However, do not change the case of letters in the middle of a field name.
	// For example, <b>item.picturedetails.galleryUrl</b> is not allowed.
	// <br><br>
	// To delete a listing enhancement like <b>BoldTitle</b>, specify the value you are
	// deleting in square brackets ("[ ]"); for example,
	// <b>Item.ListingEnhancement[BoldTitle]</b>.
	//
	DeletedField []string `xml:"DeletedField,omitempty"`
}

type ReviseFixedPriceItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseFixedPriceItemResponse"`

	*AbstractResponseType

	//
	// The unique identifier for the revised listing. Note that the <b>ItemID</b> value does not change when a listing is revised, so this will be the same <b>ItemID</b> value that was passed in the call request.
	// <br/><br/>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The seller-defined SKU value for the revised listing (if a SKU value exists for the item).
	// <br/><br/>
	// Note that variation-level SKU values will not be returned if a multiple-variation listing was revised. The seller would have to make a <b>GetItem</b> call to get variation-level SKU values.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// This timestamp indicates the date and time when the listing was created on the eBay site. This value doesn't change when a listing is revised.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This timestamp indicates the date and time when the revised item is scheduled to end on the eBay site. This date/time is calculated by using the <b>StartTime</b> and the the listing duration. This value doesn't change when a listing is revised.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This container consists of the estimated listing fees for the revised listing. Each type of fee is returned even if it is not appplicable (has a value of <code>0.0</code>. The Final Value Fee (FVF) is not in this container, as this value cannot be determined until a sale is made.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// Unique identifier of the primary eBay category for the revised listing. This field is returned if the primary category was changed with the revision, and the primary category can only be changed if a fixed-price listing has no sales, and the listing does not end within 12 hours.
	// <br/><br/>
	// This field can also be returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.PrimaryCategory</b> field was mapped to a new category ID by eBay. If the primary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary eBay category for the revised listing. This field is returned if the secondary category was changed with the revision, and the secondary category can only be changed if a fixed-price listing has no sales, and the listing does not end within 12 hours.
	// <br/><br/>
	// This field can also be returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.PrimaryCategory</b> field was mapped to a new category ID by eBay. If the primary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/>
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// This field is returned if an eBay special offer or promotion is applicable to the listing.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Provides a list of products recommended by eBay which match the item information provided by the seller.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b>
	// flag was included and set to 'true' in the <b>ReviseFixedPriceItem</b> request, and if
	// at least one listing recommendation exists for the listing about to be revised. If
	// one or more listing recommendations are returned, it will be at the seller's
	// discretion about whether to revise the item again based on eBay's listing
	// recommendation(s).
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type ReviseInventoryStatusRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseInventoryStatusRequest"`

	*AbstractRequestType

	//
	// One <b>InventoryStatus</b> container is required for each item or item variation that is being revised. Whether updating the price and/or quantity of a single-variation listing or a specific variation within a multiple-variation listing, the limit of items or item variations that can be modified with one call is four.
	//
	InventoryStatus []*InventoryStatusType `xml:"InventoryStatus,omitempty"`
}

type ReviseInventoryStatusResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseInventoryStatusResponse"`

	*AbstractResponseType

	//
	// One <b>InventoryStatus</b> container is returned for each item or item variation that was revised. Whether updating the price and/or quantity of a single-variation listing or a specific variation within a multiple-variation listing, the limit of items or item variations that can be modified with one call is four.
	// <br>
	// <br>
	// Note that all four elements of this container are returned even if these fields would not supplied in the call request. The <b>SKU</b> field is returned as an empty tag if it is not defined for a single-variation listing.
	//
	InventoryStatus []*InventoryStatusType `xml:"InventoryStatus,omitempty"`

	//
	// A <b>Fees</b> container is returned for each fixed-price listing that was modified with the <b>ReviseInventoryStatus</b> call. This container consists of the estimated listing fees for the revised listing, and the listing is identified in the <b>ItemID</b> field. Each type of fee is returned even if it is not appplicable (has a value of <code>0.0</code>. The Final Value Fee (FVF) is not in this container, as this value cannot be determined until a sale is made. Note that these fees are at the listing level, so if multiple variations within a multiple-variation listing were modified, the fees in this container would be cumulative totals, and would not single out the fees associated with each modified item variation.
	// <br>
	// <br>
	// Please note that since fees are returned at the listing level, it is possible that the response will include one <b>Fees</b> container and four <b>InventoryStatus</b> containers if you made revisions to four different item variations within the same multiple-variation listing.
	//
	Fees []*InventoryFeesType `xml:"Fees,omitempty"`
}

type ReviseItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseItemRequest"`

	*AbstractRequestType

	//
	// The <b>Item</b> container is used to make changes to the active listing. The seller must pass in the <b>ItemID</b> value for the listing that is being revised. For anything else that the seller wishes to change, such as quantity or price, the seller should include this field in the call request and give it a new value.
	// <br/><br/>
	// If the seller wants to delete one or more optional settings in the listing, the seller should use the <b>DeletedField</b> tag.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Specifies the name of a field to delete from a listing. The request can
	// contain zero, one, or many instances of <b>DeletedField</b> (one for each field
	// to be deleted). See the relevant field descriptions to determine when to
	// use <b>DeletedField</b> (and potential consequences).
	// <br><br>
	// You cannot delete required fields from a listing.
	// <br><br>
	// Some fields are optional when you first list an item (e.g.,
	// <b>SecondaryCategory</b>), but once they are set they cannot be deleted when you
	// revise an item. Some optional fields cannot be deleted if the item has
	// bids and/or ends within 12 hours. Some optional fields cannot be deleted
	// if other fields depend on them.
	// <br><br>
	// Use values that match the case of the
	// schema element names (<b>Item.PictureDetails.GalleryURL</b>) or make the initial
	// letter of each field name lowercase (<b>item.pictureDetails.galleryURL</b>).
	// However, do not change the case of letters in the middle of a field name.
	// For example, <b>item.picturedetails.galleryUrl</b> is not allowed.
	// <br><br>
	// To delete a listing enhancement like <b>BoldTitle</b>, specify the value you are
	// deleting in square brackets ("[ ]"); for example,
	// <b>Item.ListingEnhancement[BoldTitle]</b>.
	//
	DeletedField []string `xml:"DeletedField,omitempty"`

	//
	// When the <b>VerifyOnly</b> is included and set as <code>true</code>, the active listing is not actually revised, but the same response is returned and the seller gets to see the expected fees based on the changes made, and can also view any listing recommendations if the <b>Item.IncludeRecommedations</b> boolean field is included and set to <code>true</code>.
	//
	VerifyOnly bool `xml:"VerifyOnly,omitempty"`
}

type ReviseItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseItemResponse"`

	*AbstractResponseType

	//
	// The unique identifier for the revised listing. Note that the <b>ItemID</b> value does not change when a listing is revised, so this will be the same <b>ItemID</b> value that was passed in the call request.
	// <br/><br/>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This timestamp indicates the date and time when the listing was created on the eBay site. This value doesn't change when a listing is revised.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This timestamp indicates the date and time when the revised item is scheduled to end on the eBay site. This date/time is calculated by using the <b>StartTime</b> and the the listing duration. This value doesn't change when a listing is revised.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This container consists of the estimated listing fees for the revised listing. Each type of fee is returned even if it is not appplicable (has a value of <code>0.0</code>. The Final Value Fee (FVF) is not in this container, as this value cannot be determined until a sale is made.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// Unique identifier of the primary eBay category for the revised listing. This field is returned if the primary category was changed with the revision, and the primary category can only be changed if a fixed-price listing has no sales/auction listing has no bids, and the listing does not end within 12 hours.
	// <br/><br/>
	// This field can also be returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.PrimaryCategory</b> field was mapped to a new category ID by eBay. If the primary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/><br/>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary eBay category for the revised listing. This field is returned if the secondary category was changed with the revision, and the secondary category can only be changed if a fixed-price listing has no sales/auction listing has no bids, and the listing does not end within 12 hours.
	// <br/><br/>
	// This field can also be returned if the <b>Item.CategoryMappingAllowed</b> field was included and set to <code>true</code> in the request and the category ID passed in the <b>Item.PrimaryCategory</b> field was mapped to a new category ID by eBay. If the primary category has not changed or it has expired with no replacement, this field is not returned.
	// <br/><br/>
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// This field is returned if the <b>VerifyOnly</b> field was included in the call request and set to <code>true</code>.
	// <br/><br/>
	// If the listing was revised in 'Verify Only' mode, the active listing is not actually revised, but the same response is returned and the seller gets to see the expected fees based on the changes made, and can also view any listing recommendations if the <b>Item.IncludeRecommedations</b> boolean input field was included and set to <code>true</code>.
	//
	VerifyOnly bool `xml:"VerifyOnly,omitempty"`

	//
	// This field is returned if an eBay special offer or promotion is applicable to the listing.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Provides a list of products recommended by eBay which match the item information
	// provided by the seller.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b> flag was included and set to 'true' in the <b>ReviseItem</b> request, and if at least one listing recommendation exists for the listing about to be revised. If one or more listing recommendations are returned, it will be at the seller's discretion about whether to revise the item again based on eBay's listing recommendation(s).
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type ReviseMyMessagesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseMyMessagesRequest"`

	*AbstractRequestType

	//
	// This container is used to specify up to 10 messages (specified with their  <b>MessageID</b> values) on which to perform on or more actions. At least one <b>MessageID</b> value must be included in the request. <b>MessageID</b> values can be retrieved with the <b>GetMyMessages</b> call with the <b>DetailLevel</b> value set to <code>ReturnHeaders</code>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> Messages in the Sent folder of My Messages cannot be moved, marked as read, or flagged. </span>
	//
	MessageIDs *MyMessagesMessageIDArrayType `xml:"MessageIDs,omitempty"`

	//
	// This field is deprecated.
	//
	AlertIDs *MyMessagesAlertIDArrayType `xml:"AlertIDs,omitempty"`

	//
	// This boolean field is used to change the 'Read' status of the message(s) in the <b>MessageIDs</b> container. Including this field and setting its value to <code>true</code> will mark all messages in the <b>MessageIDs</b> container as 'Read'. Conversely, including this field and setting its value to <code>false</code> will mark all messages in the <b>MessageIDs</b> container as 'Unread'. The 'Read' status of a message can be retrieved by looking at the <b>Message.Read</b> boolean field of the <b>GetMyMessages</b> call response.
	// <br>
	// <br>
	// In each <b>ReviseMyMessages</b> call, at least one of the following fields must be specified in the request: <b>Read</b>, <b>Flagged</b>, and <b>FolderID</b>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> Messages in the Sent folder of My Messages cannot be moved, marked as read, or flagged. </span>
	//
	Read bool `xml:"Read,omitempty"`

	//
	// This boolean field is used to change the 'Flagged' status of the message(s) in the <b>MessageIDs</b> container. Including this field and setting its value to <code>true</code> will flag all messages in the <b>MessageIDs</b> container. Conversely, including this field and setting its value to <code>false</code> will unflag all messages in the <b>MessageIDs</b> container. The 'Flagged' status of a message can be retrieved by looking at the <b>Message.Flagged</b> boolean field of the <b>GetMyMessages</b> call response.
	// <br>
	// <br>
	// In each <b>ReviseMyMessages</b> call, at least one of the following fields must be specified in the request: <b>Read</b>, <b>Flagged</b>, and <b>FolderID</b>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> Messages in the Sent folder of My Messages cannot be moved, marked as read, or flagged. </span>
	//
	Flagged bool `xml:"Flagged,omitempty"`

	//
	// A unique identifier of My Messages folder. A <b>FolderID</b> value is supplied if the user want to move the message(s) in the <b>MessageIDs</b> container to a different folder. <b>FolderID</b> values can be retrieved with the <b>GetMyMessages</b> call with the <b>DetailLevel</b> value set to <code>ReturnSummary</code>. <br>
	// <br>
	// In each <b>ReviseMyMessages</b> call, at least one of the following fields must be specified in the request: <b>Read</b>, <b>Flagged</b>, and <b>FolderID</b>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> Messages in the Sent folder of My Messages cannot be moved, marked as read, or flagged. </span>
	//
	FolderID int64 `xml:"FolderID,omitempty"`
}

type ReviseMyMessagesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseMyMessagesResponse"`

	*AbstractResponseType
}

type ReviseMyMessagesFoldersRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseMyMessagesFoldersRequest"`

	*AbstractRequestType

	//
	// This required field is used to indicate the type of operation to perform (add, remove, or rename a folder). See the enumeration descriptions below for more information on the usage, requirements, and limitations on each operation.
	//
	Operation *MyMessagesFolderOperationCodeType `xml:"Operation,omitempty"`

	//
	// The eBay-generated unique identifier for a custom folder in <b>My eBay Messages</b>. The <b>FolderID</b> value is required for the 'Rename' and 'Remove' operations, but not for the 'Display' (add) operation. <b>FolderID</b> values can be retrieved by calling <b>GetMyMessages</b> with a <b>DetailLevel</b> value set to <code>ReturnSummary</code>, or the <b>FolderID</b> value for a <b>My eBay Messages</b> folder can be seen at the end of the browser's URL field when you navigate to that folder in <b>My eBay Messages</b>.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> If multiple folders will be renamed with one call, the user must pay close attention to the order of the <b>FolderID</b> and <b>FolderName</b> fields, as eBay will process these requests in order according to the placement of the the <b>FolderID</b> and <b>FolderName</b> fields. So, the existing folder identified by the first <b>FolderID</b> field in the request payload will get renamed to the folder name passed into the first <b>FolderName</b> field in the request payload, and so on.
	// </span>
	//
	FolderID []int64 `xml:"FolderID,omitempty"`

	//
	// The user-specified name of the <b>My eBay Messages</b> folder. The <b>FolderName</b> value is required for the 'Display' (add) and 'Rename' operations, but not for the 'Remove' operation. In a 'Display' (add) operation, the name passed into the <b>FolderName</b> field is the name of the new folder. In a 'Rename' operation, the name passed into the <b>FolderName</b> field will be the new name of the existing folder that is specified through the corresponding <b>FolderID</b> field.
	// <br/><br/>
	// <b>FolderName</b> values can be retrieved by calling <b>GetMyMessages</b> with a <b>DetailLevel</b> value set to <code>ReturnSummary</code>, or the <b>FolderName</b> value for a <b>My eBay Messages</b> folder can be seen when you navigate to <b>My eBay Messages</b>.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> If multiple folders will be renamed with one call, the user must pay close attention to the order of the <b>FolderID</b> and <b>FolderName</b> fields, as eBay will process these requests in order according to the placement of the the <b>FolderID</b> and <b>FolderName</b> fields. So, the existing folder identified by the first <b>FolderID</b> field in the request payload will get renamed to the folder name passed into the first <b>FolderName</b> field in the request payload, and so on.
	// </span>
	//
	FolderName []string `xml:"FolderName,omitempty"`
}

type ReviseMyMessagesFoldersResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseMyMessagesFoldersResponse"`

	*AbstractResponseType
}

type ReviseSellingManagerInventoryFolderRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerInventoryFolderRequest"`

	*AbstractRequestType

	//
	// This container is used to identify the Selling Manager Inventory folder that will be renamed and/or moved.
	//
	Folder *SellingManagerFolderDetailsType `xml:"Folder,omitempty"`
}

type ReviseSellingManagerInventoryFolderResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerInventoryFolderResponse"`

	*AbstractResponseType

	//
	// This container will show the results of the action made on the Selling Manager Inventory folder.
	//
	Folder *SellingManagerFolderDetailsType `xml:"Folder,omitempty"`
}

type ReviseSellingManagerProductRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerProductRequest"`

	*AbstractRequestType

	//
	// The details of the product that is being revised.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`

	//
	// The details of the folder for this product.
	//
	SellingManagerFolderDetails *SellingManagerFolderDetailsType `xml:"SellingManagerFolderDetails,omitempty"`

	//
	// Specifies the name of a field to remove from a Selling Manager product.
	// The request can contain zero, one, or many instances of DeletedField (one for each field to be removed).
	// DeletedField accepts the following path names, which remove the corresponding fields:<br><br>
	// SellingManagerProductDetails.CustomLabel<br>
	// SellingManagerProductDetails.QuantityAvailable<br>
	// SellingManagerProductDetails.UnitCost<br>
	// These values are case-sensitive. Use values that match the case of the schema element names.
	//
	DeletedField []string `xml:"DeletedField,omitempty"`

	//
	// Specifies an eBay category associated with the product,
	// defines Item Specifics that are relevant to the product,
	// and defines variations available for the product
	// (which may be used to create multi-variation listings).
	//
	SellingManagerProductSpecifics *SellingManagerProductSpecificsType `xml:"SellingManagerProductSpecifics,omitempty"`
}

type ReviseSellingManagerProductResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerProductResponse"`

	*AbstractResponseType

	//
	// The details of the product.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`
}

type ReviseSellingManagerSaleRecordRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerSaleRecordRequest"`

	*AbstractRequestType

	//
	// Unique identifier for an eBay listing. A listing can have multiple
	// order line items, but only one <b>ItemID</b> value. An <b>ItemID</b> can be
	// paired up with a corresponding <b>TransactionID</b> and used as an input filter
	// for <b>ReviseSellingManagerSaleRecord</b>. The <b>ItemID</b>/<b>TransactionID</b> pair
	// corresponds to a Selling Manager <b>SaleRecordID</b>, which can be retrieved
	// with the <b>GetSellingManagerSaleRecord</b> call.
	// <br><br>
	// Unless an <b>OrderLineItemID</b> is used to identify a single line item order,
	// or the <b>OrderID</b> is used to identify a single or multiple line item
	// (Combined Payment) order, the <b>ItemID</b>/<b>TransactionID</b> pair must be
	// specified. For a multiple line item order, <b>OrderID</b>
	// should be used. If <b>OrderID</b> or <b>OrderLineItemID</b> are specified, the
	// <b>ItemID</b>/<b>TransactionID</b> pair is ignored if present in the same request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. An order
	// line item is created once there is a commitment from a buyer to purchase
	// an item. Since an auction listing can only have one order line item
	// during the duration of the listing, the <b>TransactionID</b> for
	// auction listings is always 0. Along with its corresponding <b>ItemID</b>, a
	// <b>TransactionID</b> is used and referenced during an order checkout flow and
	// after checkout has been completed. The <b>ItemID</b>/<b>TransactionID</b> pair can be
	// used as an input filter for <b>ReviseSellingManagerSaleRecord</b>. The
	// <b>ItemID</b>/<b>TransactionID</b> pair corresponds to a Selling Manager <b>SaleRecordID</b>,
	// which can be retrieved with the <b>GetSellingManagerSaleRecord</b> call.
	// <br><br>
	// Unless an <b>OrderLineItemID</b> is used to identify a single line item order,
	// or the <b>OrderID</b> is used to identify a single or multiple line item
	// (Combined Payment) order, the <b>ItemID</b>/<b>TransactionID</b> pair must be
	// specified. For a multiple line item (Combined Payment) order, <b>OrderID</b>
	// must be used. If <b>OrderID</b> or <b>OrderLineItemID</b> are specified, the
	// <b>ItemID</b>/<b>TransactionID</b> pair is ignored if present in the same request.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// A unique identifier that identifies a single line item or multiple line
	// item (Combined Invoice) order.
	// <br><br>
	// For a single line item order, the <b>OrderID</b> value is identical to the
	// <b>OrderLineItemID</b> value that is generated upon creation of the order line
	// item. For a Combined Invoice order, the <b>OrderID</b> value is created by eBay
	// when the buyer or seller (sharing multiple, common order line items)
	// combines multiple order line items into a Combined Invoice order through
	// the eBay site. A Combined Invoice order can also be created by the
	// seller through the <b>AddOrder</b> call. The <b>OrderID</b> can be used as an input
	// filter for <b>ReviseSellingManagerSaleRecord</b>. The <b>OrderID</b>
	// is linked to a Selling Manager <b>SaleRecordID</b>, and can be retrieved
	// with the <b>GetSellingManagerSaleRecord</b> call.
	// <br><br>
	// <b>OrderID</b> overrides an <b>OrderLineItemID</b> or <b>ItemID</b>/<b>TransactionID</b> pair if
	// these fields are also specified in the same request.
	//
	OrderID *OrderIDType `xml:"OrderID,omitempty"`

	//
	// Container consisting of order costs, shipping details, order status, and
	// other information. The changes made under this container will update the
	// order in Selling Manager.
	//
	SellingManagerSoldOrder *SellingManagerSoldOrderType `xml:"SellingManagerSoldOrder,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs. For a single line item order, the
	// <b>OrderLineItemID</b> value can be passed into the <b>OrderID</b> field to revise the
	// order in Selling Manager.
	// <br><br>
	// Unless an <b>ItemID</b>/<b>TransactionID</b> pair is used to identify a single line
	// item order, or the <b>OrderID</b> is used to identify a single or multiple line
	// item (Combined Invoice) order, the <b>OrderLineItemID</b> must be specified.
	// For a multiple line item (Combined Invoice) order, <b>OrderID</b> should be
	// used. If <b>OrderLineItemID</b> is specified, the <b>ItemID</b>/<b>TransactionID</b> pair are
	// ignored if present in the same request.
	// <br><br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type ReviseSellingManagerSaleRecordResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerSaleRecordResponse"`

	*AbstractResponseType
}

type ReviseSellingManagerTemplateRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerTemplateRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the Selling Manager template. You can obtain a
	// <b>SaleTemplateID</b> value by calling <b>GetSellingManagerInventory</b>.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`

	//
	// Reserved for future use.
	//
	ProductID int64 `xml:"ProductID,omitempty"`

	//
	// The name of the Selling Manager template.
	//
	SaleTemplateName string `xml:"SaleTemplateName,omitempty"`

	//
	// This container is used to modify the Selling Manager template. In the <b>Item.ItemID</b> field, you specify the same value as the
	// one specified in <b>SaleTemplateID</b>.
	// Other child elements hold the values for properties that are being changed.
	// Set values in the Item object only for those properties that are
	// changing. Use <b>DeletedField</b> to remove a property.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Specifies the name of a field to remove from a template.
	// See the eBay Web Services guide for rules on removing values when revising items.
	// Also see the relevant field descriptions to determine when to use DeletedField (and potential consequences).
	// The request can contain zero, one, or many instances of DeletedField (one for each field to be removed).
	// DeletedField accepts the following path names, which remove the corresponding fields:
	// <br><br>
	// Item.ApplicationData<br>
	// Item.AttributeSetArray<br>
	// Item.ConditionID<br>
	// Item.ItemSpecifics<br>
	// Item.ListingCheckoutRedirectPreference.ProStoresStoreName<br>
	// Item.ListingCheckoutRedirectPreference.SellerThirdPartyUsername<br>
	// Item.ListingDesigner.LayoutID<br>
	// Item.ListingDesigner.ThemeID<br>
	// Item.ListingEnhancement[Value]<br>
	// Item.PayPalEmailAddress<br>
	// Item.PictureDetails.GalleryURL<br>
	// Item.PictureDetails.PictureURL<br>
	// Item.PostalCode<br>
	// Item.ProductListingDetails<br>
	// item.ShippingDetails.PaymentInstructions<br>
	// item.SKU<br>
	// Item.SubTitle<br><br>
	// These values are case-sensitive. Use values that match the case of the schema element names
	// (Item.PictureDetails.GalleryURL) or make the initial letter of each field name lowercase (item.pictureDetails.galleryURL).
	// However, do not change the case of letters in the middle of a field name (e.g., item.picturedetails.galleryUrl is not allowed).
	// <br><br>
	// Depending on how you have configured your pictures, you cannot necessarily delete
	// both GalleryURL and PictureURL from an existing listing.
	// If GalleryType was already set for the item you are revising, you cannot remove it.
	// This means you still need to include either a first picture
	// or a gallery URL in your revised listing.
	//
	DeletedField []string `xml:"DeletedField,omitempty"`

	//
	// Use this field to verify the template instead of revising it.
	//
	VerifyOnly bool `xml:"VerifyOnly,omitempty"`
}

type ReviseSellingManagerTemplateResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ReviseSellingManagerTemplateResponse"`

	*AbstractResponseType

	//
	// This sale template ID uniquely identifies the template that was revised
	// in the request. This sale template ID should match the
	// template ID specified in the request.
	// specified for the call.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`

	//
	// Child elements contain the estimated listing fees for the revised item
	// listing. The fees do not include the Final Value Fee (FVF), which cannot
	// be determined until an item is sold. Revising an item does not itself
	// incur a fee. However, certain item properties are fee-based and result
	// in the return of fees in the call's response.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// ID of the primary category in which the item was listed.
	// Only returned if you set Item.CategoryMappingAllowed to true in the request
	// and the ID passed in Item.PrimaryCategory was mapped to a new ID by eBay.
	// If the primary category has not changed or it has expired with no replacement,
	// CategoryID does not return a value.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// ID of the secondary category in which the item was listed.
	// Only returned if you set Item.CategoryMappingAllowed to true in the request
	// and the ID passed in Item.SecondaryCategory was mapped to a new ID by eBay.
	// If the secondary category has not changed or it has expired with no replacement,
	// Category2ID does not return a value.
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// Instead of revising, only verifies the template.
	//
	VerifyOnly bool `xml:"VerifyOnly,omitempty"`

	//
	// The name of the sale template.
	//
	SaleTemplateName string `xml:"SaleTemplateName,omitempty"`

	//
	// The details of the product that this template belongs to.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`
}

type RevokeTokenRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RevokeTokenRequest"`

	*AbstractRequestType

	//
	// Cancels notification subscriptions for the user/application if set to true. Default value is false.
	//
	UnsubscribeNotification bool `xml:"UnsubscribeNotification,omitempty"`
}

type RevokeTokenResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RevokeTokenResponse"`

	*AbstractResponseType
}

type SaveItemToSellingManagerTemplateRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SaveItemToSellingManagerTemplateRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the eBay listing which should be used as a model to create the Selling Manager template and save it to Selling Manager inventory.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Associates the new template with a product.
	//
	ProductID int64 `xml:"ProductID,omitempty"`

	//
	// Name associated with the template. If no name is submitted, the template will be named automatically.
	//
	TemplateName string `xml:"TemplateName,omitempty"`
}

type SaveItemToSellingManagerTemplateResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SaveItemToSellingManagerTemplateResponse"`

	*AbstractResponseType

	//
	// The unique identifier of the newly-created Selling Manager template. As long as the call was successful, this field is always returned.
	//
	TemplateID int64 `xml:"TemplateID,omitempty"`
}

type SellerReverseDisputeRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SellerReverseDisputeRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the dispute that was returned when the dispute was created.
	// The dispute must be an Unpaid Item dispute that the seller opened.
	//
	DisputeID *DisputeIDType `xml:"DisputeID,omitempty"`

	//
	// The reason the dispute is being reversed.
	//
	DisputeResolutionReason *DisputeResolutionReasonCodeType `xml:"DisputeResolutionReason,omitempty"`
}

type SellerReverseDisputeResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SellerReverseDisputeResponse"`

	*AbstractResponseType
}

type SendInvoiceRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SendInvoiceRequest"`

	*AbstractRequestType

	//
	// Unique identifier for an eBay listing. Unless <b>OrderID</b> or
	// <b>OrderLineItemID</b> is provided in the request, the <b>ItemID</b> (or <b>SKU</b>) is
	// required and must be paired with the corresponding <b>TransactionID</b> to
	// identify a single line item order. For a multiple line item order, <b>OrderID</b> should be used.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. An order line item is created once there is a commitment from a buyer to purchase an item. Since an auction listing can only have one order line item during the duration of the listing, the <b>TransactionID</b> for auction listings is always <code>0</code>. Unless <b>OrderID</b> or <b>OrderLineItemID</b> is provided in the request, the <b>TransactionID</b> is required and must be paired with the corresponding <b>ItemID</b> to identify a single line item order. For a multiple line item order, <b>OrderID</b> should be used.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// A unique identifier that identifies a single line item or multiple line
	// item (Combined Invoice) order.
	// <br><br>
	// For a single line item order, the <b>OrderID</b> value is identical to the
	// <b>OrderLineItemID</b> value that is generated upon creation of the order line
	// item. For a Combined Invoice order, the <b>OrderID</b> value is created by eBay
	// when the buyer or seller (sharing multiple, common order line items)
	// combines multiple order line items into a Combined Invoice order. A
	// Combined Invoice order can also be created by the seller through the
	// <b>AddOrder</b> call.
	// <br><br>
	// Unless the <b>ItemID</b> (or SKU) and corresponding <b>TransactionID</b>, or the
	// <b>OrderLineItemID</b> is provided in the request to identify a single line
	// item order, the <b>OrderID</b> must be specified. If <b>OrderID</b> is specified,
	// <b>OrderLineItemID</b>, <b>ItemID</b>, <b>TransactionID</b>, and <b>SKU</b> are ignored if present
	// in the same request.
	//
	OrderID *OrderIDType `xml:"OrderID,omitempty"`

	//
	// If the buyer has an International shipping address, use this container
	// to offer up to four International shipping services (or five if one of them is a Global Shipping Program service). If International
	// shipping services are offered, (domestic) <b>ShippingServiceOptions</b> should
	// not be included in the request.
	// <br>
	//
	InternationalShippingServiceOptions []*InternationalShippingServiceOptionsType `xml:"InternationalShippingServiceOptions,omitempty"`

	//
	// If the buyer has a domestic shipping address, use this container
	// to offer up to four domestic shipping services. If domestic
	// shipping services are offered, <b>InternationalShippingServiceOptions</b> should
	// not be included in the request.
	// <br>
	//
	ShippingServiceOptions []*ShippingServiceOptionsType `xml:"ShippingServiceOptions,omitempty"`

	//
	// This container is used if the seller wishes to apply sales tax to the order. The amount of sales tax applied to the order is dependent on the sales tax rate in the buyer's state and whether sales tax is being applied to the cost of the order only or the cost of the order plus shipping and handling.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. So, if the order's buyer is in a state that is subject to 'eBay Collect and Remit Tax', the seller should not send the buyer any sales tax information, since eBay will be handling the sales tax instead without buyer's assistance. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	// </span>
	//
	SalesTax *SalesTaxType `xml:"SalesTax,omitempty"`

	//
	// This field is no longer applicable as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`

	//
	// This field is no longer applicable as it is no longer possible for a seller to offer a buyer shipping insurance.
	//
	InsuranceFee *AmountType `xml:"InsuranceFee,omitempty"`

	//
	// This optional field allows a US or German seller to add specific payment methods that were not in the original item listing. The only valid values for this field are 'PayPal' for a US listing, or 'MoneyXferAcceptedInCheckout' (CIP+) for a DE listing.
	//
	PaymentMethods []*BuyerPaymentMethodCodeType `xml:"PaymentMethods,omitempty"`

	//
	// If the <b>PaymentMethods</b> field is used and set to <code>PayPal</code>, the seller provides his/her PayPal email address in this field.
	//
	PayPalEmailAddress string `xml:"PayPalEmailAddress,omitempty"`

	//
	// This field allows the seller to provide a message or instructions
	// regarding checkout/payment, or the return policy.
	//
	CheckoutInstructions string `xml:"CheckoutInstructions,omitempty"`

	//
	// Flag indicating whether or not the seller wishes to receive an email copy of the invoice sent to the buyer.
	//
	EmailCopyToSeller bool `xml:"EmailCopyToSeller,omitempty"`

	//
	// This dollar value indicates the money due from the buyer upon delivery of the item.
	// <br><br>
	// This field should only be specified in the <b>SendInvoice</b> request if 'COD'
	// (cash-on-delivery) was the payment method selected by the buyer and it is included
	// as the <b>PaymentMethods</b> value in the same request.
	//
	CODCost *AmountType `xml:"CODCost,omitempty"`

	//
	// The seller's unique identifier for an item that is being tracked by this
	// SKU. If <b>OrderID</b> or <b>OrderLineItemID</b> are not provided, both <b>SKU</b> (or
	// <b>ItemID</b>) and corresponding <b>TransactionID</b> must be provided to uniquely
	// identify a single line item order. For a multiple line item (Combined
	// Payment) order, <b>OrderID</b> must be used.
	// <br>
	// <br>
	// This field can only be used if the <b>Item.InventoryTrackingMethod</b> field
	// (set with the <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b> calls) is set to
	// SKU.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// A unique identifier for an eBay order line item. This field is created
	// as soon as there is a commitment to buy from the seller, and its value
	// is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
	// hyphen in between these two IDs.
	// <br>
	// <br>
	// Unless the <b>ItemID</b> (or <b>SKU</b>) and corresponding <b>TransactionID</b> is used to
	// identify a single line item order, or the <b>OrderID</b> is used to identify a
	// single or multiple line item (Combined Invoice) order, the
	// <b>OrderLineItemID</b> must be specified. For a multiple line item (Combined Invoice) order, <b>OrderID</b> should be used. If <b>OrderLineItemID</b> is specified,
	// <b>ItemID</b>, <b>TransactionID</b>, and <b>SKU</b> are ignored if present in the same
	// request.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`

	//
	// This field allows the seller to adjust the total cost of the order to account for an extra charge or to pass down a discount to the buyer. <br><br> The currency used in this field must be the same currency of the listing site. A positive value in this field indicates that the amount is an extra charge being paid to the seller by the buyer, and a negative value indicates that the amount is a discount given to the buyer by the seller.
	//
	AdjustmentAmount *AmountType `xml:"AdjustmentAmount,omitempty"`
}

type SendInvoiceResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SendInvoiceResponse"`

	*AbstractResponseType
}

type SetMessagePreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetMessagePreferencesRequest"`

	*AbstractRequestType

	//
	// This container can be used to set customized ASQ subjects, or it can be used to reset the ASQ subjects to the eBay defaults. Up to nine customized ASQ subjects can be set.
	//
	ASQPreferences *ASQPreferencesType `xml:"ASQPreferences,omitempty"`
}

type SetMessagePreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetMessagePreferencesResponse"`

	*AbstractResponseType
}

type SetNotificationPreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetNotificationPreferencesRequest"`

	*AbstractRequestType

	//
	// Specifies application-level event preferences that have been enabled,
	// including the URL to which notifications should be delivered and whether
	// notifications should be enabled or disabled (although the
	// <b>UserDeliveryPreferenceArray</b> input property specifies specific
	// notification subscriptions).
	//
	ApplicationDeliveryPreferences *ApplicationDeliveryPreferencesType `xml:"ApplicationDeliveryPreferences,omitempty"`

	//
	// Specifies events and whether or not they are enabled.
	//
	UserDeliveryPreferenceArray *NotificationEnableArrayType `xml:"UserDeliveryPreferenceArray,omitempty"`

	//
	// Specifies user data for notification settings, such as mobile phone number.
	//
	UserData *NotificationUserDataType `xml:"UserData,omitempty"`

	//
	// Characteristics or details of an event such as type, name and value.
	// Currently can only be set for wireless applications.
	//
	EventProperty []*NotificationEventPropertyType `xml:"EventProperty,omitempty"`

	//
	// Specifies up to 25 ApplicationDeliveryPreferences.DeliveryURLDetails.DeliveryURLName to associate with a user token sent in a SetNotificationPreferences request. To specify multiple DeliveryURLNames, create separate instances of ApplicationDeliveryPreferences.DeliveryURLDetails.DeliveryURLName, and then enable up to 25 DeliveryURLNames by including them in comma-separated format in this field.
	//
	DeliveryURLName string `xml:"DeliveryURLName,omitempty"`
}

type SetNotificationPreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetNotificationPreferencesResponse"`

	*AbstractResponseType
}

type SetPromotionalSaleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetPromotionalSaleRequest"`

	*AbstractRequestType

	//
	// The seller must include this field and set it to 'Add' to create a new promotional sale, or set it to 'Update' to modify an existing promotional sale, or set it to 'Delete' to delete a promotional sale.
	//
	Action *ModifyActionCodeType `xml:"Action,omitempty"`

	//
	// This container must be included in each <b>SetPromotionalSale</b> call. The fields of this container that will be used will depend on whether the seller is adding a new promotional sale, updating an existing promotional sale, or deleting an existing promotional sale.
	//
	PromotionalSaleDetails *PromotionalSaleType `xml:"PromotionalSaleDetails,omitempty"`
}

type SetPromotionalSaleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetPromotionalSaleResponse"`

	*AbstractResponseType

	//
	// The enumeration value in this field indicates the status of the promotional sale action (add or delete). See <b>PromotionalSaleStatusCodeType</b> for more information on status values.
	//
	Status *PromotionalSaleStatusCodeType `xml:"Status,omitempty"`

	//
	// The unique identifier of the new promotional sale, or in the case of a delete or modify action, the unique identifier of the existing promotional sale that was deleted or modified.
	//
	PromotionalSaleID int64 `xml:"PromotionalSaleID,omitempty"`
}

type SetPromotionalSaleListingsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetPromotionalSaleListingsRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the seller's promotional sale. Based on the <b>Action</b>
	// value, listings will either be added to or removed from the promotional sale.
	//
	PromotionalSaleID int64 `xml:"PromotionalSaleID,omitempty"`

	//
	// This required field determines whether you are adding (specify 'Add') or
	// removing (specify 'Delete) one or more listings from the promotional sale
	// identified by the <b>PromotionalSaleID</b> value in the request.
	// <br><br>
	// If you specify 'Delete', you must include one or more <b>ItemID</b> values under the <b>PromotionalSaleItemIDArray</b> container, and you cannot use the other filter options in the request. If you specify 'Add', you can add one or more listings using any of the filtering options in the request. Active auction listings that have one or more bids cannot be added to or removed from a promotional sale.
	//
	Action *ModifyActionCodeType `xml:"Action,omitempty"`

	//
	// Container consisting of one or more <b>ItemID</b> values. Based on the <b>Action</b> value, the listings identified by these <b>ItemID</b> values are either added to or removed from the promotional sale. <br><br> This container is required if listings are being removed (<b>Action</b>='Delete') from the promotional sale.
	//
	PromotionalSaleItemIDArray *ItemIDArrayType `xml:"PromotionalSaleItemIDArray,omitempty"`

	//
	// If a <b>StoreCategoryID</b> value is included in the call request, all active items in this eBay Store category are added to the promotional sale. This field cannot be used if the <b>Action</b> field is set to 'Delete'.
	//
	StoreCategoryID int64 `xml:"StoreCategoryID,omitempty"`

	//
	// If a <b>CategoryID</b> value is included in the call request, all active items in this eBay category are added to the promotional sale. This field cannot be used if the <b>Action</b> field is set to 'Delete'.
	//
	CategoryID int64 `xml:"CategoryID,omitempty"`

	//
	// If this field is included and set to 'true' in the call request, all fixed-price listings are added to the promotional sale. This field cannot be used if the <b>Action</b> field is set to 'Delete'.
	//
	AllFixedPriceItems bool `xml:"AllFixedPriceItems,omitempty"`

	//
	// This field is deprecated and should no longer be used because Store Inventory is no longer a supported listing format.
	//
	AllStoreInventoryItems bool `xml:"AllStoreInventoryItems,omitempty"`

	//
	// If this field is included and set to 'true' in the call request, all auction listings are added to the promotional sale. This field cannot be used if the <b>Action</b> field is set to 'Delete'.
	//
	AllAuctionItems bool `xml:"AllAuctionItems,omitempty"`
}

type SetPromotionalSaleListingsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetPromotionalSaleListingsResponse"`

	*AbstractResponseType

	//
	// The enumeration value in this field indicates the status of the promotional sale action (add or delete). See <b>PromotionalSaleStatusCodeType</b> for more information on status values.
	//
	Status *PromotionalSaleStatusCodeType `xml:"Status,omitempty"`
}

type SetSellingManagerFeedbackOptionsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetSellingManagerFeedbackOptionsRequest"`

	*AbstractRequestType

	//
	// Specifies the event that will trigger automated feedback to the buyer.
	//
	AutomatedLeaveFeedbackEvent *AutomatedLeaveFeedbackEventCodeType `xml:"AutomatedLeaveFeedbackEvent,omitempty"`

	//
	// Contains a set of comments from which one can be selected to leave
	// feedback for a buyer. If automated feedback is used, a comment is
	// selected from the set randomly. Stored comments cannot be replaced or
	// edited individually. Submitting a stored comments array replaces all
	// existing stored comments.
	// <br>
	//
	StoredComments *FeedbackCommentArrayType `xml:"StoredComments,omitempty"`
}

type SetSellingManagerFeedbackOptionsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetSellingManagerFeedbackOptionsResponse"`

	*AbstractResponseType
}

type SetSellingManagerItemAutomationRuleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetSellingManagerItemAutomationRuleRequest"`

	*AbstractRequestType

	//
	// The unique identifier of the listing whose automation rules you want to change.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The information for the automated relisting rule to be associated with the listing.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// The information for the automated Second Chance Offer rule to be associated with the listing.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`
}

type SetSellingManagerItemAutomationRuleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetSellingManagerItemAutomationRuleResponse"`

	*AbstractResponseType

	//
	// Contains the automated listing rule associated with this item.
	//
	AutomatedListingRule *SellingManagerAutoListType `xml:"AutomatedListingRule,omitempty"`

	//
	// Contains the automated relisting rule associated with this item.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// Contains the automated Second Chance Offer rule associated with this item.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`

	//
	// Contains fees that may be incurred when items are listed using the automation rules (e.g., a scheduled listing fee). Use of an automation rule does not in itself have a fee, but use can result in a fee.
	//
	Fees *FeesType `xml:"Fees,omitempty"`
}

type SetSellingManagerTemplateAutomationRuleRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetSellingManagerTemplateAutomationRuleRequest"`

	*AbstractRequestType

	//
	// The ID of the Selling Manager template whose automation rules you want to change. You can obtain a <b>SaleTemplateID</b> by calling <b>GetSellingManagerInventory</b>.
	//
	SaleTemplateID int64 `xml:"SaleTemplateID,omitempty"`

	//
	// The information for the automated listing rule to be associated with the template.
	//
	AutomatedListingRule *SellingManagerAutoListType `xml:"AutomatedListingRule,omitempty"`

	//
	// The information for the automated relisting rule to be associated with the template.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// The information for the automated Second Chance Offer rule to be associated with the template.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`
}

type SetSellingManagerTemplateAutomationRuleResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetSellingManagerTemplateAutomationRuleResponse"`

	*AbstractResponseType

	//
	// Contains the automated listing rule associated with this template.
	//
	AutomatedListingRule *SellingManagerAutoListType `xml:"AutomatedListingRule,omitempty"`

	//
	// Contains the automated relisting rule associated with this template.
	//
	AutomatedRelistingRule *SellingManagerAutoRelistType `xml:"AutomatedRelistingRule,omitempty"`

	//
	// Contains the automated Second Chance Offer rule associated with this template.
	//
	AutomatedSecondChanceOfferRule *SellingManagerAutoSecondChanceOfferType `xml:"AutomatedSecondChanceOfferRule,omitempty"`

	//
	// Contains fees that may be incurred when items are listed using the
	// automation rules (e.g., a scheduled listing fee). Use of an automation rule
	// does not in itself have a fee, but use can result in a fee.
	//
	Fees *FeesType `xml:"Fees,omitempty"`
}

type SetShippingDiscountProfilesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetShippingDiscountProfilesRequest"`

	*AbstractRequestType

	//
	// The three-digit code of the currency to be used for shipping discounts on  Combined Invoice orders. A discount profile can only be associated with a listing if the <b>CurrencyID</b> value of the profile matches the <b>Item.Currency</b> value specified in a listing. This field is required if the user is adding or updating one or more shipping discount profiles.
	// <br><br>
	// <br><br>
	// Note that There is a <b>currencyID</b> attribute on all   <b>SetShippingDiscountProfiles</b> elements involving money. To avoid a call error, be sure to use the same currency type in these attributes as what is set for the <b>CurrencyID</b> field.
	//
	CurrencyID *CurrencyCodeType `xml:"CurrencyID,omitempty"`

	//
	// This field is used to specify the number of days after the purchase of an
	// item that the buyer or seller can combine multiple and mutual order
	// line items into one Combined Invoice order. In a Combined Invoice order,
	// the buyer makes one payment for all order line items, hence only unpaid
	// order line items can be combined into a Combined Invoice order.
	//
	CombinedDuration *CombinedPaymentPeriodCodeType `xml:"CombinedDuration,omitempty"`

	//
	// This field is used to set which action is being taken (<code>Add</code>, <code>Update</code>, or <code>Delete</code>) in the call. If you are adding a shipping discount rule, you will have to supply a name for that shipping discount profile. If you want to update or delete a shipping discount profile, you'll have to provide the unique identifier of this rule through the corresponding containers. The unique identifiers of these rules can be retrieved with the <b>GetShippingDiscountRules</b> call, or the seller can view these identifiers in My eBay Shipping Preferences.
	//
	ModifyActionCode *ModifyActionCodeType `xml:"ModifyActionCode,omitempty"`

	//
	// This container allows you to create, update, or delete a flat-rate shipping discount profile.
	//
	FlatShippingDiscount *FlatShippingDiscountType `xml:"FlatShippingDiscount,omitempty"`

	//
	// This container allows you to create, update, or delete a calculated shipping discount profile.
	//
	CalculatedShippingDiscount *CalculatedShippingDiscountType `xml:"CalculatedShippingDiscount,omitempty"`

	//
	// This container allows you to create, update, or delete a calculated handling discount profile.
	//
	CalculatedHandlingDiscount *CalculatedHandlingDiscountType `xml:"CalculatedHandlingDiscount,omitempty"`

	//
	// This container allows you to create, update, or delete a promotional shipping discount profile.
	//
	PromotionalShippingDiscountDetails *PromotionalShippingDiscountDetailsType `xml:"PromotionalShippingDiscountDetails,omitempty"`

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	ShippingInsurance *ShippingInsuranceType `xml:"ShippingInsurance,omitempty"`

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	InternationalShippingInsurance *ShippingInsuranceType `xml:"InternationalShippingInsurance,omitempty"`
}

type SetShippingDiscountProfilesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetShippingDiscountProfilesResponse"`

	*AbstractResponseType
}

type SetStoreRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStoreRequest"`

	*AbstractRequestType

	//
	// This container is used to set/modify the configuration of a seller's eBay Store.
	//
	Store *StoreType `xml:"Store,omitempty"`
}

type SetStoreResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStoreResponse"`

	*AbstractResponseType
}

type SetStoreCategoriesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStoreCategoriesRequest"`

	*AbstractRequestType

	//
	// Specifies the type of action (Add, Move, Delete, or Rename) to carry out
	// for the specified eBay Store categories.
	//
	Action *StoreCategoryUpdateActionCodeType `xml:"Action,omitempty"`

	//
	// Items can only be contained within child categories. A parent category
	// cannot contain items. If adding, moving, or deleting categories displaces
	// items, you must specify a destination child category under which the
	// displaced items will be moved. The destination category must have no
	// child categories.
	//
	ItemDestinationCategoryID int64 `xml:"ItemDestinationCategoryID,omitempty"`

	//
	// When adding or moving store categories, specifies the category under
	// which the listed categories will be located. To add or move categories to
	// the top level, set the value to -999.
	//
	DestinationParentCategoryID int64 `xml:"DestinationParentCategoryID,omitempty"`

	//
	// Specifies the store categories on which to act.
	//
	StoreCategories *StoreCustomCategoryArrayType `xml:"StoreCategories,omitempty"`
}

type SetStoreCategoriesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStoreCategoriesResponse"`

	*AbstractResponseType

	//
	// The task ID associated with the category structure change request. For a
	// simple change, the <b>SetStoreCategories</b> call is processed synchronously.
	// That is, simple changes are made immediately and then the response is
	// returned. For synchronous processing, the task ID in the response is 0.
	// If the category structure changes affect many listings, the changes will
	// be processed asynchronously and the task ID will be a positive number.
	// Use the non-zero task ID with <b>GetStoreCategoryUpdateStatus</b> to monitor
	// the status of asynchronously processed changes.
	//
	TaskID int64 `xml:"TaskID,omitempty"`

	//
	// When an eBay Store category structure change is processed synchronously, the status
	// is returned as 'Complete' or 'Failed'. For asynchronously processed changes,
	// the status is reported as 'InProgress' or 'Pending'. Use <b>GetStoreCategoryUpdateStatus</b> to
	// monitor the status of asynchronously processed changes.
	//
	Status *TaskStatusCodeType `xml:"Status,omitempty"`

	//
	// Contains hierarchy data for eBay Store categories that you have created/modified.
	//
	CustomCategory *StoreCustomCategoryArrayType `xml:"CustomCategory,omitempty"`
}

type SetStoreCustomPageRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStoreCustomPageRequest"`

	*AbstractRequestType

	//
	// This container is used to create a new eBay Store custom page or modify an existing custom page.
	//
	CustomPage *StoreCustomPageType `xml:"CustomPage,omitempty"`
}

type SetStoreCustomPageResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStoreCustomPageResponse"`

	*AbstractResponseType

	//
	// This container consists of details for the newly-added or modified eBay Store custom page.
	//
	CustomPage *StoreCustomPageType `xml:"CustomPage,omitempty"`
}

type SetStorePreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStorePreferencesRequest"`

	*AbstractRequestType

	//
	// This container is used to set the eBay Store's preferences. Currently, the only applicable eBay Store preferences are Store vacation preferences.
	//
	StorePreferences *StorePreferencesType `xml:"StorePreferences,omitempty"`
}

type SetStorePreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetStorePreferencesResponse"`

	*AbstractResponseType
}

type SetTaxTableRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetTaxTableRequest"`

	*AbstractRequestType

	//
	// This table is used to set or modify sales tax rates for one or more tax jurisdictions within that country. A <b>TaxJurisdiction</b> container is required for each tax jurisdiction that is being added/updated.
	//
	TaxTable *TaxTableType `xml:"TaxTable,omitempty"`
}

type SetTaxTableResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetTaxTableResponse"`

	*AbstractResponseType
}

type SetUserNotesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetUserNotesRequest"`

	*AbstractRequestType

	//
	// Unique identifier of the listing to which the My eBay note will be
	// attached. Notes can only be added to items that are
	// currently being tracked in My eBay.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The seller must include this field and set it to 'AddOrUpdate' to add a new user note or update an existing user note, or set it to 'Delete' to delete an existing user note.
	//
	Action *SetUserNotesActionCodeType `xml:"Action,omitempty"`

	//
	// This field is needed if the <b>Action</b> is <code>AddOrUpdate</code>. The text supplied in this field will
	// completely replace any existing My eBay note for the
	// specified item.
	//
	NoteText string `xml:"NoteText,omitempty"`

	//
	// Unique identifier for the order line item to which the My
	// eBay note will be attached. Notes can only be added to order line items
	// that are currently being tracked in My eBay. Buyers can
	// view user notes made on order line items in the
	// <b>PrivateNotes</b> field of the <b>WonList</b> container in <b>GetMyeBayBuying</b>, and
	// sellers can view user notes made on order line items in
	// the <b>PrivateNotes</b> field of the <b>SoldList</b> and <b>DeletedFromSoldList</b>
	// containers in <b>GetMyeBaySellinging</b>.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// Container consisting of name-value pairs that identify (match) one
	// variation within a fixed-price, multiple-variation listing. The specified
	// name-value pair(s) must exist in the listing specified by either the
	// <b>ItemID</b> or <b>SKU</b> values specified in the request. If a specific order line
	// item is targeted in the request with an
	// <b>ItemID</b>/<b>TransactionID</b> pair or an <b>OrderLineItemID</b> value, any specified
	// <b>VariationSpecifics</b> container is ignored by the call.
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`

	//
	// SKU value of the item variation to which the My eBay note will be
	// attached. Notes can only be added to items that are currently being
	// tracked in My eBay. A SKU (stock keeping unit) value is defined by and
	// used by the seller to identify a variation within a fixed-price, multiple-
	// variation listing. The SKU value is assigned to a variation of an item
	// through the <b>Variations.Variation.SKU</b> element.
	// <br>
	// <br>
	// This field can only be used if the <b>Item.InventoryTrackingMethod</b> field
	// (set with the <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b> calls) is set to
	// SKU.
	// <br>
	// <br>
	// If a specific order line item is targeted in the request
	// with an <b>ItemID</b>/<b>TransactionID</b> pair or an <b>OrderLineItemID</b> value, any
	// specified <b>SKU</b> is ignored by the call.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// A unique identifier for an eBay order line item. This field is created as
	// soon as there is a commitment to buy from the seller, and its value is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs. <b>OrderLineItemID</b> can be used in the input instead of
	// an <b>ItemID</b>/<b>TransactionID</b> pair to identify an order line item.
	// <br>
	// <br>
	// Notes can only be added to order line items that are currently being
	// tracked in My eBay. Buyers can view user notes made on order line items in
	// the <b>PrivateNotes</b> field of the <b>WonList</b> container in <b>GetMyeBayBuying</b>, and
	// sellers can view user notes made on order line items in the <b>PrivateNotes</b>
	// field of the <b>SoldList</b> and <b>DeletedFromSoldList</b> containers in
	// <b>GetMyeBaySellinging</b>.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type SetUserNotesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetUserNotesResponse"`

	*AbstractResponseType
}

type SetUserPreferencesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetUserPreferencesRequest"`

	*AbstractRequestType

	//
	// This container is included if the seller wishes to receive contact information for unsuccessful bidders. This preference is only applicable for auction listings.
	//
	BidderNoticePreferences *BidderNoticePreferencesType `xml:"BidderNoticePreferences,omitempty"`

	//
	// This container is included if the seller wishes to set the preference for allowing Combined Invoice orders for cases where the buyer has multiple unpaid order line items from the same seller.
	//
	CombinedPaymentPreferences *CombinedPaymentPreferencesType `xml:"CombinedPaymentPreferences,omitempty"`

	//
	// This container is deprecated.
	//
	CrossPromotionPreferences *CrossPromotionPreferencesType `xml:"CrossPromotionPreferences,omitempty"`

	//
	// This container is included if the seller wishes to set various payment preferences. One or more preferences may be set or modified under this container. Payment preferences specified in a <b>SetUserPreferences</b> call override the settings in My eBay payment preferences.
	//
	SellerPaymentPreferences *SellerPaymentPreferencesType `xml:"SellerPaymentPreferences,omitempty"`

	//
	// This container is included if the seller wishes to set preferences for displaying items on a buyer's Favorite Sellers' Items page or Favorite Sellers' Items digest. One or more preferences may be set or modified under this container.
	//
	SellerFavoriteItemPreferences *SellerFavoriteItemPreferencesType `xml:"SellerFavoriteItemPreferences,omitempty"`

	//
	// This container is included if the seller wishes to set preferences for the end-of-auction email sent to the winning bidder. These preferences allow the seller to customize the Email that is sent to buyer at the end of the auction. One or more preferences may be set or modified under this container. These preferences are only applicable for auction listings.
	//
	EndOfAuctionEmailPreferences *EndOfAuctionEmailPreferencesType `xml:"EndOfAuctionEmailPreferences,omitempty"`

	//
	// This field is included and set to <code>true</code> if the seller wishes to email the shipment's tracking number to the buyer.
	//
	EmailShipmentTrackingNumberPreference bool `xml:"EmailShipmentTrackingNumberPreference,omitempty"`

	//
	// This field is included and set to <code>true</code> if the seller wishes to require the buyer to provide a shipping phone number upon checkout. Some shipping carriers require the receiver's phone number.
	//
	RequiredShipPhoneNumberPreference bool `xml:"RequiredShipPhoneNumberPreference,omitempty"`

	//
	// This container is included if the seller wishes to set Unpaid Item Assistant preferences. The Unpaid Item Assistant automatically opens an Unpaid Item case on the behalf of the seller if the buyer has not paid for the order after a specified number of days. One or more preferences may be set or modified under this container.
	//
	UnpaidItemAssistancePreferences *UnpaidItemAssistancePreferencesType `xml:"UnpaidItemAssistancePreferences,omitempty"`

	//
	// This container is included if the seller wishes to set the preference for sending a purchase reminder email to buyers.
	//
	PurchaseReminderEmailPreferences *PurchaseReminderEmailPreferencesType `xml:"PurchaseReminderEmailPreferences,omitempty"`

	//
	// This field is no longer applicable, as third-party checkout on eBay is no longer possible.
	//
	SellerThirdPartyCheckoutDisabled bool `xml:"SellerThirdPartyCheckoutDisabled,omitempty"`

	//
	// This container is included if the seller wishes to set the order cut off time for same-day shipping. If the seller specifies a value of <code>0</code> in <strong>Item.DispatchTimeMax</strong> to offer same day handling when listing an item, the seller's shipping time commitment depends on the order cut off time set for the listing site, as indicated by the <strong>DispatchCutoffTimePreference.CutoffTime</strong> field.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> This field is not applicable for sellers who have opted into the Handling Time Option of eBay Guaranteed Delivery, as this field only shows a single order cutoff time, but with the Handling Time Option, a seller can set a different order cutoff time for each business day. Currently, eBay Guaranteed Delivery is only available in the US.</span>
	//
	DispatchCutoffTimePreference *DispatchCutoffTimePreferencesType `xml:"DispatchCutoffTimePreference,omitempty"`

	//
	// If this flag is included and set to <code>true</code>, the seller's new listings will enable the Global Shipping Program by default.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field is ignored for sellers who are not opted in to the Global Shipping Program (when GetUserPreferences returns <strong>OfferGlobalShippingProgramPreference</strong> with a value of <code>false</code>).
	// </span>
	//
	GlobalShippingProgramListingPreference bool `xml:"GlobalShippingProgramListingPreference,omitempty"`

	//
	// If this flag is included and set to <code>true</code>, and the seller specifies an international shipping service to a particular country for a given listing, the specified service will take precedence and be the listing's default international shipping option for buyers in that country, rather than the Global Shipping Program. The Global Shipping Program will still be the listing's default option for shipping to any Global Shipping-eligible country for which the seller does <em>not</em> specify an international shipping service.
	// <br/><br/>
	// If this flag is set to <code>false</code>, the Global Shipping Program will be each Global Shipping-eligible listing's default option for shipping to any Global Shipping-eligible country, regardless of any international shipping service that the seller specifies for the listing.
	//
	OverrideGSPserviceWithIntlService bool `xml:"OverrideGSPserviceWithIntlService,omitempty"`

	//
	// If this flag is included and set to <code>true</code>, it enables the Out-of-Stock feature. A seller would use this feature to keep Fixed-Price GTC (Good 'Til Canceled) listings alive even when the "quantity available" value goes to 0 (zero). This is useful when waiting for additional stock and eliminates the need to end the listing and then recreating it when stock arrives. <br/><br/>
	// While the "quantity available" value is 0, the listing would be hidden from eBay search and if that item was specifically searched for with <b>GetItem</b> (or related call), the element <b>HideFromSearch</b> would be returned as 'true' and <b>ReasonHideFromSearch</b> would be returned as 'OutOfStock'.
	// <br/><br/>
	// When stock is available, the seller can use the <b>Revise</b> calls to update the inventory of the item (through the <b>Item.Quantity</b> or <b>Item.Variations.Variation.Quantity</b> fields) and the listing would appear again.
	// <br/><br/>
	// You can return the value of this flag using the <a href="GetUserPreferences.html#Request.ShowOutOfStockControlPreference">GetUserPreferences</a> call and setting the <b>ShowOutOfStockControlPreference</b> field to 'true'. <br/><br/>
	// <span class="tablenote"><b>IMPORTANT: </b> When a listing using the Out-of-Stock feature has zero quantity, the seller has 90 days to add inventory without incurring a listing fee. Fees are changed at the end of each the billing cycle but are then refunded if the item is out-of-stock for an entire billing period. See <a href="../../../../guides/ebayfeatures/Development/Listings-UseOutOfStock.html#FeesForaListingWithZeroQuantity">Fees For a Listing With Zero Quantity</a> for details. </span>
	//
	OutOfStockControlPreference bool `xml:"OutOfStockControlPreference,omitempty"`
}

type SetUserPreferencesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents SetUserPreferencesResponse"`

	*AbstractResponseType
}

type UploadSiteHostedPicturesRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents UploadSiteHostedPicturesRequest"`

	*AbstractRequestType

	//
	// A seller-defined name for the picture. This field is optional, but can make it easier for a seller to track than an arbitrary, eBay-assigned URL.
	//
	PictureName string `xml:"PictureName,omitempty"`

	//
	// Specifies the picture system version. Only version 2 is valid.
	// Available to support future changes in the picture system version.
	//
	PictureSystemVersion int32 `xml:"PictureSystemVersion,omitempty"`

	//
	// This enumeration value indicates the size of the picture that will be generated.
	// <br/><br/>
	// <span class="tablenote"><b>IMPORTANT: </b>
	// To get the standard website image sizing with Zoom, set this field to <b>Supersize</b>.
	// </span>
	//
	PictureSet *PictureSetCodeType `xml:"PictureSet,omitempty"`

	//
	// An optional reference ID to the binary attachment.
	// <br/><br/>
	// The <b>PictureData</b> field does not contain the binary attachment. The binary attachment is image data, including the headers, from a JPG, GIF, PNG, BMP, or TIF format image file. The binary attachment must be sent as a MIME attachment, in your POST request, after the XML input.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This field is not applicable for eBay Large Merchant Services. Use the
	// <b>ExternalPictureURL</b> field instead.
	// </span>
	//
	PictureData *Base64BinaryType `xml:"PictureData,omitempty"`

	//
	// Determines if the uploaded picture is to replace all the pictures or to be added to the pictures currently available to a seller on the eBay site. The picture is available to the seller on the My Picture Uploads tab within the Sell Your Item pages.
	// <br/><br/>
	// The picture you upload (and its URL) is stored for a period of time on the EPS server. If, within that time, the picture is associated with an item, then the picture persists on the eBay site for the same time length as other pictures uploaded using the <b>UploadSiteHostedPictures</b> call.
	// <br/><br/>
	// The expiration date of the picture is returned in the  <b>SiteHostedPictureDetails.UseByDate</b> field in the response.
	//
	PictureUploadPolicy *PictureUploadPolicyCodeType `xml:"PictureUploadPolicy,omitempty"`

	//
	// This field is used if the seller wishes to upload a picture to the EPS server that is currently on another external site. The URL of the picture you want to upload is passed in this field. Both http:// and https:// servers are supported.
	// You can  include only one <b>ExternalPictureURL</b> field per call.
	// <br><br>
	// The eBay server uses the information in this field to retrieve a picture from an external web server. Once retrieved, the picture will be copied to eBay Picture Services and retained for 30 days if not associated with a listing. When associated with a listing, the duration is the length of the listing plus 90 days.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// Although both the HTTP and HTTPS protocols are currently supported, in the near future, eBay will no longer allow the hosting or transfer of images on a server using the the HTTP protocol.
	// </span>
	//
	ExternalPictureURL []*AnyURI `xml:"ExternalPictureURL,omitempty"`

	//
	// This field is deprecated.
	//
	PictureWatermark []*PictureWatermarkCodeType `xml:"PictureWatermark,omitempty"`

	//
	// By default, an unpublished picture will be hosted on the EPS server for five days before being purged. However, the seller has the option of using this field to set an expiration date further into the future (up to 30 days). Similarly, when a listing ends or expires, the images associated with the listing remain on the EPS server for an additional 90 days. The value in this field will add on to those 90 days.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>This call is restricted to applications that have been granted permission. Contact the eBay Developers Program to request permission.
	// </span>
	//
	ExtensionInDays int32 `xml:"ExtensionInDays,omitempty"`
}

type UploadSiteHostedPicturesResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents UploadSiteHostedPicturesResponse"`

	*AbstractResponseType

	//
	// Specifies the picture system version that was used to upload pictures.
	// Only version 2 is valid.
	//
	PictureSystemVersion int32 `xml:"PictureSystemVersion,omitempty"`

	//
	// The information about an <b>UploadSiteHostedPictures</b> upload, including the URL of the uploaded picture.
	//
	SiteHostedPictureDetails *SiteHostedPictureDetailsType `xml:"SiteHostedPictureDetails,omitempty"`
}

type ValidateChallengeInputRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ValidateChallengeInputRequest"`

	*AbstractRequestType

	//
	// Botblock token that was returned by <b>GetChallengeToken</b>.
	//
	ChallengeToken string `xml:"ChallengeToken,omitempty"`

	//
	// User response to a bot block challenge.
	//
	UserInput string `xml:"UserInput,omitempty"`

	//
	// This boolean field is included and set to 'true' if the challenge token should remain valid for up to two minutes.
	//
	KeepTokenValid bool `xml:"KeepTokenValid,omitempty"`
}

type ValidateChallengeInputResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ValidateChallengeInputResponse"`

	*AbstractResponseType

	//
	// Indicates whether the token is valid.
	//
	ValidToken bool `xml:"ValidToken,omitempty"`
}

type ValidateTestUserRegistrationRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ValidateTestUserRegistrationRequest"`

	*AbstractRequestType

	//
	// Value for the feedback score of a user. If no value is passed in the request,
	// or if the value is zero, the feedback score is unchanged. This element is not intended
	// for regularly testing feedback because the feedback value can change after the request.
	//
	FeedbackScore int32 `xml:"FeedbackScore,omitempty"`

	//
	// Value for the date and time that a user's registration begins.
	//
	RegistrationDate time.Time `xml:"RegistrationDate,omitempty"`

	//
	// This field is no longer applicable since the Seller Assistant feature is no longer available.
	//
	SubscribeSA bool `xml:"SubscribeSA,omitempty"`

	//
	// This field is no longer applicable since the Seller Assistant Pro feature is no longer available.
	//
	SubscribeSAPro bool `xml:"SubscribeSAPro,omitempty"`

	//
	// Indicates if a user subscribes to Selling Manager. You cannot
	// request to subscribe a user to both Selling Manager and
	// Selling Manager Pro. You cannot request to unsubscribe a user.
	//
	SubscribeSM bool `xml:"SubscribeSM,omitempty"`

	//
	// Indicates if a user subscribes to Selling Manager Pro. You cannot
	// request to subscribe a user to both Selling Manager and
	// Selling Manager Pro. You cannot request to unsubscribe a user.
	//
	SubscribeSMPro bool `xml:"SubscribeSMPro,omitempty"`
}

type ValidateTestUserRegistrationResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ValidateTestUserRegistrationResponse"`

	*AbstractResponseType
}

type VeROReportItemsRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VeROReportItemsRequest"`

	*AbstractRequestType

	//
	// User ID of the VeRO member reporting the items.
	//
	RightsOwnerID *UserIDType `xml:"RightsOwnerID,omitempty"`

	//
	// Container (packet) for items being reported. You can report the same item
	// more than once in a packet if a different reason code is used each time.
	//
	ReportItems *VeROReportItemsType `xml:"ReportItems,omitempty"`
}

type VeROReportItemsResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VeROReportItemsResponse"`

	*AbstractResponseType

	//
	// A unique packet identifier for the items reported.
	//
	VeROReportPacketID int64 `xml:"VeROReportPacketID,omitempty"`

	//
	// The processing status of the packet.
	//
	VeROReportPacketStatus *VeROReportPacketStatusCodeType `xml:"VeROReportPacketStatus,omitempty"`
}

type VerifyAddFixedPriceItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyAddFixedPriceItemRequest"`

	*AbstractRequestType

	//
	// Root container holding all values that define a new
	// fixed-price listing.
	//
	Item *ItemType `xml:"Item,omitempty"`
}

type VerifyAddFixedPriceItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyAddFixedPriceItemResponse"`

	*AbstractResponseType

	//
	// With a successful <b>VerifyAddFixedPriceItem</b> call, this field is always returned, but the returned value is always <code>0</code>, since this call only validates the data passed in through the request payload and does not actually create an active listing.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Item-level SKU for the new listing, if the seller specified
	// tem.SKU in the request. Variation SKUs are not returned
	// (see GetItem instead).
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// Child elements contain the estimated listing fees for the new item listing.
	// The fees do not include the Final Value Fee (FVF), which cannot be determined
	// until an item is sold.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressListing bool `xml:"ExpressListing,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressItemRequirements *ExpressItemRequirementsType `xml:"ExpressItemRequirements,omitempty"`

	//
	// ID of the primary category in which the item would be listed.
	// Only returned if you set Item.CategoryMappingAllowed to true in the request
	// and the ID you passed in PrimaryCategory was mapped to a new ID by eBay.
	// If the primary category has not changed or it has expired with no replacement,
	// CategoryID does not return a value.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// ID of the secondary category in which the item would be listed.
	// Only returned if you set Item.CategoryMappingAllowed to true in the request
	// and the ID you passed in SecondaryCategory was mapped to a new ID by eBay.
	// If the secondary category has not changed or it has expired with no replacement,
	// Category2ID does not return a value.
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// The nature of the discount, if a discount would have applied
	// had this actually been listed at this time.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b> flag was included and set to 'true' in the <b>VerifyAddFixedPriceItem</b> request, and if at least one listing recommendation exists for the listing about to be listed. If one or more listing recommendations are returned, it will be at the seller's discretion about whether to revise the listing based on eBay's listing recommendation(s) before actually creating the listing through an <b>AddFixedPriceItem</b> call.
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type VerifyAddItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyAddItemRequest"`

	*AbstractRequestType

	//
	// Root container holding all values that define a new
	// listing.
	//
	Item *ItemType `xml:"Item,omitempty"`
}

type VerifyAddItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyAddItemResponse"`

	*AbstractResponseType

	//
	// With a successful <b>VerifyAddItem</b> call, this field is always returned, but the returned value is always <code>0</code>, since this call only validates the data passed in through the request payload and does not actually create an active listing.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Child Fee containers provide the listing feature names, fees, and possible discounts for the new item listing. The fees do not include the Final Value Fee (FVF), which cannot be determined until an item is sold. <br /> <br /> There is no guarantee that a PromotionalDiscount returned with VerifyAddItem will be realized when the seller uses AddItem to list the same item. This is the result of the timing of certain promotions.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressListing bool `xml:"ExpressListing,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressItemRequirements *ExpressItemRequirementsType `xml:"ExpressItemRequirements,omitempty"`

	//
	// ID of the primary category in which the item would be listed.
	// Only returned if you set Item.CategoryMappingAllowed to true in the request
	// and the ID you passed in PrimaryCategory was mapped to a new ID by eBay.
	// If the primary category has not changed or it has expired with no replacement,
	// CategoryID does not return a value.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// ID of the secondary category in which the item would be listed.
	// Only returned if you set Item.CategoryMappingAllowed to true in the request
	// and the ID you passed in SecondaryCategory was mapped to a new ID by eBay.
	// If the secondary category has not changed or it has expired with no replacement,
	// Category2ID does not return a value.
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// The nature of the discount, if a discount would have applied
	// had this actually been listed at this time.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Provides a list of products recommended by eBay which match the item information provided by the seller.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b>
	// flag was included and set to 'true' in the <b>VerifyAddItem</b> request, and if
	// at least one listing recommendation exists for the listing about to be listed. If
	// one or more listing recommendations are returned, it will be at the seller's
	// discretion about whether to revise the listing based on eBay's listing
	// recommendation(s) before actually creating the listing through an
	// <b>AddItem</b> call.
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type VerifyAddSecondChanceItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyAddSecondChanceItemRequest"`

	*AbstractRequestType

	//
	// Specifies the bidder from the original, ended listing to whom the seller
	// is extending the second chance offer. Specify only one
	// <b>RecipientBidderUserID</b> per call. If multiple users are specified (each in a
	// <b>RecipientBidderUserID</b> node), only the last one specified receives the
	// offer.
	//
	RecipientBidderUserID *UserIDType `xml:"RecipientBidderUserID,omitempty"`

	//
	// Specifies the amount the offer recipient must pay to purchase the item
	// from the Second Chance Offer listing. Use only when the original item was
	// an eBay Motors (or in some categories on U.S. and international sites for
	// high-priced items, such as items in many U.S. and Canada Business and
	// Industrial categories) and it ended unsold because the reserve price was
	// not met. Call fails with an error for any other item conditions.
	//
	BuyItNowPrice *AmountType `xml:"BuyItNowPrice,omitempty"`

	//
	// Specifies the length of time the Second Chance Offer listing will be
	// active. The recipient bidder has that much time to purchase the item or
	// the listing expires.
	//
	Duration *SecondChanceOfferDurationCodeType `xml:"Duration,omitempty"`

	//
	// This field is used to identify the recently-ended auction listing for which a Second Chance Offer will be made to one of the non-winning bidders on the recently-ended auction listing.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Message content. Cannot contain HTML, asterisks, or quotes. This content
	// is included in the Second Chance Offer email sent to the recipient, which
	// can be retrieved with <b>GetMyMessages</b>.
	//
	SellerMessage string `xml:"SellerMessage,omitempty"`
}

type VerifyAddSecondChanceItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyAddSecondChanceItemResponse"`

	*AbstractResponseType

	//
	// Indicates the date and time when the the new
	// Second Chance Offer listing became active and
	// the recipient user could purchase the item.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Indicates the date and time when the Second Chance Offer listing expires, at which time
	// the listing ends (if the recipient user does
	// not purchase the item first).
	//
	EndTime time.Time `xml:"EndTime,omitempty"`
}

type VerifyRelistItemRequestType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyRelistItemRequest"`

	*AbstractRequestType

	//
	// The <b>Item</b> container is used to configure the item that will be relisted. If the seller plans to relist the item with no changes, the only field under the <b>Item</b> container that is required is the <b>ItemID</b> field. In the <b>ItemID</b> field, the seller specifies the item that will be relisted. If the seller wishes to change anything else for the listing, the seller should include this field in the call request and give it a new value.
	// <br/><br/>
	// If the seller wants to delete one or more optional settings in the listing, the seller should use the <b>DeletedField</b> tag.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Specifies the name of the field to delete from a listing. See the eBay Features Guide for rules on deleting values when relisting items. Also see the relevant field descriptions to determine when to use <b>DeletedField</b> (and potential consequences).
	// The request can contain zero, one, or many instances of <b>DeletedField</b> (one for each field to be deleted).
	// <br><br>
	// Case-sensitivity must be taken into account when using a <b>DeletedField</b> tag to delete a field. The value passed into a <b>DeletedField</b> tag must either match the case of the schema element names in the full field path (Item.PictureDetails.GalleryURL), or the initial letter of each schema element name in the full field path must be  lowercase (item.pictureDetails.galleryURL).
	// Do not change the case of letters in the middle of a field name.
	// For example, item.picturedetails.galleryUrl is not allowed.<br><br>
	// To delete a listing enhancement like 'BoldTitle', specify the value you are deleting;
	// for example, Item.ListingEnhancement[BoldTitle].
	//
	DeletedField []string `xml:"DeletedField,omitempty"`
}

type VerifyRelistItemResponseType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents VerifyRelistItemResponse"`

	*AbstractResponseType

	//
	// With a successful <b>VerifyRelistItem</b> call, this field is always returned, but the returned value is always <code>0</code>, since this call only validates the data passed in through the request payload and does not actually relist an item.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This container consists of the estimated listing fees for the item that is to be relisted. Each type of fee is returned even if it is not appplicable (has a value of <code>0.0</code>. The Final Value Fee (FVF) is not in this container, as this value cannot be determined until a sale is made.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// This timestamp indicates the date and time when the item to be relisted became active on the eBay site.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This timestamp indicates the date and time when the item to be relisted is scheduled to end on the eBay site. This date/time is calculated by using the <b>StartTime</b> and the the listing duration.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This field is returned if an eBay special offer or promotion is applicable to the listing.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Provides a list of products recommended by eBay which match the item information provided by the seller.
	//
	ProductSuggestions *ProductSuggestionsType `xml:"ProductSuggestions,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b> flag was included and set to 'true' in the <b>VerifyRelistItem</b> request, and if at least one listing recommendation exists for the item about to be relisted. If one or more listing recommendations are returned, it will be at the seller's discretion about whether to revise the item based on eBay's listing recommendation(s) before actually relisting the item through a <b>RelistItem</b> call.
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type AbstractRequestType struct {

	//
	// Detail levels are instructions that define standard subsets of
	// data to return for particular data components (e.g., each
	// Item, Transaction, or User) within the response payload.
	// For example, a particular detail level might cause the
	// response to include buyer-related data in every result
	// (e.g., for every Item), but no seller-related data.
	// <br/><br/>
	// Specifying a detail level is like using a
	// predefined attribute list in the SELECT clause of an SQL query.
	// Use the <b>DetailLevel</b> element to specify the required detail level
	// that the client application needs pertaining to the data components
	// that are applicable to the request.
	// <br><br>
	// The <b>DetailLevelCodeType</b> defines the
	// global list of available detail levels for all request types.
	// Most request types support certain detail
	// levels or none at all. If you pass a detail level that exists
	// in the schema but that isn't valid for a particular request,
	// eBay ignores it and processes the request without it.
	// <br/><br/>
	// For each request type, see the detail level tables in the
	// Input/Output Reference to determine which detail levels are
	// applicable and which elements are returned for each applicable
	// detail level.
	// <br><br>Note that <b>DetailLevel</b> is required input for
	// <b>GetMyMessages</b>. <br>
	// <br>
	// With <b>GetSellerList</b> and other calls that retrieve large data sets,
	// please avoid using <b>ReturnAll</b> when possible. For example, if you use
	// <b>GetSellerList</b>, use <b>GranularityLevel</b> instead, or use <b>GetSellerEvents</b>. If you do use 'ReturnAll' with
	// <b>GetSellerList</b>, use a small <b>Pagination.EntriesPerPage</b> value and a narrow
	// <b>EndTimeFrom</b>/<b>EndTimeTo</b> date range for better performance.
	//
	DetailLevel []*DetailLevelCodeType `xml:"DetailLevel,omitempty"`

	//
	// Use <b>ErrorLanguage</b> to return error strings for the call in a different language
	// from the language commonly associated with the site that the requesting user
	// is registered with. Specify the standard RFC 3066 language identification tag
	// (e.g., en_US).
	// <br><br>
	// <table border="0">
	// <tr>
	// <th>ID</th>
	// <th>Country</th>
	// </tr>
	// <tr>
	// <td>en_AU</td>
	// <td>Australia</td>
	// </tr>
	// <tr>
	// <td>de_AT</td>
	// <td>Austria</td>
	// </tr>
	// <tr>
	// <td>nl_BE</td>
	// <td>Belgium (Dutch)</td>
	// </tr>
	// <tr>
	// <td>fr_BE</td>
	// <td>Belgium (French)</td>
	// </tr>
	// <tr>
	// <td>en_CA</td>
	// <td>Canada</td>
	// </tr>
	// <tr>
	// <td>fr_CA</td>
	// <td>Canada (French)</td>
	// </tr>
	// <tr>
	// <td>zh_CN</td>
	// <td>China</td>
	// </tr>
	// <tr>
	// <td>fr_FR</td>
	// <td>France</td>
	// </tr>
	// <tr>
	// <td>de_DE</td>
	// <td>Germany</td>
	// </tr>
	// <tr>
	// <td>zh_HK</td>
	// <td>Hong Kong</td>
	// </tr>
	// <tr>
	// <td>en_IN</td>
	// <td>India</td>
	// </tr>
	// <tr>
	// <td>en_IE</td>
	// <td>Ireland</td>
	// </tr>
	// <tr>
	// <td>it_IT</td>
	// <td>Italy</td>
	// </tr>
	// <tr>
	// <td>nl_NL</td>
	// <td>Netherlands</td>
	// </tr>
	// <tr>
	// <td>en_SG</td>
	// <td>Singapore</td>
	// </tr>
	// <tr>
	// <td>es_ES</td>
	// <td>Spain</td>
	// </tr>
	// <tr>
	// <td>de_CH</td>
	// <td>Switzerland</td>
	// </tr>
	// <tr>
	// <td>en_GB</td>
	// <td>United Kingdom</td>
	// </tr>
	// <tr>
	// <td>en_US</td>
	// <td> United States</td>
	// </tr>
	// </table>
	//
	ErrorLanguage string `xml:"ErrorLanguage,omitempty"`

	//
	// Most Trading API calls support a <b>MessageID</b> element in the request
	// and a <b>CorrelationID</b> element in the response. If you pass in a
	// <b>MessageID</b> in a request, the same value will be returned in the
	// <b>CorrelationID</b> field in the response. Pairing these values can
	// help you track and confirm that a response is returned for every request and to
	// match specific responses to specific requests.
	// If you do not pass a <b>MessageID</b> value in the request,
	// <b>CorrelationID</b> is not returned.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// <b>GetCategories</b> is designed to retrieve very large sets of metadata
	// that change once a day or less often. To improve performance, these calls return
	// cached responses when you request all available data (with no filters). When this
	// occurs, the <b>MessageID</b> and <b>CorrelationID</b> fields
	// aren't applicable. However, if you specify an input filter to reduce the amount of
	// data returned, the calls retrieve the latest data (not cached). When this occurs,
	// <b>MessageID</b> and <b>CorrelationID</b> are applicable.
	// </span>
	//
	MessageID string `xml:"MessageID,omitempty"`

	//
	// The version number of the API code that you are
	// programming against (e.g., 859).
	// The version you specify for a call has these basic effects:
	// <b></b>
	// <ul>
	// <li>It indicates the version of the code lists and other
	// data that eBay should use to process your request.</li>
	// <li>It indicates the schema version you are using.</li>
	// </ul>
	// You need to use a version that is greater than or equal to the
	// lowest supported version.
	// <br>
	// <b>For the SOAP API:</b> If you are using the SOAP API,
	// this field is required. Specify the version of the WSDL your
	// application is using.<br>
	// <br>
	// <b>For the XML API:</b> If you are using the XML API,
	// this field has no effect. Instead, specify the version in the
	// <b>X-EBAY-API-COMPATIBILITY-LEVEL</b> HTTP header.
	// (If you specify <b>Version</b> in the body of an XML API request and it
	// is different from the value in the HTTP header, eBay returns an
	// informational warning that the value in the HTTP header was used
	// instead.)
	//
	Version string `xml:"Version,omitempty"`

	//
	// The public IP address of the machine from which the request is sent.
	// Your application captures that IP address and includes it in
	// a call request. eBay evaluates requests for safety (also see
	// the <b>BotBlock</b> container
	// in the request and response of this call).
	//
	EndUserIP string `xml:"EndUserIP,omitempty"`

	//
	// Error tolerance level for the call. This is a preference
	// that specifies how eBay should handle requests that contain
	// invalid data or that could partially fail. This gives you some control
	// over whether eBay returns warnings or blocking errors
	// and how eBay processes the invalid data.<br>
	// <br>
	// This field is only applicable to <b>AddItem</b> and related calls,
	// and only when the listing includes <b>ProductListingDetails</b>.
	//
	ErrorHandling *ErrorHandlingCodeType `xml:"ErrorHandling,omitempty"`

	//
	// A unique identifier for a particular call. If the same <b>InvocationID</b> is passed
	// in after it has been passed in once on a call that succeeded for a particular
	// application and user, then an error will be returned. The identifier can
	// only contain digits from 0-9 and letters from A-F. The
	// identifier must be 32 characters long.  For example,
	// 1FB02B2-9D27-3acb-ABA2-9D539C374228.
	//
	InvocationID *UUIDType `xml:"InvocationID,omitempty"`

	//
	// You can use the <b>OutputSelector</b> field to restrict the data returned by a call. This field can make the call response easier to manage, especially when a large payload is returned. If you use the <b>OutputSelector</b> field, the output data will only include the field(s) you specified in the request, as well as all of its child fields (if a field is a container) and its parent fields (if any). Note that it is possible that a field included through an <b>OutputSelector</b> field may still not be returned if it is not applicable, or if it is not found based on other criteria set up in the request payload.
	// <br>
	// <br>
	// For example, if you are using <b>GetItem</b> and you only want to retrieve the URL of the View Item page (emitted in <b>ViewItemURL</b> field) and the item's Buy It Now price (emitted in <b>BuyItNowPrice</b> field), you would include two separate <b>OutputSelector</b> fields and set the value for each one as <b>ViewItemURL</b> and <b>BuyItNowPrice</b> as in the following example:
	// <br>
	// <br>
	// <pre>
	// <b>If the following output selectors are used:</b>
	// <br><br>...<br>
	// <code>&lt;OutputSelector&gt;ViewItemURL&lt;/OutputSelector&gt;<br>
	// &lt;OutputSelector&gt;BuyItNowPrice&lt;/OutputSelector&gt;
	// </code><br>...
	// <br><br>
	// <b>...the response might look like the following</b>
	// <br><br>
	// <code>
	// &lt;Item&gt;<br>
	// &lt;BuyItNowPrice currencyID="USD"&gt;0.0&lt;/BuyItNowPrice&gt;<br>
	// &lt;ListingDetails&gt;<br>
	// &lt;ViewItemURL&gt;http://www.ebay.com/itm/Tag-Heuer-Mens-Watch/182879833261&lt;/ViewItemURL&gt;<br>
	// &lt;/ListingDetails&gt;<br>
	// &lt;/Item&gt;
	// </code>
	// </pre>
	//
	OutputSelector []string `xml:"OutputSelector,omitempty"`

	//
	// Controls whether or not to return warnings when the application passes
	// unrecognized or deprecated elements in a request.<br>
	// <br>
	// An unrecognized element is one that is not defined in any supported
	// version of the schema. Schema element names are case-sensitive,
	// so using <b>WarningLevel</b> can also help you remove any potential hidden
	// bugs within your application due to incorrect case or spelling in
	// field names before you put your application into the
	// Production environment.<br>
	// <br>
	// <b>WarningLevel</b> only validates elements; it doesn't validate
	// XML attributes. It also doesn't control warnings related to
	// user-entered strings or numbers, or warnings for
	// logical errors.<br>
	// <br>
	// We recommend that you only use this during development and debugging.
	// Do not use this in requests performed in the Production environment.
	//
	WarningLevel *WarningLevelCodeType `xml:"WarningLevel,omitempty"`

	//
	// This container is only used by the <b>PlaceOffer</b> call request if the previous <b>PlaceOffer</b> call resulted in a <b>BotBlock</b> container in the response. If the caller receives this container in the response, that caller must make another <b>PlaceOffer</b> call, this time, passing in the encrypted token and URL that is returned in the <b>BotBlock</b> container in the response. This safeguard lets eBay know that a real user is making a <b>PlaceOffer</b> call and not a bot.
	//
	BotBlock *BotBlockRequestType `xml:"BotBlock,omitempty"`
}

type AbstractResponseType struct {

	//
	// This value represents the date and time when eBay processed the
	// request. The time zone of this value is GMT and the format is the
	// ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ). See the <b>Time
	// Values</b> section in the eBay Features Guide for information about this
	// time format and converting to and from the GMT time zone. <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// <b>GetCategories</b> and other Trading API calls are designed to retrieve very large sets
	// of metadata that change once a day or less often. To improve performance, these
	// calls return cached responses when you request all available data (with no
	// filters). When this occurs, this time value reflects the time the cached response
	// was created. Thus, this value is not necessarily when the request was processed.
	// However, if you specify an input filter to reduce the amount of data returned, the
	// calls retrieve the latest data (not cached). When this occurs, this time value does
	// reflect when the request was processed.</span>
	//
	Timestamp time.Time `xml:"Timestamp,omitempty"`

	//
	// A token representing the application-level acknowledgement code that indicates
	// the response status (e.g., success). The <b>AckCodeType</b> list specifies
	// the possible values for the <b>Ack</b> field.
	//
	Ack *AckCodeType `xml:"Ack,omitempty"`

	//
	// Most Trading API calls support a <b>MessageID</b> element in the request
	// and a <b>CorrelationID</b> element in the response. If you pass in a
	// <b>MessageID</b> in a request, the same value will be returned in the
	// <b>CorrelationID</b> field in the response. Pairing these values can
	// help you track and confirm that a response is returned for every request and to
	// match specific responses to specific requests.
	// If you do not pass a <b>MessageID</b> value in the request,
	// <b>CorrelationID</b> is not returned.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// <b>GetCategories</b> is designed to retrieve very large sets of metadata
	// that change once a day or less often. To improve performance, these calls return
	// cached responses when you request all available data (with no filters). When this
	// occurs, the <b>MessageID</b> and <b>CorrelationID</b> fields
	// aren't applicable. However, if you specify an input filter to reduce the amount of
	// data returned, the calls retrieve the latest data (not cached). When this occurs,
	// <b>MessageID</b> and <b>CorrelationID</b> are applicable.
	// </span>
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`

	//
	// A list of application-level errors (if any) that occurred when eBay
	// processed the request.
	//
	Errors []*ErrorType `xml:"Errors,omitempty"`

	//
	// Supplemental information from eBay, if applicable. May elaborate on
	// errors (such as how a listing violates eBay policies) or provide
	// useful hints that may help a seller increase sales. This data can
	// accompany the call's normal data result set or a result set that
	// contains only errors. <br>
	// <br>
	// Applications must recognize when the <b>Message</b> field is returned and
	// provide a means to display the listing hints and error message
	// explanations to the user. <br>
	// <br>
	// The string can return HTML, including TABLE, IMG, and HREF elements.
	// In this case, an HTML-based application should be able to include
	// the HTML as-is in the HTML page that displays the results.
	// A non-HTML application would need to parse the HTML
	// and convert the table elements and image references into UI elements
	// particular to the programming language used.
	// As usual for string data types, the HTML markup elements are escaped
	// with character entity references
	// (e.g.,&lt;table&gt;&lt;tr&gt;...).
	//
	Message string `xml:"Message,omitempty"`

	//
	// The version of the response payload schema. Indicates the version of the schema that eBay used to process the request. See the <b>Standard Data for All Calls</b> section in the eBay Features Guide for information on using the response version when troubleshooting <b>CustomCode</b> values that appear in the response.
	//
	Version string `xml:"Version,omitempty"`

	//
	// This refers to the specific software build that eBay used when processing the request
	// and generating the response. This includes the version number plus additional
	// information. eBay Developer Support may request the build information
	// when helping you resolve technical issues.
	//
	Build string `xml:"Build,omitempty"`

	//
	// Event name of the notification. Only returned by Platform Notifications.
	//
	NotificationEventName string `xml:"NotificationEventName,omitempty"`

	//
	// Information that explains a failure due to a duplicate <b>InvocationID</b> being
	// passed in.
	//
	DuplicateInvocationDetails *DuplicateInvocationDetailsType `xml:"DuplicateInvocationDetails,omitempty"`

	//
	// Recipient user ID of the notification. Only returned by Platform Notifications.
	//
	RecipientUserID string `xml:"RecipientUserID,omitempty"`

	//
	// Unique Identifier of Recipient user ID of the notification. Only returned by
	// Platform Notifications (not for regular API call responses).
	//
	EIASToken string `xml:"EIASToken,omitempty"`

	//
	// A Base64-encoded MD5 hash that allows the recipient of a Platform
	// Notification to verify this is a valid Platform Notification sent by
	// eBay.
	//
	NotificationSignature string `xml:"NotificationSignature,omitempty"`

	//
	// Expiration date of the user's authentication token. Only returned
	// within the 7-day period prior to a token's expiration. To ensure
	// that user authentication tokens are secure and to help avoid a
	// user's token being compromised, tokens have a limited life span. A
	// token is only valid for a period of time (set by eBay). After this
	// amount of time has passed, the token expires and must be replaced
	// with a new token.
	//
	HardExpirationWarning string `xml:"HardExpirationWarning,omitempty"`

	//
	// This container is conditionally returned in the <b>PlaceOffer</b> call response if eBay wants to challenge the user making the call to ensure that the call is being made by a real user and not a bot. This container consist of an encrypted token, the URL of the image that should be displayed to the user, or the URL of an audio clip for sight-impaired users. After receiving this data in the response, the caller must make another <b>PlaceOffer</b> call, this time passing in the encrypted token and one of the URLs that was received in the previous call response.
	//
	BotBlock *BotBlockResponseType `xml:"BotBlock,omitempty"`

	//
	// An application subscribing to notifications can include an XML-compliant
	// string, not to exceed 256 characters, which will be returned. The string can
	// identify a particular user. Any sensitive information should be passed with due
	// caution.
	// <br><br>
	// To subscribe to and receive eBay Buyer Protection notifications, this field is
	// required, and you must pass in 'eBP notification' as a string.
	//
	ExternalUserData string `xml:"ExternalUserData,omitempty"`
}

type BotBlockRequestType struct {

	//
	// This string value is an encrypted token that eBay generates and returns in the <b>BotBlock.BotBlockToken</b> field of the <b>PlaceOffer</b> call response when eBay is requiring that the user supply an authentication token and URL in order for eBay to process the <b>PlaceOffer</b> call. As soon as a user gets a <b>BotBlock</b> container returned in the <b>PlaceOffer</b> call response, that user should grab the authentication token and the URL and then run another <b>PlaceOffer</b> call, but this time using the <b>BotBlock</b> container and passing in the authentication token and the URL values.
	//
	BotBlockToken string `xml:"BotBlockToken,omitempty"`

	//
	// This string value is a URL that eBay generates and returns in either the <b>BotBlock.BotBlockUrl</b> or <b>BotBlock.BotBlockAudioUrl</b> field (returned for site-impaired users) of the <b>PlaceOffer</b> call response when eBay is requiring that the user supply an authentication token and URL in order for eBay to process the <b>PlaceOffer</b> call. As soon as a user gets a <b>BotBlock</b> container returned in the <b>PlaceOffer</b> call response, that user should grab the authentication token and the URL and then run another <b>PlaceOffer</b> call, but this time using the <b>BotBlock</b> container and passing in the authentication token and the URL values.
	//
	BotBlockUserInput string `xml:"BotBlockUserInput,omitempty"`
}

type BotBlockResponseType struct {

	//
	// This string value is an encrypted token that eBay generates and returns in the <b>BotBlock.BotBlockToken</b> field of the <b>PlaceOffer</b> call response when eBay is requiring that the user supply an authentication token and URL in order for eBay to process the <b>PlaceOffer</b> call. As soon as a user gets a <b>BotBlock</b> container returned in the <b>PlaceOffer</b> call response, that user should grab the authentication token and the URL and then run another <b>PlaceOffer</b> call, but this time using the <b>BotBlock</b> container and passing in the authentication token and the URL values.
	//
	BotBlockToken string `xml:"BotBlockToken,omitempty"`

	//
	// This string value is a URL to an image that eBay generates and returns in the <b>PlaceOffer</b> call response when eBay is requiring that the user supply an authentication token and URL in order for eBay to process the <b>PlaceOffer</b> call. As soon as a user gets a <b>BotBlock</b> container returned in the <b>PlaceOffer</b> call response, that user should grab the authentication token and this <b>BotBlockUrl</b> and then run another <b>PlaceOffer</b> call, but this time using the <b>BotBlock</b> container and passing in the authentication token and this URL value in the <b>BotBlockUserInput</b> field. For site-impaired users, the <b>BotBlockAudioUrl</b> field might be returned instead, in which case, the <b>BotBlockAudioUrl</b> value should be passed into the<b>BotBlockUserInput</b> field instead.
	//
	BotBlockUrl string `xml:"BotBlockUrl,omitempty"`

	//
	// This string value is a URL to an audio clip that eBay generates and returns in the <b>PlaceOffer</b> call response when eBay is requiring that the user supply an authentication token and URL in order for eBay to process the <b>PlaceOffer</b> call. As soon as a user gets a <b>BotBlock</b> container returned in the <b>PlaceOffer</b> call response, that user should grab the authentication token and this <b>BotBlockAudioUrl</b> and then run another <b>PlaceOffer</b> call, but this time using the <b>BotBlock</b> container and passing in the authentication token and this URL value in the <b>BotBlockUserInput</b> field.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// This field will generally only be returned for site-impaired users. If this field is not returned, but the <b>BotBlockUrl</b> field is returned instead, the <b>BotBlockUrl</b> value should be passed into the <b>BotBlockUserInput</b> field of the subsequent <b>PlaceOffer</b> call instead.
	// </span>
	//
	BotBlockAudioUrl string `xml:"BotBlockAudioUrl,omitempty"`
}

type CustomSecurityHeaderType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents RequesterCredentials"`

	//
	// Authentication token representing the user who is making the
	// request. The user's token must be retrieved from eBay. To determine
	// a user's authentication token, see the Authentication and
	// Authorization information in the eBay Web Services guide. For calls
	// that list or retrieve item or transaction data, the user usually
	// needs to be the seller of the item in question or, in some cases,
	// the buyer. Similarly, calls that retrieve user or account data may
	// be restricted to the user whose data is being requested. The
	// documentation for each call includes information about such
	// restrictions.
	//
	EBayAuthToken string `xml:"eBayAuthToken,omitempty"`

	//
	// Expiration date of the user's authentication token. Only returned
	// within the 7-day period prior to a token's expiration. To ensure
	// that user authentication tokens are secure and to help avoid a
	// user's token being compromised, tokens have a limited life span. A
	// token is only valid for a period of time (set by eBay). After this
	// amount of time has passed, the token expires and must be replaced
	// with a new token.
	//
	HardExpirationWarning string `xml:"HardExpirationWarning,omitempty"`

	//
	// Authentication information for the user on whose behalf the
	// application is making the request, and authorization information for
	// the application making the request. Only registered eBay users are
	// allowed to make API calls. To verify that a user is registered, your
	// application normally needs to pass a user-specific value called an
	// "authentication token" in the request. This is equivalent to signing
	// in on the eBay Web site. As API calls do not pass session
	// information, you need to pass the user's authentication token every
	// time you invoke a call on their behalf. All calls require an
	// authentication token, except the calls you use to retrieve a token
	// in the first place. For such calls, you use the eBay member's
	// username and password instead.
	//
	Credentials *UserIdPasswordType `xml:"Credentials,omitempty"`

	//
	// A Base64-encoded MD5 hash that allows the recipient of a Platform
	// Notification to verify this is a valid Platform Notification sent by
	// eBay.
	//
	NotificationSignature string `xml:"NotificationSignature,omitempty"`
}

type DisputeFilterCountType struct {

	//
	// A filter used to reduce the number of disputes returned. The filter uses criteria
	// such as whether the dispute is awaiting a response, is closed, or is eligible for
	// credit. Both <i>Unpaid Item</i> and <i>Item Not Received</i> disputes can be returned for the
	// same filter value.
	//
	DisputeFilterType *DisputeFilterTypeCodeType `xml:"DisputeFilterType,omitempty"`

	//
	// The number of disputes that match the filter.
	// In the <b>GetUserDisputes</b> response, not returned for the filter type
	// that was used in the request.
	//
	TotalAvailable int32 `xml:"TotalAvailable,omitempty"`
}

type DisputeMessageType struct {

	//
	// An ID that uniquely identifies the message.
	//
	MessageID int32 `xml:"MessageID,omitempty"`

	//
	// The party who posted the message: the buyer, the seller,
	// or an eBay representative.
	//
	MessageSource *DisputeMessageSourceCodeType `xml:"MessageSource,omitempty"`

	//
	// The date and time the message was created, in GMT.
	//
	MessageCreationTime time.Time `xml:"MessageCreationTime,omitempty"`

	//
	// The text of the message.
	//
	MessageText string `xml:"MessageText,omitempty"`
}

type DisputeResolutionType struct {

	//
	// The action resulting from the resolution, affecting either
	// the buyer or the seller.
	//
	DisputeResolutionRecordType *DisputeResolutionRecordTypeCodeType `xml:"DisputeResolutionRecordType,omitempty"`

	//
	// The reason for the resolution. The DisputeResolutionReason
	// results in the action described by the DisputeResolutionRecordType.
	//
	DisputeResolutionReason *DisputeResolutionReasonCodeType `xml:"DisputeResolutionReason,omitempty"`

	//
	// The date and time the dispute was resolved, in GMT.
	//
	ResolutionTime time.Time `xml:"ResolutionTime,omitempty"`
}

type DuplicateInvocationDetailsType struct {

	//
	// This value represents the duplicate <b>InvocationID</b> or <b>InvocationTrackingID</b> that was used in the call request.
	//
	DuplicateInvocationID *UUIDType `xml:"DuplicateInvocationID,omitempty"`

	//
	// This enumeration value indicates the status of the previous call that used the <b>InvocationID</b> or <b>InvocationTrackingID</b> specified in the <b>DuplicateInvocationID</b>.
	//
	Status *InvocationStatusType `xml:"Status,omitempty"`

	//
	// This unique identifier identifies the business item the previous API invocation
	// created. For example, the Item ID of the item created by an <b>AddItem</b> call.
	//
	InvocationTrackingID string `xml:"InvocationTrackingID,omitempty"`
}

type ErrorParameterType struct {

	//
	// This is the value of the request parameter noted in the <b>ParamID</b> attribute. So, if the <b>ParamID</b> value was <b>ItemID</b>, the value in this field would be the actual value of that <b>ItemID</b>.
	//
	Value string `xml:"Value,omitempty"`

	//
	// This is name of the request parameter that has been pinpointed as the reason why the error or warning was triggered. This value might be <b>ItemID</b>, in which case the identifier of that item would be returned in the <b>Value</b> field.
	//
	ParamID string `xml:"ParamID,attr,omitempty"`
}

type ErrorType struct {

	//
	// A brief description of the condition that raised the error.
	//
	ShortMessage string `xml:"ShortMessage,omitempty"`

	//
	// A more detailed description of the condition that raised the error.
	//
	LongMessage string `xml:"LongMessage,omitempty"`

	//
	// A unique code that identifies the particular error condition that occurred.
	// Your application can use error codes as identifiers
	// in your customized error-handling algorithms. See the "Errors by Number" document.
	//
	ErrorCode string `xml:"ErrorCode,omitempty"`

	//
	// Indicates whether the error message text is intended to be displayed to an end user
	// or intended only to be parsed by the application. If true or not present (the default),
	// the message text is intended for the end user. If false, the message text is intended for
	// the application, and the application should translate the error into a more appropriate message.
	// Only applicable to Item Specifics errors and warnings returned from listing requests.
	//
	UserDisplayHint bool `xml:"UserDisplayHint,omitempty"`

	//
	// Indicates whether the error is a severe error (causing the request to fail)
	// or an informational error (a warning) that should be communicated to the user.
	//
	SeverityCode *SeverityCodeType `xml:"SeverityCode,omitempty"`

	//
	// This optional element carries a list of context-specific
	// error variables that indicate details about the error condition.
	// These are useful when multiple instances of <b>ErrorType</b> are returned.
	//
	ErrorParameters []*ErrorParameterType `xml:"ErrorParameters,omitempty"`

	//
	// API errors are divided between two classes: system errors and request errors.
	//
	ErrorClassification *ErrorClassificationCodeType `xml:"ErrorClassification,omitempty"`
}

type FaultDetailsType struct {

	//
	// Error code can be used by a receiving application to debug a SOAP response
	// message that contains one or more SOAP fault details.
	// Each error code is uniquely defined for each fault scenario.
	// See the eBay documentation for more information.
	// Your application can use error codes as identifiers
	// in your customized error-handling algorithms.
	//
	ErrorCode string `xml:"ErrorCode,omitempty"`

	//
	// Indicates whether the error is a severe error (causing the request to fail)
	// or an informational error (a warning).
	//
	Severity string `xml:"Severity,omitempty"`

	//
	// Description of the condition that caused the SOAP fault.
	//
	DetailedMessage string `xml:"DetailedMessage,omitempty"`
}

type MeasureType struct {
	Value float64

	//
	// Unit of measure. This attribute is shared by various fields,
	// representing units such as lbs, oz, kg, g, in, cm.
	// <br><br>
	// For weight, English major/minor units are pounds and ounces,
	// and metric major/minor units are kilograms and grams.
	// For length, the English unit is inches, and metric unit is centimeters.
	// <br><br>
	// To get the full list of package dimension and weight measurement units
	// (and all alternative spellings and abbreviations) supported by your site,
	// call <b>GeteBayDetails</b>.
	//
	Unit string `xml:"unit,attr,omitempty"`

	//
	// The system of measurement (e.g., English).
	//
	MeasurementSystem *MeasurementSystemCodeType `xml:"measurementSystem,attr,omitempty"`
}

type PaginationType struct {

	//
	// This integer value is used to specify the maximum number of entries to return
	// in a single "page" of data. This value, along with the number of entries that
	// match the input criteria, will determine the total pages (see
	// <b>PaginationResult.TotalNumberOfPages</b>) in the result set.
	// <br/><br/>
	// The maximum and default values are not the same for all calls. For most <b>Trading API</b> calls, the maximum value is 200 and the default value is 25 entries per page.
	// <br>
	//
	EntriesPerPage int32 `xml:"EntriesPerPage,omitempty"`

	//
	// Specifies the number of the page of data to return in the current call.
	// Default is 1 for most calls. For some calls, the default is 0. Specify a
	// positive value equal to or lower than the number of pages available (which you
	// determine by examining the results of your initial request).
	// See the documentation for the individual calls to determine the correct
	// default value.<br>
	//
	PageNumber int32 `xml:"PageNumber,omitempty"`
}

type QuantityType struct {
	Value float64

	Unit string `xml:"unit,attr,omitempty"`
}

type UserIdPasswordType struct {

	//
	// The application ID that is unique to each application you (or your company)
	// has registered with the eBay Developers Program. If you are executing a call
	// in the Sandbox, this is the "AppId" value that eBay issued to you when you
	// received your Sandbox keys. If you are executing a call in Production, this is
	// the "AppId" value that eBay issued to you when you received your Production
	// keys.
	//
	AppId string `xml:"AppId,omitempty"`

	//
	// The unique developer ID that the eBay Developers Program issued to you (or
	// your company). If you are executing a call in the Sandbox, this is the "DevId"
	// value that eBay issued to you when you received your Sandbox keys. Typically,
	// you receive your Sandbox keys when you register as a new developer. If you are
	// executing a call in Production, this is the "DevId" value that eBay issued to
	// you when you received your Production keys. Typically, you receive your
	// Production keys when you certify an application.
	//
	DevId string `xml:"DevId,omitempty"`

	//
	// Authentication certificate that authenticates the application when making API
	// calls. If you are executing a call in the Sandbox, this is the "CertId" value
	// that eBay issued to you when you received your Sandbox keys. If you are
	// executing a call in Production, this is the "CertId" value that eBay issued to
	// you when you received your Production keys. This is unrelated to auth tokens.
	//
	AuthCert string `xml:"AuthCert,omitempty"`

	//
	// eBay user ID (i.e., eBay.com Web site login name) for the user the application
	// is retrieving a token for. This is typically the application's end-user (not
	// the developer).
	//
	Username string `xml:"Username,omitempty"`

	//
	// Password for the user specified in Username.
	//
	Password string `xml:"Password,omitempty"`
}

type XMLRequesterCredentialsType struct {

	//
	// eBay user ID (i.e., eBay.com Web site login name) for the user the application
	// is retrieving a token for. This is typically the application's end-user (not
	// the developer).
	//
	Username string `xml:"Username,omitempty"`

	//
	// Password for the user specified in Username.
	//
	Password string `xml:"Password,omitempty"`

	//
	// Authentication token representing the user who is making the request. The
	// user's token must be retrieved from eBay. To determine a user's authentication
	// token, see the Authentication and Authorization information in the eBay Web
	// Services guide. For calls that list or retrieve item or transaction data, the
	// user usually needs to be the seller of the item in question or, in some cases,
	// the buyer. Similarly, calls that retrieve user or account data may be
	// restricted to the user whose data is being requested. The documentation for
	// each call includes information about such restrictions.
	//
	EBayAuthToken string `xml:"eBayAuthToken,omitempty"`
}

type ASQPreferencesType struct {

	//
	// This boolean field can be used in the <b>SetMessagePreferences</b> call to reset all custom Ask Seller a Question (ASQ) subjects to their default eBay values. For any given <b>SetMessagePreferences</b> call, either  <b>ResetDefaultSubjects</b> or one or more <b>Subject</b> fields can be used, but not both in the same call.
	//
	ResetDefaultSubjects bool `xml:"ResetDefaultSubjects,omitempty"`

	//
	// Each <b>Subject</b> field contains one custom Ask a Question (ASQ) subject. A maximum of nine custom ASQ subjects can be created. eBay's "General question about this item" subject will always be included in all listings.
	// <br><br>
	// For any given <b>SetMessagePreferences</b> call, either  <b>ResetDefaultSubjects</b> or one or more <b>Subject</b> fields can be used, but not both in the same call.  ASQ subjects are displayed on the drop-down list in the same order as they are passed in to the request. So, if the seller would like to rearrange the order of the ASQ subjects, they should keep this behavior in mind.
	// <br><br>
	// Note that the default ASQ subjects will display in the site's
	// language if retrieved from a site other than the seller's own.
	// For example, if a US seller sells on the German and French
	// sites, the default subjects will display in German and French,
	// respectively. However, if the seller adds custom subjects through the API on these sites, the custom subjects will display in the seller's own language - English in this use case.
	// <br><br>
	// The <b>GetMessagePreferences</b> call will retrieve all custom ASQ subjects that have been set by the seller. If custom ASQ subjects have not been set up by the seller, the eBay default ASQ subjects will be returned in the <b>Subject</b> fields instead.
	//
	Subject []string `xml:"Subject,omitempty"`
}

type AccountEntriesType struct {

	//
	// Container consisting of detailed information for each debit or credit transaction that occurs on an eBay user's account.
	//
	AccountEntry []*AccountEntryType `xml:"AccountEntry,omitempty"`
}

type AccountEntryType struct {

	//
	// This enumeration value indicates the type of transaction or administrative action that occurred on the eBay user's account. Possible values are defined in the <b>AccountDetailEntryCodeType</b> enumerated type.
	//
	AccountDetailsEntryType *AccountDetailEntryCodeType `xml:"AccountDetailsEntryType,omitempty"`

	//
	// The category of the monetary transaction or administrative action applied
	// to an eBay account.
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field is no longer returned. If the eBay user has an outstanding balance owed to eBay, the owed amount will be displayed in the <b>AccountSummary.CurrentBalance</b> field in the <b>GetAccount</b> response.
	//
	Balance *AmountType `xml:"Balance,omitempty"`

	//
	// Timestamp indicating the date and time that the entry was posted to the account, in
	// GMT.
	//
	Date time.Time `xml:"Date,omitempty"`

	//
	// Gross fees that are assessed by eBay (net fees plus VAT, if any).
	// Returned even if VAT does not apply.
	// The value is positive for debits and negative for credits.
	//
	GrossDetailAmount *AmountType `xml:"GrossDetailAmount,omitempty"`

	//
	// If the account entry is associated with an eBay listing, this field
	// shows the eBay <b>ItemID</b> value. If there is no correlation between the account entry and one of the user's eBay listings, '0' is returned in this field.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Memo line for the account entry. It can be an empty string.
	//
	Memo string `xml:"Memo,omitempty"`

	//
	// The rate used for the currency conversion for a transaction.
	//
	ConversionRate *AmountType `xml:"ConversionRate,omitempty"`

	//
	// Net fees that are assessed by eBay, excluding additional surcharges and VAT
	// (if any). Returned even if VAT does not apply. The value is positive for
	// debits (user pays eBay) and negative for credits (eBay pays user).
	//
	NetDetailAmount *AmountType `xml:"NetDetailAmount,omitempty"`

	//
	// This value is the unique identifier for the account entry. This value is created by eBay once the transaction occurs on the user's account.
	//
	RefNumber string `xml:"RefNumber,omitempty"`

	//
	// The applicable rate that was used to calculate the VAT (Value-Added Tax) for the transaction. When the <b>VATPercent</b> is specified for a listing, the item's VAT information appears on the View Item page. In addition, the seller can choose to print an invoice that includes the item's net price, VAT percent, VAT amount, and total price. Since VAT rates vary depending on the item and on the user's country of residence, a seller is responsible for entering the correct VAT rate; it is not calculated by eBay. VAT is only applicable to sellers located in a European Union (EU) country. If VAT does not apply to the account entry, this field is still returned but it's value will be '0'.
	//
	VATPercent float64 `xml:"VATPercent,omitempty"`

	//
	// A description or comment about the monetary transaction or administrative action applied to an eBay user account.
	//
	Title string `xml:"Title,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs. This field is only returned if the account entry is associated with an order line item.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`

	//
	// The unique identifier of an order line item. This field is only returned if the account entry is associated with an order line item.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the seller received a discount on the Final Value Fee for the order line item. Only Top-Rated sellers are eligible for this Final Value Fee discount. The Final Value Fee discount percentage varies by country. For more information on becoming a Top-Rated Seller in the US and the requirements for Top-Rated Plus listings, see the <a href="http://pages.ebay.com/help/sell/top-rated.html" target="_blank">Becoming a Top Rated Seller and qualifying for Top Rated Plus</a> eBay Customer Support topic.
	// <br/><br/>
	// This field will not be returned until eBay bills the seller for the Final Value Fee for the eligible order line item.
	//
	ReceivedTopRatedDiscount bool `xml:"ReceivedTopRatedDiscount,omitempty"`
}

type AccountSummaryType struct {

	//
	// Indicates the current state of the account (such as active or inactive).
	// Possible values are enumerated in <b>AccountStateCodeType</b>.
	//
	AccountState *AccountStateCodeType `xml:"AccountState,omitempty"`

	//
	// This field specifies the payment amount that has been made by the user for the specified/last invoice. This field is only returned if a payment has been made towards the invoice, and if the <b>AccountHistorySelection</b> input field's value was set to <code>LastInvoice</code> or <code>SpecifiedInvoice</code>. This field is not returned if the <b>AccountHistorySelection</b> input field's value was set to <code>BetweenSpecifiedDates</code> and a custom time period (overlapping multiple billing cycles) was specified. If a credit was issued by eBay to the user instead, this credit will be shown in the <b>InvoiceCredit</b> field.
	//
	InvoicePayment *AmountType `xml:"InvoicePayment,omitempty"`

	//
	// This field specifies the credit amount that has been issued to the user's account by eBay for the specified/last invoice. This field is only returned if a credit has been issued towards the invoice, and if the <b>AccountHistorySelection</b> input field's value was set to <code>LastInvoice</code> or <code>SpecifiedInvoice</code>. This field is not returned if the <b>AccountHistorySelection</b> input field's value was set to <code>BetweenSpecifiedDates</code> and a custom time period (overlapping multiple billing cycles) was specified. If a payment was made by the user instead, this payment amount will be shown in the <b>InvoicePayment</b> field.
	//
	InvoiceCredit *AmountType `xml:"InvoiceCredit,omitempty"`

	//
	// This field specifies the balance of any new fees that have been assessed toward the user's account since the last invoice was created. This field is only returned if the <b>AccountHistorySelection</b> input field's value was set to <code>LastInvoice</code>. This field is not returned if the <b>AccountHistorySelection</b> input field's value was set to <code>BetweenSpecifiedDates</code> or <code>SpecifiedInvoice</code>. If there have been no fees since the last invoice was created, this value will be <code>0.0</code>.
	//
	InvoiceNewFee *AmountType `xml:"InvoiceNewFee,omitempty"`

	//
	// This container shows the identifier and current balance for another eBay account associated with the eBay user. This container will appear under the <b>AccountSummary</b> container for each additional account that the eBay user owns.
	//
	AdditionalAccount []*AdditionalAccountType `xml:"AdditionalAccount,omitempty"`

	//
	// This value indicates the amount of money that is past due on the user's account. If no money is past due, this value will be <code>0.0</code>.
	//
	AmountPastDue *AmountType `xml:"AmountPastDue,omitempty"`

	//
	// This string value represents the first four digits of the bank account the associated with the user account. This field is only applicable if a bank account is being used to pay monthly invoices.
	//
	BankAccountInfo string `xml:"BankAccountInfo,omitempty"`

	//
	// This timestamp indicates the date and time when the owner of the account last changed the bank account on file as the primary payment method. This field may not be returned if the bank account on file has never been changed, or if the primary payment method is not a bank account.
	//
	BankModifyDate time.Time `xml:"BankModifyDate,omitempty"`

	//
	// This integer value indicates the day of the month on which eBay sends a billing invoice to the user. A value of <code>0</code> indicates that an invoice is sent on the last day of each month. A value of <code>15</code>15 indicates that an invoice is sent on the 15th day of each month.
	//
	BillingCycleDate int32 `xml:"BillingCycleDate,omitempty"`

	//
	// This timestamp indicates the expiration date for the credit card that is currently on file and used to pay monthly invoices. This field may not be returned if the primary method is not a credit card.
	//
	CreditCardExpiration time.Time `xml:"CreditCardExpiration,omitempty"`

	//
	// This string value represents the last four digits of the credit card that the user selected as payment method for the account. This field is only applicable if a credit card is being used to pay monthly invoices.
	//
	CreditCardInfo string `xml:"CreditCardInfo,omitempty"`

	//
	// This timestamp indicates the date and time when the owner of the account last changed the credit card on file as the primary payment method. This field may not be returned if the credit card on file has never been changed, or if the primary payment method is not a credit card.
	//
	CreditCardModifyDate time.Time `xml:"CreditCardModifyDate,omitempty"`

	//
	// This field shows the current balance for the user's account. This value can be <code>0.0</code>, a positive amount (debit), or a negative amount (credit).
	// <br><br>
	// This field is only returned if the <b>ExcludeBalance</b> flag is included in the call request and set to <code>false</code>.
	//
	CurrentBalance *AmountType `xml:"CurrentBalance,omitempty"`

	//
	// Email address on file for the user account. You cannot retrieve an email address for any user with whom you do not have a transactional relationship, regardless of site. Email is only returned for applicable calls when you are retrieving your own user data OR when you and the other user are in a transactional relationship and the call is being executed within a certain amount of time after the transaction is created.
	//
	Email string `xml:"Email,omitempty"`

	//
	// This field specifies the balance for the specified/last invoice. This field is only returned if the <b>AccountHistorySelection</b> input field's value was set to <code>LastInvoice</code> or <code>SpecifiedInvoice</code>. This field is not returned if the <b>AccountHistorySelection</b> input field's value was set to <code>BetweenSpecifiedDates</code> and a custom time period (overlapping multiple billing cycles) was specified. The value is positive for debits and negative for credits.
	//
	InvoiceBalance *AmountType `xml:"InvoiceBalance,omitempty"`

	//
	// This timestamp indicates the date and time of the specified/last invoice. This field is only returned if the <b>AccountHistorySelection</b> input field's value was set to <code>LastInvoice</code> or <code>SpecifiedInvoice</code>. This field is not returned if the <b>AccountHistorySelection</b> input field's value was set to <code>BetweenSpecifiedDates</code> and a custom time period (overlapping multiple billing cycles) was specified.
	//
	InvoiceDate time.Time `xml:"InvoiceDate,omitempty"`

	//
	// This field shows the amount of the last payment that was made by the user.
	//
	LastAmountPaid *AmountType `xml:"LastAmountPaid,omitempty"`

	//
	// This timestamp shows the date and time of the last payment that was made by the user.
	//
	LastPaymentDate time.Time `xml:"LastPaymentDate,omitempty"`

	//
	// This boolean field indicates whether or not the account has a past due balance. A value of <code>true</code> indicates that the account is past due, and a value of <code>false</code> indicates  that the account is current. If the account is past due, the amount past due can be found in the <b>AmountPastDue</b> field.
	//
	PastDue bool `xml:"PastDue,omitempty"`

	//
	// This enumeration value indicates the primary payment method used by the user to pay monthly eBay invoices.
	//
	PaymentMethod *SellerPaymentMethodCodeType `xml:"PaymentMethod,omitempty"`
}

type AdFormatEnabledDefinitionType struct {
}

type AdFormatLeadType struct {

	//
	// This field shows the message that was sent from the prospective buyer to the seller. This will be the same content that is returned in the <b>AdFormatLead.MemberMessage.MemberMessageExchange.Question.Body</b> field (that is only displayed if the <b>IncludeMemberMessages</b> boolean field is included in the request and set to <code>true</code>). The advantage of retrieving the <b>MemberMessageExchange</b> node, however, is that you retrieve the entire exchange between the seller and the prospective buyer.
	//
	AdditionalInformation string `xml:"AdditionalInformation,omitempty"`

	//
	// This container consists of contact information for the prospective buyer.
	// This container will not be returned if the buyer did not provide any contact information.
	//
	Address *AddressType `xml:"Address,omitempty"`

	//
	// The time of day when the prospective buyer prefers to be contacted by the seller. This field is not returned if this information is unavailable.
	//
	BestTimeToCall string `xml:"BestTimeToCall,omitempty"`

	//
	// Email address for the prospective buyer. If the prospective buyer chooses to
	// hide his email address when contacting the seller, this element contains two
	// dashes (--) instead of an email address.
	//
	Email string `xml:"Email,omitempty"`

	//
	// Date and time (in GMT) that the lead was submitted.
	//
	SubmittedTime time.Time `xml:"SubmittedTime,omitempty"`

	//
	// The unique identifier of the listing.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The title of the listing.
	//
	ItemTitle string `xml:"ItemTitle,omitempty"`

	//
	// The eBay user ID of the user who is interested in the seller's item.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// Contains any mail message content shared between the seller and prospective buyer.
	//
	MemberMessage *MemberMessageExchangeArrayType `xml:"MemberMessage,omitempty"`

	//
	// The enumeration value in this field will indicate whether or not the seller has responded to the lead.
	//
	Status *AdFormatLeadStatusCodeType `xml:"Status,omitempty"`

	//
	// The pay-per-lead feature is no longer available, and this field is scheduled to
	// be removed from the WSDL.
	//
	LeadFee *AmountType `xml:"LeadFee,omitempty"`

	//
	// Email address for the prospective buyer as entered in the lead form on the View
	// Item page. Provides a way for sellers to contact prospective buyers who choose not to
	// log in to eBay. This applies to only eBay Motors and eBay Motors categories.
	//
	ExternalEmail string `xml:"ExternalEmail,omitempty"`

	//
	// Prospective buyer's time frame for purchasing a vehicle as entered in the
	// Lead form on View Item page for eBay Motors and eBay Motors categories.
	// Purchasing Time Frames include:
	// <ul>
	// <li>
	// within next 3 days
	// </li>
	// <li>
	// within a week
	// </li>
	// <li>
	// within a month
	// </li>
	// <li>
	// within three months
	// </li>
	// <li>
	// in more than three months
	// </li>
	// <li>
	// within an undecided time frame
	// </li>
	// </ul>
	//
	PurchaseTimeFrame string `xml:"PurchaseTimeFrame,omitempty"`

	//
	// The year of the vehicle the prospective buyer would like to trade in. Entered on
	// the lead form on the View Item page. Applies to eBay Motors and Motors categories
	// only.
	//
	TradeInYear string `xml:"TradeInYear,omitempty"`

	//
	// The make of the vehicle the prospective buyer would like to trade in. Entered on
	// the lead form on the View Item page. Applies to eBay Motors and Motors categories
	// only.
	//
	TradeInMake string `xml:"TradeInMake,omitempty"`

	//
	// The model of the vehicle the prospective buyer would like to trade in. Entered on the lead form on the View Item page. Applies to eBay Motors and Motors categories only.
	//
	TradeInModel string `xml:"TradeInModel,omitempty"`

	//
	// Prospective buyer answer whether or not the prospective buyer would like
	// financing. Entered on the lead form on the View Item page. Applies to eBay Motors
	// and Motors categories only. Financing response meanings: 0= no response,1= yes, 2=
	// no.
	//
	FinancingAnswer bool `xml:"FinancingAnswer,omitempty"`

	//
	// This field corresponds to a configurable question on the lead form in the View
	// Item web page. The corresponding question is site-specific. To determine the
	// question for a specific site, you must view the form in the web flow for the given
	// site. This field applies to Classified Ad format listings in Motors categories
	// only.
	//
	Answer1 bool `xml:"Answer1,omitempty"`

	//
	// This field corresponds to a configurable question on the lead form in the View
	// Item web page. The corresponding question is site-specific. To determine the
	// question for a specific site, you must view the form in the web flow for the given
	// site. This field applies to Classified Ad format listings in Motors categories
	// only.
	//
	Answer2 bool `xml:"Answer2,omitempty"`
}

type AddItemRequestContainerType struct {

	//
	// Container holding all values that define a new listing. One <b>Item</b>
	// container is required for each <b>AddItemRequestContainer</b>.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Most Trading API calls support a <b>MessageID</b> element in the request
	// and a <b>CorrelationID</b> element in the response. With
	// <b>AddItems</b>, a unique <b>MessageID</b> value is required for
	// each <b>AddItemRequestContainer</b> container that is used in the request. The
	// <b>CorrelationID</b> value returned under each
	// <b>AddItemResponseContainer</b> container is used to correlate each
	// item request container with its corresponding response container. The same <b>MessageID</b> value that you pass into a request will
	// be returned in the <b>CorrelationID</b> field in the response.
	//
	MessageID string `xml:"MessageID,omitempty"`
}

type AddItemResponseContainerType struct {

	//
	// Unique identifier for the new listing. This field is returned as long as the listing was successfully created.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Starting date and time for the new listing. This value is based on the time the listing was received and processed, or the time the item will be listed if the seller included the <b>Item.ScheduleTime</b> field in the request and set a custom start time of the listing (in the future).
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Date and time when the new listing is scheduled to end based on the start time and the listing duration value that was set in the <b>ListingDuration</b> field at listing time. If the value of <b>ListingDuration</b> was set to <code>GTC</code> (Good 'Til Cancelled) this value will be set 30 days ahead of the start time, although this value will be updated if the GTC listing is still alive and automatically renewed 30 days after start time.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// This container is an array of one or more fees associated with the creation of the listing. The fees do not include the Final Value Fee (FVF), which cannot be determined until an item is sold.
	//
	Fees *FeesType `xml:"Fees,omitempty"`

	//
	// The unique identifier of the primary category in which the item was listed. This field is only returned if the <b>Item.CategoryMappingAllowed</b> boolean field is included and set to <code>true</code> in the request and the Category ID passed in as the primary listing category was mapped to a new Category ID by eBay. If the primary category has not changed, or if it has expired with no replacement, this field is not returned.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Unique identifier of the secondary category in which the item was listed. This field is only returned if a secondary category was used, the <b>Item.CategoryMappingAllowed</b> boolean field is included and set to <code>true</code> in the request, and the Category ID passed in as the secondary listing category was mapped to a new Category ID by eBay. If the secondary category has not changed or it has expired with no replacement, this field is not returned.
	//
	Category2ID string `xml:"Category2ID,omitempty"`

	//
	// Most Trading API calls support a <b>MessageID</b> element in the request
	// and a <b>CorrelationID</b> element in the response. With
	// <b>AddItems</b>, a unique <b>MessageID</b> value is required for
	// each <b>AddItemRequestContainer</b> container that is used in the request. The
	// <b>CorrelationID</b> value returned under each
	// <b>AddItemResponseContainer</b> container is used to correlate each
	// item request container with its corresponding response container. The same <b>MessageID</b> value that you pass into a request will
	// be returned in the <b>CorrelationID</b> field in the response.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`

	//
	// This container is an array of one or more errors and/or warnings (if any) that occurred when eBay processed the request.
	// <br>
	// <br>
	// Errors may occur due to
	// problems with business-level data on the client side or on the eBay
	// server side. For example, an error would occur if the request contains
	// an invalid combination of fields, or it is missing a required field,
	// or the value of the field is not recognized. An error could also occur
	// if eBay encountered a problem in our internal business logic while
	// processing the request.<br>
	// <br>
	// This container is only returned if there were one or more warnings or errors.
	//
	Errors []*ErrorType `xml:"Errors,omitempty"`

	//
	// Supplemental information from eBay, if applicable. May elaborate on errors or
	// provide useful hints for the seller. This data can accompany the call's normal
	// data result set or a result set that contains only errors. The string can
	// return HTML, including TABLE, IMG, and HREF elements. In this case, an HTML-
	// based application should be able to include the HTML as-is in the HTML page
	// that displays the results. A non-HTML application would need to parse the HTML
	// and convert the table elements and image references into UI elements
	// particular to the programming language used. Because this data is returned as
	// a string, the HTML markup elements are escaped with character entity
	// references (e.g.,&lt;table&gt;&lt;tr&gt;...).
	//
	Message string `xml:"Message,omitempty"`

	//
	// This container is an array of one or more listing fee/upgrade discount types being offered by eBay to the seller.
	//
	DiscountReason []*DiscountReasonCodeType `xml:"DiscountReason,omitempty"`

	//
	// Container consisting of one or more <b>Recommendation</b> containers. Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to offer fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge.
	// <br><br>
	// This container is only returned if the <b>IncludeRecommendations</b>
	// flag was included and set to 'true' in the <b>AddItems</b> request, and if
	// at least one listing recommendation exists for the newly created listing. If
	// one or more listing recommendations are returned for one or more of the newly
	// created listings, it will be at the seller's discretion about whether to revise the
	// item(s) based on eBay's listing recommendation(s).
	//
	ListingRecommendations *ListingRecommendationsType `xml:"ListingRecommendations,omitempty"`
}

type AddMemberMessagesAAQToBidderRequestContainerType struct {

	//
	// A <b>CorrelationID</b> value is required for
	// each <b>AddMemberMessagesAAQToBidderRequestContainer</b> container that is used in the request. The
	// <b>CorrelationID</b> value returned under each
	// <b>AddMemberMessagesAAQToBidderResponseContainer</b> container is used to correlate each
	// member message container in the request with its corresponding member message container in the
	// response. The same <b>CorrelationID</b> value that you pass into a request will
	// be returned in the <b>CorrelationID</b> field in the response.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`

	//
	// A unique identifier for an eBay listing. This field is required and identifies the active listing that is being discussed between the seller and the bidder.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// This container consists of message body, the recipient(s) of the message, and a boolean flag to control whether or not a copy of the message is sent to the sender's My eBay Inbox.
	//
	MemberMessage *MemberMessageType `xml:"MemberMessage,omitempty"`
}

type AddMemberMessagesAAQToBidderResponseContainerType struct {

	//
	// This is a unique identifier for a message that was sent through the <b>AddMemberMessagesAAQToBidder</b> call. The seller must provide a <b>CorrelationID</b> value for each message that is sent through an <b>AddMemberMessagesAAQToBidderRequestContainer</b> container in the request. The <b>CorrelationID</b> value returned under each <b>AddMemberMessagesAAQToBidderResponseContainer</b> container is used to correlate each member message container in the request with its corresponding member message container in the response.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`

	//
	// This enumerated value indicates whether or not the corresponding message was successfully sent to the bidder(s)/potential buyer(s). If the value returned in this field is not <code>Success</code>, the message may have to be resent with another <b>AddMemberMessagesAAQToBidder</b> call.
	//
	Ack *AckCodeType `xml:"Ack,omitempty"`
}

type AdditionalAccountType struct {

	//
	// Indicates the current balance of the additional account.
	//
	Balance *AmountType `xml:"Balance,omitempty"`

	//
	// Indicates the currency in which monetary amounts for the additional account
	// are expressed.
	//
	Currency *CurrencyCodeType `xml:"Currency,omitempty"`

	//
	// Indicates the unique identifier for the additional account (the account ID).
	//
	AccountCode string `xml:"AccountCode,omitempty"`
}

type AdditionalCompatibilityEnabledDefinitionType struct {
}

type AddressAttributeType struct {
	Value string

	//
	// The only supported value for this attribute is <code>ReferenceNumber</code>, but in the future, other address attributes may be supported. The <code>ReferenceNumber</code> is a unique identifier for a 'Click and Collect' order. Click and Collect orders are only available on the eBay UK and eBay Australia sites.
	//
	Type *AddressAttributeCodeType `xml:"type,attr,omitempty"`
}

type AddressType struct {

	//
	// User's name for the address.
	// <br>
	//
	Name string `xml:"Name,omitempty"`

	//
	// A concatenation of <b>Street1</b> and <b>Street2</b>, primarily used for a registration address.
	//
	Street string `xml:"Street,omitempty"`

	//
	// The first line of the user's street address.
	// <br>
	//
	Street1 string `xml:"Street1,omitempty"`

	//
	// The second line of the user's street address (such as an apartment number or suite number).
	// Returned if the user specified a second street value for their address.
	// In case of <b>Item.SellerContactDetails</b>, <b>Street2</b> can be used to provide City, Address, State, and Zip code (if applicable).
	// <br>
	//
	Street2 string `xml:"Street2,omitempty"`

	//
	// The name of the user's city.
	// <br>
	//
	CityName string `xml:"CityName,omitempty"`

	//
	// The county in which the address resides.
	//
	County string `xml:"County,omitempty"`

	//
	// The state or province of the user's address. Whether it's a state or a province will depend on the region and/or country.
	// <br>
	//
	StateOrProvince string `xml:"StateOrProvince,omitempty"`

	//
	// The two-digit code representing the country of the user.<br>
	// <br>
	// If not provided as input, eBay uses the country associated
	// with the eBay Site ID when the call is made.<br>
	// <br>
	// For a Global Shipping Program order, <b>GetSellerList</b> returns the country code of the buyer, not the international shipping provider.
	//
	Country *CountryCodeType `xml:"Country,omitempty"`

	//
	// The name of the user's country.
	// <br/>
	//
	CountryName string `xml:"CountryName,omitempty"`

	//
	// User's primary phone number. This may return a value of
	// <code>Invalid Request</code> if you are not authorized to see the
	// user's phone number.
	// <br/><br/>
	// In the US, the area code (3 digits), the prefix (3 digits), the line number (4
	// digits), and phone extension (if specified by the user) are returned in this field.
	// The extension can be one or more digits. Non-breaking spaces are used as delimiters
	// between these phone number components.
	// <br>
	//
	Phone string `xml:"Phone,omitempty"`

	//
	// Standard ISO code for the country of the user's primary telephone phone number.
	// For Classified Ad listings, this code is used to look up the country's
	// international calling prefix. Both the ISO code and country phone prefix are
	// stored with listings of this type.
	// This field applies to Classified Ad listings only.
	//
	PhoneCountryCode *CountryCodeType `xml:"PhoneCountryCode,omitempty"`

	//
	// Country Prefix of the secondary phone number. This value is derived from
	// inputs supplied for <b>PhoneCountryCode</b>.
	// This field applies to Classified Ad listings only.
	//
	PhoneCountryPrefix string `xml:"PhoneCountryPrefix,omitempty"`

	//
	// Area or City Code of a user's primary phone number.
	// This field applies to Classified Ad listings only.
	//
	PhoneAreaOrCityCode string `xml:"PhoneAreaOrCityCode,omitempty"`

	//
	// The local number portion of the user's primary phone number.
	// This field applies to Classified Ad listings only.
	// <br><br>
	// <b>Note:</b> The full primary phone number is constructed by
	// combining <b>PhoneLocalNumber</b> with <b>PhoneAreaOrCityCode</b> and <b>PhoneCountryPrefix</b>.
	// <br>
	//
	PhoneLocalNumber string `xml:"PhoneLocalNumber,omitempty"`

	//
	// User's postal code.<br>
	// <br>
	// For a Global Shipping Program order, <b>GetSellerList</b> and <b>GetMyeBaySelling</b> return the postal code of the buyer, not that of the international shipping provider.
	// <br>
	//
	PostalCode string `xml:"PostalCode,omitempty"`

	//
	// Unique ID for a user's address in the eBay database.
	// This value can help prevent the need to
	// store an address multiple times across multiple orders.
	// The ID changes if a user changes their address.
	//
	AddressID string `xml:"AddressID,omitempty"`

	//
	// The realm to which the address belongs (e.g. eBay vs PayPal).
	//
	AddressOwner *AddressOwnerCodeType `xml:"AddressOwner,omitempty"`

	AddressStatus *AddressStatusCodeType `xml:"AddressStatus,omitempty"`

	//
	// This is a unique identifier assigned to the customer address if the address is on file with PayPal. The <b>AddressOwner</b> field will indicate if the address is on file with eBay or PayPal. This field will only be applicable/returned if it is a PayPal-owned address. The ID changes if a user changes their address.
	// <br>
	//
	ExternalAddressID string `xml:"ExternalAddressID,omitempty"`

	//
	// Seller's international name that is associated with the payment address.
	// This field is only applicable to seller payment/billing addresses.
	//
	InternationalName string `xml:"InternationalName,omitempty"`

	//
	// International state and city that is associated with the seller's payment address. This field is only applicable to seller payment/billing addresses.
	//
	InternationalStateAndCity string `xml:"InternationalStateAndCity,omitempty"`

	//
	// Seller's international street address that is associated with the payment address. This field is only applicable to seller payment/billing addresses.
	//
	InternationalStreet string `xml:"InternationalStreet,omitempty"`

	//
	// User's company name. Only returned if available.
	//
	CompanyName string `xml:"CompanyName,omitempty"`

	AddressRecordType *AddressRecordTypeCodeType `xml:"AddressRecordType,omitempty"`

	//
	// Displays the first name of the seller (in a business card
	// format) if the seller's <b>SellerBusinessCodeType</b> value is
	// <code>Commercial</code>.
	//
	FirstName string `xml:"FirstName,omitempty"`

	//
	// Displays the last name of the seller (in a business card
	// format) if the seller's <b>SellerBusinessCodeType</b> is set to
	// <code>Commercial</code>.
	//
	LastName string `xml:"LastName,omitempty"`

	//
	// Secondary Phone number of the lead. Not returned if information is unavailable.
	//
	Phone2 string `xml:"Phone2,omitempty"`

	//
	// This tag tells whether current address is a default shipping address or one of the shipping addresses in address book.
	//
	AddressUsage *AddressUsageCodeType `xml:"AddressUsage,omitempty"`

	//
	// Uniquely identifies an order shipped using the Global Shipping Program. This value is generated by eBay when the order is completed. The international shipping provider uses the <b>ReferenceID</b> as the primary reference when processing the shipment. Sellers must include this value on the package immediately above the street address of the international shipping provider.
	// <br/><br/>
	// Example: "Reference #1234567890123456"
	//
	ReferenceID string `xml:"ReferenceID,omitempty"`

	//
	// This field shows an attribute for the address, and its corresponding value. Currently, this field is only used to display the reference ID for a "Click and Collect" order, but in the future, other address attributes may be returned in this field.
	//
	AddressAttribute []*AddressAttributeType `xml:"AddressAttribute,omitempty"`
}

type AffiliateTrackingDetailsType struct {

	//
	// <span class="tablenote"><b>Note: </b> If you are using
	// affiliate tracking, this field is required.
	// </span><br>
	// The value you specify in this field is obtained from your tracking partner.
	// For the eBay Partner Network, the <b>TrackingID</b> is the Campaign ID ("campid")
	// provided by the eBay Partner Network. A Campaign ID is a 10-digit, unique
	// number for associating traffic. A Campaign ID is valid across all
	// programs to which you have been accepted.
	//
	TrackingID string `xml:"TrackingID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> If you are using
	// affiliate tracking, this field is required.
	// </span><br>
	// Specifies your tracking partner for affiliate commissions.
	// Depending on your tracking partner, specify one of the
	// following values. Not all partners are valid for all sites.
	// For <b>PlaceOffer</b>, only eBay Partner Network and Mediaplex are valid:
	// <br>
	// <br>2 = Be Free
	// <br>3 = Affilinet
	// <br>4 = TradeDoubler
	// <br>5 = Mediaplex
	// <br>6 = DoubleClick
	// <br>7 = Allyes
	// <br>8 = BJMT
	// <br>9 = eBay Partner Network
	// <br>
	// <br>
	// For information about the eBay Partner Network, see
	// <a href="https://www.ebaypartnernetwork.com" target="_blank">eBay Partner Network</a>.
	//
	TrackingPartnerCode string `xml:"TrackingPartnerCode,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> If you are using
	// affiliate tracking, this field is required.
	// </span>
	// Type of device or platform from which the call originated.
	//
	ApplicationDeviceType *ApplicationDeviceTypeCodeType `xml:"ApplicationDeviceType,omitempty"`

	//
	// This field is not required, but an affiliate may want to use this identifier to better monitor marketing efforts. If you are using the eBay Partner Network, and you provide an <b>AffiliateUserID</b>, the tracking URL returned by eBay Partner Network will contain the <b>AffiliateUserID</b>, but it will be referred to as a "customid".
	//
	AffiliateUserID string `xml:"AffiliateUserID,omitempty"`
}

type AmountType struct {
	Value float64

	//
	// Three-digit code representing the currency type being used. <br>
	// <br>
	// In <b>Add</b>/<b>Revise</b>/<b>Relist</b> calls, the currency can be specified in
	// the <b>Item.Currency</b> field in requests instead.
	// If you do specify this attribute in <b>Add</b>/<b>Revise</b>/<b>Relist</b> calls,
	// the value must match the site currency (i.e., it must be the same
	// as the value in <b>Item.Currency</b>) unless otherwise stated.<br>
	// <br>
	// In <b>Add</b>/<b>Revise</b>/<b>Relist</b> calls, listing fees are returned in the
	// currency of the user's registration site.
	// For example, a user who is registered on the eBay US site always
	// sees their fees returned in USD, even when their listing request
	// is sent to another site, such as eBay UK or eBay Germany.
	//
	CurrencyID *CurrencyCodeType `xml:"currencyID,attr,omitempty"`
}

type AnnouncementMessageType struct {

	//
	// The date on which an upcoming event can start to be announced.
	//
	AnnouncementStartTime time.Time `xml:"AnnouncementStartTime,omitempty"`

	//
	// The date on which the event occurs. This is also the ending date of the
	// announcement that lead up to the event (see <b>AnnouncementStartTime</b>).
	//
	EventTime time.Time `xml:"EventTime,omitempty"`

	//
	// Control of what messages to display.
	//
	MessageType *AnnouncementMessageCodeType `xml:"MessageType,omitempty"`
}

type ApiAccessRuleType struct {

	//
	// The value in this field can be the name of a Trading API call, or it can be <code>ApplicationAggregate</code> (returns totals for all calls),
	// <code>PasswordAuthenticationLimiter</code> (dummy call), or <code>NonUTF8UsageLimiter</code>. All of the other data in the <b>ApiAccessRule</b> container will pertain to this call, including the call limits.
	//
	CallName string `xml:"CallName,omitempty"`

	//
	// This boolean field will indicate whether or not the use of the call (indicated in <b>CallName</b> field) counts toward the application's
	// aggregate limit for all calls.
	//
	CountsTowardAggregate bool `xml:"CountsTowardAggregate,omitempty"`

	//
	// This value indicates the total number of calls per day that the application can make to this call before being blocked.
	// The day starts at midnight, 00:00:00 PST (not GMT).
	//
	DailyHardLimit int64 `xml:"DailyHardLimit,omitempty"`

	//
	// This value indicates the total number of calls per day that the application can make to this call before you receive a warning.
	// The day starts at midnight, 00:00:00 PST.
	//
	DailySoftLimit int64 `xml:"DailySoftLimit,omitempty"`

	//
	// This value indicates the number of times that the application has used this
	// call today. The day starts at midnight, 00:00:00 PST.
	//
	DailyUsage int64 `xml:"DailyUsage,omitempty"`

	//
	// This value indicates the total number of calls per hour that the application can make to this call before being blocked. Each count begins at the top of each hour (e.g. 1:00:00).
	//
	HourlyHardLimit int64 `xml:"HourlyHardLimit,omitempty"`

	//
	// This value indicates the total number of calls per hour that the application can make to this call before you receive a warning. Each count begins at the top of each hour (e.g. 1:00:00).
	//
	HourlySoftLimit int64 `xml:"HourlySoftLimit,omitempty"`

	//
	// This value indicates the number of times that the application has used this
	// call during this hour. Each count begins at the top of each hour (e.g. 1:00:00).
	//
	HourlyUsage int64 `xml:"HourlyUsage,omitempty"`

	//
	// The length of time before your application's periodic usage counter restarts
	// for this call. If the number of calls you make exceeds the periodic hard limit
	// before the current period ends, further calls will be blocked until the next
	// period starts. Possible values: -1 (Periodic limit not enforced, could be any
	// negative integer), 0 (Calendar month), 30 (Number of days, could be any
	// positive integer). If the period is based on the calendar month, the usage
	// counters restart on the same day of every month, regardless of the number of
	// days in the month.
	//
	Period int32 `xml:"Period,omitempty"`

	//
	// This value indicates the number of calls per period that your application may make before a call is blocked, if the periodic limit is enforced. The length of the period is specified in the <b>Period</b> field.
	//
	PeriodicHardLimit int64 `xml:"PeriodicHardLimit,omitempty"`

	//
	// This value indicates the number of calls per period that your application may make before receiving a warning, if the periodic limit is enforced. The length of the period is specified in the <b>Period</b> field.
	//
	PeriodicSoftLimit int64 `xml:"PeriodicSoftLimit,omitempty"`

	//
	// This value indicates the number of times that the application has used this call during this period. <code>0</code> is returned if the periodic access rule has not been configured for the application. The length of the period is specified in <b>Period</b> field and the start date of the period is specified in <b>PeriodicStartDate</b> field.
	//
	PeriodicUsage int64 `xml:"PeriodicUsage,omitempty"`

	//
	// This timestamp (in GMT) marks the date and time when the access rule's period started. The period starts at midnight Pacific time. For example, if the period begins on June 29 in 2005 when California is on Pacific Daylight Time, the GMT value returned would be 2005-06-29T07:00:00.000Z If the period begins on December 29 in 2005 when California is on Pacific Standard Time, the GMT value returned would be 2005-12-29T08:00:00.000Z. This field is only returned when the eBay Developers Program has configured the start date for the access rule. The start date can vary per application and per call name.
	//
	PeriodicStartDate time.Time `xml:"PeriodicStartDate,omitempty"`

	//
	// This timestamp marks the date and time when the access rule was last modified by eBay.
	//
	ModTime time.Time `xml:"ModTime,omitempty"`

	//
	// This enumeration value will only be returned if a hourly, daily, or periodic hard or soft call limit is exceeded by the application, or if call limits do not apply to the call.
	//
	RuleCurrentStatus *AccessRuleCurrentStatusCodeType `xml:"RuleCurrentStatus,omitempty"`

	//
	// This enumeration value will indicate whether the access rule is on or off, or if the application is currently being blocked due to exceeding a hard call limit.
	//
	RuleStatus *AccessRuleStatusCodeType `xml:"RuleStatus,omitempty"`
}

type ApplicationDeliveryPreferencesType struct {

	//
	// The URL to which eBay delivers all Platform Notifications and Client Alerts sent to the application. For
	// delivery to a server, the URL begins with "<code>http://</code>" or "<code>https://</code>" and must be well
	// formed. For delivery to
	// an email address, the URL begins with ""<code>mailto://</code>" and specifies a valid email
	// address.
	//
	ApplicationURL *AnyURI `xml:"ApplicationURL,omitempty"`

	//
	// This field allows the user to enable or disable Platform Notifications and Client Alerts. Notice that disabling Platform Notifications and Client Alerts will not affect others preferences set in this container.
	//
	ApplicationEnable *EnableCodeType `xml:"ApplicationEnable,omitempty"`

	//
	// The email address to which eBay sends all application markup and markdown event
	// notifications. When setting the email address, input must be in the format
	// "<code>mailto://youremailaddress@yoursite.com</code>". Note that the <b>AlertEnable</b> field must be set to <code>Enable</code> for alert emails to be sent.
	//
	AlertEmail *AnyURI `xml:"AlertEmail,omitempty"`

	//
	// <b>For SetNotificationPreferences</b>: include and set <b>AlertEnable</b> to
	// <code>Enable</code> to receive application markup and markdown alerts, or set to <code>Disable</code> to
	// disable the alerts. If not included, the <b>AlertEnable</b> defaults to
	// its current value.
	// <br/><br/>
	// <b>For GetNotificationPreferences</b>: this field's value indicates
	// whether application markup and markdown alerts are enabled or disabled.
	//
	AlertEnable *EnableCodeType `xml:"AlertEnable,omitempty"`

	//
	// This field is deprecated and should no longer be used.
	//
	NotificationPayloadType *NotificationPayloadTypeCodeType `xml:"NotificationPayloadType,omitempty"`

	//
	// The means of receipt of notification. In most cases, it is Platform (typical API
	// calls and web interaction), so this is the default, if not specified. For
	// wireless applications, use SMS. Do not test Client Alerts in production if you
	// are currently using Platform Notifications.
	//
	DeviceType *DeviceTypeCodeType `xml:"DeviceType,omitempty"`

	//
	// Use this field to specify the API version for all notifications for the calling
	// application. If you do not specify PayloadVersion in
	// SetNotificationPreferences, the API version for notifications will be based on
	// the API version specified in your SetNotificationPreferences call.
	//
	PayloadVersion string `xml:"PayloadVersion,omitempty"`

	//
	// Defines settings for notification URLs (including the URL name in DeliveryURLName). You
	// define settings for up to 25 notification URLs (including the URL name in
	// DeliveryURLName) in separate DeliveryURLDetails containers. Associate a user token with
	// notification URLs by using the token in a SetNotificationPreferences request that
	// specifies the URL name or names in SetNotificationPreferencesRequest.DeliveryURLName. Use
	// comma-separated format to specify multiple URL names in
	// SetNotificationPreferencesRequest.DeliveryURLName. Notifications will be sent to these
	// URL(s) if ApplicationDeliveryPreferencesType.ApplicationEnable is set to Enable.
	//
	DeliveryURLDetails []*DeliveryURLDetailType `xml:"DeliveryURLDetails,omitempty"`
}

type AttributeArrayType struct {

	//
	// <b>AttributeArrayType</b> and the <b>Attribute</b> element are only applicable for Half.com listings, and since the Half.com site was taken down, this field is no longer applicable.
	//
	Attribute []*AttributeType `xml:"Attribute,omitempty"`
}

type AttributeConversionEnabledFeatureDefinitionType struct {
}

type AttributeRecommendationsType struct {

	//
	// This field is deprecated.
	//
	AttributeSetArray *AttributeSetArrayType `xml:"AttributeSetArray,omitempty"`
}

type AttributeSetArrayType struct {

	//
	// This field is deprecated.
	//
	AttributeSet []*AttributeSetType `xml:"AttributeSet,omitempty"`
}

type AttributeSetType struct {

	//
	// This field is deprecated.
	//
	Attribute []*AttributeType `xml:"Attribute,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSetID int32 `xml:"attributeSetID,attr,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSetVersion string `xml:"attributeSetVersion,attr,omitempty"`
}

type AttributeType struct {

	//
	// <b>AttributeType</b> and all of its elements are only applicable for Half.com listings, and since the Half.com site was taken down, this field is no longer applicable.
	//
	Value []*ValType `xml:"Value,omitempty"`

	//
	// <b>AttributeType</b> and all of its elements are only applicable for Half.com listings, and since the Half.com site was taken down, this field is no longer applicable.
	//
	AttributeID int32 `xml:"attributeID,attr,omitempty"`

	//
	// <b>AttributeType</b> and all of its elements are only applicable for Half.com listings, and since the Half.com site was taken down, this field is no longer applicable.
	//
	AttributeLabel string `xml:"attributeLabel,attr,omitempty"`
}

type AverageRatingDetailArrayType struct {

	//
	// This field is deprecated.
	//
	AverageRatingDetails []*AverageRatingDetailsType `xml:"AverageRatingDetails,omitempty"`
}

type AverageRatingDetailsType struct {

	//
	// The value shown in this field indicates the Detailed Seller Rating area. The corresponding <b>Rating</b> value is the average rating that the seller has received for this DSR area, and the <b>RatingCount</b> value is the total number of buyer ratings that the seller has received in this DSR area. When buyers leave an overall Feedback rating (positive, neutral, or negative) for a seller, they also can leave ratings in four areas: item as described, communication, shipping time, and charges for shipping and handling.
	//
	RatingDetail *FeedbackRatingDetailCodeType `xml:"RatingDetail,omitempty"`

	//
	// This value is the seller's average rating (given by buyers) for the DSR area noted in the corresponding <b>RatingDetail</b> field.
	//
	Rating float64 `xml:"Rating,omitempty"`

	//
	// This value is the total count of buyer ratings given for the DSR area noted in the corresponding <b>RatingDetail</b> field.
	//
	RatingCount int32 `xml:"RatingCount,omitempty"`
}

type AverageRatingSummaryType struct {

	//
	// This enumeration value will indicate whether the statistics in each AverageRatingDetails container is for the last year (<code>FiftyTwoWeeks</code>) or the last month (<code>ThirtyDays</code>).
	//
	FeedbackSummaryPeriod *FeedbackSummaryPeriodCodeType `xml:"FeedbackSummaryPeriod,omitempty"`

	//
	// Applicable to sites that support the Detailed Seller Ratings feature.
	// Each <b>AverageRatingDetails</b> container consists of the average detailed seller ratings in an area. When buyers leave an overall Feedback rating (positive, neutral, or negative) for a seller, they also can leave ratings in four areas: item as described, communication, shipping time, and charges for shipping and handling.
	//
	AverageRatingDetails []*AverageRatingDetailsType `xml:"AverageRatingDetails,omitempty"`
}

type Base64BinaryType struct {
	Value []byte

	//
	// This optional attribute allows the binary attachment to be named.
	//
	ContentType string `xml:"contentType,attr,omitempty"`
}

type BasicAmountType struct {
	Value string

	//
	// This field is deprecated.
	//
	CurrencyID *CurrencyCodeType `xml:"currencyID,attr,omitempty"`
}

type BasicUpgradePackEnabledDefinitionType struct {
}

type BestOfferArrayType struct {

	//
	// For <b>GetBestOffers</b>, each <b>BestOffer</b> container consists of detailed information on the Best Offer/Counter Offer, including the type of Best Offer (Best Offer, Buyer/Seller Counter Offer), amount of the Best Offer/Counter Offer, and status of Best Offer/Counter Offer.
	// <br/><br/>
	// For <b>RespondToBestOffer</b>, each <b>BestOffer</b> container provides the status ('Success' or 'Failure') of the Best Offer action (Accept, Counter, or Decline), which are defined in <a href="types/BestOfferActionCodeType.html">BestOfferActionCodeType</a>.
	//
	BestOffer []*BestOfferType `xml:"BestOffer,omitempty"`
}

type BestOfferAutoAcceptEnabledDefinitionType struct {
}

type BestOfferAutoDeclineEnabledDefinitionType struct {
}

type BestOfferCounterEnabledDefinitionType struct {
}

type BestOfferDetailsType struct {

	//
	// The number of Best Offers made for this item, if any. In other words, if there are no Best Offers made, this field will not appear in the response. This field is not applicable to the <b>Add</b>/<b>Revise</b>/<b>Relist</b> calls.
	//
	BestOfferCount int32 `xml:"BestOfferCount,omitempty"`

	//
	// This field indicates whether or not the Best Offer feature is enabled for the listing. A seller can enable the Best Offer feature for a listing as long as the category supports the Best Offer feature. To see if an eBay category supports the Best Offer feature, run a <b>GetCategoryFeatures</b> call, including <code>BestOfferEnabled</code> as a <b>FeatureID</b> value in the call request payload.
	// <br/><br/>
	// A listing enabled with the Best Offer feature allows a buyer to bargain with the seller and make a lower-priced offer than the fixed price or the starting bid price for an auction listing. The seller can then decide whether to accept the buyer's Best Offer price or propose a counter offer higher than the Best Offer price, but lower than the fixed price or starting bid price.
	// <br/><br/>
	// <b>For a ReviseItem or ReviseFixedPriceItem call</b>, this boolean value can only be changed (enable or disable) in a fixed-price listing if the listing has not had any sales (Best Offer or standard purchase), the listing does not have any Best Offer or counter offers pending, and the listing is not scheduled to end within 12 hours. Some large merchant accounts are enabled to revise this field through a Revise call even within 12 hours of the listing's scheduled end time, but these sellers are still subject to the other two rules - no sales of any kind for the listing, and no Best Offers or counter offers pending.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature is now available for auction listings on the following sites: US, Canada, UK, Germany, Australia, France, Italy, and Spain. However, sellers must choose between offering Best Offer or Buy It Now on an auction listing, as both features cannot be enabled on the same auction listing. If an auction listing is enabled with Best Offer, this feature will no longer be applicable once the listing receives its first qualifying bid.
	// </span>
	//
	BestOfferEnabled bool `xml:"BestOfferEnabled,omitempty"`

	//
	// This is the amount of the buyer's current Best Offer. This field will not appear in the <b>GetMyeBayBuying</b> response if the buyer has not made a Best Offer. This field is also not applicable to the <b>Add</b>/<b>Revise</b>/<b>Relist</b> calls.
	//
	BestOffer *AmountType `xml:"BestOffer,omitempty"`

	//
	// This enumeration value indicates the status of the latest
	// Best Offer from the buyer. This field is only applicable to the <b>GetMyeBayBuying</b> call, and will not appear in the
	// response if the buyer has not made a Best Offer.
	//
	BestOfferStatus *BestOfferStatusCodeType `xml:"BestOfferStatus,omitempty"`

	//
	// Note: this field is no longer used. The Best Offer type is only returned in the <b>BestOfferCodeType</b> field of the <b>GetBestOffers</b> call, and the applicable values for Best Offer type (<code>BuyerBestOffer</code>, <code>BuyerCounterOffer</code>, <code>SellerCounterOffer</code>, etc.) are defined in <b>BestOfferTypeCodeType</b>.
	//
	BestOfferType *BestOfferTypeCodeType `xml:"BestOfferType,omitempty"`

	//
	// This field is deprecated.
	//
	NewBestOffer bool `xml:"NewBestOffer,omitempty"`
}

type BestOfferEnabledDefinitionType struct {
}

type BestOfferType struct {

	//
	// Unique identifier for a Best Offer. This identifier is created once a prospective buyer makes a Best Offer on an item.
	//
	BestOfferID *BestOfferIDType `xml:"BestOfferID,omitempty"`

	//
	// Timestamp indicating when a Best Offer will naturally expire (if the
	// seller has not accepted or declined the offer).
	//
	ExpirationTime time.Time `xml:"ExpirationTime,omitempty"`

	//
	// Container consisting of information about the prospective buyer who made the Best Offer.
	//
	Buyer *UserType `xml:"Buyer,omitempty"`

	//
	// The amount of the Best Offer or counter offer.
	//
	Price *AmountType `xml:"Price,omitempty"`

	//
	// The status of the Best Offer or counter offer. For <b>PlaceOffer</b>, the only applicable values are <code>Accepted</code>, <code>AdminEnded</code>, <code>Declined</code>, and <code>Expired</code>.
	//
	Status *BestOfferStatusCodeType `xml:"Status,omitempty"`

	//
	// The quantity of the item for which the buyer is making a Best Offer. This value will usually be <code>1</code>, unless the buyer is making an offer on multiple quantity of a line item in a multi-quantity listing.
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// A prospective buyer has the option to include a comment when placing a Best Offer or making a counter offer to the seller's counter offer. This field will display that comment.
	//
	BuyerMessage string `xml:"BuyerMessage,omitempty"`

	//
	// A seller has the option to include a comment when making a counter offer to the prospective buyer's Best Offer. This field will display that comment.
	//
	SellerMessage string `xml:"SellerMessage,omitempty"`

	//
	// This value indicates whether the corresponding offer is a Best Offer, a seller's counter offer, or a buyer counter offer to the seller's counter offer.
	//
	BestOfferCodeType *BestOfferTypeCodeType `xml:"BestOfferCodeType,omitempty"`

	//
	// The value in this field (<code>Success</code> or <code>Failure</code>) will indicate whether or not the seller's attempt to accept, decline, or counter offer a Best Offer was successful. This field is only used by the <b>RespondToBestOffer</b> response.
	//
	CallStatus string `xml:"CallStatus,omitempty"`

	//
	// This field is no longer applicable, as it formerly supported the Best Offer Beta feature which is no longer active.
	//
	NewBestOffer bool `xml:"NewBestOffer,omitempty"`

	//
	// This field is no longer applicable, as it formerly supported the Best Offer Beta feature which is no longer active.
	//
	ImmediatePayEligible bool `xml:"ImmediatePayEligible,omitempty"`
}

type BidApprovalArrayType struct {
}

type BidApprovalType struct {
	UserID *UserIDType `xml:"UserID,omitempty"`

	ApprovedBiddingLimit *AmountType `xml:"ApprovedBiddingLimit,omitempty"`

	DeclinedComment string `xml:"DeclinedComment,omitempty"`

	Status *BidderStatusCodeType `xml:"Status,omitempty"`
}

type BidAssistantListType struct {

	//
	// This field is deprecated.
	//
	BidGroupID int64 `xml:"BidGroupID,omitempty"`

	//
	// This field is deprecated.
	//
	IncludeNotes bool `xml:"IncludeNotes,omitempty"`
}

type BidGroupArrayType struct {

	//
	// This field is deprecated.
	//
	BidGroup []*BidGroupType `xml:"BidGroup,omitempty"`
}

type BidGroupItemType struct {

	//
	// This field is deprecated.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// This field is deprecated.
	//
	BidGroupItemStatus *BidGroupItemStatusCodeType `xml:"BidGroupItemStatus,omitempty"`

	//
	// This field is deprecated.
	//
	MaxBidAmount *AmountType `xml:"MaxBidAmount,omitempty"`
}

type BidGroupType struct {

	//
	// This field is deprecated.
	//
	BidGroupItem []*BidGroupItemType `xml:"BidGroupItem,omitempty"`

	//
	// This field is deprecated.
	//
	BidGroupID int64 `xml:"BidGroupID,omitempty"`

	//
	// This field is deprecated.
	//
	BidGroupName string `xml:"BidGroupName,omitempty"`

	//
	// This field is deprecated.
	//
	BidGroupStatus *BidGroupStatusCodeType `xml:"BidGroupStatus,omitempty"`
}

type BidderDetailArrayType struct {

	//
	// This field is deprecated.
	//
	BidderDetail []*BidderDetailType `xml:"BidderDetail,omitempty"`
}

type BidderDetailType struct {

	//
	// This field is deprecated.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// This field is deprecated.
	//
	Email string `xml:"Email,omitempty"`

	//
	// This field is deprecated.
	//
	FeedbackScore int32 `xml:"FeedbackScore,omitempty"`

	//
	// This field is deprecated.
	//
	UniqueNegativeFeedbackCount int32 `xml:"UniqueNegativeFeedbackCount,omitempty"`

	//
	// This field is deprecated.
	//
	UniquePositiveFeedbackCount int32 `xml:"UniquePositiveFeedbackCount,omitempty"`

	//
	// This field is deprecated.
	//
	UniqueNeutralFeedbackCount int32 `xml:"UniqueNeutralFeedbackCount,omitempty"`
}

type BidderNoticePreferencesType struct {

	//
	// This boolean field should be set to <b>true</b> in a <b>SetUserPreferences</b> call if the seller wishes to receive contact information for bidders who have bid on a seller's auction item, but did not win. This might be helpful to a seller if that seller wishes to proposed Second Chance Offers to these unsuccessful bidders if the seller has multiple, identical items, or if the winning bidder does not pay for the original auction item.
	// <br/><br/>
	// This field is always returned with <b>BidderNoticePreferences</b> container in the <b>GetUserPreferences</b> response.
	//
	UnsuccessfulBidderNoticeIncludeMyItems bool `xml:"UnsuccessfulBidderNoticeIncludeMyItems,omitempty"`
}

type BiddingDetailsType struct {

	//
	// Converted value (from seller's currency to buyer's currency) of the amount in the <b>MaxBid</b> field. This field is only applicable and returned if the buyer purchased an item from an eBay site in another country. For active items, it is recommended to refresh the listing's data every 24 hours to pick up the current conversion rates.
	//
	ConvertedMaxBid *AmountType `xml:"ConvertedMaxBid,omitempty"`

	//
	// This value is the dollar value of the highest bid that the buyer placed on the
	// auction item.
	//
	MaxBid *AmountType `xml:"MaxBid,omitempty"`

	//
	// This value is the total number of bids that the buyer placed on the
	// auction item throughout the duration of the listing.
	//
	QuantityBid int32 `xml:"QuantityBid,omitempty"`

	//
	// This field will only be returned if the buyer won the auction item, and if it is returned, its value will always be <code>1</code>.
	//
	QuantityWon int32 `xml:"QuantityWon,omitempty"`

	//
	// This field is returned as <code>true</code> if the prospective buyer is the current high bidder in an active listing.
	//
	Winning bool `xml:"Winning,omitempty"`

	//
	// This field is deprecated.
	//
	BidAssistant bool `xml:"BidAssistant,omitempty"`
}

type BiddingSummaryType struct {

	//
	// This integer value indicates the length of time (in number of days) that is being used to calculate all counts in the <b>BiddingSummary</b> container. This value is generally <code>30</code> (days), which means that all counts in the container have been calculated from the present time and going back 30 days in the past.
	// <br/><br/>
	// This field is always returned with the <b>BiddingSummary</b> container.
	//
	SummaryDays int32 `xml:"SummaryDays,omitempty"`

	//
	// This integer value indicates the total number of bids (from any and all eBay sellers) that the user has placed during the last 30 days (or the number of days specified in the <b>SummaryDays</b> field).
	// <br/><br/>
	// This field is always returned with the <b>BiddingSummary</b> container.
	//
	TotalBids int32 `xml:"TotalBids,omitempty"`

	//
	// This integer value is actually a percentage value that indicates what percentage of the user's total number of bids during the last 30 days (or the number of days specified in the <b>SummaryDays</b> field) has been placed on auction items that the seller has listed. The percentage value is rounded up to the highest whole percentage number.
	// <br/><br/>
	// This field is always returned with the <b>BiddingSummary</b> container.
	//
	BidActivityWithSeller int32 `xml:"BidActivityWithSeller,omitempty"`

	//
	// This integer value indicates the total number of bids to unique sellers that the user has placed during the last 30 days (or the number of days specified in the <b>SummaryDays</b> field).
	// <br/><br/>
	// This field is always returned with the <b>BiddingSummary</b> container.
	//
	BidsToUniqueSellers int32 `xml:"BidsToUniqueSellers,omitempty"`

	//
	// This integer value indicates the total number of bids made with unique listing categories that the user has placed during the last 30 days (or the number of days specified in the <b>SummaryDays</b> field).
	// <br/><br/>
	// This field is always returned with the <b>BiddingSummary</b> container.
	//
	BidsToUniqueCategories int32 `xml:"BidsToUniqueCategories,omitempty"`

	//
	// This integer value indicates the total number of bids that the user has retracted (from any and all sellers) during the last 30 days (or the number of days specified in the <b>SummaryDays</b> field).
	// <br/><br/>
	// This field is always returned with the <b>BiddingSummary</b> container.
	//
	BidRetractions int32 `xml:"BidRetractions,omitempty"`

	//
	// This container provides information on each auction item that the user has placed a bid on during the last 30 days (or the number of days specified in the <b>SummaryDays</b> field).
	//
	ItemBidDetails []*ItemBidDetailsType `xml:"ItemBidDetails,omitempty"`
}

type BrandMPNIdentifierEnabledDefinitionType struct {
}

type BrandMPNType struct {

	//
	// The brand of the product. Both <b>Brand</b> and <b>MPN</b> must be specified if the <b>BrandMPN</b> container is used or an error will occur. If Brand is a required or recommended item specific for a category, but an MPN is not applicable to the category/product, the Brand value should be specified in an <b>Item.ItemSpecifics.NameValueList</b> container instead.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The <b>BrandMPN</b> container is not applicable for multiple-variation listings. For multiple-variation listings that use MPNs, the <b>Brand</b> value should be specified through an <b>ItemSpecifics.NameValueList</b> container, and the  Manufacturer Part Numbers (MPNs) for each product variation should be specified through a <b>VariationSpecifics.NameValueList</b> container.
	// </span>
	//
	Brand string `xml:"Brand,omitempty"`

	//
	// The manufacturer part number of the product. Use the
	// value specified by the manufacturer.  Both <b>Brand</b> and <b>MPN</b> must be specified if the <b>BrandMPN</b> container is used or an error will occur.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that expects an MPN value, but one doesn't exist for the product, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The <b>BrandMPN</b> container is not applicable for multiple-variation listings. For multiple-variation listings that use MPNs, the <b>Brand</b> value should be specified through an <b>ItemSpecifics.NameValueList</b> container, and the  Manufacturer Part Numbers (MPNs) for each product variation should be specified through a <b>VariationSpecifics.NameValueList</b> container.
	// </span>
	//
	MPN string `xml:"MPN,omitempty"`
}

type BusinessSellerDetailsType struct {

	//
	// This field shows the address on file for the Business Seller.
	//
	Address *AddressType `xml:"Address,omitempty"`

	//
	// This field shows the Fax number on file for the Business Seller. This field is only returned if known and available.
	//
	Fax string `xml:"Fax,omitempty"`

	//
	// This field shows the email address on file for the Business Seller.
	//
	Email string `xml:"Email,omitempty"`

	//
	// This field shows any additional contact for the Business Seller in free-form text. This field is only returned if known and available.
	//
	AdditionalContactInformation string `xml:"AdditionalContactInformation,omitempty"`

	//
	// This field shows the Trade Registration Number for the Business Seller.
	//
	TradeRegistrationNumber string `xml:"TradeRegistrationNumber,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the Business Seller provides legal invoices to buyers.
	//
	LegalInvoice bool `xml:"LegalInvoice,omitempty"`

	//
	// This free-form text field provides the Business Seller's terms and conditions for doing business.
	//
	TermsAndConditions string `xml:"TermsAndConditions,omitempty"`

	//
	// This container provides Value-Added Tax (VAT) details for the Business Seller, including the seller's VAT ID and the VAT percentage rate applicable to the item. VAT is similar to a sales and/or consumption tax, and it is only applicable to sellers selling on European sites.
	//
	VATDetails *VATDetailsType `xml:"VATDetails,omitempty"`
}

type BuyerGuaranteeEnabledDefinitionType struct {
}

type BuyerPackageEnclosureType struct {
	Value string

	//
	// This attribute indicates the type of payment instructions included in the shipping package.
	//
	Type *PaymentInstructionCodeType `xml:"type,attr,omitempty"`
}

type BuyerPackageEnclosuresType struct {

	//
	// A <b>BuyerPackageEnclosure</b> container will be returned for each shipping package containing payment instructions. The 'Pay Upon Invoice' option is only available on the German site.
	//
	BuyerPackageEnclosure []*BuyerPackageEnclosureType `xml:"BuyerPackageEnclosure,omitempty"`
}

type BuyerProtectionDetailsType struct {

	//
	// This value indicates the type of buyer protection program applicable for the item.
	// This field is always returned with the <strong>ApplyBuyerProtection</strong> container.
	//
	BuyerProtectionSource *BuyerProtectionSourceCodeType `xml:"BuyerProtectionSource,omitempty"`

	//
	// This value indicates the item's eligibility for the buyer protection program listed
	// in the <strong>ApplyBuyerProtection.BuyerProtectionSource</strong> field.
	// This field is always returned with the
	// <strong>ApplyBuyerProtection</strong> container.
	//
	BuyerProtectionStatus *BuyerProtectionCodeType `xml:"BuyerProtectionStatus,omitempty"`
}

type BuyerRequirementDetailsType struct {

	//
	// The seller includes and sets this field to <code>true</code> as a mechanism to block bidders who reside (according to their eBay primary shipping address) in countries that are on the ship-to exclusion list. Sellers add countries or regions to their ship-to exclusion list by adding those countries or regions using one or more <b>ExcludeShipToLocation</b> fields in an Add/Revise/Relist call.
	// <br>
	//
	ShipToRegistrationCountry bool `xml:"ShipToRegistrationCountry,omitempty"`

	//
	// This Buyer Requirements feature is only available to sellers on the China site, and is only applicable to fixed-price or auction Buy It Now items. <br/><br/> The seller includes and sets this field to <code>true</code> as a mechanism to block prospective buyers with a feedback score of 0 from buying items with a price of 100 RMB or higher.
	// <br/>
	//
	ZeroFeedbackScore bool `xml:"ZeroFeedbackScore,omitempty"`

	//
	// The seller uses this container as a mechanism to restrict the number of items (specifying a <b>MaximumItemCount</b> value) a prospective buyer can purchase from the seller during a 10-day period. The seller also has the option of setting a <b>MinimumFeedbackScore</b> requirement. If both fields of the <b>MaximumItemRequirements</b> container are set, the <b>MaximumItemCount</b> limit will only apply to those prospective buyers that don't equal or exceed the specified minimum Feedback Score.
	//
	MaximumItemRequirements *MaximumItemRequirementsType `xml:"MaximumItemRequirements,omitempty"`

	//
	// The seller uses this container as a mechanism to block prospective buyers who have one or more Unpaid Item Strikes on their account during a specified time period. A buyer receives an Unpaid Item Strike is a seller files an Unpaid Item case against the buyer, and eBay rules in favor of the seller.
	//
	MaximumUnpaidItemStrikesInfo *MaximumUnpaidItemStrikesInfoType `xml:"MaximumUnpaidItemStrikesInfo,omitempty"`
}

type BuyerRoleMetricsType struct {

	//
	// This integer value indicates the number of positive feedback entries that the eBay user, acting in the buying role, has left for their order partner (seller) during the last one-year period, counting back from the present date.
	//
	PositiveFeedbackLeftCount int32 `xml:"PositiveFeedbackLeftCount,omitempty"`

	//
	// This integer value indicates the number of negative feedback entries that the eBay user, acting in the buying role, has left for their order partner (seller) during the last one-year period, counting back from the present date.
	//
	NegativeFeedbackLeftCount int32 `xml:"NegativeFeedbackLeftCount,omitempty"`

	//
	// This integer value indicates the number of neutral feedback entries that the eBay user, acting in the buying role, has left for their order partner (seller) during the last one-year period, counting back from the present date.
	//
	NeutralFeedbackLeftCount int32 `xml:"NeutralFeedbackLeftCount,omitempty"`

	//
	// This float value indicates the percentage of time that the eBay user, acting in the buying role, has left feedback for their order partner (seller) during the last one-year period, counting back from the present date.
	//
	FeedbackLeftPercent float32 `xml:"FeedbackLeftPercent,omitempty"`
}

type BuyerSatisfactionDashboardType struct {

	//
	// This field indicates the seller's buyer satisfaction rating. To determine this
	// rating, eBay considers your detailed seller ratings, your overall feedback rating,
	// and whatever buyer protection claims might exist on your account. eBay uses the
	// buyer satisfaction rating to see if you are eligible for certain rewards, or if you
	// need additional guidance to help you give better service.
	//
	Status *BuyerSatisfactionStatusCodeType `xml:"Status,omitempty"`

	//
	// The <b>BuyerSatisfaction.Alert</b> container is only returned if eBay
	// has posted one or more informational or warning messages related to the seller's
	// buyer satisfaction rating.
	//
	Alert []*SellerDashboardAlertType `xml:"Alert,omitempty"`
}

type BuyerType struct {

	//
	// This container uses <b>AddressType</b>, and each call that uses <b>BuyerType</b> uses the <b>ShippingAddress</b> container a little differently. See the Call Reference documentation for each call to see what fields of <b>AddressType</b> are used by each call.
	// Output only.
	//
	ShippingAddress *AddressType `xml:"ShippingAddress,omitempty"`

	//
	// This container consists of taxpayer identification for the buyer. Although this container may be used for other purposes at a later date, it is currently used by sellers selling on the Italy or Spain site to retrieve the taxpayer ID of the buyer.
	// <br/><br/>
	// It is now required that buyers registered on the Italy site provide their Codice Fiscale ID (similar to the Social Security Number for US citizens) before buying an item on the Italy site.
	// <br/><br/>
	// On the Spain site, a Spanish seller has the option to require that Spanish buyers (registered on Spain site) provide a tax ID before checkout. This option is set by the seller at the account level. Once a Spanish buyer provides a tax ID, this tax ID is associated with his/her account, and once a tax ID is associated with the account, Spanish buyer will be asked to provide the tax ID during checkout on all eBay sites. Buyers with a registered address outside of Spain will not be asked to provide a tax ID during checkout.
	// <br/><br/>
	// This container is only returned for Spanish or Italian sellers when the buyer was asked to provide tax identifier information during checkout. A <strong>BuyerTaxIdentifier</strong> will be returned for each tax ID that is associated with the buyer's account.
	//
	BuyerTaxIdentifier []*TaxIdentifierType `xml:"BuyerTaxIdentifier,omitempty"`
}

type BuyingGuideDetailsType struct {

	//
	// Information that identifies a buying guide. A buying guide contains content about particular
	// product areas, categories, or subjects to help buyers decide which type of item
	// to purchase based on their particular interests.
	// Buying guides are useful to buyers who do not have a specific product in mind.
	// For example, a digital camera buying guide could help a buyer determine what kind of
	// digital camera is right for them.
	//
	BuyingGuide []*BuyingGuideType `xml:"BuyingGuide,omitempty"`

	//
	// URL of the buying guide home page for the site being searched.
	// Your application can present this URL as a link. Optionally,
	// you can use a value like "See all buying guides" as the link's
	// display name.
	//
	BuyingGuideHub *AnyURI `xml:"BuyingGuideHub,omitempty"`
}

type BuyingGuideType struct {

	//
	// Display name of the buying guide.
	//
	Name string `xml:"Name,omitempty"`

	//
	// URL for the buying guide. Your application can
	// present this as a link. Use the value of Name as the link's display name.
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// Identifies the category (if any) that is associated
	// with the buying guide.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// Identifies the product finder (if any) that is associated with the buying guide.
	// Only returned for product finder searches.
	//
	ProductFinderID int32 `xml:"ProductFinderID,omitempty"`

	//
	// The title of the buying guide.
	//
	Title string `xml:"Title,omitempty"`

	//
	// The text of the guide. If the guide is longer than
	// 2000 characters, the text is cut off and it ends with "...".
	// See BuyingGuide.URL for a link to the full text of the review.
	//
	Text string `xml:"Text,omitempty"`

	//
	// The time and date when the guide was posted.
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`

	//
	// The author's eBay user ID.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`
}

type BuyingSummaryType struct {

	//
	// The number of auction items the user has bid on.
	//
	BiddingCount int32 `xml:"BiddingCount,omitempty"`

	//
	// The number of active auction listings in which the user is currently the highest bidder.
	//
	WinningCount int32 `xml:"WinningCount,omitempty"`

	//
	// The total cost of items that the user is currently the highest bidder on.
	//
	TotalWinningCost *AmountType `xml:"TotalWinningCost,omitempty"`

	//
	// The number of auction items that the user has won.
	//
	WonCount int32 `xml:"WonCount,omitempty"`

	//
	// The total cost of auction items that the user has won.
	//
	TotalWonCost *AmountType `xml:"TotalWonCost,omitempty"`

	//
	// The time period for which won items are displayed. Default is 31 days.
	//
	WonDurationInDays int32 `xml:"WonDurationInDays,omitempty"`

	//
	// The number of items the user has made Best Offers on.
	//
	BestOfferCount int32 `xml:"BestOfferCount,omitempty"`
}

type CalculatedHandlingDiscountType struct {

	//
	// The type of discount that is detailed in the profile.
	// If the selection is <code>EachAdditionalAmount</code>, <code>EachAdditionalAmountOff</code> or
	// <code>EachAdditionalPercentOff</code>, the value is set in the child element of same
	// name in <b>CalculatedHandlingDiscount</b>. If the selection is <code>CombinedHandlingFee</code>,
	// specify the amount in <b>CalculatedHandlingDiscount.OrderHandlingAmount</b>.
	// If the selection is <code>IndividualHandlingFee</code>, the amount is determined by eBay
	// by adding the fees of the individual items.
	//
	DiscountName *HandlingNameCodeType `xml:"DiscountName,omitempty"`

	//
	// If specified, this is the fixed shipping cost to charge for an order,
	// regardless of the number of items in the order.
	// This field is mutually exclusive with the other amount and percentage
	// fields within this type.
	// This field only applies when the specified <b>DiscountName</b> value is <code>CombinedHandlingFee</code>.
	//
	OrderHandlingAmount *AmountType `xml:"OrderHandlingAmount,omitempty"`

	//
	// The packaging/handling cost for each item beyond the first item (where the
	// item with the highest packaging/handling cost is selected by eBay as the first
	// item). Let's say the buyer purchases three items, each assigned a
	// packaging/handling cost of $8, and the seller set <b>EachAdditionalAmount</b> to $6.
	// The packaging/handling cost for three items would normally be $24, but since
	// the seller specified $6, the total packaging/handling cost would be $8 + $6 +
	// $6, or $20.
	// This field is mutually exclusive with the other amount and percentage
	// fields within this type.
	// This field only applies when the <b>DiscountName</b> value is <code>EachAdditionalAmount</code>.
	//
	EachAdditionalAmount *AmountType `xml:"EachAdditionalAmount,omitempty"`

	//
	// The amount by which to reduce the packaging/handling cost for each item beyond
	// the first item (where the item with the highest packaging/handling cost is
	// selected by eBay as the first item). Let's say the buyer purchases three
	// items, each assigned a packaging/handling cost of $8, and the seller set
	// <b>EachAdditionalAmountOff</b> to $2.  The packaging/handling cost for three items
	// would normally be $24, but since the seller specified $2, the total
	// packaging/handling cost would be $24 - (two additional items x $2), or $20.
	// This field is mutually exclusive with the other amount and percentage
	// fields within this type.
	// This field only applies when the <b>DiscountName</b> value is <code>EachAdditionalOffAmount</code>.
	//
	EachAdditionalOffAmount *AmountType `xml:"EachAdditionalOffAmount,omitempty"`

	//
	// The percentage by which to reduce the packaging/handling cost for each item
	// beyond the first item (where the item with the highest packaging/handling cost
	// is selected by eBay as the first item). Let's say the buyer purchases three
	// items, each assigned a packaging/handling cost of $8, and the seller set
	// <b>EachAdditionalPercentOff</b> to 0.25.  The packaging/handling cost for three items
	// would normally be $24, but since the seller specified 0.25 ($2 out of 8), the
	// total packaging/handling cost would be $24 - (two additional items x $2), or
	// $20.
	// This field is mutually exclusive with the amount fields within this type.
	// This field only applies when the <b>DiscountName</b> value is <code>EachAdditionalPercentOff</code>.
	//
	EachAdditionalPercentOff float32 `xml:"EachAdditionalPercentOff,omitempty"`
}

type CalculatedShippingDiscountType struct {

	//
	// This enumeration value indicates the type of calculated shipping discount rule that is being applied. Each rule is explained below.
	//
	DiscountName *DiscountNameCodeType `xml:"DiscountName,omitempty"`

	//
	// This container provides details of this particular calculated shipping discount profile.
	// <br><br>
	// <b>For SetShippingDiscountProfiles</b>: If the
	// <b>ModifyActionCode</b> value is set to <code>Update</code>, all details of the modified version of the profile must
	// be provided. If the
	// <b>ModifyActionCode</b> value is set to <code>Delete</code>, the <b>DiscountProfileID</b> is required,
	// the <b>MappingDiscountProfileID</b> is optional, and all other fields of the container are no longer applicable.
	// <br><br>
	// Restrictions on how many profiles can exist for a given
	// discount rule are discussed in the Features Guide documentation on Shipping Cost Discount Profiles.
	//
	DiscountProfile []*DiscountProfileType `xml:"DiscountProfile,omitempty"`
}

type CalculatedShippingPreferencesType struct {

	//
	// This field is deprecated.
	//
	CalculatedShippingAmountForEntireOrder *AmountType `xml:"CalculatedShippingAmountForEntireOrder,omitempty"`

	//
	// This field is deprecated.
	//
	CalculatedShippingChargeOption *CalculatedShippingChargeOptionCodeType `xml:"CalculatedShippingChargeOption,omitempty"`

	//
	// This field is deprecated.
	//
	CalculatedShippingRateOption *CalculatedShippingRateOptionCodeType `xml:"CalculatedShippingRateOption,omitempty"`

	//
	// This field is deprecated.
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`
}

type CalculatedShippingRateType struct {

	//
	// The postal code for the location from which the package will be shipped. A postal code is required for calculated shipping. This field is not necessary if a postal code is already specified through the <strong>Item.PostalCode</strong> field. If a postal code is included in both fields, the value in <strong>Item.PostalCode</strong> field is used, and the value in <strong>OriginatingPostalCode</strong> is ignored.
	//
	OriginatingPostalCode string `xml:"OriginatingPostalCode,omitempty"`

	//
	// <span class="tablenote"><strong>Note:</strong>
	// The value for <strong>MeasurementUnit</strong> should now be specified in the <strong>ShippingPackageDetails</strong> container instead. If the <strong>MeasurementUnit</strong> field is passed in the <strong>CalculatedShippingRate</strong> container and in the <strong>ShippingPackageDetails</strong> container, the value in the <strong>ShippingPackageDetails</strong> container will take precedence.
	// </span>
	// <br>
	// Specifies the unit type of the weight and dimensions of a
	// shipping package.
	// If <strong>MeasurementUnit</strong> is used, its value will override the system specified through a  <strong>measurementSystem</strong> attribute in dimension and/or weight-related fields.
	// If neither a <strong>MeasurementUnit</strong> value nor a <strong>measurementSystem</strong> attribute are specified, the following defaults
	// will be used:
	// <br><br>
	// English: US<br>
	// Metric: CA, CA-FR, AU
	// <br><br>
	// CA and CA-FR support both English and Metric, while other sites
	// only support the site's default.
	// <br><br>
	// Use <strong>MeasurementUnit</strong> with weight and package dimensions.  For example,
	// to represent a 5 lbs 2 oz package:
	// <br><br>
	// <code>&lt;MeasurementUnit&gt;English&lt;/MeasurementUnit&gt;
	// <br>
	// &lt;WeightMajor&gt;5&lt;/WeightMajor&gt;
	// <br>
	// &lt;WeightMinor&gt;2&lt;/WeightMinor&gt;</code>
	//
	MeasurementUnit *MeasurementSystemCodeType `xml:"MeasurementUnit,omitempty"`

	//
	// Fees a seller might assess for the shipping of the item (in addition to
	// whatever the shipping service might charge).
	// Any packaging/handling cost specified on input is added to each shipping
	// service on output.
	// <br/><br/>
	// If domestic and international calculated shipping is offered for an item and
	// if packaging/handling cost is specified only for domestic shipping, that cost
	// will be applied by eBay as the international packaging/handling cost. (To
	// specify a international packaging/handling cost, you must always specify a
	// domestic packaging/handling cost, even if it is 0.) When UPS is one of the
	// shipping services offered by the seller, package dimensions are required on
	// list/relist/revise.
	// For calculated shipping only.
	//
	PackagingHandlingCosts *AmountType `xml:"PackagingHandlingCosts,omitempty"`

	//
	// <span class="tablenote"><strong>Note:</strong>
	// The value for <strong>ShippingIrregular</strong> should now be specified in the <strong>ShippingPackageDetails</strong> container instead. If the <strong>ShippingIrregular</strong> field is passed in the <strong>CalculatedShippingRate</strong> container and in the <strong>ShippingPackageDetails</strong> container, the value in the <strong>ShippingPackageDetails</strong> container will take precedence. This field may be deprecated in the future.
	// </span>
	// <br>
	// This boolean field indicates that the shipping package is considered an irregular shape and/or size by the shipping carrier, and thus requires special handling. For calculated
	// shipping only.
	//
	ShippingIrregular bool `xml:"ShippingIrregular,omitempty"`

	//
	// Fees a seller might assess for the shipping of the item (in addition to
	// whatever the shipping service might charge).
	// Any packaging/handling cost specified on input is added to each shipping
	// service on output.
	// <br/><br/>
	// If domestic and international calculated shipping is offered for an item and
	// if packaging/handling cost is specified only for domestic shipping, that cost
	// will be applied by eBay as the international packaging/handling cost. (To
	// specify a international packaging/handling cost, you must always specify a
	// domestic packaging/handling cost, even if it is 0.)
	// For international calculated shipping only.
	//
	InternationalPackagingHandlingCosts *AmountType `xml:"InternationalPackagingHandlingCosts,omitempty"`
}

type CancelDetailType struct {

	//
	// This value indicates the reason why the order cancellation was initiated. This field is always returned with the <b>CancelDetail</b> container. Typical buyer-initiated cancellation reasons include <code>OrderPlacedByMistake</code>, <code>WontArriveInTime</code>, or <code>FoundCheaperPrice</code>. Sellers may initiate an order cancellation on behalf of the buyer. In this scenario, the seller should state the cancellation reason as <code>BuyerCancelOrder</code>. If the seller is cancelling an order because he/she is out of stock on an item, the seller should state the cancellation reason as <code>OutOfStock</code>. Unfortunately, in this scenario, the seller will receive a seller defect for this cancellation reason. Other order cancellation reasons are specific to eBay Scheduled Delivery orders. eBay Scheduled Delivery is similar to the eBay Now service in the US (now retired),  and is only available in the UK.  See <a href="types/CancelReasonCodeType.html">CancelReasonCodeType</a> for the complete list of enumeration values that can be returned in this field.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// Currently, the <b>CancelReason</b> field is being returned under the <b>Order</b> container and under the <b>CancelDetail</b> container. However, there are plans to deprecate this field from <b>OrderType</b> in the future.
	// </span>
	//
	CancelReason string `xml:"CancelReason,omitempty"`

	//
	// The detailed reason of why the order cancellation was initiated. This field is only returned if it is available for an order that has been cancelled, or if an order is going through the cancellation process.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// Currently, the <b>CancelReasonDetails</b> field is being returned under the <b>Order</b> container and under the <b>CancelDetail</b> container. However, there are plans to deprecate this field from <b>OrderType</b> in the future.
	// </span>
	//
	CancelReasonDetails string `xml:"CancelReasonDetails,omitempty"`

	//
	// This value indicates which party initiated the cancellation of the eBay order. It will usually be <code>Buyer</code> or <code>Seller</code>, but it can also be <code>CS</code> (eBay Customer Support). See <a href="types/CancelInitiatorCodeType.html">CancelInitiatorCodeType</a> for the complete list of enumeration values that can be returned in this field. This field is always returned with the <b>CancelDetail</b> container.
	//
	CancelIntiator string `xml:"CancelIntiator,omitempty"`

	//
	// This timestamp indicates when the cancellation of the eBay order was initiated. This field is always returned with the <b>CancelDetail</b> container.
	//
	CancelIntiationDate time.Time `xml:"CancelIntiationDate,omitempty"`

	//
	// Timestamp indicating when the cancellation process of an eBay order has been completed, which will be indicated if the  <b>Order.CancelStatus</b> field has a value of <code>CancelComplete</code>. This field will not be returned until the cancellation process is completed.
	//
	CancelCompleteDate time.Time `xml:"CancelCompleteDate,omitempty"`
}

type CancelOfferArrayType struct {

	//
	// This field is deprecated.
	//
	CancelOffer []*CancelOfferType `xml:"CancelOffer,omitempty"`
}

type CancelOfferType struct {

	//
	// This field is deprecated.
	//
	Offer *OfferType `xml:"Offer,omitempty"`

	//
	// This field is deprecated.
	//
	Explanation string `xml:"Explanation,omitempty"`
}

type CartItemType struct {

	//
	// This field is deprecated.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// This field is deprecated.
	//
	ReferenceID int64 `xml:"ReferenceID,omitempty"`

	//
	// This field is deprecated.
	//
	Action *ModifyActionCodeType `xml:"Action,omitempty"`
}

type CatalogProductType struct {

	//
	// This field is deprecated.
	//
	Title string `xml:"Title,omitempty"`

	//
	// This field is deprecated.
	//
	DetailsURL *AnyURI `xml:"DetailsURL,omitempty"`

	//
	// This field is deprecated.
	//
	StockPhotoURL *AnyURI `xml:"StockPhotoURL,omitempty"`

	//
	// This field is deprecated.
	//
	DisplayStockPhotos bool `xml:"DisplayStockPhotos,omitempty"`

	//
	// This field is deprecated.
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// This field is deprecated.
	//
	ProductReferenceID int64 `xml:"ProductReferenceID,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSetID int32 `xml:"AttributeSetID,omitempty"`

	//
	// This field is deprecated.
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// This field is deprecated.
	//
	ReviewCount int32 `xml:"ReviewCount,omitempty"`

	//
	// This field is deprecated.
	//
	ReviewDetails *ReviewDetailsType `xml:"ReviewDetails,omitempty"`

	//
	// This field is deprecated.
	//
	ProductState *ProductStateCodeType `xml:"ProductState,omitempty"`
}

type CategoryArrayType struct {

	//
	// This container provides details about the eBay category identified in the <b>CategoryID</b> field. For <b>GetCategories</b>, this node is not returned when no <b>DetailLevel</b> value is specified.
	//
	Category []*CategoryType `xml:"Category,omitempty"`
}

type CategoryFeatureType struct {

	//
	// Specifies the unique identifier of the eBay category. All eBay feature information that is returned under the corresponding <b>Category</b> container is relevant to this eBay category.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// A <b>ListingDuration</b> field is returned for each listing type and listing duration combination that is supported for the category. The integer value indicates the number of days of the listing duration, and the <b>type</b> attribute identifies the supported listing type.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ListingDurations</code>.
	//
	ListingDuration []*ListingDurationReferenceType `xml:"ListingDuration,omitempty"`

	//
	// Indicates whether the category requires sellers to specify shipping details at listing time.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ShippingTermsRequired</code>.
	//
	ShippingTermsRequired bool `xml:"ShippingTermsRequired,omitempty"`

	//
	// Indicates whether the category supports the Best Offer feature for listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>BestOfferEnabled</code>.
	//
	BestOfferEnabled bool `xml:"BestOfferEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	DutchBINEnabled bool `xml:"DutchBINEnabled,omitempty"`

	//
	// Indicates whether a bidder must consent to the bid by confirming that
	// he or she read and agrees to the terms in eBay's privacy policy.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>UserConsentRequired</code>.
	//
	UserConsentRequired bool `xml:"UserConsentRequired,omitempty"`

	//
	// Indicates whether or not it is possible to enhance a listing by putting
	// it into a rotation for display on a special area of the eBay home page.
	// Support for this feature varies by site. Item or feedback restrictions may apply.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>HomePageFeaturedEnabled</code>.
	//
	HomePageFeaturedEnabled bool `xml:"HomePageFeaturedEnabled,omitempty"`

	//
	// Indicates whether the category supports the Pro Pack Bundle listing upgrade.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ProPack</code>.
	//
	ProPackEnabled bool `xml:"ProPackEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	BasicUpgradePackEnabled bool `xml:"BasicUpgradePackEnabled,omitempty"`

	//
	// Indicates whether the category supports the Value Pack bundle listing upgrade.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ValuePack</code>.
	//
	ValuePackEnabled bool `xml:"ValuePackEnabled,omitempty"`

	//
	// Indicates whether the category supports the Pro Pack Plus bundle listing upgrade.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ProPackPlus</code>.
	//
	ProPackPlusEnabled bool `xml:"ProPackPlusEnabled,omitempty"`

	//
	// Indicates whether the category supports Classified Ad listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>AdFormatEnabled</code>.
	//
	AdFormatEnabled *AdFormatEnabledCodeType `xml:"AdFormatEnabled,omitempty"`

	//
	// Indicates whether the category supports sellers offering a counter offer against a buyer's Best Offer, or a buyer offering a counter offer against the seller's counter offer.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>BestOfferCounterEnabled</code>.
	//
	BestOfferCounterEnabled bool `xml:"BestOfferCounterEnabled,omitempty"`

	//
	// Indicates whether the category supports the Best Offer Auto Decline feature.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>BestOfferAutoDeclineEnabled</code>.
	//
	BestOfferAutoDeclineEnabled bool `xml:"BestOfferAutoDeclineEnabled,omitempty"`

	//
	// Indicates whether the category supports the Speciality level subscription to Motors Local Market listings. This feature is only available to licensed vehicle dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketSpecialitySubscription</code>.
	//
	LocalMarketSpecialitySubscription bool `xml:"LocalMarketSpecialitySubscription,omitempty"`

	//
	// Indicates whether the category supports the Regular level subscription to Motors Local Market listings. This feature is only available to licensed vehicle dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketRegularSubscription</code>.
	//
	LocalMarketRegularSubscription bool `xml:"LocalMarketRegularSubscription,omitempty"`

	//
	// Indicates whether the category supports the Premium level subscription Motors Local Market listings. This feature is only available to licensed vehicle dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketPremiumSubscription</code>.
	//
	LocalMarketPremiumSubscription bool `xml:"LocalMarketPremiumSubscription,omitempty"`

	//
	// Indicates whether the category supports a seller creating a Motors Local Market listing without a subscription. This feature is only available to licensed vehicle dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketNonSubscription</code>.
	//
	LocalMarketNonSubscription bool `xml:"LocalMarketNonSubscription,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressEnabled bool `xml:"ExpressEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressPicturesRequired bool `xml:"ExpressPicturesRequired,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressConditionRequired bool `xml:"ExpressConditionRequired,omitempty"`

	//
	// Indicates the Minimum Reserve Price for an auction listing in this category. If there is no Minimum Reserve Price, a value of <code>0.0</code> is returned in this field.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>MinimumReservePrice</code>.
	//
	MinimumReservePrice float64 `xml:"MinimumReservePrice,omitempty"`

	//
	// Indicates whether this category supports seller-level contact information for Classified Ad listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>SellerContactDetailsEnabled</code>.
	//
	SellerContactDetailsEnabled bool `xml:"SellerContactDetailsEnabled,omitempty"`

	//
	// Indicates whether the Transaction Confirmation Request feature is supported for this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default.
	//
	TransactionConfirmationRequestEnabled bool `xml:"TransactionConfirmationRequestEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	StoreInventoryEnabled bool `xml:"StoreInventoryEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	SkypeMeTransactionalEnabled bool `xml:"SkypeMeTransactionalEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	SkypeMeNonTransactionalEnabled bool `xml:"SkypeMeNonTransactionalEnabled,omitempty"`

	//
	// Indicates whether the payment method should be displayed to the user for
	// Classified Ad format listings.
	// Even if enabled, checkout may or may not be enabled.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdPaymentMethodEnabled</code>.
	//
	ClassifiedAdPaymentMethodEnabled *ClassifiedAdPaymentMethodEnabledCodeType `xml:"ClassifiedAdPaymentMethodEnabled,omitempty"`

	//
	// Indicates if shipping options are available for Classified Ad listings
	// in the category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdShippingMethodEnabled</code>.
	//
	ClassifiedAdShippingMethodEnabled bool `xml:"ClassifiedAdShippingMethodEnabled,omitempty"`

	//
	// Indicates if Best offer is enabled for Classified Ad listings for this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdBestOfferEnabled</code>.
	//
	ClassifiedAdBestOfferEnabled *ClassifiedAdBestOfferEnabledCodeType `xml:"ClassifiedAdBestOfferEnabled,omitempty"`

	//
	// Indicates whether counter offers are allowed in Classified Ad listings
	// for this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdCounterOfferEnabled</code>.
	//
	ClassifiedAdCounterOfferEnabled bool `xml:"ClassifiedAdCounterOfferEnabled,omitempty"`

	//
	// Indicates whether automatic decline for best offers for Classified Ad listings is enabled for this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdAutoDeclineEnabled</code>.
	//
	ClassifiedAdAutoDeclineEnabled bool `xml:"ClassifiedAdAutoDeclineEnabled,omitempty"`

	//
	// Indicates whether the category supports the telephone as a contact method for Classified Ad listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdContactByPhoneEnabled</code>.
	//
	ClassifiedAdContactByPhoneEnabled bool `xml:"ClassifiedAdContactByPhoneEnabled,omitempty"`

	//
	// Indicates whether the category supports email as a contact method for Classified Ad listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdContactByEmailEnabled</code>.
	//
	ClassifiedAdContactByEmailEnabled bool `xml:"ClassifiedAdContactByEmailEnabled,omitempty"`

	//
	// Indicates whether listings in this category need to have a safe payment method.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>SafePaymentRequired</code>.
	//
	SafePaymentRequired bool `xml:"SafePaymentRequired,omitempty"`

	//
	// Indicates if pay-per-lead listings are allowed for this category. Pay-per-lead listings can be applicable if the value of <b>ListingType</b> is <code>LeadGeneration</code> and the value of <b>ListingSubtype</b> is <code>ClassifiedAd</code>.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default.
	//
	ClassifiedAdPayPerLeadEnabled bool `xml:"ClassifiedAdPayPerLeadEnabled,omitempty"`

	//
	// Indicates whether the category supports the use of Item Specifics in listings. If enabled, sellers can use the <b>Item.ItemSpecifics</b> node in Add/Revise/Relist calls to specify Item Specific name-value pairs.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ItemSpecificsEnabled</code>.
	//
	ItemSpecificsEnabled *ItemSpecificsEnabledCodeType `xml:"ItemSpecificsEnabled,omitempty"`

	//
	// <span class="tablenote"><b>Note:</b>
	// This field is deprecated since it is only applicable to the eBay India site, and this marketplace is no longer available.</span>
	// Indicates whether the category supports the <code>PaisaPayEscrow</code> payment method. This feature is only applicable to the India site.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PaisaPayFullEscrowEnabled</code>.
	//
	PaisaPayFullEscrowEnabled bool `xml:"PaisaPayFullEscrowEnabled,omitempty"`

	//
	// Indicates whether the category supports the capability to identify a product using the brand/manufacturer part number combination.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>BrandMPNIdentifierEnabled</code>.
	//
	BrandMPNIdentifierEnabled bool `xml:"BrandMPNIdentifierEnabled,omitempty"`

	//
	// Indicates whether the category supports the Best Offer Automatic Accept feature for Classified Ad listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdAutoAcceptEnabled</code>.
	//
	ClassifiedAdAutoAcceptEnabled bool `xml:"ClassifiedAdAutoAcceptEnabled,omitempty"`

	//
	// Indicates whether the category supports the Best Offer Automatic Accept feature for listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>BestOfferAutoAcceptEnabled</code>.
	//
	BestOfferAutoAcceptEnabled bool `xml:"BestOfferAutoAcceptEnabled,omitempty"`

	//
	// Indicates whether the category supports specifying that listings be displayed in the default search results of North America sites (US and Canada (English).
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>CrossBorderTradeEnabled</code>.
	//
	CrossBorderTradeNorthAmericaEnabled bool `xml:"CrossBorderTradeNorthAmericaEnabled,omitempty"`

	//
	// Indicates whether the category supports specifying that listings be displayed in the default search results of the UK and Ireland sites.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>CrossBorderTradeEnabled</code>.
	//
	CrossBorderTradeGBEnabled bool `xml:"CrossBorderTradeGBEnabled,omitempty"`

	//
	// Indicates whether the category supports specifying that listings be displayed in the default search results of the Australia site.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>CrossBorderTradeEnabled</code>.
	//
	CrossBorderTradeAustraliaEnabled bool `xml:"CrossBorderTradeAustraliaEnabled,omitempty"`

	//
	// For the Australia site, if both <b>PayPalBuyerProtectionEnabled</b> and <b>BuyerGuaranteeEnabled</b> are returned, then buyer protection is allowed for this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PayPalBuyerProtectionEnabled</code>.
	//
	PayPalBuyerProtectionEnabled bool `xml:"PayPalBuyerProtectionEnabled,omitempty"`

	//
	// For the Australia site, if both <b>PayPalBuyerProtectionEnabled</b> and <b>BuyerGuaranteeEnabled</b> are returned, then buyer protection is allowed for this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PayPalBuyerProtectionEnabled</code>.
	//
	BuyerGuaranteeEnabled bool `xml:"BuyerGuaranteeEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	CombinedFixedPriceTreatmentEnabled bool `xml:"CombinedFixedPriceTreatmentEnabled,omitempty"`

	//
	// This field is returned if the Featured Gallery feature is supported for the category. The time unit that is returned in this field indicates how long a gallery will be featured on eBay.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>GalleryFeaturedDurations</code>.
	//
	GalleryFeaturedDurations *ListingEnhancementDurationReferenceType `xml:"GalleryFeaturedDurations,omitempty"`

	//
	// Indicates whether the category requires PayPal as a payment method.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PayPalRequired</code>.
	//
	PayPalRequired bool `xml:"PayPalRequired,omitempty"`

	//
	// Specifies whether this category allows Classified Ad listings on eBay Motors. This element is applicable for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProAdFormatEnabled</code>.
	//
	EBayMotorsProAdFormatEnabled *AdFormatEnabledCodeType `xml:"eBayMotorsProAdFormatEnabled,omitempty"`

	//
	// Indicates whether this category supports including the telephone in the seller's contact information. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProContactByPhoneEnabled</code>.
	//
	EBayMotorsProContactByPhoneEnabled bool `xml:"eBayMotorsProContactByPhoneEnabled,omitempty"`

	//
	// Indicates which telephone option is enabled for the seller's contact information. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProContactByPhoneEnabled</code>.
	//
	EBayMotorsProPhoneCount int32 `xml:"eBayMotorsProPhoneCount,omitempty"`

	//
	// Indicates whether this category supports including the address in the seller's contact information. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProContactByAddressEnabled</code>.
	//
	EBayMotorsProContactByAddressEnabled bool `xml:"eBayMotorsProContactByAddressEnabled,omitempty"`

	//
	// Indicates which address option is enabled for the seller's contact information. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProContactByAddressEnabled</code>.
	//
	EBayMotorsProStreetCount int32 `xml:"eBayMotorsProStreetCount,omitempty"`

	//
	// Indicates whether this category supports including the company name in the seller's contact information. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProCompanyNameEnabled</code>.
	//
	EBayMotorsProCompanyNameEnabled bool `xml:"eBayMotorsProCompanyNameEnabled,omitempty"`

	//
	// Indicates whether this category supports including an email address in the seller's contact information. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProContactByEmailEnabled</code>.
	//
	EBayMotorsProContactByEmailEnabled bool `xml:"eBayMotorsProContactByEmailEnabled,omitempty"`

	//
	// Indicates if Best Offer is supported for eBay Motors Classified Ad listings in this category. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProBestOfferEnabled</code>.
	//
	EBayMotorsProBestOfferEnabled *ClassifiedAdBestOfferEnabledCodeType `xml:"eBayMotorsProBestOfferEnabled,omitempty"`

	//
	// Specifies whether this category allows auto-accept for Best Offers for eBay Motors Classified Ad listings. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProAutoAcceptEnabled</code>.
	//
	EBayMotorsProAutoAcceptEnabled bool `xml:"eBayMotorsProAutoAcceptEnabled,omitempty"`

	//
	// Specifies whether this category allows auto-decline for Best Offers for eBay Motors Classified Ad listings. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProAutoDeclineEnabled</code>.
	//
	EBayMotorsProAutoDeclineEnabled bool `xml:"eBayMotorsProAutoDeclineEnabled,omitempty"`

	//
	// Indicates if the payment method should be displayed to the user for this category in an eBay Motors Classified Ad listing. Even if enabled, checkout may or may not be enabled. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProPaymentMethodCheckOutEnabled</code>.
	//
	EBayMotorsProPaymentMethodCheckOutEnabled *ClassifiedAdPaymentMethodEnabledCodeType `xml:"eBayMotorsProPaymentMethodCheckOutEnabled,omitempty"`

	//
	// Indicates if shipping options should be displayed to the user for this category in an eBay Motors Classified Ad listing. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProShippingMethodEnabled</code>.
	//
	EBayMotorsProShippingMethodEnabled bool `xml:"eBayMotorsProShippingMethodEnabled,omitempty"`

	//
	// Indicates whether counter offers are allowed on Best Offers for this category in an eBay Motors Classified Ad listing. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProCounterOfferEnabled</code>.
	//
	EBayMotorsProCounterOfferEnabled bool `xml:"eBayMotorsProCounterOfferEnabled,omitempty"`

	//
	// Specifies whether this category allows seller-level contact information for eBay Motors Classified Ad listings. A value of true means seller-level contact information is available for Classified Ad listings. This element is for eBay Motors Pro users.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>eBayMotorsProSellerContactDetailsEnabled</code>.
	//
	EBayMotorsProSellerContactDetailsEnabled bool `xml:"eBayMotorsProSellerContactDetailsEnabled,omitempty"`

	//
	// Specifies whether this category supports Motor Local Market Classified Ad listings. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketAdFormatEnabled</code>.
	//
	LocalMarketAdFormatEnabled *AdFormatEnabledCodeType `xml:"LocalMarketAdFormatEnabled,omitempty"`

	//
	// Indicates whether this category supports including the telephone in the seller's contact information. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketContactByPhoneEnabled</code>.
	//
	LocalMarketContactByPhoneEnabled bool `xml:"LocalMarketContactByPhoneEnabled,omitempty"`

	//
	// Indicates which telephone option is enabled for the seller's contact information. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketContactByPhoneEnabled</code>.
	//
	LocalMarketPhoneCount int32 `xml:"LocalMarketPhoneCount,omitempty"`

	//
	// Indicates whether this category supports including the address in the seller's contact information. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketContactByAddressEnabled</code>.
	//
	LocalMarketContactByAddressEnabled bool `xml:"LocalMarketContactByAddressEnabled,omitempty"`

	//
	// Indicates which address option is enabled for the seller's contact information. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketContactByAddressEnabled</code>.
	//
	LocalMarketStreetCount int32 `xml:"LocalMarketStreetCount,omitempty"`

	//
	// Indicates whether the category supports including a company name in the seller's contact information. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketCompanyNameEnabled</code>.
	//
	LocalMarketCompanyNameEnabled bool `xml:"LocalMarketCompanyNameEnabled,omitempty"`

	//
	// Indicates whether the category supports including an email address in the seller's contact information. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketContactByEmailEnabled</code>.
	//
	LocalMarketContactByEmailEnabled bool `xml:"LocalMarketContactByEmailEnabled,omitempty"`

	//
	// Indicates if Best Offer is enabled/required for Motors Local Market Classified Ad listings in this category. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketBestOfferEnabled</code>.
	//
	LocalMarketBestOfferEnabled *ClassifiedAdBestOfferEnabledCodeType `xml:"LocalMarketBestOfferEnabled,omitempty"`

	//
	// Specifies whether this category supports auto-accept for Best Offers for Motors Local Market Classified Ads. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketAutoAcceptEnabled</code>.
	//
	LocalMarketAutoAcceptEnabled bool `xml:"LocalMarketAutoAcceptEnabled,omitempty"`

	//
	// Specifies whether this category supports auto-decline for Best Offers for Motors Local Market Classified Ads. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketAutoDeclineEnabled</code>.
	//
	LocalMarketAutoDeclineEnabled bool `xml:"LocalMarketAutoDeclineEnabled,omitempty"`

	//
	// Indicates if the payment method should be displayed to the user for this category in an Motors Local Market Classified Ad listing. Even if enabled, checkout may or may not be enabled. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketPaymentMethodCheckOutEnabled</code>.
	//
	LocalMarketPaymentMethodCheckOutEnabled *ClassifiedAdPaymentMethodEnabledCodeType `xml:"LocalMarketPaymentMethodCheckOutEnabled,omitempty"`

	//
	// Indicates if shipping methods should be displayed to the user for this category in an Motors Local Market Classified Ad listing. Even if enabled, checkout may or may not be enabled. This element is for Local market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketShippingMethodEnabled</code>.
	//
	LocalMarketShippingMethodEnabled bool `xml:"LocalMarketShippingMethodEnabled,omitempty"`

	//
	// Indicates whether counter offers are allowed on Best Offers for this category for Motors Local Market Classified Ad listings. This element is for Local market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketCounterOfferEnabled</code>.
	//
	LocalMarketCounterOfferEnabled bool `xml:"LocalMarketCounterOfferEnabled,omitempty"`

	//
	// Specifies the whether this category allows seller-level contact information for Motors Local Market Classified Ad listings. This element is for Local Market dealers.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>LocalMarketSellerContactDetailsEnabled</code>.
	//
	LocalMarketSellerContactDetailsEnabled bool `xml:"LocalMarketSellerContactDetailsEnabled,omitempty"`

	//
	// Indicates which telephone option is included in the seller's contact information. This element is for For Sale By Owner listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdContactByPhoneEnabled</code>.
	//
	ClassifiedAdPhoneCount int32 `xml:"ClassifiedAdPhoneCount,omitempty"`

	//
	// Indicates whether this category supports including an address in the seller's contact information. This element is for For Sale By Owner listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdContactByAddressEnabled</code>.
	//
	ClassifiedAdContactByAddressEnabled bool `xml:"ClassifiedAdContactByAddressEnabled,omitempty"`

	//
	// Indicates which address option is included in the seller's contact information. This element is for For Sale By Owner listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdContactByAddressEnabled</code>.
	//
	ClassifiedAdStreetCount int32 `xml:"ClassifiedAdStreetCount,omitempty"`

	//
	// Indicates whether this category supports including a company name in the seller's contact information. This element is for For Sale By Owner listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ClassifiedAdCompanyNameEnabled</code>.
	//
	ClassifiedAdCompanyNameEnabled bool `xml:"ClassifiedAdCompanyNameEnabled,omitempty"`

	//
	// The value in this field indicates whether the category supports Motors Local Market listings if the seller has a Specialty vehicle subscription.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>SpecialitySubscription</code>.
	//
	SpecialitySubscription *GeographicExposureCodeType `xml:"SpecialitySubscription,omitempty"`

	//
	// The value in this field indicates whether the category supports Motors Local Market listings if the seller has a Regular vehicle subscription.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>RegularSubscription</code>.
	//
	RegularSubscription *GeographicExposureCodeType `xml:"RegularSubscription,omitempty"`

	//
	// The value in this field indicates whether the category supports Motors Local Market listings if the seller has a Premium vehicle subscription.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PremiumSubscription</code>.
	//
	PremiumSubscription *GeographicExposureCodeType `xml:"PremiumSubscription,omitempty"`

	//
	// The value in this field indicates whether the category supports Motors Local Market listings if the seller does not have a vehicle subscription.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>NonSubscription</code>.
	//
	NonSubscription *GeographicExposureCodeType `xml:"NonSubscription,omitempty"`

	//
	// <span class="tablenote"><b>Note:</b>
	// This field is deprecated since it is only applicable to the eBay India site, and this marketplace is no longer available.</span>
	// Indicates the escrow workflow version that applies to the category on the India site: Default Workflow, Workflow A or Workflow B.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>INEscrowWorkflowTimeline</code>.
	//
	INEscrowWorkflowTimeline *INEscrowWorkflowTimelineCodeType `xml:"INEscrowWorkflowTimeline,omitempty"`

	//
	// This field is deprecated.
	//
	PayPalRequiredForStoreOwner bool `xml:"PayPalRequiredForStoreOwner,omitempty"`

	//
	// Indicates if the category allows the seller to revise the quantity of a multi-quantity, active listing.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ReviseQuantityAllowed</code>.
	//
	ReviseQuantityAllowed bool `xml:"ReviseQuantityAllowed,omitempty"`

	//
	// Indicates if the category allows the seller to revise the price of a fixed-price listing.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>RevisePriceAllowed</code>.
	//
	RevisePriceAllowed bool `xml:"RevisePriceAllowed,omitempty"`

	//
	// Indicates if an eBay Store owner gets extended listing durations in a given category. When the value of this element is true, it means the listing duration values defined in <b>StoreOwnerExtendedListingDurations</b> are applicable to fixed-price listings in a given category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>StoreOwnerExtendedListingDurationsEnabled</code>.
	//
	StoreOwnerExtendedListingDurationsEnabled bool `xml:"StoreOwnerExtendedListingDurationsEnabled,omitempty"`

	//
	// Provides additional listings durations that are available to eBay Store owners. The extended listing durations provided here in this element should be merged in with the baseline listing durations provided in the <b>ListingDurations</b> element. Applies to fixed-price Listings.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>StoreOwnerExtendedListingDurations</code>.
	//
	StoreOwnerExtendedListingDurations *StoreOwnerExtendedListingDurationsType `xml:"StoreOwnerExtendedListingDurations,omitempty"`

	//
	// <b>For most sites:</b> If true, listings in this
	// category require a return policy. <br>
	// <br>
	// <b>For eBay Australia (AU) and
	// US eBay Motors Parts and Accessories:</b>
	// If true, the category supports but does not require a
	// return policy.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ReturnPolicyEnabled</code>.
	//
	ReturnPolicyEnabled bool `xml:"ReturnPolicyEnabled,omitempty"`

	//
	// Indicates if a seller's stated handling time is enabled for a category. A handling time is generally needed for items that are shipped to the buyer, but not necessarily applicable to freight shipping or local pickup. <br>
	// <br>
	// The handling time is the maximum number of business days the seller
	// commits to for preparing an item to be shipped after receiving a
	// cleared payment. The seller's handling time does not include the
	// shipping time (the carrier's transit time).
	// <br>
	// For a list of the handling time values allowed for each site, use
	// <code>DispatchTimeMaxDetails</code> in <b>GeteBayDetails</b>.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Although the field name ends with "Enabled", a value of true means
	// that a handling time is NOT supported, and value of false means
	// that a handling time IS supported.</span>
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>HandlingTimeEnabled</code>.
	//
	HandlingTimeEnabled bool `xml:"HandlingTimeEnabled,omitempty"`

	//
	// The maximum cost the seller can charge for the first domestic flat-rate shipping
	// service.
	// Mutually exclusive with the <b>Group</b><code>N</code><b>MaxFlatShippingCost</b> elements.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>MaxFlatShippingCost</code>.
	//
	MaxFlatShippingCost *AmountType `xml:"MaxFlatShippingCost,omitempty"`

	//
	// Returns the applicable max cap per shipping cost for shipping service group1.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>Group1MaxFlatShippingCost</code>.
	//
	Group1MaxFlatShippingCost *AmountType `xml:"Group1MaxFlatShippingCost,omitempty"`

	//
	// Returns the applicable max cap per shipping cost for shipping service group2.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>Group2MaxFlatShippingCost</code>.
	//
	Group2MaxFlatShippingCost *AmountType `xml:"Group2MaxFlatShippingCost,omitempty"`

	//
	// Returns the applicable max cap per shipping cost for shipping service group3.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>Group3MaxFlatShippingCost</code>.
	//
	Group3MaxFlatShippingCost *AmountType `xml:"Group3MaxFlatShippingCost,omitempty"`

	//
	// Indicates the acceptable payment methods that can be used when listing an item for sale in the corresponding category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PaymentMethods</code>.
	//
	PaymentMethod []*BuyerPaymentMethodCodeType `xml:"PaymentMethod,omitempty"`

	//
	// If <code>true</code>, you can pass in <b>Item.Variations</b> in an
	// Add/Revise/Relist fixed-price item call when you list in this
	// category.<br>
	// <br>
	// Multi-variation listings contain items that are logically the same
	// product, but that vary in their manufacturing details or packaging.
	// For example, a particular brand and style of shirt could be
	// available in different sizes and colors, such as "large blue" and
	// "medium black" variations.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>VariationsEnabled</code>.
	//
	VariationsEnabled bool `xml:"VariationsEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeConversionEnabled *AttributeConversionEnabledCodeType `xml:"AttributeConversionEnabled,omitempty"`

	//
	// Indicates whether the category supports free, automatic upgrades for Gallery Plus, which enhances pictures in search results.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>FreeGalleryPlusEnabled</code>.
	//
	FreeGalleryPlusEnabled bool `xml:"FreeGalleryPlusEnabled,omitempty"`

	//
	// Indicates whether the category supports free, automatic upgrades for Picture Pack, a discount package that includes super-sizing of pictures.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>FreePicturePackEnabled</code>.
	//
	FreePicturePackEnabled bool `xml:"FreePicturePackEnabled,omitempty"`

	//
	// Indicates whether the category supports parts compatibility by application
	// (<b>ByApplication</b>), by specification (<b>BySpecification</b>), or not at all
	// (<b>Disabled</b>). Categories cannot support both types of parts compatibility.
	// <br><br>
	// Parts Compatibility is supported in limited Parts & Accessories
	// categories for the eBay Motors (US) site (site ID 100) only.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>CompatibilityEnabled</code>.
	//
	ItemCompatibilityEnabled *ItemCompatibilityEnabledCodeType `xml:"ItemCompatibilityEnabled,omitempty"`

	//
	// This field specifies the minimum number of required compatible applications
	// for listing items. A value of "0" indicates it is not mandatory to specify
	// parts compatibilities when listing.
	// <br><br>
	// This applies to categories that are enabled for compatibility by application
	// only. Parts compatiblity by application can be specified by listing with a
	// catalog product that supports parts compatibility or by specifying parts
	// compatibility by application manually (<b class="con">
	// Item.ItemCompatibilityList</b>).
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>MinCompatibleApplications</code>.
	//
	MinItemCompatibility int32 `xml:"MinItemCompatibility,omitempty"`

	//
	// This field specifies the maximum number of compatible applications allowed
	// per item when adding or revising items. This is relevant for specifying parts
	// compatibility by application manually (<b class="con">
	// Item.ItemCompatibilityList</b>) only.
	// <br><br>
	// Applicable for the US site only.
	// <br><br>
	// For DE, UK, and AU sites, this field returns the same value as <b>MaxGranularFitmentCount</b>.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>MaxCompatibleApplications</code>.
	//
	MaxItemCompatibility int32 `xml:"MaxItemCompatibility,omitempty"`

	//
	// Indicates whether the category supports (or requires) using <b>Item.ConditionID</b> to specify an item's condition in Add/Revise/Relist calls. See the <b>ConditionValues</b> type for a list of valid condition ID values.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ConditionEnabled</code>.
	//
	ConditionEnabled *ConditionEnabledCodeType `xml:"ConditionEnabled,omitempty"`

	//
	// Specifies the supported item conditions for the category, plus related policies and other details.
	// <br><br>
	// Only returned <b>ConditionEnabled</b> value is <code>Enabled</code> or <code>Required</code> and when any of the condition values are different from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ConditionValues</code>.
	//
	ConditionValues *ConditionValuesType `xml:"ConditionValues,omitempty"`

	//
	// Some eBay sites may select a few categories and designate them as
	// "value categories". These are typically selected from
	// categories where buyers can find great deals. (Not all categories
	// with great deals are designated as value categories.)
	// This designation can change over time. <br>
	// <br>
	// While a category is designated as a value category (i.e.,
	// when <b>ValueCategory</b> is <code>true</code>), it is subject to the following rule:
	// Items in value categories can only be listed in one category.<br>
	// <br>
	// For example, if you attempt to list in two categories and the
	// primary category or secondary category is a value category,
	// then eBay drops the secondary category and lists the
	// item in the primary category only.
	// Similarly, if you attempt to add a secondary category to an existing
	// listing, or you change the category for an existing listing,
	// and if the primary or secondary category is a value category,
	// then eBay drops the secondary category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ValueCategory</code>.
	//
	ValueCategory bool `xml:"ValueCategory,omitempty"`

	//
	// Indicates whether a category supports (or requires) the creation of a listing using an eBay Catalog product. To create a listing based on an eBay Catalog product, the seller passed in Global Trade Item Number (GTIN) or eBay Product ID (ePID) value in an Add/Revise/Relist call and then eBay tries to match the product identifier to a product in the eBay Catalog. If a match is found, the listing picks up the details of the eBay Catalog product, including product title, product description, product aspects, primary eBay listing category ID, and links to any product stock photos.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ProductCreationEnabled</code>.
	//
	ProductCreationEnabled *ProductCreationEnabledCodeType `xml:"ProductCreationEnabled,omitempty"`

	//
	// Indicates whether or not European Article Numbers (EANs) are supported/required when listing products in the category. A value of <code>Disabled</code> indicates that EANs cannot be used for the category, a value of <code>Enabled</code> indicates that EANs can be used for the category, and a value of <code>Required</code> indicates that an EAN is required when listing a product in this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>EANEnabled</code>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// It is recommended that sellers always use <b>GetCategoryFeatures</b> to see if an eBay category requires a Global Trade Item Number (GTIN) or a Brand/MPN combination. So, that means that they should look for <b>EANEnabled</b>, <b>ISBNEnabled</b>, <b>UPCEnabled</b>, and <b>BrandMPNIdentifierEnabled</b> at the category level in the <b>GetCategoryFeatures</b> response. When Phase 2 of the <a href="
	// https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> launches later in 2018, sellers should also start looking for the <b>ProductRequiredEnabled</b> field at the category level in the <b>GetCategoryFeatures</b> response, as this boolean field will indicate if the eBay category requires that the seller associate an eBay Catalog product to the listing. In Phase 2 of PBSE, an ePID value will have to be passed in at list/revise/relist time if the category requires that listings in that category be associated with an eBay Catalog product.  </span>
	//
	EANEnabled *ProductIdentiferEnabledCodeType `xml:"EANEnabled,omitempty"`

	//
	// Indicates whether or not International Standard Book Numbers (ISBNs) are supported/required when listing products in the category. A value of <code>Disabled</code> indicates that ISBNs cannot be used for the category, a value of <code>Enabled</code> indicates that ISBNs can be used for the category, and a value of <code>Required</code> indicates that an ISBN is required when listing a product in this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ISBNEnabled</code>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// It is recommended that sellers always use <b>GetCategoryFeatures</b> to see if an eBay category requires a Global Trade Item Number (GTIN) or a Brand/MPN combination. So, that means that they should look for <b>ISBNEnabled</b>, <b>EANEnabled</b>,  <b>UPCEnabled</b>, and <b>BrandMPNIdentifierEnabled</b> at the category level in the <b>GetCategoryFeatures</b> response. When Phase 2 of the <a href="
	// https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> launches later in 2018, sellers should also start looking for the <b>ProductRequiredEnabled</b> field at the category level in the <b>GetCategoryFeatures</b> response, as this boolean field will indicate if the eBay category requires that the seller associate an eBay Catalog product to the listing. In Phase 2 of PBSE, an ePID value will have to be passed in at list/revise/relist time if the category requires that listings in that category be associated with an eBay Catalog product.  </span>
	//
	ISBNEnabled *ProductIdentiferEnabledCodeType `xml:"ISBNEnabled,omitempty"`

	//
	// Indicates whether or not Universal Product Codes (UPCs) are supported/required when listing products in the category. A value of <code>Disabled</code> indicates that UPCs cannot be used for the category, a value of <code>Enabled</code> indicates that UPCs can be used for the category, and a value of <code>Required</code> indicates that a UPC is required when listing a product in this category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>UPCEnabled</code>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// It is recommended that sellers always use <b>GetCategoryFeatures</b> to see if an eBay category requires a Global Trade Item Number (GTIN) or a Brand/MPN combination. So, that means that they should look for <b>UPCEnabled</b>, <b>ISBNEnabled</b>, <b>EANEnabled</b>, and <b>BrandMPNIdentifierEnabled</b> at the category level in the <b>GetCategoryFeatures</b> response. When Phase 2 of the <a href="
	// https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> launches later in 2018, sellers should also start looking for the <b>ProductRequiredEnabled</b> field at the category level in the <b>GetCategoryFeatures</b> response, as this boolean field will indicate if the eBay category requires that the seller associate an eBay Catalog product to the listing. In Phase 2 of PBSE, an ePID value will have to be passed in at list/revise/relist time if the category requires that listings in that category be associated with an eBay Catalog product.  </span>
	//
	UPCEnabled *ProductIdentiferEnabledCodeType `xml:"UPCEnabled,omitempty"`

	//
	// Indicates the maximum number of compatible applications allowed per item when adding or revising items with compatibilities provided at the most detailed granularity. For example, in Car and Truck Parts on the US site, the most granular application would include Year, Make, Model, Trim, and Engine.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>MaxGranularFitmentCount</code>.
	//
	MaxGranularFitmentCount int32 `xml:"MaxGranularFitmentCount,omitempty"`

	//
	// This field is for future use. It is currently returned as an empty field, but in the future, the string value in this field will indicate Parts Compatibility vehicle type (e.g. cars, motorcycles, boats).
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>CompatibleVehicleType</code>.
	//
	CompatibleVehicleType string `xml:"CompatibleVehicleType,omitempty"`

	//
	// This field is deprecated.
	//
	PaymentOptionsGroup *PaymentOptionsGroupEnabledCodeType `xml:"PaymentOptionsGroup,omitempty"`

	//
	// Indicates the Business Policies category group that may be used for Shipping profiles.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ShippingProfileCategoryGroup</code>.
	//
	ShippingProfileCategoryGroup *ProfileCategoryGroupCodeType `xml:"ShippingProfileCategoryGroup,omitempty"`

	//
	// Indicates the Business Policies category group that may be used for Payment profiles.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PaymentProfileCategoryGroup</code>.
	//
	PaymentProfileCategoryGroup *ProfileCategoryGroupCodeType `xml:"PaymentProfileCategoryGroup,omitempty"`

	//
	// Indicates the Business Policies category group that may be used for Return Policy profiles.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ReturnPolicyProfileCategoryGroup</code>.
	//
	ReturnPolicyProfileCategoryGroup *ProfileCategoryGroupCodeType `xml:"ReturnPolicyProfileCategoryGroup,omitempty"`

	//
	// This field is deprecated.
	//
	VINSupported bool `xml:"VINSupported,omitempty"`

	//
	// This field is deprecated.
	//
	VRMSupported bool `xml:"VRMSupported,omitempty"`

	//
	// This field is deprecated.
	//
	SellerProvidedTitleSupported bool `xml:"SellerProvidedTitleSupported,omitempty"`

	//
	// This field is deprecated.
	//
	DepositSupported bool `xml:"DepositSupported,omitempty"`

	//
	// Indicates if the Global Shipping Program (GSP) is supported for the category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>GlobalShippingEnabled</code>.
	//
	GlobalShippingEnabled bool `xml:"GlobalShippingEnabled,omitempty"`

	//
	// This field indicates whether or not the category (specified in the <b>Category.CategoryID</b> field) supports Boats and Motorcycles Parts compatibility. If <code>true</code>, parts compatibility name-value pairs for boats and motorcycles can be added to an item listed in the specified category.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>AdditionalCompatibilityEnabled</code>.
	//
	AdditionalCompatibilityEnabled bool `xml:"AdditionalCompatibilityEnabled,omitempty"`

	//
	// A <code>true</code> value in this field indicates that items listed in the category (specified in the <b>Category.CategoryID</b> field) may be enabled with the 'Click and Collect' feature. With the 'Click and Collect' feature, a buyer can purchase certain items on an eBay site and collect them at a local store. Buyers are notified by eBay once their items are available. A <code>false</code> value in this field indicates that items listed in the category are not eligible for the 'Click and Collect' feature.
	// <br/><br/>
	// The 'Click and Collect' feature is only available to large merchants on the eBay UK (site ID - 3), eBay Australia (Site ID - 15), and eBay Germany (Site ID - 77) sites.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>PickupDropOffEnabled</code>.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> For Click and Collect eligible sellers, the Click and Collect feature can only be enabled at the account level, and then each of the seller's listings within an Click and Collect enabled category will be automatically evaluated for Click and Collect eligibility.
	// </span>
	//
	PickupDropOffEnabled bool `xml:"PickupDropOffEnabled,omitempty"`

	//
	// A <code>true</code> value in this field indicates that digital gift cards (eBay gift cards or third-party gift cards) can be listed in the category specified in the <b>Category.CategoryID</b> field. A <code>false</code> value in this field indicates that digital gift cards can not be listed in the specified category.
	// <br/><br/>
	// Digital gift cards are currently only supported on the US site. There are some restrictions when it comes to selling gift cards, including the following:
	// <ul>
	// <li>Each seller can only have one gift card listing at any given time </li>
	// <li>The maximum dollar value of the gift card may not exceed 500.00</li>
	// <li>Prepaid credit cards from American Express, Discover, MasterCard, or Visa are not allowed</li>
	// </ul>
	// For more information on eBay's Gift Card policy, see the <a href="
	// http://pages.ebay.com/help/policies/gift.html" target="_blank">Gift cards policy Help page</a>.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>DigitalGoodDeliveryEnabled</code>.
	//
	DigitalGoodDeliveryEnabled bool `xml:"DigitalGoodDeliveryEnabled,omitempty"`

	//
	// This field is returned as <code>true</code> if the category supports the use of an eBay Product ID (e.g. ePID) in an Add/Revise/Relist API call to identify which motorcycles and/or scooters are compatible with a motor vehicle part or accessory. ePIDs can only be used to identify motorcycles and scooters on the Germany and UK sites.
	// <br/><br/>
	// For more information on using an ePID to identify a compatible motorcycle or scooter through an Add/Revise/Relist API call on the Germany or UK site, see the documentation for the <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request.Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.NameValueList</a> container.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>EpidSupported</code>.
	//
	EpidSupported bool `xml:"EpidSupported,omitempty"`

	//
	// This field is returned as <code>true</code> if the category supports the use of a K Type vehicle number in an Add/Revise/Relist API call to identify which cars and/or trucks are compatible with a motor vehicle part or accessory. K type vehicle numbers can only be used to identify cars and trucks on the Germany site.
	// <br/><br/>
	// For more information on using a K Type vehicle number to identify a compatible car or truck through an Add/Revise/Relist API call on the Germany site, see the documentation for the <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request.Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.NameValueList</a> container.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>KTypeSupported</code>.
	//
	KTypeSupported bool `xml:"KTypeSupported,omitempty"`

	//
	// This field indicates if the category requires association with an eBay Catalog product when listing/revising/relisting an item. This field is only returned if <code>Enabled</code>.
	// <br><br>
	// Until Phase 2 of the Product-Based Shopping Experience (PBSE) rolls out later in 2018, this field will only be returned in Sandbox. For more information on PBSE, see the <a href="
	// https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> page.
	// <br><br>
	// Only returned when this value (or this category's setting) overrides the value inherited from the category's parent or the site default. Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ProductRequiredEnabled</code>.
	//
	ProductRequiredEnabled *ProductRequiredEnabledCodeType `xml:"ProductRequiredEnabled,omitempty"`

	//
	// The values returned in this field indicate whether or not the seller accepts domestic returns for items listed in the associated marketplace and category.  <br><br>While most categories return the <b>ReturnsAccepted</b> flag (indicating the category supports returns), some categories will also return the <b>ReturnsNotAccepted</b> flag to indicate the seller can choose to not accept returns for an item listed in that category.  <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. Here, it's worth noting that not accepting returns is a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	DomesticReturnsAcceptedValues *DomesticReturnsAcceptedCodeType `xml:"DomesticReturnsAcceptedValues,omitempty"`

	//
	// The values returned in this field indicate whether or not the seller can offer international returns.  <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	InternationalReturnsAcceptedValues *InternationalReturnsAcceptedCodeType `xml:"InternationalReturnsAcceptedValues,omitempty"`

	//
	// The values returned in this field indicate the return-duration options that are available for domestic returns for items listed in the associated marketplace and category.  <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	DomesticReturnsDurationValues *DomesticReturnsDurationCodeType `xml:"DomesticReturnsDurationValues,omitempty"`

	//
	// The values returned in this field indicate the return-duration options that are available for international returns for items listed in the associated marketplace and category.  <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	InternationalReturnsDurationValues *InternationalReturnsDurationCodeType `xml:"InternationalReturnsDurationValues,omitempty"`

	//
	// The values returned in this field indicate the available options for who pays the return shipping for domestic returns. Possible values are <code>BUYER</code> and <code>SELLER</code>. <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	DomesticReturnsShipmentPayeeValues *DomesticReturnsShipmentPayeeCodeType `xml:"DomesticReturnsShipmentPayeeValues,omitempty"`

	//
	// The values returned in this field indicate the available options for who pays the return shipping for international returns. Possible values are <code>BUYER</code> and <code>SELLER</code>. <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	InternationalReturnsShipmentPayeeValues *InternationalReturnsShipmentPayeeCodeType `xml:"InternationalReturnsShipmentPayeeValues,omitempty"`

	//
	// On the EBAY_US marketplace only, sellers can offer item replacement in addition to offering money back returns. This flag defines the availability of such options for the given US marketplace category. Sellers can offer item replacements only if returns are enabled (<b>returnPolicyEnabled</b> is set to <code>true</code>) for the item. You can specify item replacement in the AddItem family of calls and in the return policy settings of the Account and Business Policies Management APIs.
	//
	DomesticRefundMethodValues *DomesticRefundMethodCodeType `xml:"DomesticRefundMethodValues,omitempty"`

	//
	// In US, sellers can offer an item replacement for returns, in addition to offering money back returns. The values returned in this field indicate the availability of such options for the given marketplace and category.  <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	InternationalRefundMethodValues *InternationalRefundMethodCodeType `xml:"InternationalRefundMethodValues,omitempty"`

	//
	// In some EU countries, sellers are legally required to describe the return policy they offer. The value returned by this field indicates if sellers can provide such a description within the given marketplace and category.  <br><br>The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated category, which indicates that items listed in the category must include a return policy. The values returned in this field are valid in AddItem and its related family of calls, and in the return policies you configure for use with the Account and Business Policies Management APIs.
	//
	ReturnPolicyDescriptionEnabled bool `xml:"ReturnPolicyDescriptionEnabled,omitempty"`
}

type CategoryGroupType struct {

	//
	// Defines the name of the category group tied to a Business Policies profile. Valid values are
	// <code>ALL</code> (referring to all non-motor vehicle category groups) or <code>MOTORS_VEHICLE</code> (referring to
	// only motor vehicle category groups).
	// <br><br>
	// The <b>CategoryGroup</b> container is only returned in <b>GetUserPreferences</b>
	// if the <b>ShowSellerProfilePreferences</b> field is included in the request and set to <code>true</code>.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This boolean value indicates whether the corresponding Business Policies profile is the default for the category group.
	// <br><br>
	// The <b>CategoryGroup</b> container is only returned in <b>GetUserPreferences</b>
	// if the <b>ShowSellerProfilePreferences</b> field is included in the request and set to <code>true</code>.
	//
	IsDefault bool `xml:"IsDefault,omitempty"`
}

type CategoryItemSpecificsType struct {

	//
	// An eBay category ID is passed into this field to identify the eBay category for which the seller is providing Item Specific name-value(s) pairs. Multiple <b>CategoryID</b> fields can be passed in if the Item Specific name-value(s) pairs are applicable for multiple categories. However, more categories can result in longer call response times. If your request times out, specify fewer category IDs.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The call request requires either one or more <b>CategoryID</b> values (at the root level), one or more <b>CategorySpecific.CategoryID</b> values, or the <b>CategorySpecificsFileInfo</b> boolean field. The <b>CategorySpecificsFileInfo</b> field is only used if the user plans to use the <b>downloadFile</b> call of the <b>FileTransfer</b> API to retrieve Item Specifics. <b>CategoryID</b> and <b>CategorySpecific.CategoryID</b> can both be used in the same call request.
	// </span>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This container is used to input Item Specific name-value(s) pairs for a specific category to discover if eBay has better name or value recommendations for that Item Specific. The Item Specific name can be
	// an arbitrary name that the user wants to check, or it could
	// be a name that was returned in a prior <b>GetCategorySpecifics</b> response. At least one <b>NameValueList</b> container must be used if the <b>CategorySpecific</b> container is used.
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`
}

type CategoryMappingType struct {

	//
	// This attribute value is the unique identifier of an eBay category that has been recently updated to a new Category ID, which is specified in the <b>id</b> attribute. The user will want to use the Category ID value in the <b>id</b> attribute the next time they run a call that requires a Category ID. Note that Category IDs are unique to each eBay site. This attribute is always returned with the <b>CategoryMapping</b> field.
	//
	OldID string `xml:"oldID,attr,omitempty"`

	//
	// This attribute value is the unique identifier of the currently active eBay category. The user will want to use this Category ID value the next time they run a call that requires a Category ID. Note that Category IDs are unique to each eBay site. This attribute is always returned with the <b>CategoryMapping</b> field.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// Note that more than one <b>OldID</b> values may map into the same new category (same <b>id</b> value) since sometimes multiple eBay categories may be consolidated into a new, expanded category.
	// </span>
	//
	Id string `xml:"id,attr,omitempty"`
}

type CategoryType struct {

	//
	// If this field is returned as <code>true</code>, the corresponding category supports Best Offers. If this field is not present, the category does not support Best Offers. This field is not returned when <code>false</code>.
	//
	BestOfferEnabled bool `xml:"BestOfferEnabled,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category supports immediate payment for listings. PayPal must be an accepted payment method for a listing for the seller to required immediate payment from the buyer. If this field is not present, the category does not immediate payment. This field is not returned when <code>false</code>.
	//
	AutoPayEnabled bool `xml:"AutoPayEnabled,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category supports business-to-business (B2B) VAT
	// listings. If this field is not present, the category does not B2B VAT listings. This field is not returned when <code>false</code>. This feature is applicable to the eBay Germany (DE), Austria (AT),
	// and Switzerland (CH) sites only.
	//
	B2BVATEnabled bool `xml:"B2BVATEnabled,omitempty"`

	//
	// If this field is deprecated..
	//
	CatalogEnabled bool `xml:"CatalogEnabled,omitempty"`

	//
	// This string value is the unique identifier of an eBay category.
	// In <b>GetItem</b> and related calls, see the <b>CategoryName</b> field for the text name of
	// the category. The parent category of this eBay category is only shown in  <b>GetCategories</b>.
	// <br>
	// <br>
	// In an Add call, the <b>PrimaryCategory.CategoryID</b> is conditionally required unless the seller successfully uses the <b>ProductListingDetails</b> container to find an eBay catalog product match. When the seller successfully uses an eBay catalog product to create a listing, the listing title, listing description, item specifics, listing category, and stock photo defined in the catalog product is used to create the listing.
	// <br>
	// <br>
	// In an Add/Revise/Relist call, the <b>SecondaryCategory.CategoryID</b> is conditionally required if a Secondary listing Category is used.
	// <br><br>
	// <b>For ReviseItem only:</b> Previously, removing the listing from a secondary category was only possible within 12 hours of the listing's scheduled end time when an auction listing had no active bids or a multiple-quantity, fixed-price listing had no items sold, but this restriction no longer exists. Now, the secondary category can be dropped for any active listing at any time, regardless of whether an auction listing has bids or a fixed-price listing has sales. To drop a secondary category, the seller passes in a value of <code>0</code> in the <b>SecondaryCategory.CategoryID<b> field.
	// <br>
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This integer value indicates the level where the category fits in the eBay site's category hierarchy. For example, if this field has a value of <code>2</code>, then the category is two levels below the root category in the eBay site's category hierarchy.
	//
	CategoryLevel int32 `xml:"CategoryLevel,omitempty"`

	//
	// This string value is the display name of the eBay primary category, as it would appear on the eBay site. In <b>GetItem</b>, this will be a fully-qualified category name (e.g., Collectibles:Decorative Collectibles:Hummel, Goebel).
	//
	CategoryName string `xml:"CategoryName,omitempty"`

	//
	// This string value is the Category ID of the primary category's (indicated in the <b>CategoryID</b> field) parent category. The number of <b>CategoryParentID</b> values that are returned will depend on the <b>LevelLimit</b> value that is set (in <b>GetCategories</b>) and on how far up the primary category is in the eBay category hierarchy. <b>CategoryParentID</b> values are
	// returned in correct sequence, starting from the root category
	// and ending with the category that is the direct parent of
	// the primary category specified in <b>CategoryID</b>. The <b>CategoryID</b> and <b>CategoryParentID</b> values will be the same if the <b>LevelLimit</b> value is set to <code>1</code>.
	//
	CategoryParentID []string `xml:"CategoryParentID,omitempty"`

	//
	// This string value is the display name of the category indicated in the corresponding <b>CategoryParentID</b> field. If multiple parent categories are retrieved in the <b>GetSuggestedCategories</b> call, the matching <b>CategoryParentID</b> and <b>CategoryParentName</b> can be found by following the sequence in which these fields are returned. The primary category's ancestors are returned in sequence beginning with the root category all the way down to the primary category's direct parent category.
	// <br><br>
	// The <b>CategoryParentName</b> fields and the <b>CategoryName</b> field can be used to build
	// the fully-qualified category name and/or "breadcrumbs" browse path.
	// (e.g., Computers & Networking > Technology Books > Certification).
	//
	CategoryParentName []string `xml:"CategoryParentName,omitempty"`

	//
	// This field is deprecated.
	//
	ProductSearchPageAvailable bool `xml:"ProductSearchPageAvailable,omitempty"`

	//
	// This field is deprecated.
	//
	ProductFinderIDs []*ExtendedProductFinderIDType `xml:"ProductFinderIDs,omitempty"`

	//
	// This field is deprecated.
	//
	CharacteristicsSets []*CharacteristicsSetType `xml:"CharacteristicsSets,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category is no longer a valid eBay category on the site, and items may not be listed in this category. This field is not returned when <code>false</code>.
	//
	Expired bool `xml:"Expired,omitempty"`

	//
	// This field is deprecated.
	//
	IntlAutosFixedCat bool `xml:"IntlAutosFixedCat,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category is an eBay leaf category, a category in which items may be listed. This field is not returned when <code>false</code>.
	//
	LeafCategory bool `xml:"LeafCategory,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category is an eBay virtual category, a category in which items may not be listed. This field is not returned when <code>false</code>.
	//
	Virtual bool `xml:"Virtual,omitempty"`

	//
	// This field is deprecated.
	//
	NumOfItems int32 `xml:"NumOfItems,omitempty"`

	//
	// This field is deprecated.
	//
	SellerGuaranteeEligible bool `xml:"SellerGuaranteeEligible,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category is an exception to the eBay site's standard Reserve Price policy on auction listings. For example, if the site's default setting is to allow setting a Reserve Price, but <b>ORPA</b> is returned as <code>true</code>, this particular category does not support setting a Reserve Price. Or, if the site's default setting is not to allow setting a Reserve Price, but <b>ORPA</b> is returned as <code>true</code>, this particular category is the exception to that rule and does support setting a Reserve Price. If <b>ORPA</b> is <code>true</code> for the corresponding category, you can generally assume that the category's subcategories inherit the same setting. 'ORPA' is an acronym for 'Override Reserve Price Allowed'.
	// <br>
	// <br>
	// This field is not returned when <code>false</code>.
	//
	ORPA bool `xml:"ORPA,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category is an exception to the eBay site's standard Reduce Reserve Price (on active auction listing) policy. For example, if the site's default setting is to allow reducing a Reserve Price for the active auction listing, but <b>ORRA</b> is returned as <code>true</code>, this particular category does not support reducing a Reserve Price. Or, if the site's default setting is not to allow reducting a Reserve Price, but <b>ORRA</b> is returned as <code>true</code>, this particular category is the exception to that rule and does support reducing a Reserve Price. If <b>ORRA</b> is <code>true</code> for the corresponding category, you can generally assume that the category's subcategories inherit the same setting. 'ORRA' is an acronym for 'Override Reduce Reserve Allowed'.
	// <br>
	// <br>
	// This field is not returned when <code>false</code>.
	//
	ORRA bool `xml:"ORRA,omitempty"`

	//
	// If this field is returned as <code>true</code>, the corresponding category does not support lot listings. A lot listing is a listing that features multiple related items that must be purchased by one buyer in one transaction. 'LSD' is an acronym for 'Lot Size Disabled'. 'Lot Size' refers to the  <b>LotSize</b> field in the Add/Revise/Relisting calls that is conditionally required if the seller is creating a lot listing. The <b>LSD</b> field is not returned when <code>false</code>.
	//
	LSD bool `xml:"LSD,omitempty"`

	//
	// This field is deprecated.
	//
	Keywords string `xml:"Keywords,omitempty"`
}

type CharacteristicSetIDsType struct {

	//
	// This field is deprecated.
	//
	ID []string `xml:"ID,omitempty"`
}

type CharacteristicType struct {

	//
	// This field is deprecated.
	//
	AttributeID int32 `xml:"AttributeID,omitempty"`

	//
	// This field is deprecated.
	//
	DateFormat string `xml:"DateFormat,omitempty"`

	//
	// This field is deprecated.
	//
	DisplaySequence string `xml:"DisplaySequence,omitempty"`

	//
	// This field is deprecated.
	//
	DisplayUOM string `xml:"DisplayUOM,omitempty"`

	//
	// This field is deprecated.
	//
	Label *LabelType `xml:"Label,omitempty"`

	//
	// This field is deprecated.
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// This field is deprecated.
	//
	ValueList []*ValType `xml:"ValueList,omitempty"`
}

type CharacteristicsSetProductHistogramType struct {

	//
	// This field is deprecated.
	//
	HistogramEntry []*HistogramEntryType `xml:"HistogramEntry,omitempty"`
}

type CharacteristicsSetType struct {

	//
	// This field is deprecated.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSetID int32 `xml:"AttributeSetID,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSetVersion string `xml:"AttributeSetVersion,omitempty"`

	//
	// This field is deprecated.
	//
	Characteristics []*CharacteristicType `xml:"Characteristics,omitempty"`
}

type CharityAffiliationDetailType struct {

	//
	// The affiliation ID for nonprofit charity organizations
	// registered with the PayPal Giving Fund.
	//
	CharityID string `xml:"CharityID,omitempty"`

	//
	// Indicates the affiliation status of the nonprofit charity
	// organization registered with the PayPal Giving Fund.
	//
	AffiliationType *CharityAffiliationTypeCodeType `xml:"AffiliationType,omitempty"`

	//
	// Indicates the affiliation last used date of the nonprofit charity
	// organization registered with the PayPal Giving Fund.
	//
	LastUsedTime time.Time `xml:"LastUsedTime,omitempty"`
}

type CharityAffiliationDetailsType struct {

	//
	// A <b>CharityAffiliationDetail</b> container will be returned for each eBay for Charity organization that is associated with the seller's account.
	//
	CharityAffiliationDetail []*CharityAffiliationDetailType `xml:"CharityAffiliationDetail,omitempty"`
}

type CharityAffiliationType struct {

	//
	// This attribute is deprecated. Replaced by the <b>CharityID</b> field of <b>CharityAffiliationDetailType</b>.
	//
	Id string `xml:"id,attr,omitempty"`

	//
	// This attribute is deprecated. Replaced by the <b>AffiliationType</b> field of <b>CharityAffiliationDetailType</b>.
	//
	Type *CharityAffiliationTypeCodeType `xml:"type,attr,omitempty"`
}

type CharityAffiliationsType struct {

	//
	// This field is deprecated.
	//
	CharityID []*CharityIDType `xml:"CharityID,omitempty"`
}

type CharityIDType struct {
	Value string

	//
	// Indicates the affiliation status of the nonprofit charity
	// organization registered with the eBay Giving Works provider.
	//
	Type *CharityAffiliationTypeCodeType `xml:"type,attr,omitempty"`
}

type CharityInfoType struct {

	//
	// The name of a nonprofit charity organization. The <b>Name</b> field is required for a non-registered charity organization, since these companies will not have a PayPal Giving Fund <b>CharityID</b>
	// <br/><br/>
	//
	Name string `xml:"Name,omitempty"`

	//
	// This flag is for internal use only.
	//
	//
	ListingNPEmailNotifPref bool `xml:"ListingNPEmailNotifPref,omitempty"`

	//
	// This field is for internal use only.
	//
	//
	ListingNPEmail string `xml:"ListingNPEmail,omitempty"`

	//
	// This field is for internal use only.
	//
	//
	ListingNPContactName string `xml:"ListingNPContactName,omitempty"`

	//
	// The mission statement of a nonprofit charity organization registered with the PayPal Giving Fund. The mission statement is returned in <b>GetCharities</b> and is displayed in listings if the nonprofit charity organization is registered with the PayPal Giving Fund.
	// <br/><br/>
	//
	Mission string `xml:"Mission,omitempty"`

	//
	// This URL indicates the location of the nonprofit charity organization's logo image. The image file must be JPG or GIF format, and its size cannot exceed 50 KB. This logo is displayed in listings if the nonprofit charity organization is registered with the PayPal Giving Fund. A standard eBay for Charity logo is used in place of the charity organization's logo if the <b>LogoURL</b> or <b>LogoURLSelling</b> values are not provided, or these values point to bad URLs or to URLs containing no images or images not meeting eBay logo size and format requirements. This value is returned if set.
	//
	LogoURL *AnyURI `xml:"LogoURL,omitempty"`

	//
	// Enumeration value that indicates whether or not the charity is a valid eBay for Charity nonprofit organization.
	//
	Status *CharityStatusCodeType `xml:"Status,omitempty"`

	//
	// Keyword string to be used for search purposes.
	//
	SearchableString string `xml:"SearchableString,omitempty"`

	//
	// Integer value that indicates the nonprofit charity organization's region. Each nonprofit charity organization may be associated with only one region.
	//
	CharityRegion int32 `xml:"CharityRegion,omitempty"`

	//
	// Integer value that indicates the domain (mission area) of the nonprofit charity organization. A nonprofit charity organization does not have to specify a charity domain, so it is possible that this field will not be returned in <b>GetCharities</b>. Each nonprofit charity organization can belong to as many as three charity domains.
	//
	CharityDomain int32 `xml:"CharityDomain,omitempty"`

	//
	// A unique identifier created by eBay and assigned to registered nonprofit charity organizations. This identifier can be used as a filter in the <b>GetCharities</b> request, and it will always be returned if the nonprofit charity organization is registered with the PayPal Giving Fund.
	//
	CharityID string `xml:"CharityID,omitempty"`

	//
	// An alternative to the <b>LogoURL</b> value. This URL indicates the location of the nonprofit charity organization's logo image. The image file must be JPG or GIF format, and its size cannot exceed 50 KB. This URL will be used if the <b>LogoURL</b> value points to a broken link or if that location either contains no image or contains an image that does not meet the eBay requirements - GIF or JPG file; maximum size of 50 KB. A nonprofit charity organization's logo is displayed in item listings if the nonprofit charity organization is registered with the PayPal Giving Fund. A standard eBay for Charity logo is used in place of the charity organization's logo if the Logo URL is not provided. This value is returned if set.
	//
	LogoURLSelling *AnyURI `xml:"LogoURLSelling,omitempty"`

	//
	// This boolean value indicates if the eBay Charity logo will appear in the listing.
	//
	DisplayLogoSelling bool `xml:"DisplayLogoSelling,omitempty"`

	//
	// This field is deprecated.
	//
	DisplayNameInCheckout bool `xml:"DisplayNameInCheckout,omitempty"`

	//
	// This field provides a short description about the nonprofit charity organization's primary purpose. "I want to support" will be added to the beginning of the contents of this field. For example, if the description is "the fight against cancer", then on the checkout page "I want to support the fight against cancer" will be displayed. The description may contain a maximum of 115 characters. This value is returned if set.
	// <br/><br/>
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field must be used with the DisplayNameInCheckout field to control the options that are visible
	// to a buyer during checkout. If the
	// DisplayNameInCheckout field is set to True, and the ShowMultipleDonationAmountInCheckout
	// field is set to False, a checkbox with the one dollar option will be displayed during checkout.
	// If the DisplayNameInCheckout field is set to False, and the ShowMultipleDonationAmountInCheckout
	// field is set to False, no options will be displayed during checkout.
	// <br><br>
	// Reserved for future use. If the DisplayNameInCheckout field is set to True, and the
	// ShowMultipleDonationAmountInCheckout field is set to True, a dropdown with multiple donation amounts
	// will be displayed during checkout.  If the DisplayNameInCheckout field is set to False, and the
	// ShowMultipleDonationAmountInCheckout field is set to True, no options will be displayed during checkout,
	// but the multiple donation amount field will be set.
	//
	ShowMultipleDonationAmountInCheckout bool `xml:"ShowMultipleDonationAmountInCheckout,omitempty"`

	//
	// A unique identifier created and used by PayPal Giving Fund to identify a registered nonprofit charity organization. This field is only returned for charities that are registered with PayPal Giving Fund.
	// <br/><br/>
	//
	ExternalID string `xml:"ExternalID,omitempty"`

	//
	// An integer value that indicates a nonprofit charity organization's popularity rank in comparison with other registered eBay for Charity organizations. This value is determined and managed by PayPal Giving Fund and is based on various factors. This value is always returned for nonprofit organizations registered with PayPal Giving Fund.
	//
	PopularityIndex int32 `xml:"PopularityIndex,omitempty"`

	//
	// This value is the Employer Identification Number (EIN) of the nonprofit charity
	// organization. A nonprofit company's EIN is used for tax purposes by the Internal
	// Revenue Service. This value is returned if the nonprofit organization has an EIN and
	// it has been set.
	//
	EIN string `xml:"EIN,omitempty"`

	//
	// An alternative name for the nonprofit charity organization. This value is used by
	// PayPal to search for nonprofit organizations. This value is returned if set.
	//
	NonProfitSecondName string `xml:"NonProfitSecondName,omitempty"`

	//
	// Container consisting of the address (including latitude and longitude) of a nonprofit
	// charity organization. This container is always returned if it is set.
	//
	NonProfitAddress []*NonProfitAddressType `xml:"NonProfitAddress,omitempty"`

	//
	// Container consisting of the nonprofit charity organization's social networking site ID/handle.
	// A <b>NonProfitSocialAddress</b> container will exist for each social
	// networking site that the charity organization is associated with. Supported social
	// networking sites include Facebook, Twitter, LinkedIn, Google+, MySpace, and Orkut. One
	// or more of these containers are returned if set.
	//
	NonProfitSocialAddress []*NonProfitSocialAddressType `xml:"NonProfitSocialAddress,omitempty"`

	//
	// This attribute is a unique identifier used by the corresponding social networking site to
	// identify the nonprofit charity organization.
	//
	Id string `xml:"id,attr,omitempty"`
}

type NonProfitSocialAddressType struct {

	//
	// Enumeration value that indicates the social networking site that the nonprofit charity
	// organization is associated with. This is a required field for each social networking
	// account associated with the nonprofit organization.
	//
	SocialAddressType *SocialAddressTypeCodeType `xml:"SocialAddressType,omitempty"`

	//
	// The account ID/handle associated with the nonprofit charity organization's social
	// networking site. This is a required field for each social networking account associated
	// with the nonprofit organization.
	//
	SocialAddressId string `xml:"SocialAddressId,omitempty"`
}

type CharitySellerType struct {

	//
	// Indicates the status of the seller's charity seller account.
	//
	CharitySellerStatus *CharitySellerStatusCodeType `xml:"CharitySellerStatus,omitempty"`

	//
	// Indicates the affiliation status for nonprofit charity organizations registered with the PayPal Giving Fund.
	//
	CharityAffiliation []*CharityAffiliationType `xml:"CharityAffiliation,omitempty"`

	//
	// Indicates if the seller has accepted the PayPal Giving Fund Terms and Conditions.
	//
	TermsAndConditionsAccepted bool `xml:"TermsAndConditionsAccepted,omitempty"`
}

type CharityType struct {

	//
	// The name of the benefiting nonprofit charity organization selected by the
	// charity seller.
	//
	CharityName string `xml:"CharityName,omitempty"`

	//
	// A unique identifier assigned to a nonprofit
	// charity organization by the PayPal Giving Fund. This value can contain up to 10 digits.
	// This value is superseded by <b>CharityID</b>.
	//
	CharityNumber int32 `xml:"CharityNumber,omitempty"`

	//
	// The percentage of the purchase price that the
	// seller chooses to donate to the selected nonprofit
	// organization. This percentage is displayed in the eBay for Charity listing.
	// <b>Possible values</b>: 10.0 to 100.0.
	// <b></b>
	// <ul>
	// <li>Percentages must increment by 5.0. </li>
	// <li>Minimum donation
	// percentages may be required for eBay for Charity listings, see
	// <a href="http://pages.ebay.com/help/sell/selling-nonprofit.html">
	// Selling to benefit nonprofit organizations</a> for
	// details. </li>
	// </ul>
	// <b>DonationPercent</b> is required input when creating eBay for Charity listings.
	//
	DonationPercent float32 `xml:"DonationPercent,omitempty"`

	//
	// A unique identification number assigned by the PayPal Giving Fund to
	// registered nonprofit charity organizations. This field is required when
	// creating eBay for Charity listings.
	//
	CharityID string `xml:"CharityID,omitempty"`

	//
	// The stated mission of the nonprofit charity organization. This mission is displayed in the eBay for Charity listing.
	//
	Mission string `xml:"Mission,omitempty"`

	//
	// The URL of the nonprofit charity organization. This
	// URL is displayed in the eBay for Charity listing.
	//
	LogoURL string `xml:"LogoURL,omitempty"`

	//
	// The status of the nonprofit charity organization.
	//
	Status *CharityStatusCodeType `xml:"Status,omitempty"`

	//
	// If this field is returned as <code>true</code>, a percentage of item's purchase price will be donated to a nonprofit organization.
	//
	CharityListing bool `xml:"CharityListing,omitempty"`
}

type CheckoutOrderDetailType struct {

	//
	// This field is deprecated.
	//
	TotalCartMerchandiseCost *AmountType `xml:"TotalCartMerchandiseCost,omitempty"`

	//
	// This field is deprecated.
	//
	TotalCartShippingCost *AmountType `xml:"TotalCartShippingCost,omitempty"`

	//
	// This field is deprecated.
	//
	TotalTaxAmount *AmountType `xml:"TotalTaxAmount,omitempty"`

	//
	// This field is deprecated.
	//
	TotalAmount *AmountType `xml:"TotalAmount,omitempty"`
}

type CheckoutStatusType struct {

	//
	// This value indicates the payment status of an order.
	//
	EBayPaymentStatus *PaymentStatusCodeType `xml:"eBayPaymentStatus,omitempty"`

	//
	// Indicates the last time that there was a change in value of the
	// <b>CheckoutStatus.Status</b> field, such as 'Pending' to 'Complete'.
	//
	LastModifiedTime time.Time `xml:"LastModifiedTime,omitempty"`

	//
	// The payment method that the buyer selected to pay for the order.
	//
	PaymentMethod *BuyerPaymentMethodCodeType `xml:"PaymentMethod,omitempty"`

	//
	// Indicates the status of the order. This value is subject to change based on the
	// status of the checkout flow. Generally speaking, the <b>Status</b>
	// field reads 'Incomplete'
	// when payment has yet to be initiated, 'Pending' when payment has been initiated
	// but is in process, and 'Complete' when the payment process has completed.
	// <br><br>
	// <b>Note</b>: If the PaymentMethod is CashOnPickup, the Status value
	// will read Complete right at Checkout, even though the seller may not have been
	// officially paid yet, and the eBayPaymentStatus field will read NoPaymentFailure.
	// The CheckoutStatus.Status value will remain as Complete even if the seller uses
	// ReviseCheckoutStatus to change the checkout status to Pending. However, the
	// eBayPaymentStatus value in GetOrders will change from NoPaymentFailure to
	// PaymentInProcess.
	//
	Status *CompleteStatusCodeType `xml:"Status,omitempty"`

	//
	// Indicates whether the item can be paid for through a payment gateway (Payflow) account.
	// If IntegratedMerchantCreditCardEnabled is true, then integrated merchant credit card (IMCC) is
	// enabled for credit cards because the seller has a payment gateway account.
	// Therefore, if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or
	// VisaMC is returned for an item, then on checkout, an online credit-card payment
	// is processed through a payment gateway account.
	//
	IntegratedMerchantCreditCardEnabled bool `xml:"IntegratedMerchantCreditCardEnabled,omitempty"`

	//
	// This container is no longer used.
	//
	EBayPaymentMismatchDetails *EBayPaymentMismatchDetailsType `xml:"eBayPaymentMismatchDetails,omitempty"`

	//
	// The enumeration value in this field indicates which payment method was used by the German buyer who was offered the 'Pay Upon Invoice' option. This field will only be returned if a German buyer was offered the 'Pay Upon Invoice' option. Otherwise, the buyer's selected payment method is returned in the <b>PaymentMethod</b> field.
	//
	PaymentInstrument *BuyerPaymentInstrumentCodeType `xml:"PaymentInstrument,omitempty"`
}

type ClassifiedAdAutoAcceptEnabledDefinitionType struct {
}

type ClassifiedAdAutoDeclineEnabledDefinitionType struct {
}

type ClassifiedAdBestOfferEnabledDefinitionType struct {
}

type ClassifiedAdCompanyNameEnabledDefinitionType struct {
}

type ClassifiedAdContactByAddressEnabledDefinitionType struct {
}

type ClassifiedAdContactByEmailEnabledDefintionType struct {
}

type ClassifiedAdContactByPhoneEnabledDefinitionType struct {
}

type ClassifiedAdCounterOfferEnabledDefinitionType struct {
}

type ClassifiedAdPayPerLeadEnabledDefinitionType struct {
}

type ClassifiedAdPaymentMethodEnabledDefinitionType struct {
}

type ClassifiedAdPhoneCountDefinitionType struct {
}

type ClassifiedAdShippingMethodEnabledDefinitionType struct {
}

type ClassifiedAdStreetCountDefinitionType struct {
}

type CombinedFixedPriceTreatmentEnabledDefinitionType struct {
}

type CombinedPaymentPreferencesType struct {

	//
	// DO NOT USE THIS CONTAINER. As an alternative, use
	// SetShippingDiscountProfiles to set all Calculated Shipping rules and
	// preferences, and use GetShippingDiscountProfiles to retrieve the same
	// information.
	//
	CalculatedShippingPreferences *CalculatedShippingPreferencesType `xml:"CalculatedShippingPreferences,omitempty"`

	//
	// Specifies whether or not a seller wants to allow buyers to combine single
	// order line items into a Combined Invoice order. A Combined Invoice order can
	// be created by the buyer or seller if multiple unpaid order line items exist
	// between the same buyer and seller. Often, a Combined Invoice order can
	// reduce shipping and handling expenses for the buyer and seller.
	//
	CombinedPaymentOption *CombinedPaymentOptionCodeType `xml:"CombinedPaymentOption,omitempty"`

	//
	// DO NOT USE THIS FIELD. As an alternative, use the CombinedDuration field in
	// SetShippingDiscountProfiles to specify the time period in which to allow
	// buyers to combine order line items into a Combined Invoice order. Use
	// GetShippingDiscountProfiles to retrieve the CombinedDuration value.
	//
	CombinedPaymentPeriod *CombinedPaymentPeriodCodeType `xml:"CombinedPaymentPeriod,omitempty"`

	//
	// DO NOT USE THIS CONTAINER. As an alternative, use
	// SetShippingDiscountProfiles to set all Flat Rate Shipping rules
	// and preferences, and use GetShippingDiscountProfiles to retrieve
	// the same information.
	//
	FlatShippingPreferences *FlatShippingPreferencesType `xml:"FlatShippingPreferences,omitempty"`
}

type CompatibleVehicleTypeDefinitionType struct {
}

type ConditionEnabledDefinitionType struct {
}

type ConditionType struct {

	//
	// The numeric ID of a condition (e.g., 1000). Use the ID in
	// AddItem and related calls.
	//
	ID int32 `xml:"ID,omitempty"`

	//
	// The human-readable label for the condition (e.g., "New").
	// This value is typically localized for each site.
	// The display name can vary by category.
	// For example, condition ID 1000 could be called
	// "New: with Tags" in one category and "Brand New" in another.
	//
	DisplayName string `xml:"DisplayName,omitempty"`
}

type ConditionValuesDefinitionType struct {
}

type ConditionValuesType struct {

	//
	// Defines an item condition that a category supports.
	//
	Condition []*ConditionType `xml:"Condition,omitempty"`

	//
	// URL to the eBay Web site's item condition help for the
	// category. This may include policies about how to assess the
	// condition of an item in the category. To reduce
	// item-not-as-described disputes, we recommend that
	// you refer sellers (and buyers) to these help pages.
	// These help pages may vary for some categories.<br>
	// <br>
	// The Sandbox might not return valid help URLs.
	//
	ConditionHelpURL *AnyURI `xml:"ConditionHelpURL,omitempty"`
}

type ContactHoursDetailsType struct {

	//
	// Indicates the local time zone of the values provided for Hours1From/Hours1To
	// and Hours2From/Hours2To. If you specify a contact hours time range with
	// Hours1From and Hours1To, you must provide a local time zone.
	// To retrieve a complete list of the TimeZoneID values
	// supported by eBay, call <b>GeteBayDetails</b> with <b>DetailName</b>
	// set to <b>TimeZoneDetails</b>.
	//
	TimeZoneID string `xml:"TimeZoneID,omitempty"`

	//
	// Indicates the range of days for which the primary contact hours
	// specified by Hours1AnyTime or Hours1From and Hours1To apply.
	// If a value of None is provided for this field, the values provided for
	// Hours1AnyTime, Hours1From, Hours1To are ignored.
	//
	Hours1Days *DaysCodeType `xml:"Hours1Days,omitempty"`

	//
	// Indicates whether or not a user is available to be contacted 24 hours a day
	// during the range of days specified using the Hours1Days element.
	// True indicates the user is available 24 hours a day, false indicates otherwise.
	// In the case of this field being true, all values provided for Hours1From and
	// Hours1To will be ignored.  In the case of this field being false,
	// the values provided Hours1From and Hours1To will be considered.
	//
	Hours1AnyTime bool `xml:"Hours1AnyTime,omitempty"`

	//
	// Indicates the starting time of day this eBay user is available for other eBay
	// members to contact for the range of days specified using Hours1Days.
	// Enter times in 30 minute increments from the top of the hour. That is, enter
	// values either on the hour (:00) or 30 minutes past the hour (:30).
	// Other values will be will be rounded down to the next closest 30 minute
	// increment. Times entered should be local to the value provided for TimeZoneID.
	//
	Hours1From time.Time `xml:"Hours1From,omitempty"`

	//
	// Indicates the ending time of day this eBay user is available for other eBay
	// members to contact them for the range of days specified using Hours1Days.
	// Enter times in 30 minute increments from the top of the hour. That is, enter
	// values either on the hour (:00) or 30 minutes past the hour (:30).
	// Other values will be will be rounded down to the next closest 30 minute
	// increment. Times entered should be local to the value provided for TimeZoneID.
	//
	Hours1To time.Time `xml:"Hours1To,omitempty"`

	//
	// Indicates the range of days for which the secondary contact hours
	// specified by Hours2AnyTime or Hours2From and Hours2To apply.
	// If a value of None is provided for this field, the values provided for
	// Hours2AnyTime, Hours2From, Hours2To are ignored.
	// <br>
	// <b>Note:</b> You cannot set Hours2Days to EveryDay. If Hours1Days
	// is set to EveryDay, secondary contact hours do not apply. Hours2Days cannot be
	// set to the same value as Hours1Days.
	//
	Hours2Days *DaysCodeType `xml:"Hours2Days,omitempty"`

	//
	// Indicates whether or not a user is available to be contacted 24 hours a day
	// during the range of days specified using the Hours2Days element.
	// True indicates the user is available 24 hours a day, false indicates otherwise.
	// In the case of this field being true, all values provided for Hours2From and
	// Hours2To will be ignored.  In the case of this field being false,
	// the values provided Hours2From and Hours2To will be considered.
	//
	Hours2AnyTime bool `xml:"Hours2AnyTime,omitempty"`

	//
	// Indicates the starting time of day this eBay user is available for other eBay
	// members to contact for the range of days specified using Hours2Days.
	// Enter times in 30 minute increments from the top of the hour. That is, enter
	// values either on the hour (:00) or 30 minutes past the hour (:30).
	// Other values will be will be rounded down to the next closest 30 minute
	// increment. Times entered should be local to the value provided for TimeZoneID.
	//
	Hours2From time.Time `xml:"Hours2From,omitempty"`

	//
	// Indicates the ending time of day this eBay user is available for other eBay
	// members to contact them for the range of days specified using Hours1Days.
	// Enter times in 30 minute increments from the top of the hour. That is, enter
	// values either on the hour (:00) or 30 minutes past the hour (:30).
	// Other values will be will be rounded down to the next closest 30 minute
	// increment. Times entered should be local to the value provided for TimeZoneID.
	//
	Hours2To time.Time `xml:"Hours2To,omitempty"`
}

type ContextSearchAssetType struct {

	//
	// The name of the keyword that was found in the search.
	//
	Keyword string `xml:"Keyword,omitempty"`

	//
	// The eBay category in which the keyword is used.
	//
	Category *CategoryType `xml:"Category,omitempty"`

	//
	// The ranking of the corresponding keyword/category combination relative to
	// other keywords that were returned in the response.
	//
	Ranking int32 `xml:"Ranking,omitempty"`
}

type CountryDetailsType struct {

	//
	// Two-letter code representing a country. These two-letter codes are typically used
	// in Add/Revise/Relist calls when referring to a country.
	//
	Country *CountryCodeType `xml:"Country,omitempty"`

	//
	// Full country name for display purposes. May be similar to (but not necessarily identical to)
	// CountryName in addresses (e.g., User.RegistrationAddress.CountryName in GetUser).
	//
	Description string `xml:"Description,omitempty"`

	//
	// Returns the latest version number for this field. The version can be used to
	// determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the
	// details were last updated. This timestamp can be used to
	// determine if and when to refresh cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type CrossBorderTradeAustraliaEnabledDefinitionType struct {
}

type CrossBorderTradeGBEnabledDefinitionType struct {
}

type CrossBorderTradeNorthAmericaEnabledDefinitionType struct {
}

type CrossPromotionPreferencesType struct {

	//
	// This field is deprecated.
	//
	CrossPromotionEnabled bool `xml:"CrossPromotionEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	CrossSellItemFormatSortFilter *ItemFormatSortFilterCodeType `xml:"CrossSellItemFormatSortFilter,omitempty"`

	//
	// This field is deprecated.
	//
	CrossSellGallerySortFilter *GallerySortFilterCodeType `xml:"CrossSellGallerySortFilter,omitempty"`

	//
	// This field is deprecated.
	//
	CrossSellItemSortFilter *ItemSortFilterCodeType `xml:"CrossSellItemSortFilter,omitempty"`

	//
	// This field is deprecated.
	//
	UpSellItemFormatSortFilter *ItemFormatSortFilterCodeType `xml:"UpSellItemFormatSortFilter,omitempty"`

	//
	// This field is deprecated.
	//
	UpSellGallerySortFilter *GallerySortFilterCodeType `xml:"UpSellGallerySortFilter,omitempty"`

	//
	// This field is deprecated.
	//
	UpSellItemSortFilter *ItemSortFilterCodeType `xml:"UpSellItemSortFilter,omitempty"`
}

type CrossPromotionsType struct {

	//
	// This field is deprecated.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This field is deprecated.
	//
	PrimaryScheme *PromotionSchemeCodeType `xml:"PrimaryScheme,omitempty"`

	//
	// This field is deprecated.
	//
	PromotionMethod *PromotionMethodCodeType `xml:"PromotionMethod,omitempty"`

	//
	// This field is deprecated.
	//
	SellerID string `xml:"SellerID,omitempty"`

	//
	// This field is deprecated.
	//
	ShippingDiscount bool `xml:"ShippingDiscount,omitempty"`

	//
	// This field is deprecated.
	//
	StoreName string `xml:"StoreName,omitempty"`

	//
	// This field is deprecated.
	//
	PromotedItem []*PromotedItemType `xml:"PromotedItem,omitempty"`
}

type CurrencyDetailsType struct {

	//
	// Three-digit currency codes as defined in ISO 4217. The currency codes returned in
	// <b>GeteBayDetails</b> can be used as values in the
	// <b>Currency</b> field of the Add/Revise/Relist and other Trading API
	// calls.
	// <br><br>
	//
	Currency *CurrencyCodeType `xml:"Currency,omitempty"`

	//
	// Full currency name for display purposes.
	//
	Description string `xml:"Description,omitempty"`

	//
	// Returns the latest version number for this field. The version can be used
	// to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the
	// details were last updated. This timestamp can be used to determine if
	// and when to refresh cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type DataElementSetType struct {

	//
	// This field is deprecated.
	//
	DataElement string `xml:"DataElement,omitempty"`

	//
	// This field is deprecated.
	//
	DataElementID int32 `xml:"DataElementID,omitempty"`

	//
	// This attribute is deprecated.
	//
	AttributeSetID int32 `xml:"attributeSetID,attr,omitempty"`
}

type DateType struct {

	//
	// A year in the form YYYY.
	//
	Year int32 `xml:"Year,omitempty"`

	//
	// A calendar month (e.g., 2 or 02 for February).
	// For ticket searches, Month is required if
	// Day is specified.
	//
	Month int32 `xml:"Month,omitempty"`

	//
	// A calendar day (e.g., 2 or 02). For ticket searches,
	// Day is only valid if Month is also specified.
	//
	Day int32 `xml:"Day,omitempty"`
}

type DeliveryDetailsType struct {

	//
	// This container consists of the name and email of the person who is receiving the digital gift card. If the buyer has purchased the gift card for themselves, the buyer's name and email will appear in this container. If the buyer is giving the gift card to another individual, that individual's name and email will appear in this container. This container is always returned for a digital gift card line item.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this container will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, real data is only returned to the buyer or seller, and dummy/masked data will be returned to all third parties.
	//
	Recipient *DigitalDeliveryUserType `xml:"Recipient,omitempty"`

	//
	// This container consists of the name and email of the person who purchased the digital gift card. This container is only returned if the purchaser of the digital gift card is giving the gift card to someone else, and that individual's name and email will appear in the <strong>Recipient</strong> container.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this container will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, real data is only returned to the buyer or seller, and dummy/masked data will be returned to all third parties.
	//
	Sender *DigitalDeliveryUserType `xml:"Sender,omitempty"`
}

type DeliveryStatusType struct {

	//
	// This value indicates the current delivery status for the digital gift card that is being delivered by email. Currently, the only supported delivery status value is 'Notified', which indicates that the link to download the digital gift card has been sent to the recipient by email.
	//
	Email string `xml:"Email,omitempty"`
}

type DeliveryURLDetailType struct {

	//
	// The name of a notification delivery URL. You can list up to 25 instances of
	// DeliveryURLName, and then subscribe these URLs to notifications by listing them in comma-
	// separated format in the DeliveryURLName element outside of
	// ApplicationDeliveryPreferences.
	//
	DeliveryURLName string `xml:"DeliveryURLName,omitempty"`

	//
	// The address of a notification delivery URL.
	// This address applies to the DeliveryURLName
	// within the same
	// ApplicationDeliveryPreferences.DeliveryURLDetails container.
	// For delivery to a server, the URL
	// begins with http:// or https:// and must be well
	// formed. Use a URL that is functional at the time of the
	// call. For delivery to an email address, the URL begins
	// with mailto: and specifies a valid email address.
	//
	DeliveryURL *AnyURI `xml:"DeliveryURL,omitempty"`

	//
	// The status of a notification delivery URL.
	// This status applies to the DeliveryURLName and delivery URL
	// within the same ApplicationDeliveryPreferences.DeliveryURLDetails container.
	// If the status is disabled, then notifications will not be sent to the delivery URL.
	//
	Status *EnableCodeType `xml:"Status,omitempty"`
}

type DepositSupportedDefinitionType struct {
}

type DescriptionTemplateType struct {

	//
	// This integer value is a unique identifier for the Listing Designer Theme group, such as Holiday/Seasonal, Special Events, or Patterns/Textures. This field is not applicable and will not be returned for a Listing Designer Layout.
	//
	GroupID int32 `xml:"GroupID,omitempty"`

	//
	// This integer value is a unique identifier of the Listing Designer Theme or Layout.
	//
	ID int32 `xml:"ID,omitempty"`

	//
	// This URL is the path to a small image providing a sample of the appearance of a Listing Designer Theme or Layout.
	//
	ImageURL *AnyURI `xml:"ImageURL,omitempty"`

	//
	// This string value is the name of the Listing Designer Theme or Layout.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This string value is actually a CDATA representation of the Listing Designer template. Image-related elements in a template include <code>ThemeTop</code>, <code>ThemeUserCellTop</code>, <code>ThemeUserContent,</code>, <code>ThemeUserCellBottom</code>, and <code>ThemeBottom</code>. This field is not applicable and will not be returned for a Listing Designer Layout.
	//
	TemplateXML string `xml:"TemplateXML,omitempty"`

	//
	// This enumeration value indicates that the information returned under the <b>DescriptionTemplate</b> container is related to a Listing Designer Theme or Layout.
	//
	Type *DescriptionTemplateCodeType `xml:"Type,omitempty"`
}

type DigitalDeliverySelectedType struct {

	//
	// This value indicates the method in which the digital gift card will be delivered to the buyer or to the person whom the purchaser is giving the digital gift card to. Currently, the only supported delivery method is by email.
	//
	DeliveryMethod string `xml:"DeliveryMethod,omitempty"`

	//
	// This container consists of the current status of whatever delivery method is being used (indicated in the <b>DigitalDeliverySelected.DeliveryMethod</b>	field). Currently, the only supported delivery method is by email.
	//
	DeliveryStatus *DeliveryStatusType `xml:"DeliveryStatus,omitempty"`

	//
	// This container is returned by <b>GetOrders</b> and other order management calls to provide details on the recipient of a digital gift card that was purchased. The <b>DeliveryDetails</b> container is only returned if the buyer is buying a digital gift card and giving that gift card to another person.
	//
	DeliveryDetails *DeliveryDetailsType `xml:"DeliveryDetails,omitempty"`
}

type DigitalDeliveryUserType struct {

	//
	// This field displays the actual name (not the eBay user ID) of the sender/purchaser of the digital gift card (applicable for the <strong>Sender</strong> container) or the actual name of the recipient of the digital gift card (applicable for the <strong>Recipient</strong> container). Both the sender and recipient name is provided by the purchaser of the digital gift card at time of purchase.
	// <br><br>
	// <b>For GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, real data is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This field displays the email address of the sender/purchaser of the digital gift card (applicable for the <strong>Sender</strong> container) or the email address of the recipient of the digital gift card (applicable for the <strong>Recipient</strong> container). Both the sender and recipient email address is provided by the purchaser of the digital gift card at time of purchase.
	// <br><br>
	// <b>For GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, real data is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	Email string `xml:"Email,omitempty"`
}

type DigitalGoodDeliveryEnabledDefinitionType struct {
}

type DigitalGoodInfoType struct {

	//
	// This field must be included in the request and set to <code>true</code> if the seller plans to list a digital gift card in a category that supports digital gift cards.
	// <br><br>
	// To verify if a specific category on a specific eBay site supports digital gift card listings, use the <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategoryFeatures.html">GetCategoryFeatures</a> call, passing in a <b>CategoryID</b> value and a <b>DigitalGoodDeliveryEnabled</b> value in the <b>FeatureID</b> field. Look for a <code>true</code> value in the <b>DigitalGoodDeliveryEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	//
	DigitalDelivery bool `xml:"DigitalDelivery,omitempty"`
}

type DiscountPriceInfoType struct {

	//
	// The actual retail price set by the manufacturer (OEM).
	// eBay does not maintain or validate the <b>OriginalRetailPrice</b> supplied
	// by the seller. <b>OriginalRetailPrice</b> should always be more than
	// <b>StartPrice</b>. Compare the <b>StartPrice</b>/<b>BuyItNowPrice</b> to
	// <b>OriginalRetailPrice</b> to determine the amount of savings to the buyer.
	//
	OriginalRetailPrice *AmountType `xml:"OriginalRetailPrice,omitempty"`

	//
	// Minimum Advertised Price (MAP) is an agreement between suppliers (or
	// manufacturers (OEM)) and the retailers (sellers) stipulating
	// the lowest price an item is allowed to be advertised at.
	// Sellers can offer prices below MAP by means of other discounts.
	// This only applies to fixed-price listings and auction listings with the Buy It Now option.
	//
	MinimumAdvertisedPrice *AmountType `xml:"MinimumAdvertisedPrice,omitempty"`

	//
	// For MinimumAdvertisedPrice (MAP) listings only.
	// A seller cannot show the actual discounted price on eBay's View Item
	// page. Instead, the buyer can either click on a pop-up on eBay's
	// View Item page, or the discount price will be shown during checkout.
	//
	MinimumAdvertisedPriceExposure *MinimumAdvertisedPriceExposureCodeType `xml:"MinimumAdvertisedPriceExposure,omitempty"`

	//
	// Based on <b>OriginalRetailPrice</b>,
	// <b>MinimumAdvertisedPrice</b>, and <b>StartPrice</b> values, eBay identifies
	// whether the listing falls under MAP or STP (aka
	// <b>OriginalRetailPrice</b>). <b>GetItem</b> returns this for items listed with one
	// of these discount pricing treatments. <b>GetSellerList</b> returns the
	// <b>DiscountPriceInfo</b> container. This field is not applicable for Add/Revise/Relist calls.
	//
	PricingTreatment *PricingTreatmentCodeType `xml:"PricingTreatment,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this flag indicates that the discount
	// price (specified as <b>StartPrice</b>) is the price for which the seller offered the same (or
	// similar) item for sale on eBay within the previous 30 days. The discount price is always
	// in reference to the seller's own price for the item.
	// <br><br>
	// If this field is set to <code>true</code>, eBay displays 'Was' in the UK and 'Ursprunglich' in Germany, next
	// to the discounted price of the item. In the event both <b>SoldOffeBay</b> and <b>SoldOneBay</b> fields
	// are set to <code>true</code>, <b>SoldOneBay</b> takes precedence.
	// <br>
	//
	SoldOneBay bool `xml:"SoldOneBay,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this flag indicates that the discount
	// price (specified as StartPrice) is the price for which the seller offered the same (or
	// similar) item for sale on a Web site or offline store other than eBay in the previous 30
	// days. The discount price is always in reference to the seller's own price for the item.
	// <br><br>
	// If this field is set to <code>true</code>, eBay displays 'Was*' in the UK and 'Ursprunglich*' in Germany,
	// next to the discounted price of the item. In the event both <b>SoldOffeBay</b> and <b>SoldOneBay</b> fields
	// are set to <code>true</code>, <b>SoldOneBay</b> takes precedence.
	// <br>
	//
	SoldOffeBay bool `xml:"SoldOffeBay,omitempty"`

	//
	// Applicable only if the item was specifically made for sale through dedicated eBay outlet pages (e.g., eBay Fashion Outlet).<br>
	// <br>
	// The comparison price is the price of a comparable product sold
	// through non-outlet channels on eBay (or elsewhere), or not
	// specifically made for the outlet.<br>
	// <br>
	// In fashion, a "comparable" product shares the same design, but is
	// not considered an identical product. Some products are specifically
	// made for outlets, and may have a different SKU than the "comparable"
	// product. These made-for-outlet products may be manufactured in a
	// different place, with different materials, or according to different
	// specifications (i.e. different stitch pattern, seam reinforcement,
	// button quality, etc.)
	//
	MadeForOutletComparisonPrice *AmountType `xml:"MadeForOutletComparisonPrice,omitempty"`
}

type DiscountProfileType struct {

	//
	// The unique eBay-created unique identifier for the shipping discount, assigned when the shipping discount rule is created.
	// <br/>
	// In a <b>SetShippingDiscountProfiles</b> call,
	// <ul>
	// <li>If the value of <b>ModifyActionCode</b> is set to <code>Add</code>, this field is not applicable and is ignored   <li>If provided.</li>
	// <li>If the value of <b>Mod  <li>IfyActionCode</b> is set to <code>Update</code>, all fields of the modified rule must be provided, even   if the values are not changing.</li>
	// <li>If the value of <b>ModifyActionCode</b> is set to <code>Delete</code>, either the <b>DiscountProfileID</b> value or is <b>DiscountProfileName</b> value is required, the <b>MappingDiscountProfileID</b> is optional, and all other fields of the <b>DiscountProfile</b> container are ignored.</li>
	// </ul>
	//
	DiscountProfileID string `xml:"DiscountProfileID,omitempty"`

	//
	// The seller-provided title for the shipping discount rule.
	// <br/>
	// In a <b>SetShippingDiscountProfiles</b> call,
	// <ul>
	// <li>If the value of <b>ModifyActionCode</b> is set to <code>Add</code>, this field is ignored (if provided) if this is the first shipping discount rule being created, but this field is required if there is more than one existing shipping discount rule of that type (flat rate or calculated)</li>
	// <li>If the value of <b>ModifyActionCode</b> is set to <code>Update</code>, all fields of the modified rule must be provided, even if the values are not changing</li>
	// <li>If the value of <b>ModifyActionCode</b> is set to <code>Delete</code>, the <b>DiscountProfileID</b> is required, the <b>MappingDiscountProfileID</b> is optional, and all other fields of the <b>DiscountProfile</b> container are ignored</li>
	// <li>If the value of <b>ModifyActionCode</b> is set to <code>Delete</code>, either the <b>DiscountProfileID</b> value or is <b>DiscountProfileName</b> value is required, the <b>MappingDiscountProfileID</b> is optional, and all other fields of the <b>DiscountProfile</b> container are ignored</li>
	// </ul>
	//
	DiscountProfileName string `xml:"DiscountProfileName,omitempty"`

	//
	// The cost to ship each item beyond the first item (where the item with the highest shipping cost is selected by eBay as the first item). Let's say the buyer purchases three items, each set to ship for $8, and the seller set the <b>EachAdditionalAmount</b> to $6. The cost to ship three items would normally be $24, but since the seller specified $6, the total shipping cost would be $8 + $6 + $6, or $20. This field is only applicable for flat-rate shipping.
	//
	EachAdditionalAmount *AmountType `xml:"EachAdditionalAmount,omitempty"`

	//
	// The amount by which to reduce the cost to ship each item beyond the first item (where the item with the highest shipping cost is selected by eBay as the first item). Let's say the buyer purchases three items, each set to ship for $8, and the seller set <b>EachAdditionalAmountOff</b> to $2. The cost to ship three items would normally be $24, but since the seller specified $2, the total shipping cost would be <i>$24 - (two additional items x $2)</i>, or $20. This field is only applicable for flat-rate shipping.
	//
	EachAdditionalAmountOff *AmountType `xml:"EachAdditionalAmountOff,omitempty"`

	//
	// The percentage by which to reduce the cost to ship each item beyond the first item (where the item with the highest shipping cost is selected by eBay as the first item). Let's say the buyer purchases three items, each set to ship for $8, and the seller set <b>EachAdditionalPercentOff</b> to 0.25. The cost to ship three items would normally be $24, but since the seller specified 0.25 ($2 out of $8), the total shipping cost would be <i>$24 - (two additional items x $2)</i>, or $20. This field is only applicable for flat-rate shipping.
	//
	EachAdditionalPercentOff float32 `xml:"EachAdditionalPercentOff,omitempty"`

	//
	// The amount of weight to subtract for each item beyond the first item before shipping costs are calculated. For example, there may be less packing material when the items are combined in one box than if they were shipped individually. Let's say the buyer purchases three items, each 10 oz. in weight, and the seller set <b>WeightOff</b> to 2 oz. The combined weight would be 30 oz., but since the seller specified 2 oz. off, the total weight for shipping cost calculation would be <i>30 oz. - (two additional items x 2 oz.)</i>, or 26 oz. This field is only applicable for calculated shipping.
	//
	WeightOff *MeasureType `xml:"WeightOff,omitempty"`

	//
	// For <b>SetShippingDiscountProfiles</b>, if <b>MappedDiscountProfileID</b> is omitted when
	// <b>ModifyActionCode</b> is set to <code>Delete</code>, any listings currently using the profile
	// identified by <b>DiscountProfileID</b> will have that profile removed.
	//
	MappedDiscountProfileID string `xml:"MappedDiscountProfileID,omitempty"`
}

type DispatchCutoffTimePreferencesType struct {

	//
	// If the seller specifies a <strong>DispatchTimeMax</strong> value of <code>0</code> to indicate same day handling for an item, the seller's shipping commitment depends on the value of <strong>CutoffTime</strong> for the eBay site on which the item is listed.
	// <br/><br/>
	// For orders placed (and cleared payment received) before the indicated cut off time, the item must be shipped by the end of the current day. For orders completed on or after the cut off time, the item must be shipped by the end of the following day (excluding weekends and local holidays).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field is not applicable for sellers who have opted into the Handling Time Option of eBay Guaranteed Delivery, as this field only shows a single order cutoff time, but with the Handling Time Option, a seller can set a different order cutoff time for each business day. Currently, eBay Guaranteed Delivery is only available in the US.
	// </span>
	// <strong>CutoffTime</strong> has a default initial value for each eBay site, but you can use <strong>SetUserPreferences</strong> to override the default for individual sellers. The default value for most eBay sites is 2:00PM local time. Enter times in 30 minute increments from the top of the hour. That is, enter values either on the hour (:00) or 30 minutes past the hour (:30). Other values will be rounded down to the next closest 30 minute increment. Times entered should be local to the value provided for <strong>TimeZoneID</strong>.
	// <br/>
	//
	CutoffTime time.Time `xml:"CutoffTime,omitempty"`
}

type DispatchTimeMaxDetailsType struct {

	//
	// Integer value that indicates the maximum number of business days that the eBay site allows as a seller's handling time. The clock starts ticking when the buyer pays for the order. This means that if a buyer pays for the order on a Wednesday, the seller would have to ship the item by the next day (Thursday) if the <b>DispatchTimeMax</b> value is set to <code>1</code>. Typical values for this field are 0, 1, 2, 3, 4, 5, 10, 15, or 20.
	// <br/><br/>
	// A <b>DispatchTimeMax</b> value of <code>0</code> indicates <em>same day handling</em> for an item. In this case, the seller's handling time commitment depends on the <em>order cut off time</em> set in the seller's user preferences. This defaults to 2:00 PM local time on most eBay sites. For orders placed (and cleared payment received) before the local order cut off time, the item must be shipped by the end of the current day. For orders completed on or after the order cut off time, the item must be shipped by the end of the following day (excluding weekends and local holidays).
	// <br/><br/>
	//
	// <span class="tablenote">
	// <strong>Note:</strong> If a same day shipping carrier is selected, and the carrier delivers on one or both weekend days, sellers on the eBay US site are assumed to be open for business on the same days, and those days will be used when calculating total shipping time.
	// </span>
	//
	// If using <b>GeteBayDetails</b> specifically to return this value, the caller sets the DetailName field in the request to <b>DispatchTimeMaxDetails</b>.
	// <br/><br/>
	// When creating, revising, or relisting an item, the seller cannot set the <b>Item.DispatchTimeMax</b> value higher than the value returned in this field.
	//
	DispatchTimeMax int32 `xml:"DispatchTimeMax,omitempty"`

	//
	// Value and unit (e.g., 10 Days) for the maximum dispatch time.
	// Useful for display purposes.
	//
	Description string `xml:"Description,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the
	// details were last updated. This timestamp can be used to determine
	// if and when to refresh cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// A value of <code>true</code> indicates that the seller has specified a handling time of 4 business days or more (an <em>exception handling time</em>). Sellers should be aware that long handling times might adversely affect the buying decisions of potential customers.
	//
	ExtendedHandling bool `xml:"ExtendedHandling,omitempty"`
}

type DisputeArrayType struct {

	//
	// The information that describes a dispute, including
	// the buyer's name, the transaction ID, the dispute state
	// and status, whether the dispute is resolved,
	// and any messages posted to the dispute.
	//
	Dispute []*DisputeType `xml:"Dispute,omitempty"`
}

type DisputeType struct {

	//
	// The unique identifier of an eBay dispute.
	//
	DisputeID *DisputeIDType `xml:"DisputeID,omitempty"`

	//
	// A value to indicate the type of dispute.
	//
	DisputeRecordType *DisputeRecordTypeCodeType `xml:"DisputeRecordType,omitempty"`

	//
	// The internal state of the dispute. The value determines
	// which values of <b>DisputeActivity</b> are valid when responding
	// to a dispute.
	//
	DisputeState *DisputeStateCodeType `xml:"DisputeState,omitempty"`

	//
	// The status of the dispute, which provides additional
	// information about the dispute state.
	//
	DisputeStatus *DisputeStatusCodeType `xml:"DisputeStatus,omitempty"`

	//
	// The role of the person involved in the dispute who is
	// not taking action or requesting information. The role is
	// either <b>Buyer</b> or <b>Seller</b>.
	//
	OtherPartyRole *TradingRoleCodeType `xml:"OtherPartyRole,omitempty"`

	//
	// The user name of the person involved in the dispute who
	// is not taking action or requesting information.
	//
	OtherPartyName string `xml:"OtherPartyName,omitempty"`

	//
	// The role of the person involved in the dispute who is taking action or
	// requesting information. The role is either <b>Buyer</b> or <b>Seller</b>.
	//
	UserRole *TradingRoleCodeType `xml:"UserRole,omitempty"`

	//
	// The eBay user ID of the buyer involved in the dispute.
	//
	BuyerUserID *UserIDType `xml:"BuyerUserID,omitempty"`

	//
	// The eBay user ID of the seller involved in the dispute.
	//
	SellerUserID *UserIDType `xml:"SellerUserID,omitempty"`

	//
	// The unique identifier of the order line item (transaction) under dispute. An
	// order line item is created once there is a commitment from a
	// buyer to purchase an item. In the case of <b>GetDispute</b> and <b>GetUserDisputes</b>
	// responses, this value identifies the order line item involved in the
	// dispute.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// Container consisting of high-level details about the item involved in the
	// dispute.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// The top-level reason for the dispute. The value of <b>DisputeReason</b>
	// determines which values of <b>DisputeExplanation</b> are valid.
	// See <b>DisputeExplanationCodeList</b> for details.
	//
	DisputeReason *DisputeReasonCodeType `xml:"DisputeReason,omitempty"`

	//
	// The detailed explanation for the dispute. Valid values
	// depend on the value of <b>DisputeReason</b>. See <b>DisputeExplanationCodeList</b>
	// for details.
	//
	DisputeExplanation *DisputeExplanationCodeType `xml:"DisputeExplanation,omitempty"`

	//
	// A value to indicate whether or not the seller is currently eligible for a
	// Final Value Fee credit. The seller becomes eligible for a Final Value Fee
	// credit after filing and winning an Unpaid Item case. This tag only
	// indicates credit eligibility and does not mean that the case can be closed.
	// The seller can open a UPI case as soon as two days after the listing ends.
	// <br>
	//
	DisputeCreditEligibility *DisputeCreditEligibilityCodeType `xml:"DisputeCreditEligibility,omitempty"`

	//
	// The date and time the dispute was created, in GMT.
	//
	DisputeCreatedTime time.Time `xml:"DisputeCreatedTime,omitempty"`

	//
	// The date and time the dispute was modified, in GMT.
	//
	DisputeModifiedTime time.Time `xml:"DisputeModifiedTime,omitempty"`

	//
	// The action resulting from the dispute resolution. The
	// action might include a Final Value Fee credit to the seller, a strike
	// to the buyer, a reversal, or an appeal.
	//
	DisputeResolution []*DisputeResolutionType `xml:"DisputeResolution,omitempty"`

	//
	// A response or message posted to a dispute, either by
	// an application or by a user on the eBay site.
	//
	DisputeMessage []*DisputeMessageType `xml:"DisputeMessage,omitempty"`

	//
	// Whether the buyer can close a dispute unhappy and escalate it
	// to the eBay Standard Purchase Protection Program. To escalate, the buyer
	// must be eligible for the PPP. Used in Item Not Received disputes.
	//
	Escalation bool `xml:"Escalation,omitempty"`

	//
	// Whether the buyer is eligible for the eBay Standard Purchase Protection
	// Program. The eligibility rules are described in the eBay site online help.
	// Used in Item Not Received disputes.
	//
	PurchaseProtection bool `xml:"PurchaseProtection,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs. In the case of <b>GetDispute</b> and <b>GetUserDisputes</b>
	// responses, this value identifies the order line item involved in the
	// dispute.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type DistanceType struct {

	//
	// This field is deprecated.
	//
	DistanceMeasurement int32 `xml:"DistanceMeasurement,omitempty"`

	//
	// This field is deprecated.
	//
	DistanceUnit string `xml:"DistanceUnit,omitempty"`
}

type DomesticRefundMethodCodeType struct {

	//
	// Defines the available options the seller has for handling domestic returns in the specified marketplace and category.
	//
	DomesticRefundMethod []*ReturnsRefundMethodCodeType `xml:"DomesticRefundMethod,omitempty"`
}

type DomesticRefundMethodDefinitionType struct {
}

type DomesticReturnsAcceptedCodeType struct {

	//
	// Defines the available options the seller has for accepting domestic returns in the specified marketplace and category.
	//
	DomesticReturnsAccepted []*ReturnsAcceptedCodeType `xml:"DomesticReturnsAccepted,omitempty"`
}

type DomesticReturnsAcceptedDefinitionType struct {
}

type DomesticReturnsDurationCodeType struct {

	//
	// Defines the available options for the return durations for domestic returns in the specified marketplace and category. This is the time the buyer has to initiate a return once they receive the item.
	//
	DomesticReturnsDuration []*ReturnsDurationCodeType `xml:"DomesticReturnsDuration,omitempty"`
}

type DomesticReturnsDurationDefinitionType struct {
}

type DomesticReturnsShipmentPayeeCodeType struct {

	//
	// Defines the available options for who pays the return shipping costs for domestic returns in the specified marketplace and category.
	//
	DomesticReturnsShipmentPayee []*ReturnsShipmentPayeeCodeType `xml:"DomesticReturnsShipmentPayee,omitempty"`
}

type DomesticReturnsShipmentPayeeDefinitionType struct {
}

type DutchBINEnabledDefinitionType struct {
}

type EANEnabledDefinitionType struct {
}

type EANIdentifierEnabledDefinitionType struct {
}

type EndItemRequestContainerType struct {

	//
	// The unique identifier of the eBay listing to end.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The seller's reason for ending the listing early is input into this required field. The seller is not allowed to use the <code>ProductDeleted</code> value, as this ending reason can only be used internally by eBay to administratively end a listing due to the associated Catalog product being removed from the eBay Catalog.
	//
	EndingReason *EndReasonCodeType `xml:"EndingReason,omitempty"`

	//
	// Most Trading API calls support a <b>MessageID</b> element in the request
	// and a <b>CorrelationID</b> element in the response. With
	// <b>EndItems</b>, the seller can pass in a different
	// <b>MessageID</b> value for
	// each <b>EndItemRequestContainer</b> container that is used in the request. The
	// <b>CorrelationID</b> value returned under each
	// <b>EndItemResponseContainer</b> container is used to correlate each
	// End Item request container with its corresponding End Item response container. The same <b>MessageID</b> value that you pass into a request will
	// be returned in the <b>CorrelationID</b> field in the response.
	// <br>
	// <br>
	// If you do not pass in a <b>MessageID</b> value in the request,
	// <b>CorrelationID</b> is not returned.
	//
	MessageID string `xml:"MessageID,omitempty"`

	//
	// This field was previously only used to identify and end Half.com listings, and since the Half.com site has been shut down, this element is no longer applicable.
	//
	SellerInventoryID string `xml:"SellerInventoryID,omitempty"`
}

type EndItemResponseContainerType struct {

	//
	// This timestamp indicates the date and time (returned in GMT) when the specified eBay listing was ended.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// Most Trading API calls support a <b>MessageID</b> element in the request
	// and a <b>CorrelationID</b> element in the response. With
	// <b>EndItems</b>, the seller can pass in a different
	// <b>MessageID</b> value for
	// each <b>EndItemRequestContainer</b> container that is used in the request. The
	// <b>CorrelationID</b> value returned under each
	// <b>EndItemResponseContainer</b> container is used to correlate each
	// End Item request container with its corresponding End Item response container. The same <b>MessageID</b> value that you pass into a request will
	// be returned in the <b>CorrelationID</b> field in the response.
	// <br>
	// <br>
	// If you do not pass in a <b>MessageID</b> value in the request,
	// <b>CorrelationID</b> is not returned.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`

	//
	// A list of application-level errors or warnings (if any) that were raised
	// when eBay processed the request. <br>
	// <br>
	// Application-level errors occur due to
	// problems with business-level data on the client side or on the eBay
	// server side. For example, an error would occur if the request contains
	// an invalid combination of fields, or it is missing a required field,
	// or the value of the field is not recognized. An error could also occur
	// if eBay encountered a problem in our internal business logic while
	// processing the request.<br>
	// <br>
	// Only returned if there were warnings or errors.
	//
	Errors []*ErrorType `xml:"Errors,omitempty"`
}

type EndOfAuctionEmailPreferencesType struct {

	//
	// The seller can customize the text of the email that is sent to the winner of an auction listing. The text of the email is provided in this field. If the seller is going to customize the text of the email through this field, the seller must also include the <b>TextCustomized</b> field and set its value to <code>true</code>.The text of the custom message for the email.
	// <br>
	// <br>
	// This field is only returned if set for the account.
	//
	TemplateText string `xml:"TemplateText,omitempty"`

	//
	// The seller can include a customized logo in the email that is sent to the winner of an auction listing. The full URI to this logo image should be applied in this field. If the seller is going to include a customized logo in the email through this field, the seller must also include the <b>LogoCustomized</b> field and set its value to <code>true</code>, and include the <b>LogoType</b> field and set its value to <code>Customized</code>.
	// <br>
	// <br>
	// This field is only returned if a customized logo is being used for the customized email.
	//
	LogoURL *AnyURI `xml:"LogoURL,omitempty"`

	//
	// This field is needed in the <b>SetUserPreferences</b> call if the seller would like to use a customized or eBay Store logo. If the seller would like to use a customized logo, this field's value will be set to <code>Customized</code>. If the seller would like to use their eBay Store logo (if it exists), this field's value will be set to <code>Store</code>.
	// <br>
	// <br>
	// This field is always returned, and its value will be <code>None</code> if no logo is used in the customized email.
	//
	LogoType *EndOfAuctionLogoTypeCodeType `xml:"LogoType,omitempty"`

	//
	// This field is used in a <b>SetUserPreferences</b> call to set/change the setting of whether a customized email will be sent to the winning bidder or not.
	// <br>
	// <br>
	// This field is always returned to indicate whether or not a customized email will be sent to the winning bidder.
	//
	EmailCustomized bool `xml:"EmailCustomized,omitempty"`

	//
	// This field is used in a <b>SetUserPreferences</b> call to set/change the setting of whether customized text will be used or not in the customized email that is sent to the winning bidder. Customized text is provided through the <b>LogoURL</b> field.
	// <br>
	// <br>
	// This field is always returned to indicate whether or not customized text is used in a customized email that is sent to the winning bidder.
	//
	TextCustomized bool `xml:"TextCustomized,omitempty"`

	//
	// This field is used in a <b>SetUserPreferences</b> call to set/change the setting of whether a customized logo will be used or not in the customized email that is sent to the winning bidder. The URI to a customized logo is provided through the <b>TemplateText</b> field. If the seller would like to use a customized logo, the <b>LogoType</b> field must also be included, and its value will be set to <code>Customized</code>.
	// <br>
	// <br>
	// This field is always returned to indicate whether or not a customized logo is used in a customized email that is sent to the winning bidder.
	//
	LogoCustomized bool `xml:"LogoCustomized,omitempty"`

	//
	// This field is deprecated.
	//
	CopyEmail bool `xml:"CopyEmail,omitempty"`
}

type EpidSupportedDefinitionType struct {
}

type ExcludeShippingLocationDetailsType struct {

	//
	// The localized location name.
	//
	Description string `xml:"Description,omitempty"`

	//
	// The location or region code to be used with the AddItem family of calls. These
	// codes are also returned by GetItem. This code reflects the <a href=
	// "http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm"
	// >ISO 3166</a> codes.
	//
	Location string `xml:"Location,omitempty"`

	//
	// The region code to which the location belongs.
	//
	Region string `xml:"Region,omitempty"`

	//
	// Returns the current version number of the ExcludeShippingLocation data. Use
	// the version number to determine if you need to refresh your cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// The time in GMT that the feature flags for the details were last updated.
	// Use this timestamp to determine if you need to refresh your cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ExpressConditionRequiredDefinitionType struct {
}

type ExpressEnabledDefinitionType struct {
}

type ExpressItemRequirementsType struct {

	//
	// This field is deprecated.
	//
	SellerExpressEligible bool `xml:"SellerExpressEligible,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressOptOut bool `xml:"ExpressOptOut,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressApproved bool `xml:"ExpressApproved,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressEligibleListingType bool `xml:"ExpressEligibleListingType,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressEnabledCategory bool `xml:"ExpressEnabledCategory,omitempty"`

	//
	// This field is deprecated.
	//
	EligiblePayPalAccount bool `xml:"EligiblePayPalAccount,omitempty"`

	//
	// This field is deprecated.
	//
	DomesticShippingCost bool `xml:"DomesticShippingCost,omitempty"`

	//
	// This field is deprecated.
	//
	EligibleReturnPolicy bool `xml:"EligibleReturnPolicy,omitempty"`

	//
	// This field is deprecated.
	//
	Picture bool `xml:"Picture,omitempty"`

	//
	// This field is deprecated.
	//
	EligibleItemCondition bool `xml:"EligibleItemCondition,omitempty"`

	//
	// This field is deprecated.
	//
	PriceAboveMinimum bool `xml:"PriceAboveMinimum,omitempty"`

	//
	// This field is deprecated.
	//
	PriceBelowMaximum bool `xml:"PriceBelowMaximum,omitempty"`

	//
	// This field is deprecated.
	//
	EligibleCheckout bool `xml:"EligibleCheckout,omitempty"`

	//
	// This field is deprecated.
	//
	NoPreapprovedBidderList bool `xml:"NoPreapprovedBidderList,omitempty"`

	//
	// This field is deprecated.
	//
	NoCharity bool `xml:"NoCharity,omitempty"`

	//
	// This field is deprecated.
	//
	CombinedShippingDiscount bool `xml:"CombinedShippingDiscount,omitempty"`

	//
	// This field is deprecated.
	//
	ShipFromEligibleCountry bool `xml:"ShipFromEligibleCountry,omitempty"`

	//
	// This field is deprecated.
	//
	PayPalAccountAcceptsUnconfirmedAddress bool `xml:"PayPalAccountAcceptsUnconfirmedAddress,omitempty"`
}

type ExpressPicturesRequiredDefinitionType struct {
}

type ExtendedContactDetailsType struct {

	//
	// This containers consists of fields that allows the seller of a Classified Ad listing to tell potential buyers what days and times they may be contacted to inquire about the listing.
	//
	ContactHoursDetails *ContactHoursDetailsType `xml:"ContactHoursDetails,omitempty"`

	//
	// A value of <code>true</code> in this field indicates that potential buyers can contact the seller of the Classified Ad listing by email.
	//
	ClassifiedAdContactByEmailEnabled bool `xml:"ClassifiedAdContactByEmailEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	PayPerLeadPhoneNumber string `xml:"PayPerLeadPhoneNumber,omitempty"`
}

type ExtendedPictureDetailsType struct {

	//
	// This container returns the <b>eBayPictureURL</b> (images hosted by eBay
	// Picture Services) and the <b>ExternalPictureURL</b> (images hosted outside of eBay) fields.
	//
	PictureURLs []*PictureURLsType `xml:"PictureURLs,omitempty"`
}

type ExtendedProductFinderIDType struct {

	//
	// This field is deprecated.
	//
	ProductFinderID int32 `xml:"ProductFinderID,omitempty"`

	//
	// This field is deprecated.
	//
	ProductFinderBuySide bool `xml:"ProductFinderBuySide,omitempty"`
}

type ExternalAlertIDArrayType struct {

	//
	// This field is deprecated.
	//
	ExternalAlertID []string `xml:"ExternalAlertID,omitempty"`
}

type ExternalTransactionType struct {

	//
	// Unique identifier for a PayPal payment of an eBay order. If the order was purchased
	// with a payment method other than PayPal, "SIS" is returned, which stands for "Send
	// Information To Seller." This field is only returned after payment has been made.
	//
	ExternalTransactionID string `xml:"ExternalTransactionID,omitempty"`

	//
	// Timestamp for payment transaction.
	//
	ExternalTransactionTime time.Time `xml:"ExternalTransactionTime,omitempty"`

	//
	// Fee Amount is a positive value and Credit Amount is a negative value.
	//
	FeeOrCreditAmount *AmountType `xml:"FeeOrCreditAmount,omitempty"`

	//
	// If this dollar value is a positive amount, this is the amount that the buyer pays the seller through PayPal for purchase of the order. If this dollar value is a negative amount, this is the amount refunded to the buyer.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> If a refund is due to the buyer, the amount in this field will not include any Australia import tax charged to the buyer for one or more order line items, since this tax is collected by eBay and not by the seller. Australia import tax is only applicable to the Australia site.
	// </span>
	//
	PaymentOrRefundAmount *AmountType `xml:"PaymentOrRefundAmount,omitempty"`

	//
	// The current processing status of a PayPal payment for an eBay order.
	//
	ExternalTransactionStatus *PaymentTransactionStatusCodeType `xml:"ExternalTransactionStatus,omitempty"`
}

type FeatureDefinitionsType struct {

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support listing durations. Listing durations will vary based on the selling format (auction, fixed-price, or classified ad) and the eBay category. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ListingDurations</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ListingDurations *ListingDurationDefinitionsType `xml:"ListingDurations,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites require shipping terms at listing time, whiche includesat least one domestic shipping service option and its associated costs. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ShippingTermsRequired</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ShippingTermsRequired *ShippingTermRequiredDefinitionType `xml:"ShippingTermsRequired,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer feature. The Best Offer feature allows buyers and sellers to negotiate the price of the item.  This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>BestOfferEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature is now available for auction listings on the following sites: US, Canada, UK, Germany, Australia, France, Italy, and Spain. However, sellers must choose between offering Best Offer or Buy It Now on an auction listing, as both features cannot be enabled on the same auction listing.
	// </span>
	//
	BestOfferEnabled *BestOfferEnabledDefinitionType `xml:"BestOfferEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	DutchBINEnabled *DutchBINEnabledDefinitionType `xml:"DutchBINEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	UserConsentRequired *UserConsentRequiredDefinitionType `xml:"UserConsentRequired,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the temporary display of a seller's listing on a section of the eBay Home Page. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>HomePageFeaturedEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	HomePageFeaturedEnabled *HomePageFeaturedEnabledDefinitionType `xml:"HomePageFeaturedEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Pro Pack listing upgrade bundle. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ProPackEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ProPackEnabled *ProPackEnabledDefinitionType `xml:"ProPackEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	BasicUpgradePackEnabled *BasicUpgradePackEnabledDefinitionType `xml:"BasicUpgradePackEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Value Pack listing upgrade bundle. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ValuePackEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ValuePackEnabled *ValuePackEnabledDefinitionType `xml:"ValuePackEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Pro Pack Plus listing upgrade bundle. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ProPackPlusEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ProPackPlusEnabled *ProPackPlusEnabledDefinitionType `xml:"ProPackPlusEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Classified Ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>AdFormatEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	AdFormatEnabled *AdFormatEnabledDefinitionType `xml:"AdFormatEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support counter offers to Best Offers. The Best Offer feature allows buyers and sellers to negotiate the price of the item, and once a Best Offer price is proposed, the seller can send the buyer a counter offer, and a buyer may even send another counter offer to the seller's counter offer. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>BestOfferCounterEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature is now available for auction listings on the following sites: US, Canada, UK, Germany, Australia, France, Italy, and Spain. However, sellers must choose between offering Best Offer or Buy It Now on an auction listing, as both features cannot be enabled on the same auction listing.
	// </span>
	//
	BestOfferCounterEnabled *BestOfferCounterEnabledDefinitionType `xml:"BestOfferCounterEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Decline feature. The Best Offer Auto-Decline feature allows a seller to set a lower threshold dollar value on a listing, and any Best Offer amount below this amount is automatically declined by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>BestOfferAutoDeclineEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature is now available for auction listings on the following sites: US, Canada, UK, Germany, Australia, France, Italy, and Spain. However, sellers must choose between offering Best Offer or Buy It Now on an auction listing, as both features cannot be enabled on the same auction listing.
	// </span>
	//
	BestOfferAutoDeclineEnabled *BestOfferAutoDeclineEnabledDefinitionType `xml:"BestOfferAutoDeclineEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Motors Local Market listings for dealership subscribers with a specialty subscription. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketSpecialitySubscription</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// See the <a href="
	// http://pages.ebay.com/help/sell/formats.html#market" target="_blank">Motors Local Market listing help topic</a> for more information.
	//
	LocalMarketSpecialitySubscription *LocalMarketSpecialitySubscriptionDefinitionType `xml:"LocalMarketSpecialitySubscription,omitempty"`

	//
	// TThis field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Motors Local Market listings for dealership subscribers with a regular subscription. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketRegularSubscription</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// See the <a href="
	// http://pages.ebay.com/help/sell/formats.html#market" target="_blank">Motors Local Market listing help topic</a> for more information.
	//
	LocalMarketRegularSubscription *LocalMarketRegularSubscriptionDefinitionType `xml:"LocalMarketRegularSubscription,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Motors Local Market listings for dealership subscribers with a premium subscription. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketPremiumSubscription</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// See the <a href="
	// http://pages.ebay.com/help/sell/formats.html#market" target="_blank">Motors Local Market listing help topic</a> for more information.
	//
	LocalMarketPremiumSubscription *LocalMarketPremiumSubscriptionDefinitionType `xml:"LocalMarketPremiumSubscription,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Motors Local Market listings for dealerships without a subscription. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketNonSubscription</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// See the <a href="
	// http://pages.ebay.com/help/sell/formats.html#market" target="_blank">Motors Local Market listing help topic</a> for more information.
	//
	LocalMarketNonSubscription *LocalMarketNonSubscriptionDefinitionType `xml:"LocalMarketNonSubscription,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressEnabled *ExpressEnabledDefinitionType `xml:"ExpressEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressPicturesRequired *ExpressPicturesRequiredDefinitionType `xml:"ExpressPicturesRequired,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressConditionRequired *ExpressConditionRequiredDefinitionType `xml:"ExpressConditionRequired,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites require a minimum reserve price for an auction item. This feature is only applicable to auction listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>MinimumReservePrice</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	MinimumReservePrice *MinimumReservePriceDefinitionType `xml:"MinimumReservePrice,omitempty"`

	//
	// This field is deprecated.
	//
	TransactionConfirmationRequestEnabled *TCREnabledDefinitionType `xml:"TransactionConfirmationRequestEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the seller to provide contact information at listing time for a classified ad listing. This feature is only applicable to classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>SellerContactDetailsEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	SellerContactDetailsEnabled *SellerContactDetailsEnabledDefinitionType `xml:"SellerContactDetailsEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	StoreInventoryEnabled *StoreInventoryEnabledDefinitionType `xml:"StoreInventoryEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	SkypeMeTransactionalEnabled *SkypeMeTransactionalEnabledDefinitionType `xml:"SkypeMeTransactionalEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	SkypeMeNonTransactionalEnabled *SkypeMeNonTransactionalEnabledDefinitionType `xml:"SkypeMeNonTransactionalEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support allow dealership subscribers with a regular subscription to specify local market radius for Motors Local Market listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalListingDistancesRegular</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// See the <a href="
	// http://pages.ebay.com/help/sell/formats.html#market" target="_blank">Motors Local Market listing help topic</a> for more information.
	//
	LocalListingDistancesRegular *LocalListingDistancesRegularDefinitionType `xml:"LocalListingDistancesRegular,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow dealership subscribers with a specialty subscription to specify local market radius for Motors Local Market listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalListingDistancesSpecialty</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// See the <a href="
	// http://pages.ebay.com/help/sell/formats.html#market" target="_blank">Motors Local Market listing help topic</a> for more information.
	//
	LocalListingDistancesSpecialty *LocalListingDistancesSpecialtyDefinitionType `xml:"LocalListingDistancesSpecialty,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow dealership subscribers without a subscription to specify local market radius for Motors Local Market listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalListingDistancesNonSubscription</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// See the <a href="
	// http://pages.ebay.com/help/sell/formats.html#market" target="_blank">Motors Local Market listing help topic</a> for more information.
	//
	LocalListingDistancesNonSubscription *LocalListingDistancesNonSubscriptionDefinitionType `xml:"LocalListingDistancesNonSubscription,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the display of acceptable payment methods for classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdPaymentMethodEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdPaymentMethodEnabled *ClassifiedAdPaymentMethodEnabledDefinitionType `xml:"ClassifiedAdPaymentMethodEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the display of shipping service options for classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdShippingMethodEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdShippingMethodEnabled *ClassifiedAdShippingMethodEnabledDefinitionType `xml:"ClassifiedAdShippingMethodEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer feature for classified ad listings. The Best Offer feature allows buyers and sellers to negotiate the price of the item. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdBestOfferEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdBestOfferEnabled *ClassifiedAdBestOfferEnabledDefinitionType `xml:"ClassifiedAdBestOfferEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support counter offers to Best Offers for classified ad listings. The Best Offer feature allows buyers and sellers to negotiate the price of the item, and once a Best Offer price is proposed, the seller can send the buyer a counter offer, and a buyer may even send another counter offer to the seller's counter offer. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdCounterOfferEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdCounterOfferEnabled *ClassifiedAdCounterOfferEnabledDefinitionType `xml:"ClassifiedAdCounterOfferEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Decline feature for classified ad listings. The Best Offer Auto-Decline feature allows a seller to set a lower threshold dollar value on a listing, and any Best Offer amount below this amount is automatically declined by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdAutoDeclineEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdAutoDeclineEnabled *ClassifiedAdAutoDeclineEnabledDefinitionType `xml:"ClassifiedAdAutoDeclineEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of a phone number when contacting the
	// seller about a classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdContactByPhoneEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdContactByPhoneEnabled *ClassifiedAdContactByPhoneEnabledDefinitionType `xml:"ClassifiedAdContactByPhoneEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of an email address when contacting the seller about a classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdContactByEmailEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdContactByEmailEnabled *ClassifiedAdContactByEmailEnabledDefintionType `xml:"ClassifiedAdContactByEmailEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites require at least one form of safe payment. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>SafePaymentRequired</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br><br>
	// For the US, Canada and Australia sites, users registered after January
	// 17, 2007 are required to offer at least one safe payment method (i.e.
	// PayPal/PaisaPay, or one of the credit cards specified in
	// <b>Item.PaymentMethods</b>).
	// <br><br>
	// If a seller has a <code>SafePaymentExempt</code> status, they are exempt from the
	// requirement to offer at least one safe payment method when listing
	// an item on a site that has the safe payment requirement.
	// <br>
	// The safe payment requirement also applies to two-category listings that have
	// one ship-to or available-to location in the US, Canada, or Australia. The
	// French Canadian (CAFR) site is a special case, because listings on the CAFR
	// site with ship-to or available-to locations in Canada do not require a Safe
	// Payment method, yet listings on the CAFR site with ship-to or available-to
	// locations in the US or Australia do require a Safe Payment method.
	// <br><br>
	// The Business and Industrial, Motors, Real Estate, and Mature Audiences
	// categories, and all listings that don't support the <b>Item.PaymentMethods</b> field are
	// exempt from this requirement. Therefore, listings in those categories do not
	// require a safe payment method.
	//
	SafePaymentRequired *SafePaymentRequiredDefinitionType `xml:"SafePaymentRequired,omitempty"`

	//
	// This field is deprecated.
	//
	ClassifiedAdPayPerLeadEnabled *ClassifiedAdPayPerLeadEnabledDefinitionType `xml:"ClassifiedAdPayPerLeadEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of Item Specifics in listings. Item Specifics are typical aspects that items in a specific  category tend to have, and they allow sellers to provide descriptive details of an item in a structured manner. For example, in a jewelry category, sellers might describe lockets with Item Specifics name-value pairs like "Chain Length=18 in." and "Main Shape=Heart", or in a Washers & Dryers category, sellers might include "Type=Top-Loading". This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ItemSpecificsEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ItemSpecificsEnabled *ItemSpecificsEnabledDefinitionType `xml:"ItemSpecificsEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of PaisaPay Full Escrow as a payment method. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>PaisaPayFullEscrowEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	PaisaPayFullEscrowEnabled *PaisaPayFullEscrowEnabledDefinitionType `xml:"PaisaPayFullEscrowEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	ISBNIdentifierEnabled *ISBNIdentifierEnabledDefinitionType `xml:"ISBNIdentifierEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	UPCIdentifierEnabled *UPCIdentifierEnabledDefinitionType `xml:"UPCIdentifierEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	EANIdentifierEnabled *EANIdentifierEnabledDefinitionType `xml:"EANIdentifierEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of Brand and MPN (Manufacturer Part Number) to identify a product. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>BrandMPNIdentifierEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	BrandMPNIdentifierEnabled *BrandMPNIdentifierEnabledDefinitionType `xml:"BrandMPNIdentifierEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Accept feature. The Best Offer Auto-Accept feature allows a seller to set a threshold dollar value on a listing, and any Best Offer amount at or above this amount is automatically accepted by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>BestOfferAutoAcceptEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The Best Offer feature is now available for auction listings on the following sites: US, Canada, UK, Germany, Australia, France, Italy, and Spain. However, sellers must choose between offering Best Offer or Buy It Now on an auction listing, as both features cannot be enabled on the same auction listing.
	// </span>
	//
	BestOfferAutoAcceptEnabled *BestOfferAutoAcceptEnabledDefinitionType `xml:"BestOfferAutoAcceptEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Accept feature for classified ad listings. The Best Offer Auto-Accept feature allows a seller to set a threshold dollar value on a listing, and any Best Offer amount at or above this amount is automatically accepted by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdAutoAcceptEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	ClassifiedAdAutoAcceptEnabled *ClassifiedAdAutoAcceptEnabledDefinitionType `xml:"ClassifiedAdAutoAcceptEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support cross-border trading on the US and CA (English) sites. In cross-border trading, also referred to as International site visibility, a seller is able to post a listing to an additional eBay site for an additional small fee. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>CrossBorderTradeNorthAmericaEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br/><br/>
	// See the <a href="
	// http://pages.ebay.com/help/sell/globalexposure.html" target="_blank">Getting exposure on international sites</a> help page for more information on cross-border trade.
	//
	CrossBorderTradeNorthAmericaEnabled *CrossBorderTradeNorthAmericaEnabledDefinitionType `xml:"CrossBorderTradeNorthAmericaEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support cross-border trading on the UK and Ireland sites. In cross-border trading, also referred to as International site visibility, a seller is able to post a listing to an additional eBay site for an additional small fee. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>CrossBorderTradeGBEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	// <br/><br/>
	// See the <a href="
	// http://pages.ebay.com/help/sell/globalexposure.html" target="_blank">Getting exposure on international sites</a> help page for more information on cross-border trade.
	//
	CrossBorderTradeGBEnabled *CrossBorderTradeGBEnabledDefinitionType `xml:"CrossBorderTradeGBEnabled,omitempty"`

	//
	// This field is for future use, as cross-border trading (aka International site visibility) is not currently supported for Australia.
	//
	CrossBorderTradeAustraliaEnabled *CrossBorderTradeAustraliaEnabledDefinitionType `xml:"CrossBorderTradeAustraliaEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support PayPal Purchase Protection.  This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>PayPalBuyerProtectionEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	PayPalBuyerProtectionEnabled *PayPalBuyerProtectionEnabledDefinitionType `xml:"PayPalBuyerProtectionEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	BuyerGuaranteeEnabled *BuyerGuaranteeEnabledDefinitionType `xml:"BuyerGuaranteeEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	CombinedFixedPriceTreatmentEnabled *CombinedFixedPriceTreatmentEnabledDefinitionType `xml:"CombinedFixedPriceTreatmentEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	GalleryFeaturedDurations *ListingEnhancementDurationDefinitionType `xml:"GalleryFeaturedDurations,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support PaisaPay Full Escrow workflow timeline.This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>INEscrowWorkflowTimeline</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	INEscrowWorkflowTimeline *INEscrowWorkflowTimelineDefinitionType `xml:"INEscrowWorkflowTimeline,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites require that PayPal is included as an accepted payment method. This is not applicable to classified ad listings, as payment is handled by the buyer and seller, and not eBay. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>PayPalRequired</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	PayPalRequired *PayPalRequiredDefinitionType `xml:"PayPalRequired,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support motor vehicle classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProAdFormatEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProAdFormatEnabled *EBayMotorsProAdFormatEnabledDefinitionType `xml:"eBayMotorsProAdFormatEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of a phone number when contacting the
	// seller about a motor vehicle classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProContactByPhoneEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProContactByPhoneEnabled *EBayMotorsProContactByPhoneEnabledDefinitionType `xml:"eBayMotorsProContactByPhoneEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of multiple phone numbers for the seller for a motor vehicle classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProContactByPhoneEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProPhoneCount *EBayMotorsProPhoneCountDefinitionType `xml:"eBayMotorsProPhoneCount,omitempty"`

	//
	// TThis field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of an address when contacting the
	// seller about a motor vehicle classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProContactByAddressEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProContactByAddressEnabled *EBayMotorsProContactByAddressEnabledDefinitionType `xml:"eBayMotorsProContactByAddressEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of multiple street address for the seller for a motor vehicle classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProContactByAddressEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProStreetCount *EBayMotorsProStreetCountDefinitionType `xml:"eBayMotorsProStreetCount,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of a company name when contacting the
	// seller about a motor vehicle classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProCompanyNameEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProCompanyNameEnabled *EBayMotorsProCompanyNameEnabledDefinitionType `xml:"eBayMotorsProCompanyNameEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of an email address when contacting the seller about a motor vehicle classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProContactByEmailEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProContactByEmailEnabled *EBayMotorsProContactByEmailEnabledDefinitionType `xml:"eBayMotorsProContactByEmailEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer feature is for motor vehicle classified ad listings. The Best Offer feature allows buyers and sellers to negotiate the price of the item. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProBestOfferEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProBestOfferEnabled *EBayMotorsProBestOfferEnabledDefinitionType `xml:"eBayMotorsProBestOfferEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Accept feature for motor vehicle classified ad listings. The Best Offer Auto-Accept feature allows a seller to set a threshold dollar value on a listing, and any Best Offer amount at or above this amount is automatically accepted by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProAutoAcceptEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProAutoAcceptEnabled *EBayMotorsProAutoAcceptEnabledDefinitionType `xml:"eBayMotorsProAutoAcceptEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Decline feature for motor vehicle classified ad listings. The Best Offer Auto-Decline feature allows a seller to set a lower threshold dollar value on a listing, and any Best Offer amount below this amount is automatically declined by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProAutoDeclineEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a> fields.
	//
	EBayMotorsProAutoDeclineEnabled *EBayMotorsProAutoDeclineEnabledDefinitionType `xml:"eBayMotorsProAutoDeclineEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the display of acceptable payment methods for motor vehicle classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProPaymentMethodCheckOutEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	EBayMotorsProPaymentMethodCheckOutEnabled *EBayMotorsProPaymentMethodCheckOutEnabledDefinitionType `xml:"eBayMotorsProPaymentMethodCheckOutEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the display of shipping service options for motor vehicle classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProShippingMethodEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	EBayMotorsProShippingMethodEnabled *EBayMotorsProShippingMethodEnabledDefinitionType `xml:"eBayMotorsProShippingMethodEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support counter offers to Best Offers for motor vehicle classified ad listings. The Best Offer feature allows buyers and sellers to negotiate the price of the item, and once a Best Offer price is proposed, the seller can send the buyer a counter offer, and a buyer may even send another counter offer to the seller's counter offer. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProCounterOfferEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	EBayMotorsProCounterOfferEnabled *EBayMotorsProCounterOfferEnabledDefinitionType `xml:"eBayMotorsProCounterOfferEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the seller to provide contact information at listing time for a motor vehicle classified ad listing. This feature is only applicable to motor vehicle classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>eBayMotorsProSellerContactDetailsEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	EBayMotorsProSellerContactDetailsEnabled *EBayMotorsProSellerContactDetailsEnabledDefinitionType `xml:"eBayMotorsProSellerContactDetailsEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Motors Local Market listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketAdFormatEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketAdFormatEnabled *LocalMarketAdFormatEnabledDefinitionType `xml:"LocalMarketAdFormatEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the use of a phone number when contacting the
	// seller about a Motors Local Market listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketContactByPhoneEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketContactByPhoneEnabled *LocalMarketContactByPhoneEnabledDefinitionType `xml:"LocalMarketContactByPhoneEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the use of multiple phone numbers for the seller for a Motors Local Market listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketPhoneCount</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketPhoneCount *LocalMarketPhoneCountDefinitionType `xml:"LocalMarketPhoneCount,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the use of an address when contacting the
	// seller about a Motors Local Market listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketContactByAddressEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketContactByAddressEnabled *LocalMarketContactByAddressEnabledDefinitionType `xml:"LocalMarketContactByAddressEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the use of multiple street address for the seller for a Motors Local Market listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketStreetCount</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketStreetCount *LocalMarketStreetCountDefinitionType `xml:"LocalMarketStreetCount,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of a company name when contacting the
	// seller about a Motors Local Market listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketCompanyNameEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketCompanyNameEnabled *LocalMarketCompanyNameEnabledDefinitionType `xml:"LocalMarketCompanyNameEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of an email address when contacting the seller about a Motors Local Market listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketContactByEmailEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketContactByEmailEnabled *LocalMarketContactByEmailEnabledDefinitionType `xml:"LocalMarketContactByEmailEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer feature is for Motors Local Market listings. The Best Offer feature allows buyers and sellers to negotiate the price of the item. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketBestOfferEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketBestOfferEnabled *LocalMarketBestOfferEnabledDefinitionType `xml:"LocalMarketBestOfferEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Accept feature for Motors Local Market listings. The Best Offer Auto-Accept feature allows a seller to set a threshold dollar value on a listing, and any Best Offer amount at or above this amount is automatically accepted by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketAutoAcceptEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketAutoAcceptEnabled *LocalMarketAutoAcceptEnabledDefinitionType `xml:"LocalMarketAutoAcceptEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Best Offer Auto-Decline feature for Motors Local Market listings. The Best Offer Auto-Accept feature allows a seller to set a threshold dollar value on a listing, and any Best Offer amount at or above this amount is automatically accepted by the eBay system. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketAutoDeclineEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketAutoDeclineEnabled *LocalMarketAutoDeclineEnabledDefinitionType `xml:"LocalMarketAutoDeclineEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the display of acceptable payment methods for Motors Local Market listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketPaymentMethodCheckOutEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketPaymentMethodCheckOutEnabled *LocalMarketPaymentMethodCheckOutEnabledDefinitionType `xml:"LocalMarketPaymentMethodCheckOutEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the display of shipping service options for Motors Local Market listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketShippingMethodEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketShippingMethodEnabled *LocalMarketShippingMethodEnabledDefinitionType `xml:"LocalMarketShippingMethodEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support counter offers to Best Offers for Motors Local Market listings. The Best Offer feature allows buyers and sellers to negotiate the price of the item, and once a Best Offer price is proposed, the seller can send the buyer a counter offer, and a buyer may even send another counter offer to the seller's counter offer. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketCounterOfferEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketCounterOfferEnabled *LocalMarketCounterOfferEnabledDefinitionType `xml:"LocalMarketCounterOfferEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the seller to provide contact information at listing time for Motors Local Market listings. This feature is only applicable to motor vehicle classified ad listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>LocalMarketSellerContactDetailsEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	LocalMarketSellerContactDetailsEnabled *LocalMarketSellerContactDetailsEnabledDefinitionType `xml:"LocalMarketSellerContactDetailsEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of multiple phone numbers for the seller for a classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdPhoneCount</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ClassifiedAdPhoneCount *ClassifiedAdPhoneCountDefinitionType `xml:"ClassifiedAdPhoneCount,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of an address when contacting the
	// seller about a classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdContactByAddressEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ClassifiedAdContactByAddressEnabled *ClassifiedAdContactByAddressEnabledDefinitionType `xml:"ClassifiedAdContactByAddressEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of multiple street addresses for the seller for a classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdStreetCount</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ClassifiedAdStreetCount *ClassifiedAdStreetCountDefinitionType `xml:"ClassifiedAdStreetCount,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of a company name when contacting the
	// seller about a classified ad listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ClassifiedAdCompanyNameEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ClassifiedAdCompanyNameEnabled *ClassifiedAdCompanyNameEnabledDefinitionType `xml:"ClassifiedAdCompanyNameEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	SpecialitySubscription *SpecialitySubscriptionDefinitionType `xml:"SpecialitySubscription,omitempty"`

	//
	// This field is deprecated.
	//
	RegularSubscription *RegularSubscriptionDefinitionType `xml:"RegularSubscription,omitempty"`

	//
	// This field is deprecated.
	//
	PremiumSubscription *PremiumSubscriptionDefinitionType `xml:"PremiumSubscription,omitempty"`

	//
	// This field is deprecated.
	//
	NonSubscription *NonSubscriptionDefinitionType `xml:"NonSubscription,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of return policies in listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ReturnPolicyEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ReturnPolicyEnabled *ReturnPolicyEnabledDefinitionType `xml:"ReturnPolicyEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of a stated handling time in listings. The handling time is the maximum number of business days the seller
	// commits to for preparing an item to be shipped after receiving a
	// cleared payment. The seller's handling time does not include the
	// shipping time (the carrier's transit time). This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>HandlingTimeEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	HandlingTimeEnabled *HandlingTimeEnabledDefinitionType `xml:"HandlingTimeEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	PayPalRequiredForStoreOwner *PayPalRequiredForStoreOwnerDefinitionType `xml:"PayPalRequiredForStoreOwner,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the quantity of a listing to be revised during the life of the listing. This feature is not applicable to auction listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ReviseQuantityAllowed</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ReviseQuantityAllowed *ReviseQuantityAllowedDefinitionType `xml:"ReviseQuantityAllowed,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow the price of a listing to be revised during the life of the listing. This feature is not applicable to auction listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>RevisePriceAllowed</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	RevisePriceAllowed *RevisePriceAllowedDefinitionType `xml:"RevisePriceAllowed,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support extended listing durations for eBay Business Sellers with eBay Stores. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>RevisePriceAllowed</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	StoreOwnerExtendedListingDurationsEnabled *StoreOwnerExtendedListingDurationsEnabledDefinitionType `xml:"StoreOwnerExtendedListingDurationsEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	StoreOwnerExtendedListingDurations *StoreOwnerExtendedListingDurationsDefinitionType `xml:"StoreOwnerExtendedListingDurations,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the display of acceptable payment methods in listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>PaymentMethod</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	PaymentMethod *PaymentMethodDefinitionType `xml:"PaymentMethod,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the applicable max cap per shipping cost for shipping service group1. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>Group1MaxFlatShippingCost</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	Group1MaxFlatShippingCost *Group1MaxFlatShippingCostDefinitionType `xml:"Group1MaxFlatShippingCost,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the applicable max cap per shipping cost for shipping service group2. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>Group2MaxFlatShippingCost</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	Group2MaxFlatShippingCost *Group2MaxFlatShippingCostDefinitionType `xml:"Group2MaxFlatShippingCost,omitempty"`

	//
	// TThis field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites allow for the applicable max cap per shipping cost for shipping service group3. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>Group3MaxFlatShippingCost</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	Group3MaxFlatShippingCost *Group3MaxFlatShippingCostDefinitionType `xml:"Group3MaxFlatShippingCost,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites do not impose a maximum flat-rate shipping cost if the item is being shipped internationally. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>MaxFlatShippingCostCBTExempt</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	MaxFlatShippingCostCBTExempt *MaxFlatShippingCostCBTExemptDefinitionType `xml:"MaxFlatShippingCostCBTExempt,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites do not impose a maximum flat-rate shipping cost. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>MaxFlatShippingCost</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	MaxFlatShippingCost *MaxFlatShippingCostDefinitionType `xml:"MaxFlatShippingCost,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support multiple-variation listings for some categories. Multiple-variation listings contain items that are logically the same product, but that vary in color, size, or other aspect. For example, a particular brand and style of shirt could be available in different sizes and colors, such as "large blue" and "medium black" variations. This feature is only applicable to fixed-price listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>VariationsEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	VariationsEnabled *VariationsEnabledDefinitionType `xml:"VariationsEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeConversionEnabled *AttributeConversionEnabledFeatureDefinitionType `xml:"AttributeConversionEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support free, automatic upgrades for Gallery Plus for some categories. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>FreeGalleryPlusEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	FreeGalleryPlusEnabled *FreeGalleryPlusEnabledDefinitionType `xml:"FreeGalleryPlusEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support a free Picture Pack upgrade for some categories. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>FreePicturePackEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	FreePicturePackEnabled *FreePicturePackEnabledDefinitionType `xml:"FreePicturePackEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Parts Compatibility for some Parts & Accessories categories. Parts compatibility allows a seller to show a list of all the vehicles that a part or accessory is compatible with in a listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ItemCompatibilityEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ItemCompatibilityEnabled *ItemCompatibilityEnabledDefinitionType `xml:"ItemCompatibilityEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites define a maximum limit for the number of compatible applications for items listed with parts compatibilities by application. Parts compatibility allows a seller to show a list of all the vehicles that a part or accessory is compatible with in a listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>MaxItemCompatibility</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	MaxItemCompatibility *MaxItemCompatibilityDefinitionType `xml:"MaxItemCompatibility,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites define a minimum amount for the number of compatible applications for items listed with parts compatibilities by application. Parts compatibility allows a seller to show a list of all the vehicles that a part or accessory is compatible with in a listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>MinItemCompatibility</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	MinItemCompatibility *MinItemCompatibilityDefinitionType `xml:"MinItemCompatibility,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the textual description of an item's condition at listing time. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ConditionEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ConditionEnabled *ConditionEnabledDefinitionType `xml:"ConditionEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support Condition IDs to specify an item's condition at listing time. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ConditionValues</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ConditionValues *ConditionValuesDefinitionType `xml:"ConditionValues,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support value categories. A Value category will typically have lower listing fees or another eBay promotion. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ValueCategory</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ValueCategory *ValueCategoryDefinitionType `xml:"ValueCategory,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the creation of listings through the specification of Global Trade Identification Numbers (GTINs) like UPC, ISBN, EAN, or Brand/MPN combination. If a GTIN is matched to a product in eBay product catalog, a listing will automatically be created using the eBay catalog product's images, product aspects, description, and title. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ProductCreationEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ProductCreationEnabled *ProductCreationEnabledDefinitionType `xml:"ProductCreationEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the EAN product identifying feature. This field will be returned as long as <b>EANEnabled</b> is included as a <b>FeatureID</b> value in the call request or no <b>FeatureID</b> values are passed into the call request.
	// <br>
	// <br>
	// To verify if a specific eBay site supports the EAN product identifying feature (for most categories), look for a <code>true</code> value in the <b>SiteDefaults.EANEnabled</b> field.
	// <br>
	// <br>
	// To verify if a specific category on a specific eBay site supports the EAN product identifying feature, pass in a <b>CategoryID</b> value in the request, and then look for a <code>true</code> value in the <b>EANEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	//
	EANEnabled *EANEnabledDefinitionType `xml:"EANEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the ISBN product identifying feature. This field will be returned as long as <b>ISBNEnabled</b> is included as a <b>FeatureID</b> value in the call request or no <b>FeatureID</b> values are passed into the call request.
	// <br>
	// <br>
	// To verify if a specific eBay site supports the ISBN product identifying feature (for most categories), look for a <code>true</code> value in the <b>SiteDefaults.ISBNEnabled</b> field.
	// <br>
	// <br>
	// To verify if a specific category on a specific eBay site supports the ISBN product identifying feature, pass in a <b>CategoryID</b> value in the request, and then look for a <code>true</code> value in the <b>ISBNEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	//
	ISBNEnabled *ISBNEnabledDefinitionType `xml:"ISBNEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the UPC product identifying feature. This field will be returned as long as <b>UPCEnabled</b> is included as a <b>FeatureID</b> value in the call request or no <b>FeatureID</b> values are passed into the call request.
	// <br>
	// <br>
	// To verify if a specific eBay site supports the UPC product identifying feature (for most categories), look for a <code>true</code> value in the <b>SiteDefaults.UPCEnabled</b> field.
	// <br>
	// <br>
	// To verify if a specific category on a specific eBay site supports the UPC product identifying feature, pass in a <b>CategoryID</b> value in the request, and then look for a <code>true</code> value in the <b>UPCEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	//
	UPCEnabled *UPCEnabledDefinitionType `xml:"UPCEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Parts Compatibility feature for motor vehicles. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>CompatibleVehicleType</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	CompatibleVehicleType *CompatibleVehicleTypeDefinitionType `xml:"CompatibleVehicleType,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites define a maximum limit for the number of fine-grained item compatibilities that can be applied to a listing. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>MaxGranularFitmentCount</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	MaxGranularFitmentCount *MaxGranularFitmentCountDefinitionType `xml:"MaxGranularFitmentCount,omitempty"`

	//
	// This field is deprecated.
	//
	PaymentOptionsGroup *PaymentOptionsGroupEnabledDefinitionType `xml:"PaymentOptionsGroup,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of category groups in shipping business policies. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ShippingProfileCategoryGroup</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ShippingProfileCategoryGroup *ProfileCategoryGroupDefinitionType `xml:"ShippingProfileCategoryGroup,omitempty"`

	//
	// TThis field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of category groups in payment business policies. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>PaymentProfileCategoryGroup</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	PaymentProfileCategoryGroup *ProfileCategoryGroupDefinitionType `xml:"PaymentProfileCategoryGroup,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of category groups in return business policies. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>ReturnPolicyProfileCategoryGroup</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	ReturnPolicyProfileCategoryGroup *ProfileCategoryGroupDefinitionType `xml:"ReturnPolicyProfileCategoryGroup,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of the VIN (Vehicle Identification Number) field to identify a motor vehicle and create a listing is supported. VINs are supported on the US, Canada, Canada-French, and Australia sites. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>VINSupported</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	VINSupported *VINSupportedDefinitionType `xml:"VINSupported,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of the VRM (Vehicle Registration Mark) field to identify a motor vehicle and create a listing is supported. VRMs are only supported on the UK site. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>VRMSupported</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	VRMSupported *VRMSupportedDefinitionType `xml:"VRMSupported,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support seller-provided titles in listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>SellerProvidedTitleSupported</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	SellerProvidedTitleSupported *SellerProvidedTitleSupportedDefinitionType `xml:"SellerProvidedTitleSupported,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support deposits/down payments for motor vehicle listings. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>DepositSupported</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	DepositSupported *DepositSupportedDefinitionType `xml:"DepositSupported,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Global Shipping Program (GSP) as the method for shipping orders internationally. This field will not be returned if one or more <b>FeatureID</b> fields are included in the call request and <code>GlobalShippingEnabled</code> is not one of the values passed into those <a href="types/FeatureIDCodeType.html">FeatureID</a>
	//
	GlobalShippingEnabled *GlobalShippingEnabledDefinitionType `xml:"GlobalShippingEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Boat and Motorcycle Parts Compatibility feature. This field will be returned as long as <b>AdditionalCompatibilityEnabled</b> is included as a <b>FeatureID</b> value in the call request or no <a href="types/FeatureIDCodeType.html">FeatureID</a> values are passed into the call request.
	// <br>
	// <br>
	// To verify if a specific eBay site supports Boat or Motorcycle Parts Compatibility (for most categories), look for a <code>true</code> value in the <b>SiteDefaults.AdditionalCompatibilityEnabled</b> field.
	// <br>
	// <br>
	// To verify if a specific category on a specific eBay site supports Boat and Motorcycle Parts Compatibility, pass in a
	// <b>CategoryID</b> value in the request, and then look for a
	// <code>true</code>
	// <br> value in the <b>AdditionalCompatibilityEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	//
	AdditionalCompatibilityEnabled *AdditionalCompatibilityEnabledDefinitionType `xml:"AdditionalCompatibilityEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the Click and Collect feature. This field will be returned as long as <b>PickupDropOffEnabled</b> is included as a <b>FeatureID</b> value in the call request or no <a href="types/FeatureIDCodeType.html">FeatureID</a> values are passed into the call request.
	// <br>
	// <br>
	// To verify if a specific eBay site supports the Click and Collect feature (for most categories), look for a <code>true</code> value in the <b>SiteDefaults.PickupDropOffEnabled</b> field.
	// <br>
	// <br>
	// To verify if a specific category on a specific eBay site supports the Click and Collect feature, pass in a <b>CategoryID</b> value in the request, and then look for a <code>true</code> value in the <b>PickupDropOffEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> For Click and Collect eligible sellers, the Click and Collect feature can only be enabled at the account level, and then each of the seller's listings within an Click and Collect enabled category will be automatically evaluated for Click and Collect eligibility.
	// </span>
	//
	PickupDropOffEnabled *PickupDropOffEnabledDefinitionType `xml:"PickupDropOffEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support digital gift card listings. This field will be returned as long as <b>DigitalGoodDeliveryEnabled</b> is included as a <b>FeatureID</b> value in the call request or no <a href="types/FeatureIDCodeType.html">FeatureID</a> values are passed into the call request.
	// <br>
	// <br>
	// To verify if a specific eBay site supports digital gift card listings (for most categories), look for a <code>true</code> value in the <b>SiteDefaults.DigitalGoodDeliveryEnabled</b> field.
	// <br>
	// <br>
	// To verify if a specific category on a specific eBay site supports digital gift card listings, pass in a <b>CategoryID</b> value in the request, and then look for a <code>true</code> value in the <b>DigitalGoodDeliveryEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	// <br>
	// <br>
	// Digital gift cards are currently only supported on the US site. There are some restrictions when it comes to selling gift cards, including the following:
	// <ul>
	// <li>Each seller can only have one gift card listing at any given time </li>
	// <li>The maximum dollar value of the gift card may not exceed 500.00</li>
	// <li>Prepaid credit cards from American Express, Discover, MasterCard, or Visa are not allowed</li>
	// </ul>
	// For more information on eBay's Gift Card policy, see the <a href="
	// http://pages.ebay.com/help/policies/gift.html" target="_blank">Gift cards policy Help page</a>.
	//
	DigitalGoodDeliveryEnabled *DigitalGoodDeliveryEnabledDefinitionType `xml:"DigitalGoodDeliveryEnabled,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of an eBay Product ID (e.g. ePID) in an Add/Revise/Relist API call to identify which motorcycles and/or scooters are compatible with a motor vehicle part or accessory. ePIDs can only be used to identify motorcycles and scooters on the Germany and UK sites. This field will be returned as long as <b>EpidSupported</b> is included as a <b>FeatureID</b> value in the call request or no <a href="types/FeatureIDCodeType.html">FeatureID</a> values are passed into the call request.
	// <br/><br/>
	// For more information on using an ePID to identify a compatible motorcycle or scooter through an Add/Revise/Relist API call on the Germany or UK site, see the documentation for the <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request.Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.NameValueList</a> container.
	//
	EpidSupported *EpidSupportedDefinitionType `xml:"EpidSupported,omitempty"`

	//
	// TThis field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites support the use of a K Type vehicle number in an Add/Revise/Relist API call to identify which cars and/or trucks are compatible with a motor vehicle part or accessory. K type vehicle numbers can only be used to identify cars and trucks on the Germany site. This field will be returned as long as <b>KTypeSupported</b> is included as a <b>FeatureID</b> value in the call request or no <a href="types/FeatureIDCodeType.html">FeatureID</a> values are passed into the call request.
	// <br/><br/>
	// For more information on using a K Type vehicle number to identify a compatible car or truck through an Add/Revise/Relist API call on the Germany site, see the documentation for the <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request.Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.NameValueList</a> container.
	//
	KTypeSupported *KTypeSupportedDefinitionType `xml:"KTypeSupported,omitempty"`

	//
	// This field is returned as an empty element (a boolean value is not returned) if one or more eBay API-enabled sites requires association with an eBay Catalog product for some categories when listing/revising/relisting an item.
	// <br><br>
	// Until Phase 2 of the Product-Based Shopping Experience (PBSE) rolls out later in 2018, this field will only be returned in Sandbox. For more information on PBSE, see the <a href="
	// https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> page.
	// <br><br>
	// Will not be returned if one or more <a href="types/FeatureIDCodeType.html">FeatureID</a> values are used in the call request, and one of those values does not include <code>ProductRequiredEnabled</code>.
	//
	ProductRequiredEnabled *ProductRequiredEnabledDefinitionType `xml:"ProductRequiredEnabled,omitempty"`

	//
	// If present, this flag indicates the seller can set how to handle domestic returns.
	//
	DomesticReturnsAcceptedValues *DomesticReturnsAcceptedDefinitionType `xml:"DomesticReturnsAcceptedValues,omitempty"`

	//
	// If present, this flag indicates the seller can set how to handle international returns.
	//
	InternationalReturnsAcceptedValues *InternationalReturnsAcceptedDefinitionType `xml:"InternationalReturnsAcceptedValues,omitempty"`

	//
	// If present, this flag indicates the seller can set the time duration for domestic returns.
	//
	DomesticReturnsDurationValues *DomesticReturnsDurationDefinitionType `xml:"DomesticReturnsDurationValues,omitempty"`

	//
	// If present, this flag indicates the seller can set the time duration for international returns.
	//
	InternationalReturnsDurationValues *InternationalReturnsDurationDefinitionType `xml:"InternationalReturnsDurationValues,omitempty"`

	//
	// If present, this flag indicates the seller can set who pays the shipping for domestic returns.
	//
	DomesticReturnsShipmentPayeeValues *DomesticReturnsShipmentPayeeDefinitionType `xml:"DomesticReturnsShipmentPayeeValues,omitempty"`

	//
	// If present, this flag indicates the seller can set who pays the shipping for international returns.
	//
	InternationalReturnsShipmentPayeeValues *InternationalReturnsShipmentPayeeDefinitionType `xml:"InternationalReturnsShipmentPayeeValues,omitempty"`

	//
	// If present, this flag indicates the seller can set the method they use to refund domestic returns.
	//
	DomesticRefundMethodValues *DomesticRefundMethodCodeType `xml:"DomesticRefundMethodValues,omitempty"`

	//
	// If present, this flag indicates the seller can set the method they use to refund international returns.
	//
	InternationalRefundMethodValues *InternationalRefundMethodCodeType `xml:"InternationalRefundMethodValues,omitempty"`

	//
	// If present, this flag indicates the seller can choose to describe the return policy they offer (providing return-policy details is required in some EU countries).
	//
	ReturnPolicyDescriptionEnabled *ReturnPolicyDescriptionEnabledDefinitionType `xml:"ReturnPolicyDescriptionEnabled,omitempty"`
}

type FeatureEligibilityType struct {

	//
	// Indicates whether the seller is eligible to create auction listings enabled with the 'Buy It Now' option. A value of <code>true</code> means that the seller is eligible; a value of <code>false</code> indicates that they are not eligible.
	//
	QualifiesForBuyItNow bool `xml:"QualifiesForBuyItNow,omitempty"`

	//
	// Indicates whether the seller is eligible to specify the 'Buy It Now' option for multiple-quantity listings. A value of <code>true</code> means that the seller is eligible; a value of <code>false</code> indicates that they are not eligible.
	//
	QualifiesForBuyItNowMultiple bool `xml:"QualifiesForBuyItNowMultiple,omitempty"`

	//
	// Indicates whether the seller is eligible to create fixed-price listings with a one-day listing duration. A value of <code>true</code> means that the seller is eligible; a value of <code>false</code> indicates that the seller is not eligible. Note that this field only controls user eligibility. The listing type and category must support this feature for this field to be applicable.
	//
	QualifiedForFixedPriceOneDayDuration bool `xml:"QualifiedForFixedPriceOneDayDuration,omitempty"`

	//
	// Indicates whether or not the seller is eligible to create
	// multiple-variation, fixed-price listings.
	//
	QualifiesForVariations bool `xml:"QualifiesForVariations,omitempty"`

	//
	// Indicates whether the seller is eligible to create an auction listing with a one-day duration. Limitation: the Adult-Only and Motor Vehicle categories do not support one-day auctions, so the seller cannot create one-day auction listings in these categories, even if the seller has the eligibility.
	//
	QualifiedForAuctionOneDayDuration bool `xml:"QualifiedForAuctionOneDayDuration,omitempty"`
}

type FeeType struct {

	//
	// This is the name of the listing feature, such as <code>ListingFee</code>, <code>SubtitleFee</code>, or <code>BoldFee</code>.
	//
	Name string `xml:"Name,omitempty"`

	//
	// Amount of the fee that eBay will charge the member for the associated listing
	// feature.
	//
	Fee *AmountType `xml:"Fee,omitempty"`

	//
	// This field exists in the response when the user has selected a feature that
	// participates in a promotional discount.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// Verify calls might not return the PromotionalDiscount fee in the response.
	// </span>
	//
	PromotionalDiscount *AmountType `xml:"PromotionalDiscount,omitempty"`
}

type FeedbackCommentArrayType struct {

	//
	// This comment is for use as feedback for buyers. No more than ten (10)
	// comments can be stored.
	//
	StoredCommentText []string `xml:"StoredCommentText,omitempty"`
}

type FeedbackDetailArrayType struct {

	//
	// This container consists of detailed information for a Feedback entry on a specific order line item. For Feedback entries that were left for the buyer by the seller, some of the fields in this container will not be returned to users who were not involved in the transaction as either the buyer or seller.
	//
	FeedbackDetail []*FeedbackDetailType `xml:"FeedbackDetail,omitempty"`
}

type FeedbackDetailType struct {

	//
	// The eBay User ID of the user who left the Feedback entry.
	//
	CommentingUser *UserIDType `xml:"CommentingUser,omitempty"`

	//
	// This enumeration value is the Feedback Rating Star of the user indicated in the <b>CommentingUser</b> field. See <a href="types/FeedbackRatingStarCodeType.html">FeedbackRatingStarCodeType</a> for the full list of Feedback Rating Stars, and the Feedback score ranges associated with those stars.
	//
	FeedbackRatingStar *FeedbackRatingStarCodeType `xml:"FeedbackRatingStar,omitempty"`

	//
	// This integer value is the Feedback score of the user indicated in the  <b>CommentingUser</b> field.
	//
	CommentingUserScore int32 `xml:"CommentingUserScore,omitempty"`

	//
	// This free-form text is the actual comment that the commenting user left for their order partner. The Feedback comment's purpose is to explain, clarify, or justify the Feedback rating specified
	// in the <b>CommentType</b> field.
	// <br><br>
	// The comment is returned as text in the language that the comment was originally left
	// in. This comment will still be displayed even if a submitted Feedback entry is
	// withdrawn.
	//
	CommentText string `xml:"CommentText,omitempty"`

	//
	// This timestamp (in GMT) indicates the date/time that the Feedback entry was submitted to eBay.
	//
	CommentTime time.Time `xml:"CommentTime,omitempty"`

	//
	// This value indicates the rating of the Feedback left by the user identified in the <b>CommentingUser</b> field.
	// <br><br>
	// A <b>Positive</b> rating increases a user's Feedback score, a <b>Negative</b> rating decreases a user's Feedback score, and a <b>Neutral</b> rating does not affect a user's Feedback score.
	// <br><br>
	// Sellers cannot leave <b>Neutral</b> or <b>Negative</b> ratings for buyers.
	//
	CommentType *CommentTypeCodeType `xml:"CommentType,omitempty"`

	//
	// This free-form text is the comment that the recipient of the Feedback may leave in response or rebuttal to the Feedback. Responses to Feedback comments cannot be submitted or edited via the API.
	//
	FeedbackResponse string `xml:"FeedbackResponse,omitempty"`

	//
	// This free-form text is the explanation that a user can give to a response. Follow-ups to Feedback comments cannot be submitted or edited via the API.
	//
	Followup string `xml:"Followup,omitempty"`

	//
	// The unique identifier of the eBay listing associated with the Feedback entry. For Feedback entries that were left for the buyer by the seller, an <b>ItemID</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Indicates whether the recipient of the Feedback entry is the buyer
	// or the seller for the corresponding order line item.
	//
	Role *TradingRoleCodeType `xml:"Role,omitempty"`

	//
	// The title of the item listing for which Feedback was provided. The title is returned as CDATA. This value can be returned as part of the Detailed Seller Ratings feature. Not returned if a listing ended more than 90 days ago. For Feedback entries that were left for the buyer by the seller, an <b>ItemTitle</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	ItemTitle string `xml:"ItemTitle,omitempty"`

	//
	// The purchase price for the item that was associated with the Feedback entry.
	// This value can be returned as part of the Detailed Seller Ratings feature.
	// Not returned if a listing ended more than 90 days ago. For Feedback entries that were left for the buyer by the seller, an <b>ItemPrice</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	ItemPrice *AmountType `xml:"ItemPrice,omitempty"`

	//
	// Unique identifier for the Feedback entry.
	//
	FeedbackID string `xml:"FeedbackID,omitempty"`

	//
	// Unique identifier for an eBay order line item for which the Feedback entry was left. This field is not returned if the Feedback entry was left for an auction listing, since all auction listings have a <b>TransactionID</b> value of 0. For Feedback entries that were left for the buyer by the seller, a <b>TransactionID</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This boolean value indicates whether or not eBay replaced the Feedback comment with a message that the Feedback comment was removed.
	//
	CommentReplaced bool `xml:"CommentReplaced,omitempty"`

	//
	// This boolean value indicates whether or not eBay replaced the response to the Feedback comment with a message that the response to the Feedback comment was removed.
	//
	ResponseReplaced bool `xml:"ResponseReplaced,omitempty"`

	//
	// This boolean value indicates whether or not eBay replaced the follow-up to the Feedback comment with a message that the follow-up to the Feedback comment was removed.
	//
	FollowUpReplaced bool `xml:"FollowUpReplaced,omitempty"`

	//
	// This boolean value indicates whether or not the Feedback entry will affect the user's Feedback score. Only Feedback left by verified users can count toward the aggregate score of another user. If a unverified user leaves a Feedback entry, then later becomes verified, that Feedback entry will still have no affect on the recipient user's Feedback score. Or, if a user is verified and at some later date changes to unverified status, the Feedback entry left while the user was verified remains in effect.
	//
	Countable bool `xml:"Countable,omitempty"`

	//
	// This flag indicates whether or not a Feedback entry was revised (rating was
	// changed).
	//
	FeedbackRevised bool `xml:"FeedbackRevised,omitempty"`

	//
	// The unique identifier for an eBay order line item. Its value is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs. For Feedback entries that were left for the buyer by the seller, an <b>OrderLineItemID</b> value will not be returned to a user that was not involved in the transaction as either the buyer or seller.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type FeedbackInfoType struct {

	//
	// Textual comment that explains, clarifies, or justifies the Feedback rating specified
	// in <b>CommentType</b>. This field is required in <b>CompleteSale</b> if the
	// <b>FeedbackInfo</b> container is used.
	// <br><br>
	// This comment will still be displayed even if submitted Feedback is withdrawn.
	//
	CommentText string `xml:"CommentText,omitempty"`

	//
	// This value indicates the Feedback rating for the user specified in the
	// <b>TargetUser</b> field. This field is required in <b>CompleteSale</b> if the
	// <b>FeedbackInfo</b> container is used.
	// <br><br>
	// A Positive rating increases the user's Feedback score, a Negative rating decreases
	// the user's Feedback score, and a Neutral rating does not affect the user's Feedback
	// score. eBay users also have the right to withdraw feedback for whatever reason.
	// <br><br>
	// Sellers cannot leave Neutral or Negative ratings for buyers.
	//
	CommentType *CommentTypeCodeType `xml:"CommentType,omitempty"`

	//
	// This eBay User ID identifies the recipient user for whom the feedback is being left.
	// This field is required in <b>CompleteSale</b> if the
	// <b>FeedbackInfo</b> container is used.
	//
	TargetUser *UserIDType `xml:"TargetUser,omitempty"`
}

type FeedbackPeriodArrayType struct {

	//
	// Contains one feedback statistic giving length of the period being reported
	// (e.g. last 7 days prior to the call), and total number of feedback entries
	// (of the type given by the container, e.g. positive feedback) submitted during
	// the indicated period. Returned if no detail level is specified.
	//
	FeedbackPeriod []*FeedbackPeriodType `xml:"FeedbackPeriod,omitempty"`
}

type FeedbackPeriodType struct {

	//
	// This integer value indicates the total number of days in the time period for the Feedback count. Typically, the returned time periods are 30 days, 180 days, and 365 days. This field is always returned with the <b>FeedbackPeriod</b> container.
	//
	PeriodInDays int32 `xml:"PeriodInDays,omitempty"`

	//
	// This integer value indicates the total number of Feedback entries that occurred within the time period specified in the <b>PeriodInDays</b> field. This field is always returned with the <b>FeedbackPeriod</b> container.
	//
	Count int32 `xml:"Count,omitempty"`
}

type FeedbackRequirementsType struct {
	Value bool

	//
	// This type is deprecated.
	//
	Minimum string `xml:"minimum,attr,omitempty"`
}

type FeedbackSummaryType struct {

	//
	// Bid retractions count, for multiple predefined time periods preceding
	// the call. Returned if no detail level is specified.
	//
	BidRetractionFeedbackPeriodArray *FeedbackPeriodArrayType `xml:"BidRetractionFeedbackPeriodArray,omitempty"`

	//
	// Negative feedback entries count, for multiple predefined time periods preceding
	// the call. Returned if no detail level is specified.
	//
	NegativeFeedbackPeriodArray *FeedbackPeriodArrayType `xml:"NegativeFeedbackPeriodArray,omitempty"`

	//
	// Neutral feedback entries count, for multiple predefined time periods preceding
	// the call. Returned if no detail level is specified.
	//
	NeutralFeedbackPeriodArray *FeedbackPeriodArrayType `xml:"NeutralFeedbackPeriodArray,omitempty"`

	//
	// Positive feedback entries count, for multiple predefined time periods
	// preceding the call. Returned if no detail level is specified.
	//
	PositiveFeedbackPeriodArray *FeedbackPeriodArrayType `xml:"PositiveFeedbackPeriodArray,omitempty"`

	//
	// Total feedback score, for multiple predefined time periods preceding the
	// call. Returned if no detail level is specified.
	//
	TotalFeedbackPeriodArray *FeedbackPeriodArrayType `xml:"TotalFeedbackPeriodArray,omitempty"`

	//
	// Number of neutral comments received from suspended users. Returned if no
	// detail level is specified.
	//
	NeutralCommentCountFromSuspendedUsers int32 `xml:"NeutralCommentCountFromSuspendedUsers,omitempty"`

	//
	// Total number of negative Feedback comments, including weekly repeats. Returned if no detail level is specified.
	//
	UniqueNegativeFeedbackCount int32 `xml:"UniqueNegativeFeedbackCount,omitempty"`

	//
	// Total number of positive Feedback comments, including weekly repeats. Returned if no detail level is specified.
	//
	UniquePositiveFeedbackCount int32 `xml:"UniquePositiveFeedbackCount,omitempty"`

	//
	// Total number of neutral Feedback comments, including weekly repeats. Returned if no detail level is specified.
	//
	UniqueNeutralFeedbackCount int32 `xml:"UniqueNeutralFeedbackCount,omitempty"`

	//
	// Container for information about detailed seller ratings (DSRs)
	// that buyers have left for a seller.
	// Sellers have access to the number of ratings they've received, as well as
	// to the averages of DSRs they've received in each
	// DSR area (i.e., to the average of ratings in the item-description area, etc.).
	// The DSR feature is available on the United Kingdom site
	// and on the following other sites: AU (site ID 15), BEFR (site ID 23),
	// BENL (site ID 123), FR (site ID 71), IE (site ID 205), IN (site ID 203),
	// IT (site ID 101), and PL (site ID 212). The DSR feature is available on the other
	// API-enabled country sites, including the US site (site ID 0).
	//
	SellerRatingSummaryArray *SellerRatingSummaryArrayType `xml:"SellerRatingSummaryArray,omitempty"`

	//
	// Container for information about 1 year feedback metric as seller.
	//
	SellerRoleMetrics *SellerRoleMetricsType `xml:"SellerRoleMetrics,omitempty"`

	//
	// Container for information about 1 year feedback metric as buyer.
	//
	BuyerRoleMetrics *BuyerRoleMetricsType `xml:"BuyerRoleMetrics,omitempty"`
}

type FeesType struct {

	//
	// A <b>Fee</b> container is returned for each listing fee associated with listing an item. Each <b>Fee</b> container consists of the fee type, the amount of the fee, and any applicable eBay promotional discount on that listing fee. A <b>Fee</b> container is returned for each listing feature, even if the associated cost is 0.
	//
	Fee []*FeeType `xml:"Fee,omitempty"`
}

type FlatRateInsuranceRangeCostType struct {

	//
	// This field is deprecated.
	//
	FlatRateInsuranceRange *FlatRateInsuranceRangeCodeType `xml:"FlatRateInsuranceRange,omitempty"`

	//
	// This field is deprecated.
	//
	InsuranceCost *AmountType `xml:"InsuranceCost,omitempty"`
}

type FlatShippingDiscountType struct {

	//
	// The type of discount or rule that is being used by the profile.
	// The value corresponding to the selected rule is set in the same-named field
	// of <b>FlatShippingDiscount.DiscountProfile</b>.
	//
	DiscountName *DiscountNameCodeType `xml:"DiscountName,omitempty"`

	//
	// Details of this particular flat-rate shipping discount profile. If the value of <b>ModifyActionCode</b> is <code>Modify</code>, all details of the new version of the profile must be provided. If <b>ModifyActionCode</b> is <code>Delete</code>, <b>DiscountProfileID</b> is required, <b>MappingDiscountProfileID</b> is optional, and all other fields of <b>DiscountProfile</b> are ignored.
	//
	DiscountProfile []*DiscountProfileType `xml:"DiscountProfile,omitempty"`
}

type FlatShippingPreferencesType struct {

	//
	// This field is deprecated.
	//
	AmountPerAdditionalItem *AmountType `xml:"AmountPerAdditionalItem,omitempty"`

	//
	// This field is deprecated.
	//
	DeductionAmountPerAdditionalItem *AmountType `xml:"DeductionAmountPerAdditionalItem,omitempty"`

	//
	// This field is deprecated.
	//
	FlatRateInsuranceRangeCost *FlatRateInsuranceRangeCostType `xml:"FlatRateInsuranceRangeCost,omitempty"`

	//
	// This field is deprecated.
	//
	FlatShippingRateOption *FlatShippingRateOptionCodeType `xml:"FlatShippingRateOption,omitempty"`

	//
	// This field is deprecated.
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`
}

type FreeGalleryPlusEnabledDefinitionType struct {
}

type FreePicturePackEnabledDefinitionType struct {
}

type GetRecommendationsRequestContainerType struct {

	//
	// This field is deprecated.
	//
	ListingFlow *ListingFlowCodeType `xml:"ListingFlow,omitempty"`

	//
	// This field is deprecated.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// This field is deprecated.
	//
	RecommendationEngine []*RecommendationEngineCodeType `xml:"RecommendationEngine,omitempty"`

	//
	// This field is deprecated.
	//
	Query string `xml:"Query,omitempty"`

	//
	// This field is deprecated.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`

	//
	// This field is deprecated.
	//
	DeletedField []string `xml:"DeletedField,omitempty"`

	//
	// This field is deprecated.
	//
	ExcludeRelationships bool `xml:"ExcludeRelationships,omitempty"`

	//
	// This field is deprecated.
	//
	IncludeConfidence bool `xml:"IncludeConfidence,omitempty"`
}

type GetRecommendationsResponseContainerType struct {

	//
	// This field is deprecated.
	//
	ListingAnalyzerRecommendations *ListingAnalyzerRecommendationsType `xml:"ListingAnalyzerRecommendations,omitempty"`

	//
	// This field is deprecated.
	//
	SIFFTASRecommendations *SIFFTASRecommendationsType `xml:"SIFFTASRecommendations,omitempty"`

	//
	// This field is deprecated.
	//
	PricingRecommendations *PricingRecommendationsType `xml:"PricingRecommendations,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeRecommendations *AttributeRecommendationsType `xml:"AttributeRecommendations,omitempty"`

	//
	// This field is deprecated.
	//
	ProductRecommendations *ProductRecommendationsType `xml:"ProductRecommendations,omitempty"`

	//
	// This field is deprecated.
	//
	CorrelationID string `xml:"CorrelationID,omitempty"`

	//
	// This field is deprecated.
	//
	Recommendations *RecommendationsType `xml:"Recommendations,omitempty"`

	//
	// This field is deprecated.
	//
	ProductListingDetails *ProductListingDetailsType `xml:"ProductListingDetails,omitempty"`

	//
	// This field is deprecated.
	//
	Title string `xml:"Title,omitempty"`
}

type GiftSummaryType struct {

	//
	// This free-form text contains the message that the purchaser of the digital gift card left for the recipient of the gift card.
	// <br><br>
	// <b>For GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, real data is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	Message string `xml:"Message,omitempty"`
}

type GlobalShippingEnabledDefinitionType struct {
}

type Group1MaxFlatShippingCostDefinitionType struct {
}

type Group2MaxFlatShippingCostDefinitionType struct {
}

type Group3MaxFlatShippingCostDefinitionType struct {
}

type GroupValidationRulesType struct {

	//
	// This value indicates the minimum number of the corresponding Product Identifiers are required to be specified at listing time. If two Product Identifier types are returned, and the <b>MinRequired</b> value is the <code>2</code>, the seller will be required to use both Product Identifier types at listing time.  If the <b>MinRequired</b> value was <code>1</code>, only one of the two Product Identifier types would be required, but the seller could use them both if they wanted. If the <b>MinRequired</b> value was <code>0</code>, one or both of those Product Identifier types could be used, but they would not be required.
	//
	MinRequired int32 `xml:"MinRequired,omitempty"`
}

type HandlingTimeEnabledDefinitionType struct {
}

type HistogramEntryType struct {

	//
	// This field is deprecated.
	//
	Count int32 `xml:"Count,omitempty"`

	//
	// This field is deprecated.
	//
	Id string `xml:"id,attr,omitempty"`

	//
	// This field is deprecated.
	//
	Name string `xml:"name,attr,omitempty"`
}

type HomePageFeaturedEnabledDefinitionType struct {
}

type INEscrowWorkflowTimelineDefinitionType struct {
}

type ISBNEnabledDefinitionType struct {
}

type ISBNIdentifierEnabledDefinitionType struct {
}

type InsuranceDetailsType struct {
}

type IntegratedMerchantCreditCardInfoType struct {

	//
	// Indicates a site on which a seller has a payment gateway account (and thus
	// a site on which the seller can use the IntegratedMerchantCreditCard payment method).
	//
	SupportedSite []*SiteCodeType `xml:"SupportedSite,omitempty"`
}

type InternationalRefundMethodCodeType struct {

	//
	// Defines the available options the seller has for handling international returns in the specified marketplace and category.
	//
	InternationalRefundMethod []*ReturnsRefundMethodCodeType `xml:"InternationalRefundMethod,omitempty"`
}

type InternationalRefundMethodDefinitionType struct {
}

type InternationalReturnsAcceptedCodeType struct {

	//
	// Defines the available options the seller has for accepting international returns in the specified marketplace and category.
	//
	InternationalReturnsAccepted []*ReturnsAcceptedCodeType `xml:"InternationalReturnsAccepted,omitempty"`
}

type InternationalReturnsAcceptedDefinitionType struct {
}

type InternationalReturnsDurationCodeType struct {

	//
	// Defines the available options for the return durations for international returns in the specified marketplace and category. This is the time the buyer has to initiate a return once they receive the item.
	//
	InternationalReturnsDuration []*ReturnsDurationCodeType `xml:"InternationalReturnsDuration,omitempty"`
}

type InternationalReturnsDurationDefinitionType struct {
}

type InternationalReturnsShipmentPayeeCodeType struct {

	//
	// Defines the available options for who pays the return shipping costs for international returns in the specified marketplace and category.
	//
	InternationalReturnsShipmentPayee []*ReturnsShipmentPayeeCodeType `xml:"InternationalReturnsShipmentPayee,omitempty"`
}

type InternationalReturnsShipmentPayeeDefinitionType struct {
}

type InternationalShippingServiceOptionsType struct {

	//
	// An international shipping service being offered by the seller to ship an item to
	// a buyer. For a list of valid values, call <b>GeteBayDetails</b>
	// with <b>DetailName</b> set to <b>ShippingServiceDetails</b>.
	// <br/><br/>
	// To view the full list of International shipping service options in the response,
	// look for the <b>ShippingService</b> fields in the <b>ShippingServiceDetails</b> containers that
	// contain a <b>InternationalService</b> = <code>true</code> field, as this indicates that the <b>ShippingService</b>
	// value is an International shipping service option.
	// <br/><br/>
	// The <b>ShippingServiceDetails.ValidForSellingFlow</b> flag must
	// also be present. Otherwise, that particular shipping service option is no longer
	// valid and cannot be offered to buyers through a listing.
	// <br><br>
	// For flat and calculated shipping.
	//
	ShippingService string `xml:"ShippingService,omitempty"`

	//
	// The base cost of shipping the item using the shipping service specified in the <b>ShippingService</b> field.
	// In the case of a multiple-quantity, fixed-price listing, the <b>ShippingServiceAdditionalCost</b> field shows the cost to ship each additional item if the buyer purchases multiple quantity of the same line item.
	// <br>
	// <br>
	// When returned by <b>GetItemShipping</b>, it includes the packaging and
	// handling cost. For flat and calculated shipping.
	// <br>
	// <br>
	// If a shipping service has been specified (even LocalPickup), <b>GetItem</b> returns
	// the shipping service cost, even if the cost is zero. Otherwise, cost is not
	// returned.
	// <br>
	// <br>
	// If this is for calculated shipping for a listing that has not
	// yet ended, note that the cost cannot be determined until the listing
	// has ended and the buyer has specified a postal code.
	// <br>
	// <br>
	// For <b>GetItemShipping</b>, promotional shipping savings is reflected in the cost, if
	// applicable. If the promotional shipping option is lower than other shipping
	// services being offered, the savings is reflected in the returned shipping
	// cost.
	// The shipping service named Promotional Shipping Service (or whatever is
	// the localized name for it) is included among the shipping services.
	// If the promotional shipping cost is lower than the cost of other shipping
	// services being offered, it is presented first in the list. (The LOWEST shipping
	// service cost is always presented first, regardless of whether there is
	// promotional shipping.)
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// The cost of shipping each additional item if the same buyer purchases multiple quantity of the same line item. This field is required when creating a multiple-quantity, fixed-price listing. Generally, the seller will give the buyer a shipping discount if that buyer purchases multiple quantity of the item, so this value should usually be less than the value set for <b>ShippingServiceCost</b>.
	// <br/><br/>
	// The value of this field can even be set to <code>0</code> if the seller wants to encourage buyers to buy multiple quantity of the item, or it could be that the seller can fit multiple quantities of the line item in a single shipping package, so the seller is just passing this shipping savings onto the buyer.  This field is not applicable for single-quantity listings.
	//
	ShippingServiceAdditionalCost *AmountType `xml:"ShippingServiceAdditionalCost,omitempty"`

	//
	// This integer value controls the order (relative to other shipping services) in
	// which the corresponding <b>ShippingService</b> will appear in the View Item and
	// Checkout page. Sellers can specify up to five international shipping services
	// (with five <b>InternationalShippingServiceOption</b> containers), so valid values are
	// 1, 2, 3, 4, and 5. A shipping service with a <b>ShippingServicePriority</b> value of <code>1</code>
	// appears at the top. Conversely, a shipping service with a
	// <b>ShippingServicePriority</b> value of 5 appears at the bottom of a list of five
	// shipping service options. If the Global Shipping Program is enabled on the listing for international shipping, only four additional shipping services may be specified.
	// <br><br>
	// This field is applicable to Flat and Calculated shipping.
	//
	ShippingServicePriority int32 `xml:"ShippingServicePriority,omitempty"`

	//
	// An international location or region to where the item seller will ship the item.
	// <br/><br/>
	// Use <b>GeteBayDetails</b> with <b>DetailName</b> set to
	// <b>ShippingLocationDetails</b> to determine which locations are valid per site.
	// In the <b>GeteBayDetails</b> response, look for the ShippingLoca<b>tionDetails.ShippingLocation</b> fields.
	// <br/><br/>
	// For the <b>AddItem</b> family of calls, this field is required if any international shipping service is specified.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, <b>ShipToLocation</b> fields will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, <b>ShipToLocation</b> fields are only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	ShipToLocation []string `xml:"ShipToLocation,omitempty"`

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	ShippingInsuranceCost *AmountType `xml:"ShippingInsuranceCost,omitempty"`

	//
	// The total cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This amount is calculated and supplied for each item by the international shipping provider when a buyer views the item properties.
	//
	ImportCharge *AmountType `xml:"ImportCharge,omitempty"`

	//
	// The last time of day that an order using the specified shipping service will be accepted by the seller. The cut off time applies and is returned only when the <strong>ShippingService</strong> field contains the name of a qualifying time-sensitive shipping service, such as <code>eBayNowImmediateDelivery</code>.
	// <br><br>
	// The cut off time is set by eBay and determined in part by the policies and locations of the seller and the shipping carrier.
	//
	ShippingServiceCutOffTime time.Time `xml:"ShippingServiceCutOffTime,omitempty"`
}

type InventoryFeesType struct {

	//
	// The unique identifier of the listing being changed. <br>
	// <br> The <b>ReviseInventoryStatus</b> response includes a separate
	// set of fees for each item that was successfully revised.<br>
	// <br>
	// Use the <b>ItemID</b> to correlate the Fees data with the Inventory Status data in the response.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Contains the data for one fee (such as name and amount).
	//
	Fee []*FeeType `xml:"Fee,omitempty"`
}

type InventoryStatusType struct {

	//
	// This value is the seller-defined SKU value of the item being revised.
	// <br>
	// <br>
	// For a single-variation listing, either the <b>ItemID</b> of the listing or the <b>SKU</b> value of the item (if it exists) is required, and which one to use will depend on the value of the <b>InventoryTrackingMethod</b> setting. If the value of <b>InventoryTrackingMethod</b> is <code>ItemID</code>, the <b>ItemID</b> field should be used. If the value of <b>InventoryTrackingMethod</b> is <code>SKU</code>, the <b>SKU</b> field should be used. <code>ItemID</code> is the default value of <b>InventoryTrackingMethod</b>, and its value can only be set/changed to <code>SKU</code> through either an <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b> call.
	// <br>
	// <br>
	// For a multiple-variation listing, the <b>SKU</b> value of the item variation is required in order to identify a specific item variation. An <b>ItemID</b> field is also required if the <b>InventoryTrackingMethod</b> value is set to <code>ItemID</code>. However, if the <b>InventoryTrackingMethod</b> value is set to <code>SKU</code>, only the <b>SKU</b> value of the item variation is needed to identify a specific item variation. Note that a seller-defined <b>SKU</b> value is required when a seller creates a multiple-variation listing, regardless of whether they decide to track inventory by Item ID or SKU.
	// <br>
	// <br>
	// The <b>SKU</b> field is always returned in the response, and if a SKU value doesn't exist for a single-variation listing, it is returned as an empty tag.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// The unique identifier of the listing being revised.
	// <br>
	// <br>
	// For a single-variation listing, either the <b>ItemID</b> of the listing or the <b>SKU</b> value of the item (if it exists) is required, and which one to use will depend on the value of the <b>InventoryTrackingMethod</b> setting. If the value of <b>InventoryTrackingMethod</b> is <code>ItemID</code>, the <b>ItemID</b> field should be used. If the value of <b>InventoryTrackingMethod</b> is <code>SKU</code>, the <b>SKU</b> field should be used. <code>ItemID</code> is the default value of <b>InventoryTrackingMethod</b>, and its value can only be set/changed to <code>SKU</code> through either an <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b> call.
	// <br>
	// <br>
	// For a multiple-variation listing, the <b>SKU</b> value of the item variation is required in order to identify a specific item variation. An <b>ItemID</b> field is also required if the <b>InventoryTrackingMethod</b> value is set to <code>ItemID</code>. However, if the <b>InventoryTrackingMethod</b> value is set to <code>SKU</code>, only the <b>SKU</b> value of the item variation is needed to identify a specific item variation. Note that a seller-defined <b>SKU</b> value is required when a seller creates a multiple-variation listing, regardless of whether they decide to track inventory by Item ID or SKU.
	// <br>
	// <br>
	// Please note that the same <b>ItemID</b> value can be used
	// multiple times in the same call if you revise several
	// item variations from the same multiple-variation listing.
	// <br>
	// <br>
	// The <b>ItemID</b> field is always returned in the response, even if an <b>ItemID</b> value was not included in the request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This field is used to set the revised price of the listing (or of a
	// variation within a multiple-variation listing).
	// <br>
	// <br>
	// In each <b>InventoryStatus</b> container, either <b>StartPrice</b> or <b>Quantity</b> (or both) are required.
	// <br>
	// <br>
	// The <b>StartPrice</b> field is always returned in the response and reveals the current price of the item or item variation, regardless of whether the price was changed or not through a <b>StartPrice</b> field in the call request.
	//
	StartPrice *AmountType `xml:"StartPrice,omitempty"`

	//
	// This field is used to set the revised quantity of the listing (or of a
	// variation within a multiple-variation listing).
	// <br>
	// <br>
	// In each <b>InventoryStatus</b> container, either <b>StartPrice</b> or <b>Quantity</b> (or both) are required.
	// <br>
	// <br>
	// The <b>Quantity</b> field is always returned in the response, regardless of whether the quantity was changed or not through a <b>Quantity</b> field in the call request. However, the <b>Quantity</b> field in the response is actually a total of the quantity available for sale plus the quantity already sold for the item or item variation. For example, suppose the item or item variation originally had a quantity of 10, and then a quantity of 8 was sold. Now, you restock your inventory, and you pass in a quantity of 10 in the <b>ReviseInventoryStatus</b> request. In this case, the response of this <b>ReviseInventoryStatus</b> call would show a quantity of 18 (10 available + 8 sold). To determine the quantity available, use the <b>GetItem</b> or <b>GetSellerList</b> call, and subtract the <b>SellingStatus.QuantitySold</b> value from the <b>Quantity</b> value. Or, you can also use the <b>GetMyeBaySelling</b> call, search for the correct item or item variation in the response by <b>ItemID</b> or <b>SKU</b> value, and then look at the <b>QuantityAvailable</b> field for that item or item variation.
	// <br> <br>
	// It is a good idea to maintain an adequate quantity available for fixed-price GTC listings to prevent the search rankings from dropping. Best Match search ranking is based on buyer activity, and one of the factors affecting search ranking for fixed-price listings is the recent sales score. Fixed-price items that are selling the fastest are given a relative lift in search results.
	//
	Quantity int32 `xml:"Quantity,omitempty"`
}

type ItemArrayType struct {

	//
	// Contains the data properties that define one item listing. <b>GetSellerEvents</b> and
	// <b>GetSellerList</b> only return items if any are available for the seller within the
	// time window specified in the request.<br>
	// <br>
	// Some optional fields are only returned if the seller defined them for the
	// item. Some fields are only returned under particular conditions specified in
	// the individual field descriptions. For example, a buyer's contact information
	// might only be returned if the member who is making the request (as identified
	// in the <b>eBayAuthToken</b>) has an order relationship with that buyer. <br>
	// <br>
	// For calls that support detail levels, the set of fields returned is also
	// controlled by the value of <b>DetailLevel</b> in the request. For some calls, other
	// parameters in the request can also control the data returned for each item.
	// For example, <b>GranularityLevel</b> controls the fields to return for each item in
	// the <b>GetSellerList</b>
	// response.
	//
	Item []*ItemType `xml:"Item,omitempty"`
}

type ItemBestOffersArrayType struct {

	//
	// A collection of details about the Best Offers received for a specific item. Empty if there are no Best Offers. Includes the buyer and seller messages only if the <code>ReturnAll</code> detail level is used.
	//
	ItemBestOffers []*ItemBestOffersType `xml:"ItemBestOffers,omitempty"`
}

type ItemBestOffersType struct {

	//
	// Indicates whether the eBay user is in the Buyer or
	// Seller role for the corresponding Best Offer.
	//
	Role *TradingRoleCodeType `xml:"Role,omitempty"`

	//
	// All Best Offers for the item according to the filter or
	// Best Offer ID (or both) used in the input. The buyer and
	// seller messages are returned only if the detail level is
	// defined. Includes the buyer and seller message only if
	// detail level <code>ReturnAll</code> is used.
	// Only returned if a Best Offer has been made.
	//
	BestOfferArray *BestOfferArrayType `xml:"BestOfferArray,omitempty"`

	//
	// The item for which Best Offers are being returned.
	// Only returned if a Best Offer has been made.
	//
	Item *ItemType `xml:"Item,omitempty"`
}

type ItemBidDetailsType struct {

	//
	// The unique identifier of an item listed on the eBay site.
	// For <b>GetAllBidders</b>, an anonymous user ID is returned.
	// <br><br>
	// Since a bidder's user information is anonymous, this tag will contain the real ID value only for that bidder, and the seller of an item that the user is
	// bidding on. For all other users, the real ID value will be replaced with the anonymous value, according to these rules:
	// <br><br>
	// When bidding on items listed on the US site: UserID is replaced with the value "a****b" where a and b are random characters from the UserID. For example, if the UserID = IBidALot, it might be displayed as, "I****A". 	<br>
	// Note that in this format, the anonymous bidder ID stays the same for every auction.
	// <br><br>
	// (<b>GetMyeBayBuying</b> only) when bidding on items listed on the US site: UserID is replaced with the value "a****b" where a and b are random characters from the UserID.
	// <br><br>
	// When bidding on items listed on the the UK and AU sites: UserID is replaced with the value "Bidder X" where X is a number indicating the order of that user's first bid. For example, if the user was the third bidder,
	// UserID = Bidder 3. <br>
	// Note that in this format, the anonymous bidder ID stays the same for a given auction, but is different for different auctions. For example, a bidder who is the third and then the seventh bidder in an auction will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder on a different auction, the bidder will be listed for that auction as "Bidder 1",
	// not "Bidder 3".
	// <br><br>
	// (<b>GetMyeBayBuying</b> only) when bidding on items listed on the UK and AU sites: UserID is replaced with the string "High Bidder".
	// <br><br>
	// (<b>GetBestOffers</b> only) - all sites: The last part of the user ID is replaced with asterisks for users that submit best offers on an item. The seller of the item will be able to see the full User ID.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Numeric ID for the category that the item belongs to.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// The total number of bids the user placed on the item.
	//
	BidCount int32 `xml:"BidCount,omitempty"`

	//
	// The eBay ID of the seller who listed the item.
	// <br><br>
	// This will be returned with the anonymous
	// value "Seller X", where X indicates where the seller falls
	// in the sequence of sellers that the user has purchased items
	// from. For example, if the seller is the third seller that
	// the user has purchased items from, the value "Seller 3" is
	// returned.
	//
	SellerID *UserIDType `xml:"SellerID,omitempty"`

	//
	// The time at which the user placed the last bid on the item.
	//
	LastBidTime time.Time `xml:"LastBidTime,omitempty"`
}

type ItemCompatibilityEnabledDefinitionType struct {
}

type ItemCompatibilityListType struct {

	//
	// Details for an individual compatible application, consisting of the name-value pair and related parts compatibility notes. When revising or relisting, the <b>Delete</b> field can be used to delete individual parts compatibility nodes.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> For the <b>GetItem</b> call, <strong>Compatibility</strong> includes only parts compatibility details that were specified manually; that is, they do not correspond to an eBay catalog product. To retrieve parts compatibility details that <em>do</em> correspond to eBay catalog products, use the eBay Product API's <b>getProductCompatibilities</b> call.
	// </span>
	//
	Compatibility []*ItemCompatibilityType `xml:"Compatibility,omitempty"`

	//
	// Set this value to true to delete or replace all existing parts compatibility information when you revise or relist an item. If set to true, all existing item parts compatibility nodes are removed from the listing. If new item compatibilities are specified in the request, they replace the removed compatibilities.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> To ensure that buyer expectations are upheld, you cannot delete or replace an item parts compatibility list if the listing has bids or if the auction ends within 12 hours.
	// </span>
	//
	ReplaceAll bool `xml:"ReplaceAll,omitempty"`
}

type ItemCompatibilityType struct {

	//
	// Removes individual parts compatibility nodes from the compatibility list. Set
	// to <code>true</code> within the compatibility to delete.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// This field can only be used with <b>Resive</b> calls or when revising a template.
	// </span>
	// If the listing has bids or ends within 12 hours, you cannot delete item parts
	// compatibilities.
	//
	Delete bool `xml:"Delete,omitempty"`

	//
	// A name-value pair describing a single compatible application. The
	// allowed names and values are specific to the primary category in which the
	// item is listed. For example, when listing in a Parts & Accessories
	// category, where the applications are vehicles, the allowed names might include
	// Year, Make, and Model, and the values would correspond to specific vehicles in
	// eBay's catalog. For details and examples, see the
	// <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/CompatibleParts-Listing.html#SpecifyingPartsCompatibilityManually"
	// target="_blank">Features Guide</a>.
	// <br><br>
	// The eBay Germany, UK, Austria, France, Italy, and Spain sites support the use of <em>K type</em> vehicle numbers to specify vehicle
	// parts compatibility. To use a K type number, set the <b>Name</b> field to "<code>KType</code>"
	// and set the corresponding <b>Value</b> field to the appropriate K type number.
	// <br><br>
	// The DE and UK eBay sites also support the use of an <em>eBay Product ID</em> (or <em>ePID</em>)
	// number/value pair to specify motorcycle and scooter parts compatibility (currently, only DE supports scooter parts
	// compatibily). To use an ePID number to specify part compatibilities, set the <b>Name</b>
	// field to "<code>ePID</code>" and the corresponding <b>Value</b> field to the ePID
	// number that matches the motorcycle for the part(s) you are listing. Motorcycle ePID numbers are provided
	// by the <em>Master Motorcycle List</em> (MML) file, which contains the ePID numbers and
	// their associated vehicle mappings). For motorcycles, an ePID number contains the vehicle make, model, CCM,
	// year, and submodel data. Please use the following links to obtain the DE and UK MML data files:
	// <br><br>
	// - DE seller help page: http://verkaeuferportal.ebay.de/fahrzeugteile-und-zubehoer-optimal-einstellen<br>
	// - UK seller help page: http://pages.ebay.co.uk/help/sell/contextual/master-motorcycle-list-manually.html
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`

	//
	// The seller may optionally enter any notes pertaining to the parts compatibility being specified.
	// Use this field to specify the placement of the part on a vehicle or the type of vehicle a part fits.
	//
	CompatibilityNotes string `xml:"CompatibilityNotes,omitempty"`
}

type ItemIDArrayType struct {

	//
	// A unique identifier for an item listing.
	// <br/><br/>
	// For <b>SetPromotionalSaleListings</b>, the seller passes in the
	// <b>ItemID</b> value for each listing that he/she wishes to become
	// part of the Promotional Sale identified by the
	// <b>PromotionalSaleID</b> value.
	// <br/><br/>
	// For <b>GetPromotionalSaleDetails</b>, each listing returned in the
	// response is a part of the Promotional Sale identified by the
	// <b>PromotionalSaleID</b> value.
	//
	ItemID []*ItemIDType `xml:"ItemID,omitempty"`
}

type ItemListCustomizationType struct {

	//
	// Specifies whether or not to include the container in the response.
	// Set the value to true to return the default set of fields for the
	// container. Not needed if you set a value for at least one other field
	// in the container.
	// <br><br>
	// If you set DetailLevel to ReturnAll, set Include to false to exclude
	// the container from the response.
	//
	Include bool `xml:"Include,omitempty"`

	//
	// Specifies the listing type of items in the returned list.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// Specifies the sort order of the result. Default is Ascending.
	//
	Sort *ItemSortTypeCodeType `xml:"Sort,omitempty"`

	//
	// Specifies the time period during which an item was won or lost. Similar to the
	// period drop-down menu in the My eBay user interface. For example, to return
	// the items won or lost in the last week, specify a DurationInDays of 7.
	//
	DurationInDays int32 `xml:"DurationInDays,omitempty"`

	//
	// Specifies whether or not to include Item.PrivateNotes and Item.eBayNotes
	// in the response.
	//
	IncludeNotes bool `xml:"IncludeNotes,omitempty"`

	//
	// Specifies how to create virtual pages in the returned list.
	// <br>
	// Default for EntriesPerPage with GetMyeBayBuying is 200.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// Filter to reduce the SoldList response based on whether the seller (or eBay) marked the applicable order as Paid and/or Shipped
	// in My eBay.<br>
	// <br>
	// (Sellers can use CompleteSale or the eBay Web site UI to mark an
	// order as Paid or Shipped in My eBay. Sellers can also specify
	// PaymentStatus in ReviseCheckoutStatus to mark an order as
	// Paid or awaiting payment in My eBay.)
	//
	OrderStatusFilter *OrderStatusFilterCodeType `xml:"OrderStatusFilter,omitempty"`
}

type ItemPolicyViolationType struct {

	//
	// Policy ID of the violated policy which resulted in item being administratively canceled.
	//
	PolicyID int64 `xml:"PolicyID,omitempty"`

	//
	// Brief information of the violated policy which resulted in item being administratively canceled.
	//
	PolicyText string `xml:"PolicyText,omitempty"`
}

type ItemRatingDetailArrayType struct {

	//
	// The <b>ItemRatingDetails</b> container is used by an eBay buyer to leave a Detailed Seller Rating for their order partner concerning an order line item. Detailed Seller Ratings are left concerning Communication, Item as Described, Shipping and Handling Charges, and Shipping Time. The buyer gives the seller a rating between 1 to 5 (5 being the best) in these areas.
	// <br><br>
	// Applicable to sites that support the Detailed Seller Ratings feature.
	//
	ItemRatingDetails []*ItemRatingDetailsType `xml:"ItemRatingDetails,omitempty"`
}

type ItemRatingDetailsType struct {

	//
	// The area of a specific detailed seller rating for an order line item.
	// When buyers leave an overall Feedback rating (positive, neutral, or negative)
	// for a seller, they also can leave ratings in four areas: item as described,
	// communication, shipping time, and charges for shipping and handling.
	//
	RatingDetail *FeedbackRatingDetailCodeType `xml:"RatingDetail,omitempty"`

	//
	// A detailed seller rating for an order line item applied to the area
	// in the corresponding RatingDetail field. Valid input values are
	// numerical integers 1 though 5.
	//
	Rating int32 `xml:"Rating,omitempty"`
}

type ItemSpecificDetailsType struct {

	//
	// This value is the maximum number of Item Specifics name-value pairs that can be used when creating, revising, or relisting an item on the specified site. Item Specifics are used to provide descriptive details of an item in a structured manner.
	//
	MaxItemSpecificsPerItem int32 `xml:"MaxItemSpecificsPerItem,omitempty"`

	//
	// This value is the maximum number of corresponding name values that can be used per Item Specific when creating, revising, or relisting an item on the specified site. An example of an Item Specific that might have multiple values is 'Features'. A product can have multiple features, hence multiple features can be passed in through multiple <b>ItemSpecifics.NameValueList.Value</b> fields.
	// <br><br>
	// Once you know the site threshold, it can also be helpful to know specific Item Specifics in a listing category that can have more than value, such as 'Features'. To retrieve this information, you can call <b>GetCategorySpecifics</b> for a category and check the <b>NameRecommendation.ValidationRules.MaxValues</b> field for each Item Specific in the response.
	//
	MaxValuesPerName int32 `xml:"MaxValuesPerName,omitempty"`

	//
	// This value is the maximum number of characters that can be used for an Item Specific value on the specified site.
	//
	MaxCharactersPerValue int32 `xml:"MaxCharactersPerValue,omitempty"`

	//
	// This value is the maximum number of characters that can be used for an Item Specific name on the specified site.
	//
	MaxCharactersPerName int32 `xml:"MaxCharactersPerName,omitempty"`

	//
	// This string indicates the version of the Item Specifics metadata.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// This timestamp indicates the date and time when the Item Specifics metadata was last updated. Time is in Greenwich Mean Time (GMT) time. This timestamp can be useful in determining if and when to refresh cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ItemSpecificsEnabledDefinitionType struct {
}

type ItemTotalsType struct {
	TotalQuantity int64 `xml:"TotalQuantity,omitempty"`

	TotalValue *AmountType `xml:"TotalValue,omitempty"`
}

type ItemTransactionIDArrayType struct {

	//
	// An <b>ItemTransactionID</b> container is required to specify a specific order line item to retrieve.
	// <br><br>
	// The seller has the option of using an <b>OrderLineItemID</b>, a <b>SKU</b> value (if it exists for the order line item and the <b>InventoryTrackingMethod</b> is set to <code>SKU</code>), or an <b>ItemID</b>/<b>TransactionID</b> pair to identify an order line item.
	//
	ItemTransactionID []*ItemTransactionIDType `xml:"ItemTransactionID,omitempty"`
}

type ItemTransactionIDType struct {

	//
	// Unique identifier for an eBay listing. A multiple-quantity listing can have multiple order line items, but only one <b>ItemID</b>. Unless an <b>OrderLineItemID</b> or <b>SKU</b> value is specified in the same node, this field is required for each <b>ItemTransactionID</b> node included in the request.
	// <br>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. The
	// <b>TransactionID</b> should match the <b>ItemID</b> specified in each <b>ItemTransactionID</b>
	// node included in the request. Optionally, an <b>OrderLineItemID</b> or <b>SKU</b> value can
	// substitute for the <b>ItemID</b>/<b>TransactionID</b> pair.
	// <br>
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// A SKU (stock keeping unit) is a unique identifier defined and used by the
	// seller to identify a product or variation of an item. Unless an <b>OrderLineItemID</b> value or <b>ItemID</b>/<b>TransactionID</b> pair is
	// specified in the same node, this field is required for each
	// <b>ItemTransactionID</b> node included in the request. To retrieve order line items
	// associated with a SKU, the <b>InventoryTrackingMethod</b> field must be set to SKU.
	// The <b>InventoryTrackingMethod</b> field is set through <b>AddFixedPriceItem</b> or
	// <b>RelistFixedPriceItem</b>.
	// <br>
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs. If an <b>OrderLineItemID</b> is included in an
	// <b>ItemTransactionID</b> node in the request, the <b>ItemID</b>, <b>TransactionID</b>, and <b>SKU</b>
	// fields are not required and are ignored if they are included in the request.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type ItemType struct {

	//
	// Return custom, application-specific data associated with the item.
	// The data you specify is stored by eBay with the item for your own
	// reference, but it is not used by eBay in any way. Use
	// <b>ApplicationData</b> to store special information for yourself, such as
	// a part number. For a SKU in an eBay.com listing, use the <b>SKU</b>
	// element instead. To remove this value when revising or relisting an
	// item, use <b>DeletedField</b>.
	//
	ApplicationData string `xml:"ApplicationData,omitempty"`

	//
	// This field has been deprecated, and should no longer be used.
	//
	AttributeSetArray *AttributeSetArrayType `xml:"AttributeSetArray,omitempty"`

	//
	// This field has been deprecated, and should no longer be used.
	//
	AttributeArray *AttributeArrayType `xml:"AttributeArray,omitempty"`

	//
	// This field is deprecated, and should no longer be used.
	//
	LookupAttributeArray *LookupAttributeArrayType `xml:"LookupAttributeArray,omitempty"`

	//
	// If <code>true</code>, the seller requests immediate payment for the item.
	// If <code>false</code> or not specified, immediate payment is not requested.
	// (In responses, does not indicate whether the item is actually still a
	// candidate for purchase via immediate payment.)<br>
	// <br>
	// Only applicable to items listed on PayPal-enabled sites
	// in categories that support immediate payment (see <b>AutoPayEnabled</b> in
	// <b>GetCategories</b>), or if the seller is opted into the new eBay Managed Payments program.
	// <br>
	// <br>
	// To create an Immediate Payment listing, <b>AutoPay</b> must be <code>true</code>,
	// <b>PayPalEmailAddress</b> must be a valid PayPal email address for the seller, and the only included
	// <b>PaymentMethods</b> value must be <code>PayPal</code>.
	// <br/><br/>
	// For a non-Immediate Payment listing,
	// the <b>AutoPay</b> flag is not required since it defaults to <code>false</code>.
	//
	AutoPay bool `xml:"AutoPay,omitempty"`

	//
	// Detailed information about a bid. For <b>GetMyeBayBuying</b>, returned as a self-closed element if no bids meet the request criteria.
	//
	BiddingDetails *BiddingDetailsType `xml:"BiddingDetails,omitempty"`

	//
	// Flag to indicate an item's eligibility for the PayPal Buyer Protection
	// program. This field is only returned if <code>true</code>. If this field is not returned, the item is not eligible for PayPal Buyer Protection. For more information on
	// items that are eligible for PayPal Buyer Protection, see the
	// <a href="https://pages.ebay.com/help/buy/paypal-buyer-protection.html#paypal">PayPal Buyer Protection</a> help page.
	//
	BuyerProtection *BuyerProtectionCodeType `xml:"BuyerProtection,omitempty"`

	//
	// This field is only applicable for auction listings. By specifying a 'Buy It Now' price, a seller is allowing prospective buyers the opportunity to purchase the item in the auction listing at this price immediately. When a buyer uses the 'Buy It Now' option to purchase the item, the auction listing will end immediately.
	// <br/><br/>
	// By including this field and specifying a 'Buy It Now' price, the seller is enabling the 'Buy It Now' feature on the auction listing. If the seller includes this field for any other listing type other than an auction, this field and its price will just be ignored.
	// <br/><br/>
	// The price in this field must be at least 30 percent higher than the starting bid price (which is specified in an Add call through the <b>Item.StartPrice</b> field). Once a bid is made on an auction listing, and the bid meets or exceeds the <b>Item.ReservePrice</b> value (if set), the 'Buy It Now' option becomes unavailable, and this field will no longer be applicable. If there is no Reserve Price, the first bid will nullify the 'Buy It Now' option.
	// <br><br>
	// Keep in mind that <b>GetItem</b> (and other 'Get' calls that retrieve the Item details) may still return the <b>BuyItNowPrice</b> field for an auction item even if the 'Buy It Now' option is no longer available. Instead, a user should look for the <b>ListingDetails.BuyItNowAvailable</b> boolean field in the <b>GetItem</b> response to determine if the 'Buy It Now' option is still available for the auction item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> For the US site, new eBay sellers are subject to <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-Policies.html#SellerLimits">Seller Limits</a>, which limit the quantity of items that may be listed and/or the total cumulative value of these listings. While subject to these selling limits, an eBay seller can use the <b>GetMyeBaySelling</b> call to retrieve both the remaining number of listings they can create and the remaining cumulative value of these listings. These values are shown in the <b>Summary.QuantityLimitRemaining</b> and <b>Summary.AmountLimitRemaining</b> fields in the <b>GetMyeBaySelling</b> response. If a call to add an item or revise an item would result in the exceeding of these limits, the add item or revise item call will fail. These fields will only be returned if the seller is subject to seller limits.
	// </span>
	//
	BuyItNowPrice *AmountType `xml:"BuyItNowPrice,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field's value now defaults to <code>true</code> if this field is omitted. Previously, the default value was <code>false</code>, so a user had to include this field and set it to <code>true</code> in order for eBay to map an outdated Primary or Secondary Category ID to the updated Category ID.
	// </span>
	// This boolean field controls whether or not eBay automatically maps outdated Category ID(s) specified in a
	// <b>PrimaryCategory</b> and/or <b>SecondaryCategory</b> container(s) to the updatd Category ID(s) no longer exists in the
	// current category structure: If you pass a value of <code>true</code> in
	// <b>CategoryMappingAllowed</b> or just omit the field, eBay will look up the current Category ID(s) that have replaced the specified Category ID(s). If you pass a value of <code>false</code>, eBay will not do any mapping, and the call may fail if specified Category ID(s) are no longer valid IDs for a eBay leaf category. The new Category ID(s) will be returned in the <b>CategoryID</b> and <b>Category2ID</b> fields (if secondary category is used) of the Add/Revise/Relist call response.
	// <br/><br/>
	//
	CategoryMappingAllowed bool `xml:"CategoryMappingAllowed,omitempty"`

	//
	// This container identifies the nonprofit organization that will benefit with a percentage of the proceeds from the sale of an item through an auction or fixed-price listing. Charity names and IDs can be found by going to <a href="https://charity.ebay.com/charity-auctions/my-causes" target="_blank">eBay for Charity</a> page and doing a search for a charity registered with the PayPal Giving Fund. The donation percentage can be set in 5 percent increments from 10 percent to 100 percent. If a benefitting charity is specified, the seller must also accept PayPal as a payment method for the item (see <b>Item.PaymentMethods</b>).
	// <br><br>
	// When it comes to revising an auction or fixed-price listing, you can add a benefitting charity (as long as there is at least 12 hours left before end of listing/close of auction), but you cannot remove or change a nonprofit company once one is already established in the original listing.
	// <br><br>
	// <b>For Revise calls</b>: The non-profit organization and donation percentage can now be modified in a Revise call as long as there are no active bids on an auction listing, or no pending Best Offers/Counter Offers on a listing.
	// <br><br>
	// This container will only be returned in Get calls for listings that will benefit a nonprofit organization if the item sells.
	//
	Charity *CharityType `xml:"Charity,omitempty"`

	//
	// This two-digit enumeration value indicates the country of the seller's registration address. <b>CountryCodeType</b> defines the supported values. The <a href="https://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GeteBayDetails.html">GeteBayDetails</a> call can also be used (include the <b>DetailName</b> field and set its value to <b>CountryDetails</b>) to see the full list of supported country codes.
	// <br><br>
	// In an Add/Revise/Relist/Verify call, this field is required.
	//
	Country *CountryCodeType `xml:"Country,omitempty"`

	//
	// This field is deprecated, and should not longer be used.
	//
	CrossPromotion *CrossPromotionsType `xml:"CrossPromotion,omitempty"`

	//
	// In an Add/Revise/Relist/Verify call, this required three-digit enumeration value defines the currency associated with the listing site. The item price and all costs passed in the call request will be using this currency. Similarly, the listing fees and other cost-related data will be using this currency. Since the Trading API can only be used for a select number of eBay sites, only a subset of values are supporting when adding/revising/relisting an item. These supported values are discussed in the top section of <b>CurrencyCodeType</b>.
	// <br><br>
	// In 'Get' calls, it is possible that any of the values in <b>CurrencyCodeType</b> may appear, as some cost-related fields will show the buyer's currency type.
	//
	Currency *CurrencyCodeType `xml:"Currency,omitempty"`

	//
	// The seller's description of the item.
	// In listing requests, you can submit your description
	// using CDATA if you want to use HTML or XML-reserved characters in the
	// description. However, a seller can not use any active content in their listing description. Active content includes animation or video via JavaScript, Flash, plug-ins, or form actions. All active content will be blocked/removed from a listing. Removing/blocking active content will lead to faster load times of listings, make listings more mobile-friendly, improve SEO performance, and lead to a more secure eBay Marketplace. For more tips on creating listings that are even more mobile-friendly, see this <a href="https://pages.ebay.com/sell/itemdescription/mobilefriendlyguidelines.html" target="_blank">Best practices</a> document.
	// <br><br>
	// For more information about eBay phasing out active content, see this
	// <a href="https://pages.ebay.com/sellerinformation/news/fallupdate16/active-content.html" target="_blank">Seller Update</a> page. For more information about eBay's JavaScript/Active Content policy, see the <a href="https://pages.ebay.com/help/policies/listing-javascript.html" target="_blank">JavaScript policy</a> page.
	// <br><br>
	// In the listing description, sellers are only allowed to provide links to product videos, freight shipping services, or other legally required information, and when providing these links in the listing description, the secure 'https' protocol must be used instead of 'http'. In addition, any valid  links to sites outside of eBay should use the <em>target="_blank"</em> attribute in the <b>a href</b> tag so a new browser window will be loaded when the link is clicked instead of buyers being redirected off of eBay. For more information on using links in the listing description, see eBay's <a href="http://pages.ebay.com/help/policies/listing-links.html" target="_blank">Links policy</a>. For more information about the stronger security standards that eBay is using, see the <a href="https://pages.ebay.com/seller-center/seller-updates/2018-fall/marketplace-update.html#use-secure-https" "target=_blank">Use secure HTTPS for enhanced browser security</a> topic in the 2018 Fall Seller Update. The <a href="https://developer.ebay.com/api-docs/sell/compliance/resources/listing_violation/methods/getListingViolations" target="_blank">getListingViolations</a> method of the Compliance API can be used to see if any of the seller's active listings are not 'HTTPS' compliant.
	// <br><br>
	// If you embed pictures in the description (by using IMG tags) instead of using
	// <b>PictureURL</b>, but you want a camera icon to appear in search and listing pages,
	// specify the following null-image URL in the <b>PictureURL</b> field:
	// https://pics.ebay.com/aw/pics/dot_clear.gif. See <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Pictures-InListing.html">Working with Pictures in an Item Listing</a> in the eBay Features Guide.
	// <br><br>
	// This field is conditionally required for all listings. The exception is when the seller specifies a product identifier, such as a GTIN or ePID, through the <b>ProductListingDetails</b> container and a product match is found in the eBay product catalog. If a matching product is found in the eBay product catalog, the item description will be created automatically (as long as the <b>ProductListingDetails.IncludeeBayProductDetails</b> value is <code>true</code>).
	// <br>
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field is conditionally required if the listing is being revised through a Revise call, and the <b>Item.Description</b> field is one of the fields being changed. The enumeration value passed in this field specifies whether the text provided in the <b>Item.Description</b> field will prepend, append, or replace the existing text in the current <b>Item.Description</b> field.
	//
	DescriptionReviseMode *DescriptionReviseModeCodeType `xml:"DescriptionReviseMode,omitempty"`

	//
	// This field is deprecated, and should no longer be used.
	//
	Distance *DistanceType `xml:"Distance,omitempty"`

	//
	// Indicates whether an optional hit counter is displayed on the item's listing
	// page and, if so, what type. See <b>HitCounterCodeType</b> for specific values.
	// <br/>    is not enabled on the Germany, Austria, Switzerland, or Poland sites.
	//
	HitCounter *HitCounterCodeType `xml:"HitCounter,omitempty"`

	//
	// The unique identifier of the eBay listing. This identifier is generated
	// by eBay and returned in the response of an Add call if an item is successfully listed. Once an item is successfully created, the <b>ItemID</b> cannot be modified. <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> Although we represent
	// item IDs as strings in the schema, we recommend you store them as 64-bit
	// signed integers. If you choose to store item IDs as strings, allocate at
	// least 19 characters (assuming decimal digits are used) to hold them. Your code should be prepared to
	// handle IDs of up to 19 digits. </span>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Various details about a listing, some of which are calculated or
	// derived after the item is listed. These include the start and end
	// time, converted (localized) prices, and certain flags that indicate
	// whether the seller specified fields whose values are not visible to
	// the requesting user. For <b>GetMyeBayBuying</b>, returned as a self-closed element if no listings meet the request criteria.
	// <br/><br/>
	// In an Add/Revise/Relist call, this container is used to set the Best Offer Auto-Accept and Best Offer Auto-Decline threshold values.
	//
	ListingDetails *ListingDetailsType `xml:"ListingDetails,omitempty"`

	//
	// Contains the detail data for the Listing Designer theme and template (if either are used), which can optionally be used to enhance the appearance of the description area of an item's description.
	//
	ListingDesigner *ListingDesignerType `xml:"ListingDesigner,omitempty"`

	//
	// Describes the number of days the seller wants the listing to be active (available for bidding/buying). The duration specifies the seller's initial intent at listing time.
	// <br/><br/>
	// The end time for a listing is calculated by adding the duration to the item's start time. If the listing ends early, the value of the listing duration does not change. When a listing's duration is changed, any related fees (e.g., 10-day fee) may be debited or credited (as applicable).
	// <br><br>
	// The valid choice of values depends on the listing format (see <b>Item.ListingType</b>). For
	// a list of valid values, call <b>GetCategoryFeatures</b> with <b>DetailLevel</b> set to <b>ReturnAll</b>
	// and look for <b>ListingDurations</b> information.
	// <br><br>
	// When you revise a listing, the duration cannot be reduced if it will result in ending the listing within 24 hours of the current date-time. You are only allowed to increase the duration of the listing if fewer than 2 hours have passed since you initially listed the item and the listing has no bids. You can decrease the value of this field only if the listing has no bids (or no items have sold) and the listing does not end within 12 hours.
	//
	ListingDuration string `xml:"ListingDuration,omitempty"`

	//
	// Describes listing upgrades that sellers can select for a fee, such as the
	// <b>BoldTitle</b> upgrade. Also includes feature packs for saving on listing upgrades.
	// See <a href="https://pages.ebay.com/help/sell/ia/promoting_your_item.html">Listing Upgrades</a>
	// in the eBay site help.
	// <br><br>
	// You cannot remove listing upgrades when you revise a listing. When you
	// relist an item, use <b>DeletedField</b> to remove a listing upgrades.
	//
	ListingEnhancement []*ListingEnhancementsCodeType `xml:"ListingEnhancement,omitempty"`

	//
	// The selling format of the eBay listing, such as auction (indicated with <code>Chinese</code> value), fixed-price (indicated with <code>FixedPriceItem</code> value), or classified ad (indicated with <code>AdType</code> value).
	// <br><br>
	// If this field is not included in an <b>AddItem</b>, <b>AddItems</b>, <b>AddSellingManagerTemplate</b>, or <b>VerifyAddItem</b> call, the listing type defaults to auction
	// <br><br>
	// For <b>AddFixedPriceItem</b>, <b>RelistFixedPriceItem</b>, or <b>VerifyAddFixedPriceItem</b> call, this field must be included and set to <code>FixedPriceItem</code>, since these calls only work with fixed-price listings.
	// <br><br>
	// This field is not applicable to Revise calls because the selling format of active listings cannot be changed.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// Indicates the geographical location of the item (along with the value in the <b>Country</b> field).
	// When you revise a listing, you can add or change this value only if the
	// listing has no bids (or no items have sold) and it does not end within
	// 12 hours.
	// <br><br>
	// If you do not specify <b>Location</b>, you must specify <b>Item.PostalCode</b>. If you
	// specify a postal code, but do not specify a location, then the location is
	// given a default value derived from the postal code.
	// <br><br>
	// For the Classified Ad format for motors vehicle listings, the value
	// provided in the <b>Location</b> field is used as item location only if the
	// <b>SellerContactDetails.Street</b> and the <b>SellerContactDetails.Street2</b> are empty.
	// Else, the <b>SellerContactDetails.Street</b> and the <b>SellerContactDetails.Street2</b>
	// will be used for item location.
	// <br>
	//
	Location string `xml:"Location,omitempty"`

	//
	// A lot is a set of two or more similar items included in a single listing that must be purchased together in a single order line item. The <b>Item.LotSize</b> value is the number of items in the lot. This field is required if two or more items are including in one listing.
	// <br><br>
	// Lots can be used for auction and fixed-price listings. Lot items can be listed only in lot-enabled categories. Call <b>GetCategories</b> to determine if a category supports lots. If the returned <b>CategoryArray.Category.LSD</b> (<b>LotSize</b> Disabled) value is <code>true</code>, the category does not support lots.
	// <br>
	//
	LotSize int32 `xml:"LotSize,omitempty"`

	//
	// This field is deprecated.
	//
	PartnerCode string `xml:"PartnerCode,omitempty"`

	//
	// This field is deprecated.
	//
	PartnerName string `xml:"PartnerName,omitempty"`

	//
	// This container is used in an <b>Add/Revise/Relist/Verify</b> call if the seller is selling a motor vehicle, and is requiring an initial deposit on that vehicle. This container is only applicable for motor vehicle listings.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note: </b> If you set up a payment policy via the <a href="https://developer.ebay.com/api-docs/sell/account/resources/payment_policy/methods/createPaymentPolicy">Account API</a> or the <a href="https://developer.ebay.com/Devzone/business-policies/CallRef/addSellerProfile.html">Business Polices Managment API</a>, then you should not populate the fields in this <b>PaymentDetails</b> container. Instead, indicate your payment policy using the <b>SellerProfiles.SellerPaymentProfile</b> container.
	// </span>
	// <br>
	// This container will only be returned in 'Get' calls for motor vehicle listings where an initial deposit is required for that vehicle.
	//
	PaymentDetails *PaymentDetailsType `xml:"PaymentDetails,omitempty"`

	//
	// Identifies the payment method (such as PayPal) that the seller will accept
	// when the buyer pays for the item. For Add/Revise/Relist calls, at least
	// one payment method must be specified unless the seller is opted in to the new eBay Managed Payments program.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note: </b> If you set up a payment policy via the <a href="https://developer.ebay.com/api-docs/sell/account/resources/payment_policy/methods/createPaymentPolicy">Account API</a> or the <a href="https://developer.ebay.com/Devzone/business-policies/CallRef/addSellerProfile.html">Business Polices Managment API</a>, then you should not populate this field. Instead, indicate your payment policy using the <b>SellerProfiles.SellerPaymentProfile</b> container.
	// </span>
	// <br>
	// <span class="tablenote"><b>Note:</b> The new eBay Managed Payments program is currently only available to a limited number of sellers on the US site. For sellers in the eBay Managed Payments program, a payment method does not need to be specified at listing time. Any payment method that is specified at listing time (or defined in a payment business policy) will be ignored and dropped from the listing, and the seller will get a warning message in the response. Immediate payment is supported for sellers in the eBay Managed Payments program, so they can include the <b>AutoPay</b> field in the request and set its value to <code>true</code>.
	// </span><br>
	// Use <b>GetCategoryFeatures</b> to determine the payment methods that are allowed for a category on a site. For example, the response data of <b>GetCategoryFeatures</b> will show that on the US site, most categories only allow electronic payments. Also use <b>GetCategoryFeatures</b> to determine the default payment methods for a site.
	// <br><br>
	// Do not use <b>GeteBayDetails</b> to determine the payment methods for a site.
	// <br><br>
	// If you specify multiple <b>PaymentMethods</b> fields, the repeating fields must be contiguous. For example, you can specify <b>PayPalEmailAddress</b> after a list of
	// repeating <b>PaymentMethods</b> fields, but not between them:<br>
	// <br>
	// <code>
	// &lt;PaymentMethods&gt;VisaMC&lt;/PaymentMethods&gt;<br>
	// &lt;PaymentMethods&gt;PayPal&lt;/PaymentMethods&gt;<br>
	// &lt;PayPalEmailAddress&gt;mypaypalemail@ebay.com&lt;/PayPalEmailAddress&gt;
	// </code>
	// <br><br>
	// In general, if you separate repeating instances of a field, the results will
	// be unpredictable. This rule applies to all repeating fields
	// (<code>maxOccurs="unbounded"</code> or greater than 1) in the schema. See <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/Call-APISchema.html#OverviewoftheAPISchema">Overview of the API Schema</a> in the eBay Features Guide.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Required or allowed payment methods vary by site and category. Refer to <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-PaymentMethod.html">
	// Determining the Payment Methods Allowed for a Category</a> in the eBay Features Guide
	// to help you determine which payment methods you
	// are required or allowed to specify.
	// </span><br>
	// Payment methods are not applicable to any classified ad listings, as any agreement and payment is handled off of the eBay platform.
	// <br>
	// <br>
	// <b>For <b>ReviseItem</b> and <b>RelistItem</b> only:</b>
	// A listing must have at least one valid payment method.
	// When you revise or relist an item and you specify a payment method
	// that is invalid for the target site, eBay ignores the
	// invalid payment method, applies the other valid
	// changes, and returns a warning to indicate that the
	// invalid payment method was ignored.
	// <br/><br/>
	// If multiple payment methods were
	// invalid, the warning indicates that they were all ignored.
	// If you modify the listing so that it includes no valid
	// payment methods, an error is returned. This situation could occur when
	// the seller removes all valid payment methods or when all
	// the payment methods specified for the item are no longer valid
	// on the target site.
	//
	PaymentMethods []*BuyerPaymentMethodCodeType `xml:"PaymentMethods,omitempty"`

	//
	// Valid PayPal email address for the PayPal account that the seller will use
	// if they offer PayPal as a payment method for the listing.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note: </b> If you set up a payment policy via the <a href="https://developer.ebay.com/api-docs/sell/account/resources/payment_policy/methods/createPaymentPolicy">Account API</a> or the <a href="https://developer.ebay.com/Devzone/business-policies/CallRef/addSellerProfile.html">Business Polices Managment API</a>, then you should not populate this field. Instead, indicate your payment policy using the <b>SellerProfiles.SellerPaymentProfile</b> container.
	// </span>
	// <br>
	// <br>
	// eBay uses this to identify the correct PayPal account when the buyer pays via PayPal during
	// the checkout process. (As a seller can have more than one PayPal account,
	// you cannot necessarily rely on PayPal account data returned from <b>GetUser</b> for
	// details about the account associated with the PayPal email address that the
	// seller specifies.)<br>
	// <br>
	// Required if seller has chosen PayPal as a payment method (<b>PaymentMethods</b>)
	// for the listing.<br>
	// <br>
	// For digital listings, the seller needs to use an email address that is
	// associated with a PayPal Premier or PayPal business account. <br>
	// <br>
	// <b>For ReviseItem and RelistItem only:</b> To remove this value
	// when you revise or relist an item, use <b>DeletedField</b>. When you revise a
	// listing, if the listing has bids (or items have been sold) or it ends within
	// 12 hours, you can add <b>PayPalEmailAddress</b>, but you cannot remove
	// it.<br>
	// <br>
	// Not applicable to eBay Motors listings.
	//
	PayPalEmailAddress string `xml:"PayPalEmailAddress,omitempty"`

	//
	// This container is used in an Add/Revise/Relist call to set the primary listing category. This field is conditionally required in an Add call unless the seller successfully uses the <b>ProductListingDetails</b> container to find an eBay catalog product match. When the seller successfully uses an eBay catalog product to create a listing, the listing title, listing description, Item Specifics, listing category, and stock photo defined in the catalog product is used to create the listing.<br>
	// <br>
	// If you do not know the appropriate eBay category for your product, you can use the <b>GetSuggestedCategories</b> call. Once you know your category, and want to know which listing features it supports, you can use the
	// <b>GetCategoryFeatures</b> call. To discover if the category requires or recommends GTIN types and other Item Specifics, you can use the <b>GetCategorySpecifics</b> call.
	// <br>
	// <br>
	// If you do use an eBay catalog product, it is advised that you do not include this field, as any primary category ID you specify in this field may get dropped if this category is different than the  primary category defined in the eBay catalog product.
	// <br>
	// <br>
	// <b>For ReviseItem only:</b> When revising a listing,
	// you can change the primary category only if an auction listing
	// has no bids or a multiple-quantity, fixed-price listing has no sales, and the listing does not end
	// within 12 hours. If you change the listing category, any Item Specifics that
	// were previously specified may be dropped from the listing if they aren't
	// valid for the new category. <br>
	// <br>
	// When you list an event ticket on the US site, you must specify one of the leaf categories under the Tickets & Experiences meta category.
	//
	PrimaryCategory *CategoryType `xml:"PrimaryCategory,omitempty"`

	//
	// This container is used to provide one or more product identifiers for a product, and if desired by the seller, or required by eBay, the product can be matched to an eBay Catalog product. If a seller's product is matched to an eBay Catalog product, the product details associated with that catalog product will be prefilled for the listing. Product details defined for a catalog product include the product title, product description, product aspects, and stock image(s) of the product.
	// <br>
	// <br>
	// In some eBay categories, one or more product identifier types (e.g. UPC or ISBN) may be required, but the category may not have any eBay Catalog products defined, or the category does not allow listings to be created using a catalog product. To see if an eBay category supports/requires an eBay Catalog product, use the <b>GetCategoryFeatures</b> call and look for the value returned for the <b>Category.ProductCreationEnabled</b> field. Additionally, the user should also be looking for the values returned in the <b>Category.EANEnabled</b>, <b>Category.ISBNEnabled</b>, and <b>Category.UPCEnabled</b> fields to see if these product identifier types are supported/required. Note that the <b>GetCategorySpecifics</b> call can also be used to retrieve supported/required product identifier types.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// In May 2018, eBay (US, UK, AU, and CA-EN sites) started requiring that eBay catalog products be used for some product brands in specific eBay categories. This requirement will be further expanded later in 2018. For more information on the categories/product brands affected by this project, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>. If a product identifier type is required, the corresponding field must be used, even if the seller is not interested in finding an eBay catalog product match. A large percentage of eBay US categories require one or more product identifier types when listing an item. See the <a href="http://pages.ebay.com/sell/item_specifics/product_identifiers.html" target="_blank">Structured Data - Product Identifiers</a> help page for more information on which eBay US categories require which product identifier types. If known, an ePID (specified through the <b>ProductReferenceID</b> field) is always the best bet to find an eBay catalog product match, although an <b>EAN</b>, <b>ISBN</b>, <b>UPC</b>, or Brand/MPN pair can also be used in an attempt to find a catalog product match. If a Brand/MPN pair is required for the product, these values must be input through the <b>BrandMPN</b> container.
	// </span>
	// <br>
	// When you use <b>ProductListingDetails</b>, in an Add/Revise/Relist call, you must specify at least one GTIN, a <b>ProductReferenceID</b> (also known as an ePID), a Brand/MPN pair, or <b>TicketListingDetails</b>. If you specify more than one GTIN value, eBay uses the first one that matches a product in eBay's catalog.
	// <br>
	// <br>
	// <b>For ReviseItem and RelistItem only:</b> When you revise a
	// listing, if it has bids or it ends within 12 hours, you cannot change the
	// product identifier and you cannot remove existing product listing details data. However, you can
	// change or add preferences such as <b>IncludeStockPhotoURL</b>,
	// <b>UseStockPhotoURLAsGallery</b>, and <b>IncludePrefilledItemInformation</b>. To delete all
	// catalog data when you revise or relist an item, specify
	// Item.ProductListingDetails in <b>DeletedField</b> and don't pass
	// <b>ProductListingDetails</b> in the request.
	//
	ProductListingDetails *ProductListingDetailsType `xml:"ProductListingDetails,omitempty"`

	//
	// <b>For <b>AddItem</b> family of calls:</b> The <b>Quantity</b> value for auction listings must always be <code>1</code>. For a fixed-price listing, the <b>Quantity</b> value indicates the number of identical items the seller has available for sale in the listing. If variations are specified in <b>AddFixedPriceItem</b> or <b> VerifyAddFixedPriceItem</b>, the <b>Item.Quantity</b> is not required since the quantity of variations is specified in <b>Variation.Quantity</b> instead. See the <a href="https://pages.ebay.com/help/sell/listing-variations.html">Creating a listing with variations</a> eBay Help page for more information on variations.
	// <br><br>
	// <b>For ReviseItem and ReviseFixedPriceItem:</b>
	// This value can only be changed for a fixed-price listing with no variations. The
	// quantity of variations is controlled in the <b>Variation.Quantity</b> field and the <b>Item.Quantity</b>
	// value for an auction  listing should always be <code>1</code>.
	// <br><br>
	// <b>For RelistItem and RelistFixedPriceItem:</b>
	// Like most fields, when you use <b>RelistItem</b> or <b>RelistFixedPriceItem</b>,
	// <b>Quantity</b> retains its original value unless you specifically change
	// it. This means that the item is relisted with the value that was
	// already in <b>Quantity</b>, not with the remaining quantity available.
	// For example, if the original <b>Quantity</b> value was <code>10</code>, and three items have been sold,
	// eBay sets the relisted item's <b>Quantity</b> to <code>10</code> by default, and not <code>7</code>.
	// So, we strongly recommend that you always
	// set <b>Quantity</b> to the correct value (your actual quantity available)
	// in your relist requests.<br>
	// <br>
	// When eBay auto-renews a GTC listing (<b>ListingDuration</b> = <b>GTC</b>)
	// on your behalf, eBay relists with correct quantity available.
	// <br>
	// <br>
	// <b>For GetSellerEvents:</b> <b>Quantity</b> is only returned
	// for listings where item quantity is greater than 1.
	// <br><br>
	// <b>For GetItem and related calls:</b>
	// This is the total of the number of items available for sale plus the quantity
	// already sold. To determine the number of items available, subtract
	// <b>SellingStatus.QuantitySold</b> from this value.
	// <br><br>
	// <b>For order line item calls with variations:</b>
	// In <b>GetItemTransactions</b>, <b>Item.Quantity</b> is the same as <b>GetItem</b> (the
	// total quantity across all variations). In <b>GetSellerTransactions</b>,
	// <b>Transaction.Item.Quantity</b> is the total quantity of the applicable
	// variation (quantity available plus quantity sold).
	// <br>
	// <br>
	// <span class="tablenote"><b>Note: </b> For the US site, new eBay sellers are subject to <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-Policies.html#SellerLimits">Seller Limits</a>, which limit the quantity of items that may be listed and/or the total cumulative value of these listings. While subject to these selling limits, an eBay seller can use the <b>GetMyeBaySelling</b> call to retrieve both the remaining number of listings they can create and the remaining cumulative value of these listings. These values are shown in the <b>Summary.QuantityLimitRemaining</b> and <b>Summary.AmountLimitRemaining</b> fields in the <b>GetMyeBaySelling</b> response. If a call to add an item or revise an item would result in the exceeding of these limits, the add item or revise item call will fail. These fields will only be returned if the seller is subject to seller limits.
	// </span>
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// A note that a user makes on an item from their My eBay account. <b>GetMyeBayBuying</b> and <b>GetMyeBaySelling</b> return this field, and only if you pass in the <b>IncludeNotes</b> field in the request, and set its value to <b>true</b>. This field will only be returned if set for an item, and only returned to the user who created the note.
	// <br><br>
	// Not supported as input in <b>ReviseItem</b>. Use <b>SetUserNotes</b> instead.
	// <br><br>
	// <b>For GetMyeBayBuying</b> In <b>WatchList</b>, notes for variations are only
	// returned at the Item level, not the variation level. They are only set if you
	// specified <b>ItemID</b> (if no purchases) or <b>ItemID</b> and <b>VariationSpecifics</b> (if there are
	// purchases) in <b>SetUserNotes</b> (or selected the equivalent in the My eBay UI on the
	// site).
	// <br><br>
	// In <b>WonList</b>, notes for variations are only returned at the Item level, not the
	// variation level. They are only set if you specified <b>ItemID</b> and <b>TransactionID</b> in
	// <b>SetUserNotes</b> (or selected the equivalent in the My eBay UI on the site).
	//
	PrivateNotes string `xml:"PrivateNotes,omitempty"`

	//
	// This field is deprecated.
	//
	RegionID string `xml:"RegionID,omitempty"`

	//
	// Applicable only to relisting an item. If true, creates a link in the item's
	// old listing for the item that points to the new relist page, which
	// accommodates users who might still look for the item under its old item ID.
	//
	RelistLink bool `xml:"RelistLink,omitempty"`

	//
	// The lowest price at which the seller is willing to sell an auction item. (<b>StartPrice</b>
	// must be lower than <b>ReservePrice</b> .) Not all categories support a Reserve Price.
	// Use <b>GetCategories</b> to see if a category supports a Reserve Price.
	// In calls that retrieve item data, the <b>ReservePrice</b> field will only be returned to the auction item's seller, and only if a Reserve Price has been set up. A Reserve Price is not applicable to fixed-price or classified ad listings.<br>
	// <br>
	// You can remove the Reserve price of a US eBay Motors listing if the category allows it, the current Reserve Price has not been met, and the Reserve Price is at least $2.00 more than the current high bid. In this case, if the item has bids, the Reserve Price is set to $1.00 over the current high bid. The next bid meets the Reserve Price and wins. See <i>Fees Overview</i> below  for information about fee credits that may be available when the Reserve Price is removed for a Motors listing.
	//
	ReservePrice *AmountType `xml:"ReservePrice,omitempty"`

	//
	// This container is returned if a listing has been revised in any way since it first became active. One or more boolean fields will be returned under this container based on the type of revision(s) that occured, including a general revision, a price change, or a feature added or removed.
	//
	ReviseStatus *ReviseStatusType `xml:"ReviseStatus,omitempty"`

	//
	// Allows the user to specify a time in the future that the listing becomes active on eBay.
	// To schedule the listing start time, specify a time in the future in GMT
	// format. In <b>GetItem</b> and related calls, the scheduled time is returned in
	// <b>StartTime</b>. For <b>ReviseItem</b>, you can modify this value if the currently
	// scheduled start time is in the future (listing has yet to go live).
	// <br><br>
	// When you schedule a start time, the start time is randomized within 15-minute
	// intervals. Randomized start times applies to the following sites:
	// <br>
	// <code>AT, BEFR, BENL, CH, DE, ES, FR, IE, IT, NL, PL, UK</code>
	// <br><br>
	// Also see the following article in the Knowledge Base: <a href=
	// "https://ebaydts.com/eBayKBDetails?KBid=1473"
	// >Why scheduled time is sometimes getting reset</a>.
	//
	ScheduleTime time.Time `xml:"ScheduleTime,omitempty"`

	//
	// The unique identifer for a secondary category. This field is only applicable if the seller decides to list the item under two categories.
	// <br>
	// <br>
	// You cannot list US eBay Motors vehicles in two categories. However, you can
	// list Parts & Accessories in two categories. The Final Value Fee is based
	// on the primary category in which the item is listed. Furthermore, you can
	// list the same item in an eBay Motors Parts & Accessories category and in
	// an eligible eBay category, as long as the primary category is associated
	// with the site on which you are listing. That is, the two categories can be a
	// mix of Motors Parts & Accessories and eBay site categories. (Real
	// Estate, Mature Audience (adult), and Business & Industrial categories
	// are not eligible for listing in two categories in this manner.) For example,
	// if you list on Motors, the primary category could be 6750 (eBay Motors >
	// Parts & Accessories > Apparel & Merchandise > Motorcycle >
	// Jackets & Leathers), and the secondary category could be 57988 (eBay
	// > Clothing, Shoes > Accessories > Men's Clothing > Outerwear).
	// If you list on the main eBay site, the primary category could be 57988 and
	// the secondary category could be 6750. <br>
	// <br>
	// If eBay has designated a category as a value category
	// (see ValueCategory in <b>GetCategoryFeatures</b>), items in that category
	// cannot be listed in two categories.
	// For example, if your <b>AddItem</b> request
	// includes a primary or secondary category that is a value category, then eBay drops <b>SecondaryCategory</b> and lists
	// the item with only the <b>PrimaryCategory</b> you selected.
	// Also, if the listing request includes Item Specifics
	// (in <b>ItemSpecifics</b>) that are associated with <b>SecondaryCategory</b>, eBay drops those values when we drop <b>SecondaryCategory</b>. (The same logic is used if you revise an existing
	// listing to add a secondary category or to change one of the categories: If either the primary or secondary category is a value category, eBay drops the secondary category from your request.)<br>
	// <br>
	// To remove this value when relisting an item, use <b>DeletedField</b>.
	// <br><br>
	// <b>For ReviseItem only:</b> When revising a listing within 12 hours of the listing's scheduled end time, you can only add or change the secondary category when an auction listing has no active bids or a multiple-quantity, fixed-price listing has no items sold. If you change the secondary category, any corresponding Item Specifics that were previously specified may be dropped from the listing if they aren't valid for the category.
	// <br>
	// <br>
	// <b>For ReviseItem only:</b> Previously, removing the listing from a secondary category was only possible within 12 hours of the listing's scheduled end time when an auction listing had no active bids or a multiple-quantity, fixed-price listing had no items sold, but this restriction no longer exists. Now, the secondary category can be dropped for any active listing at any time, regardless of whether an auction listing has bids or a fixed-price listing has sales. To drop a secondary category, the seller passes in a value of <code>0</code> in the <b>SecondaryCategory.CategoryID</b> field.
	//
	SecondaryCategory *CategoryType `xml:"SecondaryCategory,omitempty"`

	//
	// The unique identifier for a secondary category that eBay has added as a free promotion. You cannot add
	// this yourself. This container is only returned if the item was listed in a single category and
	// eBay added a free secondary category.
	//
	FreeAddedCategory *CategoryType `xml:"FreeAddedCategory,omitempty"`

	//
	// Container for information about this listing's seller.
	// <br><br>
	// Returned by <b>GetItemsAwaitingFeedback</b> if Buyer is making the request.
	//
	Seller *UserType `xml:"Seller,omitempty"`

	//
	// Various details about the current status of the listing, such as the current
	// number of bids, the current high bidder, quantity sold, current price, and listing status.
	//
	SellingStatus *SellingStatusType `xml:"SellingStatus,omitempty"`

	//
	// The shipping-related details for an order, including flat and calculated shipping costs.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note: </b> For sellers who are using a shipping (aka Fulfillment) business policy to create/revise/relist an item, none of the fields under the <b>ShippingDetails</b> container are necessary. A fulfillment business policy can be set up and/or modified in My eBay, or via the <a href="https://developer.ebay.com/api-docs/sell/account/resources/fulfillment_policy/methods/createFulfillmentPolicy">Account API</a> or the <a href="https://developer.ebay.com/Devzone/business-policies/CallRef/addSellerProfile.html">Business Polices Managment API</a>. A fulfillment business policy is associated to a listing through the <b>Item.SellerProfiles.SellerShippingProfile</b> container.
	// <br>
	// <br>
	// If you <i>do not</i> use a fulfillment business policy, many of the fields under this <b>ShippingDetails</b> container become required in your request.
	// </span>
	// <br>
	// New users who list their first items in selected categories on the US site
	// must specify at least one domestic shipping service. This applies to a
	// category if <b>GetCategoryFeatures</b> returns <code>true</code> for
	// <b>Category.ShippingTermsRequired</b>.
	// <br>
	// <br>
	// For multi-quantity, fixed-price listings, a seller can revise all shipping details of the
	// listing (except for sales tax and for shipping type of Freight) for all
	// unsold items. This applies to both domestic and international shipping.
	// Checkout is not affected for those who bought items prior to the seller's
	// shipping changes&#8212;the shipping details that were in effect at the time of
	// purchase are used for that buyer at the time of checkout.
	// <br>
	// <br>
	// Shipping details are not applicable to any classified ad listings, as shipping/delivery/pickup is handled by the buyer and seller off of the eBay platform.
	// <br>
	// <br>
	// <b>GetMyeBayBuying, GetMyeBaySelling</b>: <b>ShippingDetails</b> is not returned.
	//
	ShippingDetails *ShippingDetailsType `xml:"ShippingDetails,omitempty"`

	//
	// An international location or region to which the seller is willing to ship,
	// regardless of shipping service. The country of the listing site is added by eBay.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note: </b> If you set up a fulfillment policy via the <a href="https://developer.ebay.com/api-docs/sell/account/resources/fulfillment_policy/methods/createFulfillmentPolicy">Account API</a> or the <a href="https://developer.ebay.com/Devzone/business-policies/CallRef/addSellerProfile.html">Business Polices Managment API</a>, then you should not populate the <b>ShipToLocations</b> field. Instead, indicate your fulfillment policy using the <b>SellerProfiles.SellerShippingProfile</b> container.
	// </span>
	// <br>
	// Use <b>GeteBayDetails</b> with a <b>DetailName</b> of <b>ShippingLocationDetails</b> to
	// determine which international locations are valid for the site. Omit
	// <b>ShipToLocations</b> if you want to ship only within the country of the listing site.
	// To state that you do not wish to ship at all, set <b>ShipToLocations</b> to <code>None</code>.
	// <b>ReviseItem</b> can add a <b>ShipToLocations</b>. On output, <b>ShipToLocations</b> is the
	// collection of all input item-level <b>ShipToLocations</b> plus international shipping
	// service-level ShipToLocation values.
	// <br><br>
	// If you have specified a region to which you will ship (such as Asia), you can
	// use <b>ExcludeShipToLocation</b> to exclude certain countries within that region to
	// where you will not ship (such as Afghanistan).
	//
	ShipToLocations []string `xml:"ShipToLocations,omitempty"`

	//
	// The name of the site on which the item is listed. The listing site affects
	// the business logic and validation rules that are applied to the request,
	// which in turn affect the values that are returned in the response, as well
	// as values that appear on the eBay site. For example, the listing site
	// can affect the validation of <b>Category</b> in listing requests, international
	// business seller requirements, the values of converted (localized) prices in
	// responses, the item-related time stamps that are displayed on the eBay site, the visibility of the item in some types of searches (e.g.,
	// <b>GetCategoryListings</b>), and other information. In some cases, the rules are
	// determined by a combination of the site, the user's registration address,
	// and other information. You cannot change the site when you revise a
	// listing.<br>
	// <br>
	// When you specify <b>Item.Site</b> in <b>AddItem</b> or <b>AddFixedPriceItem</b>, it must be consistent with the
	// numeric site ID that you specify in the request URL (for the SOAP API) or
	// the <b>X-EBAY- API-SITEID</b> header (for the XML API).
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// The original price of the item at listing or re-listing time. If this
	// value changes when the item is revised, the new value becomes the original
	// price.
	// <br><br>
	// <b>For auction listings:</b> Competitive bidding starts at this
	// value. Once at least one bid has been placed, <b>StartPrice</b> remains the same but
	// <b>CurrentPrice</b> is incremented to the amount of each succeeding bid. If <b>ReservePrice</b> is
	// also specified, the value of <b>StartPrice</b> must be lower than the value of
	// <b>ReservePrice</b>.
	// <br><br>
	// <b>For input on fixed-price listings (<b>FixedPriceItem</b>): </b>
	// This is the constant price at which a buyer may purchase the item.
	// <br><br>
	// <b>GetMyeBaySelling</b> does not return <b>Item.StartPrice</b>
	// for fixed price items&#8212;it returns <b>Item.SellingStatus.CurrentPrice</b>.
	// <br><br>
	// <b>For AddFixedPriceItem and VerifyAddFixedPriceItem:</b>
	// Required when no variations are specified. If variations are specified,
	// use <b>Variation.StartPrice</b> for each variation instead.
	// <br><br>
	// <b>For Revise calls:</b>
	// If the <b>StartPrice</b> value for a fixed-price item is changed with a Revise call, the <b>MinimumBestOfferPrice</b> and <b>BestOfferAutoAcceptPrice</b> fields in the <b>ListingDetails</b> container will be dropped (if set), basically turning off the Best Offer Auto Accept and/or Auto Decline features. If the seller wanted to reintroduce either of these Best Offer threshold values in the listing again, an additional Revise call would have to be made, passing in the desired threshold values.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> For the US site, new eBay sellers are subject to <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Listing-Policies.html#SellerLimits">Seller Limits</a>, which limit the quantity of items that may be listed and/or the total cumulative value of these listings. While subject to these selling limits, an eBay seller can use the <b>GetMyeBaySelling</b> call to retrieve both the remaining number of listings they can create and the remaining cumulative value of these listings. These values are shown in the <b>Summary.QuantityLimitRemaining</b> and <b>Summary.AmountLimitRemaining</b> fields in the <b>GetMyeBaySelling</b> response. If a call to add an item or revise an item would result in the exceeding of these limits, the add item or revise item call will fail. These fields will only be returned if the seller is subject to seller limits.
	// </span>
	//
	StartPrice *AmountType `xml:"StartPrice,omitempty"`

	//
	// Contains information related to the item in the context of a seller's eBay
	// Store. Applicable for auctions and fixed-price listings.
	//
	Storefront *StorefrontType `xml:"Storefront,omitempty"`

	//
	// Subtitle to use in addition to the title. Provides more keywords when buyers
	// search in titles and descriptions. You cannot use HTML in the Subtitle. (HTML
	// characters will be interpreted literally as plain text.) If you pass any
	// value, this feature is applied (with applicable fees).<br>
	// <br>
	// When you revise a item, you can add, change, or remove the
	// subtitle.
	// <br>
	//
	SubTitle string `xml:"SubTitle,omitempty"`

	//
	// Time left before the listing ends.
	// The duration is represented in the ISO 8601 duration format (PnYnMnDTnHnMnS).
	// See Data Types in the Trading API Guide for information about this format.
	// For ended listings, the time left is PT0S (zero seconds).
	//
	TimeLeft *Duration `xml:"TimeLeft,omitempty"`

	//
	// This field is used to specify the title of the listing. This field is conditionally required in an Add call unless the seller successfully uses the <b>ProductListingDetails</b> container to find an eBay catalog product match. When the seller successfully uses an eBay catalog product to create a listing, the listing title, listing description, Item Specifics, and stock photo defined in the catalog product are used to create the listing. <br>
	// <br>
	// You cannot use HTML or JavaScript in the Title. (HTML characters will be
	// interpreted literally as plain text.)<br>
	// <br>
	// The listing title can only be changed if the active listing has yet to have any bids or sales, and the listing does not end within 12 hours.
	// <br>
	//
	Title string `xml:"Title,omitempty"`

	//
	// Universally unique constraint tag. Use <b>UUID</b> to ensure that you only list a
	// particular item once, particularly if you are listing many items at once. If
	// you add an item and do not get a response, resend the request with the same
	// <b>UUID</b>. If the item was successfully listed the first time, you will receive
	// an error message for trying to use a <b>UUID</b> that you have already used. The
	// error will also include the item ID for the duplicated item and a boolean
	// value indicating whether the duplicate <b>UUID</b> was sent by the same application.
	// <br><br>
	// We recommend you use <b>Item.UUID</b> with calls that add item objects (for example, <b>AddItem</b>
	// and <b>RelistItem</b>). For calls that modify an existing item, such as ReviseItem, use
	// InvocationID instead.
	// <br><br>
	// The <b>UUID</b> can only contain digits from 0-9 and letters from A-F and must be
	// 32 characters long. The <b>UUID</b> value must be unique across all item listings
	// on all sites.
	// <br>
	//
	UUID *UUIDType `xml:"UUID,omitempty"`

	//
	// This container is used in an Add/Revise/Relist call to set the VAT (Value-added Tax) percentage rate that will be charged to buyers when an item is purchased from the listing, and to enable Business Seller-related features.
	// <br><br>
	// This container is returned in 'Get' calls only if VAT is applicable to the listing, and unless the person making the 'Get' call owns the listing, only the <b>VATPercent</b> field is returned (if applicable). However, Business Seller-related information will be returned to all users in 'Get' calls under the <b>SellerInfo</b> and <b>BusinessSellerDetails</b> containers.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// VAT is not applicable to all countries, including the US. Allowed VAT percentage rates can vary by region/country, so sellers should be aware of the rates they are legally required/allowed to charge. Sellers must be registered as Business Sellers on the site they are selling on in order to use the Business Seller-related fields.
	// </span>
	//
	VATDetails *VATDetailsType `xml:"VATDetails,omitempty"`

	//
	// This field is returned if the seller of the item is currently on vacation and that seller has turned on the Store vacation setting, and has included a message to display to shoppers who visit the eBay store. If the seller turns on the Store vacation setting, the listing will be hidden from search result pages.
	// <br/><br/>
	// Store vacation settings, including this note, are set through the <b>Messages</b> tab in My eBay, or this message can also be set through the <b>SetStorePreferences</b> call.
	// <br/><br/>
	// The Store vacation setting is only applicable for sellers with eBay stores.
	//
	SellerVacationNote string `xml:"SellerVacationNote,omitempty"`

	//
	// The number of watches placed on this item from buyers' My eBay accounts.
	// Specify <b>IncludeWatchCount</b> as <code>true</code> in the request.
	// Returned by <b>GetMyeBaySelling</b> only if greater than 0.
	//
	WatchCount int64 `xml:"WatchCount,omitempty"`

	//
	// This value indicates the number of page views for the listing. This number is calculated by eBay and is returned in 'Get' calls if the <b>HitCounter</b> value is set to <code>BasicStyle</code>,
	// <code>RetroStyle</code>, or <code>HiddenStyle</code>. If the <b>HitCounter</b> value is set to <code>HiddenStyle</code> or <code>NoHitCounter</code>, <b>HitCount</b> is only returned if the
	// one making the call is the item's seller.
	//
	HitCount int64 `xml:"HitCount,omitempty"`

	//
	// If <code>true</code>, all buyer requirements (from <b>Item.BuyerRequirementDetails</b>
	// or Buyer requirements preferences in My eBay) are ignored.
	// <br>
	// <br>
	// If <code>false</code> (or omitted): <b>Item.BuyerRequirementDetails</b> or Buyer
	// requirements preferences are used, with <b>Item.BuyerRequirementDetails</b>
	// having the higher precedence.
	// <br>
	//
	DisableBuyerRequirements bool `xml:"DisableBuyerRequirements,omitempty"`

	//
	// <b>For Add/Revise/Relist/Verify calls</b>: This container is used to enable the Best Offer feature on a listing. Note that the Best Offer feature can be set for auction listings on the US, Canada, UK, Germany, Australia, France, Italy, and Spain marketplaces, but a seller can only use Best Offer or Buy It Now, but not both. Once an auction listing receives a qualifying bid, the  Best Offer feature will be turned off and any pending Best Offers or Counteroffers will no longer be valid.
	// <br><br>
	// For <b>GetItem</b> and other calls that retrieve item data, this container will include the status (<b>GetMyeBayBuying</b> only) and dollar amount of the latest Best Offer on a fixed-price listing, and the number of Best Offers received for the fixed-price listing.
	//
	BestOfferDetails *BestOfferDetailsType `xml:"BestOfferDetails,omitempty"`

	//
	// If <code>true</code>, eBay provided a central location as a result of the user
	// not specifying a location. This typically occurs when the seller
	// specifies <b>PostalCode</b> without Location.
	//
	LocationDefaulted bool `xml:"LocationDefaulted,omitempty"`

	//
	// Indicates whether the seller's tax table is to be used when applying and
	// calculating sales tax for an order line item. A sales tax table can be
	// created programmatically using the <b>SetTaxTable</b> call, or it can be created
	// manually in My eBay's Payment Preferences. If <b>UseTaxTable</b> is set to <code>true</code>,
	// the values contained in the seller's sales tax table will supersede the values contained in the <b>Item.ShippingDetails.SalesTax</b> container (if included in the request).
	//
	UseTaxTable bool `xml:"UseTaxTable,omitempty"`

	//
	// This field is deprecated.
	//
	GetItFast bool `xml:"GetItFast,omitempty"`

	//
	// Applicable for listings in vehicle categories on the US eBay Motors site and
	// eBay Canada site. (No business effect if specified for other categories or
	// sites, as the Web site will not display the information to buyers.)
	// <b></b>
	// <ul>
	// <li>If <code>true</code>,
	// the buyer is responsible for vehicle pickup or shipping. </li>
	// <li>If <code>false</code>, specify
	// vehicle shipping arrangements in the item description.  (The
	// description can also include vehicle shipping arrangements when this value is
	// <code>true</code>.)  </li>
	// </ul>
	// <b></b>
	// If the item has bids or ends within 12 hours, you cannot modify this
	// flag. Do not specify <b>ShippingDetails.ShippingServiceOptions</b>
	// for vehicle listings.
	// <br><br>
	// If <code>true</code> and the listing is on the US eBay Motors site, and you want the
	// listing to be visible on the eBay Canada site, set <b>Item.ShipToLocations</b> to CA.
	// <br><br>
	// If <code>true</code> and the listing is on the eBay Canada site, and you want your listing
	// to be visible on the US eBay Motors site, set <b>Item.ShipToLocations</b> to US.
	// <br>
	//
	BuyerResponsibleForShipping bool `xml:"BuyerResponsibleForShipping,omitempty"`

	//
	// This field is deprecated.
	//
	LimitedWarrantyEligible bool `xml:"LimitedWarrantyEligible,omitempty"`

	//
	// Returns a note from eBay displayed below items in the user's My
	// eBay account.
	//
	EBayNotes string `xml:"eBayNotes,omitempty"`

	//
	// Specifies the number of questions buyers have posted about the
	// item. Returned only if greater than 0.
	//
	QuestionCount int64 `xml:"QuestionCount,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the item in this listing was relisted. When an item is relisted, a brand new Item ID value is automatically created by eBay. This field is only returned for an original listing whose item has been relisted, so a <code>false</code> value should never get returned.
	// <span class="tablenote"><b>Note: </b>
	// A new listing will not return this field.
	// </span>
	//
	Relisted bool `xml:"Relisted,omitempty"`

	//
	// This integer value indicates the quantity of an item that is still available for purchase in a multiple-quantity, fixed-price listing. This field is not applicable to auction listings.
	//
	QuantityAvailable int32 `xml:"QuantityAvailable,omitempty"`

	//
	// A SKU (Stock Keeping Unit) value is a seller-defined identifier for a product. Each product within a seller's inventory should be unique. Most large-volume sellers use SKUs, but eBay only requires a SKU value if the <b>InventoryTrackingMethod</b> field is included in an <b>AddFixedPriceItem</b> call and its value is set to <code>SKU</code>. Setting the <b>InventoryTrackingMethod</b> field to <code>SKU</code> allows the seller to use a SKU value instead of an <b>ItemID</b> value as a unique identifier
	// in calls such as <b>GetItem</b> and <b>ReviseInventoryStatus</b>
	// <br><br>
	// A seller can specify a SKU when listing an item with <b>AddItem</b>
	// and related calls. eBay preserves the SKU on the item, enabling you
	// to obtain it before and after an order line item is created.
	// (<b>SKU</b> is recommended as an alternative to <b>ApplicationData</b>.)
	// <br>
	// <br>
	// If both <b>ItemID</b> and <b>SKU</b> are specified in calls that support the use of
	// SKU as a unique identifier, the <b>ItemID</b> value takes precedence.<br>
	// <br>
	// If a seller wants to use SKUs for multiple-variation listings, the SKU value for each product variation is actually specified at the variation level (Item.Variations.Variation.<b>SKU</b>) field, and the Item.<b>SKU</b>) field should not be included in the call request.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The eBay site cannot identify listings by SKU. For example,
	// My eBay pages and Search pages all identify listings by item ID.
	// When a buyer contacts you via eBay's messaging functionality, eBay
	// uses the item ID as the identifier. Buyer-focused APIs (like the
	// Shopping API) also do not support SKU as an identifier.
	// </span>
	// <b>For revising and relisting only:</b>
	// To remove a SKU when you revise or relist an item, use <b>DeletedField</b>.
	// (You cannot remove a SKU when <b>Item.InventoryTrackingMethod</b> is set
	// to SKU.)<br>
	// <br>
	// For <b>GetItem</b>, <b>GetMyeBaySelling</b>, and other 'Get' call, the <b>SKU</b> value will only be returned if defined for the listing.
	// <br>
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// This field is deprecated.
	//
	SearchDetails *SearchDetailsType `xml:"SearchDetails,omitempty"`

	//
	// Postal code of the place where the item is located. This value is used for
	// proximity searches. To remove this value when revising or relisting an item,
	// use <b>DeletedField</b>. If you do not specify <b>PostalCode</b>, you must specify
	// <b>Item.Location</b>. If you specify <b>PostalCode</b>, but do not specify <b>Item.Location</b>,
	// then <b>Item.Location</b> is given a default value derived from the postal code.
	//
	PostalCode string `xml:"PostalCode,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> A <b>SellerInventoryID</b> value is only applicable to Half.com listings, and since the Half.com site has been shut down, this field is no longer applicable.
	// </span>
	// Unique identifier for a Half.com item. Must be an alphanumeric value (with no
	// symbols) that is unique across the seller's active (unsold) inventory on
	// Half.com. For Half.com, you can specify either <b>ItemID</b> or <b>SellerInventoryID</b> in
	// a <b>ReviseItem</b> request to uniquely identify the listing. Only returned from
	// <b>GetOrders</b> if the seller specified a value when the item was listed. You cannot
	// revise this field.
	// <br><br>
	// Not applicable to eBay.com listings.
	//
	SellerInventoryID string `xml:"SellerInventoryID,omitempty"`

	//
	// This container consists of the data associated with photos within the listing. With most eBay sites and categories, a seller can add up to 12 photos to their listings free of charge. These photos can be hosted by eBay Picture Services (EPS), or the seller can host pictures on a non-eBay server. If pictures are externally-hosted, they must be hosted on a site that is using the 'https' protocol.
	// <br/><br/>
	// It is required that all listings have at least one picture. eBay Motors listings can have up to 24 pictures.
	//
	PictureDetails *PictureDetailsType `xml:"PictureDetails,omitempty"`

	//
	// Specifies the maximum number of business days the seller
	// commits to for preparing an item to be shipped after receiving a
	// cleared payment. This time does not include the shipping time (the carrier's transit time).
	// <br><br>
	// <span class="tablenote"><b>Note:</b> If the seller opts into the eBay Guaranteed Delivery feature and wants to make a listing eligible for eBay Guaranteed Delivery, the <b>DispatchTimeMax</b> value must be set to <code>0</code> or <code>1</code> (days) and cumulative value of <b>DispatchTimeMax</b> plus the transit time of the shipping service (returned in  <b>ShippingServiceDetails.ShippingTimeMax</b> field of <b>GeteBayDetails</b>) must be 3 business days or less to be eligible for this feature. See the <a href="https://pages.ebay.com/seller-center/shipping/ebay-guaranteed-delivery.html" target="_blank">eBay Guaranteed Delivery</a> page in Seller Center for more information on this program.
	// </span>
	// <br>
	// <b>For Add/Revise/Relist calls:</b> Required for
	// listings in certain categories when certain shipping services
	// (with delivery) are offered. See <b>HandlingTimeEnabled</b> in
	// <b>GetCategoryFeatures</b>.<br>
	// <br>
	// The seller sets this to a positive integer value corresponding to the number of days. For a list of allowed values
	// on each eBay site, use <b>DispatchTimeMaxDetails</b> in <b>GeteBayDetails</b>.
	// (Typical values are <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>10</code>, <code>15</code>, or <code>20</code>, but this can vary
	// by site and these may change over time.)<br>
	// <br>
	// Valid for flat and calculated shipping. Does not apply when
	// there is no shipping, when it is local pickup only or it is freight shipping. For example, when <b>ShippingService</b> = <code>Pickup</code> or
	// <b>ShipToLocations</b> = <code>None</code>, then <b>DispatchTimeMax</b> is not required (or it can be <code>0</code>).<br>
	// <br>
	// <b>For ReviseItem only:</b>
	// If the listing has bids or sales and it ends within 12 hours, you can't change this value.
	// If the listing is a GTC listing that has sales or ends within 12 hours
	// (one or the other, but not both), you can add or change this value.
	// If the listing has no bids or sales and more than 12 hours remain before
	// the listing ends, you can add or change the dispatch (handling) time.<br>
	// <br>
	// <b>For GetItem:</b> <b>GetItem</b> returns <b>DispatchTimeMax</b>
	// only when shipping service options are specified for the item and
	// the seller specified a dispatch time.
	//
	DispatchTimeMax int32 `xml:"DispatchTimeMax,omitempty"`

	//
	// This field is deprecated. This information is returned in <b>BestOfferDetails</b>.
	//
	BestOfferEnabled bool `xml:"BestOfferEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	LocalListing bool `xml:"LocalListing,omitempty"`

	//
	// Contact information for sellers using the Classified Ad format for eBay
	// Motors vehicles categories. To remove seller contact information when
	// revising or relisting an item, use <b>DeletedField</b>. The seller contact details
	// for the primary and secondary phone numbers cannot be deleted
	// individually.
	// <br><br>
	// To provide City, State, and Zip code information in
	// <b>SellerContactDetails</b> use the following field:<br>
	// <b>Item.SellerContactDetails.Street2</b>
	// <br><br>
	// To delete the secondary phone number, for example, you must delete all of
	// the secondary phone fields:<br>
	//
	// <code>Item.SellerContactDetails.Phone2AreaOrCityCode<br>
	// Item.SellerContactDetails.Phone2CountryCode<br>
	// Item.SellerContactDetails.Phone2CountryPrefix<br>
	// Item.SellerContactDetails.Phone2LocalNumber
	// </code>
	//
	SellerContactDetails *AddressType `xml:"SellerContactDetails,omitempty"`

	//
	// The number of questions asked about this item. Applies to eBay Motors Pro
	// applications only.
	//
	TotalQuestionCount int64 `xml:"TotalQuestionCount,omitempty"`

	//
	// Some listings on the eBay platform originate from eBay affiliates.
	// Depending on the relationship the affiliate has with eBay, there are times
	// when the affiliate retains ownership of the listing. When this occurs
	// the representation of the listing on eBay is considered a proxy item. Proxy
	// items can only be edited using API requests from the applications that
	// originally listed them.
	//
	ProxyItem bool `xml:"ProxyItem,omitempty"`

	//
	// Extended contact information for sellers using the Classified Ad format.
	// Specifies the days and hours when the seller can be contacted.
	// To remove seller contact information when revising or relisting an item, use
	// <b>DeletedField</b>.
	//
	ExtendedSellerContactDetails *ExtendedContactDetailsType `xml:"ExtendedSellerContactDetails,omitempty"`

	//
	// Specifies the number of leads (emails) buyers have posted about the item.
	// You must be the seller of the item to retrieve the lead count.
	//
	LeadCount int32 `xml:"LeadCount,omitempty"`

	//
	// Specifies the number of new leads (unanswered emails) buyers have posted
	// about the item.
	//
	NewLeadCount int32 `xml:"NewLeadCount,omitempty"`

	//
	// This container is a list of Item Specific <b>Name</b>/<b>Value</b> pairs used by the seller to provide desciptive details of an item in a structured manner.
	//
	// <br><br>
	// If creating, revising, or relisting an item with an <b>Add</b>, <b>Revise</b>, or <b>Relist</b> call, it is recommended that you use the <b>GetCategorySpecifics</b> call to retrieve mandatory and recommended Item Specifics for a listing category.
	//
	// <br><br>
	// <b>For ReviseItem only:</b> When you revise a listing, if an auction listing has one or more bids and ends within 12 hours, you cannot change or add Item Ppecifics. If the auction listing has bids but ends in more than 12 hours, you cannot change existing Item Specifics, but you can add Item Specifics that were not previously included.
	//
	// <br><br>
	// If your listing is in a eBay product catalog-enabled category, certain <b>Name</b>/<b>Value</b> pairs will be accepted as product identifying information. The <b>Name</b> can be <code>Brand</code>, <code>MPN</code>, or a Global Trade Item Number (GTIN). GTINs are a set of globally recognized identifiers, including <code>EAN</code>, <code>ISBN</code>, and <code>UPC</code>. However, the <b>Values</b> provided for these <b>Name</b>s must comply with eBay's constraints or they will not be recognized as product identifiers. The <b>Value</b> for Brand must be an actual brand name (except that if the item is not branded, <b>Value</b> can be <code>Unbranded</code>.) The <b>Value</b> for Brand or MPN cannot contain only special characters (e.g. <code>%$*#@</code>). All GTINs must comply with international formatting standards. For more details, see <a href="https://developer.ebay.com/devzone/guides/ebayfeatures/Development/ItemSpecifics-Listing.html" target="_blank">Listing with Item Specifics</a>.
	//
	// <br><br>
	// If the <b>ProductListingDetails</b> container in an Add/Revise/Relist call is successfully used to find and use an eBay catalog product to create/revise listing, the seller cannot remove or change the value of any Item Specific that is defined as part of the eBay catalog product definition.
	//
	// <br><br>
	// <span class="tablenote"><b>Note:</b> If the item is being listed in a Product-Based Shopping Experience (PBSE) category where an eBay Catalog product is being used, the seller should not pass in any Item Specifics that are already defined in the eBay Catalog product. Sellers can make a <b>GetCategorySpecifics</b> call to see if the listing category supports any 'instance aspects', which can be thought of as Item Specifics that are unique to the specific item that is being listed. Instance aspects are identified in the response by looking for a value of <code>Instance</code> in one or more <b>NameRecommendation.ValidationRules.aspectUsage</b> fields.  Many PBSE categories now support the following instance aspects: <em>Custom Bundle</em>, <em>Bundle Description</em>, <em>Modified Item</em>, <em>Modification Description</em>, and <em>California Prop 65 Warning</em>. These instance aspects allow the seller to provide more information about product bundles or modified products in a structured way. Depending on the category, there are other instance aspects as well. For more information about creating bundle listings or modified product listings in PBSE categories, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse-special-listings.html" target="_blank">Associating catalog products to special listings</a> topic in the PBSE Playbook.
	// </span>
	//
	// <span class="tablenote"><b>Note:</b> To specify an item's condition, use the <b>ConditionID</b> field instead of a condition Item Specific. Use <b>GetCategoryFeatures</b> to see which categories support <b>ConditionID</b> and to get a list of valid condition IDs. (If you specify <b>ConditionID</b> and you also specify <b>Condition</b> as a Item Specific, eBay drops the condition Item Specific.)
	// </span>
	//
	// <b>For GetItem</b>: This list is returned only when you specify <b>IncludeItemSpecifics</b> in the request (and the seller included Item Specifics in their listing).
	//
	// <br><br>
	// To delete all Item Specifics when you revise or relist, specify <b>Item.ItemSpecifics</b> in <b>DeletedField</b>, and don't pass <b>ItemSpecifics</b> in the request.
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`

	//
	// This field is deprecated.
	//
	GroupCategoryID string `xml:"GroupCategoryID,omitempty"`

	//
	// The email and phone lead fee for a pay-per-lead item.
	//
	ClassifiedAdPayPerLeadFee *AmountType `xml:"ClassifiedAdPayPerLeadFee,omitempty"`

	//
	// This field is deprecated.
	//
	BidGroupItem bool `xml:"BidGroupItem,omitempty"`

	//
	// Different Buyer protection schemes and the various status associated with each one of them.
	//
	ApplyBuyerProtection *BuyerProtectionDetailsType `xml:"ApplyBuyerProtection,omitempty"`

	//
	// Indicates a specific type of lead generation format listing, such as
	// classified ad or local market best offer listing. Only applicable when
	// <b>ListingType</b> = <b>LeadGeneration</b>.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b>
	// <b>ListingSubtype2</b> replaces the deprecated <b>ListingSubtype</b> field.
	// If both are specified in a request, <b>ListingSubtype2</b> takes precedence.
	// </span>
	//
	ListingSubtype2 *ListingSubtypeCodeType `xml:"ListingSubtype2,omitempty"`

	//
	// Indicates whether the seller allows the bidder to request mechanical
	// inspection services from RAC. For the Car category listings on the UK site.
	//
	MechanicalCheckAccepted bool `xml:"MechanicalCheckAccepted,omitempty"`

	//
	// Specifies whether the following Business Seller fields have been updated for
	// the item specified in the request: First Name, Last Name, Fax, Email
	// Address, Additional Contact Information, Trade Registration Number, VAT
	// Identification Number.
	//
	UpdateSellerInfo bool `xml:"UpdateSellerInfo,omitempty"`

	//
	// Specifies whether the Return Policy Details have been updated
	// for the item specified in the request.
	//
	UpdateReturnPolicy bool `xml:"UpdateReturnPolicy,omitempty"`

	//
	// Specifies the details of policy violations if the item was administratively
	// canceled.
	//
	ItemPolicyViolation *ItemPolicyViolationType `xml:"ItemPolicyViolation,omitempty"`

	//
	// This field is used by sellers who want their listing to be returned in the search
	// results for other eBay sites. This feature is currently only supported by the US, UK,
	// eBay Canada, and eBay Ireland sites. See <a href="
	// https://pages.ebay.com/help/sell/globalexposure.html">Getting exposure on
	// international sites</a> for full requirements on using this feature. There is a
	// small listing fee for each country specified as a Cross Border Trade country.
	// <br><br>
	// US listings that offer shipping to Canada, North America, or worldwide are
	// automatically returned on eBay.ca at no extra charge, so US listings that offer
	// shipping to these locations do not need to specify Canada as a Cross Border Trade
	// country.
	//
	CrossBorderTrade []string `xml:"CrossBorderTrade,omitempty"`

	//
	// Returns the seller's information (in a business card format)
	// if the seller's <b>SellerBusinessCodeType</b> is set to <code>Commercial</code>.
	// This is only applicable for sites where Business Seller options
	// are supported.
	//
	BusinessSellerDetails *BusinessSellerDetailsType `xml:"BusinessSellerDetails,omitempty"`

	//
	// For the Australia site, <b>BuyerGuaranteePrice</b> is the PayPal Buyer Protection
	// coverage, offered for the item at the time of purchase. Details of coverage
	// are in the following sections of the View Item page: the Buy Safely section
	// and the Payment Details section.
	//
	BuyerGuaranteePrice *AmountType `xml:"BuyerGuaranteePrice,omitempty"`

	//
	// When this container is present in an <b>AddItem</b> or <b>AddFixedPriceItem</b> call, all
	// buyer requirements for the resulting listing are set by this container.
	// Furthermore, individual buyer requirements cannot be modified or added when
	// including this container in a <b>ReviseItem</b> call.
	// The <b>ReviseItem</b> call needs to
	// provide the entire set of buyer requirements to modify or add any of the
	// requirements.
	// <br/><br/>
	// Unless otherwise specified, most buyer requirements are only
	// returned if the caller is the seller. All global My eBay Buyer Requirements
	// are overridden by the contents of this container. This means that buyer
	// requirements set in My eBay cannot be combined with buyer requirements
	// included in this container.
	//
	BuyerRequirementDetails *BuyerRequirementDetailsType `xml:"BuyerRequirementDetails,omitempty"`

	//
	// Describes the seller's return policy. Most categories on most
	// eBay sites require the seller to clearly specify whether or not
	// returns are accepted (see <b>ReturnsAcceptedOption</b>). <br>
	// <br>
	// <span class="tablenote"><b>Note: </b> If you set up a return policy via the <a href="https://developer.ebay.com/api-docs/sell/account/resources/return_policy/methods/createReturnPolicy">Account API</a> or the <a href="https://developer.ebay.com/Devzone/business-policies/CallRef/addSellerProfile.html">Business Polices Managment API</a>, then you should not populate the fields in this <b>ReturnPolicy</b> container. Instead, indicate your return policy using the <b>SellerProfiles.SellerReturnProfile</b> container.
	// <br>
	// <br>
	// However, if you <i>do not</i> configure a return policy, all the fields in this <b>ReturnPolicy</b> container that are marked <b>conditional</b> must be populated in your request.
	// </span>
	// <br>
	// <b>For the <b>AddItem</b> family of calls:</b> Required for
	// most categories on most sites. Use <b>ReturnPolicyEnabled</b>
	// in <b>GetCategoryFeatures</b> to determine which categories require this
	// field. Also use <b>ReturnPolicyDetails</b> in <b>GeteBayDetails</b> to determine
	// which <b>ReturnPolicy</b> fields can be used on each site.<br>
	// <br>
	// Australia (AU) and US eBay Motors
	// Parts and Accessories categories typically support but do not
	// require a return policy. (However, we strongly recommend that
	// you specify a clear return policy whenever possible.)<br>
	// <br>
	// <b>For ReviseItem only:</b> If the listing has bids or
	// sales and it ends within 12 hours, you can't change the return policy
	// details. If the listing is a GTC listing that has sales or ends within 12
	// hours (one or the other, but not both), you can add a return policy to the
	// GTC listing (but you can't change return policy details if already present).
	// If the listing has no bids or sales and more than 12 hours remain before the
	// listing ends, you can add or change the return policy. When you revise your
	// return policy, you only need to specify the fields you want to add or
	// change. You don't need to specify all the other <b>ReturnPolicy</b> fields again.
	// The other fields will retain their existing settings.<br>
	// <br>
	// <b>For the GetItem family of calls:</b> Only returned if the
	// site you sent the request to supports the seller's return policy. Typically,
	// the return policy details are only returned when the request is sent to the
	// listing site.
	// <br><br>
	// <span class="tablenote"><b>Note:</b> Currently, the <b>GeteBayDetails</b> call is used to retrieve return policy metadata. However, starting in September 2018, the <b>GetCategoryFeatures</b> call will start returning category-level metadata for both domestic and international return policies, and developers should make plans to use that call for this metadata.</span>
	//
	ReturnPolicy *ReturnPolicyType `xml:"ReturnPolicy,omitempty"`

	//
	// Enables you to view the sites on which an item can be purchased,
	// based on the payment methods offered for the item.
	//
	PaymentAllowedSite []*SiteCodeType `xml:"PaymentAllowedSite,omitempty"`

	//
	// Indicates whether you prefer to track your eBay listings by eBay Item ID or
	// by your own SKU. <br>
	// <br>
	// If a seller will be converting an existing eBay listing into the new Inventory model using the <b>bulkMigrateListings</b> call of the <b>Inventory API</b>, the <b>InventoryTrackingMethod</b> value must be set to <code>ItemID</code> (default value), but the item must also have a SKU value (Item.<b>SKU</b> or Variation.<b>SKU</b>) associated with it.
	// <b>For GetItem and related calls</b>:
	// Only returned when the value is <code>SKU</code>; not returned when the value is <code>ItemID</code>.
	//
	InventoryTrackingMethod *InventoryTrackingMethodCodeType `xml:"InventoryTrackingMethod,omitempty"`

	//
	// Indicates whether the item can be paid for through a payment gateway
	// (Payflow) account. If <b>IntegratedMerchantCreditCardEnabled</b> is <code>true</code>, then
	// integrated merchant credit card (IMCC) is enabled for credit cards because
	// the seller has a payment gateway account. Therefore, if
	// <b>IntegratedMerchantCreditCardEnabled</b> is <code>true</code>, and AmEx, Discover, or VisaMC
	// is returned for an item, then on checkout, an online credit-card payment is
	// processed through a payment gateway account. A payment gateway account is
	// used by sellers to accept online credit cards (Visa, MasterCard, American
	// Express, and Discover).
	//
	IntegratedMerchantCreditCardEnabled bool `xml:"IntegratedMerchantCreditCardEnabled,omitempty"`

	//
	// Variations are multiple similar (but not identical) items in a
	// single fixed-price listing. For example, a T-shirt listing
	// could contain multiple items of the same brand
	// that vary by color and size (like "Blue, Large" and
	// "Black, Medium"). Each variation specifies a combination of one of
	// these colors and sizes. Each variation can have a different
	// quantity and price. You can buy multiple items from one
	// variation at the same time. (That is, one order line item can contain
	// multiple items from a single variation.) <br>
	// <br>
	// If you list in two categories, both categories must support
	// listing with variations. See <b>VariationsEnabled</b> in
	// <b>GetCategoryFeatures</b> to determine applicable categories.<br>
	// <br>
	// <b>For ReviseFixedPriceItem and
	// RelistFixedPriceItem:</b> Once a listing has been submitted with variations,
	// you can't delete all the variations when you revise or relist the listing (because
	// it would be considered a different listing). You also can't add or change variation
	// specifics (because they are unique identifiers). However, you can delete or replace
	// individual variations as needed to match your current inventory. If a variation has
	// no purchases, use the <b>Variation.Delete</b> field to delete the variation. If it has
	// inventory, set the Quantity to 0.<br>
	// <br>
	// As a best practice, if you want to revise multiple variations in
	// the same listing at the same time (i.e., within a very short period),
	// use a single <b>ReviseFixedPriceItem</b> request and include all the
	// variation revisions in the same request. If your application design
	// requires you to revise each variation individually, then avoid using
	// multiple parallel threads. Instead, use a serial, synchronous
	// process. That is, wait until each revision has been
	// processed by eBay before submitting the next revision request for
	// another variation in the same listing.<br>
	// <br>
	// <b>For GetItem and related calls</b> Only returned
	// when a listing has variations.
	// <br><br>
	// <b>For GetSellerList:</b> Only returned when a listing
	// has variations, <b>IncludeVariations</b> was set to <code>true</code> in the request,
	// the <b>DetailLevel</b> was set to <b>ReturnAll</b>, and an applicable pagination
	// value and time range were specified.<br>
	// <br>
	// <b>For GetItemTransactions</b> Only returned in Item
	// when a listing has variations and <b>IncludeVariations</b> was set to <code>true</code>
	// in the request. (Also see <b>Variation</b> returned in <b>Transaction</b> for
	// information about which variation was actually purchased.)
	// <br>
	// <br>
	// <b>For GetSellerEvents, GetMyeBayBuying, and GetMyeBaySelling:</b> Only returned
	// when a listing has variations and <b>HideVariations</b> was set to <code>false</code>
	// or not specified in the request.
	//
	Variations *VariationsType `xml:"Variations,omitempty"`

	//
	// A list of parts compatibility information specified as name and value pairs.
	// Describes an assembly with which a part is compatible (i.e., compatibility by
	// application). For example, to specify a part's compatibility with a vehicle,
	// the name (search name) would map to standard vehicle characteristics (e.g.,
	// Year, Make, Model, Trim, and Engine). The values would describe the specific
	// vehicle, such as a 2006 Honda Accord. Use the <b>Product Metadata API</b> to
	// retrieve valid search names and corresponding values.
	// <br><br>
	// <b>For the <b>AddItem</b> family of calls:</b> Use this for specifying
	// parts compatibility by application manually. This can only be used in
	// categories that support parts compatibility by application. Use <b
	// class="con">GetCategoryFeatures</b> with the <b>CompatibilityEnabled</b>
	// feature ID to determine which categories support parts compatibility by
	// application.
	// <br><br>
	// <b>For ReviseFixedPriceItem and ReviseItem:</b> When you revise a
	// listing, if the listing has bids and/or ends within 12 hours, item
	// compatibilities cannot be deleted. You may add item compatibilities at any
	// time.
	// <br><br>
	// <b>For GetItem:</b> <b
	// class="con">ItemCompatibilityList</b> is only returned if the
	// seller included item compatibility in the listing and <b
	// class="con">IncludeItemCompatibilityList</b> is set to <code>true</code> in the
	// <b>GetItem</b> request.
	// <br><br>
	//
	ItemCompatibilityList *ItemCompatibilityListType `xml:"ItemCompatibilityList,omitempty"`

	//
	// Indicates the number of compatible applications specified for the given item.
	// Applies to items listed with fitment by application only (either manually or
	// with a catalog product that supports compatibility).
	// <br><br>
	// Not returned if the item has no specified compatible applications. Not
	// returned if <b>IncludeItemCompatibilityList</b> is
	// specified in the request.
	// <br><br>
	// To retrieve the list of compatibility information, set <b>
	// IncludeItemCompatibilityList</b> to <code>true</code> in the request.
	// <br><br>
	// Parts Compatibility is supported in limited Parts & Accessories
	// categories for the eBay Motors (US) site (site ID 100) only.
	//
	ItemCompatibilityCount int32 `xml:"ItemCompatibilityCount,omitempty"`

	//
	// This is a numeric identifier for an item's condition. All numeric Condition ID values map to an item condition string value. For example, numeric identifer <code>1000</code> maps to <code>New</code> condition.
	// <br><br>
	// Most eBay categories require an item condition, but a few eBay categories do not. To verify if the listing category requires an item condition, and if so, what are the supported item condition and <b>ConditionID</b> values, you can call <b>GetCategoryFeatures</b>. In this <b>GetCategoryFeatures</b> call, you'd pass in the listing <b>CategoryID</b> value and two <b>FeatureID</b> fields - one of these fields set to <code>ConditionEnabled</code>, and the other field set to <code>ConditionValues</code>.
	// <br><br>
	// In the <b>GetCategoryFeatures</b> response, look at the Category.<b>ConditionEnabled</b> to see if item condition is required for the category. Then look at the Category.<b>ConditionValues</b> container in the response for the full list of Condition IDs that you can pass in through the <b>ConditionID</b> field of an Add/Revise/Relist/Verify call. Note that the Condition.<b>DisplayName</b> value in the response is the actual condition value that will appear in the actual eBay listing.
	// <br>
	// <br>
	// If you pass in a <b>ConditionID</b> value
	// that is not valid for the category, or if you don't pass in a <b>ConditionID</b> value at all for a category that requires it, the listing request fails.
	// <br><br>
	// If you are listing in two categories (using a secondary category), it is the primary listing category that determines which <b>ConditionID</b> values are supported.
	// <br><br>
	// <b>For Revise/Relist calls:</b> In most cases, you can change the  <b>ConditionID</b> value (if applicable/warranted), with the exception being an auction listing that has one or more bids, or any listing that is scheduled to end in 12 hours or less. <br>
	// <br>
	// <b>For GetItem:</b> The
	// <b>ConditionID</b> value is always returned if set for the listing. <b>GetItem</b> also returns
	// the item condition string value in the <b>ConditionDisplayName</b> field.
	//
	ConditionID int32 `xml:"ConditionID,omitempty"`

	//
	// This string field is used by the seller to more clearly describe the condition of items that are not brand new.
	// <br>
	// <br>
	// The <b>ConditionDescription</b> field is available for all categories, including categories where the condition type is not applicable (e.g., Antiques). This field is applicable for all item conditions except 'New', 'Brand New', 'New with tags', and 'New in box'. If <b>ConditionDescription</b> is used with these conditions (Condition IDs 1000-1499), eBay will simply ignore this field if included, and eBay will return a warning message to the user.
	// <br>
	// <br>
	// This field should only be used to further clarify the condition of the used item. For example, "The right leg of the chair has a small scratch, and on the seat back there is a light blue stain about the shape and size of a coin." It should not be used for branding, promotions, shipping, returns, payment or other information unrelated to the condition of the item. Make sure that the condition type (<b>Item.ConditionID</b>), condition description, item description (<b>Item.Description</b>), and the listing's pictures do not contradict one another.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The <b>ConditionDescription</b> field is optional For <b>Add</b>/<b>Revise</b>/<b>Relist</b> API calls.
	// <b>ConditionDescription</b> is currently supported on the eBay US and US eBay Motors (0), UK (3), CA (2), CAFR (210), AU (15), AT (16), BEFR (23), BENL (123), FR (71), DE (77), IT (101), NL (146), ES (186), CH (193), IE (205) and PL (212) sites.
	// </span>
	// <br>
	// The <b>ConditionDescription</b> field is returned by <b>GetItem</b> (and other related calls that return the Item object) if a condition description is specified in the listing.
	// <br>
	//
	ConditionDescription string `xml:"ConditionDescription,omitempty"`

	//
	// The human-readable label for the item condition.
	// Display names are localized for the site on
	// which they're listed (not necessarily the site on which
	// they're viewed).<br>
	// <br>
	// Most categories use the same display name for the
	// same condition ID. Some categories may override the display name
	// based on buyer expectations for items in the category.
	// For example, condition ID 1000 could be called
	// "New" in one category and "New with tags" in another.<br>
	// <br>
	// Behind the scenes, eBay's search engine uses the ID
	// (not the display name) to determine whether items are
	// new, used, or refurbished.<br>
	// <br>
	// Only returned when the seller specified <b>ConditionID</b> in their
	// listing.
	//
	ConditionDisplayName string `xml:"ConditionDisplayName,omitempty"`

	//
	// Tax exception category code. This is to be used only
	// by sellers who have opted into sales tax being calculated
	// by a sales tax calculation vendor. If you are interested
	// in becoming a tax calculation vendor partner with eBay,
	// contact developer-relations@ebay.com.
	//
	TaxCategory string `xml:"TaxCategory,omitempty"`

	//
	// Indicates the type of message that will be returned describing the quantity
	// available for the item.
	//
	QuantityAvailableHint *QuantityAvailableHintCodeType `xml:"QuantityAvailableHint,omitempty"`

	//
	// The quantity threshold above which the seller prefers not to show the actual
	// quantity available. Returned when the quantity available is greater than the
	// value of quantity threshold. Currently, 10 is the only available value for
	// this threshold.
	//
	QuantityThreshold int32 `xml:"QuantityThreshold,omitempty"`

	//
	// This container provides information for an item that has a Strikethrough Price (STP) or a Minimum Advertised Price (MAP) discount pricing treatment. STP and MAP apply only to fixed-price listings. STP is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites, while MAP is available only on the US site.
	// <br><br>
	// Discount pricing is available to qualified sellers (and their associated developers) who participate in the Discount Pricing Program. Once qualified, sellers receive a 'special account flag' (SAF) that allows them to apply Discount Pricing to both single-variation and multi-variation items. STP is intended for eBay partners and their sellers only.
	// <br><br>
	// As a seller listing Discount Price items, you are required to maintain records of your discount pricing in the event you are called upon to substantiate your item pricing.
	// <br><br>
	// <b>For AddFixedPriceItem, RelistFixedPriceItem, ReviseFixedPriceItem, and VerifyAddFixedPriceItem</b>: If you are listing variations (MSKU items), use <b>Variation.DiscountPriceInfo</b> for each variation.
	//
	DiscountPriceInfo *DiscountPriceInfoType `xml:"DiscountPriceInfo,omitempty"`

	//
	// A descriptive free-text title for a US or CA eBay Motors vehicle listing. This title appears below eBay's pre-filled listing title on the View Item page (not at the top of the View Item page). It's also appended to the listing title in search results (like a subtitle) on the US eBay Motors site. Keywords in this title help buyers find or distinguish your listing.
	// <br><br>
	// Applicable to listings in US eBay Motors Cars and Trucks, Motorcycle, and some of the Powersport, Boats and RV campers categories; or to Cars and Trucks listings on CA eBay Motors.
	// <br><br>
	// This replaces the older US and Canada eBay Motors Subtitle attribute (attribute ID 4148).
	// <br>
	//
	SellerProvidedTitle string `xml:"SellerProvidedTitle,omitempty"`

	//
	// This field displays the Vehicle Identification Number, which is a unique serial number for a motor vehicle.
	// <br><br>
	// This field is applicable to listings in US eBay Motors Cars and Trucks (6001), Motorcycles (6024), Commercial Trucks (63732), RVs and Campers (50054), ATVs (6723), Snowmobiles (42595), and UTVs (173665); and to Cars and Trucks listings in CA, CAFR and AU eBay Motors. For vehicle categories that do not use VIN, call <b>GetCategorySpecifics</b> to determine applicable  Item Specifics (such as 'Hull ID Number' for Boats).
	// <br><br>
	// For the US, CA, and CAFR eBay Motors sites, required for cars and trucks from model year 1981 and later. (The US developed national standards for VIN values in 1981.)
	// <br><br>
	// For the eBay Australia site, required for vehicles from model year 1989 or later. For the eBay Australia site, only appears on the View Item page if you also specify the date of first registration in the listing's Item Specifics.
	// <br><br>
	// Appears in the VIN field in the Item Specifics section of eBay's View Item page.
	// <br>
	//
	VIN string `xml:"VIN,omitempty"`

	//
	// This field is deprecated.
	//
	VINLink string `xml:"VINLink,omitempty"`

	//
	// Vehicle Registration Mark, which is a unique identifier for a motor vehicle in the UK.
	// <br><br>
	// Applicable to listings in UK eBay Motors Cars and Trucks, Motorcycle, and some Powersport categories.
	// <br><br>
	// Appears as a VRM field in the Item Specifics section of eBay's View Item page. On the View Item page, the VRM value is masked (i.e., only a portion of the value is shown to users). In the <b>GetItem</b> response, the VRM is only returned if the call is made by the seller (i.e., the AuthToken is associated with the vehicle's seller).
	//
	VRM string `xml:"VRM,omitempty"`

	//
	// This field is deprecated.
	//
	VRMLink string `xml:"VRMLink,omitempty"`

	//
	// This container is used to set the minimum number of event tickets that should remain available after a buyer makes a purchase. This functionality allows the seller to avoid the possibility of being left with just one event ticket after a sale.
	// <br><br>
	// This container can be used when adding, revising, or relisting event tickets, and it will only be returned in <b>GetItem</b> if set for the listing.
	//
	QuantityInfo *QuantityInfoType `xml:"QuantityInfo,omitempty"`

	//
	// This container is used if the seller would like to use/reference Business Policies to create, revise, relist, or verify their listing. The seller's account must be opted in to Business Policies to use this container. If this container is used, exactly one Payment Business Policy, one Shipping Business Policy, and one Return Business Policy is applied to the listing. If the seller's account is not opted in to Business Policies, that seller may not use this container. Sellers must opt-in to Business Policies through My eBay or by using the <b>optInToProgram</b> call of the <b>eBay Account API</b>.
	// <br><br>
	// If Business Policies are applied to a listing, all payment, shipping, and return policy settings in these policies will override any other payment, shipping, or return policy legacy fields that are included in the call request.
	// <br><br>
	// This container is only returned in 'Get' calls if Business Policies are set for the listing, and the person making the API call is the seller of the listing.
	//
	SellerProfiles *SellerProfilesType `xml:"SellerProfiles,omitempty"`

	//
	// This container is used when the seller wants to override the flat shipping costs for all domestic and/or all international shipping services defined in the Business Policies shipping profile referenced in the <b>SellerProfiles.SellerShippingProfile.ShippingProfileID</b> field. Shipping costs include the cost to ship one item, the cost to ship each additional identical item, and any shipping surcharges applicable to domestic shipping services.
	// <br><br>
	// A <b>ShippingServiceCostOverrideList.ShippingServiceCostOverride</b> container is required for each domestic and/or international shipping service that is defined in the <b>domesticShippingPolicyInfoService</b> and <b>intlShippingPolicyInfoService</b> containers of the Business Policies shipping profile.
	// <br><br>
	// Shipping service cost overrides are a listing-level concept, and the shipping costs specified through each <b>ShippingServiceCostOverrideList.ShippingServiceCostOverride</b> container will not change the shipping costs defined for the same shipping services in the Business Policies shipping profile.
	// <br><br>
	// <b>For Revise and Relist calls</b>: To delete all shipping service cost overrides when you revise or relist, specify <b>Item.ShippingServiceCostOverrideList</b> in <b>DeletedField</b>, and don't pass <b>ShippingServiceCostOverrideList</b> in the request.
	//
	ShippingServiceCostOverrideList *ShippingServiceCostOverrideListType `xml:"ShippingServiceCostOverrideList,omitempty"`

	//
	// This field is reserved for internal or future use.
	//
	//
	ShippingOverride *ShippingOverrideType `xml:"ShippingOverride,omitempty"`

	//
	// Container consisting of dimension and size details related to a shipping package in which an item will be sent. The information in this container is applicable if the seller is using calculated shipping or flat rate shipping using shipping rate tables with weight surcharges. This container is only returned in the <b>Get</b> calls if specified for the item.
	//
	ShippingPackageDetails *ShipPackageDetailsType `xml:"ShippingPackageDetails,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the listing was created by a Top-Rated Seller and the listing has all of the requirements that qualifies it as a Top-Rated Plus listing. The Top-Rated Seller program is only available on the US, UK, and Germany sites. See the
	// <a href="https://pages.ebay.com/help/sell/top-rated.html#what">Top-Rated Seller requirements</a> help topic for more information on qualifying as a Top-Rated Seller and the <a href="https://pages.ebay.com/help/sell/top-rated.html#plus">Top-Rated Plus listing requirements</a> help topic for more information on what a listing must offer to qualify as a Top-Rated Plus listing and get the Top-Rated Plus badge. Information on the overall program can be found on the <a href="https://pages.ebay.com/sellerinformation/build-your-business-online/status-standards/top-rated-seller.html">Top-Rated Seller home page</a> in the Seller Center.
	//
	TopRatedListing bool `xml:"TopRatedListing,omitempty"`

	//
	// This container is used by the seller to restrict the quantity of items that may be purchased by one buyer during the duration of a fixed-price listing (single or multi-variation). This is an optional container that can be used with an <b>Add</b>, <b>Revise</b>, or <b>Relist</b> call.
	// <br><br>
	// This container is not applicable to auction listings.
	//
	QuantityRestrictionPerBuyer *QuantityRestrictionPerBuyerInfoType `xml:"QuantityRestrictionPerBuyer,omitempty"`

	//
	// This value sets the minimum price threshold for a seller's product price in a fixed-price listing. Regardless of the product price on eBay Value Box or Amazon listings, the seller's product price will not be reduced lower than this dollar value.
	// <br><br>
	// This value is only applicable to sellers enabled to use the <b>Dynamic Pricing</b> API, and if a dynamic pricing rule is assigned to the listing's product.
	//
	FloorPrice *AmountType `xml:"FloorPrice,omitempty"`

	//
	// This value sets the maximum price threshold for a seller's product price in a fixed-price listing. Regardless of the product price on Amazon or eBay Value Box, the seller's product price will not be raised higher than this dollar value.
	// <br><br>
	// This value is only applicable to sellers enabled to use the <b>Dynamic Pricing</b> API, and if a dynamic pricing rule is assigned to the listing's product. If this field is not specified through the <b>Dynamic Pricing</b> API, an eBay system-level threshold is used to avoid any undesirable results.
	//
	CeilingPrice *AmountType `xml:"CeilingPrice,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the item is eligible is to be shipped internationally via eBay's Global Shipping Program. With the Global Shipping Program, the buyer pays a single shipping fee for the order, which includes the domestic shipping leg, the international shipping leg, and handling charges, and import charges.
	// <br/><br/>
	// eBay uses a shipping partner that allows the seller to ship the package to a domestic location and then the shipping partner takes care of the rest, including the international shipping leg.
	//
	IsIntermediatedShippingEligible bool `xml:"IsIntermediatedShippingEligible,omitempty"`

	//
	// This container provides information about the weight, volume or other quantity measurement of a listed item. The European Union requires listings for certain types of products to include the price per unit so buyers can accurately compare prices. eBay uses the <b>UnitType</b> and <b>UnitQuantity</b> values and the item's listed price to calculate and display the per-unit price on eBay EU sites.
	// <br/><br/>
	// This container will only be returned if price per unit information exists for the listing, and the <b>IncludeItemSpecifics</b> field was included in the call request and set to <code>true</code>.
	//
	UnitInfo *UnitInfoType `xml:"UnitInfo,omitempty"`

	//
	// The identifier of the original listing that contained the item before the item was relisted. This field is only returned for an item that was relisted.
	//
	RelistParentID int64 `xml:"RelistParentID,omitempty"`

	//
	// This string value provides more details about the item's condition.
	//
	ConditionDefinition string `xml:"ConditionDefinition,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the listing has been hidden from all searches occurring on eBay. If a listing is hidden from eBay searches, the reason can be found in the <b>ReasonHideFromSearch</b> field.
	//
	HideFromSearch bool `xml:"HideFromSearch,omitempty"`

	//
	// This field is returned only when the listing is currently being hidden from any searches occurring on eBay. Listings may be hidden from search if an active listing is currently out of stock or if the listing has been determined by eBay to be a duplicate listing.
	//
	ReasonHideFromSearch *ReasonHideFromSearchCodeType `xml:"ReasonHideFromSearch,omitempty"`

	//
	// This boolean field should be included and set to <code>true</code> if the seller wishes to see listing recommendations in the call response via the <b>ListingRecommendations</b> container. Listing recommendations provide one or more messages to the seller on recommendations on:
	// <b></b>
	// <ul>
	// <li>improving a listing </li>
	// <li>bringing a listing up to standard in regards to Top-Rated seller/listing requirements </li>
	// <li>mandated or recommended Item Specifics </li>
	// <li>picture quality requirements </li>
	// <li>pricing and/or listing format recommendations </li>
	// <li>recommended keywords and/or Item Specifics in a Title </li>
	// <li>offering fast handling (same-day handling or handling time of 1 day) and/or a free shipping option in order to qualify the listing for a Fast 'N Free badge </li>
	// </ul>
	//
	//
	IncludeRecommendations bool `xml:"IncludeRecommendations,omitempty"`

	//
	// This container is used in <b>Add</b>/<b>Revise</b>/<b>Relist</b>/<b>Verify</b> listing calls by the seller to enable a listing with the 'In-Store Pickup' feature. The 'In-Store Pickup' feature is only available on the eBay US site. This feature is discussed in more detail in this container's child fields.
	// <br/><br/>
	// This container is also returned in the <strong>GetItem</strong> call.
	//
	PickupInStoreDetails *PickupInStoreDetailsType `xml:"PickupInStoreDetails,omitempty"`

	//
	// <span class="tablenote"><strong>Note:</strong>
	// eBay Now has been officially retired, so this field is no longer applicable.
	// </span>
	//
	//
	EBayNowEligible bool `xml:"eBayNowEligible,omitempty"`

	//
	// <span class="tablenote"><strong>Note:</strong>
	// eBay Now has been officially retired, so this field is no longer applicable.
	// </span>
	//
	//
	EBayNowAvailable bool `xml:"eBayNowAvailable,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the actual quantity of a multiple-quantity, fixed-price listing (indicated in the <b>Item.Quantity</b> field) can not be accurately determined by eBay.
	//
	IgnoreQuantity bool `xml:"IgnoreQuantity,omitempty"`

	//
	// This field is only returned if <code>true</code>, and indicates that the 'Click and Collect' feature is available for this item. With Click and Collect, buyers are able to purchase from thousands of sellers on the eBay UK, Australia, and Germany sites, and then pick up their order from the nearest 'eBay Collection Point'. Note that an item may be eligible for Click and Collect, but this logistics option will only surface if the prospective buyer is within the vicinity of an 'eBay Collection Point'.
	// <br/><br/>
	// The Click and Collect feature is only available on the eBay UK, Australia, and Germany sites. For more information about Click and Collect, see the
	// <a href="https://ebay.co.uk/clickandcollect/">Click and Collect</a> home page on the eBay UK site, the <a href="https://sellercentre.ebay.com.au/click-and-collect">Click and Collect</a> home page on the eBay Australia site, or the <a href="https://pages.ebay.de/einkaufen/click-and-collect.html">Click and Collect</a> home page on the eBay Germany site.
	// <br>
	// <br>
	// Not all categories on the UK, Australia, and Germany sites support Click and Collect listings. To verify if a specific category on these eBay sites support Click and Collect listings, use the <a href="https://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategoryFeatures.html">GetCategoryFeatures</a> call, passing in one or more <b>CategoryID</b> values and a <b>PickupDropOffEnabled</b> value in the <b>FeatureID</b> field.
	// <br/><br/>
	// Look for a <code>true</code> value in the <b>PickupDropOffEnabled</b> field of the corresponding <b>Category</b> node (match up the <b>CategoryID</b> values if more than one Category IDs were passed in the request).
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> For Click and Collect eligible sellers, the Click and Collect feature can only be enabled at the account level, and then each of the seller's listings will be automatically evaluated for Click and Collect eligibility.
	// </span>
	//
	AvailableForPickupDropOff bool `xml:"AvailableForPickupDropOff,omitempty"`

	//
	// For 'Click and Collect' eligible sellers, this field was once used to set 'Click and Collect' eligibility at the listing level. However, now the seller can only opt in to 'Click and Collect' at the account level, and then each of their listings will be automatically evaluated for 'Click and Collect' eligibility.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> Until this field is fully deprecated in the Trading WSDL (and in Add/Revise/Relist/Verify calls), it can still be used, but it will have no functional affect. However, if set in an Add/Revise/Relist/Verify call, it will get returned in <b>GetItem</b>, but it won't be a true indicator if the item is available for the 'Click and Collect' logistics type. Instead, the <b>Item.AvailableForPickupDropOff</b> field should be referenced to see if the item is available for 'Click and Collect'.
	// </span>
	//
	EligibleForPickupDropOff bool `xml:"EligibleForPickupDropOff,omitempty"`

	//
	// This field must be included and set to <code>true</code> if the listing will be a part of a Live Auction. This boolean field is returned as <code>true</code> in <b>GetItem</b> if the listing is part of a Live Auction. See the
	// <a href="https://www.ebay.com/rpp/live-auctions">eBay Live Auctions</a> home page for more information about Live Auctions on eBay.com.
	//
	LiveAuction bool `xml:"LiveAuction,omitempty"`

	//
	// This container is used in <b>Add</b>/<b>Revise</b>/<b>Relist</b>/<b>Verify</b> listing calls to designate the listing as a digital gift card listing. It is also returned in <strong>GetItem</strong> to indicate that the listing contains a digital gift card.
	//
	DigitalGoodInfo *DigitalGoodInfoType `xml:"DigitalGoodInfo,omitempty"`

	//
	// If <code>true</code>, this item is being offered under the eBay Plus program. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> Currently, eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.
	// </span>
	//
	EBayPlus bool `xml:"eBayPlus,omitempty"`

	//
	// If <code>true</code>, this item is eligible to be listed under the eBay Plus program. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> Currently, eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.
	// </span>
	//
	EBayPlusEligible bool `xml:"eBayPlusEligible,omitempty"`

	//
	// <span class="tablenote"><strong>Note:</strong>
	// This field was enabled with version 935. For those using versions older than 935, this field will not be returned.
	// </span>
	// <br>
	// The boolean value that is returned in this field will indicate whether or not a digital gift card can be delivered by email to the buyer or recipient of the gift card. This field is only applicable to digital gift card listings.
	//
	EMailDeliveryAvailable bool `xml:"eMailDeliveryAvailable,omitempty"`

	//
	// This boolean field indicates whether or not the listing description is HTTPS secure/compliant. To be HTTPS secure/compliant, the <b>Item.Description</b> field may not contain any links to site pages that use the HTTP (and not HTTPS) protocol. This field will be returned with each listing that is found unless one or more <b>OutputSelector</b> fields are used and <code>Item.IsSecureDescription</code> is not one of the values passed in to one of these fields.
	// <br/><br/>
	// If this field is returned as <code>true</code>, the listing is HTTPs secure/compliant, and the whole listing description will appear on the View Item page for the listing. If this field is returned as <code>false</code>, the listing is not HTTPs secure/compliant, and only a partial/brief listing description will appear on the View Item page for the listing, with a link to the full listing description that will load in another tab.
	// <br/><br/>
	// If the listing description is not HTTPS compliant, the fix is to call <b>ReviseItem</b> or <b>ReviseFixedPriceItem</b> and update the <b>Item.Description</b> field, removing all links to HTTP pages.
	// <br/><br/>
	// For more information about why eBay made this change, please see the <a href="http://pages.ebay.com/seller-center/seller-updates/2017-fall/policy-updates.html" target="_blank">Policy Updates</a> page of the Fall 2017 Seller Updates page.
	//
	IsSecureDescription bool `xml:"IsSecureDescription,omitempty"`
}

type ItemsCanceledEventType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents ItemsCanceledEvent"`

	*AbstractResponseType

	//
	// This field is deprecated.
	//
	CanceledItemIDArray *ItemIDArrayType `xml:"CanceledItemIDArray,omitempty"`

	//
	// This field is deprecated.
	//
	EligibleForRelist bool `xml:"EligibleForRelist,omitempty"`

	//
	// This field is deprecated.
	//
	SellerID *UserIDType `xml:"SellerID,omitempty"`
}

type KTypeSupportedDefinitionType struct {
}

type LabelType struct {

	//
	// This field is deprecated.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This field is deprecated.
	//
	Visible bool `xml:"visible,attr,omitempty"`
}

type LineItemType struct {

	//
	// The number of units of the order line item in this package; this is required for customs. The seller must ensure that this matches the quantity of the order line item enclosed in the package.
	// <br/><br/>
	// This value must be a positive integer, and it can't be greater than the quantity of this item specified in the original transaction.
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// The Country of Manufacture for the order line item; this is required for customs. This should identify the country in which more than 50% of the value of the item was created.
	// <br/><br/>
	// This value must conform to the ISO 3166 two-letter country code standard.
	// To see the list of currently supported codes, and the English names associated with each code
	// (e.g., KY="Cayman Islands"), call <b>GeteBayDetails</b>
	// with <b>DetailName</b> set to <b>CountryDetails</b>.
	//
	CountryOfOrigin string `xml:"CountryOfOrigin,omitempty"`

	//
	// The item description of the order line item, based on its <strong>ItemID</strong>.
	//
	Description string `xml:"Description,omitempty"`

	//
	// Unique identifier for the eBay listing associated with the order line item. A multiple-quantity listing can have multiple order line items, but only one <b>ItemID</b> value. Unless an <b>OrderLineItemID</b> or <b>SKU</b> value is specified in the same node, this field is required for each <b>ItemTransactionID</b> node included in the request.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item (transaction). The <b>TransactionID</b> should match the <b>ItemID</b> specified in each <b>ItemTransactionID</b> node included in the request. Optionally, an <b>OrderLineItemID</b> value can substitute for the <b>ItemID</b>/<b>TransactionID</b> pair.
	//
	TransactionID string `xml:"TransactionID,omitempty"`
}

type ListingAnalyzerRecommendationsType struct {

	//
	// This field is deprecated.
	//
	ListingTipArray *ListingTipArrayType `xml:"ListingTipArray,omitempty"`
}

type ListingCheckoutRedirectPreferenceType struct {

	//
	// This field is deprecated.
	//
	ProStoresStoreName string `xml:"ProStoresStoreName,omitempty"`

	//
	// This field is deprecated.
	//
	SellerThirdPartyUsername string `xml:"SellerThirdPartyUsername,omitempty"`
}

type ListingDesignerType struct {

	//
	// Identifies the Layout template to use when displaying the
	// item's description. Call <b>GetDescriptionTemplates</b> for valid IDs.
	// Set to false in <b>GetDescriptionTemplates</b> (or do not specify
	// <b>LayoutID</b>) to get the standard layout. If a Listing Designer
	// layout is used (except standard layout), <b>PhotoDisplayType</b> must
	// be false (or not be specified).
	// When relisting an item, <b>LayoutID</b> is removed from the listing if you specify
	// <b>ListingDesignerType</b> without <b>LayoutID</b>. Alternatively, to remove this value
	// when revising or relisting an item, use <b>DeletedField</b>.
	//
	LayoutID int32 `xml:"LayoutID,omitempty"`

	//
	// If true, indicates that the item's picture will be enlarged to fit description
	// of the item.
	//
	OptimalPictureSize bool `xml:"OptimalPictureSize,omitempty"`

	//
	// ID for the Listing Designer theme template to use when
	// displaying the item's description.
	// When relisting, if you specify <b>ListingDesignerType</b> without
	// <b>ThemeID</b>, <b>ThemeID</b> is removed from the listing. Alternatively, to remove
	// this value when revising or relisting an item, use <b>DeletedField</b>.
	//
	ThemeID int32 `xml:"ThemeID,omitempty"`
}

type ListingDetailsType struct {

	//
	// If <code>true</code>, the item is listed in a Mature category. Users must accept
	// the Mature Category agreement on the eBay site to retrieve
	// items listed in Mature categories. (Users do not need to sign
	// this agreement to be able to list items in Mature Categories.)
	//
	Adult bool `xml:"Adult,omitempty"`

	//
	// Applicable for Real Estate auctions only. If <code>true</code>, buyers and sellers
	// are expected to follow through on the sale. If false, bids for the
	// Real Estate auction are only expressions of interest.
	//
	BindingAuction bool `xml:"BindingAuction,omitempty"`

	//
	// Indicates whether or not the seller's Checkout Enabled preference is turned on (at account level or at
	// listing level). This preference is managed through Payment Preferences in My eBay. If this preference is enabled,
	// a Pay Now button will appear in checkout flow pages and in the email notifications that are sent to buyers. This
	// preferance is enabled by default if PayPal is one of the payment methods.
	//
	CheckoutEnabled bool `xml:"CheckoutEnabled,omitempty"`

	//
	// Converted value of the <b>BuyItNowPrice</b> in the currency of
	// the site that returned this response.
	// For active items, refresh this value every 24 hours to
	// pick up the current conversion rates.
	//
	ConvertedBuyItNowPrice *AmountType `xml:"ConvertedBuyItNowPrice,omitempty"`

	//
	// Converted value of the <b>StartPrice</b> in the currency of
	// the site that returned this response.
	// For active items, refresh this value every 24 hours to
	// pick up the current conversion rates.<br>
	// <br>
	// In multi-variation listings, this value matches the lowest-priced
	// variation that is still available for sale.
	//
	ConvertedStartPrice *AmountType `xml:"ConvertedStartPrice,omitempty"`

	//
	// Converted value of the <b>ReservePrice</b> in the currency of the
	// site that returned this response. Only returned for listings with
	// a reserve price when the requesting user is the listing's seller.
	// For active items, refresh this value every 24 hours to
	// pick up the current conversion rates.
	// Not applicable to Fixed Price listings.
	//
	ConvertedReservePrice *AmountType `xml:"ConvertedReservePrice,omitempty"`

	//
	// If <code>true</code>, the seller specified a value in <b>ReservePrice</b>.
	//
	HasReservePrice bool `xml:"HasReservePrice,omitempty"`

	//
	// Indicates the new item ID for a re-listed item. When an item is
	// re-listed, the item ID for the new item is added to the
	// old listing, so buyers can navigate to
	// the new listing. This value only appears when the old listing is
	// retrieved. The <b>RelistedItemID</b> of the original item will reflect the last relist.
	//
	RelistedItemID *ItemIDType `xml:"RelistedItemID,omitempty"`

	//
	// The item ID for the original listing from which a second chance offer
	// is made. This value is only returned when the data for the second chance
	// offer listing is retrieved.
	// Output only.
	//
	SecondChanceOriginalItemID *ItemIDType `xml:"SecondChanceOriginalItemID,omitempty"`

	//
	// The <b>StartTime</b> value returned by non-search calls such as
	// <b>GetItem</b> is the time stamp (in GMT) for when
	// the item was listed.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// Time stamp (in GMT) when the listing is scheduled to end
	// (calculated based on the values of <b>StartTime</b> and <b>ListingDuration</b> )
	// or the actual end time if the item has ended.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// The URL of the Web page where a user can view the listing.
	// On the US site, this is called the View Item page.
	// If you enabled affiliate tracking in a search-related call
	// (for example, if you used the <b>AffiliateTrackingDetails</b> container
	// in an applicable call), <b>ViewItemURL</b> contains
	// a string that includes affiliate tracking information
	// (see the <a href=
	// "https://www.ebaypartnernetwork.com" target="_blank">eBay Partner Network</a>).
	//
	ViewItemURL *AnyURI `xml:"ViewItemURL,omitempty"`

	//
	// Indicates whether the item has any unanswered questions. Use
	// <b>GetMemberMessages</b> to retrieve unanswered questions for the item if this flag
	// indicates that there are any.
	//
	HasUnansweredQuestions bool `xml:"HasUnansweredQuestions,omitempty"`

	//
	// Indicates whether the item has any publicly displayed messages. Use
	// <b>GetMemberMessages</b> to retrieve public messages for the item if this flag
	// indicates that there are any.
	//
	HasPublicMessages bool `xml:"HasPublicMessages,omitempty"`

	//
	// Indicates whether the Buy It Now feature is available for an auction listing. As a general rule, once an auction listing has bids (and the high bid exceeds the reserve price, if any), the Buy It Now feature becomes disabled for the listing.
	//
	BuyItNowAvailable bool `xml:"BuyItNowAvailable,omitempty"`

	//
	// Type of seller account. This value is not returned for most sites.
	// This value is not returned for the German site
	// (site ID 77) or US eBay Motors site (site ID 0).
	//
	SellerBusinessType *SellerBusinessCodeType `xml:"SellerBusinessType,omitempty"`

	//
	// Specifies the minimum acceptable Best Offer price. If a buyer
	// submits a Best Offer that is below this value, the offer is automatically
	// declined. This applies only to items listed in categories that
	// support the Best Offer Auto-Decline feature.
	// <br/><br/>
	// Best Offer must be enabled
	// for the item, and only the seller who listed the item can see this value. For a <b>ReviseItem</b> or <b>ReviseFixedPriceItem</b> call on US eBay Motors site, prior use of a minimum Best Offer price on eBay.com is ignored.
	// <br/><br/>
	// <b>For ReviseFixedPriceItem and ReviseItem:</b> If the price for a fixed-price item (set in the <b>StartPrice</b> field) is changed with a Revise call, the <b>BestOfferAutoAcceptPrice</b> and/or <b>MinimumBestOfferPrice</b> values will be retained (if set for the listing) as long as they are still considered valid against the new fixed price.
	// <br/><br/>
	// <b>For Revise and Relist calls:</b>
	// If a seller wanted to disable the Best Offer Auto-Accept and/or Best Offer Auto-Reject feature when revising or relisting an item, the full path to one or both of these two corresponding fields would be provided in a <b>DeletedField</b> tag, like the following: <br/>
	// <pre><code>
	// <DeletedField>Item.ListingDetails.MinimumBestOfferPrice</DeletedField>
	// </code></pre>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The Best Offer feature is now available for auction listings on the following sites: US, Canada, UK, Germany, Australia, France, Italy, and Spain. However, sellers must choose between offering Best Offer or Buy It Now on an auction listing, as both features cannot be enabled on the same auction listing. As of January 2019, the value set in this field for an auction listing can be more than the auction start price.
	// </span>
	//
	MinimumBestOfferPrice *AmountType `xml:"MinimumBestOfferPrice,omitempty"`

	//
	// This field is deprecated.
	//
	MinimumBestOfferMessage string `xml:"MinimumBestOfferMessage,omitempty"`

	//
	// Specifies a distance (in miles) used as the radius of the area about the
	// supplied postal code that constitutes the local market.
	// <br/><br/>
	// Use
	// <b>GetCategoryFeatures</b> to determine the local listing distances supported by
	// a given site, category, and Local Market subscription level.
	//
	LocalListingDistance string `xml:"LocalListingDistance,omitempty"`

	//
	// Indicates the item ID of the original item listing from which a
	// Transaction Confirmation Request (TCR) was created. This value is only
	// returned when the data for a TCR is retrieved.
	//
	TCROriginalItemID *ItemIDType `xml:"TCROriginalItemID,omitempty"`

	//
	// This URL takes you to the same View Item page as ViewItemURL,
	// but this URL is optimized to support natural search.
	// That is, this URL is designed to make items on eBay easier to find via
	// popular Internet search engines. The URL includes the item title along with other optimizations. To
	// note, "?" (question mark) optimizes to "_W0QQ", "&" (ampersand) optimizes
	// to "QQ", and "=" (equals sign) optimizes to "Z".
	// <br><br>
	// If you are an eBay affiliate, use this URL to promote your affiliate
	// information.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// This URL may include additional query parameters that don't appear in <b>ViewItemURL</b>
	// and vice versa. You should not modify the query syntax.  For example, eBay won't
	// recognize the URL if you change QQ to ?.
	// </span>
	//
	ViewItemURLForNaturalSearch *AnyURI `xml:"ViewItemURLForNaturalSearch,omitempty"`

	//
	// This field is deprecated.
	//
	PayPerLeadEnabled bool `xml:"PayPerLeadEnabled,omitempty"`

	//
	// The price at which Best Offers are automatically accepted. Similar in use to
	// <b>MinimumBestOfferPrice</b>. If a buyer submits a Best Offer that is above this value, the
	// offer is automatically accepted by the seller. This applies only to items listed in
	// categories that support the <b>BestOfferAutoAcceptPrice</b> feature.
	// <br/><br/>
	// Best Offer must be
	// enabled for the item, and only the seller who listed the item will see
	// <b>BestOfferAutoAcceptPrice</b> in a call response. On the US eBay Motors site (site ID
	// 0), you cannot use the API to add a minimum Best Offer price. For a <b>ReviseItem</b> call
	// on US eBay Motors, prior use of a minimum Best Offer price on eBay.com is ignored.
	// <br/><br/>
	// <b>For ReviseFixedPriceItem and ReviseItem:</b> If the price for a fixed-price item (set in the <b>StartPrice</b> field) is changed with a Revise call, the <b>BestOfferAutoAcceptPrice</b> and/or <b>MinimumBestOfferPrice</b> values will be retained (if set for the listing) as long as they are still considered valid against the new fixed price.
	// <br/><br/>
	// <b>For Revise and Relist calls:</b>
	// If a seller wanted to disable the Best Offer Auto-Accept and/or Best Offer Auto-Reject feature when revising or relisting an item, the full path to one or both of these two corresponding fields would be provided in a <b>DeletedField</b> tag, like the following: <br/>
	// <pre><code>
	// <DeletedField>Item.ListingDetails.BestOfferAutoAcceptPrice</DeletedField>
	// </code></pre>
	//
	BestOfferAutoAcceptPrice *AmountType `xml:"BestOfferAutoAcceptPrice,omitempty"`

	//
	// This field is only returned if the item was ended early (before listing duration expired) by the seller (through an API call or on the Web site) or ended administratively by eBay. The value in this field indicates the seller's reason for ending the
	// listing early.
	//
	EndingReason *EndReasonCodeType `xml:"EndingReason,omitempty"`
}

type ListingDurationDefinitionType struct {

	//
	// All values returned in the <b>Duration</b> fields indicate the listing durations that are supported for that listing type. The allowed durations vary according to the type of listing. The value <code>GTC</code> means Good 'Til Canceled. The complete list of enumeration values that may be returned in this field is shown in <b>ListingDurationCodeType</b>.
	//
	Duration []string `xml:"Duration,omitempty"`

	//
	// The integer value in this attribute identifies the type of listing to which the set of durations applies. To match a <b>durationSetID</b> value to a specific listing type, see the <b>Category.ListingDuration</b> field in the call response.
	//
	DurationSetID int32 `xml:"durationSetID,attr,omitempty"`
}

type ListingDurationDefinitionsType struct {

	//
	// A <b>ListingDurations</b> container is returned for each listing type supported for the eBay site, and the supported listing duration times for those listing types. The <b>durationSetID</b> attribute value indicates the listing type.
	//
	ListingDuration []*ListingDurationDefinitionType `xml:"ListingDuration,omitempty"`

	//
	// This attribute indicates the current version of the Listing Durations data. This can be helpful to let users know when modifications have been made to Listing Durations.
	//
	Version int32 `xml:"Version,attr,omitempty"`
}

type ListingDurationReferenceType struct {
	Value int32

	//
	// The type of listing a set of durations describes.
	//
	Type *ListingTypeCodeType `xml:"type,attr,omitempty"`
}

type ListingEnhancementDurationDefinitionType struct {
}

type ListingEnhancementDurationReferenceType struct {

	//
	// Each returned <b>Duration</b> field indicates a supported time duration that a picture gallery can be featured.
	// The <code>Lifetime</code> value indicates that the Featured Gallery enhancement will be active for the lifetime of the listing.
	//
	Duration []string `xml:"Duration,omitempty"`
}

type ListingFeatureDetailsType struct {

	//
	// The enumeration value returned in this field indicates whether or not the Bold Title featured is enabled for the eBay site. If this feature is available for an eBay site, the seller can pass in <code>BoldTitle</code> as an enumeration value in the <b>ListingEnhancement</b> field of an Add/Revise/Relist call.
	//
	BoldTitle *BoldTitleCodeType `xml:"BoldTitle,omitempty"`

	//
	// <span class="tablenote"><b>Note:</b>
	// The Picture Border feature is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	// <br>
	// Defines the availability of the Picture Border feature for the site.
	//
	Border *BorderCodeType `xml:"Border,omitempty"`

	//
	// <span class="tablenote"><b>Note:</b>
	// The Highlight feature is no longer available on any eBay Marketplace sites, so this value should not be used in Add/Revise/Relist calls, and will not be returned in 'Get' calls.
	// </span>
	// <br>
	// Defines the availability of the Highlight feature for the site.
	//
	Highlight *HighlightCodeType `xml:"Highlight,omitempty"`

	//
	// <span class="tablenote"><b>Note:</b>
	// The Gift Icon feature is no longer available on any eBay Marketplace sites.
	// </span>
	// <br>
	// Defines the availability of the Gift Icon feature for the site.
	//
	GiftIcon *GiftIconCodeType `xml:"GiftIcon,omitempty"`

	//
	// The enumeration value returned in this field indicates whether or not the Home Page Featured feature is enabled for the eBay site. If this feature is available for an eBay site, the seller can pass in <code>HomePageFeatured</code> as an enumeration value in the <b>ListingEnhancement</b> field of an Add/Revise/Relist call.
	//
	HomePageFeatured *HomePageFeaturedCodeType `xml:"HomePageFeatured,omitempty"`

	//
	// The enumeration value returned in this field indicates whether or not the Featured First feature is enabled for the eBay site. As of October 2017, this listing feature is only available to Top-Rated Sellers on the Germany site.
	//
	FeaturedFirst *FeaturedFirstCodeType `xml:"FeaturedFirst,omitempty"`

	//
	// The enumeration value returned in this field indicates whether or not the Featured Plus feature is enabled for the eBay site.
	//
	FeaturedPlus *FeaturedPlusCodeType `xml:"FeaturedPlus,omitempty"`

	//
	// <span class="tablenote"><b>Note:</b>
	// The Pro Pack Bundle feature is no longer available on any eBay Marketplace sites.
	// </span>
	// <br>
	// Defines the availability of the Pro Pack Bundle for the site.
	//
	ProPack *ProPackCodeType `xml:"ProPack,omitempty"`

	//
	// Returns the current version of details.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the
	// details were last updated.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ListingRecommendationType struct {

	//
	// This value indicates the specific type of listing recommendation being provided to
	// the seller. Possible values include the following:
	// <ul>
	// <li>eTRS - this recommendation type advises the seller that the listing
	// is not meeting a specific Top-Rated listing requirement, such as same-day or 1-day handling or a 14-day (or longer) Money Back Return Policy;</li>
	// <li>ItemSpecifics - this recommendation type advises the seller that the
	// listing is missing a required or recommended Item Specifics name/value pair;</li>
	// <li>Picture - this recommendation type advises the seller that a specific
	// picture in the listing is not meeting a specific picture qualityrequirement;</li>
	// <li>Price - this recommendation type provides a recommended price and/or a recommended price range for auction and fixed-price listings. These price recommendation values are based on similar items that have recently sold on eBay.  Along with pricing recommendations, a recommended listing format (auction vs. fixed-price) is also returned. This recommendation type is currently only supported on the US, UK, and DE sites; </li>
	// <li>Title - this recommendation type provides guidance on forming an effective listing title, and will suggest valuable keywords or recommended Item Specifics that the listing title is missing. This recommendation type will also call out keywords that do not accurately describe the item. The keywords or Item Specifics are called out in the response. This recommendation type is currently only supported on the US, UK, DE, and AU sites; and</li>
	// <li>FnF - this recommendation type advises the seller to offer expedited shipping for the item (same-day shipping or handling time of 1 day) and/or offer at least one free shipping service option.</li>
	// </ul>
	//
	Type string `xml:"Type,omitempty"`

	//
	// This value indicates the group that a specific listing recommendation belongs to.
	// There may be multiple groups for each listing recommendation type. For example,
	// two groups of the <b>eTRS</b> listing recommendation type are
	// 'SHIPPING' and 'RETURNS'.
	//
	Group string `xml:"Group,omitempty"`

	//
	// The <b>FieldName</b> value will vary based on the recommendation type. The <b>FieldName</b> values for each recommendation type are summarized below:
	// <br><br>
	// For <b>eTRS</b> listing recommendations, the <b>FieldName</b> value will indicate the specific Trading API field that the seller needs to update to bring the listing up to top-rated listing standards. For example, if the <b>Recommendation.Type</b> value is 'eTRS' and the <b>Recommendation.Group</b> value is 'SHIPPING', the <b>FieldName</b> value may be 'DispatchTimeMax'. If the seller is returned a listing recommendation like this, it would most likely indicate that the seller must reduce the handling time (<b>DispatchTimeMax</b> value) in the listing to '0' (same-day shipping) or '1' (one-day handling time) in order for the listing to qualify as a top-rated listing and receive a Top Rated Plus seal in View Item and Search Results pages.
	// <br><br>
	// For an <b>ItemSpecifics</b> listing recommendation, the <b>FieldName</b> value will be the name of the recommended Item Specific. If the seller gets a <b>ItemSpecifics</b> listing recommendation, the seller will perform a <b>ReviseItem</b>/<b>ReviseFixedPriceItem</b> call, passing in the recommended Item Specific (with one or more values) through the <b>ItemSpecifics.NameValueList</b> container. If available, eBay will also return recommended Item Specific value(s) through the <b>Recommendation.Value</b> field.
	// <br><br>
	// For a <b>Picture</b> listing recommendation, the <b>FieldName</b> value will be the URL of the image that needs to be brought up to picture quality standards. If the seller gets a <b>Picture</b> listing recommendation for this image in the listing, the seller will need to make the required picture quality update, and then perform a <b>ReviseItem</b>/<b>ReviseFixedPriceItem</b> call, passing in the URL of the image through the <b>PictureURL</b> field in the <b>PictureDetails</b> container.
	// <br><br>
	// If the seller gets a <b>Picture</b> listing recommendation for this image in the listing, the seller will need to make the required picture quality update, and then perform a <b>ReviseItem</b>/<b>ReviseFixedPriceItem</b> call, passing in the URL of the image through the <b>PictureURL</b> field in the <b>PictureDetails</b> container.
	// <br><br>
	// For a <b>Price</b> listing recommendation, the <b>FieldName</b> value will be one of the following:
	// <ul>
	// <li><b>BuyItNowPrice</b>: the recommended price for an item in a fixed-price listing or for the "Buy It Now" price in an auction listing; this value will be shown in the <b>Recommendation.Value</b> field. Upon getting a <b>BuyItNowPrice</b> recommendation, the seller may consider revising their listing with a price matching or closer to the recommended price.</li>
	// <li><b>ListingType</b>: this value is returned if a different listing type (auction vs. fixed-price) is being suggested for the item. Upon getting a <b>ListingType</b> recommendation, the seller may consider the recommended listing type the next time they list a similar item.</li>
	// <li><b>StartPrice</b>: the recommended starting bid price for an item in an auction listing; this value will be shown in the <b>Recommendation.Value</b> field. Upon getting a <b>StartPrice</b> recommendation, the seller may consider the recommended starting bid price the next time they list a similar item.</li>
	// </ul>
	// Two other pricing recommendations, <b>BuyItNowPriceRange</b> and <b>StartPriceRange</b>, are supported in the Listing Recommendation API, but are not yet supported by the Trading API.
	// <br><br>
	// For a <b>Title</b> listing recommendation, the <b>FieldName</b> value will be 'Title' for any of the three use cases - missing keywords, missing Item Specifics, or inaccurate keywords. Upon getting a <b>Title</b> recommendation, the seller may consider the <b>Title</b> recommendation (adding keywords, adding Item Specifics, removing inaccurate keywords) the next time they list a similar item.
	// <br><br>
	// For an <b>FnF</b> listing recommendation, either one or two <b>recommendation</b> containers will be returned, based on whether a listing needs fast handling (same-day handling or handling time of 1 day), at least one free shipping service, or both. These two <b>fieldName</b> values are described below:
	// <ul>
	// <li><strong>shipsWithinDays</strong>: this <strong>fieldName</strong> value is returned if the seller needs to implement fast handling (same-day handling or a handling time of 1 day). To implement fast handling, the seller will perform a <strong>ReviseItem</strong>/<strong>ReviseFixedPriceItem</strong> call, passing a value of '0' or '1' into the <strong>DispatchTimeMax</strong> field.</li>
	// <li><strong>shippingServiceCost</strong>: this <strong>fieldName</strong> value is returned if the seller needs to offer a free shipping service option in the listing. To add a free shipping service option, the seller will perform a <strong>ReviseItem</strong>/<strong>ReviseFixedPriceItem</strong> call, passing in one or more <b>ShippingDetails.ShippingServiceOptions</b> containers where the shipping service is free (<b>ShippingServiceOptions.FreeShipping</b> boolean value set to 'true').</li>
	// </ul>
	// <br><br>
	// This <b>FieldName</b> field is always returned with each <b>Recommendation</b> container.
	//
	FieldName string `xml:"FieldName,omitempty"`

	//
	// This code value provides a generic, "human-friendly" message summarizing what is wrong with the listing, or how it can be improved. These values include:
	// <ul>
	// <li>FIELD_VALUE_INCORRECT</li>
	// <li>FIELD_VALUE_RECOMMENDATION</li>
	// <li>MANDATED_FIELD_VALUE_MISSING</li>
	// <li>MANDATORY_STANDARDS_NOT_MET</li>
	// <li>RECOMMENDED_FIELD_VALUE_MISSING</li>
	// <li>RECOMMENDED_FIELD_VALUE_TO_REMOVE</li>
	// <li>RECOMMENDED_STANDARDS_NOT_MET</li>
	// </ul>
	// This field is always returned with each <b>recommendation</b> container.
	//
	Code string `xml:"Code,omitempty"`

	//
	// The <b>Value</b>  field is only applicable for <b>ItemSpecifics</b>, <b>Pricing</b>, and <b>Title</b> listing recommendation types, and it is only returned for these recommendation types.
	// <br><br>
	// For the <b>ItemSpecifics</b> recommendation type, the value in the <b>Value</b> field is a recommended value for the recommended Item Specific name found in the <b>Recommendation.FieldName</b> field. Each Item Specific name can have more than one recommended value, so it is possible to have multiple <b>Recommendation.Value</b> fields for that recommendation. It is also possible that a recommended Item Specific name will have no recommended values, hence no <b>Recommendation.FieldName</b> values are returned.
	// <br><br>
	// For the <b>Pricing</b> recommendation type, the value in the <b>Value</b> field is either:
	// <ul>
	// <li>a recommended value for the starting bid price (if <b>Recommendation.FieldName</b> value is 'StartPrice');</li>
	// <li>a recommended value for a fixed-price item (if <b>Recommendation.FieldName</b> value is 'BuyItNowPrice'); or</li>
	// <li>a recommended value for the listing type (if <b>Recommendation.FieldName</b> value is 'ListingType'). </li>
	// </ul>
	// For the <b>Title</b> recommendation type, the value in the <b>value</b> field is either:
	// <ul>
	// <li>a recommended keyword to include in the listing Title (if <b>Recommendation.Code</b> value is 'RECOMMENDED_FIELD_VALUE_MISSING');</li>
	// <li>a recommended keyword to remove (to maintain accuracy) in the listing Title (if <b>Recommendation.Code</b> value is 'RECOMMENDED_FIELD_VALUE_TO_REMOVE');</li>
	// <li>a recommended Item Specific to include in the listing Title (if <b>Recommendation.Code</b> value is 'FIELD_VALUE_RECOMMENDATION');</li>
	// </ul>
	// Each <b>Title</b> recommendation can have more than one keyword or Item Specific value, so it is possible to have multiple <b>Recommendation.Value</b> fields for that recommendation.
	//
	Value []string `xml:"Value,omitempty"`

	//
	// This textual message is the detailed description of a specific action that a seller can take to improve the quality of the listing, or bring it up to Picture or eTRS standards. For some recommendations, the fields may be revised on an active listing through a <b>ReviseItem</b> or <b>ReviseFixedPriceItem</b> call of the Trading API. For other recommendations, it may not be possible to revise the fields on an active listing.
	// <br><br>
	// This field is returned in the <b>Recommendation</b> container when available/applicable.
	//
	Message string `xml:"Message,omitempty"`

	//
	// This container contains price guidance information, which includes the minimum and maximum recommended prices for the item, which are based on recent sales of similar items. This container is only returned for price recommendations and when the pricing data is available.
	// <br><br>
	// A <b>Metadata</b> container is returned for each price guidance parameter that is applicable/available for the pricing recommendation.
	//
	Metadata []*MetadataType `xml:"Metadata,omitempty"`
}

type ListingRecommendationsType struct {

	//
	// Each <b>Recommendation</b> container provides a message to the seller on how a listing can be improved or brought up to standard in regards to top-rated seller/listing requirements, mandated or recommended Item Specifics, picture quality requirements, pricing and/or listing format recommendations, recommended keywords and/or Item Specifics in a Title, and/or a recommendation to use Fast 'N Free shipping. <br><br> One or more <b>Recommendation</b> containers can be returned for each listing.
	//
	Recommendation []*ListingRecommendationType `xml:"Recommendation,omitempty"`
}

type ListingStartPriceDetailsType struct {

	//
	// This value is a string description of the listing type for which the pricing data
	// is intended, such as "Pricing for the auction-like listings".
	//
	Description string `xml:"Description,omitempty"`

	//
	// This value indicates the listing type of the listing, and is a value defined in
	// <b>ListingTypeCodeType</b> enumerated type. The only possible values for
	// this field are 'Chinese' (auction listing) and 'FixedPriceItem'.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// For auction listings, the <b>StartPrice</b> indicates the lowest dollar
	// value that can be set for the item's Starting bid.
	// <br><br>
	// For fixed-price listings, the <b>StartPrice</b> indicates the lowest
	// dollar value that can be set for the item's sale price.
	//
	StartPrice *AmountType `xml:"StartPrice,omitempty"`

	//
	// Returns the latest version number for this field. The version can be used to
	// determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the
	// details were last updated. This timestamp can be used to determine
	// if and when to refresh cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// This field is only returned and applicable for auction listings.
	// <br><br>
	// This float value indicates the minimum percentage value that a Buy It Now price for
	// an auction listing must be above the Starting bid price for that same listing.
	// <br><br>
	// On the US eBay Motors site (Site ID 0), this field only applies to the Parts and
	// Accessories categories.
	//
	MinBuyItNowPricePercent float32 `xml:"MinBuyItNowPricePercent,omitempty"`
}

type ListingTipArrayType struct {

	//
	// This field is deprecated.
	//
	ListingTip []*ListingTipType `xml:"ListingTip,omitempty"`
}

type ListingTipFieldType struct {

	//
	// This field is deprecated.
	//
	ListingTipFieldID string `xml:"ListingTipFieldID,omitempty"`

	//
	// This field is deprecated.
	//
	FieldTip string `xml:"FieldTip,omitempty"`

	//
	// This field is deprecated.
	//
	CurrentFieldText string `xml:"CurrentFieldText,omitempty"`

	//
	// This field is deprecated.
	//
	CurrentFieldValue string `xml:"CurrentFieldValue,omitempty"`
}

type ListingTipMessageType struct {

	//
	// This field is deprecated.
	//
	ListingTipMessageID string `xml:"ListingTipMessageID,omitempty"`

	//
	// This field is deprecated.
	//
	ShortMessage string `xml:"ShortMessage,omitempty"`

	//
	// This field is deprecated.
	//
	LongMessage string `xml:"LongMessage,omitempty"`

	//
	// This field is deprecated.
	//
	HelpURLPath string `xml:"HelpURLPath,omitempty"`
}

type ListingTipType struct {

	//
	// This field is deprecated.
	//
	ListingTipID string `xml:"ListingTipID,omitempty"`

	//
	// This field is deprecated.
	//
	Priority int32 `xml:"Priority,omitempty"`

	//
	// This field is deprecated.
	//
	Message *ListingTipMessageType `xml:"Message,omitempty"`

	//
	// This field is deprecated.
	//
	Field *ListingTipFieldType `xml:"Field,omitempty"`
}

type LocalListingDistancesNonSubscriptionDefinitionType struct {
}

type LocalListingDistancesRegularDefinitionType struct {
}

type LocalListingDistancesSpecialtyDefinitionType struct {
}

type LocalMarketAdFormatEnabledDefinitionType struct {
}

type LocalMarketAutoAcceptEnabledDefinitionType struct {
}

type LocalMarketAutoDeclineEnabledDefinitionType struct {
}

type LocalMarketBestOfferEnabledDefinitionType struct {
}

type LocalMarketCompanyNameEnabledDefinitionType struct {
}

type LocalMarketContactByAddressEnabledDefinitionType struct {
}

type LocalMarketContactByEmailEnabledDefinitionType struct {
}

type LocalMarketContactByPhoneEnabledDefinitionType struct {
}

type LocalMarketCounterOfferEnabledDefinitionType struct {
}

type LocalMarketNonSubscriptionDefinitionType struct {
}

type LocalMarketPaymentMethodCheckOutEnabledDefinitionType struct {
}

type LocalMarketPhoneCountDefinitionType struct {
}

type LocalMarketPremiumSubscriptionDefinitionType struct {
}

type LocalMarketRegularSubscriptionDefinitionType struct {
}

type LocalMarketSellerContactDetailsEnabledDefinitionType struct {
}

type LocalMarketShippingMethodEnabledDefinitionType struct {
}

type LocalMarketSpecialitySubscriptionDefinitionType struct {
}

type LocalMarketStreetCountDefinitionType struct {
}

type LocalSearchType struct {

	//
	// This field is deprecated.
	//
	MaxDistance int32 `xml:"MaxDistance,omitempty"`

	//
	// This field is deprecated.
	//
	PostalCode string `xml:"PostalCode,omitempty"`
}

type LookupAttributeArrayType struct {

	//
	// This field is deprecated.
	//
	LookupAttribute []*LookupAttributeType `xml:"LookupAttribute,omitempty"`
}

type LookupAttributeType struct {

	//
	// This field is deprecated.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This field is deprecated.
	//
	Value string `xml:"Value,omitempty"`
}

type MarkUpMarkDownEventType struct {

	//
	// Whether the application has been marked up or marked down.
	//
	Type *MarkUpMarkDownEventTypeCodeType `xml:"Type,omitempty"`

	//
	// Time when the application was marked up or marked down.
	//
	Time time.Time `xml:"Time,omitempty"`

	//
	// Describes how the application was marked down, automatically or
	// manually. When an application is automatically marked down, eBay will
	// ping the application periodically, and if communication is restored, eBay
	// will automatically mark the application up. If your application is marked
	// down manually, you must contact eBay Developer Support to get your
	// application marked up. A Reason is not provided for mark up events.
	//
	Reason string `xml:"Reason,omitempty"`
}

type MarkUpMarkDownHistoryType struct {

	//
	// Details for a MarkDown or MarkUp event.
	//
	MarkUpMarkDownEvent []*MarkUpMarkDownEventType `xml:"MarkUpMarkDownEvent,omitempty"`
}

type MaxFlatShippingCostCBTExemptDefinitionType struct {
}

type MaxFlatShippingCostDefinitionType struct {
}

type MaxGranularFitmentCountDefinitionType struct {
}

type MaxItemCompatibilityDefinitionType struct {
}

type MaximumBuyerPolicyViolationsDetailsType struct {

	//
	// The number of policy violation that can be used to limit buyers at the site. This is applicable only to sellers.
	//
	NumberOfPolicyViolations *NumberOfPolicyViolationsDetailsType `xml:"NumberOfPolicyViolations,omitempty"`

	//
	// The policy violation duration(s) supported by the site. This is applicable only to sellers.
	//
	PolicyViolationDuration []*PolicyViolationDurationDetailsType `xml:"PolicyViolationDuration,omitempty"`
}

type MaximumBuyerPolicyViolationsType struct {

	//
	// This field is deprecated.
	//
	//
	Count int32 `xml:"Count,omitempty"`

	//
	// This field is deprecated.
	//
	//
	Period *PeriodCodeType `xml:"Period,omitempty"`
}

type MaximumItemRequirementsDetailsType struct {

	//
	// The maximum number of items allowed for this buyer.
	//
	MaximumItemCount []int32 `xml:"MaximumItemCount,omitempty"`

	//
	// The Minimum Feedback Score required for a buyer who wants to purchase this item.
	//
	MinimumFeedbackScore []int32 `xml:"MinimumFeedbackScore,omitempty"`
}

type MaximumItemRequirementsType struct {

	//
	// This field is conditionally required if the <b>MaximumItemRequirements</b>
	// container is used.
	// <br/><br/>
	// The value of this field specifies the maximum quantity of an order line item that a prospective buyer may
	// purchase from the seller during any given 10-day period. The prospective buyer will be blocked
	// from bidding/buying once this value is reached.
	// <br/><br/>
	// <b>Valid values
	// for the US site:</b> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 25, 50, 75, and 100.
	// <br/>
	// To see the valid values for your site, call <b>GeteBayDetails</b>
	// with <b>DetailName</b> set to <b>BuyerRequirementDetails</b>,
	// and then look for the <b>BuyerRequirementDetails.MaximumItemRequirements.MaximumItemCount</b> fields.
	// <br/><br/>
	// If the <b>MaximumItemRequirements.MinimumFeedbackScore</b> field is also
	// specified, the <b>MaximumItemCount</b> limit will only apply to those
	// prospective buyers who don't meet the specified Minimum Feedback Score threshold.
	//
	MaximumItemCount int32 `xml:"MaximumItemCount,omitempty"`

	//
	// This is an optional field that is ignored if a <b>MaximumItemCount</b>
	// value has not been provided.
	// <br><br>
	// If this field is used, a prospective buyer is blocked from bidding/buying if they have
	// reached or exceeded the <b>MaximumItemCount</b> and their feedback score
	// is less than the value of this field.
	// <br/><br/>
	// <b>Valid values for the US site:</b> 0, 1, 2, 3, 4, and 5.
	// <br/>
	// To see the valid values for your site, call <b>GeteBayDetails</b>
	// with <b>DetailName</b> set to <b>BuyerRequirementDetails</b>,
	// and then look for the <b>BuyerRequirementDetails.MaximumItemRequirements.MinimumFeedbackScore</b> fields.
	//
	MinimumFeedbackScore int32 `xml:"MinimumFeedbackScore,omitempty"`
}

type MaximumUnpaidItemStrikesCountDetailsType struct {

	//
	// Each value returned in each <b>MaximumUnpaidItemStrikesCount.Count</b> field
	// can be used in the <b>BuyerRequirementDetails.MaximumUnpaidItemStrikesInfo.Count</b>
	// field when using the Trading API to add, revise, or relist an item.
	//
	Count []int32 `xml:"Count,omitempty"`
}

type MaximumUnpaidItemStrikesDurationDetailsType struct {

	//
	// The period is the number of days (last 60 days, last 180 days, etc.)
	// during which the buyer's unpaid item strikes are calculated.
	// This is applicable only to sellers.
	//
	Period *PeriodCodeType `xml:"Period,omitempty"`

	//
	// The description of the period, such as 'month', 'quarter', or 'half a year'.
	// The data in this field can be used as a label in your application's display.
	// This is applicable only to sellers.
	//
	Description string `xml:"Description,omitempty"`
}

type MaximumUnpaidItemStrikesInfoDetailsType struct {

	//
	// The number of the maximum unpaid item strikes. This is applicable only to sellers.
	//
	MaximumUnpaidItemStrikesCount *MaximumUnpaidItemStrikesCountDetailsType `xml:"MaximumUnpaidItemStrikesCount,omitempty"`

	//
	// Range of time used to determine maximum unpaid item count. This is applicable only to sellers.
	//
	MaximumUnpaidItemStrikesDuration []*MaximumUnpaidItemStrikesDurationDetailsType `xml:"MaximumUnpaidItemStrikesDuration,omitempty"`
}

type MaximumUnpaidItemStrikesInfoType struct {

	//
	// This integer value sets the maximum number of unpaid item strikes that a prospective buyer
	// is allowed to have during a specified time period
	// (<b>MaximumUnpaidItemStrikesInfo.Period</b>) before being blocked from
	// buying/bidding on the item.
	// <br><br>
	// To retrieve a list of allowed values for this field, the seller should call
	// <b>GeteBayDetails</b>, including <b>BuyerRequirementDetails</b> in
	// the <b>DetailName</b> field of the request, and then look for the
	// <b>BuyerRequirementDetails.MaximumUnpaidItemStrikesInfo.MaximumUnpaidItemStrikesCount.Count</b>
	// fields in the response.
	// <br>
	//
	Count int32 `xml:"Count,omitempty"`

	//
	// This enumerated value defines the length of time over which a prospective buyer's
	// unpaid item strikes will be counted. If the prospective buyer's number of unpaid item
	// strikes during this defined period exceeds the value set in the <b>Count</b>
	// field, that prospective buyer is blocked from buying/bidding on the item.
	// <br/><br/>
	// If the <b>Count</b> value is 2, and the specified <b>Period</b>
	// is 'Days_30' (counting back 30 days from the present day), any prospective buyer that has
	// had three or more unpaid item strikes is blocked from buying/bidding on the item.
	// <br>
	//
	Period *PeriodCodeType `xml:"Period,omitempty"`
}

type MemberMessageExchangeArrayType struct {

	//
	// Each <b>MemberMessageExchange</b> container consists of detailed information about a member-to-member message.
	//
	MemberMessageExchange []*MemberMessageExchangeType `xml:"MemberMessageExchange,omitempty"`
}

type MemberMessageExchangeType struct {

	//
	// The item about which the question was asked. Returned if the parent container is returned.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// Contains all the information about the question being asked.  Returned if the
	// parent container is returned.
	//
	Question *MemberMessageType `xml:"Question,omitempty"`

	//
	// An answer to the question. Returned if the parent container is returned.
	// <br/><br/>
	// For GetAdFormatLeads, returned if the seller responded to the
	// lead's question. Contains the body of the seller's response
	// message.
	//
	Response []string `xml:"Response,omitempty"`

	//
	// Status of the message. Returned if the parent container is returned.
	//
	MessageStatus *MessageStatusTypeCodeType `xml:"MessageStatus,omitempty"`

	//
	// Date the message was created. Returned if the parent container is returned.
	//
	CreationDate time.Time `xml:"CreationDate,omitempty"`

	//
	// Date the message was last modified. Returned if the parent container is returned.
	//
	LastModifiedDate time.Time `xml:"LastModifiedDate,omitempty"`

	//
	// Media details stored as part of the message.
	//
	MessageMedia []*MessageMediaType `xml:"MessageMedia,omitempty"`
}

type MemberMessageType struct {

	//
	// Type of message being retrieved. Note that some message
	// types can only be created via the eBay Web site.
	//
	MessageType *MessageTypeCodeType `xml:"MessageType,omitempty"`

	//
	// Context of the question (e.g. Shipping, General).
	//
	QuestionType *QuestionTypeCodeType `xml:"QuestionType,omitempty"`

	//
	// Indicates if a copy of the messages is to be emailed
	// to the sender. If omitted, this defaults to whatever
	// the user set in preferences.
	//
	EmailCopyToSender bool `xml:"EmailCopyToSender,omitempty"`

	//
	// This field is deprecated.
	//
	HideSendersEmailAddress bool `xml:"HideSendersEmailAddress,omitempty"`

	//
	// Indicates if the member message is viewable in the item listing.
	//
	DisplayToPublic bool `xml:"DisplayToPublic,omitempty"`

	//
	// The eBay user ID of the person who asked the question or sent
	// the message.
	//
	SenderID string `xml:"SenderID,omitempty"`

	//
	// SenderEmail contains the static email address of an eBay member,
	// used within the "reply to"
	// email address when the eBay member sends a message.
	// (Each eBay member is assigned a static alias. The alias is
	// used within a static email address.)
	// SenderEmail is returned if MessageType is AskSellerQuestion.
	// SenderEmail is also returned in the AskSellerQuestion notification.
	// The following functionality of this field has been deprecated:
	// return of a dynamic email address.
	//
	SenderEmail string `xml:"SenderEmail,omitempty"`

	//
	// Recipient's eBay user ID. For
	// AddMemberMessagesAAQToBidder, it must be the seller of an
	// item, that item's bidder, or a user who has made an
	// offer on that item using Best Offer. Note: maxOccurs is a shared schema
	// element and needs to be unbounded for AddMemberMessagesAAQToBidder.
	// For AddMemberMessageRTQ, this field is mandatory if ItemID is not in the request.
	// For all other uses, there can only be one RecipientID.
	//
	RecipientID []string `xml:"RecipientID,omitempty"`

	//
	// Subject of this email message.
	//
	Subject string `xml:"Subject,omitempty"`

	//
	// Content of the message is input into this string field. HTML formatting is not
	// allowed in the body of the message. If plain HTML is used, an error occurs and the
	// message will not go through. If encoded HTML is used, the message may go through but
	// the formatting will not be successful, and the recipient of the message will just
	// see the HTML formatting tags.
	//
	Body string `xml:"Body,omitempty"`

	//
	// ID that uniquely identifies a message for a given user.
	// <br><br>
	// This value is not the same as the value used for the
	// GetMyMessages MessageID. However, this MessageID value can be
	// used as the GetMyMessages ExternalID.
	//
	MessageID string `xml:"MessageID,omitempty"`

	//
	// ID number of the question to which this message is responding.
	//
	ParentMessageID string `xml:"ParentMessageID,omitempty"`

	//
	// Media details attached to the message.
	//
	MessageMedia []*MessageMediaType `xml:"MessageMedia,omitempty"`
}

type MembershipDetailType struct {

	//
	// This value indicates the name of the membership program, such as <code>EBAYPLUS</code>. This field will always be returned with each <b>Program</b> container.
	//
	ProgramName string `xml:"ProgramName,omitempty"`

	//
	// This enumeration value indicates the eBay site for which the seller is enrolled in a membership program. This field will always be returned with each <b>Program</b> container.
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// This dateTime value is the expiration date of the seller's membership within the program specified in the <b>ProgramName</b> field. This field will always be returned with each <b>Program</b> container.
	//
	ExpiryDate time.Time `xml:"ExpiryDate,omitempty"`
}

type MembershipDetailsType struct {

	//
	// A <b>Program</b> container will be returned for each eBay membership program for which the seller is enrolled. This container provides the the eBay site, the membership program (such as '<code>EBAYPLUS</code>'), and the membership expiration date.
	//
	Program []*MembershipDetailType `xml:"Program,omitempty"`
}

type MessageMediaType struct {

	//
	// URL of an image to be included in a message.
	// The image must be uploaded to
	// <a href="http://developer.ebay.com/devzone/xml/docs/reference/ebay/uploadsitehostedpictures.html">EPS
	// (eBay Picture Services)</a>
	// using a separate API call or the web flow. This URL will be
	// validated and if it doesn't exist, the request will fail.
	//
	MediaURL *AnyURI `xml:"MediaURL,omitempty"`

	//
	// The name of the image. This will be displayed on the flimstrip.
	//
	MediaName string `xml:"MediaName,omitempty"`
}

type MetadataType struct {

	//
	// The name of the price guidance parameter is returned in this field. Any of the following price guidance parameters may be returned in a <b>Metadata</b> container:
	// <ul>
	// <li><b>AppliesTo</b>: this parameter indicates the type of listing that the <b>MaxRecommendedValue</b> and <b>MinRecommendedValue</b> values pertain to. The corresponding <b>value</b> values that can be returned with the <b>AppliesTo</b> parameter is 'Auction' and 'FixedPrice'. </li>
	// <li><b>Currency</b>: this parameter indicates the type of currency being used for the <b>MaxRecommendedValue</b> and <b>MinRecommendedValue</b> values. The currency values (returned in corresponding <b>value</b> field) are based on the currency codes defined in the <a href="http://en.wikipedia.org/wiki/ISO_4217" target="_blank">ISO 4217 - Currency Codes</a> standard. </li>
	// <li><b>MaxRecommendedValue</b>: this parameter indicates the upper end of the recommended price range for the item. Based on the recent sales of similar items, eBay recommends a price range through the <b>MaxRecommendedValue</b> and <b>MinRecommendedValue</b> parameters. A dollar value is returned in the corresponding <b>value</b> field. </li>
	// <li><b>MinRecommendedValue</b>: this parameter indicates the lower end of the recommended price range for the item. Based on the recent sales of similar items, eBay recommends a price range through the <b>MaxRecommendedValue</b> and <b>MinRecommendedValue</b> parameters. A dollar value is returned in the corresponding <b>value</b> field. </li>
	// <li><b>SimilarItems</b>: this parameter and its corresponding <b>value</b> values indicates which eBay item listings were used to determine the <b>MinRecommendedValue</b> and <b>MaxRecommendedValue</b> values. The values returned in the <b>value</b> fields are Item IDs.</li>
	// </ul>
	//
	Name string `xml:"Name,omitempty"`

	//
	// The corresponding value(s) for the price guidance parameter (returned in <b>Name</b> field of the same <b>Metadata</b> container. For the <b>AppliesTo</b> parameter, this value will either be 'Auction' or 'FixedPrice'. For the <b>Currency</b> parameter, this value will be a three-digit representation of a currency (as defined in the <a href="http://en.wikipedia.org/wiki/ISO_4217" target="_blank">ISO 4217 - Currency Codes</a> standard). For the <b>MaxRecommendedValue</b> and <b>MinRecommendedValue</b> parameters, this value will be a dollar value. For the <b>SimilarItems</b> parameters, this value will be an Item ID value, and it's possible that numerous Item IDs will be returned.
	//
	Value []string `xml:"Value,omitempty"`
}

type MinItemCompatibilityDefinitionType struct {
}

type MinimumFeedbackScoreDetailsType struct {

	//
	// Each value that is returned in this field can be used as an account-level Minimum Feedback Score. Sellers can no longer set a buyer's Minimum Feedback Score threshold Buyer Requirement at the listing-level in Add/Revise/Relist calls. The Feedback Score for a potential buyer must be greater than or equal to the specified value in the seller's account settings, or that buyer is blocked from buying the item. <br/><br/> One or more <b>FeedbackScore</b> fields are always returned with the <b>MinimumFeedbackScore</b> container.
	//
	FeedbackScore []int32 `xml:"FeedbackScore,omitempty"`
}

type MinimumReservePriceDefinitionType struct {
}

type ModifyNameArrayType struct {

	//
	// A <b>ModifyName</b> container is needed for each Variation Specific name that the seller wishes to change in a multiple-variation listing.
	// <br><br>
	// You cannot change the name of an Item Specific that is required for the listing category. Use the  <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to determine which Item Specifics names are required for a category.
	// <br><br>
	// To get a current list of Variation Specifics defined for a multiple-variation listing, the seller can use <b>GetItem</b>, and then view all Variation Specific names in the <b>VariationSpecificsSet</b> container in the response.
	//
	ModifyName []*ModifyNameType `xml:"ModifyName,omitempty"`
}

type ModifyNameType struct {

	//
	// In this field, the seller identifies the current name (e.g., Material) of a Variation Specific in the active listing that the seller wishes to change. If this field is used, the <b>NewName</b> field must also be specified.
	// <br>
	//
	Name string `xml:"Name,omitempty"`

	//
	// In this field, the seller states the new name of the Variation Specific (e.g., Fabric).
	// <br>
	// <br>
	// In addition to changing a Variation Specific name through the <b>ModifyName</b> container, the seller must also include the new Variation Specific name (and its available values) in the <b>VariationSpecificsSet</b> container, and omit the original name.
	// <br>
	// <br>
	// Note that variations that were sold while they used the old name will also be changed to use the new name in eBay's system.
	// <br>
	// <br>
	// If you are making other changes to a variation (such as adding new
	// values or pictures), use consistent names to avoid unexpected
	// results. For example, specify the same new name to identify the
	// Variation Specific in the <b>Pictures</b> container and in the  <b>VariationSpecifics</b> containers for each variation within the listing.
	// <br>
	//
	NewName string `xml:"NewName,omitempty"`
}

type MotorsLocalMarketEnabledDefinitionType struct {
}

type MultiLegShipmentType struct {

	//
	// Contains information about the shipping service and cost of the domestic leg of a Global Shipping Program shipment.
	//
	ShippingServiceDetails *MultiLegShippingServiceType `xml:"ShippingServiceDetails,omitempty"`

	//
	// Contains shipping address information for the domestic leg of a Global Shipping Program shipment. This container includes the ReferenceID field, which can be printed on the package to give the international shipping provider a unique identifier for the order.
	//
	ShipToAddress *AddressType `xml:"ShipToAddress,omitempty"`

	//
	// The integer value returned here indicates the minimum number of business days that the corresponding shipping service (indicated in  <b>ShippingServiceDetails.ShippingService</b> field) will take to be delivered to eBay's domestic shipping partner.
	// <br><br>
	// This minimum shipping time does not include the seller's handling time, and the clock starts on the shipping time only after the seller has delivered the item to the shipping carrier for shipment to eBay's domestic shipping partner. 'Business days' can vary by shipping carrier and by country, but 'business days' are generally Monday through Friday, excluding holidays. This field is returned if defined for that particular shipping service option.
	//
	ShippingTimeMin int32 `xml:"ShippingTimeMin,omitempty"`

	//
	// The integer value returned here indicates the maximum number of business days that the corresponding shipping service (indicated in  <b>ShippingServiceDetails.ShippingService</b> field) will take to be delivered to eBay's domestic shipping partner.
	// <br><br>
	// This maximum shipping time does not include the seller's handling time, and the clock starts on the shipping time only after the seller has delivered the item to the shipping carrier for shipment to eBay's domestic shipping partner. 'Business days' can vary by shipping carrier and by country, but 'business days' are generally Monday through Friday, excluding holidays. This field is returned if defined for that particular shipping service option.
	//
	ShippingTimeMax int32 `xml:"ShippingTimeMax,omitempty"`
}

type MultiLegShippingDetailsType struct {

	//
	// Contains information about the domestic leg of a Global Shipping Programn shipment, including the seller-selected shipping service, the domestic shipping cost, the domestic address of the international shipping provider, and the estimated shipping time range.
	//
	SellerShipmentToLogisticsProvider *MultiLegShipmentType `xml:"SellerShipmentToLogisticsProvider,omitempty"`

	//
	// Reserved for use by the international shipping provider.
	//
	LogisticsProviderShipmentToBuyer *MultiLegShipmentType `xml:"LogisticsProviderShipmentToBuyer,omitempty"`
}

type MultiLegShippingServiceType struct {

	//
	// The shipping service specified for the domestic leg of a Global Shipping Program shipment. For the domestic leg, the value of this field can be any available shipping service that ships to the domestic address of the international shipping provider.
	//
	ShippingService string `xml:"ShippingService,omitempty"`

	//
	// The total shipping cost of the domestic leg of a Global Shipping Program shipment.
	//
	TotalShippingCost *AmountType `xml:"TotalShippingCost,omitempty"`
}

type MyMessagesAlertArrayType struct {

	//
	// This field is deprecated.
	//
	Alert []*MyMessagesAlertType `xml:"Alert,omitempty"`
}

type MyMessagesAlertIDArrayType struct {

	//
	// This field is deprecated.
	//
	AlertID []*MyMessagesAlertIDType `xml:"AlertID,omitempty"`
}

type MyMessagesAlertType struct {

	//
	// This field is deprecated.
	//
	Sender string `xml:"Sender,omitempty"`

	//
	// This field is deprecated.
	//
	RecipientUserID string `xml:"RecipientUserID,omitempty"`

	//
	// This field is deprecated.
	//
	Subject string `xml:"Subject,omitempty"`

	//
	// This field is deprecated.
	//
	Priority string `xml:"Priority,omitempty"`

	//
	// This field is deprecated.
	//
	AlertID *MyMessagesAlertIDType `xml:"AlertID,omitempty"`

	//
	// This field is deprecated.
	//
	ExternalAlertID string `xml:"ExternalAlertID,omitempty"`

	//
	// This field is deprecated.
	//
	ContentType string `xml:"ContentType,omitempty"`

	//
	// This field is deprecated.
	//
	Text string `xml:"Text,omitempty"`

	//
	// This field is deprecated.
	//
	ResolutionStatus *MyMessagesAlertResolutionStatusCode `xml:"ResolutionStatus,omitempty"`

	//
	// This field is deprecated.
	//
	Read bool `xml:"Read,omitempty"`

	//
	// This field is deprecated.
	//
	CreationDate time.Time `xml:"CreationDate,omitempty"`

	//
	// This field is deprecated.
	//
	ReceiveDate time.Time `xml:"ReceiveDate,omitempty"`

	//
	// This field is deprecated.
	//
	ExpirationDate time.Time `xml:"ExpirationDate,omitempty"`

	//
	// This field is deprecated.
	//
	ResolutionDate time.Time `xml:"ResolutionDate,omitempty"`

	//
	// This field is deprecated.
	//
	LastReadDate time.Time `xml:"LastReadDate,omitempty"`

	//
	// This field is deprecated.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This field is deprecated.
	//
	IsTimedResolution bool `xml:"IsTimedResolution,omitempty"`

	//
	// This field is deprecated.
	//
	ActionURL string `xml:"ActionURL,omitempty"`

	//
	// This field is deprecated.
	//
	ResponseDetails *MyMessagesResponseDetailsType `xml:"ResponseDetails,omitempty"`

	//
	// This field is deprecated.
	//
	ForwardDetails *MyMessagesForwardDetailsType `xml:"ForwardDetails,omitempty"`

	//
	// This field is deprecated.
	//
	Folder *MyMessagesFolderType `xml:"Folder,omitempty"`
}

type MyMessagesExternalMessageIDArrayType struct {

	//
	// Currently available on the US site. A message ID that uniquely identifies a message
	// for a given user. If provided at the time of message creation, this ID can be used
	// to retrieve messages, and will take precedence over the message ID. A total of 10
	// message IDs can be specified.
	//
	ExternalMessageID []*MyMessagesExternalMessageIDType `xml:"ExternalMessageID,omitempty"`
}

type MyMessagesFolderSummaryType struct {

	//
	// An ID that uniquely identifies a My Messages
	// folder. Always returned for detail level
	// ReturnSummary.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// The name of a specified My Messages folder. For
	// GetMyMessages, Inbox (FolderID = 0) and Sent (FolderID = 1)
	// are not returned.
	//
	FolderName string `xml:"FolderName,omitempty"`

	//
	// This field has been deprecated, starting with the 685 release. Alerts are now
	// synonymous with Flagged messages, and are added to the
	// Summary.FlaggedMessageCount value.
	//
	NewAlertCount int32 `xml:"NewAlertCount,omitempty"`

	//
	// The number of new messages in a given folder.
	// Always returned for detail level ReturnSummary.
	//
	NewMessageCount int32 `xml:"NewMessageCount,omitempty"`

	//
	// This field has been deprecated, starting with the 685 release. Alerts are now
	// synonymous with Flagged messages, and are added to the
	// Summary.FlaggedMessageCount value.
	//
	TotalAlertCount int32 `xml:"TotalAlertCount,omitempty"`

	//
	// The total number of messages in a given
	// folder. Always returned for detail level
	// ReturnSummary.
	//
	TotalMessageCount int32 `xml:"TotalMessageCount,omitempty"`

	//
	// The total number of new high priority messages that a given user has.
	//
	NewHighPriorityCount int32 `xml:"NewHighPriorityCount,omitempty"`

	//
	// The total number of high priority messages that a given user has.
	//
	TotalHighPriorityCount int32 `xml:"TotalHighPriorityCount,omitempty"`
}

type MyMessagesFolderType struct {

	//
	// An ID that uniquely identifies a My Messages folder.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// The name of a specified My Messages folder.
	//
	FolderName string `xml:"FolderName,omitempty"`
}

type MyMessagesForwardDetailsType struct {

	//
	// This field is deprecated.
	//
	UserForwardDate time.Time `xml:"UserForwardDate,omitempty"`

	//
	// This field is deprecated.
	//
	ForwardMessageEncoding string `xml:"ForwardMessageEncoding,omitempty"`
}

type MyMessagesMessageArrayType struct {

	//
	// A <b>Message</b> container is returned for each message that matches the input criteria in the call request. Each <b>Message</b> container consists of detailed information on a message. The amount of information that is returned in each <b>Message</b> container is partially dependent on the value that is set in the required <b>DetailLevel</b> field.
	//
	Message []*MyMessagesMessageType `xml:"Message,omitempty"`
}

type MyMessagesMessageIDArrayType struct {

	//
	// An ID that uniquely identifies a message for a given user.
	//
	MessageID []*MyMessagesMessageIDType `xml:"MessageID,omitempty"`
}

type MyMessagesMessageType struct {

	//
	// Display name of the eBay user that sent the message.
	//
	Sender string `xml:"Sender,omitempty"`

	//
	// Displayable user ID of the recipient.
	//
	RecipientUserID string `xml:"RecipientUserID,omitempty"`

	//
	// Displayable name of the user or eBay
	// application to which the message is sent. Only
	// returned for M2M, and if a value exists.
	//
	SendToName string `xml:"SendToName,omitempty"`

	//
	// Subject of the message.
	//
	Subject string `xml:"Subject,omitempty"`

	//
	// ID that uniquely identifies a message for a given user.
	// <br/>
	// <br/>
	// This value is not the same as the value used for the
	// GetMemberMessages MessageID. Use the GetMemberMessages value
	// (used as the GetMyMessages ExternalID) instead.
	//
	MessageID *MyMessagesMessageIDType `xml:"MessageID,omitempty"`

	//
	// ID used by an external application to uniquely identify a
	// message. Returned only when specified by the external
	// application on message creation.
	// <br><br>
	// This value is equivalent to the value used for MessageID in
	// GetMemberMessages.
	//
	ExternalMessageID string `xml:"ExternalMessageID,omitempty"`

	//
	// Content type of the body text. The three acceptable values
	// are "TEXT", "HTML",  and "XML" (Note: This is case sensitive).
	//
	ContentType string `xml:"ContentType,omitempty"`

	//
	// Contains the message content, and
	// can contain a threaded message.
	// This field can contain plain text or HTML,
	// depending on the format of the original message.
	// The API does not check the email-format preferences
	// in My Messages on the eBay Web site.
	//
	Text string `xml:"Text,omitempty"`

	//
	// Indicates if the message is displayed with a flag in the seller's
	// My Messages mailbox on eBay.
	// It is strongly recommended that the seller act on the message by the
	// specified date (or within 60 days, if not specified).
	//
	Flagged bool `xml:"Flagged,omitempty"`

	//
	// Indicates if a message has been viewed by a given user. Note that retrieving
	// a message with the API does not mark it as read.
	//
	Read bool `xml:"Read,omitempty"`

	//
	// Date and time that a message was created by the sender.
	//
	CreationDate time.Time `xml:"CreationDate,omitempty"`

	//
	// Date and time that a message was received by My Messages and stored in a
	// database for the recipient.
	//
	ReceiveDate time.Time `xml:"ReceiveDate,omitempty"`

	//
	// Date and time at which a message expires.
	//
	ExpirationDate time.Time `xml:"ExpirationDate,omitempty"`

	//
	// Unique identifier of an eBay listing. This field is returned if the corresponding message is associated with a specific listing.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Details relating to the response to a message.
	//
	ResponseDetails *MyMessagesResponseDetailsType `xml:"ResponseDetails,omitempty"`

	//
	// Details relating to the forwarding of a
	// message. Only returned if the message is forwarded.
	//
	ForwardDetails *MyMessagesForwardDetailsType `xml:"ForwardDetails,omitempty"`

	//
	// Details relating to a My Messages folder.
	//
	Folder *MyMessagesFolderType `xml:"Folder,omitempty"`

	//
	// Message body in plain text format. The message body is displayed in plain text
	// even if the eBay user's Preferred Email Format preference on My eBay is set to HTML.
	// Graphics and text formatting are dropped if the eBay user's preference is set to
	// HTML.
	//
	Content string `xml:"Content,omitempty"`

	//
	// Type of message being retrieved through GetMyMessages. This is available only on
	// the US site.
	//
	MessageType *MessageTypeCodeType `xml:"MessageType,omitempty"`

	//
	// Specifies an active or ended listing's status in eBay's processing workflow.
	// If a listing ends with a sale (or sales), eBay needs to update the sale
	// details (e.g., total price and buyer/high bidder) and the final value fee.
	// This processing can take several minutes. If you retrieve a sold item and no
	// details about the buyer/high bidder are returned or no final value fee is
	// available, use this listing status information to determine whether eBay has
	// finished processing the listing.
	// <br><br> <span class="tablenote"><b>Note:</b>
	// For GetMyMessages, the listing status reflects the status of the listing at the time
	// the question was created. The listing status for this call must not match the listing
	// status returned by other calls (such as GetItemTransactions). This is returned only if
	// Messages.Message.MessageType is AskSellerQuestion. This tag is no longer returned
	// in the Sandbox environment.
	// </span>
	//
	ListingStatus *ListingStatusCodeType `xml:"ListingStatus,omitempty"`

	//
	// Currently available only on the US site. Context of the question (e.g. Shipping, General).
	// Corresponds to the message subject. Applies if Messages.Message.MessageType is AskSellerQuestion.
	//
	QuestionType *QuestionTypeCodeType `xml:"QuestionType,omitempty"`

	//
	// Indicates if there has been a reply to the message.
	//
	Replied bool `xml:"Replied,omitempty"`

	//
	// Indicates if this message is marked as a high-priority message.
	//
	HighPriority bool `xml:"HighPriority,omitempty"`

	//
	// Date and time for the ended item.
	//
	ItemEndTime time.Time `xml:"ItemEndTime,omitempty"`

	//
	// Title of the item listing.
	//
	ItemTitle string `xml:"ItemTitle,omitempty"`

	//
	// Media details stored as part of the message.
	//
	MessageMedia []*MessageMediaType `xml:"MessageMedia,omitempty"`
}

type MyMessagesResponseDetailsType struct {

	//
	// Whether a message can be responded
	// to. To respond to a message, use the URL
	// in ResponseURL. You may need to log into the eBay
	// Web site to complete the response.
	//
	ResponseEnabled bool `xml:"ResponseEnabled,omitempty"`

	//
	// A URL that the recipient must visit to respond to a
	// message. Responding may require logging
	// into the eBay Web site.
	//
	ResponseURL *AnyURI `xml:"ResponseURL,omitempty"`

	//
	// The date and time the user responded to a
	// message
	//
	UserResponseDate time.Time `xml:"UserResponseDate,omitempty"`
}

type MyMessagesSummaryType struct {

	//
	// Folder summary for each folder. Always
	// returned for detail level ReturnSummary.
	//
	FolderSummary []*MyMessagesFolderSummaryType `xml:"FolderSummary,omitempty"`

	//
	// This field has been deprecated.
	//
	NewAlertCount int32 `xml:"NewAlertCount,omitempty"`

	//
	// The number of new messages that a given user has. Always returned for detail level ReturnSummary.
	//
	NewMessageCount int32 `xml:"NewMessageCount,omitempty"`

	//
	// This field is deprecated.
	//
	UnresolvedAlertCount int32 `xml:"UnresolvedAlertCount,omitempty"`

	//
	// The number of messages that have been flagged.
	// Always returned for detail level ReturnSummary.
	//
	FlaggedMessageCount int32 `xml:"FlaggedMessageCount,omitempty"`

	//
	// This field has been deprecated.
	//
	TotalAlertCount int32 `xml:"TotalAlertCount,omitempty"`

	//
	// The total number of messages for a given user.
	// Always returned for detail level ReturnSummary.
	//
	TotalMessageCount int32 `xml:"TotalMessageCount,omitempty"`

	//
	// The total number of new high priority messages that a given user has.
	//
	NewHighPriorityCount int32 `xml:"NewHighPriorityCount,omitempty"`

	//
	// The total number of high priority messages that a given user has.
	//
	TotalHighPriorityCount int32 `xml:"TotalHighPriorityCount,omitempty"`
}

type MyeBayFavoriteSearchListType struct {

	//
	// The total number of favorite searches saved.
	//
	TotalAvailable int32 `xml:"TotalAvailable,omitempty"`

	//
	// A favorite search the user has saved, with a name and a search query.
	//
	FavoriteSearch []*MyeBayFavoriteSearchType `xml:"FavoriteSearch,omitempty"`
}

type MyeBayFavoriteSearchType struct {

	//
	// The name of the buyer's Saved Search on My eBay. The name defaults to the user's
	// original search string, or the user has the option of modifying the name of the
	// Saved Search.
	//
	SearchName string `xml:"SearchName,omitempty"`

	//
	// This is the URL of the buyer's Saved Search on My eBay.
	//
	SearchQuery string `xml:"SearchQuery,omitempty"`

	//
	// This string is the original search string of the buyer's Saved Search on My eBay.
	// This is the string that the user input into the search field.
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// This is the unique identifier (Category ID) of the category in which the user was
	// searching for the item for the Saved Search. Specifying a category in a query
	// restricts the search to a specific category. If the Saved Search is not restricted
	// to a specific category, the <b>CategoryID</b> field will not appear
	// in the request.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This enumeration value indicates the "Sort by" value that the user specified in the
	// Saved Search. Some of the ways buyers can sort items include by Best Match
	// (generally, the default), item price, item price + shipping, listing end time, and
	// item distance (relative to the buyer's shipping address). Available sort values
	// may vary for each search, but below is the complete set of values that may be
	// returned in this field.
	//
	ItemSort *SimpleItemSortCodeType `xml:"ItemSort,omitempty"`

	//
	// The <b>SortOrder</b> value works in conjunction with the
	// <b>ItemSort</b> value, and indicates whether Saved Search results are returned
	// in ascending (low to high values) or descending (high to low values) order.
	//
	SortOrder *SortOrderCodeType `xml:"SortOrder,omitempty"`

	//
	// The <b>EndTimeFrom</b> and <b>EndTimeFrom</b> values indicates that
	// a date range has been specified in the Saved Search. Only listings ending during
	// the date range defined with the <b>EndTimeFrom</b> and
	// <b>EndTimeFrom</b> values are retrieved in the search results.
	// <br/><br/>
	// The <b>EndTimeFrom</b> value indicates the beginning of the date range.
	//
	EndTimeFrom time.Time `xml:"EndTimeFrom,omitempty"`

	//
	// The appearance of <b>EndTimeFrom</b> and <b>EndTimeFrom</b>
	// values in the response indicates that a date range has been specified in the Saved
	// Search. Only listings ending during the date range defined with the
	// <b>EndTimeFrom</b> and <b>EndTimeFrom</b> values are
	// retrieved in the search results.
	// <br/><br/>
	// The <b>EndTimeTo</b> value indicates the ending of the date range.
	//
	EndTimeTo time.Time `xml:"EndTimeTo,omitempty"`

	//
	// The appearance of a <b>MaxDistance</b> value in the response indicates
	// that a proximity (Items near me) filter has been specified in the Saved Search.
	// <br/><br/>
	// The <b>MaxDistance</b> value is the maximum distance (in miles) away
	// from the buyer's postal code (specified or default) that an item may be
	// located (based on the <b>PostalCode</b> value returned in the
	// <b>FavoriteSearch</b> container). In a Saved Search, a buyer can
	// supply a postal code or can base that postal code on a major city. If neither one
	// of these methods for selecting a postal code is used, the postal code defaults to
	// the buyer's primary shipping address. Only items located within the
	// <b>MaxDistance</b> value are returned in the search results.
	//
	MaxDistance int32 `xml:"MaxDistance,omitempty"`

	//
	// The <b>PostalCode</b> value is either the postal code for the buyer's
	// primary shipping address, or it is the postal code specified through the proximity
	// (Items near me) filter of a Saved Search. In a Saved Search, a buyer can supply a
	// postal code or can base that postal code on a major city.
	//
	PostalCode string `xml:"PostalCode,omitempty"`

	//
	// Enumerated value that provides more information on the type of listing type
	// filtering the buyer used when setting up a Saved Search in My eBay.
	//
	ItemType *ItemTypeCodeType `xml:"ItemType,omitempty"`

	//
	// The appearance of a <b>PriceMax</b> value indicates that a maximum price
	// filter has been specified in the Saved Search. Only listings with an item price at
	// or below the <b>PriceMax</b> value are retrieved in the search results.
	// <br/><br/>
	// <b>PriceMax</b> can be used in conjunction with
	// <b>PriceMin</b> in a Saved Search to specify a price range. Only
	// listings with item prices within this price range are retrieved in the search
	// results.
	//
	PriceMax *AmountType `xml:"PriceMax,omitempty"`

	//
	// The appearance of a <b>PriceMin</b> value indicates that a minimum price
	// filter has been specified in the Saved Search. Only listings with an item price at
	// or above the <b>PriceMin</b> value are retrieved in the search results.
	// <br/><br/>
	// <b>PriceMin</b> can be used in conjunction with
	// <b>PriceMax</b> in a Saved Search to specify a price range. Only
	// listings with item prices within this price range are retrieved in the search
	// results.
	//
	PriceMin *AmountType `xml:"PriceMin,omitempty"`

	//
	// The appearance of a <b>Currency</b> value indicates that a currency
	// filter has been specified in the Saved Search. Only listings with the specified
	// <b>Currency</b> value are retrieved in the search results.
	//
	Currency *CurrencyCodeType `xml:"Currency,omitempty"`

	//
	// The BidCountMax value in a My eBay Favorite Search. The BidCountMax limits the search
	// results to items with a maximum number of bids.
	//
	BidCountMax int32 `xml:"BidCountMax,omitempty"`

	//
	// The BidCountMin value in a My eBay Favorite Search. The BidCountMin limits the
	// results of a search to items with a maximum number of bids.
	//
	BidCountMin int32 `xml:"BidCountMin,omitempty"`

	//
	// The SearchFlag value in a My eBay Favorite Search. The SearchFlag allows you to
	// specify whether you want to include charity listings, free-shipping listings, and
	// listings with other features in your search.
	//
	SearchFlag []*SearchFlagCodeType `xml:"SearchFlag,omitempty"`

	//
	// The PaymentMethod value in a My eBay Favorite Search. The PaymentMethod limits the
	// search results to items that accept a specific payment method or methods.
	//
	PaymentMethod *PaymentMethodSearchCodeType `xml:"PaymentMethod,omitempty"`

	//
	// The PreferredLocation value of a My eBay Favorite Search. The PreferredLocation
	// specifies the criteria for filtering search results by site, where site is determined
	// by the site ID in the request.
	//
	PreferredLocation *PreferredLocationCodeType `xml:"PreferredLocation,omitempty"`

	//
	// The SellerID value in a My eBay Favorite Search. The SellerID is the eBay ID of a
	// specific seller.
	//
	SellerID []string `xml:"SellerID,omitempty"`

	//
	// The SellerIDExclude value in a My eBay Favorite Search. The SellerIDExclude limits
	// the search results to exclude items sold by a specific seller or by specific sellers.
	//
	SellerIDExclude []string `xml:"SellerIDExclude,omitempty"`

	//
	// The ItemsAvailableTo value in a My eBay Favorite Search. ItemsAvailableTo limits the
	// result set to just those items available to the specified country.
	//
	ItemsAvailableTo *CountryCodeType `xml:"ItemsAvailableTo,omitempty"`

	//
	// The ItemsLocatedIn value in a My eBay Favorite Search. ItemsLocatedIn limits the
	// result set to just those items located in the specified country.
	//
	ItemsLocatedIn *CountryCodeType `xml:"ItemsLocatedIn,omitempty"`

	//
	// The SellerBusinessType value in a My eBay Favorite Search. The SellerBusinessType
	// limits the search results to those of a particular seller business type such as
	// commercial or private. SellerBusinessType is only available for sites that have
	// business seller features enabled.
	//
	SellerBusinessType *SellerBusinessCodeType `xml:"SellerBusinessType,omitempty"`

	//
	// The Condition value in a My eBay Favorite Search. Condition limits the results to new
	// or used items, plus items that have no condition specified.
	//
	Condition *ItemConditionCodeType `xml:"Condition,omitempty"`

	//
	// The Quantity value in a My eBay Favorite Search. The Quantity limits the search
	// results to listings that offer a certain number of items matching the query. The
	// Quantity field is used with QuantityOperator to specify that you are seeking listings
	// with quantities greater than, equal to, or less than the value you specify in
	// Quantity.
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// The Quantity Operator value in a My eBay Favorite Search. The Quantity Operator
	// limits the results to listings with quantities greater than, equal to, or less than
	// the value you specify in Quantity.
	//
	QuantityOperator *QuantityOperatorCodeType `xml:"QuantityOperator,omitempty"`
}

type MyeBayFavoriteSellerListType struct {

	//
	// The total number of favorite sellers saved.
	//
	TotalAvailable int32 `xml:"TotalAvailable,omitempty"`

	//
	// A favorite seller the user has saved, with a user ID and store name.
	//
	FavoriteSeller []*MyeBayFavoriteSellerType `xml:"FavoriteSeller,omitempty"`
}

type MyeBayFavoriteSellerType struct {

	//
	// The favorite seller's eBay user ID.
	//
	UserID string `xml:"UserID,omitempty"`

	//
	// The name of the store owned by the favorite seller, if applicable.
	//
	StoreName string `xml:"StoreName,omitempty"`
}

type MyeBaySecondChanceOfferListType struct {

	//
	// The total number of My eBay Second Chance Offers available.
	//
	TotalAvailable int32 `xml:"TotalAvailable,omitempty"`

	//
	// A Second Chance Offer item.
	//
	SecondChanceOffer []*ItemType `xml:"SecondChanceOffer,omitempty"`
}

type MyeBaySelectionType struct {

	//
	// Specifies whether or not to include the container in the response.
	// Set the value to true to return the default set of fields for the
	// container. Not needed if you set a value for at least one other field
	// in the container.
	// <br><br>
	// If you set DetailLevel to ReturnAll, set Include to false to exclude
	// the container from the response.
	//
	Include bool `xml:"Include,omitempty"`

	//
	// Specifies whether or not to include the item count in the response.
	// Set the value to true to return the default set of fields for the
	// container. Not needed if you set a value for at least one other field
	// in the container.
	// <br><br>
	// If you set DetailLevel to ReturnAll, set Include to false to exclude
	// the container from the response.
	//
	IncludeItemCount bool `xml:"IncludeItemCount,omitempty"`

	//
	// This field is not supported.
	//
	//
	IncludeFavoriteSearcheCount bool `xml:"IncludeFavoriteSearcheCount,omitempty"`

	//
	// Specifies whether or not to include FavoriteSellerCount in the response.
	// Set the value to true to return the default set of fields for the
	// container. Not needed if you set a value for at least one other field
	// in the container.
	// <br><br>
	// If you set DetailLevel to ReturnAll, set Include to false to exclude
	// the container from the response.
	//
	IncludeFavoriteSellerCount bool `xml:"IncludeFavoriteSellerCount,omitempty"`

	//
	// Specifies the sort order of the result. Default is Ascending.
	//
	Sort *SortOrderCodeType `xml:"Sort,omitempty"`

	//
	// Specifies the maximum number of items in the returned list.
	// If not specified, returns all items in the list.
	//
	MaxResults int32 `xml:"MaxResults,omitempty"`

	//
	// Specifies that only the user defined list whose name matches
	// the given name should be in the returned list.  If the user does
	// not have a matching record, no data is returned.  If this
	// element is omitted, the information for all records is returned.
	// For use only within the UserDefinedLists element.
	//
	UserDefinedListName string `xml:"UserDefinedListName,omitempty"`

	//
	// Specify true to return the full user defined list contents in
	// the response's UserDefinedList containers.  A value of
	// false means only a summary of the user defined list will be
	// returned.  The default value is false.
	//
	IncludeListContents bool `xml:"IncludeListContents,omitempty"`
}

type MyeBaySellingSummaryType struct {

	//
	// The number of currently active auctions that will sell. That
	// is, there is at least one bidder, and any reserve price has
	// been met. Equivalent to the "Will Sell" value in My eBay.
	//
	ActiveAuctionCount int32 `xml:"ActiveAuctionCount,omitempty"`

	//
	// The total number of currently active auctions for a given
	// seller. Note that this does not include listings that are
	// FixedPriceItem or StoresFixedPrice. Equivalent to the
	// "Auction Quantity" value in My eBay.
	//
	AuctionSellingCount int32 `xml:"AuctionSellingCount,omitempty"`

	//
	// The total number of bids made on the seller's active listings.
	//
	AuctionBidCount int32 `xml:"AuctionBidCount,omitempty"`

	//
	// For all items that the seller has for sale, the total
	// selling values of those items having bids and where the
	// Reserve price is met (if a Reserve price is specified).
	//
	TotalAuctionSellingValue *AmountType `xml:"TotalAuctionSellingValue,omitempty"`

	//
	// The total number of items that the seller has sold in the
	// past 31 days.
	//
	TotalSoldCount int32 `xml:"TotalSoldCount,omitempty"`

	//
	// The total monetary value of the items the seller has sold.
	//
	TotalSoldValue *AmountType `xml:"TotalSoldValue,omitempty"`

	//
	// The average duration, in days, of all items sold.
	//
	SoldDurationInDays int32 `xml:"SoldDurationInDays,omitempty"`

	//
	// The total number of Classified Ad listings listed by the
	// seller.
	//
	ClassifiedAdCount int32 `xml:"ClassifiedAdCount,omitempty"`

	//
	// The total number of leads from the seller's classified
	// ad listings. Number indicates the total number of emails
	// received for the listings
	//
	TotalLeadCount int32 `xml:"TotalLeadCount,omitempty"`

	//
	// The total number of offers received on active Classified
	// Ad listings.
	//
	ClassifiedAdOfferCount int32 `xml:"ClassifiedAdOfferCount,omitempty"`

	//
	// The total number of Classified Ad listings that have an
	// associated lead.
	//
	TotalListingsWithLeads int32 `xml:"TotalListingsWithLeads,omitempty"`

	//
	// The quantity of items that this seller can list. This number refers to the total quantity of items in all listings.
	// For example, if the seller's limit was a quantity of 100, this could be 100 listings of one item each, or one listing with a quantity of 100 items.
	// The seller will be unable to list additional items or quantities of items for sale in excess of this number for the
	// current month unless the seller requests an increase from eBay using the "Request higher selling limits" link in the All Selling section
	// of My eBay. (Under "Selling Limits".) Notice that the amount limit (see AmountLimitRemaining) may be reached
	// before the quantity limit is reached.
	//
	QuantityLimitRemaining int64 `xml:"QuantityLimitRemaining,omitempty"`

	//
	// The total value of the items listed price that this seller can list. This amount is the total of the prices
	// specified upon listing. For example, for fixed price listings, this is the total of the fixed price amounts.
	// For auction listings, this is the total of the starting prices.
	// The seller will be unable to list an item if the amount of the item's fixed price or starting price (for auctions)
	// exceeds the amount limit.
	// This is part of the seller limit, which can be increased by requesting an increase from eBay using the
	// "Request higher selling limits" link in the All Selling section
	// of My eBay. (Under "Selling Limits".) Notice that the quantity limit (see QuantityLimitRemaining) may be reached
	// before the amount limit is reached.
	//
	AmountLimitRemaining *AmountType `xml:"AmountLimitRemaining,omitempty"`
}

type NameRecommendationType struct {

	//
	// This string field is the name of the mandatory or recommended Item Specific or Product Identifier type (e.g. Brand/MPN). The seller should use the actual string in this field when creating, revising, or relisting an item with this Item Specific. The number of Item Specifics that are returned can be controlled with the <b>MaxNames</b> field in the call request.
	// <br/><br/>
	// This field is always returned with each <b>NameRecommendation</b> container.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This container provides details, instructions, and constraint information for each Item Specific name-value pairs. The fields that are returned under the <b>ValidationRules</b> container will vary per Item Specific.
	// <br/><br/>
	// Three key fields to look for are <b>MinValues</b>, <b>MaxValues</b>, and <b>VariationSpecifics</b>. If the <b>MinValues</b> appears for an Item Specific (usually with a value of '1'), it indicates that the Item Specific is required for the category. For many Item Specifics, the <b>MaxValues</b> field is returned with a value of '1', but the value will be higher for Item Specifics that support more than one value. The <b>VariationSpecifics</b> field is only returned (with a value of 'Disabled') when a seller is not allowed to pass in that Item Specific at the variation level in a multiple-variation listing.
	// <br/><br/>
	// This field is always returned with each <b>NameRecommendation</b> container.
	//
	ValidationRules *RecommendationValidationRulesType `xml:"ValidationRules,omitempty"`

	//
	// Each <b>ValueRecommendation</b> container shows a common/recommended/popular value for the corresponding Item Specific. Values are not returned for every Item Specific,  including some instance aspects (such as 'Bundle Description') where the text that is passed in for the Item Specific value may vary widely per seller, or if eBay does not have recommended values available for the Item Specific. The number of values that are returned for each Item Specific can be controlled with the <b>MaxValuesPerName</b> field in the call request.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> For unique product identifying aspects, such as MPN, UPC, ISBN, or EAN, instead of an actual value being returned, boilerplate text is used, such as 'Does Not Apply'. If an MPN or GTIN is required, but the seller does not have the identifier, he/she can pass in the boilerplate text as an alternative to the actual identifier.
	// </span>
	// <br/><br/>
	// In addition to the recommended value(s) for an Item Specific, a <b>ValueRecommendation.ValidationRules</b> container will be returned if the <b>IncludeConfidence</b> filter is included in the call request and set to <code>true</code>. The return 'Confidence' value is a percentage value that indicates how confident eBay is that the recommended value is a valid value for the corresponding Item Specific. The <b>ValueRecommendation.ValidationRules</b> container may also get returned for the 'Brand' Item Specific if the particular product brand in that listing category requires an association with an eBay catalog product.
	//
	ValueRecommendation []*ValueRecommendationType `xml:"ValueRecommendation,omitempty"`

	//
	// This field contains a URL to a relevant eBay help page that may provide more information about a particular Item Specific. This field is only returned if a relevant eBay help page is available. If this field is returned, the <b>HelpText</b> field may also be returned and provide some context on the content of the help page.
	//
	HelpURL *AnyURI `xml:"HelpURL,omitempty"`

	//
	// This field is not currently returned in <b>GetCategorySpecifics</b> for any Item Specific.
	//
	Source *ItemSpecificSourceCodeType `xml:"Source,omitempty"`

	//
	// The text in this field may provide some context on the content of the help page linked to in the <b>HelpURL</b> field. This field is only returned if the <b>HelpURL</b> field is returned, and is available.
	//
	HelpText string `xml:"HelpText,omitempty"`
}

type NameValueListArrayType struct {

	//
	// <b>For the <b>AddItem</b> family of calls:</b>
	// Contains the name and value(s) for an Item Specific.
	// Only required when the <b>ItemSpecifics</b> container is
	// specified.<br>
	// <br>
	// <b>For the AddFixedPriceItem family of calls:</b>
	// The same NameValueList schema is used for the
	// <b>ItemSpecifics</b> node, the <b>VariationSpecifics</b> node, and the
	// <b>VariationSpecifcsSet</b> node.<br>
	// <br>
	// If the listing has varations, any name that you use in the
	// <b>VariationSpecifics</b> and <b>VariationSpecificsSet</b> nodes can't be used
	// in the <b>ItemSpecifics</b> node.<br>
	// When you list with Item Variations:<br>
	// <b></b>
	// <ul>
	// <li>Specify shared Item Specifics (e.g., Brand) in the <b>ItemSpecifics</b> node. </li>
	// <li>Specify up to five <b>VariationSpecifics</b> in each Variation node. </li>
	// <li>Specify all applicable names with all their supported values in the <b>VariationSpecificSet</b> node. </li>
	// </ul>
	// See the Variation sample in the
	// <b>AddFixedPriceItem</b> call reference for examples.<br>
	// <br>
	// <b>For PlaceOffer:</b> Required if the item being
	// purchased includes Item Variations.
	// <br>
	// <br>
	// <b>For AddToWatchList and RemoveFromWatchList:</b> The <b>ItemID</b> value of the multiple-variation listing and the name-value pair to identify each variation in the listing are required.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> As of August 30, 2018, California will require certain sellers to display a Proposition 65 warning on online retail sites if products contain chemicals and/or substances that may impact the health of California buyers. This requirement is applicable to most eBay US categories, including eBay Motors, Motors Parts & Accessories, and PBSE-enforced categories. For category exceptions, see the <a href="https://developer.ebay.com/devzone/XML/docs/ReleaseNotes.html#1077-AN" target="_blank">Trading 1077 Release Notes</a>. The warning message can be customized by the seller, but should contain the following information:
	// <ul>
	// <li>The name of at least one listed chemical that prompted the warning</li>
	// <li>Text stating that the product 'can expose you to' the chemical(s) in the product </li>
	// <li>The URL for OEHHA's new Proposition 65 warnings website, which is <a href="www.P65Warnings.ca.gov" target="_blank">www.P65Warnings.ca.gov</a></li>
	// </ul>
	// Unlike standard item specifics that allow a maximum of 65 characters in the <b>Value</b> field, the matching value for the 'California Prop 65 Warning' item specific allows up to 800 characters of text. When a seller passes in this item specific, eBay will automatically insert a warning symbol icon for the listing.
	// </span>
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`
}

type NameValueListType struct {

	//
	// Depending on the call and context, this value is either a name of an Item/Category/Variation Specific, or a Parts Compatibility name.
	// <br>
	// <br>
	// <b>For the AddItem and AddFixedPriceItem families of
	// calls:</b> In the <b>Item.ItemSpecifics</b> context, this can be any
	// name that the seller wants to use. However, to help buyers find
	// items more easily, it is a good idea to try to use a recommended
	// name when possible (see <b>GetCategorySpecifics</b>).
	// You can't specify the same name twice within the same listing.
	// <br>
	// <br>
	// <b>For the <b>AddFixedPriceItem</b> family of calls:</b>
	// In the <b>VariationSpecifics</b> context, this can be any name that
	// the seller wants to use, unless the <b>VariationsEnabled</b> flag
	// is false for the name in the <b>GetCategorySpecifics</b> response.
	// For example, for some categories eBay may recommend that you only
	// use	 "Brand" as a shared name at the Item level, not in variations.
	// <br>
	// <br>
	// <b>For the <b>AddFixedPriceItem</b> family of calls:</b>
	// In the <b>Compatibility.NameValueList</b> context, this value is a motor vehicle aspect such as <em>Year</em>, <em>Make</em>, and <em>Model</em>. A <b>Compatibility.NameValueList</b> container is applicable for motor vehicle parts and accessories listings.
	// <br>
	// <br>
	// <b>For GetCategorySpecifics:</b>
	// This is a recommended (popular) name to use for items in the
	// specified category (e.g., "Brand" might be recommended,
	// not "Manufacturer").
	// </span>
	// <br>
	// <br>
	// <b>For PlaceOffer:</b> Required if the item being
	// purchased includes Item Variations.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> For mandatory and recommended item specifics that are returned in the <b>GetCategorySpecifics</b> call, the seller should pass in the name of these item specifics just as they are shown in the <b>GetCategorySpecifics</b> response. Similarly, for PBSE categories, the seller should pass in the name of instance aspects just as they are shown in the <b>GetCategorySpecifics</b> response. Instance aspects are additional details unique to a specific item or listing that a seller can include along with the product aspects that are already defined in the eBay Catalog product associated with the listing. Instance aspects common to many PBSE categories include 'Bundle Description' and 'Modification Description'. As of August 30, 2018, eBay US sellers who ship to California are required to pass in a 'California Prop 65 Warning' item specific if the item in the listing contains one or more chemicals known to be harmful to human health. This item specific is passed at the listing level for both single-variation and multiple-variation listings. The 'California Prop 65 Warning' is considered an instance specific because it will be retained on the listing even when the seller lists in a PBSE category. This requirement is applicable to most eBay US categories, including eBay Motors, Motors Parts & Accessories, and PBSE-enforced categories.
	// </span>
	//
	// <span class="tablenote"><b>Note:</b>
	// If Brand and MPN (Manufacturer Part Number) are being used to identify product variations in a multiple-variation listing, the Brand must be specified at the item level (<b>ItemSpecifics</b> container) and the MPN for each product variation must be specified at the variation level (<b>VariationSpecifics</b> container). The Brand name must be the same for all variations within a single listing.
	// </span>
	//
	Name string `xml:"Name,omitempty"`

	//
	// Depending on the call and context, this value is either the value of an Item/Category/Variation Specific, a Parts Compatibility value, or a product identifier.<br>
	// <br>
	// <b>For the <b>AddItem</b> family of calls:</b>
	// If you specify multiple values for Item Specifics,
	// eBay only stores the first one,
	// unless <b>GetCategorySpecifics</b> indicates
	// that the corresponding name supports multiple values.
	// <br>
	// <br>
	// <b>For the <b>AddFixedPriceItem</b> family of calls:</b>
	// If you specify multiple values for Item Specifics or
	// Variation Specifics,
	// eBay only stores the first one,
	// unless <b>GetCategorySpecifics</b> indicates
	// that the corresponding name supports multiple values.<br>
	// <br>
	// In <b>VariationSpecificSet</b>, you typically specify multiple
	// Value fields for each name. For example, if <b>Name</b> = <code>Size</code>,
	// you would specify all size values that you wan to offer in the
	// listing.
	// <br>
	// <br>
	// For the <b>Compatibility.NameValueList</b> context, this is the corresponding value of a motor vehicle aspect such as <em>Year</em>, <em>Make</em>, and <em>Model</em>. A <b>Compatibility.NameValueList</b> container is applicable for motor vehicle parts and accessories listings.
	// <br>
	// <br>
	// <b>For GetCategorySpecifics:</b> The most highly recommended values are returned first. For these calls,
	// Value is only returned when recommended values are available.<br>
	// <br>
	// <b>For PlaceOffer:</b> Required if the item being
	// purchased includes Item Variations.<br>
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> The standard maximum length for the value of an item specific is 65, but the maximum allowed length increases for instance aspects such as 'Bundle Description' and 'Modification Description'. The maximum allowed length for these instance aspects are returned in the <b>GetCategorySpecifics</b> call. The maximum allowed length for the new 'California Prop 65 Warning' item specific is 800 characters. For more information about the 'California Prop 65 Warning' item specific, see the <b>ItemSpecifics.NameValueList</b> field description.
	// </span>
	//
	Value []string `xml:"Value,omitempty"`

	//
	// This enumerated value indicates whether the Item Specific was manually input or selected during listing/revision/re-listing time, or if the Item Specific name-value pair came from an eBay catalog product that the listing is associated with.
	//
	Source *ItemSpecificSourceCodeType `xml:"Source,omitempty"`
}

type NameValueRelationshipType struct {

	//
	// The name of another Item Specific that the current value depends on.
	// For example, in a clothing category, "Size Type" could be recommended
	// as a parent of Size.
	//
	ParentName string `xml:"ParentName,omitempty"`

	//
	// The value of another Item Specific that the current value depends on.
	// For example, in a clothing category, if "Size Type" is the <b>ParentName</b>,
	// then "Petite" could be recommended as a parent value for <b>Size</b> = <code>Medium</code>.
	//
	ParentValue string `xml:"ParentValue,omitempty"`
}

type NonProfitAddressType struct {

	//
	// The street address of a nonprofit charity organization.
	//
	AddressLine1 string `xml:"AddressLine1,omitempty"`

	//
	// The second line (if needed) of a nonprofit charity organization. This field is often
	// used for a suite number, floor number, or P.O. Box.
	//
	AddressLine2 string `xml:"AddressLine2,omitempty"`

	//
	// The city in which a nonprofit charity organization is located.
	//
	City string `xml:"City,omitempty"`

	//
	// The state in which a nonprofit charity organization is located.
	//
	State string `xml:"State,omitempty"`

	//
	// The zip code of a nonprofit charity organization.
	//
	ZipCode string `xml:"ZipCode,omitempty"`

	//
	// The latitude value of a nonprofit charity organization. Latitude and longitude
	// coordinates pinpoint the location of the organization relative to the earth, and are
	// useful for search purposes. The <b>Latitude</b> and <b>Longitude</b>
	// fields are only returned in <b>GetCharities</b> if set by the organization.
	//
	Latitude float64 `xml:"Latitude,omitempty"`

	//
	// The longitude value of a nonprofit charity organization. Latitude and longitude
	// coordinates pinpoint the location of the organization relative to the earth, and are
	// useful for search purposes. The <b>Latitude</b> and <b>Longitude</b>
	// fields are only returned in <b>GetCharities</b> if set by the organization.
	Longitude float64 `xml:"Longitude,omitempty"`

	//
	// Enumeration value that indicates whether or not a nonprofit charity organization is
	// registered with the PayPal Giving Fund. See the <a href="http://pages.ebay.com/help/sell/nonprofit.html#enrolling">Enrolling your nonprofit</a> help topic for more information on registering with
	// the PayPal Giving Fund and the benefits that come with being a registered eBay for Charity organization.
	//
	AddressType *AddressTypeCodeType `xml:"AddressType,omitempty"`
}

type NonSubscriptionDefinitionType struct {
}

type NotificationDetailsArrayType struct {

	//
	// Each <b>NotificationDetails</b> container consists of detailed information about one notification. <b>NotificationDetails</b> container(s) are only returned if an <b>ItemID</b> value was specified in the request, and there were one or more notifications related to this listing during the specified time range.
	//
	NotificationDetails []*NotificationDetailsType `xml:"NotificationDetails,omitempty"`
}

type NotificationDetailsType struct {

	//
	// Returns the destination address for the notification. This is the value set
	// using SetNotificationPreferences.
	//
	DeliveryURL *AnyURI `xml:"DeliveryURL,omitempty"`

	//
	// Reference identifier for the notification.
	//
	ReferenceID string `xml:"ReferenceID,omitempty"`

	//
	// Date and time when this notification will be removed from the
	// eBay system.
	//
	ExpirationTime time.Time `xml:"ExpirationTime,omitempty"`

	//
	// Returns the notification type. Possible values include: AskSellerQuestion,
	// AuctionCheckoutComplete, BestOffer, CheckoutBuyerRequestTotal, EndOfAuction,
	// Feedback, FixedPriceEndOfTransaction, FixedPriceTransaction, ItemNotReceived,
	// MyMessages, OutBid, SecondChanceOffer, UPIBuyerResponseDispute, UPISellerClosedDispute,
	// UPISellerOpenedDispute, and UPISellerRespondedToDispute.
	//
	Type *NotificationEventTypeCodeType `xml:"Type,omitempty"`

	//
	// Returns the total number of retries for the given notification.
	//
	Retries int32 `xml:"Retries,omitempty"`

	//
	// Returns the notification status. Possible values include Delivered,
	// Failed, Rejected, and MarkedDown.
	//
	DeliveryStatus *NotificationEventStateCodeType `xml:"DeliveryStatus,omitempty"`

	//
	// Returns the time when the notification is scheduled for retry.
	// This won't be included if the DeliveryStatus is Delivered.
	//
	NextRetryTime time.Time `xml:"NextRetryTime,omitempty"`

	//
	// Returns the time when the notification was delivered.
	//
	DeliveryTime time.Time `xml:"DeliveryTime,omitempty"`

	//
	// Returns the error message.
	//
	ErrorMessage string `xml:"ErrorMessage,omitempty"`

	//
	// Returns the delivery URL name for the notification. This is the value set
	// using SetNotificationPreferences.
	//
	DeliveryURLName string `xml:"DeliveryURLName,omitempty"`
}

type NotificationEnableArrayType struct {

	//
	// In a <b>SetNotificationPreferences</b> call, one <b>NotificationEnable</b> container is used for each notification that the user either wants to subsribe to or disable.
	// <br><br>
	// If a <b>UserDeliveryPreferenceArray</b> container is used, at least one <b>NotificationEnable</b> container must be specified.
	// <br><br>
	// In a <b>GetNotificationPreferences</b> call, one <b>NotificationEnable</b> container is returned for each notification that the user has set a preference on - enabled or disabled.
	//
	NotificationEnable []*NotificationEnableType `xml:"NotificationEnable,omitempty"`
}

type NotificationEnableType struct {

	//
	// The name of the notification event.
	//
	EventType *NotificationEventTypeCodeType `xml:"EventType,omitempty"`

	//
	// Whether the event is enabled or disabled.
	//
	EventEnable *EnableCodeType `xml:"EventEnable,omitempty"`
}

type NotificationEventPropertyType struct {

	//
	// The name of the notification event.
	//
	EventType *NotificationEventTypeCodeType `xml:"EventType,omitempty"`

	//
	// Specify property name associated with an particular event.
	//
	Name *NotificationEventPropertyNameCodeType `xml:"Name,omitempty"`

	//
	// Specifies the value for the property.
	//
	Value string `xml:"Value,omitempty"`
}

type NotificationMessageType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents NotificationMessage"`

	*AbstractResponseType

	//
	// The SMS message.
	//
	MessageBody string `xml:"MessageBody,omitempty"`

	//
	// The EIAS userId.
	//
	EIAS string `xml:"EIAS,omitempty"`
}

type NotificationStatisticsType struct {

	//
	// Returns the number of notifications delivered successfully during the given
	// time period.
	//
	DeliveredCount int32 `xml:"DeliveredCount,omitempty"`

	//
	// Returns the number of new notifications that were queued during
	// the given time period.
	//
	QueuedNewCount int32 `xml:"QueuedNewCount,omitempty"`

	//
	// Returns the number of pending notifications in the queue during
	// the given time period.
	//
	QueuedPendingCount int32 `xml:"QueuedPendingCount,omitempty"`

	//
	// Returns the number of notifications that permanently failed during
	// the given time period.
	//
	ExpiredCount int32 `xml:"ExpiredCount,omitempty"`

	//
	// Returns the number of notifications for which there were delivery errors
	// during the given time period.
	//
	ErrorCount int32 `xml:"ErrorCount,omitempty"`
}

type NotificationUserDataType struct {

	//
	// User data related to SMS notifications. SMS is currently reserved for future use.
	//
	SMSSubscription *SMSSubscriptionType `xml:"SMSSubscription,omitempty"`

	//
	// User account activity summary alert delivery schedule.
	// Returned if PreferenceLevel is set to UserData in
	// GetNotificationPreferences.
	// See "Working with Platform Notifications" for instructions on
	// "Informational Alerts".
	//
	SummarySchedule []*SummaryEventScheduleType `xml:"SummarySchedule,omitempty"`

	//
	// An application subscribing to notifications can include an XML-compliant
	// string, not to exceed 256 characters, which will be returned in the
	// notification payload. The string can contain user-specific information to
	// identify a particular user. Any sensitive information should be passed with due
	// caution and proper encryption.
	//
	ExternalUserData string `xml:"ExternalUserData,omitempty"`
}

type NumberOfPolicyViolationsDetailsType struct {

	//
	// This field is deprecated.
	//
	//
	Count []int32 `xml:"Count,omitempty"`
}

type OfferArrayType struct {

	//
	// Each <b>Offer</b> container consists of detailed information on each bid made on an auction listing that is specified in the call request. Information in this container includes the amount of the bid, the time of the bid, and data for the user making the bid.
	//
	Offer []*OfferType `xml:"Offer,omitempty"`
}

type OfferType struct {

	//
	// Indicates the type of offer being made on the specified listing.
	// If the item is Best Offer-enabled and the buyer
	// makes a Best Offer (or a counter offer), then after
	// the <b>PlaceOffer</b> call,
	// the buyer can get the status of the Best Offer
	// (and of a possible seller-counter-offer, etc.)
	// using the <b>GetBestOffers</b> call. See the
	// <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Feature-BestOffer.html">eBay Features Guide</a>
	// for information about Best Offer-enabled listings and about <b>GetBestOffers</b>.
	//
	Action *BidActionCodeType `xml:"Action,omitempty"`

	//
	// Three-digit currency code for the currency used for the auction. Valid values can
	// be viewed in the <b>CurrencyCodeType</b> code list.
	//
	Currency *CurrencyCodeType `xml:"Currency,omitempty"`

	//
	// The unique identifier of an eBay listing item listed on the eBay site.
	// Returned by eBay when the item is created.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Amount of the offer placed. For auction listings, the amount
	// bid on the item (subject to outbid by other buyers). For fixed-price
	// listings, the fixed sale price at which the item is purchased. For
	// auction listings with an active Buy It Now option, this amount
	// will be either the Buy It Now price for purchase or the amount of a bid,
	// depending on the offer type (as specified in <b>Action</b>). For <b>PlaceOffer</b>,
	// the <b>CurrencyID</b> attribute is ignored if provided. Regarding Value-Added Tax (VAT):
	// Even if VAT applies, you do not need to add VAT to the <b>MaxBid</b> value.
	// If VAT applies to the listing, the seller can specify a VAT percent value
	// when they list the item.
	//
	MaxBid *AmountType `xml:"MaxBid,omitempty"`

	//
	// Specifies the quantity of items from the specified listing that the user tendering the offer intends to purchase, bid on, or make a Best Offer on. For auctions, the value is always <b>1. For multiple-quantity listings, this value must be greater than zero but not exceeding the quantity available for sale in the listing.
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// Indicates the user's preference to accept second chance offers. If <code>true</code>,
	// the user is willing to be the recipient of second chance offers.
	//
	SecondChanceEnabled bool `xml:"SecondChanceEnabled,omitempty"`

	//
	// Unique ID identifying the currency in which the localized offer amounts are
	// expressed.
	//
	SiteCurrency *CurrencyCodeType `xml:"SiteCurrency,omitempty"`

	//
	// Timestamp indicating the date and time that the bid was placed.
	//
	TimeBid time.Time `xml:"TimeBid,omitempty"`

	//
	// This amount indicates the highest bid that the corresponding bidder has made on the auction item. If that specific bidder has only made one bid on the auction listing, this value will be the same value as in the <b>MaxBid</b> field, but if the bidder has made multiple bids on the auction item, the <b>HighestBid</b> will show the highest of the bidder's bids, but <b>MaxBid</b> will show the value of the corresponding bid.
	//
	HighestBid *AmountType `xml:"HighestBid,omitempty"`

	//
	// Dollar amount of the bid in the user's currency. This field is always returned but its amount will be the same as the value in the <b>MaxBid</b> field, unless currency conversion was actually performed.
	//
	ConvertedPrice *AmountType `xml:"ConvertedPrice,omitempty"`

	//
	// The unique identifier of the order line item (transaction). An order line item
	// is created when a winning bidder commits to purchasing an
	// item.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This container consists of detailed information on the user that made the bid. Some information in this container will be masked unless the call is made by the owner of the listing.
	//
	User *UserType `xml:"User,omitempty"`

	//
	// If <code>true</code>, confirms that the bidder read and agrees to eBay's
	// privacy policy. Applies if the subject item is in a category
	// that requires user consent. If user consent, which is
	// confirmation that a bidder read and agrees to eBay's privacy
	// policy, is required for a category that the subject item is in,
	// this value must be <code>true</code> for a bid to occur.
	//
	UserConsent bool `xml:"UserConsent,omitempty"`

	//
	// This field is deprecated.
	//
	BidCount int32 `xml:"BidCount,omitempty"`

	//
	// A message from the buyer to the seller. Applies if the buyer
	// is using <b>PlaceOffer</b> to perform a Best Offer-related
	// action (Best Offer, Counter Offer, etc.).
	//
	Message string `xml:"Message,omitempty"`

	//
	// The unique identifier of a Best Offer on an item. This value must be specified as input to <b>PlaceOffer</b> if a
	// buyer is performing any action against a Best Offer or Counter Offer.
	//
	BestOfferID *BestOfferIDType `xml:"BestOfferID,omitempty"`

	//
	// The maximum bid placed by the user making the call. This field is only returned if the corresponding bid was made by the user making the call.
	//
	MyMaxBid *AmountType `xml:"MyMaxBid,omitempty"`
}

type OrderArrayType struct {

	//
	// Details of an eBay order. One eBay order can have one or more order line items (<b>Transaction</b> objects).
	//
	Order []*OrderType `xml:"Order,omitempty"`
}

type OrderIDArrayType struct {

	//
	// A unique identifier for an eBay order. For a single line item order, this value is actually the <b>OrderLineItemID</b> value, which is a concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between these two values, such as '121124971073-1094989827002' for a fixed-price listing, or '121124971074-0' for an auction listing. For a multiple line item order (known as a Combined Invoice order), the <b>OrderID</b> value is created by eBay when the buyer/seller combines multiple line items into one order, and the buyer makes one payment for all line items from the same seller. "Combined Invoice" orders are created  through the Web flow, or when the buyer or seller creates a "Combined Invoice" order by using the <a href="AddOrder.html">AddOrder</a> call. An example of "Combined Invoice" order ID is '155643809010'.
	// <br><br>
	// If one or more <b>OrderID</b> values are used, all other input filters are ignored.
	// <br><br>
	//
	OrderID []*OrderIDType `xml:"OrderID,omitempty"`
}

type OrderTransactionArrayType struct {

	//
	// This container consists of detailed information on a specific order and each order line item in that order.
	//
	OrderTransaction []*OrderTransactionType `xml:"OrderTransaction,omitempty"`
}

type OrderTransactionType struct {

	//
	// Contains the information describing an order.
	//
	Order *OrderType `xml:"Order,omitempty"`

	//
	// Contains the information describing a transaction.
	//
	Transaction *TransactionType `xml:"Transaction,omitempty"`
}

type OrderType struct {

	//
	// A unique identifier for an eBay order. For a single line item order, this value is actually the <b>OrderLineItemID</b> value, which is a concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between these two values, such as <code>121124971073-1094989827002</code> for a fixed-price listing, or <code>121124971074-0</code> for an auction listing. For a multiple line item order (known as a Combined Invoice order), the <b>OrderID</b> value is created by eBay when the buyer/seller combines multiple line items into one order, and the buyer makes one payment for all line items from the same seller. "Combined Invoice" orders are created  through the Web flow, or when the buyer or seller creates a "Combined Invoice" order by using the <a href="AddOrder.html">AddOrder</a> call. An example of "Combined Invoice" order ID is <code>155643809010</code>.
	// <br><br>
	// An <b>OrderID</b> value overrides an <b>OrderLineItemID</b> value or an
	// <b>ItemID/TransactionID</b> pair if these fields are also specified in the same request.
	// <br/><br/>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> This field is returned with the correct order ID only to the buyer, the seller, or PayPal (if PayPal is the payment method). For third parties (except PayPal):
	// <ul>
	// <li>If using a Trading WSDL older than version 1019, the Order ID will be returned to third parties as dummy data in the form of <code>1000000000000</code> or <code>1000000000000-1000000000000</code>.</li>
	// <li>If using Trading WSDL version 1019 or newer, the Order ID will be returned to third parties as an empty field (<code>&lt;OrderID/&gt;</code>).</li>
	// </ul>
	//
	OrderID *OrderIDType `xml:"OrderID,omitempty"`

	//
	// This enumeration value indicates the current status of the order.
	//
	OrderStatus *OrderStatusCodeType `xml:"OrderStatus,omitempty"`

	//
	// This value indicates the dollar amount by which the buyer has adjusted the order
	// total. Adjustments to order costs may include shipping and handling, shipping
	// insurance, buyer discounts, or added services. A positive amount indicates the
	// amount is an extra charge being paid to the seller by the buyer. A negative
	// value indicates this amount is a credit given to the buyer by the seller.
	//
	AdjustmentAmount *AmountType `xml:"AdjustmentAmount,omitempty"`

	//
	// This value indicates the total amount of the order. This amount includes the
	// sale price of each line item, shipping and handling charges, shipping insurance
	// (if offered and selected by the buyer), additional services, and any applied
	// sales tax. This value is returned after the buyer has completed checkout (the
	// <b>CheckoutStatus.Status</b> output field reads 'Complete').
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// For auction listings on North American sites and on eBay Motors Parts and
	// Accessories, the <b>AmountPaid</b> value minus any applied sales tax is the amount
	// subject to the final value fee calculation. The sales tax amount is returned in
	// the <b>ShippingDetails.SalesTax.SalesTaxAmount</b> field. For more information on how
	// final value fees are calculated, see the
	// <a href="http://pages.ebay.com/help/sell/fvf.html">final value fees</a> help
	// page.
	// </span><br>
	// <span class="tablenote"><b>Note: </b> The amount in this field will not include any Australia import tax charged to the buyer for one or more order line items. Australia import tax is only applicable to the Australia site.
	// </span>
	//
	AmountPaid *AmountType `xml:"AmountPaid,omitempty"`

	//
	// This value indicates the shipping discount experienced by the buyer as a result
	// of creating a Combined Invoice order. This value is returned as 0.00 for single
	// line item orders.
	//
	AmountSaved *AmountType `xml:"AmountSaved,omitempty"`

	//
	// Container consisting of details related to the current checkout status of the
	// order.
	//
	CheckoutStatus *CheckoutStatusType `xml:"CheckoutStatus,omitempty"`

	//
	// Container consisting of all shipping-related details for an order, including
	// domestic and international shipping service options, shipment tracking
	// information, and shipping insurance information.
	//
	ShippingDetails *ShippingDetailsType `xml:"ShippingDetails,omitempty"`

	//
	// This value indicates whether a Combined Invoice order was created by the buyer
	// or by the seller. This field is only returned for Combined Invoice orders.
	//
	CreatingUserRole *TradingRoleCodeType `xml:"CreatingUserRole,omitempty"`

	//
	// Timestamp that indicates the date and time that the order was created. For
	// single line item orders, this value is the same as <b>CreatedDate</b> in the
	// <b>Transaction</b> container.
	//
	CreatedTime time.Time `xml:"CreatedTime,omitempty"`

	//
	// Each payment method available to the buyer for the order's purchase is identified with a <b>PaymentMethods</b> field. At least
	// one payment method must be specified, unless the seller is opted in to the new eBay Managed Payments program.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> The new eBay Managed Payments program is currently only available to a limited number of sellers on the US site. For sellers in the eBay Managed Payments program, a payment method does not need to be specified at listing/checkout time. Any payment method that is specified at listing time (or defined in a payment business policy) will be ignored and dropped from the listing, and the seller will get a warning message in the response.
	// </span><br>
	//
	PaymentMethods []*BuyerPaymentMethodCodeType `xml:"PaymentMethods,omitempty"`

	//
	// The email address of the seller involved in the order. The email address of the seller is only returned if it is the same seller making the call.
	//
	SellerEmail string `xml:"SellerEmail,omitempty"`

	//
	// Container holding the shipping address of the buyer involved in the order.
	//
	ShippingAddress *AddressType `xml:"ShippingAddress,omitempty"`

	//
	// Container consisting of details about the domestic or international shipping
	// service selected by the buyer.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> If one or more <strong>OrderID</strong> values are used in the call request, the "Combined Invoice" Order ID value must be specified for multiple line item orders to ensure that the shipping service and cost information is accurate. If the individual <strong>OrderLineItemID</strong> values for each line item are specified in the <strong>OrderID</strong> field instead, the shipping service and cost information will not be accurate.
	// </span>
	//
	ShippingServiceSelected *ShippingServiceOptionsType `xml:"ShippingServiceSelected,omitempty"`

	//
	// The subtotal amount for the order is the total cost of all order line items. This value does not include any shipping/handling, shipping insurance, or sales tax costs.
	//
	Subtotal *AmountType `xml:"Subtotal,omitempty"`

	//
	// The <b>Total</b> amount equals the <b>Subtotal</b> value plus the shipping/handling, shipping insurance, and sales tax costs.
	//
	Total *AmountType `xml:"Total,omitempty"`

	//
	// Container consisting of payment details for an eBay order. PayPal transactions may include a buyer payment or refund, or a fee or credit applied to the seller's account. This field is only returned after payment for the order has occurred.
	// <br/><br/>
	// For orders in which the seller's funds are being held by PayPal, the <b>PaymentHoldDetails</b> container and <b>PaymentHoldStatus</b> field will be returned instead of the <b>ExternalTransaction</b> container.
	// <br><br>
	// <span class="tablenote">
	// <strong>Note:</strong> In an upcoming release, <strong>ExternalTransaction</strong> will be replaced by the more versatile <strong>MonetaryDetails</strong> container, so you are encouraged to start using <strong>MonetaryDetails</strong> now.
	// </span>
	//
	ExternalTransaction []*ExternalTransactionType `xml:"ExternalTransaction,omitempty"`

	//
	// Container consisting of one or more line items that comprise an order. The data for
	// an order line item is stored in the <b>Transaction</b> container. For
	// the <b>AddOrder</b> call, there will always be at least two order line
	// items in the container, but no more than 40.
	// <br><br>
	// We strongly recommend that you avoid mixing transactions for digital and non-digital listings in the same Combined Invoice order. (In the future, <b>AddOrder</b> may enforce this recommendation.)
	//
	TransactionArray *TransactionArrayType `xml:"TransactionArray,omitempty"`

	//
	// eBay user ID of the order's buyer.
	//
	BuyerUserID *UserIDType `xml:"BuyerUserID,omitempty"`

	//
	// Timestamp indicating the date and time of order payment. This field is not
	// returned until payment has been made by the buyer. This field will not be returned for orders where the buyer has received partial or full refunds.
	// <br><br>
	// This time is specified in GMT (not Pacific time).
	// See <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/DataTypes.html#ConvertingBetweenUTCGMTandLocalTime"> eBay Features Guide</a>
	// for information about converting between GMT and other time zones.
	//
	PaidTime time.Time `xml:"PaidTime,omitempty"`

	//
	// Timestamp indicating the date and time of order shipment. This field is not returned until the order has been marked as shipped. Note that sellers have the ability to set the shipped time up to three calendar days in the future.
	// <br><br>
	// This time is specified in GMT (not Pacific time).
	// See <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Basics/DataTypes.html"> eBay Features Guide</a>
	// for information about converting between GMT and other time zones.
	//
	ShippedTime time.Time `xml:"ShippedTime,omitempty"`

	//
	// Indicates whether the item can be paid for through a payment gateway (Payflow) account. If <b>IntegratedMerchantCreditCardEnabled</b> is true, then integrated merchant credit card (IMCC) is enabled for credit cards because the seller has a payment gateway account. Therefore, if <b>IntegratedMerchantCreditCardEnabled</b> is true, and 'AmEx', 'Discover', or 'VisaMC' is returned for an item, then on checkout, an online credit-card payment is processed through a payment gateway account.
	//
	IntegratedMerchantCreditCardEnabled bool `xml:"IntegratedMerchantCreditCardEnabled,omitempty"`

	//
	// Reserved for future use.
	//
	BundlePurchase bool `xml:"BundlePurchase,omitempty"`

	//
	// This field is returned if the buyer left a message for the seller during
	// checkout.
	//
	BuyerCheckoutMessage string `xml:"BuyerCheckoutMessage,omitempty"`

	//
	// Unique identifier for the user that does not change when the eBay user name
	// is changed. Use when an application needs to associate a new eBay user name
	// with the corresponding eBay user.
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to that
	// bidder, and to the seller of an item that the user is bidding on.
	//
	EIASToken string `xml:"EIASToken,omitempty"`

	//
	// This field indicates the type and/or status of a payment hold on the item.
	//
	PaymentHoldStatus *PaymentHoldStatusCodeType `xml:"PaymentHoldStatus,omitempty"`

	//
	// This container consists of information related to the payment hold
	// on the order, including the reason why the buyer's payment for the order is
	// being held, the expected release date of the funds into the seller's
	// account, and possible action(s) the seller can take to expedite the payout
	// of funds into their account. This container is only returned if PayPal
	// has placed a payment hold on the order.
	// <br><br>
	// An American seller (selling on US or US Motors sites) and a Canadian
	// seller (selling on CA and CA- FR sites) may be subject to PayPal payment
	// holds (that last from three to 21 days) if that seller is new to selling
	// on eBay or is classified as a "Below Standard" seller. For other reasons
	// why a seller's funds may be held by PayPal, see the
	// <b>PaymentHoldReason</b> field.
	//
	PaymentHoldDetails *PaymentHoldDetailType `xml:"PaymentHoldDetails,omitempty"`

	//
	// Amount of the refund issued to the buyer. This field is only returned if the buyer has received a refund from the seller.
	//
	RefundAmount *AmountType `xml:"RefundAmount,omitempty"`

	//
	// This string value indicates the result of a seller's refund to the buyer. Its value are 'Success', 'Failure' or 'Pending'. This field is only returned if the buyer has received a refund from the seller, or is due to receive a refund.
	//
	RefundStatus string `xml:"RefundStatus,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This container was only used for Half.com orders, and since the Half.com site was taken down, this container is no longer applicable.
	// </span>
	// Container consisting of one or more refunds for Half.com orders. This container is returned only if a refund to a Half.com buyer has occurred.
	//
	RefundArray *RefundArrayType `xml:"RefundArray,omitempty"`

	//
	// If <strong>IsMultilegShipping</strong> is true, the order or transaction uses the Global Shipping Program, in which the shipment has a domestic leg and an international leg. The buyer's shipping address is in a country other than the country where the items were listed, and the seller has specified InternationalPriorityShipping as the default international shipping service in the listings of all the items in the shipment.
	// <br/><br/>
	// If <strong>IsMultilegShipping</strong> is false, the order or transaction doesn't use the Global Shipping Program. The shipment might use a different international shipping service, or it might be domestic.
	// </span>
	//
	IsMultiLegShipping bool `xml:"IsMultiLegShipping,omitempty"`

	//
	// Contains details about the domestic leg of a Global Shipping Program shipment.
	// <br/><br/>
	// This information is not returned if <strong>IsMultilegShipping</strong> is false.
	//
	MultiLegShippingDetails *MultiLegShippingDetailsType `xml:"MultiLegShippingDetails,omitempty"`

	//
	// Contains information about how funds exchanged for an order are allocated to payees.
	// <br/><br/>
	// For example, for an order made under eBay's Global Shipping Program, users can see the portion of the buyer's payment that is allocated as shipping and import charges remitted to the international shipping provider. Currently, only payment information is returned.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> In an upcoming release, <strong>MonetaryDetails</strong> will replace the <strong>ExternalTransaction</strong> container, so you are encouraged to start using <strong>MonetaryDetails</strong> now.
	// </span>
	//
	MonetaryDetails *PaymentsInformationType `xml:"MonetaryDetails,omitempty"`

	//
	// Container consisting of an array of <strong>PickupOptions</strong> containers. Each <strong>PickupOptions</strong> container consists of the pickup method and  its priority. The priority of each pickup method controls the order (relative to other pickup methods) in which the corresponding pickup method will appear in the View Item and Checkout page.
	// <br/><br/>
	// For <strong>GetOrders</strong> and <strong>GetOrderTransactions</strong>, this container is always returned prior to order payment if the seller created/revised/relisted the item with the <strong>EligibleForPickupInStore</strong> and/or <strong>EligibleForPickupDropOff</strong> flag in the call request set to 'true'. If and when the In-Store pickup method (US only) or 'Click and Collect' pickup method (UK and Australia only) is selected by the buyer and payment for the order is made, this container will no longer be returned in the response, and will essentially be replaced by the <strong>PickupMethodSelected</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature or Click and Collect feature to list an item that is eligible for In-Store Pickup or Click and Collect. At this time, the In-Store Pickup and Click and Collect features are generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup or Click and Collect functionality in the Sandbox environment, including listing items enabled with these features, creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of pickup status changes using the Inbound Notifications API.
	// </span>
	//
	PickupDetails *PickupDetailsType `xml:"PickupDetails,omitempty"`

	//
	// Container consisting of details related to the selected pickup method,  including the pickup method type, the merchant's store ID, the status of the pickup, and the pickup reference code (if provided by merchant).
	// <br/><br/>
	// This container is only returned when the buyer has selected the In-Store Pickup or Click and Collect option and has paid for the order. All fields in the <strong>PickupMethodSelected</strong> container are static, except for the <strong>PickupStatus</strong> field, which can change states based on the notifications that a merchant sends to eBay through the Inbound Notifications API.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup or Click and Collect feature to list an item that is eligible for these features. At this time, the In-Store Pickup and Click and Collect features are generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature, creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	PickupMethodSelected *PickupMethodSelectedType `xml:"PickupMethodSelected,omitempty"`

	//
	// This is the eBay user ID of the order's seller.
	//
	SellerUserID *UserIDType `xml:"SellerUserID,omitempty"`

	//
	// This is a unique identifier for the seller that does not change when the eBay user name is changed. This is useful when an application needs to associate a new eBay user name with the corresponding eBay user.
	//
	SellerEIASToken string `xml:"SellerEIASToken,omitempty"`

	//
	// This value indicates the reason why the order cancellation was initiated. This field is only returned if an order cancellation has been initiated by the buyer or seller. Typical buyer-initiated cancellation reasons include 'OrderPlacedByMistake', 'WontArriveInTime', or 'FoundCheaperPrice'. Sellers may initiate an order cancellation on behalf of the buyer. In this scenario, the seller should state the cancellation reason as 'BuyerCancelOrder'. If the seller is cancelling an order because he/she is out of stock on an item, the seller should state the cancellation reason as 'OutOfStock'. Unfortunately, in this scenario, the seller will receive a seller defect for this cancellation reason. Other order cancellation reasons are specific to eBay On Demand Delivery orders. eBay On Demand Delivery is similar to the eBay Now service in the US (now retired),  and is only available in the UK.  See  for the complete list of enumeration values that can be returned in this field.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// Currently, the <b>CancelReason</b> field is being returned under the <b>Order</b> container and under the <b>CancelDetail</b> container. However, there are plans to deprecate this field from <b>OrderType</b> in the future.
	// </span>
	//
	CancelReason string `xml:"CancelReason,omitempty"`

	//
	// The current status for the order cancellation request if it exists. This field is only returned if a cancellation request has been made on the order, or if the order is currently going through the cancellation process, or if the order has already been cancelled.
	//
	CancelStatus *CancelStatusCodeType `xml:"CancelStatus,omitempty"`

	//
	// The detailed reason for the cancellation of an eBay order. This field is only returned if it is available when a cancellation request has been made on the order, or if the order is currently going through the cancellation process, or if the order has already been cancelled.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// Currently, the <b>CancelReasonDetails</b> field is being returned under the <b>Order</b> container and under the <b>CancelDetail</b> container. However, there are plans to deprecate this field from <b>OrderType</b> in the future.
	// </span>
	//
	CancelReasonDetails string `xml:"CancelReasonDetails,omitempty"`

	//
	// The dollar value in this field indicates the amount that the seller is being charged (at order level) for the convenience of an eBay On Demand Delivery.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// This field was first created for eBay Now, but eBay Now has been officially retired in all US locations. However, a feature similar to eBay Now, called 'eBay On Demand Delivery', is available in some parts of London, so this field is still applicable on the eBay UK site.
	// </span>
	//
	ShippingConvenienceCharge *AmountType `xml:"ShippingConvenienceCharge,omitempty"`

	//
	// This container consists of details related to an eBay order that has been cancelled or is in the process of possibly being cancelled. Order cancellation requests can be viewed and managed with the cancellation API calls that are available in the <a href="https://developer.ebay.com/Devzone/post-order/index.html#CallIndex">Post Order API</a>.
	//
	CancelDetail []*CancelDetailType `xml:"CancelDetail,omitempty"`

	//
	// This field will be returned at the order level only if the buyer purchased a digital gift card, which is delivered by email, or if the buyer purchased an item that is enabled with the 'Click and Collect' feature.
	// <br/><br/>
	// Currently, <strong>LogisticsPlanType</strong> has two applicable values: <code>PickUpDropOff</code>, which indicates that the buyer selected the 'Click and Collect' option. With Click and Collect, buyers are able to purchase from thousands of sellers on the eBay UK and Australia sites, and then pick up their order from the nearest 'eBay Collection Point', including over 750 Argos stores in the UK. The Click and Collect feature is only available on the eBay UK and Australia sites; or, <code>DigitalDelivery</code>, which indicates that the order is a digital gift card that will be delivered to the buyer or recipient of the gift card by email.
	//
	LogisticsPlanType string `xml:"LogisticsPlanType,omitempty"`

	//
	// This container consists of taxpayer identification for the buyer. Although this container may be used for other purposes at a later date, it is currently used by sellers selling on the Italy or Spain site to retrieve the taxpayer ID of the buyer.
	// <br/><br/>
	// It is now required that buyers registered on the Italy site provide their Codice Fiscale ID (similar to the Social Security Number for US citizens) before buying an item on the Italy site.
	// <br/><br/>
	// On the Spain site, a Spanish seller has the option to require that Spanish buyers (registered on Spain site) provide a tax ID before checkout. This option is set by the seller at the account level. Once a Spanish buyer provides a tax ID, this tax ID is associated with his/her account, and once a tax ID is associated with the account, Spanish buyer will be asked to provide the tax ID during checkout on all eBay sites. Buyers with a registered address outside of Spain will not be asked to provide a tax ID during checkout.
	// <br/><br/>
	// This container is only returned for Spanish or Italian sellers when the buyer was asked to provide tax identifier information during checkout. A <strong>BuyerTaxIdentifier</strong> container will be returned for each tax ID that is associated with the buyer's account.
	//
	BuyerTaxIdentifier []*TaxIdentifierType `xml:"BuyerTaxIdentifier,omitempty"`

	//
	// This container is returned in <b>GetOrders</b> (and other order management calls) if the 'Pay Upon Invoice' option is being offered to the buyer, and the seller is including payment instructions in the shipping package(s) for the order. The 'Pay Upon Invoice' option is only available on the German site.
	//
	BuyerPackageEnclosures *BuyerPackageEnclosuresType `xml:"BuyerPackageEnclosures,omitempty"`

	//
	// A unique identifier for an eBay order in the new Inventory model. Unlike the <b>OrderID</b> field, the format for this field is the same for both single and multiple line item orders. <b>ExtendedOrderID</b> values will be used to identify orders in REST-based APIs, including the Post-Order API and the Fulfillment API. Below is the syntax/format used for an <b>ExtendedOrderID</b> value:
	// <br><br>
	// <code>240698113015!140000138620555</code>
	// <br><br>
	// For Trading and Merchant Data API order management calls, <b>OrderID</b> values should still be used.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the correct Order ID is returned to the buyer or seller, but a dummy Order ID value of <code>1000000000000</code> will be returned to all third parties.
	//
	ExtendedOrderID string `xml:"ExtendedOrderID,omitempty"`

	//
	// If <code>true</code>, the order contains a transaction for an item that was purchased under the eBay Plus program. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top Rated eBay sellers must opt in to eBay Plus to be able offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> Currently, eBay Plus is available only to buyers in Germany, Austria, and Australia.
	// </span>
	//
	ContainseBayPlusTransaction bool `xml:"ContainseBayPlusTransaction,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if one or more line items in the order are subject to a tax (US sales tax or Australian Goods and Services tax) that eBay will collect and remit to the proper taxing authority on the buyer's behalf. This field is not returned if <code>false</code>.  A <b>Transaction.eBayCollectAndRemitTaxes</b> container is returned for any order line items subject to such a tax, and the type and amount of this tax is displayed in the <b>Transaction.eBayCollectAndRemitTaxes.TaxDetails</b> container.
	// <br/><br/>
	// Australian 'Goods and Services' tax (GST) is automatically charged to buyers outside of Australia when they purchase items on the eBay Australia site. Sellers on the Australia site do not have to take any extra steps to enable the collection of GST, as this tax is collected by eBay and remitted to the Australian government. For more information about Australian GST, see the <a href="https://www.ebay.com.au/help/selling/fees-credits-invoices/taxes-import-charges?id=4121">Taxes and import charges</a> help topic.
	// <br/><br/>
	// Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. Sellers do not have to take any extra steps to enable the collection of this sales tax. If the seller is employing a Sales Tax Table for the listing, and a sales tax rate is established for a state that is subject to 'eBay Collect and Remit', this sales tax rate will be ignored by eBay. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	//
	EBayCollectAndRemitTax bool `xml:"eBayCollectAndRemitTax,omitempty"`
}

type PaginatedItemArrayType struct {

	//
	// Contains a list of Item types.
	//
	ItemArray *ItemArrayType `xml:"ItemArray,omitempty"`

	//
	// Provides information about the list, including number of pages and number
	// of entries.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`
}

type PaginatedOrderTransactionArrayType struct {

	//
	// Contains the list of orders.
	//
	OrderTransactionArray *OrderTransactionArrayType `xml:"OrderTransactionArray,omitempty"`

	//
	// Specifies information about the list, including number of pages and
	// number of entries.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`
}

type PaginatedTransactionArrayType struct {

	//
	// Contains a list of Transaction objects. Returned as an
	// empty tag if no applicable order line items exist.
	//
	TransactionArray *TransactionArrayType `xml:"TransactionArray,omitempty"`

	//
	// Provides information about the list of order line items,
	// including number of pages and number of entries.
	//
	PaginationResult *PaginationResultType `xml:"PaginationResult,omitempty"`
}

type PaginationResultType struct {

	//
	// Indicates the total number of pages of data that could be returned by repeated
	// requests. Returned with a value of 0 if no pages are available.
	//
	TotalNumberOfPages int32 `xml:"TotalNumberOfPages,omitempty"`

	//
	// Indicates the total number of entries that could be returned by repeated
	// call requests. Returned with a value of 0 if no entries are available.
	//
	TotalNumberOfEntries int32 `xml:"TotalNumberOfEntries,omitempty"`
}

type PaisaPayFullEscrowEnabledDefinitionType struct {
}

type PayPalBuyerProtectionEnabledDefinitionType struct {
}

type PayPalRequiredDefinitionType struct {
}

type PayPalRequiredForStoreOwnerDefinitionType struct {
}

type PaymentDetailsType struct {

	//
	// This integer value indicates the number of hours that a buyer has (after he/she commits to
	// buy) to make a deposit to the seller as a down payment on a motor vehicle. <b>Valid values:</b> 						24, 48 (default), and 72.
	// <br/><br/>
	// The deposit amount is specified in the <b>DepositAmount</b> field. If not
	// specified, the <b>DepositAmount</b> value defaults to 0.0, in which case, a
	// deposit on the vehicle is not required.
	// <br>
	//
	HoursToDeposit int32 `xml:"HoursToDeposit,omitempty"`

	//
	// This integer value indicates the number of days that a buyer has (after he/she commits to
	// buy) to make full payment to the seller and close the remaining balance on a motor vehicle.
	// <b>Valid values:</b>  3, 7 (default), 10, and 14.
	// <br/><br/>
	// In order for a buyer to make a full payment on an US or CA motor vehicle, at least one of
	// the following <b>PaymentMethods</b> values must be specified for the
	// listing:
	// <ul>
	// <li>CashInPerson</li>
	// <li>LoanCheck</li>
	// <li>MOCC (money order or cashier's check)</li>
	// <li><b>PaymentSeeDescription</b> (indicates to prospective buyers that payment instructions
	// are in the item's description</li>
	// <li>PersonalCheck</li>
	// </ul>
	//
	DaysToFullPayment int32 `xml:"DaysToFullPayment,omitempty"`

	//
	// This dollar value indicates the amount of the deposit that a buyer must make on a purchased
	// motor vehicle (eBay Motors US and CA). The deposit amount can be as high as $2,000.00.
	// <br/><br/>
	// If not
	// specified, this value defaults to '0.0'. If the seller is requiring that the buyer put down
	// a deposit on the vehicle, the seller must include and set the <b>DepositType</b>
	// field to <code>OtherMethod</code> and specify an <b>HoursToDeposit</b> value.
	// If specified, then also specify <b>HoursToDeposit</b>
	// <br>
	// <br>
	// Deposits can only be paid using PayPal, so if <b>DepositAmount</b> is
	// specified (and not '0.0'), then the listing must offer
	// 'PayPal' as a payment method (in addition to the payment methods
	// offered for the full payment). Unlike other listings, PayPal is not
	// automatically added to a Motors listing even if the seller has a
	// PayPal preference set in My eBay. The seller also needs to have a
	// linked PayPal account in order to require a deposit.<br>
	// <br>
	// The deposit amount appears in the shipping, payment details and return policy section of the
	// View Item page.<br>
	// <br>
	// <b>For ReviseItem and related calls</b>: If the listing
	// has no bids, the seller can add or lower a deposit; and they can
	// increase the deposit if the listing doesn't require Immediate Payment.
	// The seller can also remove the Immediate Payment option (if any).
	// If the listing has bids, the seller can only lower an existing
	// deposit; but not add or increase a deposit. The seller can't remove
	// Immediate Payment when a listing with a deposit has bids.
	// <br>
	//
	DepositAmount *AmountType `xml:"DepositAmount,omitempty"`

	//
	// This field applies to eBay Motors (US and CA) vehicles listings. If the seller is requiring
	// that the buyer make a deposit on the vehicle, the <b>DepositType</b> value must be
	// included and set to <code>OtherMethod</code>. Otherwise, specify <code>None</code> (or don't pass in <b>DepositType</b>).
	//
	DepositType *DepositTypeCodeType `xml:"DepositType,omitempty"`
}

type PaymentHoldDetailType struct {

	//
	// Timestamp that indicates the expected date in which eBay/PayPal will
	// distribute the funds to the seller's account. This is not a firm date and
	// is subject to change. This field is only returned after checkout is complete and if the <b>PaymentHoldStatus</b> indicates a hold has been placed on payment.
	//
	ExpectedReleaseDate time.Time `xml:"ExpectedReleaseDate,omitempty"`

	//
	// Container consisting of one or more <b>RequiredSellerAction</b> fields.
	// <b>RequiredSellerAction</b> fields provide possible actions that a seller can take to
	// expedite the release of funds into their account.
	//
	RequiredSellerActionArray *RequiredSellerActionArrayType `xml:"RequiredSellerActionArray,omitempty"`

	//
	// Integer value that indicates the number of possible actions that a seller
	// can take to possibly expedite the release of funds into their account. This
	// value should equal the number of <b>RequiredSellerAction</b>
	// fields contained in the <b>RequiredSellerActionArray</b>
	// container.
	//
	NumOfReqSellerActions int32 `xml:"NumOfReqSellerActions,omitempty"`

	//
	// Enumerated value that indicates why the buyer's payment for the order is
	// being held by PayPal instead of being distributed to the seller's account.
	// A seller's funds for an order can be held by PayPal for as little as three
	// days after the buyer receives the order, but the hold can be up to 21 days
	// based on the scenario, and in some cases, the seller's lack of action in
	// helping to expedite the release of funds.
	//
	PaymentHoldReason *PaymentHoldReasonCodeType `xml:"PaymentHoldReason,omitempty"`
}

type PaymentInformationCodeType struct {

	//
	// This field is deprecated.
	//
	Payment []*PaymentTransactionCodeType `xml:"Payment,omitempty"`
}

type PaymentInformationType struct {

	//
	// This container consists of detailed information about each payment made by the buyer to pay for an order. In many cases, there may be only one payment - the payment made from the buyer to the seller, but in the case of an order going through the Global Shipping Program, one payment goes to the seller for the price of the order, and then an import charge and a portion of the shipping charges may go to eBay Global Shipping Program partner. In the case of an order that is subject to Australia import tax, one payment goes to the seller for the total price of the order, and the import tax goes to eBay for remittance to the Australian government.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Australia import tax is only applicable to the Australia site.
	// </span>
	//
	Payment []*PaymentTransactionType `xml:"Payment,omitempty"`
}

type PaymentMethodDefinitionType struct {
}

type PaymentOptionDetailsType struct {

	//
	// This field is deprecated.
	//
	PaymentOption *BuyerPaymentMethodCodeType `xml:"PaymentOption,omitempty"`

	//
	// This field is deprecated.
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field is deprecated.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// This field is deprecated.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type PaymentOptionsGroupEnabledDefinitionType struct {
}

type PaymentTransactionCodeType struct {

	//
	// This field is deprecated.
	//
	PaymentStatus *PaymentTransactionStatusCodeType `xml:"PaymentStatus,omitempty"`

	//
	// This field is deprecated.
	//
	Payer *UserIdentityType `xml:"Payer,omitempty"`

	//
	// This field is deprecated.
	//
	Payee *UserIdentityType `xml:"Payee,omitempty"`

	//
	// This field is deprecated.
	//
	PaymentTime time.Time `xml:"PaymentTime,omitempty"`

	//
	// This field is deprecated.
	//
	PaymentAmount *AmountType `xml:"PaymentAmount,omitempty"`

	//
	// This field is deprecated.
	//
	ReferenceID *TransactionReferenceType `xml:"ReferenceID,omitempty"`

	//
	// This field is deprecated.
	//
	FeeOrCreditAmount *AmountType `xml:"FeeOrCreditAmount,omitempty"`

	//
	// This field is deprecated.
	//
	PaymentReferenceID []*TransactionReferenceType `xml:"PaymentReferenceID,omitempty"`
}

type PaymentTransactionType struct {

	//
	// The current status of a buyer payment that is allocated to a specified payee.
	//
	PaymentStatus *PaymentTransactionStatusCodeType `xml:"PaymentStatus,omitempty"`

	//
	// This field indicates the eBay user or eBay partner who submitted the payment.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the correct payer is returned to the buyer or seller, but the identity of the payer will be masked to all third parties.
	//
	Payer *UserIdentityType `xml:"Payer,omitempty"`

	//
	// The person or organization who is to receive the payment allocation.
	//
	Payee *UserIdentityType `xml:"Payee,omitempty"`

	//
	// The date and time when the payment is received by the payee.
	//
	PaymentTime time.Time `xml:"PaymentTime,omitempty"`

	//
	// The amount of the payment that is allocated to the payee.
	//
	PaymentAmount *AmountType `xml:"PaymentAmount,omitempty"`

	//
	// A unique transaction ID for the payment.
	// <br/><br/>
	// This field is not returned if the <strong>Payee</strong> field's <strong>type</strong> attribute is <code>eBayPartner</code>.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the correct payment identifier is returned to the buyer or seller, but the payment identifier will be masked to all third parties.
	//
	ReferenceID *TransactionReferenceType `xml:"ReferenceID,omitempty"`

	//
	// Fee Amount is a positive value and Credit Amount is a negative value.
	// <br/><br/>
	// This field is not returned if the <strong>Payee</strong> field's <strong>type</strong> attribute is <code>eBayPartner</code>.
	//
	FeeOrCreditAmount *AmountType `xml:"FeeOrCreditAmount,omitempty"`

	//
	// The payment transaction ID.
	// <br/><br/>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the correct payment identifier is returned to the buyer or seller, but the payment identifier will be masked to all third parties.
	//
	PaymentReferenceID []*TransactionReferenceType `xml:"PaymentReferenceID,omitempty"`
}

type PaymentsInformationCodeType struct {

	//
	// This field is deprecated.
	//
	Payments *PaymentInformationCodeType `xml:"Payments,omitempty"`
}

type PaymentsInformationType struct {

	//
	// Contains information about how different portions of the funds exchanged for a specified order are allocated among payees. Each allocated portion is represented by a <strong>Payment</strong> container.
	//
	Payments *PaymentInformationType `xml:"Payments,omitempty"`

	//
	// This container consists of an array of one or more <strong>Refund</strong> containers, and each <strong>Refund</strong> container consists of detailed information about a merchant's refund (or store credit) to a buyer who has returned an In-Store Pickup item.
	// <br/><br/>
	// This container is only returned if the buyer has returned an In-Store Pickup item to the merchant at a physical store, and the merchant has notified eBay through the <strong>ORDER.RETURNED</strong> notification of the Inbound Notifications API.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings.
	// </span>
	//
	Refunds *RefundInformationType `xml:"Refunds,omitempty"`
}

type PerformanceDashboardType struct {

	//
	// The eBay site(s) on which the seller's performance is being evaluated.
	// <br />
	// A seller's performance status is evaluated for three specific regions: US,
	// UK/Ireland, and Germany/Switzerland/Austria. The <b>Site</b> field is
	// repeated to show all sites in each region, if applicable.
	//
	Site []*SiteCodeType `xml:"Site,omitempty"`

	//
	// This field indicates the seller's performance rating. This rating is an overall
	// performance for the eBay site(s) found in the <b>Site</b> field(s).
	//
	Status *PerformanceStatusCodeType `xml:"Status,omitempty"`

	//
	// The <b>Performance.Alert</b> container is only returned if eBay has
	// posted one or more informational or warning messages related to the seller's
	// performance rating.
	//
	Alert *SellerDashboardAlertType `xml:"Alert,omitempty"`
}

type PickupDetailsType struct {

	//
	// Container consisting of a pickup method and the priority of the pickup method. The priority of each pickup method controls the order (relative to other pickup methods) in which the corresponding pickup method will appear in the View Item and Checkout page.
	// <br/><br/>
	// This container is always returned prior to order payment if the seller created/revised/relisted the item with the <strong>EligibleForPickupInStore</strong> and/or <strong>EligibleForPickupDropOff</strong> flag in the call request set to 'true'. If and when the In-Store pickup method (US only) or 'Click and Collect' pickup method (UK and Australia only) is selected by the buyer and payment for the order is made, this container will no longer be returned in the response, and will essentially be replaced by the <strong>PickupMethodSelected</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup and Click and Collect features are generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings. In-Store Pickup is only applicable to the US site, and Click and Collect is only applicable to the UK, Germany, and Australia sites.
	// </span>
	//
	PickupOptions []*PickupOptionsType `xml:"PickupOptions,omitempty"`
}

type PickupDropOffEnabledDefinitionType struct {
}

type PickupInStoreDetailsType struct {

	//
	// This field is used in <b>Add/Revise/Relist/Verify</b> calls to enable the listing for In-Store Pickup. To enable the listing for In-Store Pickup, the seller includes this boolean field and sets its value to <code>true</code>. A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multiple-quantity, fixed-price listings.
	// <br/><br/>
	// In addition to setting the <b>EligibleForPickupInStore</b> boolean field to <code>true</code>, the merchant must also perform the following actions in an <b>Add/Revise/Relist/Verify</b> call to enable the In-Store Pickup option on a multiple-quantity, fixed-price listing:
	// <ul>
	// <li>Have inventory for the product at one or more physical stores tied to the seller's account. By using the REST-based <b>Inventory API</b>, sellers can associate physical stores to their account by using the <b>Create Inventory Location</b> call, and then, using the <b>Create Inventory Item</b> call, they can add inventory to specific stores;</li>
	// <li>Include the seller-defined SKU value of the product(s) in the call request. For a single-variation listing, the SKU value would be specified in the <b>Item.SKU</b> field, and for a multiple-variation listing, the SKU value(s) would be specified in the <b>Item.Variations.Variation.SKU</b> field(s);</li>
	// <li>Set an immediate payment requirement on the item. The immediate payment feature requires the seller to:
	// <ul>
	// <li>Include the <b>Item.AutoPay</b> flag in the call request and set its value to <code>true</code>;</li>
	// <li>Include only one <b>Item.PaymentMethods</b> field in the call request and set its value to '<code>PayPal</code>;</li>
	// <li>Include a valid PayPal payment address in the <b>Item.PayPalEmailAddress</b> field.</li>
	// </ul>
	// </li>
	// </ul>
	// When a seller is successful at listing an item with the In-Store Pickup feature enabled, prospective buyers within a reasonable distance (25 miles or so) from one of the seller's stores (that has stock available) will see the "Available for In-Store Pickup" option on the listing, along with information on the closest store that has the item.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multiple-quantity, fixed-price listings.
	// </span>
	//
	EligibleForPickupInStore bool `xml:"EligibleForPickupInStore,omitempty"`

	//
	// For 'Click and Collect' eligible sellers, this field was once used to set 'Click and Collect' eligibility at the listing level. However, now the seller can only opt in to 'Click and Collect' at the account level, and then each of their listings will be automatically evaluated for 'Click and Collect' eligibility.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> Until this field is fully deprecated in the Trading WSDL (and in Add/Revise/Relist/Verify calls), it can still be used, but it will have no functional affect. However, if set in an Add/Revise/Relist/Verify call, it will get returned in <b>GetItem</b>, but it won't be a true indicator if the item is available for the 'Click and Collect' logistics type. Instead, the <b>Item.AvailableForPickupDropOff</b> field should be referenced.
	// </span>
	//
	EligibleForPickupDropOff bool `xml:"EligibleForPickupDropOff,omitempty"`
}

type PickupMethodSelectedType struct {

	//
	// This value indicates the local pickup method that was selected by the buyer at checkout. This field is always returned with the <strong>PickupMethodSelected</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Merchants must be eligible for the In-Store Pickup or "Click and Collect" feature to list items that are eligible for these local pickup methods.
	// </span>
	//
	PickupMethod string `xml:"PickupMethod,omitempty"`

	//
	// The unique identifier of the merchant's store where the item will be picked up. The <strong>PickupStoreID</strong> is picked up by eBay based on the <strong>LocationID</strong> value that is set by the merchant in the <strong>Inventory Management API</strong>. This field is always returned with the <strong>PickupMethodSelected</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	PickupStoreID string `xml:"PickupStoreID,omitempty"`

	//
	// This field indicates the current status of the local pickup order. The value of the  <strong>PickupStatus</strong> field can change during the lifecycle of the order based on the notifications that a merchant sends to eBay through the <strong>Inbound Notifications API</strong>. This field is always returned with the <strong>PickupMethodSelected</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup or Click and Collect features to list an item that is eligible for these features. At this time, these features are generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	PickupStatus *PickupStatusCodeType `xml:"PickupStatus,omitempty"`

	//
	// The unique reference number defined by the merchant to track In-Store Pickup orders. The <strong>MerchantPickupCode</strong> is picked up by eBay if it is set by the merchant through the payload of a notification sent to eBay through the <strong>Inbound Notifications API</strong>. This field is only returned with the <strong>PickupMethodSelected</strong> container if it set by the merchant.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the real reference number is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	MerchantPickupCode string `xml:"MerchantPickupCode,omitempty"`

	//
	// Timestamp indicating the date/time when the order is expected to be fulfilled by the merchant and available for pick up by the buyer.
	//
	PickupFulfillmentTime time.Time `xml:"PickupFulfillmentTime,omitempty"`

	//
	// The unique identifier of the merchant's store where the "Click and Collect" item will be picked up. This field will only be returned if supplied by the merchant.
	//
	PickupLocationUUID string `xml:"PickupLocationUUID,omitempty"`
}

type PickupOptionsType struct {

	//
	// This value indicates an available pickup method. This field is always returned with the <strong>PickupOptions</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, 'InStorePickup' and 'PickUpDropOff' are the only available pickup methods; however, additional pickup methods may be added to the list in future releases.
	// </span>
	// <br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup or Click and Collect feature to list an item that is eligible for In-Store Pickup or Click and Collect. At this time, In-Store Pickup is generally only available to large retail merchants in US, and the 'Click and Collect' feature is only available to large merchants on the eBay UK (site ID - 3), eBay Australia (Site ID - 15), and eBay Germany (Site ID - 77) sites.
	// </span>
	//
	PickupMethod string `xml:"PickupMethod,omitempty"`

	//
	// This integer value indicates the priority of the pickup method. The priority of each pickup method controls the order (relative to other pickup methods) in which the corresponding pickup method will appear in the View Item and Checkout page. This field is always returned with the <strong>PickupOptions</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup or Click and Collect features to list an item that is eligible for In-Store Pickup or Click and Collect. At this time, In-Store Pickup is generally only available to large retail merchants in US, and the 'Click and Collect' feature is only available to large merchants on the eBay UK (site ID - 3), eBay Australia (Site ID - 15), and eBay Germany (Site ID - 77) sites.
	// </span>
	//
	PickupPriority int32 `xml:"PickupPriority,omitempty"`
}

type PictureDetailsType struct {

	//
	// <a name="galleryTypeField"></a>
	// Specifies the Gallery enhancement type for the listing.  All listings automatically get the
	// <b>Gallery</b> enhancement at no cost, so you never need to set this field to Gallery.
	// <br/><br/>
	// Gallery types are accumulative. This means if you use <b>Plus</b>, you also
	// get the features of <b>Gallery</b> and if you use
	// <b>Featured</b>, you get all the features of
	// <b>Gallery</b> and <b>Plus</b>. Passing the values
	// <b>Plus</b> and <b>Featured</b> together in the same request will return
	// an error.
	// <br/><br/>
	// The Gallery image will be the first <b>PictureURL</b>
	// in the array of <b>PictureURL</b> fields.
	// <br/><br/>
	// When revising a listing, if you remove <b>Plus</b> or <b>Featured</b>, the original feature fee will not be credited. If you upgrade to <b>Featured</b>, the original
	// feature fee is credited, and the new feature fee is charged.
	//
	GalleryType *GalleryTypeCodeType `xml:"GalleryType,omitempty"`

	//
	// Specifies the type of image display used in a listing. Some options are
	// only available if images are hosted through eBay Picture Services (EPS).
	// eBay determines this by parsing the associated <b>PictureURL</b>.
	// <br><br>
	// You cannot use <b>PhotoDisplay</b> in combination with Listing Designer layouts.
	// Specify <code>None</code> or do not add <b>PhotoDisplay</b> when <b>ListingDesigner.LayoutID</b>
	// is a value other than 0.
	// <br><br>
	// Some <b>PhotoDisplay</b> options can result in listing fees, even when the item is relisted. If you are relisting an item that was originally listed with a <b>PhotoDisplay</b> option, and you do not want that <b>PhotoDisplay</b> enhancement in your relisted item, you need to specifically
	// remove <b>PhotoDisplay</b> in your <b>RelistItem</b> call (or <b>RelistFixedPriceItem</b>, as applicable) by
	// setting <b>PhotoDisplay</b> to <code>None</code>. Use <b>VerifyRelistItem</b> to review your listing fees before you
	// relist an item.
	//
	PhotoDisplay *PhotoDisplayCodeType `xml:"PhotoDisplay,omitempty"`

	//
	// Contains the URL for a picture of the item.
	// The URL can be from the eBay Picture Services (images previously uploaded) or from a server outside of eBay (self-hosted).
	// You can pass in up to 12 URLs but you cannot mix self-hosted and EPS-hosted URL in one listing. The <b>UploadSiteHostedPictures</b> call can be used to upload pictures to EPS. Note that if pictures are externally-hosted, they must be hosted on a site that is using the 'https' protocol.
	// <br/><br/>
	// On the US and Canada eBay Motors sites (for all vehicle listings) a listing can contain up to 24 pictures.	The Gallery image will be the first <b>PictureURL</b>
	// in the array of <b>PictureURL</b> fields.
	//
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// All images, whether they are hosted by EPS or self-hosted, must comply with the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Pictures-Intro.html">Picture Requirements.</a>
	// </span>
	// To specify multiple pictures, send each URL in a separate, <b>PictureDetails.PictureURL</b> element. The first URL passed in will be the Gallery image and appears on the View Item page.
	//
	// <br><br>
	// If a URI contains spaces, replace them with <code>%20</code>.
	// For example, <code>http://example.com/my image.jpg</code> must be
	// submitted as <code>http://example.com/my%20image.jpg</code> to
	// replace the space in the image file name.
	//
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// Embedding pictures in the description (by using IMG tags) is discouraged. Studies show that shopper often do not look at the description. The recommended process is to specify the image URLs using <b>PictureURL</b>.
	// </span>
	//
	// If a listing uses a single self-hosted picture (except in the case of a multi-variation listing), the picture will be copied to eBay Picture Services (ESP) and the <b>PictureDetails.PictureURL</b> value returned by <b>GetItem</b> will be an EPS URL.
	//
	// <br/><br/>
	// <b>For VerifyAddItem only:</b> You must include a picture even when using <b>VerifyAddItem</b>. If you don't have a image file, you can use the following
	// fake eBay Picture Services URL (http://i2.ebayimg.com/abc/M28/dummy.jpg) with this call.
	//
	// <br><br>
	// <b>For ReviseItem and RelistItem only:</b> To remove a picture when
	// revising or relisting an item, specify <b>PictureDetails</b> with all the pictures that you want the listing to include. That is, you need to completely replace the original set
	// of URLs with the revised set. You cannot remove all the <b>PictureURL</b> fields from a listing because each listing requires at least one picture.
	// <br/><br/>
	// <b>Remember</b>: The Gallery image will be the first <b>PictureURL</b> in the array of <b>PictureURL</b> fields. So if the first image passed in when relisting/revising is different from when the listing was created, the Gallery image will be changed.
	//
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> For some large merchants, there are no limitations on when pictures can be added or removed from a fixed-price listing, even when the listing has had transactions or is set to end within 12 hours.
	// </span>
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`

	//
	// The service hosting the pictures in <b>PictureURL</b>, if any. This information is
	// primarily useful for Picture Manager subscribers, who pay a flat subscription
	// fee instead of individual picture fees per listing. Only returned when <b>PictureURL</b> is returned.
	//
	PictureSource *PictureSourceCodeType `xml:"PictureSource,omitempty"`

	//
	// Number of days that the <b>Featured Gallery</b> type applies to a listing.
	// Applicable values include 'Days_7' and 'LifeTime'.
	// <br><br>
	// When a seller chooses <b>Featured</b> as the Gallery type, the listing is highlighted and is
	// included at the top of search results. This functionality is applicable only for
	// <b>Gallery Featured</b> items and returns an error for any other Gallery type. Additionally,
	// an error is returned if the seller attempts to downgrade from Lifetime to limited
	// duration, but the seller can upgrade from limited duration to Lifetime duration. This
	// field is not applicable to auction listings.
	//
	GalleryDuration string `xml:"GalleryDuration,omitempty"`

	//
	// Indicates if the gallery image upload failed and gives a reason
	// for the failure, such as 'InvalidUrl' or 'ServerDown'. It is not
	// returned if the gallery image is uploaded successfully.
	//
	GalleryStatus *GalleryStatusCodeType `xml:"GalleryStatus,omitempty"`

	//
	// Indicates the reason the
	// gallery generation failed, such as, URL for the image is not valid.
	// This field is returned when <b>GalleryStatus</b> field is returned
	// and does not appear when the gallery generation is successful.
	//
	GalleryErrorInfo string `xml:"GalleryErrorInfo,omitempty"`

	//
	// When returned this contains the original URL of a self-hosted pictures, associated with the
	// item when	the item was listed.
	//
	ExternalPictureURL []*AnyURI `xml:"ExternalPictureURL,omitempty"`

	//
	// This container returns the URLs of the seller's self-hosted (hosted outside of eBay) pictures and the URL for the corresponding eBay Picture Services (EPS), that was generated when the self-hosted picture was uploaded.
	//
	ExtendedPictureDetails *ExtendedPictureDetailsType `xml:"ExtendedPictureDetails,omitempty"`
}

type PictureManagerDetailsType struct {

	//
	// This type is deprecated.
	//
	SubscriptionLevel *PictureManagerSubscriptionLevelCodeType `xml:"SubscriptionLevel,omitempty"`

	//
	// This field is deprecated.
	//
	StorageUsed int32 `xml:"StorageUsed,omitempty"`

	//
	// This field is deprecated.
	//
	TotalStorageAvailable int32 `xml:"TotalStorageAvailable,omitempty"`

	//
	// This field is deprecated.
	//
	KeepOriginal bool `xml:"KeepOriginal,omitempty"`

	//
	// This field is deprecated.
	//
	WatermarkEPS bool `xml:"WatermarkEPS,omitempty"`

	//
	// This field is deprecated.
	//
	WatermarkUserID bool `xml:"WatermarkUserID,omitempty"`

	//
	// This field is deprecated.
	//
	Folder []*PictureManagerFolderType `xml:"Folder,omitempty"`
}

type PictureManagerFolderType struct {

	//
	// This field is deprecated.
	//
	FolderID int32 `xml:"FolderID,omitempty"`

	//
	// This field is deprecated.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This field is deprecated.
	//
	Picture []*PictureManagerPictureType `xml:"Picture,omitempty"`
}

type PictureManagerPictureDisplayType struct {

	//
	// This field is deprecated.
	//
	DisplayType *PictureManagerPictureDisplayTypeCodeType `xml:"DisplayType,omitempty"`

	//
	// This field is deprecated.
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// This field is deprecated.
	//
	Size int32 `xml:"Size,omitempty"`

	//
	// This field is deprecated.
	//
	Height int32 `xml:"Height,omitempty"`

	//
	// This field is deprecated.
	//
	Width int32 `xml:"Width,omitempty"`
}

type PictureManagerPictureType struct {

	//
	// This field is deprecated.
	//
	PictureURL *AnyURI `xml:"PictureURL,omitempty"`

	//
	// This field is deprecated.
	//
	Name string `xml:"Name,omitempty"`

	//
	// This field is deprecated.
	//
	Date time.Time `xml:"Date,omitempty"`

	//
	// This field is deprecated.
	//
	DisplayFormat []*PictureManagerPictureDisplayType `xml:"DisplayFormat,omitempty"`
}

type PictureManagerSubscriptionType struct {

	//
	// This field is deprecated.
	//
	SubscriptionLevel *PictureManagerSubscriptionLevelCodeType `xml:"SubscriptionLevel,omitempty"`

	//
	// This field is deprecated.
	//
	Fee *AmountType `xml:"Fee,omitempty"`

	//
	// This field is deprecated.
	//
	StorageSize int32 `xml:"StorageSize,omitempty"`
}

type PictureSetMemberType struct {

	//
	// URL for the picture.
	//
	MemberURL *AnyURI `xml:"MemberURL,omitempty"`

	//
	// Height of the picture in pixels.
	//
	PictureHeight int32 `xml:"PictureHeight,omitempty"`

	//
	// Width of the picture in pixels.
	//
	PictureWidth int32 `xml:"PictureWidth,omitempty"`
}

type PictureURLsType struct {

	//
	// The URL of an eBay Picture Services (EPS) image. This image is created when a seller uploads a self-hosted image using the <b>UploadSiteHostedPictures</b>, <b>AddItem</b> or <b>AddFixedPriceItem</b> call.
	//
	EBayPictureURL *AnyURI `xml:"eBayPictureURL,omitempty"`

	//
	// The URL of seller's self-hosted image.
	//
	ExternalPictureURL *AnyURI `xml:"ExternalPictureURL,omitempty"`
}

type PicturesType struct {

	//
	// One aspect of the variations that will be illustrated in the
	// pictures for all variations. For example, if each variation
	// is visually distinguished by color and the pictures show
	// the different colors available, then specify "Color" as the name.
	// The name must match one of the names specified in the
	// <b>VariationSpecifics</b> container.
	// <br><br>
	// This field is required in each <b>Item.Variations.Pictures</b> container that is used.
	//
	VariationSpecificName string `xml:"VariationSpecificName,omitempty"`

	//
	// A container consisting of one or more picture URLs associated with a variation
	// specific value (e.g., color=blue). For example, suppose a listing contains blue
	// and black color variations, and <b>VariationSpecificName=Color</b>.
	// In this case, one picture set could contain pictures of the blue shirts (e.g.,
	// front view, back view, and close-up of a trim detail), and another picture set
	// could contain pictures of the black shirts.
	// <br><br>
	// A variation specific picture set can consist of up to 12 images hosted by eBay
	// Picture Services (EPS) or self-hosted (hosted outside of eBay) pictures.
	// The eBay Picture Services and self-hosted images can never
	// be combined into the same variation specific picture set.
	// <br><br>
	// At least one picture set is required if the <b>Pictures</b> node
	// is present in the request. You are not required to provide pictures
	// for all values that correspond to the variation specific name.
	// For example, a listing could have pictures depicting the blue and
	// black color variations, but not the pink variations.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// All images must comply with the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Pictures-Intro.html">Picture Requirements</a>.
	// </span>
	//
	VariationSpecificPictureSet []*VariationSpecificPictureSetType `xml:"VariationSpecificPictureSet,omitempty"`
}

type PolicyComplianceDashboardType struct {

	//
	// This field is deprecated.
	//
	Status *PolicyComplianceStatusCodeType `xml:"Status,omitempty"`

	//
	// This field is deprecated.
	//
	Alert []*SellerDashboardAlertType `xml:"Alert,omitempty"`
}

type PolicyViolationDurationDetailsType struct {
	Period *PeriodCodeType `xml:"Period,omitempty"`

	Description string `xml:"Description,omitempty"`
}

type PowerSellerDashboardType struct {

	//
	// This field indicates the seller's eBay PowerSeller tier. PowerSellers are
	// distinguished in five tiers based on average monthly sales. Benefits and services vary
	// for each tier. eBay calculates eligibility for each tier on a monthly basis.
	//
	Level *SellerLevelCodeType `xml:"Level,omitempty"`

	//
	// The <b>PowerSellerStatus.Alert</b> container is only returned if eBay
	// has posted one or more informational or warning messages related to the seller's
	// PowerSeller status.
	//
	Alert []*SellerDashboardAlertType `xml:"Alert,omitempty"`
}

type PremiumSubscriptionDefinitionType struct {
}

type PricingRecommendationsType struct {

	//
	// This field is deprecated.
	//
	ProductInfo *ProductInfoType `xml:"ProductInfo,omitempty"`
}

type ProPackEnabledDefinitionType struct {
}

type ProPackPlusEnabledDefinitionType struct {
}

type ProStoresCheckoutPreferenceType struct {

	//
	// This field is deprecated.
	//
	CheckoutRedirectProStores bool `xml:"CheckoutRedirectProStores,omitempty"`

	//
	// This field is deprecated.
	//
	ProStoresDetails *ProStoresDetailsType `xml:"ProStoresDetails,omitempty"`
}

type ProStoresDetailsType struct {

	//
	// This field is deprecated.
	//
	SellerThirdPartyUsername string `xml:"SellerThirdPartyUsername,omitempty"`

	//
	// This field is deprecated.
	//
	StoreName string `xml:"StoreName,omitempty"`

	//
	// This field is deprecated.
	//
	Status *EnableCodeType `xml:"Status,omitempty"`
}

type ProductCreationEnabledDefinitionType struct {
}

type ProductDetailsType struct {

	//
	// This field contains the actual text that should be passed into the relevant product identification fields when creating a listing.
	//
	ProductIdentifierUnavailableText string `xml:"ProductIdentifierUnavailableText,omitempty"`
}

type ProductFamilyType struct {

	//
	// This field is deprecated.
	//
	ParentProduct *ProductType `xml:"ParentProduct,omitempty"`

	//
	// This field is deprecated.
	//
	FamilyMembers []*ProductType `xml:"FamilyMembers,omitempty"`

	//
	// This field is deprecated.
	//
	HasMoreChildren bool `xml:"hasMoreChildren,attr,omitempty"`
}

type ProductFinderConstraintType struct {

	//
	// This field is deprecated.
	//
	DisplayName string `xml:"DisplayName,omitempty"`

	//
	// This field is deprecated.
	//
	DisplayValue string `xml:"DisplayValue,omitempty"`
}

type ProductIdentifiersType struct {

	//
	// This container holds the <b>MinRequired</b> field, whose value will indicate whether or not one or more Product Identifier types (returned in a corresponding <b>NameRecommendation</b> container) are required when listing a product. If two Product Identifier types are returned, and the <b>MinRequired</b> value is the <code>2</code>, the seller will be required to use both Product Identifier types at listing time. If the <b>MinRequired</b> value was <code>0</code>, one or both of those Product Identifier types could be used, but they would not be required.
	//
	ValidationRules *GroupValidationRulesType `xml:"ValidationRules,omitempty"`

	//
	// A separate <b>NameRecommendation</b> container will be returned for each Product Identifier type that is supported/required by the category. These Product Identifier types will be common Global Trade Item Number (GTIN) types such as UPC, ISBN, and EAN.  To see if one or more of the Product Identifier types are actually required at listing time, the seller will need to look at the <b>ValidationRules</b> container and the <b>MinRequired</b> value. If two Product Identifier types are returned, and the <b>MinRequired</b> value is the <code>2</code>, the seller will be required to use both Product Identifier types at listing time. If the <b>MinRequired</b> value was <code>0</code>, one or both of those Product Identifier types could be used, but they would not be required.
	//
	NameRecommendation []*NameRecommendationType `xml:"NameRecommendation,omitempty"`
}

type ProductInfoType struct {

	//
	// This field is deprecated.
	//
	AverageStartPrice *AmountType `xml:"AverageStartPrice,omitempty"`

	//
	// This field is deprecated.
	//
	AverageSoldPrice *AmountType `xml:"AverageSoldPrice,omitempty"`

	//
	// This field is deprecated.
	//
	Title string `xml:"Title,omitempty"`

	//
	// This field is deprecated.
	//
	ProductState *ProductStateCodeType `xml:"ProductState,omitempty"`

	//
	// This field is deprecated.
	//
	ProductInfoID string `xml:"productInfoID,attr,omitempty"`
}

type ProductListingDetailsType struct {

	//
	// If this value is <code>true</code>, the listing will use the eBay catalog product's stock photo. In an Add/Revise/Relist call, this field is set to <code>true</code> by default. If you will be using an eBay catalog product to list your item, it is always advised to include the stock photo. Sellers can also add their own pictures using one or more <b>Item.PictureDetails.PictureURL</b> fields. Seller photos are particularly recommended for used and modified products to give prospective buyers a clear sense of exactly what they are purchasing.
	// In <b>GetItem</b> and other 'Get' calls, the URL of the stock photo will be returned in the <b>StockPhotoURL</b> field. <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// For categories/product brands that are part of the Product-Based Shopping Experience mandate, setting this field to <code>false</code> may cause the call to fail. For more information on the Product-Based Shopping Experience mandate and the categories/product brands affected, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	// </span>
	//
	IncludeStockPhotoURL bool `xml:"IncludeStockPhotoURL,omitempty"`

	//
	// If this value is <code>true</code>, the listing will use the eBay catalog product's stock photo as the Gallery thumbnail photo. In an Add/Revise/Relist call, this field is set to <code>true</code> by default. If this field is set to <code>true</code>, the <b>IncludeStockPhotoURL</b> field must also be set to <code>true</code> or this field will have no effect. Sellers can also add their own pictures using one or more <b>Item.PictureDetails.PictureURL</b> fields, but none of these photos will be the Gallery thumbnail photo. <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// For categories/product brands that are part of the Product-Based Shopping Experience mandate, setting this field to <code>false</code> may cause the call to fail. For more information on the Product-Based Shopping Experience mandate and the categories/product brands affected by this project, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	// </span>
	//
	UseStockPhotoURLAsGallery bool `xml:"UseStockPhotoURLAsGallery,omitempty"`

	//
	// The full URL for the eBay catalog product's stock photo. This field is only returned if the seller used an eBay catalog product to list the item, and the
	// <b>IncludeStockPhotoURL</b> field was set to <code>true</code>.
	//
	StockPhotoURL *AnyURI `xml:"StockPhotoURL,omitempty"`

	//
	// Copyright statement indicating the source of the product information. This information will be
	// included in the listing if the seller used an eBay catalog product to list the item.
	//
	Copyright []string `xml:"Copyright,omitempty"`

	//
	// In an Add/Revise/Relist call, this field is used to pass in the eBay Product ID (e.g. ePID), which is the unique identifier of an eBay Catalog product. Although an eBay catalog product match can be found using one or more GTIN values, passing in an ePID value is the best way to try and discover the appropriate eBay Catalog product. For more information on finding a product in the eBay catalog, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	// <br>
	// <br>
	// This field is also returned in <b>GetItem</b> if the listing is associated with a eBay Catalog product.
	// <br>
	//
	ProductReferenceID string `xml:"ProductReferenceID,omitempty"`

	//
	// This field is no longer applicable and should not be used.
	//
	DetailsURL *AnyURI `xml:"DetailsURL,omitempty"`

	//
	// This field is no longer applicable and should not be used.
	//
	ProductDetailsURL *AnyURI `xml:"ProductDetailsURL,omitempty"`

	//
	// If the seller attempts to use <b>ProductListingDetails</b> in an Add/Revise/Relist call to find an eBay catalog product match, and multiple matches are found, the call will actually fail. This field can be included and set to <code>true</code> if the seller wants to see the eBay catalog products that were found through error messages in the call response. This flag will not have an effect if only one catalog product matchi is found, or if the <b>UseFirstProduct</b> field is used and set to  <code>true</code> and a catalog product is found to create/revise the listing. <br>
	// <br>
	// If this field is omitted or set to <code>false</code>, and multiple catalog products are found, the call will fail and no information about the matching catalog products will be returned.
	// <br>
	//
	ReturnSearchResultOnDuplicates bool `xml:"ReturnSearchResultOnDuplicates,omitempty"`

	//
	// This field is used if the seller wants to, or is required to identify a product using an ISBN (International Standard Book Number) value. An ISBN is a unique identifer for books. Both 10 and 13-character ISBNs are supported. When specifying a 13-character ISBN, the value must begin with either '978' or '979'. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if an ISBN is supported/required for a category.
	// <br/><br/>
	// If the <b>IncludeeBayProductDetails</b> field is omitted or included and set to <code>true</code>, eBay will use the ISBN value passed into this field to try and find a matching eBay catalog product. If a match is found, the listing will pick up the product details of the catalog product, including the product title, product description, item specifics, and stock photo. If the seller is passing in an ePID through the <b>ProductReferenceID</b> field, this field is not needed, as all product identifiers will get picked up automatically by the listing if a matching catalog product is found.
	// <br/><br/>
	// This field is only applicable for single-variation listings. For multiple-variation listings, if the category/product requires an ISBN value, this value should be passed into the <b>Variation.VariationProductListingDetails.ISBN</b> field instead.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that expects an ISBN value, but one doesn't exist for the product, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	//
	ISBN string `xml:"ISBN,omitempty"`

	//
	// This field is used if the seller wants to, or is required to identify a product using a UPC (Universal Product Code) value. A UPC is a commonly used identifer for many different products. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if a UPC is supported/required for a category.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The <b>UPC</b> (and UPC values) are typically only applicable to US products listed on US eBay marketplace. If a European seller is selling a European-based product (with an EAN value) on the US site, instead of using the <b>EAN</b> field, the seller will use the <b>UPC</b> field to pass in the EAN value.
	// </span>
	// <br/>
	// If the <b>IncludeeBayProductDetails</b> field is omitted or included and set to <code>true</code>, eBay will use the UPC value passed into this field to try and find a matching eBay catalog product. If a match is found, the listing will pick up the product details of the catalog product, including the product title, product description, item specifics, and stock photo. If the seller is passing in an ePID through the <b>ProductReferenceID</b> field, this field is not needed, as all product identifiers will get picked up automatically by the listing if a matching catalog product is found.
	// <br/><br/>
	// This field is only applicable for single-variation listings. For multiple-variation listings, if the category/product requires a UPC value, this value should be passed into the <b>Variation.VariationProductListingDetails.UPC</b> field instead.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that expects a UPC value, but one doesn't exist for the product, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	//
	UPC string `xml:"UPC,omitempty"`

	//
	// This field is used if the seller wants to, or is required to identify a product using an EAN (European Article Number) value. An  EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if an EAN is supported/required for a category.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The <b>EAN</b> (and EAN values) are typically only applicable to European products listed on European eBay marketplaces. If a US seller is selling a US-based product (with a UPC value) on a European site (such as eBay UK), instead of using the <b>UPC</b> field, the seller will use the <b>EAN</b> field to pass in the UPC value.
	// </span>
	// <br/>
	// If the <b>IncludeeBayProductDetails</b> field is omitted or included and set to <code>true</code>, eBay will use the EAN value passed into this field to try and find a matching eBay catalog product. If a match is found, the listing will pick up the product details of the catalog product, including the product title, product description, item specifics, and stock photo. If the seller is passing in an ePID through the <b>ProductReferenceID</b> field, this field is not needed, as all product identifiers will get picked up automatically by the listing if a matching catalog product is found.
	// <br/><br/>
	// This field is only applicable for single-variation listings. For multiple-variation listings, if the category/product requires an EAN value, this value should be passed into the <b>Variation.VariationProductListingDetails.EAN</b> field instead.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that expects an EAN value, but one doesn't exist for the product, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	//
	EAN string `xml:"EAN,omitempty"`

	//
	// This container is used if the seller wants to, or is required to identify a product using an Brand/Manufacturer Part Number (MPN) pair. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if a Brand/MPN pair is supported/required for a category. Both the <b>Brand</b> and <b>MPN</b> fields are required if the category/product requires an MPN value.
	// <br/><br/>
	// If the <b>IncludeeBayProductDetails</b> field is omitted or included and set to <code>true</code>, eBay will use the Brand/MPN pair to try and find a matching eBay catalog product. If a match is found, the listing will pick up the product details of the catalog product, including the product title, product description, item specifics, and stock photo. If the seller is passing in an ePID through the <b>ProductReferenceID</b> field, this field is not needed, as all product identifiers associated with the catalog product will get picked up automatically by the listing if a matching catalog product is found.
	// <br/><br/>
	// This container is only applicable for single-variation listings. For multiple-variation listings, if the category requires Brand/MPN pairs, the product brand (shared by all variations in this listing) is passed in through the item-level item specifics (<b>Item.ItemSpecifics.NameValueList</b>), and the MPN value for each variation in the listing is passed in through the variation-level item specifics (<b>Variation.VariationSpecifics.NameValueList</b>).
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that requires or recommends a Brand and MPN value, the Brand and MPN values for the product should always be passed in through separate <b>ItemSpecifics.NameValueList</b> containers since the Brand and MPN values passed in through the <b>ProductListingDetails.BrandMPN</b> will not get picked up by the generated/revised listing unless the the Brand/MPN pair is successfully matched to an eBay catalog product. If an MPN doesn't exist for a product, or the seller does not have it available, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	// <br>
	//
	BrandMPN *BrandMPNType `xml:"BrandMPN,omitempty"`

	//
	// This container is only applicable when a seller is creating/revising an event tickets listing.
	//
	TicketListingDetails *TicketListingDetailsType `xml:"TicketListingDetails,omitempty"`

	//
	// This field can be included and set to <code>true</code> if the seller wants to use the first eBay catalog product that is found to create/revise the listing. eBay will search for an eBay catalog product match if the seller provides an ePID or one or more GTIN values. If this field is omitted, or included and set to <code>false</code>, the call will fail if more than one eBay catalog product is found.
	// <br>
	//
	UseFirstProduct bool `xml:"UseFirstProduct,omitempty"`

	//
	// This boolean field controls whether or not an eBay catalog product is used to create or revise a listing. If an ePID or GTIN value is provided through the <b>ProductListingDetails</b> container when adding, revising, or relisting an item, the default behavior is for eBay to try and find a match for the product in the eBay catalog, and then automatically create/revise the listing using the product title, product description, item specifics, and stock photo defined for the catalog product.
	// <br><br>
	// If the seller wants to use an eBay catalog product to create/revise a listing, the seller can include this field and set its value to <code>true</code>, or just omit this field, as it default value is <code>true</code>. If a seller doesn't want use an eBay catalog product to create/revise their listing, this field should be included and set to <code>false</code>. If the seller declines to use an eBay catalog product, they will be required to pass in their own listing title, listing description, item specifics, a listing category, and at least one picture.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// For categories/product brands that are part of the Product-Based Shopping Experience mandate, setting this field to <code>false</code> will cause the call to fail, as a eBay catalog product is required for category/brands that are part of the mandate. For more information on the Product-Based Shopping Experience and the categories/product brands affected, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	// </span>
	//
	IncludeeBayProductDetails bool `xml:"IncludeeBayProductDetails,omitempty"`

	//
	// This container is for future use. If it used, it will be ignored.
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`
}

type ProductRecommendationsType struct {

	//
	// This field is deprecated.
	//
	Product []*ProductInfoType `xml:"Product,omitempty"`
}

type ProductRequiredEnabledDefinitionType struct {
}

type ProductSearchPageType struct {

	//
	// This field is deprecated.
	//
	SearchCharacteristicsSet *CharacteristicsSetType `xml:"SearchCharacteristicsSet,omitempty"`

	//
	// This field is deprecated.
	//
	SearchType *CharacteristicsSearchCodeType `xml:"SearchType,omitempty"`

	//
	// This field is deprecated.
	//
	SortCharacteristics []*CharacteristicType `xml:"SortCharacteristics,omitempty"`

	//
	// This field is deprecated.
	//
	DataElementSet []*DataElementSetType `xml:"DataElementSet,omitempty"`
}

type ProductSearchResultType struct {

	//
	// This field is deprecated.
	//
	ID string `xml:"ID,omitempty"`

	//
	// This field is deprecated.
	//
	NumProducts string `xml:"NumProducts,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSet []*ResponseAttributeSetType `xml:"AttributeSet,omitempty"`

	//
	// This field is deprecated.
	//
	DisplayStockPhotos bool `xml:"DisplayStockPhotos,omitempty"`
}

type ProductSearchType struct {

	//
	// This field is deprecated.
	//
	ProductSearchID string `xml:"ProductSearchID,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSetID int32 `xml:"AttributeSetID,omitempty"`

	//
	// This field is deprecated.
	//
	ProductFinderID int32 `xml:"ProductFinderID,omitempty"`

	//
	// This field is deprecated.
	//
	ProductID string `xml:"ProductID,omitempty"`

	//
	// This field is deprecated.
	//
	SortAttributeID int32 `xml:"SortAttributeID,omitempty"`

	//
	// This field is deprecated.
	//
	MaxChildrenPerFamily int32 `xml:"MaxChildrenPerFamily,omitempty"`

	//
	// This field is deprecated.
	//
	SearchAttributes []*SearchAttributesType `xml:"SearchAttributes,omitempty"`

	//
	// This field is deprecated.
	//
	Pagination *PaginationType `xml:"Pagination,omitempty"`

	//
	// This field is deprecated.
	//
	AvailableItemsOnly bool `xml:"AvailableItemsOnly,omitempty"`

	//
	// This field is deprecated.
	//
	QueryKeywords string `xml:"QueryKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	CharacteristicSetIDs *CharacteristicSetIDsType `xml:"CharacteristicSetIDs,omitempty"`

	//
	// This field is deprecated.
	//
	ProductReferenceID string `xml:"ProductReferenceID,omitempty"`
}

type ProductSuggestionType struct {

	//
	// The title of the product from the eBay catalog.
	//
	Title string `xml:"Title,omitempty"`

	//
	// The product reference Id of the product
	// The eBay Product ID, a global reference ID for an eBay catalog product. The
	// ePID is a fixed reference to a product (regardless of version).
	//
	EPID string `xml:"EPID,omitempty"`

	//
	// Fully qualified URL for a stock image (if any) that is associated with the
	// eBay catalog product. The URL is for the image eBay usually displays in
	// product search results (usually 70px tall). It may be helpful to calculate the
	// dimensions of the photo programmatically before displaying it.
	//
	StockPhoto string `xml:"StockPhoto,omitempty"`

	//
	// If true, indicates that the product is an exact match, suitable for listing
	// the item.
	//
	Recommended bool `xml:"Recommended,omitempty"`
}

type ProductSuggestionsType struct {

	//
	// Contains details for one or more individual product suggestions. The product
	// details include the EPID, Title, Stock photo url and whether or not the product
	// is an exact match for the submitted item. This product information can be used
	// to list subsequent items.
	//
	ProductSuggestion []*ProductSuggestionType `xml:"ProductSuggestion,omitempty"`
}

type ProductType struct {

	//
	// This field is deprecated.
	//
	CharacteristicsSet *CharacteristicsSetType `xml:"CharacteristicsSet,omitempty"`

	//
	// This field is deprecated.
	//
	DetailsURL *AnyURI `xml:"DetailsURL,omitempty"`

	//
	// This field is deprecated.
	//
	NumItems int32 `xml:"NumItems,omitempty"`

	//
	// This field is deprecated.
	//
	MinPrice *AmountType `xml:"MinPrice,omitempty"`

	//
	// This field is deprecated.
	//
	MaxPrice *AmountType `xml:"MaxPrice,omitempty"`

	//
	// This field is deprecated.
	//
	ProductReferenceID string `xml:"ProductReferenceID,omitempty"`

	//
	// This field is deprecated.
	//
	ProductID string `xml:"productID,attr,omitempty"`

	//
	// This field is deprecated.
	//
	StockPhotoURL *AnyURI `xml:"stockPhotoURL,attr,omitempty"`

	//
	// This field is deprecated.
	//
	Title string `xml:"title,attr,omitempty"`
}

type ProfileCategoryGroupDefinitionType struct {
}

type PromotedItemType struct {

	//
	// This field is deprecated.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This field is deprecated.
	//
	PictureURL string `xml:"PictureURL,omitempty"`

	//
	// This field is deprecated.
	//
	Position int32 `xml:"Position,omitempty"`

	//
	// This field is deprecated.
	//
	SelectionType *PromotionItemSelectionCodeType `xml:"SelectionType,omitempty"`

	//
	// This field is deprecated.
	//
	Title string `xml:"Title,omitempty"`

	//
	// This field is deprecated.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	PromotionDetails []*PromotionDetailsType `xml:"PromotionDetails,omitempty"`

	//
	// This field is deprecated.
	//
	TimeLeft *Duration `xml:"TimeLeft,omitempty"`
}

type PromotionDetailsType struct {

	//
	// This field is deprecated.
	//
	PromotionPrice *AmountType `xml:"PromotionPrice,omitempty"`

	//
	// This field is deprecated.
	//
	PromotionPriceType *PromotionItemPriceTypeCodeType `xml:"PromotionPriceType,omitempty"`

	//
	// This field is deprecated.
	//
	BidCount int32 `xml:"BidCount,omitempty"`

	//
	// This field is deprecated.
	//
	ConvertedPromotionPrice *AmountType `xml:"ConvertedPromotionPrice,omitempty"`
}

type PromotionRuleArrayType struct {

	//
	// This field is deprecated.
	//
	PromotionRule []*PromotionRuleType `xml:"PromotionRule,omitempty"`
}

type PromotionRuleType struct {

	//
	// This field is deprecated.
	//
	PromotedStoreCategoryID int64 `xml:"PromotedStoreCategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	PromotedeBayCategoryID string `xml:"PromotedeBayCategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	PromotedKeywords string `xml:"PromotedKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	ReferringItemID *ItemIDType `xml:"ReferringItemID,omitempty"`

	//
	// This field is deprecated.
	//
	ReferringStoreCategoryID int64 `xml:"ReferringStoreCategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	ReferringeBayCategoryID string `xml:"ReferringeBayCategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	ReferringKeywords string `xml:"ReferringKeywords,omitempty"`

	//
	// This field is deprecated.
	//
	PromotionScheme *PromotionSchemeCodeType `xml:"PromotionScheme,omitempty"`

	//
	// This field is deprecated.
	//
	PromotionMethod *PromotionMethodCodeType `xml:"PromotionMethod,omitempty"`
}

type PromotionalSaleArrayType struct {

	//
	// Each <strong>PromotionalSale</strong> container consists of detailed information on a seller's promotional sale. Each promotional sale that matches the input criteria is returned.
	// <br/><br/>
	// Promotional Sales are only available to eBay sellers who are eBay Store subscribers.
	//
	PromotionalSale []*PromotionalSaleType `xml:"PromotionalSale,omitempty"`
}

type PromotionalSaleDetailsType struct {

	//
	// Original price of an item whose price a seller has reduced with the Promotional Price
	// Display feature.
	//
	OriginalPrice *AmountType `xml:"OriginalPrice,omitempty"`

	//
	// Start time of a discount for an item whose price a seller has reduced with the
	// Promotional Price Display feature.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// End time of a discount for an item whose price a seller has reduced with the
	// Promotional Price Display feature.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`
}

type PromotionalSaleType struct {

	//
	// Unique ID of a promotional sale (discount and/or free shipping) for items.
	// This field is an input field only for the SetPromotionalSale call
	// and only if you are not adding a new promotional sale.
	//
	PromotionalSaleID int64 `xml:"PromotionalSaleID,omitempty"`

	//
	// Name of a promotional sale for items.
	//
	PromotionalSaleName string `xml:"PromotionalSaleName,omitempty"`

	//
	// Items covered by a promotional sale.
	//
	PromotionalSaleItemIDArray *ItemIDArrayType `xml:"PromotionalSaleItemIDArray,omitempty"`

	//
	// Status of a promotional sale for items.
	//
	Status *PromotionalSaleStatusCodeType `xml:"Status,omitempty"`

	//
	// Type of a promotional sale discount for items (for example, percentage).
	// Applies to price discount sales only.
	//
	DiscountType *DiscountCodeType `xml:"DiscountType,omitempty"`

	//
	// Value of a promotional sale discount for items, a percentage discount
	// or a fixed amount reduction. Percentage discounts must be at least 5% and
	// cannot exceed 75% of the original listing price. Fixed amount discounts
	// will be in the currency of the original listing.
	// Applies to price discount sales only.
	//
	DiscountValue float64 `xml:"DiscountValue,omitempty"`

	//
	// Start date of a promotional sale for items. Promotional sales can start
	// immediately or be scheduled to start at a later date. Some sites require
	// items to have been listed for a specific duration before they can be added
	// to a promotional sale (for example, on the US site, items must have been
	// listed for a day before they can be added to a promotional sale).
	//
	PromotionalSaleStartTime time.Time `xml:"PromotionalSaleStartTime,omitempty"`

	//
	// End date of a promotional sale discount for items. Maximum listing durations
	// vary by site from 14 days to 45 days. The minimum promotional sale duration is 1 day for most sites, but 3 days on some sites.
	//
	PromotionalSaleEndTime time.Time `xml:"PromotionalSaleEndTime,omitempty"`

	//
	// Type of promotional sale: price discount, free shipping, or both.
	//
	PromotionalSaleType *PromotionalSaleTypeCodeType `xml:"PromotionalSaleType,omitempty"`
}

type PromotionalShippingDiscountDetailsType struct {

	//
	// The type of promotional shipping discount that is detailed in the profile. If the discount type is <code>MaximumShippingCostPerOrder</code>, see <b>ShippingCost</b>. If the discount type is <code>ShippingCostXForAmountY</code>, see <b>ShippingCost</b> and <b>OrderAmount</b>. If the discount type is <code>ShippingCostXForItemCountN</code>, see <b>ShippingCost</b> and <b>ItemCount</b>.
	//
	DiscountName *DiscountNameCodeType `xml:"DiscountName,omitempty"`

	//
	// This is shipping cost X when <b>DiscountName</b> is either <code>ShippingCostXForAmountY</code> or
	// <code>ShippingCostXForItemCountN</code>, and is the maximum cost when <b>DiscountName</b> is
	// <code>MaximumShippingCostPerOrder</code>.
	//
	ShippingCost *AmountType `xml:"ShippingCost,omitempty"`

	//
	// This is the cost Y of the order (not including shipping cost)
	// when <b>DiscountName</b> is set to <code>ShippingCostXForAmountY</code>.
	//
	OrderAmount *AmountType `xml:"OrderAmount,omitempty"`

	//
	// This is the number of items when <b>DiscountName</b> is set to <code>ShippingCostXForItemsY</code>.
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`
}

type PurchaseReminderEmailPreferencesType struct {

	//
	// If true, a payment reminder Email is sent to buyers.
	//
	PurchaseReminderEmailPreferences bool `xml:"PurchaseReminderEmailPreferences,omitempty"`
}

type QuantityInfoType struct {

	//
	// Enables a seller to avoid being left with quanity of <code>1</code> in an event listing.  A typical use case is event tickets in reserved,
	// adjacent seats, or items that typically only sell if more than
	// one can be purchased at once.
	// <br>
	// <br>
	// Specify the minimum number of items that
	// should remain if a buyer doesn't purchase all the items.
	// Based on the value of <b>MinimumRemnantSet</b> and the listing's
	// available quantity (<b>Quantity</b>-<b>QuantitySold</b>), eBay calculates the quantity that a buyer can purchase in one transaction.
	// For example, suppose you list 5 tickets, and you want at least
	// 2 tickets remaining for the final buyer to purchase.
	// In this case, you would set <b>MinimumRemnantSet</b> value to <code>2</code>.
	// This means a buyer can purchase 1, 2, 3, or 5 tickets, but not 4
	// (because 4 would leave the seller with 1 ticket).<br>
	// <br>
	// To remove this restriction when you revise or relist,
	// set <b>MinimumRemnantSet</b> to 1.<br>
	// <br>
	// Applicable to multiple-quantity, fixed-price listings.
	// Currently supported for US and CA event ticket listings.
	// <br>
	//
	MinimumRemnantSet int32 `xml:"MinimumRemnantSet,omitempty"`
}

type QuantityRestrictionPerBuyerInfoType struct {

	//
	// This integer value indicates the maximum quantity of items that a single buyer may
	// purchase during the duration of a fixed-price listing (single or multi-variation).
	// The buyer is blocked from the purchase if that buyer is attempting to purchase a
	// quantity of items that will exceed this value. Previous purchases made by the buyer
	// are taken into account. For example, if <b>MaximumQuantity</b> is set to
	// '5' for an item listing, and <em>Buyer1</em> purchases a quantity of
	// three, <em>Buyer1</em> is only allowed to purchase an additional
	// quantity of two in subsequent orders on the same item listing.
	// <br/><br/>
	// This field is required if the <b>QuantityRestrictionPerBuyer</b>
	// container is used.
	// <br>
	//
	MaximumQuantity int32 `xml:"MaximumQuantity,omitempty"`
}

type RateTableDetailsType struct {

	//
	// This field is used in an Add/Revise/Relist/Verify call to apply the domestic shipping rate table to the listing. Domestic rate tables can be used only for items listed on the eBay US, Australia, UK, Germany, Canada (English and French), and Italy sites.
	// <br><br>
	// In all cases, sellers pass in a string value of <code>Default</code> to apply the domestic shipping rate table. The shipping rates and/or surcharges set up in the domestic shipping rate table will only be applicable based on the location of the buyer, and if that shipping service level is covered in one of the specified shipping service options in the listing. Basically, domestic shipping costs and surcharges are set in one or more <b>ShippingServiceOptions</b> containers in the listing, and based on the settings and costs in the domestic shipping rate table, these shipping costs and/or surcharges may be overridden based on the buyer's location. For example, if the buyer lives in Alaska, and the domestic shipping rate table has one or more shipping rates set up for the <em>Alaska & Hawaii</em> domestic region, the buyer will see these rates in the View Item page and not the rates/costs that are defined in the <b>ShippingServiceOptions</b> containers.
	// <br><br>
	// If a seller is revising or relisting an item, the domestic shipping rate table can be unassociated from the listing by using the empty tag: <code>&lt;DomesticRateTable /&gt;</code>
	// <br><br>
	// This field is returned in the 'Get' calls if a domestic rate table is being applied to the listing, and it is only returned for the seller who listed the item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> The capability to create and use multiple domestic and international shipping rate tables (up to 40 per seller account) has rolled out to the US, Australia, UK, Germany, Canada (English and French), and Italy sites. Currently, for sites other than the ones stated, only one domestic and one international shipping rate table may be set up per seller. Until the seller's account is updated with the new shipping rate tables in My eBay, the seller will continue to use the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags and pass in <code>Default</code> as the value. Once the seller's account is updated with the new shipping rate tables in My eBay, the seller will be required to use the new <b>DomesticRateTableId</b> and <b>InternationalRateTableId</b> tags, and the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags will not work.  Note that shipping rate tables can also be applied to Shipping business policies that are applied against a listing. The new shipping rate tables have all of the functionality of the old shipping rate tables, plus the seller has access to all domestic regions and not just the special regions (such as Alaska & Hawaii, US Protectorates, and APO/FPO locations in US).</span>
	//
	DomesticRateTable string `xml:"DomesticRateTable,omitempty"`

	//
	// This field is used in an Add/Revise/Relist/Verify call to apply the international shipping rate table to the listing. Domestic rate tables can be used only for items listed on the eBay US, UK, and DE sites.
	// <br><br>
	// In all cases, sellers pass in a string value of <code>Default</code> to apply the international shipping rate table. The shipping rates set up in the international shipping rate table will only be applicable based on the location of the buyer, and if that shipping service level is covered in one of the specified international shipping service options in the listing. Basically, international shipping costs are set in one or more <b>InternationalShippingServiceOption</b> containers in the listing, and based on the settings and costs in the international shipping rate table, these shipping costs may be overridden based on the buyer's location. For example, if the buyer lives in Argentina, and the international shipping rate table has one or more shipping rates set up for the country of <em>Argentina</em>, the buyer will see these rates in the View Item page and not the rates/costs that are defined in the <b>InternationalShippingServiceOption</b> containers.
	// <br><br>
	// If a seller is revising or relisting an item, the international shipping rate table can be unassociated from the listing by using the empty tag: <code>&lt;InternationalRateTable /&gt;</code>
	// <br><br>
	// This field is returned in the 'Get' calls if an international rate table is being applied to the listing, and it is only returned for the seller who listed the item.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> The capability to create and use multiple domestic and international shipping rate tables (up to 40 per seller account) has rolled out to the US, Australia, UK, Germany, Canada (English and French), and Italy sites. Currently, for sites other than the ones stated, only one domestic and one international shipping rate table may be set up per seller. Until the seller's account is updated with the new shipping rate tables in My eBay, the seller will continue to use the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags and pass in <code>Default</code> as the value. Once the seller's account is updated with the new shipping rate tables in My eBay, the seller will be required to use the new <b>DomesticRateTableId</b> and <b>InternationalRateTableId</b> tags, and the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags will not work.  Note that shipping rate tables can also be applied to Shipping business policies that are applied against a listing. The new shipping rate tables have all of the functionality of the old shipping rate tables, plus the seller has access to all domestic regions and not just the special regions (such as Alaska & Hawaii, US Protectorates, and APO/FPO locations in US).</span>
	//
	InternationalRateTable string `xml:"InternationalRateTable,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b>This field is only available for sellers on the US, Australia, UK, Germany, Canada (English and French), and Italy sites. The unique shipping rate identifiers that will be passed into this field can be retrieved using the <b>getRateTables</b> call of the <b>Account API</b>, or these identifiers can be viewed in the displayed URL when the seller selects a specific shipping rate table in the Shipping rate tables UI in My eBay.
	// </span>
	// <br>
	// This field is included in an Add/Revise/Relist/Verify call if the seller wants to apply a customized domestic shipping rate table to the listing. The string value that is supplied in this field is the unique identifier of the shipping rate table. If the <b>DomesticRateTableId</b>  field is used, the seller must make sure that the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> fields are not used, as the old and new rate tables cannot be used together or an error will occur.
	// <br><br>
	// In domestic shipping rate tables, sellers customize the flat-rate cost of shipping based on shipping destination (region/state/province) and shipping service level (one-day, expedited, standard, economy in US). In addition to setting one flat rate based on the destination and service level, the seller also has the option of adding an extra charge based on the weight of the shipping package, or they can add a surcharge instead.
	// <br><br>
	// If the seller is using the Revise or Relist call, they must include the <b>DomesticRateTableId</b> field or the domestic shipping rate table currently being applied to the listing will be unassociated from the listing. If they want to continue using the same domestic shipping rate table, the seller will pass in this identifier. The seller can also change the domestic shipping rate table by passing in the identifier for a different domestic shipping rate table.
	// <br><br>
	// If a seller is revising or relisting an item, the domestic shipping rate table can be unassociated from the listing by using the empty tag: <code>&lt;DomesticRateTableId /&gt;</code>
	// <br><br>
	// This field is returned in the 'Get' calls if a customized domestic rate table is being applied to the listing, and it is only returned for the seller who listed the item.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> The capability to create and use multiple domestic and international shipping rate tables (up to 40 per seller account) has rolled out to the US, Australia, UK, Germany, Canada (English and French), and Italy sites. For other sites, only one domestic and one international shipping rate table may be set up per seller. Until the seller's account is updated with the new shipping rate tables in My eBay, the seller will continue to use the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags and pass in <code>Default</code> as the value. Once the seller's account is updated with the new shipping rate tables in My eBay, the seller will be required to use the new <b>DomesticRateTableId</b> and <b>InternationalRateTableId</b> tags, and the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags will not work.  Note that shipping rate tables can also be applied to Shipping business policies that are applied against a listing. The new shipping rate tables have all of the functionality of the old shipping rate tables, plus the seller has access to all domestic regions and not just the special regions (such as Alaska & Hawaii, US Protectorates, and APO/FPO locations in US).</span>
	//
	DomesticRateTableId string `xml:"DomesticRateTableId,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b>This field is only available to sellers on the US, Australia, UK, Germany, Canada (English and French), and Italy sites. The unique shipping rate identifiers that will be passed into this field can be retrieved using the <b>getRateTables</b> call of the <b>Account API</b>, or these identifiers can be viewed in the displayed URL when the seller selects a specific shipping rate table in the Shipping rate tables UI in My eBay.
	// </span>
	// <br>
	// This field is included in an Add/Revise/Relist/Verify call if the seller wants to apply a customized international shipping rate table to the listing. The string value that is supplied in this field is the unique identifier of the shipping rate table. If the <b>InternationalRateTableId</b> field is used, the seller must make sure that the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> fields are not used, as the old and new rate tables cannot be used together or an error will occur.
	// <br><br>
	// In international shipping rate tables, sellers customize the flat-rate cost of shipping based on shipping destination (continent/region/country) and shipping service level (expedited, standard, economy in US). In addition to setting one flat rate based on the destination and service level, the seller also has the option of adding an extra charge based on the weight of the shipping package. Unlike domestic shipping, sellers cannot add a surcharge for international shipping.
	// <br><br>
	// If the seller is using the Revise or Relist call, they must include the <b>InternationalRateTableId</b> field or the international shipping rate table currently being applied to the listing will be unassociated from the listing. If they want to continue using the same international shipping rate table, the seller will pass in this identifier. The seller can also change the international shipping rate table by passing in the identifier for a different international shipping rate table.
	// <br><br>
	// If a seller is revising or relisting an item, the domestic shipping rate table can be unassociated from the listing by using the empty tag: <code>&lt;InternationalRateTableId /&gt;</code>
	// <br><br>
	// This field is returned in the 'Get' calls if a customized international rate table is being applied to the listing, and it is only returned for the seller who listed the item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> The capability to create and use multiple domestic and international shipping rate tables (up to 40 per seller account) has rolled out to the US, Australia, UK, Germany, Canada (English and French), and Italy sites. For other sites, only one domestic and one international shipping rate table may be set up per seller. Until the seller's account is updated with the new shipping rate tables in My eBay, the seller will continue to use the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags and pass in <code>Default</code> as the value. Once the seller's account is updated with the new shipping rate tables in My eBay, the seller will be required to use the new <b>DomesticRateTableId</b> and <b>InternationalRateTableId</b> tags, and the <b>DomesticRateTable</b> and <b>InternationalRateTable</b> tags will not work.  Note that shipping rate tables can also be applied to Shipping business policies that are applied against a listing. The new shipping rate tables have all of the functionality of the old shipping rate tables, plus the seller has access to all domestic regions and not just the special regions (such as Alaska & Hawaii, US Protectorates, and APO/FPO locations in US).</span>
	//
	InternationalRateTableId string `xml:"InternationalRateTableId,omitempty"`
}

type ReasonCodeDetailType struct {

	//
	// The short description of the infringement associated with the reason code ID.
	//
	BriefText string `xml:"BriefText,omitempty"`

	//
	// The long description of the infringement associated with the reason code ID.
	//
	DetailedText string `xml:"DetailedText,omitempty"`

	//
	// A unique identifier assigned to a reason code.
	//
	CodeID int64 `xml:"codeID,attr,omitempty"`
}

type RecommendationType struct {
	FieldGroup string `xml:"FieldGroup,omitempty"`

	FieldName string `xml:"FieldName,omitempty"`

	RecommendationCode string `xml:"RecommendationCode,omitempty"`

	RecommendedValue []string `xml:"RecommendedValue,omitempty"`

	Message string `xml:"Message,omitempty"`
}

type RecommendationValidationRulesType struct {

	//
	// The data type (e.g., date) that eBay expects the value to
	// adhere to in listing requests.
	// Only returned if the data type is not Text.
	// In some cases, more details about the data type are returned
	// in the <b>ValueFormat</b> field.<br>
	// <br>
	// As buyers may search on the value you specify in AddItem,
	// the ISBN, UPC, or EAN should match the value that was specified by
	// the publisher or manufacturer.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// Starting with Version 945 and going forward, the <code>Numeric</code> enumeration value will be returned for whole integers (no decimal point), and the <code>Decimal</code> enumeration value will be returned for numbers with decimals. For the Version 943 WSDL and older, <Code>Decimal</Code> will continue being returned for all numeric values.
	// </span>
	//
	ValueType *ValueTypeCodeType `xml:"ValueType,omitempty"`

	//
	// Minimum number of values that you can specify for this Item Specific
	// in listing requests. Not returned if zero (0).<br>
	// <br>
	// If 1 or more, it means this Item Specfic is required
	// in listing requests (in the specified category). (Your listing
	// request will return errors if the Item Specific is not present.)
	// If <b>Relationship</b>  is also present, it means this Item Specific is
	// required when you specify its parent value in listing requests.
	//
	MinValues int32 `xml:"MinValues,omitempty"`

	//
	// Maximum number of values that you can specify for this Item Specific
	// in listing requests (like AddItem) in the specified
	// category.<br>
	// <br>
	// Most Item Specifics can only have one value. When this is
	// greater than 1, your application can present the value
	// recommendations (if any) as a multi-select list to the seller.
	// (See <b>SelectionMode</b> to determine whether the seller needs to
	// choose from eBay's recommendations or not.)
	//
	MaxValues int32 `xml:"MaxValues,omitempty"`

	//
	// Controls whether you can specify your own name and value
	// in listing requests, or if you need to use a name and/or value
	// that eBay has defined.
	//
	SelectionMode *SelectionModeCodeType `xml:"SelectionMode,omitempty"`

	//
	// The value returned in this field will indicate if the item specific value is a product aspect (relevant to catalog products in the category) or an item/instance aspect, which is an aspect whose value will vary based on a particular instance of the product.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> Currently, the <b>AspectUsage</b> field will only be returned in the Sandbox environment, and only for category/brands that are a part of the Product-Based Shopping Experience mandate. See the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_product_vs_item_aspects.html" target="_blank">Product aspects vs. item specifics</a> page for more information about product aspects and instance aspects.
	// </span>
	//
	AspectUsage *AspectUsageCodeType `xml:"AspectUsage,omitempty"`

	//
	// This integer value will state the maximum length of the aspect's value. The seller must make sure not to exceed this value when setting instance aspects on a listing.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> Currently, the <b>MaxValueLength</b> field will only be returned in the Sandbox environment, and only for category/brands that are a part of the Product-Based Shopping Experience mandate. See the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_product_vs_item_aspects.html" target="_blank">Product aspects vs. item specifics</a> page for more information about product aspects and instance aspects.
	// </span>
	//
	MaxValueLength int32 `xml:"MaxValueLength,omitempty"`

	//
	// The enumeration value returned in this field will indicate whether or not the corresponding product brand requires that a seller associate an eBay Catalog product with listings in the category. To create a listing that is associated with an eBay Catalog product, the seller uses the <b>ProductListingDetails</b> container of the <b>AddItem</b> call. To find a matching product in the eBay catalog, the seller can use the new <b>eBay Catalog API</b> or <b>FindProducts</b> call of the <b>eBay Shopping API</b>.
	// <br>
	// <br>
	// This field is only returned for the 'Brand' <b>NameRecommendation</b> container, and is only returned if the particular eBay category is a Product-Based Shopping Experience enforced category. See this <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse-phase1-categories.html" target="_blank">table</a> for current eBay categories/brands that require listings to be associated with an eBay Catalog product.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> Through Phase 1 of the Product-Based Shopping Experience, scheduled to start being enforced in May 2018, this field will only be returned if <code>Enabled</code> for the product brand. However, with Phase 2 of the Product-Based Shopping Experience, scheduled to start being enforced in August 2018, entire leaf categories will start requiring association with eBay Catalog products, and sellers will want to use the <b>GetCategoryFeatures</b> call instead to see if the eBay category requires listings to be associated with eBay Catalog products. For more information about the Product-Based Shopping Experience, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	// </span>
	//
	ProductRequired *ProductRequiredCodeType `xml:"ProductRequired,omitempty"`

	//
	// Indicates eBay's confidence that this is the right name or value,
	// given the data you specified your request. The confidence is based
	// on historical items in the same category, with similar titles
	// (if specified).<br>
	// <br>
	// This field is only returned when <b>IncludeConfidence</b> is included in the request and set to <code>true</code>.
	// This field is not returned when <b>SelectionMode</b> is set to  <code>Prefilled</code>.
	//
	Confidence int32 `xml:"Confidence,omitempty"`

	//
	// Indicates the Item Specific's logical dependency on another
	// Item Specific, if any.
	// <br>
	// <br>
	// For example, in a clothing category, Size Type could be
	// recommended as a parent of Size, because Size=XL would
	// mean something different to buyers when
	// Size Type=Juniors or Size Type=Regular. <br>
	// <br>
	// Or in the US (in the future), a list of cities can vary depending
	// on the state, so State could be recommended as a parent of City.<br>
	// <br>
	// Currently, categories only recommend a maximum of one parent
	// for an Item Specific.
	// For example, Size=XL could have a Size Type=Juniors
	// parent in a Juniors clothing category.
	// In the future, some categories may recommend multiple parents.
	// For example, City=Mountain View could have parents like
	// State=California, State=New York, and State=North Carolina.<br>
	// <br>
	// If an Item Specific has value dependencies (i.e., if it has value recommendations that contain <b>Relationship</b>), then
	// all of its value recommendations are returned (regardless of the
	// number you specified in <b>MaxValuesPerName</b>).
	//
	Relationship []*NameValueRelationshipType `xml:"Relationship,omitempty"`

	//
	// Indicates whether the name (e.g., Color) can (or must) be used to
	// classify the variation pictures.
	//
	VariationPicture *VariationPictureRuleCodeType `xml:"VariationPicture,omitempty"`

	//
	// Indicates whether the recommended name/value pair can be used in
	// an <b>Item.Variations</b> container in a fixed-price listing call.
	// For example, a given category could disable a name like Brand
	// in variation specifics (if Brand is only allowed in the item specifics at the Item level). The same category could
	// enable a name like Size for variation specifics
	// (in addition to recommending it for item specifics).
	// If not returned, then the name/value can be used for
	// both variation specifics and item specifics.
	//
	VariationSpecifics *VariationSpecificsRuleCodeType `xml:"VariationSpecifics,omitempty"`

	//
	// The format of the data type (e.g., date format) that eBay
	// expects the item specific's value to adhere to in listing requests.
	// A data type identified by the <b>ValueType</b> field may have different
	// representations, and <b>ValueFormat</b> specifies the precise format
	// that is required.
	//
	ValueFormat *ValueFormatCodeType `xml:"ValueFormat,omitempty"`
}

type RecommendationsType struct {

	//
	// The unique identifier of the leaf category for which the recommended Item Specifics and Product Identifier types apply to.
	// This is always a category ID that you specified in the request.<br>
	// <br>
	// This field is always returned with each <b>Recommendations</b> container.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This container will consist of one or more Product Identifier types that are supported, or possibly required to be used when listing a product. These Product Identifier types will be common Global Trade Item Number (GTIN) types such as UPC, ISBN, and EAN. Each Product Identifier type that is applicable to the category will be returned in a separate <b>NameRecommendation</b> container. To see if one or more of the Product Identifier types are actually required at listing time, the seller will need to look at the <b>ValidationRules</b> container and the <b>MinRequired</b> value. If two Product Identifier types are returned, and the <b>MinRequired</b> value is the <code>2</code>, the seller will be required to use both Product Identifier types at listing time. If the <b>MinRequired</b> value was <code>0</code>, one or both of those Product Identifier types could be used, but they would not be required.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// This container is for future use, and is not currently returned in the <b>GetCategorySpecifics</b> call. Until the <b>ProductIdentifiers</b> container is wired on and returned, an alternative way to see if a Product Identifier type is required for a category is to identify the Product Identifier type through the <b>Recommendations.NameRecommendation.Name</b> field in the <b>GetCategorySpecifics</b> response, and then look at the corresponding  <b>Recommendations.NameRecommendation.ValidationRules.MinValues</b> field. The <b>GetCategoryFeatures</b> call can also be used, and the seller will look for the values returned for that category under the <b>EANEnabled</b>, <b>ISBNEnabled</b>, <b>UPCEnabled</b>, and  <b>BrandMPNIdentifierEnabled</b> fields that indicate the Product Identifier types that are supported/required for the category.
	//
	ProductIdentifiers []*ProductIdentifiersType `xml:"ProductIdentifiers,omitempty"`

	//
	// This container consists of Item Specific name/value pairs that eBay recommends as popular within the specified category. If no recommended Item Specific name/value pairs are found for the category, this container will not be returned.
	//
	NameRecommendation []*NameRecommendationType `xml:"NameRecommendation,omitempty"`

	//
	// If this field is returned as <code>true</code>, the recommended Item Specifics and/or Product Identifiers for this category have changed since the time you specified in the <b>LastUpdateTime</b> field. In this case, we suggest you retrieve the latest data for the category. If this field is returned as <code>false</code>, the recommended Item Specifics and/or Product Identifiers for this category have not changed since the time you specified.<br>
	// <br>
	// This field is only returned when the <b>LastUpdateTime</b> field is passed in the request.
	//
	Updated bool `xml:"Updated,omitempty"`
}

type RecoupmentPolicyConsentType struct {

	//
	// A unique identifier for an eBay site. Each site where the user (specified in <strong>UserID</strong> field of call request) has signed a cross-border trade Recoupment Policy Agreement is returned. The enumeration values that represent these eBay sites can be found in <strong>SiteCodeType</strong>.
	//
	Site []*SiteCodeType `xml:"Site,omitempty"`
}

type RefundArrayType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundArrayType</b> and the <b>Refund</b> field are no longer applicable since the Half.com site has been shut down.
	// </span>
	// This container consists of information about a Half.com refund. It is only returned if a Half.com order is going through (or has completed) the refund process.
	//
	Refund []*RefundType `xml:"Refund,omitempty"`
}

type RefundDetailsType struct {

	//
	// Indicates how the seller will compensate the buyer for a returned item. This value can be passed in the Add/Revise/Relist/VerifyAdd API calls.
	// <br/><br/>
	// Currently, on the US site (and many other sites), the seller must offer either a <b>MoneyBack</b> or a <b>MoneyBackOrExchange</b> refund option. Consider using the <b>MoneyBackOrExchange</b> option when you have the depth of inventory to support replacement of the original item. Otherwise, use the <b>MoneyBack</b> option if you have limited inventory.
	//
	RefundOption string `xml:"RefundOption,omitempty"`

	//
	// Display string that applications can use to present <b>RefundOption</b> in
	// a more user-friendly format (such as in a drop-down list).
	// Not applicable as input to the AddItem family of calls. (Use <b>RefundOption</b> instead.)
	//
	Description string `xml:"Description,omitempty"`
}

type RefundFailureReasonType struct {

	//
	// This field is deprecated.
	//
	RefundFailureCode *RefundFailureCodeType `xml:"RefundFailureCode,omitempty"`
}

type RefundFundingSourceArrayType struct {

	//
	// This field is deprecated.
	//
	RefundFundingSource []*RefundFundingSourceType `xml:"RefundFundingSource,omitempty"`
}

type RefundFundingSourceType struct {

	//
	// This field is deprecated.
	//
	RefundingSourceType *RefundingSourceTypeCodeType `xml:"RefundingSourceType,omitempty"`

	//
	// This field is deprecated.
	//
	AccountNumber string `xml:"AccountNumber,omitempty"`

	//
	// This field is deprecated.
	//
	RefundAmount *AmountType `xml:"RefundAmount,omitempty"`

	//
	// This field is deprecated.
	//
	SellerExternalTransactionID string `xml:"SellerExternalTransactionID,omitempty"`

	//
	// This field is deprecated.
	//
	BuyerExternalTransactionID string `xml:"BuyerExternalTransactionID,omitempty"`
}

type RefundInformationType struct {

	//
	// This container consists of detailed information on an In-Store Pickup item refund. This container is only returned if the merchant is refunding (or providing a store credit) the buyer for an In-Store Pickup item. A separate <strong>Refund</strong> container will be returned for each <strong>ORDER.RETURNED</strong> notification that the merchant sends to eBay through the <strong>Inbound Notifications API</strong>.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants on the US site, and can only be applied to multi-quantity, fixed-price listings. Eligible Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature, creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	Refund []*RefundTransactionInfoType `xml:"Refund,omitempty"`
}

type RefundLineArrayType struct {

	//
	// This field is deprecated.
	//
	RefundLine []*RefundLineType `xml:"RefundLine,omitempty"`
}

type RefundLineType struct {
	Value *AmountType

	//
	// This field is deprecated.
	//
	Type *RefundLineTypeCodeType `xml:"type,attr,omitempty"`
}

type RefundTransactionArrayType struct {

	//
	// This field is deprecated.
	//
	RefundTransaction []*RefundTransactionType `xml:"RefundTransaction,omitempty"`
}

type RefundTransactionInfoType struct {

	//
	// This value indicates the success or failure of the attempt by the merchant to refund or provide store credit to the buyer for a returned In-Store Pickup item. This field is always returned with the <strong>Refund</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	RefundStatus *PaymentTransactionStatusCodeType `xml:"RefundStatus,omitempty"`

	//
	// This value indicates whether the merchant refunded or provided a store credit to the buyer for the returned In-Store Pickup item. Applicable values are 'REFUND' and 'STORE_CREDIT'. This value is picked up by eBay when the merchant passes in the <strong>REFUND_TYPE</strong> parameter through the payload of an <strong>ORDER.RETURNED</strong> notification sent to eBay.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	RefundType *RefundSourceTypeCodeType `xml:"RefundType,omitempty"`

	//
	// This field is the eBay user ID of the buyer who is receiving the refund or store credit from the merchant. This field is always returned with the <strong>Refund</strong> container.
	// <br/><br/>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the correct refund recipient is returned to the buyer or seller, but the refund recipient will be masked to all third parties.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	RefundTo *UserIdentityType `xml:"RefundTo,omitempty"`

	//
	// This date/time value is the timestamp for the refund transaction. This field is not returned if the refund was not successful (RefundStatus=FAILED).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	RefundTime time.Time `xml:"RefundTime,omitempty"`

	//
	// This dollar value is the amount of the refund to the buyer for this specific refund transaction. This field is not returned if the merchant issued the buyer a store credit instead of a refund (RefundType=STORE_CREDIT).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	RefundAmount *AmountType `xml:"RefundAmount,omitempty"`

	//
	// This value is a merchant-defined identifier used to track In-Store Pickup refunds. This value is picked up by eBay when the merchant passes in the <strong>REFUND_ID</strong> parameter through the payload of an <strong>ORDER.RETURNED</strong> notification sent to eBay. This field is not returned if the merchant does not set this value through <strong>ORDER.RETURNED</strong> notification.
	// <br/><br/>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the correct payment identifier is returned to the buyer or seller, but the payment identifier will be masked to all third parties.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	ReferenceID *TransactionReferenceType `xml:"ReferenceID,omitempty"`

	//
	// This dollar value is the total amount of the refund to the buyer for the In-Store Pickup order. Typically, this dollar value will be the same as the <strong>RefundAmount</strong> value, unless the merchant is issuing multiple refund transactions to the buyer, in which case, the <strong>FeeOrCreditAmount</strong> value will be the cumulative amount for multiple refund transactions. This field is not returned if the merchant issued the buyer a store credit instead of a refund (RefundType=STORE_CREDIT).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings. Merchants/developers can test In-Store Pickup functionality in the Sandbox environment, including listing items enabled with the In-Store Pickup feature,  creating store locations and adding inventory to these stores using the Inventory Management API, and informing eBay of In-Store Pickup status changes using the Inbound Notifications API.
	// </span>
	//
	FeeOrCreditAmount *AmountType `xml:"FeeOrCreditAmount,omitempty"`
}

type RefundTransactionType struct {

	//
	// This field is deprecated.
	//
	OrderID string `xml:"OrderID,omitempty"`

	//
	// This field is deprecated.
	//
	ItemID string `xml:"ItemID,omitempty"`

	//
	// This field is deprecated.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// This field is deprecated.
	//
	RefundLineArray *RefundLineArrayType `xml:"RefundLineArray,omitempty"`
}

type RefundType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	// Total amount refunded by the seller for this order line item.
	//
	RefundFromSeller *AmountType `xml:"RefundFromSeller,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	// Total amount refunded to the buyer for this order line item.
	//
	TotalRefundToBuyer *AmountType `xml:"TotalRefundToBuyer,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The date and time at which the refund was issued.
	//
	RefundTime time.Time `xml:"RefundTime,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The unique identifier of the refund.
	// <br/><br/>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the real refund identifier is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	RefundID string `xml:"RefundID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	RefundTransactionArray *RefundTransactionArrayType `xml:"RefundTransactionArray,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	// The total amount of the refund requested.
	//
	RefundAmount *AmountType `xml:"RefundAmount,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	RefundStatus *RefundStatusCodeType `xml:"RefundStatus,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	RefundFailureReason *RefundFailureReasonType `xml:"RefundFailureReason,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	RefundFundingSourceArray *RefundFundingSourceArrayType `xml:"RefundFundingSourceArray,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	ExternalReferenceID string `xml:"ExternalReferenceID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	RefundRequestedTime time.Time `xml:"RefundRequestedTime,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	RefundCompletionTime time.Time `xml:"RefundCompletionTime,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	EstimatedRefundCompletionTime time.Time `xml:"EstimatedRefundCompletionTime,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>RefundType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	SellerNoteToBuyer string `xml:"SellerNoteToBuyer,omitempty"`
}

type RegionDetailsType struct {

	//
	// This field is deprecated.
	//
	RegionID string `xml:"RegionID,omitempty"`

	//
	// This field is deprecated.
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field is deprecated.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// This field is deprecated.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type RegionOfOriginDetailsType struct {

	//
	//
	// String identifier for a continent, a geographic region, or a country.
	//
	RegionOfOrigin string `xml:"RegionOfOrigin,omitempty"`

	//
	//
	// Full name of the continent, geographic region, or country; useful for display
	// purposes.
	//
	Description string `xml:"Description,omitempty"`

	//
	//
	// Indicates the status of the Region of Origin value. Only Region of Origin values
	// in the 'Active' state can be used.
	//
	Status *StatusCodeType `xml:"Status,omitempty"`

	//
	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type RegularSubscriptionDefinitionType struct {
}

type ReminderCustomizationType struct {

	//
	// The length of time the reminder has existed in the user's My eBay account,
	// in days. Valid values are 1-60.
	//
	DurationInDays int32 `xml:"DurationInDays,omitempty"`

	//
	// Whether to include information about this type of reminder in the response.
	// When true, the container is returned with default input parameters.
	//
	Include bool `xml:"Include,omitempty"`
}

type RemindersType struct {

	//
	// The number of reminders requesting that the buyer send payment.
	//
	PaymentToSendCount int32 `xml:"PaymentToSendCount,omitempty"`

	//
	// The number of reminders that feedback has not yet been received by the buyer or seller.
	//
	FeedbackToReceiveCount int32 `xml:"FeedbackToReceiveCount,omitempty"`

	//
	// The number of reminders that feedback has not yet been sent by the buyer or seller.
	//
	FeedbackToSendCount int32 `xml:"FeedbackToSendCount,omitempty"`

	//
	// The number of reminders advising the buyer that the buyer has been
	// outbid.
	//
	OutbidCount int32 `xml:"OutbidCount,omitempty"`

	//
	// The number of reminders that the seller has not yet received a payment.
	//
	PaymentToReceiveCount int32 `xml:"PaymentToReceiveCount,omitempty"`

	//
	// The number of reminders requesting that the seller review second
	// chance offers.
	//
	SecondChanceOfferCount int32 `xml:"SecondChanceOfferCount,omitempty"`

	//
	// The number of reminders advising the seller that shipping is
	// needed.
	//
	ShippingNeededCount int32 `xml:"ShippingNeededCount,omitempty"`

	//
	// The number of reminders advising the seller that relisting is needed.
	//
	RelistingNeededCount int32 `xml:"RelistingNeededCount,omitempty"`

	// The number of new leads the seller has recieved.
	TotalNewLeadsCount int32 `xml:"TotalNewLeadsCount,omitempty"`

	//
	// The number of reminders advising the buyer to send documents for credit card processing.
	//
	DocsForCCProcessingToSendCount int32 `xml:"DocsForCCProcessingToSendCount,omitempty"`

	//
	// The number of reminders requesting the buyer to process request time extension submitted by the seller.
	//
	RTEToProcessCount int32 `xml:"RTEToProcessCount,omitempty"`

	//
	// The number of reminders requesting the Buyer to confirm item receipt to seller.
	//
	ItemReceiptToConfirmCount int32 `xml:"ItemReceiptToConfirmCount,omitempty"`

	//
	// The number of reminders to the buyer on refund on hold.
	//
	RefundOnHoldCount int32 `xml:"RefundOnHoldCount,omitempty"`

	//
	// The number of reminders to the buyer on refund cancelled.
	//
	RefundCancelledCount int32 `xml:"RefundCancelledCount,omitempty"`

	//
	// The number of reminders requesting the seller to provide shipping details
	//
	ShippingDetailsToBeProvidedCount int32 `xml:"ShippingDetailsToBeProvidedCount,omitempty"`

	//
	// The number of reminders to the seller on item receipt confirmation pending from buyer
	//
	ItemReceiptConfirmationToReceiveCount int32 `xml:"ItemReceiptConfirmationToReceiveCount,omitempty"`

	//
	// The number of reminders to the seller on refunds initiated
	//
	RefundInitiatedCount int32 `xml:"RefundInitiatedCount,omitempty"`

	//
	// The number of reminders to the seller on pending shipping time extension requests with the buyer
	//
	PendingRTERequestCount int32 `xml:"PendingRTERequestCount,omitempty"`

	//
	// The number of reminders to the seller on declined shipping time extension requests by the buyer
	//
	DeclinedRTERequestCount int32 `xml:"DeclinedRTERequestCount,omitempty"`
}

type RequiredSellerActionArrayType struct {

	//
	// This field contains a possible action that a seller can take to expedite the
	// release of a payment hold. There can be one or more <b>RequiredSellerAction</b>
	// fields in the <b>RequiredSellerActionArray</b> container.
	//
	RequiredSellerAction []*RequiredSellerActionCodeType `xml:"RequiredSellerAction,omitempty"`
}

type ResponseAttributeSetType struct {

	//
	// This field is deprecated.
	//
	ApproximatePages int32 `xml:"ApproximatePages,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeSetID int32 `xml:"AttributeSetID,omitempty"`

	//
	// This field is deprecated.
	//
	HasMore bool `xml:"HasMore,omitempty"`

	//
	// This field is deprecated.
	//
	ProductFamilies []*ProductFamilyType `xml:"ProductFamilies,omitempty"`

	//
	// This field is deprecated.
	//
	ProductFinderConstraints []*ProductFinderConstraintType `xml:"ProductFinderConstraints,omitempty"`

	//
	// This field is deprecated.
	//
	TooManyMatchesFound bool `xml:"TooManyMatchesFound,omitempty"`

	//
	// This field is deprecated.
	//
	TotalProducts int32 `xml:"TotalProducts,omitempty"`
}

type RestockingFeeValueDetailsType struct {
	RestockingFeeValueOption string `xml:"RestockingFeeValueOption,omitempty"`

	Description string `xml:"Description,omitempty"`
}

type ReturnPolicyDescriptionEnabledDefinitionType struct {
}

type ReturnPolicyDetailsType struct {

	//
	// This container consists of the supported refund/exchange/replacement item options that the seller may make available to the buyer in case the buyer wants to return the original item. Enumeration value(s) returned in <b>RefundOption</b> field(s) can be used in the <b>ReturnPolicy.RefundOption</b> field in an Add/Revise/Relist API call.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// To discover what refund options that a particular category supports, call <b>GetCategoryFeatures</b> and include <code>DomesticRefundMethodValues</code> and/or <code>InternationalRefundMethodValues</code> as <b>FeatureID</b> values to see the refund options available for domestic and international returns, respectively.
	// </span>
	//
	Refund []*RefundDetailsType `xml:"Refund,omitempty"`

	//
	// This container consists of the supported time periods within which the buyer can return the item, starting from the day they receive the item. Enumeration value(s) returned in <b>ReturnsWithinOption</b> field(s) can be used in the <b>ReturnPolicy.ReturnsWithinOption</b> field in an Add/Revise/Relist API call.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// To discover what return durations that a particular category supports, call <b>GetCategoryFeatures</b> and include <code>DomesticReturnsDurationValues</code> and/or <code>InternationalReturnsDurationValues</code> as <b>FeatureID</b> values to see the return durations available for domestic and international returns, respectively.
	// </span>
	//
	ReturnsWithin []*ReturnsWithinDetailsType `xml:"ReturnsWithin,omitempty"`

	//
	// This container consists of the enumeration values that can be passed into the <b>ReturnPolicy.ReturnsAcceptedOption</b> field when using an Add/Revise/Relist API call. This value will indicate whether or not the seller allows the buyer to return the item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// To discover the enumeration values that a particular category supports, call <b>GetCategoryFeatures</b> and include <code>DomesticReturnsAcceptedValues</code> and/or <code>InternationalReturnsAcceptedValues</code> as <b>FeatureID</b> values to see the <b>ReturnPolicy.ReturnsAcceptedOption</b> and <b>ReturnPolicy.InternationalReturnsAcceptedOption</b> values supported for domestic and international returns, respectively.
	// </span>
	//
	ReturnsAccepted []*ReturnsAcceptedDetailsType `xml:"ReturnsAccepted,omitempty"`

	//
	// This field is returned with a value of <code>true</code> if the site supports a text description of the seller's Return Policy in listings. If the site does support a text description of the seller's Return Policy, it is set through the <b>ReturnPolicy.Description</b> field in an Add/Revise/Relist API call. Currently, the only eBay sites that support Return Policy descriptions are Germany, Austria, France, Italy, and Spain.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// To discover if a Return Policy desciption is supported by a particular category, call <b>GetCategoryFeatures</b> and include <code>ReturnPolicyDescriptionEnabled</code> as a <b>FeatureID</b> value to see if the category supports the use of a Return Policy description.
	// </span>
	//
	Description bool `xml:"Description,omitempty"`

	//
	// This field is no longer applicable, as sellers are no longer allowed to offer any type of warranty through a listings's return policy.
	//
	//
	WarrantyOffered []*WarrantyOfferedDetailsType `xml:"WarrantyOffered,omitempty"`

	//
	// This field is no longer applicable, as sellers are no longer allowed to offer any type of warranty through a listings's return policy.
	//
	//
	WarrantyType []*WarrantyTypeDetailsType `xml:"WarrantyType,omitempty"`

	//
	// This field is no longer applicable, as sellers are no longer allowed to offer any type of warranty through a listings's return policy.
	//
	//
	WarrantyDuration []*WarrantyDurationDetailsType `xml:"WarrantyDuration,omitempty"`

	//
	// This field is no longer applicable, as sellers are no longer allowed to specify a European Article Number (EAN) through a listings's return policy.
	//
	//
	EAN bool `xml:"EAN,omitempty"`

	//
	// This container consists of the enumeration values that can be passed into the <b>ReturnPolicy.ShippingCostPaidByOption</b> or <b>ReturnPolicy.InternationalShippingCostPaidByOption</b> field when using an Add/Revise/Relist API call. This value will indicate whether the buyer or seller is responsible for return shipping cost. The enumeration value(s) returned in <b>ShippingCostPaidByOption</b> field(s) can be used in the <b>ReturnPolicy.ShippingCostPaidByOption</b> field in an
	//
	ShippingCostPaidBy []*ShippingCostPaidByDetailsType `xml:"ShippingCostPaidBy,omitempty"`

	//
	// This type is deprecated, as sellers are no longer allowed to set a restocking fee through a listings's return policy.
	//
	//
	RestockingFeeValue []*RestockingFeeValueDetailsType `xml:"RestockingFeeValue,omitempty"`

	//
	// Returns the latest version number for the Return Policy Details metadata set. The version can be used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// This timestamp in GMT indicate when the Return Policy Details metadata were last updated. This timestamp can be used to determine if and when to refresh cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ReturnPolicyEnabledDefinitionType struct {
}

type ReturnPolicyType struct {

	//
	// This field indicates how the seller compensates buyers for <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Post-Order-Returns.html#return-reasons" target="_blank">returns</a>. You must set this value to <code>MoneyBack</code> for all eBay marketplaces except for the US marketplace.
	// <br><br>
	// On <code>EBAY_US</code>: You can set this value to either <code>MoneyBack</code> or <code>MoneyBackOrReplacement</code>. If a seller has the depth of inventory to support an exchange for an identical item, you can set <code>MoneyBackOrReplacement</code>. Otherwise, eBay recommends you set this value to its default value, <code>MoneyBack</code>.
	// <b>For AddItem, VerifyAddItem, and RelistItem (and corresponding FixedPrice calls):</b> If the seller accepts returns (ReturnsAcceptedOption=ReturnsAccepted) but you do not supply this field, some eBay sites may set a default value (like MoneyBack) and sellers are obligated to honor the policies set settings on their View Item pages.
	// <br><br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	//
	RefundOption string `xml:"RefundOption,omitempty"`

	//
	// Display string that buyer applications can use to present <b>RefundOption</b> in a more user-friendly format to buyers. For example, in <b>GetItem</b> and related calls, this value is usually localized and can contain spaces. If necessary, you can predict the choice of values based on the <b>Refund.Description</b> options returned by <b>GeteBayDetails</b>.
	// <br><br>
	// This field is applicable to only the US marketplace and is not applicable as input to the <b>Add</b>/<b>Revise</b>/<b>Relist</b> family of calls. (Use <b>RefundOption</b> instead.)
	//
	Refund string `xml:"Refund,omitempty"`

	//
	// Specifies the amount of time the buyer has to return an item. The return period begins when the item is marked "delivered" at the buyer's specified ship-to location.  Most marketplaces and categories support 30-day and 60-day return periods. eBay sites often set 30-days as the default value for this field and sellers are obligated to honor the values that are set for a listing. This value is required if <b>ReturnsAcceptedOption=ReturnsAccepted</b>.
	// <br><br>
	// <b>Applicable values:</b> Retrieve the values supported by a marketplace by calling <b>GeteBayDetails</b> with <b>DetailName</b> set to <code>ReturnPolicyDetails</code>, then review <b>ReturnPolicyDetails.ReturnsWithin.ReturnsWithinOption</b> in the response.
	// <br/><br/>
	// <b>For ReviseItem only:</b>  You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> In version 1061, the options for this field were reduced. An error will be thrown if you attempt to list an item with this field set to a value that is not accepted by the target marketplace. See the <a href="/devzone/xml/docs/releasenotes.html#1061">Release Notes</a> for details.</span>
	// <br>
	//
	ReturnsWithinOption string `xml:"ReturnsWithinOption,omitempty"`

	//
	// Display string that buyer applications can use to present <b>ReturnsWithinOption</b> in a more user-friendly format to buyers. For example, in <b>GetItem</b> and related calls, this value is usually localized and can contain spaces.
	// <br/><br/>
	// If necessary, you can predict the choice of values based on the <b>ReturnsWithin.Description</b> options returned by <b>GeteBayDetails</b>.
	// <br><br>
	// Not applicable as input to the <b>AddItem</b> family of calls. (Use <b>ReturnsWithinOption</b> instead.)
	//
	ReturnsWithin string `xml:"ReturnsWithin,omitempty"`

	//
	// This required field indicates whether or not the seller accepts returns.
	// <br><br>
	// Applicable values are <code>ReturnsAccepted</code> or <code>ReturnsNotAccepted</code>. When set to <code>ReturnsAccepted</code>, this option indicates the seller allows items to be returned. Specify <b>ReturnsNotAccepted</b> for an item if the seller does not accept returns.
	// <br><br>
	// On the eBay DE, IE, and UK, registered business sellers must accept returns for fixed-price items (including auction items with Buy It Now and any other fixed price formats) when the category requires a return policy. On some European sites, such as eBay Germany (DE), registered business sellers are required to accept returns. Use the Trading call <b>GetUser</b> to determine the status of an eBay business seller in DE, IE, and UK. Review the <b>User.SellerInfo.SellerBusinessType</b> field in the response.
	// <br> <br>
	// <span class="tablenote"><b>Note:</b> In order for Top-Rated sellers to receive a Top-Rated Plus seal for their listings, returns must be accepted for their items (<b>ReturnsAcceptedOption</b> = <code>ReturnsAccepted</code>) and handling time should be set to zero-day (same-day shipping) or one-day shipping. Set the handling time (in days) using the <b>Item.DispatchTimeMax</b> field.</span>
	// <br>
	// Top-Rated listings qualify for the greatest average boost in Best Match and for the 20 percent Final Value Fee discount. For more information on eBay's Top-Rated seller program, see the <a href="http://pages.ebay.com/help/sell/top-rated.html">Becoming a Top Rated Seller and qualifying for Top Rated Plus</a> page.</p>
	// <br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	//
	ReturnsAcceptedOption string `xml:"ReturnsAcceptedOption,omitempty"`

	//
	// Display string that buyer applications can use to present <b>ReturnsAcceptedOption</b> in a more user-friendly format to buyers. For example, in <b>GetItem</b> and related calls, this value is usually localized and can contain spaces.
	// <br/><br/>
	// If necessary, you can predict the choice of values based on the <b>ReturnsAccepted.Description</b> options returned by <b>GeteBayDetails</b>.
	// <br><br>
	// Not applicable as input to the <b>AddItem</b> family of calls. (Use <b>ReturnsAcceptedOption</b> instead.)
	//
	ReturnsAccepted string `xml:"ReturnsAccepted,omitempty"`

	//
	// This field contains the seller's detailed explanation for their return policy and is displayed in the Return Policy section of the View Item page. This field is valid in only the following marketplaces (the field is otherwise ignored):
	// <ul>
	// <li>Germany (DE)</li>
	// <li>Austria (AT)</li>
	// <li>France (FR)</li>
	// <li>Italy (IT)</li>
	// <li>Spain (ES)</li>
	// </ul>
	// Where valid, sellers can use this field to add details about their return policies. eBay uses this text string as-is in the additional details section of the View Item page. Avoid HTML and avoid character entity references (such as &amp;pound; or &amp;#163;). If you include special characters in the return policy description, use the literal UTF-8 or ISO-8559-1 character (e.g. &#163;).
	//
	// <br><br>
	// <b>For AddItem, VerifyAddItem, and RelistItem:</b> If the seller accepts returns (<b>ReturnsAcceptedOption</b> = <code>ReturnsAccepted</code>) but does not specify this field when listing the item, <b>GetItem</b> returns this as an empty node.
	// <br><br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	// <br>
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer supports warranty policies for returns.
	//
	WarrantyOfferedOption string `xml:"WarrantyOfferedOption,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer supports warranty policies for returns.
	//
	WarrantyOffered string `xml:"WarrantyOffered,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer supports warranty policies for returns.
	//
	WarrantyTypeOption string `xml:"WarrantyTypeOption,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer supports warranty policies for returns.
	//
	WarrantyType string `xml:"WarrantyType,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer supports warranty policies for returns.
	//
	WarrantyDurationOption string `xml:"WarrantyDurationOption,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer supports warranty policies for returns.
	//
	WarrantyDuration string `xml:"WarrantyDuration,omitempty"`

	//
	// This option specifies either the buyer or the seller as the party who pays for return shipping charges. Accepted values are <code>Buyer</code> or <code>Seller</code>. eBay sites often set <code>Seller</code> as the default value for this field, and sellers are obligated to honor the values that are set for a listing. This value is required if <b>ReturnsAcceptedOption=ReturnsAccepted</b>.
	// <br><br>
	// Depending on the seller's return policy and the specifics of a return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for SNAD-related issues.
	// <br><br>
	// Use <b>GeteBayDetails</b> (with <b>DetailName=ReturnPolicyDetails</b>) and review the returned <b>ReturnPolicyDetails.ShippingCostPaidBy</b> values to see the values supported by a marketplace.
	// <br><br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	//
	ShippingCostPaidByOption string `xml:"ShippingCostPaidByOption,omitempty"`

	//
	// This is a display string that buyer applications can use to present <b>ShippingCostPaidByOption</b> in a more user-friendly format to buyers. For example, in <b>GetItem</b> and related calls, this value is usually localized and can contain spaces.
	// <br/><br/>
	// If necessary, you can predict the choice of values based on the <b>ShippingCostPaidBy.Description</b> options returned by <b>GeteBayDetails</b>.
	// <br><br>
	// Not applicable as input to the <b>AddItem</b> family of calls. (Use <b>ShippingCostPaidByOption</b> instead.)
	//
	ShippingCostPaidBy string `xml:"ShippingCostPaidBy,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer allows sellers to charge a restocking fee when returning items.
	//
	RestockingFeeValue string `xml:"RestockingFeeValue,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer allows sellers to charge a restocking fee when returning items.
	//
	RestockingFeeValueOption string `xml:"RestockingFeeValueOption,omitempty"`

	//
	// This field is deprecated as of release 1061 and any values supplied in this field are ignored. eBay no longer supports extended holiday returns.
	//
	ExtendedHolidayReturns bool `xml:"ExtendedHolidayReturns,omitempty"`

	//
	// This field indicates how the seller compensates buyers for <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Post-Order-Returns.html#return-reasons" target="_blank">returns</a>. You must set this value to <code>MoneyBack</code> for all eBay marketplaces except for the US marketplace.
	// <br><br>
	// On <code>EBAY_US</code>: You can set this value to either <code>MoneyBack</code> or <code>MoneyBackOrReplacement</code>. If a seller has the depth of inventory to support an exchange for an identical item, you can set <code>MoneyBackOrReplacement</code>. Otherwise, eBay recommends you set this value to its default value, <code>MoneyBack</code>.
	// <b>For AddItem, VerifyAddItem, and RelistItem (and corresponding FixedPrice calls):</b> If the seller accepts returns (ReturnsAcceptedOption=ReturnsAccepted) but you do not supply this field, some eBay sites may set a default value (like MoneyBack) and sellers are obligated to honor the policies set settings on their View Item pages.
	// <br><br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	//
	InternationalRefundOption string `xml:"InternationalRefundOption,omitempty"`

	//
	// This optional field indicates whether or not the seller accepts international returns (returns that need to be shipped via an international shipping service).
	// <br><br>
	// Applicable values are <code>ReturnsAccepted</code> or <code>ReturnsNotAccepted</code>. When set to <code>ReturnsAccepted</code>, this option indicates the seller allows international returns. If the seller does not accept international returns, they can specify <b>ReturnsNotAccepted</b>.
	// <br><br>
	// On the eBay DE, IE, and UK, registered business sellers must accept returns for fixed-price items (including auction items with Buy It Now and any other fixed price formats) when the category requires a return policy. On some European sites, such as eBay Germany (DE), registered business sellers are required to accept returns. Use the Trading call <b>GetUser</b> to determine the status of an eBay business seller in DE, IE, and UK. Review the <b>User.SellerInfo.SellerBusinessType</b> field in the response.
	// <br><br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	//
	InternationalReturnsAcceptedOption string `xml:"InternationalReturnsAcceptedOption,omitempty"`

	//
	// A buyer can return an item that was shipped via an international shipping service to the seller within the period of time specified by this field. The time period begins the day the buyer receives the item.
	// <br><br>
	// <b>Applicable values:</b> To get the applicable <b>ReturnsWithinOption</b> values for your site, call <b>GeteBayDetails</b> with <b>DetailName</b> set to <code>ReturnPolicyDetails</code>.
	// <br><br>
	// <b>For AddItem, VerifyAddItem, and RelistItem:</b> If the seller accepts international returns (InternationalReturnsAcceptedOption is set to ReturnsAccepted) but does not specify this field for a listing, eBay sets a default value (often Days_30) and the seller is obligated to honor this setting.
	// <br><br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	// <br><br>
	// <span class="tablenote"><b>Note:</b> The <b>GetCategoryFeatures</b> call now returnins category-level metadata for both domestic and international return policies, and developers should make plans to use that call for this metadata.</span>
	//
	InternationalReturnsWithinOption string `xml:"InternationalReturnsWithinOption,omitempty"`

	//
	// This option specifies either the buyer or the seller as the party who pays for international return shipping charges. Accepted values are <code>Buyer</code> or <code>Seller</code>. eBay sites often set <code>Seller</code> as the default value for this field, and sellers are obligated to honor the values that are set for a listing. This value is required if <b>ReturnsAcceptedOption=ReturnsAccepted</b>.
	// <br><br>
	// Depending on the seller's return policy and the specifics of a return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for SNAD-related issues.
	// <br><br>
	// <b>For AddItem, VerifyAddItem, and RelistItem:</b> If the seller accepts returns (<b>InternationalReturnsAcceptedOption</b> = <code>ReturnsAccepted</code>) but does not set this field when listing an item, some eBay sites may set a default value (like Buyer). Because sellers are obligated to honor the policies specified on their View Item pages, be sure this is set to the value desired by the seller.
	// <br><br>
	// <b>For ReviseItem only:</b> You cannot change the value of this field if the listing has bids or sales, or if the listing ends within 12 hours. For more details, see the <b>ReturnPolicy</b> description.
	//
	InternationalShippingCostPaidByOption string `xml:"InternationalShippingCostPaidByOption,omitempty"`
}

type ReturnsAcceptedDetailsType struct {

	//
	// Whether the seller allows the buyer to return the item.
	// This value can be passed in the AddItem family of calls.
	//
	ReturnsAcceptedOption string `xml:"ReturnsAcceptedOption,omitempty"`

	//
	// Display string that applications can use to present ReturnsAcceptedOption in
	// a more user-friendly format (such as in a drop-down list).
	// Not applicable as input to the AddItem family of calls. (Use ReturnsAcceptedOption instead.)
	//
	Description string `xml:"Description,omitempty"`
}

type ReturnsWithinDetailsType struct {

	//
	// Value indicates the number of days that a buyer has to return an item from the day they receive the item. This value can be passed in the Add/Revise/Relist family of API calls. Supported values can vary by eBay site.
	//
	ReturnsWithinOption string `xml:"ReturnsWithinOption,omitempty"`

	//
	// Display string that applications can use to present ReturnsWithinOption in
	// a more user-friendly format (such as in a drop-down list).
	// Not applicable as input to the AddItem family of calls. (Use ReturnsWithinOption instead.)
	//
	Description string `xml:"Description,omitempty"`
}

type ReviewDetailsType struct {

	//
	// This field is deprecated.
	//
	AverageRating float32 `xml:"AverageRating,omitempty"`

	//
	// This field is deprecated.
	//
	Review []*ReviewType `xml:"Review,omitempty"`
}

type ReviewType struct {

	//
	// This field is deprecated.
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// This field is deprecated.
	//
	Title string `xml:"Title,omitempty"`

	//
	// This field is deprecated.
	//
	Rating int32 `xml:"Rating,omitempty"`

	//
	// This field is deprecated.
	//
	Text string `xml:"Text,omitempty"`

	//
	// This field is deprecated.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// This field is deprecated.
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`
}

type RevisePriceAllowedDefinitionType struct {
}

type ReviseQuantityAllowedDefinitionType struct {
}

type ReviseStatusType struct {

	//
	// This field is returned as <code>true</code> if the original listing has been revised. This field is always returned with the <b>ReviseStatus</b> container.
	//
	ItemRevised bool `xml:"ItemRevised,omitempty"`

	//
	// This field is returned as <code>true</code> if a Buy It Now price has been added to the auction listing. This field is only returned if the original auction listing did not have a Buy It Now price, but a revision to that original listing included adding a Buy It Now price.
	//
	BuyItNowAdded bool `xml:"BuyItNowAdded,omitempty"`

	//
	// This field is returned as <code>true</code> if the Buy It Now price on the original auction listing was lowered as part of a revision to the original auction listing. This field is only returned if the Buy It Now price on the original auction listing was lowered as part of a revision to the original auction listing.
	//
	BuyItNowLowered bool `xml:"BuyItNowLowered,omitempty"`

	//
	// This field is returned as <code>true</code> if the Reserve price on the original auction listing was lowered as part of a revision to the original auction listing. This field is only returned if the Reserve price on the original auction listing was lowered as part of a revision to the original auction listing.
	//
	ReserveLowered bool `xml:"ReserveLowered,omitempty"`

	//
	// This field is returned as <code>true</code> if the Reserve price on the original auction listing was removed as part of a revision to the original auction listing. This field is only returned if the Reserve price on the original auction listing was removed as part of a revision to the original auction listing.
	//
	ReserveRemoved bool `xml:"ReserveRemoved,omitempty"`
}

type SIFFTASRecommendationsType struct {

	//
	// This field is deprecated.
	//
	AttributeSetArray *AttributeSetArrayType `xml:"AttributeSetArray,omitempty"`
}

type SKUArrayType struct {

	//
	// A SKU (stock keeping unit) is an identifier defined by a seller.
	// Some sellers use SKUs to track complex flows of products
	// and information on the client side.
	// A seller can specify a SKU when listing an item with AddItem
	// and related calls. eBay preserves the SKU on the item, enabling you
	// to obtain it before and after an order line item is created.
	// (SKU is recommended as an alternative to ApplicationData.)<br>
	// <br>
	// A SKU is not required to be unique. A seller can specify a
	// particular SKU value on one item or on multiple items.
	// Different sellers can use the same SKUs.<br>
	// <br>
	// If the SKU is unique across a seller's active listings, and if
	// the seller listed the item by using AddFixedPriceItem
	// or RelistFixedPriceItem, the seller can also set
	// Item.InventoryTrackingMethod to SKU. This allows the seller to use
	// SKU instead of ItemID as a unique identifier in subsequent calls,
	// such as GetItem and ReviseInventoryStatus.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// AddFixedPriceItem and RelistFixedPriceItem are defined in
	// the Merchant Data API (part of Large Merchant Services).
	// </span>
	//
	SKU []*SKUType `xml:"SKU,omitempty"`
}

type SMSSubscriptionType struct {

	//
	// The wireless phone number to be used for receiving SMS messages.
	// Max length of phone number varies by country.
	//
	SMSPhone string `xml:"SMSPhone,omitempty"`

	//
	// Registered/Unregistered/Pending.
	//
	UserStatus *SMSSubscriptionUserStatusCodeType `xml:"UserStatus,omitempty"`

	//
	// The wireless carrier ID.
	//
	CarrierID *WirelessCarrierIDCodeType `xml:"CarrierID,omitempty"`

	//
	// Reason for SMS subscription error (postback from thired-party integrator).
	//
	ErrorCode *SMSSubscriptionErrorCodeCodeType `xml:"ErrorCode,omitempty"`

	//
	// ID of item to unsubscribe from SMS notification.
	//
	ItemToUnsubscribe *ItemIDType `xml:"ItemToUnsubscribe,omitempty"`
}

type SafePaymentRequiredDefinitionType struct {
}

type SalesTaxType struct {

	//
	// This float value is the sales tax percentage rate applicable to the corresponding tax jurisdiction (US state or Canadian province). Sellers are responsible for providing accurate sales tax rates for each jurisdiction. This sales tax rate comes into play when a buyer from that tax jurisdiction makes a purchase from the seller. The value passed in is stored with a precision of 3 digits after the decimal point (##.###).
	// <br><br>
	// This field is only returned in order management calls if sales tax applies to the order line item, and is only in <b>GetItem</b> (and other 'Get' calls) if sales tax is applicable to the listing or order line item, and the seller is the person making the call.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. So, if a sales tax rate is established for a state that is subject to 'eBay Collect and Remit', the sales tax rate in this field is ignored by eBay during checkout process. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	// </span>
	//
	SalesTaxPercent float32 `xml:"SalesTaxPercent,omitempty"`

	//
	// This is the unique, two-digit identifier of the tax jurisdiction (such as 'CA' for California). To retrieve all two-digit identifiers for all states/territories/provinces for a site, a seller can either use a <b>GetTaxTable</b> call with <b>DetailLevel</b> set to <code>ReturnAll</code>, or they can use the <b>GeteBayDetails</b> call with <b>DetailLevel</b> name set to <code>TaxJurisdiction</code>. Please note that both <b>GetTaxTable</b> and <b>GeteBayDetails</b> calls use a <b>JurisdictionID</b> field to express these tax jurisdiction identifiers instead of <b>SalesTaxState</b>, but the values used in these fields are the same.
	// <br/><br/>
	// The <b>SalesTaxState</b> field is always required in an Add/Revise/Relist/Verify call, and always returned with each <b>SalesTax</b> container to identify the tax jurisdiction.
	//
	SalesTaxState string `xml:"SalesTaxState,omitempty"`

	//
	// This field is included in an Add/Revise/Relist/Verify call and set to <code>true</code> if the seller wants sales tax for the jurisdiction to apply to the cumulative amount of item cost and shipping charges. This value defaults to <code>false</code> if not specified.
	// <br><br>
	// This field is always returned with the <b>SalesTax</b> container (whether <code>true</code> or <code>false</code>).
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. So, if a <code>true</code> value is set for this field for a state that is subject to 'eBay Collect and Remit', this setting is ignored by eBay during checkout process. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	// </span>
	//
	ShippingIncludedInTax bool `xml:"ShippingIncludedInTax,omitempty"`

	//
	// The amount of sales tax calculated for an order based on the item price and the sales tax rate for the buyer's tax jurisdiction.
	// <br><br>
	// GetItemTransactions can return incorrect sales tax if the name of a state is not
	// abbreviated (e.g. if the value is "Illinois" rather than "IL") in
	// <b>TransactionArray.Transaction.Buyer.BuyerInfo.ShippingAddress.StateOrProvince</b>. If
	// the name of a state is not abbreviated, sales tax should be obtained by using
	// the <b>OrderLineItemID</b> to call <b>GetOrderTransactions</b>.
	//
	SalesTaxAmount *AmountType `xml:"SalesTaxAmount,omitempty"`
}

type ScheduleType struct {

	//
	// This field is deprecated.
	//
	ScheduleID int32 `xml:"ScheduleID,omitempty"`

	//
	// This field is deprecated.
	//
	ScheduleTime time.Time `xml:"ScheduleTime,omitempty"`
}

type SchedulingInfoType struct {

	//
	// Maximum number of minutes that a listing may be scheduled in advance of its going live.
	//
	MaxScheduledMinutes int32 `xml:"MaxScheduledMinutes,omitempty"`

	//
	// Minimum number of minutes that a listing may be scheduled in advance of its going live.
	//
	MinScheduledMinutes int32 `xml:"MinScheduledMinutes,omitempty"`

	//
	// Maximum number of Items that a user may schedule.
	//
	MaxScheduledItems int32 `xml:"MaxScheduledItems,omitempty"`
}

type SearchAttributesType struct {

	//
	// This field is deprecated.
	//
	AttributeID int32 `xml:"AttributeID,omitempty"`

	//
	// This field is deprecated.
	//
	DateSpecifier *DateSpecifierCodeType `xml:"DateSpecifier,omitempty"`

	//
	// This field is deprecated.
	//
	RangeSpecifier *RangeCodeType `xml:"RangeSpecifier,omitempty"`

	//
	// This field is deprecated.
	//
	ValueList []*ValType `xml:"ValueList,omitempty"`
}

type SearchDetailsType struct {

	//
	// This field is deprecated.
	//
	BuyItNowEnabled bool `xml:"BuyItNowEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	Picture bool `xml:"Picture,omitempty"`

	//
	// This field is deprecated.
	//
	RecentListing bool `xml:"RecentListing,omitempty"`
}

type SearchStandingDashboardType struct {

	//
	// Your earned search standing status. To qualify for a Standard or Raised
	// search standing, make sure your ratings meet or exceed the required minimum
	// levels in buyer satisfaction (see <b>BuyerSatisfaction.Status</b> in this call) and
	// detailed seller ratings (DSRs). See <b>GetFeedback</b> for details.
	//
	Status *SearchStandingStatusCodeType `xml:"Status,omitempty"`
}

type SellerAccountDashboardType struct {

	//
	// This field indicates the status of your seller's account. Specifically, you'll find out if your
	// account is current and active, or if your account has a past due balance or is on
	// hold. For more details about your account, you can go to your Seller Account page
	// on the eBay site (login to My eBay), or you can call <b>GetAccount</b>.
	//
	Status *SellerAccountStatusCodeType `xml:"Status,omitempty"`

	//
	// The <b>SellerAccount.Alert</b> container is only returned if eBay has
	// posted one or more informational or warning messages to the seller's account.
	//
	Alert []*SellerDashboardAlertType `xml:"Alert,omitempty"`
}

type SellerContactDetailsEnabledDefinitionType struct {
}

type SellerDashboardAlertType struct {

	//
	// The severity level helps you understand whether the alert is identifying a
	// problem (a warning or strong warning) or if it is informational in nature.
	// This field is present if an alert has been issued to your account.
	//
	Severity *SellerDashboardAlertSeverityCodeType `xml:"Severity,omitempty"`

	//
	// The warning or informational alert text. When you parse this text, note that
	// some alerts may use plain text while others can include HTML. Returned only
	// if the seller has been issued an alert.
	//
	Text string `xml:"Text,omitempty"`
}

type SellerDiscountsType struct {

	//
	// The original purchase price of the order line item (before any seller discounts are
	// applied).
	//
	OriginalItemPrice *AmountType `xml:"OriginalItemPrice,omitempty"`

	//
	// The original shipping cost for the order line item (before any seller
	// discounts are applied).
	//
	OriginalItemShippingCost *AmountType `xml:"OriginalItemShippingCost,omitempty"`

	//
	// The original shipping service offered by the seller to ship an item to a buyer.
	//
	OriginalShippingService string `xml:"OriginalShippingService,omitempty"`

	//
	// A container consisting of name and ID of the seller's discount campaign, as well as the discount amount that is being applied to the order line item.
	//
	SellerDiscount []*SellerDiscountType `xml:"SellerDiscount,omitempty"`
}

type SellerDiscountType struct {

	//
	// Unique identifier for a seller discount campaign. This ID is automatically
	// created when the seller creates the discount campaign. This field is always returned
	// with the <b>SellerDiscount</b> container.
	//
	CampaignID int64 `xml:"CampaignID,omitempty"`

	//
	// The name of the seller discount campaign. This field will only be
	// returned with the <b>SellerDiscount</b> container if defined
	// for the seller discount campaign.
	//
	CampaignDisplayName string `xml:"CampaignDisplayName,omitempty"`

	//
	// The dollar amount of the order line item discount. The original purchase price (denoted
	// in <b>OriginalItemPrice</b>) will be reduced by this value. The amount of the
	// item discount will depend on the rules defined in the the seller discount
	// campaign.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Prior to Version 895, this field worked a little differently. Instead of this field showing the amount of the discount, it was actually showing the final item price after the discount was applied. So, if an item price is 10.0 dollars and the discount is 2.0 dollars, someone using Version 895 (and going forward) will see a value of '2.0' (amount of the discount) in this field, but anyone using Version 893 or lower will see a value of '8.0' (item price after discount) in this field.
	// </span>
	//
	ItemDiscountAmount *AmountType `xml:"ItemDiscountAmount,omitempty"`

	//
	// The dollar amount of the shipping discount applied to the order line item.
	//
	ShippingDiscountAmount *AmountType `xml:"ShippingDiscountAmount,omitempty"`
}

type SellerExcludeShipToLocationPreferencesType struct {

	//
	// One <b>ExcludeShipToLocation</b> field is returned for each geographical region or country excluded
	// as a possible shipping location in the seller's My eBay Shipping Preferences.
	// Sellers can also exclude Alaska/Hawaii and Army Post Office/Fleet Post Office as
	// possible shipping locations. For excluded countries, "http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm">ISO 3166</a>
	// country codes are returned.
	// <br><br>
	// Domestically, the seller can specify Alaska/Hawaii, US Protectorates (including
	// American Samoa, Guam, Mariana Island, Marshall Islands, Micronesia, Palau,
	// Puerto Rico, and U.S. Virgin Islands) as places he/she will not ship to.
	// Internationally, the sellers can exclude entire regions (including Africa, Asia,
	// Central America and Caribbean, Europe, Middle East, North America, Oceania,
	// Southeast Asia, and South America) or specific countries within those regions.
	// <br><br>
	// If a buyer's primary ship-to location is a location that you have listed as
	// an excluded ship-to location (or if the buyer does not have a primary ship-to
	// location), they will receive an error message if they attempt to buy or place
	// a bid on your item.
	// <br><br>
	// To see the valid exclude ship-to locations for a specified site, call
	// <b>GeteBayDetails</b> with a <b>DetailName</b> field set to <b>ExcludeShippingLocationDetails</b>.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// To enable your default Exclude Ship-To List, you must enable Exclude
	// Shipping Locations and Buyer Requirements in your My eBay Site Preferences.
	// For details, see the KnowledgeBase Article <a href=
	// "https://ebaydts.com/eBayKBDetails?KBid=1495"
	// >HowTo: ExcludeShipToLocation</a>.
	// </span>
	//
	ExcludeShipToLocation []string `xml:"ExcludeShipToLocation,omitempty"`
}

type SellerFavoriteItemPreferencesType struct {

	//
	// The keywords in the item title for the automatic item search criteria.
	//
	SearchKeywords string `xml:"SearchKeywords,omitempty"`

	//
	// (For eBay Store owners only) The store custom category for the  automatic item search criteria.
	//
	StoreCategoryID int64 `xml:"StoreCategoryID,omitempty"`

	//
	// The listing format (fixed price, auction, etc) for the automatic item search criteria.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// The sort order chosen from the standard ebay sorts for the automatic search criteria.
	//
	SearchSortOrder *StoreItemListSortOrderCodeType `xml:"SearchSortOrder,omitempty"`

	//
	// Specifies the lower limit of price range for the automatic search criteria.
	//
	MinPrice *AmountType `xml:"MinPrice,omitempty"`

	//
	// Specifies the upper limit of price range for the automatic search criteria.
	//
	MaxPrice *AmountType `xml:"MaxPrice,omitempty"`

	//
	// Specifies the list of favorite items.
	//
	FavoriteItemID []*ItemIDType `xml:"FavoriteItemID,omitempty"`
}

type SellerFeeDiscountDashboardType struct {

	//
	// PowerSeller discount as a percentage. For example, a 5% discount is returned
	// as 0.05.
	//
	Percent float32 `xml:"Percent,omitempty"`
}

type SellerPaymentPreferencesType struct {

	//
	// Sellers include this field and set it to <code>true</code> if they want buyers to mail payment
	// to the payment address specified in the
	// <b>SellerPaymentPreferences.SellerPaymentAddress</b> field. A payment
	// address only comes into play if the item's category allows offline payments, and the
	// seller has allowed the buyer to mail a payment. This payment address will only be
	// displayed to winning bidders and buyers.
	//
	AlwaysUseThisPaymentAddress bool `xml:"AlwaysUseThisPaymentAddress,omitempty"`

	//
	// If set, this field determines whether a Pay Now button is displayed for all of the
	// user's listings. The user has the option of using a PayPal only version of the Pay
	// Now button or a Pay Now button for all payment methods.
	//
	DisplayPayNowButton *DisplayPayNowButtonCodeType `xml:"DisplayPayNowButton,omitempty"`

	//
	// Specifies whether a seller wants to let buyers know that PayPal payments
	// are preferred.
	//
	PayPalPreferred bool `xml:"PayPalPreferred,omitempty"`

	//
	// Specifies the default email address the seller uses for receiving PayPal payments.
	//
	DefaultPayPalEmailAddress string `xml:"DefaultPayPalEmailAddress,omitempty"`

	//
	// Indicates whether PayPal is always accepted for the seller's listings.
	//
	PayPalAlwaysOn bool `xml:"PayPalAlwaysOn,omitempty"`

	//
	// Specifies the address the seller uses to receive mailed payments from buyers.
	//
	SellerPaymentAddress *AddressType `xml:"SellerPaymentAddress,omitempty"`

	//
	// Specifies the type of United Parcel Service rates to use.
	//
	UPSRateOption *UPSRateOptionCodeType `xml:"UPSRateOption,omitempty"`

	//
	// Specifies the type of FedEx rates to use.
	//
	FedExRateOption *FedExRateOptionCodeType `xml:"FedExRateOption,omitempty"`

	//
	// Specifies the type of USPS rates to use.
	//
	USPSRateOption *USPSRateOptionCodeType `xml:"USPSRateOption,omitempty"`
}

type SellerPaymentProfileType struct {

	//
	// The unique identifier of a Business Policies payment profile. A <b>PaymentProfileID</b> and/or a <b>PaymentProfileName</b> value is used in the Add/Revise/Relist/Verify call to reference and use the payment policy values of a Business Policies payment profile. If both fields are provided and their values don't match, the <b>PaymentProfileID</b> takes precedence.
	// <br/><br/>
	// Payment profile IDs can be retrieved with the <b>getPaymentPolicies</b> call of the <b>Account API</b> or with the <b>getSellerProfiles</b> call of the <b>Business Policies Management API</b>. Business Policy IDs can also be retrieved through the Business Policies section of My eBay.
	// <br/><br/>
	// In the 'Get' calls, the <b>PaymentProfileID</b> value will always be returned if Business Policies are set for the listing, and the person making the API call is the seller of the listing. The <b>PaymentProfileName</b> value will be returned if a name is assigned to the payment profile.
	//
	PaymentProfileID int64 `xml:"PaymentProfileID,omitempty"`

	//
	// The name of a Business Policies payment profile. A <b>PaymentProfileID</b> and/or a <b>PaymentProfileName</b> value is used in the Add/Revise/Relist/Verify call to reference and use the payment policy values of a Business Policies payment profile. If both fields are provided and their values don't match, the <b>PaymentProfileID</b> takes precedence.
	// <br/><br/>
	// In the 'Get' calls, the <b>PaymentProfileID</b> value will always be returned if Business Policies are set for the listing, and the person making the API call is the seller of the listing. The <b>PaymentProfileName</b> value will be returned if a name is assigned to the payment profile.
	//
	PaymentProfileName string `xml:"PaymentProfileName,omitempty"`
}

type SellerPaymentType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	OrderID *OrderIDType `xml:"OrderID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	SellerInventoryID string `xml:"SellerInventoryID,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	PrivateNotes string `xml:"PrivateNotes,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	Title string `xml:"Title,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	PaymentType *PaymentTypeCodeType `xml:"PaymentType,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	TransactionPrice *AmountType `xml:"TransactionPrice,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	ShippingReimbursement *AmountType `xml:"ShippingReimbursement,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	Commission *AmountType `xml:"Commission,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	AmountPaid *AmountType `xml:"AmountPaid,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	PaidTime time.Time `xml:"PaidTime,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>SellerPaymentType</b> and all of its fields are no longer applicable since the Half.com site was shut down.
	// </span>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type SellerProfilePreferencesType struct {

	//
	// Boolean flag indicating whether or not a seller has opted in to Business
	// Policies. Sellers must opt in to Business Policies to create and manage payment,
	// return policy, and shipping profiles.
	//
	SellerProfileOptedIn bool `xml:"SellerProfileOptedIn,omitempty"`

	//
	// Container consisting of one or more Business Policies profiles active for a
	// seller's account. This container is only returned if <b>SellerProfileOptedIn</b> =  SellerProfilePreferences
	// and the seller has one or more Business Policies profiles active on the account.
	//
	SupportedSellerProfiles *SupportedSellerProfilesType `xml:"SupportedSellerProfiles,omitempty"`
}

type SellerProfilesType struct {

	//
	// The <b>SellerShippingProfile</b> container is used in an Add/Revise/Relist/Verify Trading API call to reference and use the values of a Business Policies shipping policy profile. Business Policies shipping profiles contain detailed information on domestic and international shipping, including shipping service options, handling time, package handling costs, excluded ship-to locations, and shipping insurance information.
	// <br/><br/>
	// This container is only returned in 'Get' calls if Business Policies are set for the listing, and the person making the API call is the seller of the listing.
	//
	SellerShippingProfile *SellerShippingProfileType `xml:"SellerShippingProfile,omitempty"`

	//
	// The <b>SellerReturnProfile</b> container is used in an Add/Revise/Relist/Verify Trading API call to reference and use the values of a Business Policies return policy profile. Business Policies return policy profiles contain detailed information on the seller's return policy, including who pays for the return shipping, how many days the buyer has to return the item for a refund, and the refund option (if any).
	// <br/><br/>
	// This container is only returned in 'Get' calls if Business Policies are set for the listing and the person making the API call is the seller of the listing.
	//
	SellerReturnProfile *SellerReturnProfileType `xml:"SellerReturnProfile,omitempty"`

	//
	// The <b>SellerPaymentProfile</b> container is used in an Add/Revise/Relist/Verify Trading API call to reference and use the values of a Business Policies payment profile. Business Policies payment profiles contain accepted payment methods, a flag to set up the immediate payment feature, a payment instructions field, and a field to specify the seller's PayPal email address.
	// <br/><br/>
	// This container is only returned in 'Get' calls if Business Policies are set for the listing, and the person making the API call is the seller of the listing.
	//
	SellerPaymentProfile *SellerPaymentProfileType `xml:"SellerPaymentProfile,omitempty"`
}

type SellerProvidedTitleSupportedDefinitionType struct {
}

type SellerRatingSummaryArrayType struct {

	//
	// Container consisting of a seller's Detailed Seller Rating (DSR) for each type of
	// rating (Communication, Item As Described, Shipping and Handling Charges, or Shipping
	// Time), the seller's average rating for each DSR type, the total number of DSR ratings
	// for each DSR type, and the period in which those ratings were received (the last year
	// or the last 30 days).
	//
	AverageRatingSummary []*AverageRatingSummaryType `xml:"AverageRatingSummary,omitempty"`
}

type RecoupmentPolicyDetailsType struct {

	//
	// Indicates whether recoupment policy is enforced on the site on which the item is listed.
	//
	EnforcedOnListingSite bool `xml:"EnforcedOnListingSite,omitempty"`

	//
	// Indicates whether recoupment policy is enforced on the registration site for which the call is made.
	//
	EnforcedOnRegistrationSite bool `xml:"EnforcedOnRegistrationSite,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type SellerReturnPreferencesType struct {

	//
	// This flag indicates whether or not an eligible seller has opted in to eBay
	// Managed Returns through the Return Preferences of My eBay.
	//
	OptedIn bool `xml:"OptedIn,omitempty"`
}

type SellerReturnProfileType struct {

	//
	// The unique identifier of a Business Policies return policy profile. A <b>ReturnProfileID</b> and/or a <b>ReturnProfileName</b> value is used in the Add/Revise/Relist/Verify call to reference and use the return policy values of a Business Policies return policy profile. If both fields are provided and their values don't match, the <b>ReturnProfileID</b> takes precedence.
	// <br/><br/>
	// Return Policy profile IDs can be retrieved with the <b>getReturnPolicies</b> call of the <b>Account API</b> or with the <b>getSellerProfiles</b> call of the <b>Business Policies Management API</b>. Business Policy IDs can also be retrieved through the Business Policies section of My eBay.
	// <br/><br/>
	// In the 'Get' calls, the <b>ReturnProfileID</b> value will always be returned if Business Policies are set for the listing, and the person making the API call is the seller of the listing. The <b>ReturnProfileName</b> value will be returned if a name is assigned to the return policy profile.
	//
	ReturnProfileID int64 `xml:"ReturnProfileID,omitempty"`

	//
	// The name of a Business Policies return policy profile. A <b>ReturnProfileID</b> and/or a <b>ReturnProfileName</b> value is used in the Add/Revise/Relist/Verify call to reference and use the return policy values of a Business Policies return policy profile. If both fields are provided and their values don't match, the <b>ReturnProfileID</b> takes precedence.
	// <br/><br/>
	// In the 'Get' calls, the <b>ReturnProfileID</b> value will always be returned if Business Policies are set for the listing, and the person making the API call is the seller of the listing. The <b>ReturnProfileName</b> value will be returned if a name is assigned to the return policy profile.
	//
	ReturnProfileName string `xml:"ReturnProfileName,omitempty"`
}

type SellerRoleMetricsType struct {

	//
	// Count of positive feedback entries given as a seller.
	//
	PositiveFeedbackLeftCount int32 `xml:"PositiveFeedbackLeftCount,omitempty"`

	//
	// Count of negative feedback entries given as a seller.
	//
	NegativeFeedbackLeftCount int32 `xml:"NegativeFeedbackLeftCount,omitempty"`

	//
	// Count of neutral feedback entries given as a seller.
	//
	NeutralFeedbackLeftCount int32 `xml:"NeutralFeedbackLeftCount,omitempty"`

	//
	// Percentage of leaving feedback as a seller.
	//
	FeedbackLeftPercent float32 `xml:"FeedbackLeftPercent,omitempty"`

	//
	// Number of buyers who bought more than once from this seller.
	//
	RepeatBuyerCount int32 `xml:"RepeatBuyerCount,omitempty"`

	//
	// Percentage of repeat buyers.
	//
	RepeatBuyerPercent float32 `xml:"RepeatBuyerPercent,omitempty"`

	//
	// Count of unique buyers from this seller.
	//
	UniqueBuyerCount int32 `xml:"UniqueBuyerCount,omitempty"`

	//
	// Percentage of number of times a member has sold successfully vs. the number of
	// times a member has bought an item in the preceding 365 days.
	//
	TransactionPercent float32 `xml:"TransactionPercent,omitempty"`

	//
	// The count of Cross-Border Trade order line items.
	//
	CrossBorderTransactionCount int32 `xml:"CrossBorderTransactionCount,omitempty"`

	//
	// The percentage of order line items that are Cross-Border Trade order line items.
	//
	CrossBorderTransactionPercent float32 `xml:"CrossBorderTransactionPercent,omitempty"`
}

type SellerShippingProfileType struct {

	//
	// The unique identifier of a Business Policies shipping profile. A <b>ShippingProfileID</b> and/or a <b>ShipppingProfileName</b> value is used in the Add/Revise/Relist/Verify call to reference and use the Shippping values of a Business Policies shipping profile. If both fields are provided and their values don't match, the <b>ShipppingProfileID</b> takes precedence.
	// <br/><br/>
	// Shipping profile IDs can be retrieved with the <b>getFulfillmentPolicies</b> call of the <b>Account API</b> or with the <b>getSellerProfiles</b> call of the <b>Business Policies Management API</b>. Business Policy IDs can also be retrieved through the Business Policies section of My eBay.
	// <br/><br/>
	// In the 'Get' calls, the <b>ShipppingProfileID</b> value will always be returned if Business Policies are set for the listing, and the person making the API call is the seller of the listing. The <b>ShipppingProfileName</b> value will be returned if a name is assigned to the shipping profile.
	//
	ShippingProfileID int64 `xml:"ShippingProfileID,omitempty"`

	//
	// The name of a Business Policies shipping profile. A <b>ShippingProfileID</b> and/or a <b>ShippingProfileName</b> value is used in the Add/Revise/Relist/Verify call to reference and use the shipping values of a Business Policies shipping profile. If both fields are provided and their values don't match, the <b>ShippingProfileID</b> takes precedence.
	// <br/><br/>
	// In the 'Get' calls, the <b>ShippingProfileID</b> value will always be returned if Business Policies are set for the listing, and the person making the API call is the seller of the listing. The <b>ShippingProfileName</b> value will be returned if a name is assigned to the payment profile.
	//
	ShippingProfileName string `xml:"ShippingProfileName,omitempty"`
}

type SellerType struct {

	//
	// Indicates the seller's PaisaPay registration status. Below are the integer values that may be returned and what they indicate:<br>
	// 0 - Seller not registered<br>
	// 1 - Seller registered<br>
	// 2 - Seller registered, but registration suspended<br>
	// 3 - Seller registered but outbound payment suspended<br>
	//
	PaisaPayStatus int32 `xml:"PaisaPayStatus,omitempty"`

	//
	// Indicates whether the user as a seller by default allows buyers to edit the
	// total cost of an item (while in checkout). (Sellers enable this property in
	// their My eBay user preferences on the eBay site.)
	//
	AllowPaymentEdit bool `xml:"AllowPaymentEdit,omitempty"`

	//
	// Currency type in which the user is billed seller fees.
	//
	BillingCurrency *CurrencyCodeType `xml:"BillingCurrency,omitempty"`

	//
	// This flag indicates whether or not the seller's Checkout Enabled preference is turned on (at account level or at
	// listing level). This preference is managed through Payment Preferences in My eBay. If this preference is enabled,
	// a Pay Now button will appear in checkout flow pages and in the email notifications that are sent to buyers. This
	// preferance is enabled by default if PayPal is one of the payment methods.
	//
	CheckoutEnabled bool `xml:"CheckoutEnabled,omitempty"`

	//
	// If true, this flag indicates that the seller has stored bank account information on file
	// with eBay. A seller must have stored bank account information on file with eBay in order
	// to use 'CashOnPickup' as a payment method (known as 'Pay upon Pickup' on the site). This
	// field is applicable to all eBay sites that support 'CashOnPickup' as a payment method.
	//
	CIPBankAccountStored bool `xml:"CIPBankAccountStored,omitempty"`

	//
	// If true, indicates that the user is in good standing with eBay. (One of the
	// requirements for listing a new item with Immediate Payment.)
	//
	GoodStanding bool `xml:"GoodStanding,omitempty"`

	//
	// This field is deprecated.
	//
	MerchandizingPref *MerchandizingPrefCodeType `xml:"MerchandizingPref,omitempty"`

	//
	// Indicates whether the user is subject to VAT. Users who have registered with
	// eBay as VAT-exempt are not subject to VAT.
	//
	QualifiesForB2BVAT bool `xml:"QualifiesForB2BVAT,omitempty"`

	//
	// This field is deprecated.
	//
	SellerGuaranteeLevel *SellerGuaranteeLevelCodeType `xml:"SellerGuaranteeLevel,omitempty"`

	//
	// The user's eBay PowerSeller tier. Possible values are enumerated in the SellerLevelCodeType code list.
	// SellerInfo.SellerLevel is no longer returned in the GetUser, GetBidderList, GetSellerList, GetItem, and
	// GetItemTransactions responses for the US, DE/AT/CH, and UK/IE sites, for version 629 and later. If you are using
	// a version older than 629, SellerInfo.SellerLevel will still be returned. Developers should note that
	// SellerInfo.SellerLevel could potentially be removed from other sites as well.
	//
	SellerLevel *SellerLevelCodeType `xml:"SellerLevel,omitempty"`

	//
	// Address used by eBay for purposes of billing the user for seller fees.
	//
	SellerPaymentAddress *AddressType `xml:"SellerPaymentAddress,omitempty"`

	//
	// Container for scheduling limits for the user.
	// Conveys the minimum and maximum
	// minutes the user may schedule listings in advance, as well as the maximum
	// number of items the user may schedule.
	//
	SchedulingInfo *SchedulingInfoType `xml:"SchedulingInfo,omitempty"`

	//
	// Boolean value indicates whether or not the seller is an eBay Store owner.
	//
	StoreOwner bool `xml:"StoreOwner,omitempty"`

	//
	// The URL for the seller's eBay Store. This field is only returned if the seller is a store
	// owner. To determine if a seller is a Store owner, check for the <b>User.SellerInfo.StoreOwner</b>
	// and a value of true. The eBay Stores domain that is returned in this field is based on the
	// <b>SITEID</b> header that is passed in the request, and not on the user's
	// registration address, as was the case prior to version 757. So, if the seller's
	// registration county is the UK, but a <b>SITEID</b> value of 71 (France) is
	// passed into the call, the eBay Stores domain that is returned would be stores.ebay.fr.
	//
	StoreURL *AnyURI `xml:"StoreURL,omitempty"`

	//
	// Type of seller account. This value is returned if the German
	// (ID 77), UK (ID 3), Ireland (ID 205), or US eBay Motors (ID 0) sites are specified.
	//
	SellerBusinessType *SellerBusinessCodeType `xml:"SellerBusinessType,omitempty"`

	//
	// If true, the user is registered as a vehicle dealer on the eBay Motors site.
	//
	RegisteredBusinessSeller bool `xml:"RegisteredBusinessSeller,omitempty"`

	//
	// The site associated with the seller's eBay Store.
	//
	StoreSite *SiteCodeType `xml:"StoreSite,omitempty"`

	//
	// Indicates the method the seller selected to pay eBay with for
	// the account.
	// The payment methods vary from one eBay site to the next.
	//
	PaymentMethod *SellerPaymentMethodCodeType `xml:"PaymentMethod,omitempty"`

	//
	// This field is deprecated.
	//
	ProStoresPreference *ProStoresCheckoutPreferenceType `xml:"ProStoresPreference,omitempty"`

	//
	// Indicates whether or not the seller is a registered charity
	// seller. If <b>CharityRegistered</b> is <code>false</code>, the user must
	// register their nonprofit organization with the PayPal Giving Fund to list eBay for Charity items.
	//
	CharityRegistered bool `xml:"CharityRegistered,omitempty"`

	//
	// If this field is <code>true</code>, the user is currently exempt from the requirement to offer at least
	// one safe payment method (PayPal/PaisaPay or one of the credit cards specified
	// in <b>Item.PaymentMethods</b>) when listing items. This value should only return <code>true</code>
	// for sellers who registered before January 17, 2007. Otherwise, it should
	// return <code>false</code>. This setting overrides both the site and category values for
	// <b>SafePaymentRequired</b>.
	//
	SafePaymentExempt bool `xml:"SafePaymentExempt,omitempty"`

	//
	// This field is deprecated since eBay India is no longer a functioning marketplace.
	//
	PaisaPayEscrowEMIStatus int32 `xml:"PaisaPayEscrowEMIStatus,omitempty"`

	//
	// This container consists of one or more of nonprofit organizations associated with the seller's account. This container will not be returned if the user is not affiliated with any nonprofit organizations. A seller must be registered with the PayPal Giving Fund to be affiliated with an eBay for Charity nonprofit organization.
	//
	CharityAffiliationDetails *CharityAffiliationDetailsType `xml:"CharityAffiliationDetails,omitempty"`

	//
	// Percentage of the number of times a member has sold successfully vs.
	// the number of times a member has bought an item in the preceding 365 days.
	//
	TransactionPercent float32 `xml:"TransactionPercent,omitempty"`

	//
	// Indicates the sites on which a seller has a payment gateway account
	// (and thus the sites on which the seller can use the IntegratedMerchantCreditCard
	// payment method).
	// Sellers use a payment gateway account to accept online
	// credit cards.
	//
	IntegratedMerchantCreditCardInfo *IntegratedMerchantCreditCardInfoType `xml:"IntegratedMerchantCreditCardInfo,omitempty"`

	//
	// Contains eligibility details about seller- or platform-based features. This is returned only
	// if IncludeFeatureEligibility is set to true in the request.
	//
	FeatureEligibility *FeatureEligibilityType `xml:"FeatureEligibility,omitempty"`

	//
	// This boolean field indicates if the seller is certified as a
	// <em>Top Rated Seller</em>. Only Top Rated Sellers can qualify for Top Rated Plus listings, which receive the Top Rated Plus seal, and will help those listings stand out. Top Rated Plus listings also receive a 20 percent discount on the Final Value Fee.
	// <br/><br/>
	// This field is only returned for the following sites: US (EBAY-US), Motors (EBAY-MOTOR), AT (EBAY-AT), CH (EBAY-CH), DE (EBAY-DE), IE (EBAY-IE), UK (EBAY-GB), and AU (EBAY-AU). The Top Rated Seller and Top Rated Plus listing requirements will differ by site. Below are some links to Help pages that discusss these requirements:
	// <ul>
	// <li>eBay US: <a href="http://pages.ebay.com/help/sell/top-rated.html">Becoming a Top Rated Seller and qualifying for Top Rated Plus</a></li>
	// <li>eBay US Motors: <a href="http://pages.ebay.com/help/sell/top-rated.html#becoming">Becoming a Top Rated Seller in Motors vehicles categories</a></li>
	// <li>eBay UK/IE: <a href="http://pages.ebay.co.uk/help/sell/top-rated.html">eBay Top-rated Seller status and the eBay Premium Service</a></li>
	// <li>eBay DE/AT/CH: <a href="http://pages.ebay.de/help/sell/top-rated/2.html">
	// Anforderungen fur den Verkaufer mit Top-Bewertung</a></li>
	// <li>eBay AU: <a href="http://pages.ebay.com.au/help/sell/top-rated.html">
	// Becoming a Top Rated Seller and qualifying for eBay Premium Service</a></li>
	// </ul>
	// Top Rated Sellers, registered in the US, can qualify for Top Rated Seller programs in other countries as long as they meet the selling requirments in those countries. However, even if US sellers qualify for programs in other countries, they will not receive the Final Value Fee discount on sales in those countries. For more information, see the <a href="http://pages.ebay.com/help/sell/top-rated.html#qualifying">
	// Qualifying for Top Rated Seller status on other eBay sites</a> help topic.
	//
	TopRatedSeller bool `xml:"TopRatedSeller,omitempty"`

	//
	// Contains Top Rated Seller program details for the seller.
	//
	TopRatedSellerDetails *TopRatedSellerDetailsType `xml:"TopRatedSellerDetails,omitempty"`

	//
	// The list of the sites where a seller has agreed to the cross-border recoupment terms.
	// <br><br>
	// Sellers who engage in cross-border trade on sites that require a recoupment agreement, must
	// agree to the recoupment terms before adding items to the site. This agreement allows eBay to
	// reimburse a buyer during a dispute and then recoup the cost from the seller.
	//
	RecoupmentPolicyConsent *RecoupmentPolicyConsentType `xml:"RecoupmentPolicyConsent,omitempty"`

	//
	// If true, the seller has configured a domestic shipping rate table on the DE, UK or US website.
	//
	DomesticRateTable bool `xml:"DomesticRateTable,omitempty"`

	//
	// If true, the seller has configured an international shipping rate table on the US, UK or DE website.
	//
	InternationalRateTable bool `xml:"InternationalRateTable,omitempty"`

	//
	// This field is no longer used.
	//
	SellereBayPaymentProcessStatus *SellereBayPaymentProcessStatusCodeType `xml:"SellereBayPaymentProcessStatus,omitempty"`

	//
	// This field is no longer used.
	//
	SellereBayPaymentProcessConsent *SellereBayPaymentProcessConsentCodeType `xml:"SellereBayPaymentProcessConsent,omitempty"`
}

type SellereBayPaymentProcessConsentCodeType struct {

	//
	// This field is deprecated.
	//
	PayoutMethodSet bool `xml:"PayoutMethodSet,omitempty"`

	//
	// This field is deprecated.
	//
	PayoutMethod *PayoutMethodType `xml:"PayoutMethod,omitempty"`

	//
	// This field is deprecated.
	//
	UserAgreementInfo []*UserAgreementInfoType `xml:"UserAgreementInfo,omitempty"`
}

type SellingManagerAlertType struct {

	//
	// This field indicates the type of Selling Manager alert returned to the seller. This
	// field is always returned with the <b>Alert</b> container in the
	// <b>GetSellingManagerAlerts</b> response.
	//
	AlertType *SellingManagerAlertTypeCodeType `xml:"AlertType,omitempty"`

	//
	// This value indicates an alert related to a sold item. This field is only returned
	// if <b>AlertType</b>='Sold'.
	//
	SoldAlert *SellingManagerSoldListingsPropertyTypeCodeType `xml:"SoldAlert,omitempty"`

	//
	// This value indicates an alert related to the seller's inventory, such as a
	// restocking alert. This field is only returned if
	// <b>AlertType</b>='Inventory'.
	//
	InventoryAlert *SellingManagerInventoryPropertyTypeCodeType `xml:"InventoryAlert,omitempty"`

	//
	// This value indicates an alert related to listing automation, and may be received
	// when a listing does not conform to listing automation rules. This field is only
	// returned if <b>AlertType</b>='Automation'.
	//
	AutomationAlert *SellingManagerAutomationPropertyTypeCodeType `xml:"AutomationAlert,omitempty"`

	//
	// This value indicates an alert related to a PaisaPay issue. This field is only
	// returned if <b>AlertType</b>='PaisaPay'.
	//
	PaisaPayAlert *SellingManagerPaisaPayPropertyTypeCodeType `xml:"PaisaPayAlert,omitempty"`

	//
	// This value indicates a general alert was received, such as negative feedback
	// received or an unpaid item dispute. This field is only returned if <b>
	// AlertType</b>='General'.
	//
	GeneralAlert *SellingManagerGeneralPropertyTypeCodeType `xml:"GeneralAlert,omitempty"`

	//
	// Represents the duration for which this alert is computed. This field is only
	// returned if the alert is based on duration.
	//
	DurationInDays int32 `xml:"DurationInDays,omitempty"`

	//
	// This field indicates the number of items affected by the alert. This field is not
	// returned if the count is 0.
	//
	Count int64 `xml:"Count,omitempty"`
}

type SellingManagerAutoListAccordingToScheduleType struct {

	//
	// The day of the week on which items should be listed.
	//
	DayOfWeek []*DayOfWeekCodeType `xml:"DayOfWeek,omitempty"`

	//
	// The number of weeks between rule executions.
	//
	ListingPeriodInWeeks int32 `xml:"ListingPeriodInWeeks,omitempty"`

	//
	// The time at which items should be listed.
	//
	ListAtSpecificTimeOfDay time.Time `xml:"ListAtSpecificTimeOfDay,omitempty"`

	//
	// The date from which the rule is active.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// The date after which the rule is disabled.
	//
	EndTime time.Time `xml:"EndTime,omitempty"`

	//
	// The number of current, listed items required for the rule to no longer be run.
	//
	MaxActiveItemCount int32 `xml:"MaxActiveItemCount,omitempty"`

	//
	// Sets a minimum inventory level for listings of associated products
	// to occur.
	//
	ListingHoldInventoryLevel int32 `xml:"ListingHoldInventoryLevel,omitempty"`
}

type SellingManagerAutoListMinActiveItemsType struct {

	//
	// The minimum number of listings that should be active on the site.
	//
	MinActiveItemCount int32 `xml:"MinActiveItemCount,omitempty"`

	//
	// The start time of the time interval during which new listings should start.
	//
	ListTimeFrom time.Time `xml:"ListTimeFrom,omitempty"`

	//
	// The end time of the time interval during which new listings should start.
	//
	ListTimeTo time.Time `xml:"ListTimeTo,omitempty"`

	//
	// Provides a number of minutes for spacing start times of listings.
	// Used when you list multiple items at the same time. Delays subsequent
	// listings by the specified number of minutes.
	//
	SpacingIntervalInMinutes int32 `xml:"SpacingIntervalInMinutes,omitempty"`

	//
	// Sets a minimum inventory level for listings of associated products
	// to occur.
	//
	ListingHoldInventoryLevel int32 `xml:"ListingHoldInventoryLevel,omitempty"`
}

type SellingManagerAutoListType struct {

	//
	// The source template ID for the rule that was retrieved.
	// In the case of automated listing rules retrieved for an item, even if the item
	// does not have an associated automation rule, an automated listing rule is
	// inherited from the source template.
	//
	SourceSaleTemplateID int64 `xml:"SourceSaleTemplateID,omitempty"`

	//
	// Specifies an automated listing rule that keeps a minimum number of listings on the site.
	//
	KeepMinActive *SellingManagerAutoListMinActiveItemsType `xml:"KeepMinActive,omitempty"`

	//
	// Specifies an automated listing rule that lists items according to a specified schedule.
	//
	ListAccordingToSchedule *SellingManagerAutoListAccordingToScheduleType `xml:"ListAccordingToSchedule,omitempty"`
}

type SellingManagerAutoRelistType struct {

	//
	// The type of auto-relist rule for the item.
	//
	Type *SellingManagerAutoRelistTypeCodeType `xml:"Type,omitempty"`

	//
	// The condition under which relist occurs.
	//
	RelistCondition *SellingManagerAutoRelistOptionCodeType `xml:"RelistCondition,omitempty"`

	//
	// Used when RelistCondition equals RelistAfterDaysHours; specifies
	// the number days after the item ends that it should be relisted.
	//
	RelistAfterDays int32 `xml:"RelistAfterDays,omitempty"`

	//
	// Used when RelistCondition equals RelistAfterDaysHours; specifies
	// the number hours after the item ends that it should be relisted.
	//
	RelistAfterHours int32 `xml:"RelistAfterHours,omitempty"`

	//
	// Used when RelistCondition equals RelistAtSpecificTimeOfDay; specifies the time
	// of day the item should be relisted.
	//
	RelistAtSpecificTimeOfDay time.Time `xml:"RelistAtSpecificTimeOfDay,omitempty"`

	//
	// Specifies whether Best Offer should be enabled on the auto-relisted item.
	//
	BestOfferDetails *BestOfferDetailsType `xml:"BestOfferDetails,omitempty"`

	//
	// Specifies that item is not listed if inventory levels on the associated
	// product are at or below the specified level.
	//
	ListingHoldInventoryLevel int32 `xml:"ListingHoldInventoryLevel,omitempty"`
}

type SellingManagerAutoSecondChanceOfferType struct {

	//
	// The condition under which a Second Chance Offer should be sent.
	//
	SecondChanceOfferCondition *SellingManagerAutoSecondChanceOfferTypeCodeType `xml:"SecondChanceOfferCondition,omitempty"`

	//
	// Used when SecondChanceOfferCondition is equal to
	// BidsGreaterThanAmount or BidsGreaterThanCostPlusAmount. Specifies
	// the amount associated with the SecondChanceOfferCondition.
	//
	Amount *AmountType `xml:"Amount,omitempty"`

	//
	// Used when SecondChanceOfferCondition is equal
	// to BidsGreaterThanCostPlusPercentage to specify the amount of profit
	// associated with the SecondChanceOfferCondition.
	//
	ProfitPercent float32 `xml:"ProfitPercent,omitempty"`

	//
	// Specifies the length of time the Second Chance Offer listing will be active.
	// The recipient bidder has that much time to purchase the item or the offer expires.
	//
	Duration *SecondChanceOfferDurationCodeType `xml:"Duration,omitempty"`

	//
	// Do not list if inventory levels on the associated product
	// are at or below the specified amount.
	//
	ListingHoldInventoryLevel int32 `xml:"ListingHoldInventoryLevel,omitempty"`
}

type SellingManagerEmailLogType struct {

	//
	// Specifies the type of Selling Manager email.
	//
	EmailType *SellingManagerEmailTypeCodeType `xml:"EmailType,omitempty"`

	//
	// Template name of the custom email.
	//
	CustomEmailName string `xml:"CustomEmailName,omitempty"`

	//
	// Success or failure state of this email.
	//
	EmailState *SellingManagerEmailSentStatusCodeType `xml:"EmailState,omitempty"`

	//
	// Date on which this email event occurred.
	//
	EventTime time.Time `xml:"EventTime,omitempty"`
}

type SellingManagerFolderDetailsType struct {

	//
	// Unique ID of the folder. Originally returned in the AddSellingManagerInventoryFolder response.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// Unique ID of the parent folder. If it exists, it is returned.
	//
	ParentFolderID int64 `xml:"ParentFolderID,omitempty"`

	//
	// Level of this folder in the folder tree hierarchy. Root folder is at level 1.
	//
	FolderLevel int64 `xml:"FolderLevel,omitempty"`

	//
	// Name assigned to the folder by the user in the AddSellingManagerInventoryFolder or
	// the ReviseSellingManagerInventoryFolder call.
	//
	FolderName string `xml:"FolderName,omitempty"`

	//
	// Comments associated with the folder. Returned if it exists.
	//
	FolderComment string `xml:"FolderComment,omitempty"`

	//
	// Container for sub-folder information. Returned if requested.
	//
	ChildFolder []*SellingManagerFolderDetailsType `xml:"ChildFolder,omitempty"`

	//
	// Date when this folder was created.
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`
}

type SellingManagerOrderStatusType struct {

	//
	// Indicates the current status of the checkout flow for the order.
	//
	CheckoutStatus *CheckoutStatusCodeType `xml:"CheckoutStatus,omitempty"`

	//
	// The paid status of the order.
	//
	PaidStatus *SellingManagerPaidStatusCodeType `xml:"PaidStatus,omitempty"`

	//
	// The shipped status of the order.
	//
	ShippedStatus *SellingManagerShippedStatusCodeType `xml:"ShippedStatus,omitempty"`

	//
	// The success or failure of a buyer's online payment.
	//
	EBayPaymentStatus *PaymentStatusCodeType `xml:"eBayPaymentStatus,omitempty"`

	//
	// Unique identifier of the PayPal transaction for the order.
	//
	PayPalTransactionID string `xml:"PayPalTransactionID,omitempty"`

	//
	// The payment method the buyer selected for paying the seller
	// for the order. If checkout is incomplete,
	// PaymentMethodUsed is set to whatever the buyer selected as his
	// or her preference on the Review Your Purchase page.
	//
	PaymentMethodUsed *BuyerPaymentMethodCodeType `xml:"PaymentMethodUsed,omitempty"`

	//
	// The type of feedback received (if feedback was received).
	//
	FeedbackReceived *CommentTypeCodeType `xml:"FeedbackReceived,omitempty"`

	//
	// Whether the seller has left feedback.
	//
	FeedbackSent bool `xml:"FeedbackSent,omitempty"`

	//
	// The total emails sent.
	//
	TotalEmailsSent int32 `xml:"TotalEmailsSent,omitempty"`

	//
	// Contains the current status of a hold on a PayPal payment.
	// The payment hold that is referred to as a "payment review" hold
	// results from a possible issue with a buyer.
	// The payment hold referred to as
	// a "merchant hold" results from a possible issue with a seller.
	// For more information, please see the link below.
	//
	PaymentHoldStatus *PaymentHoldStatusCodeType `xml:"PaymentHoldStatus,omitempty"`

	//
	// The custom invoice number.
	//
	SellerInvoiceNumber string `xml:"SellerInvoiceNumber,omitempty"`

	//
	// The date on which the seller marks the item as shipped, either set by default as
	// the date date the item was marked shipped or set explicitly by the seller using
	// the Edit Sales Record page. Note that sellers have the ability to set this value
	// up to 3 calendar days in the future.
	//
	ShippedTime time.Time `xml:"ShippedTime,omitempty"`

	//
	// Date on which the order was paid.
	//
	PaidTime time.Time `xml:"PaidTime,omitempty"`

	//
	// The time that the last email was sent.
	//
	LastEmailSentTime time.Time `xml:"LastEmailSentTime,omitempty"`

	//
	// The time the invoice was sent. This is a seller-entered value for VAT-enabled
	// sites. It is returned only for business sellers in VAT-enabled sites.
	//
	SellerInvoiceTime time.Time `xml:"SellerInvoiceTime,omitempty"`

	//
	// Indicates whether the item can be paid for through a payment gateway (Payflow) account.
	// If IntegratedMerchantCreditCardEnabled is true, then integrated merchant credit card (IMCC) is
	// enabled for credit cards because the seller has a payment gateway account.
	// Therefore, if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or
	// VisaMC is returned for an item, then on checkout, an online credit-card payment
	// is processed through a payment gateway account.
	// A payment gateway account is used by sellers to accept online
	// credit cards (Visa, MasterCard, American Express, and Discover).
	//
	IntegratedMerchantCreditCardEnabled bool `xml:"IntegratedMerchantCreditCardEnabled,omitempty"`
}

type SellingManagerProductDetailsType struct {

	//
	// The name of a Selling Manager product. The AddSellingManagerProduct call is used to create a
	// Selling Manager product.
	//
	ProductName string `xml:"ProductName,omitempty"`

	//
	// The ID of a Selling Manager product. When you call AddSellingManagerProduct, a product ID is
	// returned for the product created. When you use this ID to make subsequent calls, such as
	// AddSellingManagerTemplate, the ProductID you provide on input is returned in the output.
	//
	ProductID int64 `xml:"ProductID,omitempty"`

	//
	// Custom label of this product.
	//
	CustomLabel string `xml:"CustomLabel,omitempty"`

	//
	// Quantity of items in the seller's inventory for this product.
	//
	QuantityAvailable int32 `xml:"QuantityAvailable,omitempty"`

	//
	// Cost of each item of this product.
	//
	UnitCost *AmountType `xml:"UnitCost,omitempty"`

	//
	// ID of the inventory folder that contains the product. Value is initially returned in
	// the AddSellingManagerInventoryFolder response.
	//
	FolderID int64 `xml:"FolderID,omitempty"`

	//
	// Specifies whether a restock alert is triggered for the product or not.
	//
	RestockAlert bool `xml:"RestockAlert,omitempty"`

	//
	// Specifies the quantity at which a restock alert should be triggered.
	//
	RestockThreshold int32 `xml:"RestockThreshold,omitempty"`

	//
	// Primary vendor information. Vendor information is returned only if it has been
	// set.
	//
	VendorInfo *SellingManagerVendorDetailsType `xml:"VendorInfo,omitempty"`

	//
	// Seller's note about this product.
	//
	Note string `xml:"Note,omitempty"`
}

type SellingManagerProductInventoryStatusType struct {

	//
	// Quantity of products scheduled to be listed.
	//
	QuantityScheduled int32 `xml:"QuantityScheduled,omitempty"`

	//
	// Quantity of products actively listed.
	//
	QuantityActive int32 `xml:"QuantityActive,omitempty"`

	//
	// Quantity of products sold.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// Quantity of product unsold.
	//
	QuantityUnsold int32 `xml:"QuantityUnsold,omitempty"`

	//
	// Percentage of ended listings that sold.
	//
	SuccessPercent float32 `xml:"SuccessPercent,omitempty"`

	//
	// Average selling price for the product.
	//
	AverageSellingPrice *AmountType `xml:"AverageSellingPrice,omitempty"`
}

type SellingManagerProductSpecificsType struct {

	//
	// This optional field sets the primary eBay listing category for the Selling Manager Product. If the primary eBay listing category ID is not specified with <b>AddSellingManagerProduct</b> or <b>ReviseSellingManagerProduct</b> call, the seller can pass in this information with a subsequent <b>AddSellingManagerTemplate</b> call.
	// <br><br>
	// The <b>GetSuggestedCategories</b> or <b>GetCategories</b> call can be used to retrieve eBay leaf category IDs.
	// <br><br>
	// This field is returned in a <b>GetSellingManagerInventory</b> call
	// only if it is defined for the Selling Manager Product.
	//
	PrimaryCategoryID string `xml:"PrimaryCategoryID,omitempty"`

	//
	// This container is used to define/revise multiple variations for a new or existing Selling Manager Product record. This container is only applicable if the new or existing Selling Manager Product record will ultimately be converted to a multiple-variation, fixed-price listing on an eBay Marketplace.
	// <br><br>
	// Note that Item Specifics that all product variations share are actually set in the <b>ItemSpecifics</b> container, the <b>Variations.Pictures</b> container is used to specify URLs for all pictures that will end up in the listing, the <b>Variations.VariationSpecificsSet</b> container is used to set all available options for the aspects that all product variations share (such as 'Color' and 'Size'), and a <b>Variations.Variation</b> container is need to define each variation, including its defining aspects (such as 'Blue, Large'), quantity available, price, SKU value (if applicable) and any eBay Product ID (ePID) or GTIN (UPC, EAN, ISBN) value asssociated with the variation.
	// <br><br>
	// Not all eBay listing categories support multiple-variation listings, so it might be a good idea to run a <b>GetCategoryFeatures</b> call on one or more categories, and include a <b>FeatureID</b> filter set to a value of <code>ItemSpecificsEnabled</code>. If the listing category supports multiple-variation listings, a <code>ItemSpecificsEnabled</code> tag will get returned for the category with a value of <code>Enabled</code>.
	// <br><br>
	// This container is returned in a <b>GetSellingManagerInventory</b> call only if variations are defined in the Selling Manager Product.
	//
	Variations *VariationsType `xml:"Variations,omitempty"`

	//
	// This container is used to define/revise listing-level Item Specifics for a single-variation or multiple-variation listing. Item Specifics give sellers a structured way to describe details of their items through name-value pairs.
	// <br><br>
	// Each Item Specific requires its own <b>ItemSpecifics.NameValueList</b> container, and it is possible that a single Item Specific can more than one applicable value. An example of this would be a 'Features' Item Specific. A product can have multiple features, hence multiple features can be passed in through multiple <b>ItemSpecifics.NameValueList.Value</b> fields.
	// <br><br>
	// Many listing categories have mandatory Item Specifics, and just about all listing categories have recommended Item Specifics. To retrieve mandatory and recommended Item Specifics for a category, the <b>GetCategorySpecifics</b> call can be used.
	// <br><br>
	// This container is returned in a <b>GetSellingManagerInventory</b> call only if Item Specifics are defined for the Selling Manager Product.
	//
	ItemSpecifics *NameValueListArrayType `xml:"ItemSpecifics,omitempty"`
}

type SellingManagerProductType struct {

	//
	// Container for information about the product.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`

	//
	// Contains the list of the seller's templates contained in the product, one
	// SellingManagerTemplateType object per template.
	//
	SellingManagerTemplateDetailsArray *SellingManagerTemplateDetailsArrayType `xml:"SellingManagerTemplateDetailsArray,omitempty"`

	//
	// Container for statistics about the product.
	//
	SellingManagerProductInventoryStatus *SellingManagerProductInventoryStatusType `xml:"SellingManagerProductInventoryStatus,omitempty"`

	//
	// Specifies an eBay category associated with the product,
	// defines Item Specifics that are relevant to the product,
	// and defines variations available for the product
	// (which may be used to create multivariation listings).
	//
	SellingManagerProductSpecifics *SellingManagerProductSpecificsType `xml:"SellingManagerProductSpecifics,omitempty"`
}

type SellingManagerSearchType struct {

	//
	// Specifies the type of value, such as <b>ProductID</b> or <b>BuyerUserID</b>, for the search.
	//
	SearchType *SellingManagerSearchTypeCodeType `xml:"SearchType,omitempty"`

	//
	// String identifying the value, matching the <b>SearchType</b>, that the search should return listings
	// for. For example, when <b>ProductID</b> is specified as the <b>SearchType</b>, <b>SearchValue</b> must be a valid
	// <b>ProductID</b>.
	//
	SearchValue string `xml:"SearchValue,omitempty"`
}

type SellingManagerSoldOrderType struct {

	//
	// Information about one line item in the order.
	//
	SellingManagerSoldTransaction []*SellingManagerSoldTransactionType `xml:"SellingManagerSoldTransaction,omitempty"`

	//
	// Shipping address of a buyer.
	//
	ShippingAddress *AddressType `xml:"ShippingAddress,omitempty"`

	//
	// The shipping-related details for an order,
	// including flat and calculated shipping costs and shipping insurance costs.
	//
	ShippingDetails *ShippingDetailsType `xml:"ShippingDetails,omitempty"`

	//
	// The cost of cash-on-delivery.
	//
	CashOnDeliveryCost *AmountType `xml:"CashOnDeliveryCost,omitempty"`

	//
	// Total cost in the order.
	//
	TotalAmount *AmountType `xml:"TotalAmount,omitempty"`

	//
	// Total item quantity.
	//
	TotalQuantity int32 `xml:"TotalQuantity,omitempty"`

	//
	// A SMPro seller can record the cost of the item, as calculated by the seller, in
	// this field.
	//
	ItemCost *AmountType `xml:"ItemCost,omitempty"`

	//
	// Rate of applicable value added tax.
	//
	VATRate []*VATRateType `xml:"VATRate,omitempty"`

	//
	// Total cost of shipping insurance.
	//
	NetInsuranceFee *AmountType `xml:"NetInsuranceFee,omitempty"`

	//
	// Amount of applicable value added tax insurance fee.
	//
	VATInsuranceFee *AmountType `xml:"VATInsuranceFee,omitempty"`

	//
	// VAT shipping fee.
	//
	VATShippingFee *AmountType `xml:"VATShippingFee,omitempty"`

	//
	// Total shipping fee.
	//
	NetShippingFee *AmountType `xml:"NetShippingFee,omitempty"`

	//
	// The seller records in this field a net total amount obtained according to the
	// seller's method of calculation. This field is returned for VAT transactions
	// only.
	//
	NetTotalAmount *AmountType `xml:"NetTotalAmount,omitempty"`

	//
	// VAT total amount.
	//
	VATTotalAmount *AmountType `xml:"VATTotalAmount,omitempty"`

	//
	// The shipping cost paid by the seller to ship the order line item.
	// <br/><br/>
	// For multiple line item orders, it is possible that one order line item will have the shipping cost and the value for the other order line item will be 0.00.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This is different from the field of the same name returned by GetOrders and its related calls, which contains the shipping cost paid by the buyer.
	// </span>
	//
	ActualShippingCost *AmountType `xml:"ActualShippingCost,omitempty"`

	//
	// Discount, or charge, to which the buyer and seller have agreed.
	// If this value is a positive value,
	// the amount is the extra money that the buyer pays the seller.
	// If this value is a negative value,
	// the amount is a discount the seller gives the buyer.
	//
	AdjustmentAmount *AmountType `xml:"AdjustmentAmount,omitempty"`

	//
	// Notes from the seller to the buyer.
	//
	NotesToBuyer string `xml:"NotesToBuyer,omitempty"`

	//
	// Notes from the buyer to the seller.
	//
	NotesFromBuyer string `xml:"NotesFromBuyer,omitempty"`

	//
	// Notes to self from seller.
	//
	NotesToSeller string `xml:"NotesToSeller,omitempty"`

	//
	// Status of the order regarding payment, shipping, feedback, and other
	// communications.
	//
	OrderStatus *SellingManagerOrderStatusType `xml:"OrderStatus,omitempty"`

	//
	// The status of an unpaid item regarding final value, state of communications
	// between buyer and seller, and the filing of an Unpaid Item.
	//
	UnpaidItemStatus *UnpaidItemStatusTypeCodeType `xml:"UnpaidItemStatus,omitempty"`

	//
	// Amount of the accepted offer for the listing.
	//
	SalePrice *AmountType `xml:"SalePrice,omitempty"`

	//
	// Number of emails sent regarding this order.
	//
	EmailsSent int32 `xml:"EmailsSent,omitempty"`

	//
	// Number of days since the sale.
	//
	DaysSinceSale int32 `xml:"DaysSinceSale,omitempty"`

	//
	// The user ID of the buyer.
	//
	BuyerID string `xml:"BuyerID,omitempty"`

	//
	// The email of the buyer.
	//
	BuyerEmail string `xml:"BuyerEmail,omitempty"`

	//
	// The sale record ID. Applicable to Selling Manager users.
	// When an item is sold, Selling Manager generates a sale record.
	// A sale record contains buyer information, shipping, and other information.
	// A sale record is displayed in the Sold view in Selling Manager.
	// Each sale record has a sale record ID. In the following calls,
	// the value for the sale record ID is in the SellingManagerSalesRecordNumber field:
	// GetItemTransactions, GetSellerTransactions, GetOrders, GetOrderTransactions.
	// In the Selling Manager calls, the value for the sale record ID is in the
	// SaleRecordID field. The sale record ID can be for single or multiple line item orders.
	//
	SaleRecordID int64 `xml:"SaleRecordID,omitempty"`

	//
	// The sale date.
	//
	CreationTime time.Time `xml:"CreationTime,omitempty"`

	//
	// This field is no longer used.
	//
	RefundAmount *AmountType `xml:"RefundAmount,omitempty"`

	//
	// This field is no longer used.
	//
	RefundStatus string `xml:"RefundStatus,omitempty"`
}

type SellingManagerSoldTransactionType struct {

	//
	// Seller's customized invoice number.
	//
	InvoiceNumber string `xml:"InvoiceNumber,omitempty"`

	//
	// Unique identifier for an eBay order line item. An order line
	// item is created once there is a commitment from a buyer to
	// purchase an item. Since an auction listing can only have one order line
	// item during the duration of the listing, the <b>TransactionID</b>
	// for auction listings is always 0. Along with its corresponding <b>ItemID</b>, a
	// <b>TransactionID</b> is used and referenced during an order checkout flow and
	// after checkout has been completed.
	//
	TransactionID int64 `xml:"TransactionID,omitempty"`

	//
	// Unique identifier for a Selling Manager sale record. This field is created
	// at the same time as the order line item (transaction). A sale record is
	// displayed in the Sold view in Selling Manager and contains information on
	// the buyer and shipping. In the <b>GetItemTransactions</b>, <b>GetSellerTransactions</b>,
	// <b>GetOrders</b>, and <b>GetOrderTransactions</b> calls, the <b>SaleRecordID</b> value is
	// reflected in the <b>ShippingDetails.SellingManagerSalesRecordNumber</b> field.
	// <br/><br/>
	// For orders that occurred within the last 30 days, passing only the SaleRecordID into the GetSellingManagerSoldListings
	// request will return the sale record. However, for sales that occurred more than 30 days ago, the SaleDateRange container
	// must also be used, passing in a date range that includes the date on which the specific sale occurred.
	//
	SaleRecordID int64 `xml:"SaleRecordID,omitempty"`

	//
	// Unique identifier for an eBay listing.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Total number of identical items sold in the order line item.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// Price per item.
	//
	ItemPrice *AmountType `xml:"ItemPrice,omitempty"`

	//
	// This value is calculated by multplying the <b>ItemPrice</b> value by the
	// <b>QuantitySold</b> value.
	//
	SubtotalAmount *AmountType `xml:"SubtotalAmount,omitempty"`

	//
	// The title of the item listing.
	//
	ItemTitle string `xml:"ItemTitle,omitempty"`

	//
	// The item listing type.
	//
	ListingType *ListingTypeCodeType `xml:"ListingType,omitempty"`

	//
	// Boolean value indicating whether the item is a relisted item.
	//
	Relisted bool `xml:"Relisted,omitempty"`

	//
	// Number of users watching the item.
	//
	WatchCount int32 `xml:"WatchCount,omitempty"`

	//
	// Start price of the item.
	//
	StartPrice *AmountType `xml:"StartPrice,omitempty"`

	//
	// Reserve Price of the item (if a Reserve Price was set for the item).
	//
	ReservePrice *AmountType `xml:"ReservePrice,omitempty"`

	//
	// Boolean value indicating whether or not a Second Chance offer was sent by
	// the seller to an eligible bidder.
	//
	SecondChanceOfferSent bool `xml:"SecondChanceOfferSent,omitempty"`

	//
	// Custom label associated with this order line item.
	//
	CustomLabel string `xml:"CustomLabel,omitempty"`

	//
	// The platform on which the item was sold.
	//
	SoldOn *TransactionPlatformCodeType `xml:"SoldOn,omitempty"`

	//
	// The platform on which the item was listed.
	//
	ListedOn []*TransactionPlatformCodeType `xml:"ListedOn,omitempty"`

	//
	// Container consisting of tracking information for the shipment.
	//
	Shipment *ShipmentType `xml:"Shipment,omitempty"`

	//
	// This field is returned as 'true' if the item is listed as a charity item.
	//
	CharityListing bool `xml:"CharityListing,omitempty"`

	//
	// In a fixed-priced listing, a seller can offer variations of the same item.
	// For example, the seller could create a fixed-priced listing for a t-shirt
	// design and offer the shirt in different colors and sizes. In this case, each
	// color and size combination is a separate variation. Each variation can have
	// a different quantity and price. Due to the possible price differentiation,
	// buyers can buy multiple items from this listing at the same time, but all of
	// the items must be of the same variation. One order line item is created
	// whether one or multiple items of the same variation are purchased.
	// <br><br>
	// The <b>Variation</b> node contains information about which variation was purchased.
	// Therefore, applications that process order line items should always check to see
	// if this node is present.
	//
	Variation *VariationType `xml:"Variation,omitempty"`

	//
	// A unique identifier for an eBay order line item. This field is created as
	// soon as there is a commitment to buy from the seller, and its value is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type SellingManagerTemplateDetailsArrayType struct {

	//
	// This container consists of detailed information for one Selling Manager Template.
	// <br/><br/>
	// <strong>For GetSellingManagerTemplates</strong>: A <strong>SellingManagerTemplateDetails</strong> container is returned for each Selling Manager Template that matches the input criteria.
	// <br/><br/>
	// <strong>For GetSellingManagerInventory</strong>: A <strong>SellingManagerTemplateDetails</strong> container is returned for each Selling Manager Template that is associated with the corresponding Selling Manager Product (if any).
	//
	SellingManagerTemplateDetails []*SellingManagerTemplateDetailsType `xml:"SellingManagerTemplateDetails,omitempty"`
}

type SellingManagerTemplateDetailsType struct {

	//
	// ID of the template.
	//
	SaleTemplateID string `xml:"SaleTemplateID,omitempty"`

	//
	// Name of the template.
	//
	SaleTemplateName string `xml:"SaleTemplateName,omitempty"`

	//
	// Success ratio.
	//
	SuccessPercent float32 `xml:"SuccessPercent,omitempty"`

	//
	// The details of the product that this template belongs to.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`

	//
	// ItemType object that contains the data for the specified template.
	//
	Template *ItemType `xml:"Template,omitempty"`
}

type SellingManagerVendorDetailsType struct {

	//
	// Primary vendor name. Vendor information is returned only if it has been set.
	//
	VendorName string `xml:"VendorName,omitempty"`

	//
	// Contact information of vendor. Vendor information is returned only if it has been set.
	//
	VendorContactInfo string `xml:"VendorContactInfo,omitempty"`
}

type SellingStatusType struct {

	//
	// Number of bids placed so far against the auction item.
	//
	BidCount int32 `xml:"BidCount,omitempty"`

	//
	// The minimum amount a progressive bid must be above the current high bid to be accepted. This field is only
	// applicable to auction listings. The value of this field will always be '0.00' for Classified Ad and fixed-price
	// listings.
	//
	BidIncrement *AmountType `xml:"BidIncrement,omitempty"`

	//
	// Converted value of the <b>CurrentPrice</b> in the currency of the site that
	// returned this response. For active items, refresh the listing's data every 24
	// hours to pick up the current conversion rates. Only returned when the item's
	// <b>CurrentPrice</b> on the listing site is in different currency than the currency of
	// the host site for the user/application making the API call. <b>ConvertedCurrentPrice</b>
	// is not returned for Classified listings (Classified listings are not available
	// on all sites).<br>
	// <br>
	// In multi-variation listings, this value matches the lowest-priced
	// variation that is still available for sale.
	//
	ConvertedCurrentPrice *AmountType `xml:"ConvertedCurrentPrice,omitempty"`

	//
	// The current price of the item in the original listing currency.
	// <br><br>
	// For auction listings, this price is the starting minimum price (if the listing has no bids) or the current highest bid (if bids have been placed) for the item. This does not reflect the <b>BuyItNow</b> price.
	// <br><br>
	// For fixed-price and ad format listings, this is the current listing price.
	// <br><br>
	// In multi-variation, fixed-price listings, this value matches the lowest-priced variation that is still available for sale.
	//
	CurrentPrice *AmountType `xml:"CurrentPrice,omitempty"`

	//
	// For ended auction listings that have a winning bidder,
	// this field is a container for the high bidder's user ID.
	// For ended, single-item, fixed-price listings,
	// this field is a container for the user ID of the purchaser.
	// This field isn't returned for auctions with no bids, or for active fixed-price listings.
	// <br/><br/>
	// In the case of <b>PlaceOffer</b>, for auction listings,
	// this field is a container for the high bidder's user ID.
	// In the <b>PlaceOffer</b> response, the following applies:
	// For multiple-quantity, fixed-price listings,
	// the high bidder is only returned if there is just one order line item
	// (or only for the first order line item that is created).
	//
	HighBidder *UserType `xml:"HighBidder,omitempty"`

	//
	// Applicable to Ad type listings only. Indicates how many leads to
	// potential buyers are associated with this item. Returns 0 (zero) for listings in other formats. You must be the seller of the item to retrieve the lead count.
	//
	LeadCount int32 `xml:"LeadCount,omitempty"`

	//
	// Smallest amount the next bid on the item can be. Returns same value as
	// <b>Item.StartPrice</b> (if no bids have yet been placed) or <b>CurrentPrice</b> plus
	// <b>BidIncrement</b> (if at least one bid has been placed). Only applicable to
	// auction listings. Returns null for fixed-price
	// and Ad type listings.
	// <br><br>
	// In multi-variation listings, this value matches the lowest-priced
	// variation that is still available for sale.
	//
	MinimumToBid *AmountType `xml:"MinimumToBid,omitempty"`

	//
	// The total number of items purchased so far (in the listing's lifetime).
	// Subtract this from <b>Quantity</b> to determine the quantity available.
	// <br><br>
	// If the listing has Item Variations,
	// then in <b>GetItem</b> (and related calls) and <b>GetItemTransactions</b>,
	// <b>Item.SellingStatus.QuantitySold</b> contains the sum of all quantities
	// sold across all variations in the listing, and <b>Variation.SellingStatus.QuantitySold</b> contains the number
	// of items sold for that variation.
	// <br/><br/>
	// In <b>GetSellerTransactions</b>,
	// <b>Transaction.Item.SellingStatus.QuantitySold</b> contains the number
	// of items sold in that order line item.<br>
	// <br>
	// For order line item calls, also see <b>Transaction.QuantityPurchased</b> for
	// the number of items purchased in the order line item.<br>
	// In multi-variation listings, this value matches total quantity sold
	// across all variations.
	//
	QuantitySold int32 `xml:"QuantitySold,omitempty"`

	//
	// Indicates whether the reserve price has been met for the listing. Returns
	// true if the reserve price was met or no reserve price was specified.
	//
	ReserveMet bool `xml:"ReserveMet,omitempty"`

	//
	// Part of the Second Chance Offer feature, indicates whether the seller can
	// extend a second chance offer for the item.
	//
	SecondChanceEligible bool `xml:"SecondChanceEligible,omitempty"`

	//
	// Number of bidders for an item. Only applicable to auction listings.
	// Only returned for the seller of the item.
	//
	BidderCount int64 `xml:"BidderCount,omitempty"`

	//
	// Specifies an active or ended listing's status in eBay's processing workflow.
	// <b></b>
	// <ul>
	// <li>If a listing ends with a sale (or sales), eBay needs to update the sale details
	// (e.g., total price and buyer/high bidder) and the final value fee. This processing
	// can take several minutes.</li>
	// <li>If you retrieve a sold item and no details about the buyer/high bidder
	// are returned or no final value fee is available, use this listing status information
	// to determine whether eBay has finished processing the listing.</li>
	// </ul>
	//
	ListingStatus *ListingStatusCodeType `xml:"ListingStatus,omitempty"`

	//
	// A seller is changed a Final Value Fee (FVF) when the item is sold, ends with a
	// winning bid, or is purchased. This fee applies whether or not the sale is completed with the buyer and
	// is generated before the buyer makes a payment.
	// <br/><br/>
	// The FVF is calculated using a percentage. This percentage is based on whether the seller has a
	// Store subscription or not. If a seller does have a Store subscription, the FVF is calculated based on
	// the level of that plan. For complete information about selling fees and eBay Store subscription plans, see the
	// <a href="http://www.feectr.ebay.com/feecenter/home">Fee Center Home Page</a>.
	// <br/><br/>
	// The Final Value Fee for each order line
	// item is returned by <b>GetSellerTransactions</b>, <b>GetItemTransactions</b>, <b>GetOrders</b>,
	// and <b>GetOrderTransactions</b>, regardless of the checkout status.
	// <br><br>
	// If a seller requests a Final Value Fee credit, the value of
	// <b>Transaction.FinalValueFee</b> will not change if a credit is
	// issued. The credit only appears in the seller's account data.
	//
	FinalValueFee *AmountType `xml:"FinalValueFee,omitempty"`

	//
	// If a seller has reduced the price of a listed item with the Promotional Price Display feature,
	// this field contains the original price of the discounted item, along with the start-time
	// and end-time of the discount.
	//
	PromotionalSaleDetails *PromotionalSaleDetailsType `xml:"PromotionalSaleDetails,omitempty"`

	//
	// If included in the response as <code>true</code>, indicates that the listing was administratively
	// canceled due to a violation of eBay's listing policies and that the item can be relisted
	// using <b>RelistItem</b>.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// <b>GetItem</b> returns an error (invalid item ID)
	// in the response if <b>Item.SellingStatus.AdminEnded</b> = <code>true</code> and the requesting user is not the seller of the item.
	// </span>
	//
	AdminEnded bool `xml:"AdminEnded,omitempty"`

	//
	// If this flag appears in the <b>GetItem</b> response, the auction has ended due to the
	// item being sold to a seller using the <b>Buy It Now</b> option.
	// This flag is not relevant for fixed-priced listings.
	//
	SoldAsBin bool `xml:"SoldAsBin,omitempty"`

	//
	// Indicates the total quantity of items sold and picked up by buyers using the In-Store Pickup option. This value is the total number of items purchased by one or more buyers using the In-Store Pickup option, and is not the total number of In-Store Pickup orders. So, if two buyers selected the In-Store Pickup option, but each of these buyers bought a quantity of five of these items (in same purchase), the <b>Item.SellingStatus.QuantitySoldByPickupInStore</b> value would be '10' and not '2'.
	// <br>
	// <br>
	// In the case of multi-variation, fixed-price listings, each <b>Item.Variations.Variation.SellingStatus.QuantitySoldByPickupInStore</b> value indicates the total quantity of that corresponding item variation (for example, large blue shirts) sold and picked up by buyers using the In-Store Pickup option, and the <b>Item.SellingStatus.QuantitySoldByPickupInStore</b> value would be the total quantity of all item variations sold for the listing.
	// <br>
	// <br>
	// This field is returned only if the listing is eligible for In-Store Pickup (<b>EligibleForPickupInStore</b> is returned as <code>true</code>).
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> At this time, the In-Store Pickup feature is generally only available to large retail merchants, and can only be applied to multi-quantity, fixed-price listings.
	// </span>
	//
	QuantitySoldByPickupInStore int32 `xml:"QuantitySoldByPickupInStore,omitempty"`

	//
	// This container is only returned if the buyer is attempting to bid on an auction item. To bid on an auction item, the buyer sets the value of the <b>Offer.Action</b> field to <code>Bid</code>, and sets the maximum bid amount in the <b>Offer.MaxBid</b> field.
	// <br><br>
	// The <b>SuggestedBidValues</b> container consists of an array of incremental bid values (up to the dollar value in the <b>Offer.MaxBid</b> field) that eBay will bid on behalf of the buyer each time that buyer is outbid for the auction item.
	//
	SuggestedBidValues *SuggestedBidValueType `xml:"SuggestedBidValues,omitempty"`
}

type SellingSummaryType struct {

	//
	// The number of currently active auctions that will sell. That
	// is, there is at least one bidder, and any reserve price has
	// been met. Equivalent to the "Will Sell" value in My eBay.
	//
	ActiveAuctionCount int32 `xml:"ActiveAuctionCount,omitempty"`

	//
	// The total number of currently active auctions for a given
	// seller. Equivalent to the
	// "Auction Quantity" value in My eBay.
	//
	AuctionSellingCount int32 `xml:"AuctionSellingCount,omitempty"`

	//
	// The total number of bids made on the seller's active auction listings.
	//
	AuctionBidCount int32 `xml:"AuctionBidCount,omitempty"`

	//
	// The total value of all items the seller has for sale in all listings.
	//
	TotalAuctionSellingValue *AmountType `xml:"TotalAuctionSellingValue,omitempty"`

	//
	// The total number of items the seller has sold.
	//
	TotalSoldCount int32 `xml:"TotalSoldCount,omitempty"`

	//
	// The total monetary value of the items the seller has sold.
	//
	TotalSoldValue *AmountType `xml:"TotalSoldValue,omitempty"`

	//
	// The average duration, in days, of all items sold.
	//
	SoldDurationInDays int32 `xml:"SoldDurationInDays,omitempty"`
}

type ShipPackageDetailsType struct {

	//
	// Specifies the unit type of the weight and dimensions of a
	// shipping package.
	// If <b>MeasurementUnit</b> is used, it overrides the system specified by measurementSystem.
	// If <b>MeasurementUnit</b> and measurementSystem are not specified, the following defaults
	// will be used:
	// <br><br>
	// English: US<br>
	// Metric: CA, CAFR, AU
	// <br><br>
	// CA and CAFR supports both English and Metric, while other sites
	// only support the site's default.
	// <br><br>
	// Use <b>MeasurementUnit</b> with weight and package dimensions.  For example,
	// to represent a 5 lbs 2 oz package:
	// <br><br>
	// <code>
	// &lt;MeasurementUnit&gt;English&lt;/MeasurementUnit&gt;
	// <br>
	// &lt;WeightMajor&gt;5&lt;/WeightMajor&gt;
	// <br>
	// &lt;WeightMinor&gt;2&lt;/WeightMinor&gt;
	// </code>
	//
	MeasurementUnit *MeasurementSystemCodeType `xml:"MeasurementUnit,omitempty"`

	//
	// Depth of the package, in whole number of inches, needed to ship the item.
	// This is validated against the selected shipping service.
	// Upon mismatch, a message is returned, such as, "Package
	// dimensions exceeds maximum allowable limit for
	// service XXXXX," where XXXXX is the name of the shipping service.
	// For calculated shipping only. Only returned if the seller
	// specified the value for the item. (In many cases, the seller
	// only specifies the weight fields.)
	// <br><br>
	// <b>Developer impact:</b> UPS requires dimensions for any Ground packages that are 3
	// cubic feet or larger and for all air packages, if they are to provide correct
	// shipping cost. If package dimensions are not included for an item listed with
	// calculated shipping, the shipping cost returned will be an estimate based on
	// standard dimensions for the defined package type. eBay enforces a dimensions
	// requirement on listings so that buyers receive accurate calculated shipping
	// costs.
	//
	PackageDepth *MeasureType `xml:"PackageDepth,omitempty"`

	//
	// Length of the package, in whole number of inches, needed to ship the item.
	// Upon mismatch, a message is returned, such as, "Package
	// dimensions exceeds maximum allowable limit for
	// service XXXXX," where XXXXX is the name of the shipping service.
	// For calculated shipping only. Only returned if the seller
	// specified the value for the item. (In many cases, the seller
	// only specifies the weight fields.)
	//
	PackageLength *MeasureType `xml:"PackageLength,omitempty"`

	//
	// Width of the package, in whole number of inches, needed to ship the item.
	// Upon mismatch, a message is returned, such as, "Package
	// dimensions exceeds maximum allowable limit for
	// service XXXXX," where XXXXX is the name of the shipping service.
	// For calculated shipping only. Only returned if the seller
	// specified the value for the item. (In many cases, the seller
	// only specifies the weight fields.)
	//
	PackageWidth *MeasureType `xml:"PackageWidth,omitempty"`

	//
	// Whether a package is irregular and therefore cannot go
	// through the stamping machine at the shipping service office and
	// thus requires special or fragile handling. For calculated
	// shipping only.
	//
	ShippingIrregular bool `xml:"ShippingIrregular,omitempty"`

	//
	// The nature of the package used to ship the item(s).
	// Required for calculated shipping only.
	//
	ShippingPackage *ShippingPackageCodeType `xml:"ShippingPackage,omitempty"`

	//
	// <b>WeightMajor</b> and <b>WeightMinor</b> are used to specify the weight of a
	// shipping package. <b>WeightMajor</b> is used to specify the weight of the package in pounds (in US) or kilograms (all countries that use metric system). Although <b>MeasureType</b> is of decimal type, decimal values should not be used in <b>WeightMajor</b> and <b>WeightMinor</b>. If a shipping package was weighed at 5 pounds and 1.8 ounces, the 1.8 ounces should just be rounded up to an even 2 ounces. So, below is how you would represent a package
	// weight of 5 lbs 2 oz:
	// <br/><br/>
	// <code>
	// &lt;WeightMajor unit="lbs"&gt;5&lt;/WeightMajor&gt;<br/>
	// &lt;WeightMinor unit="oz"&gt;2&lt;/WeightMinor&gt;
	// </code>
	// <br/><br/>
	// If a package weighed 14 ounces, below is how you would represent this weight:
	// <br/><br/>
	// <code>
	// &lt;WeightMajor unit="lbs"&gt;0&lt;/WeightMajor&gt;<br/>
	// &lt;WeightMinor unit="oz"&gt;14&lt;/WeightMinor&gt;
	// </code>
	// <br/><br/>
	// If a package weighed exactly two pounds, below is how you would represent this weight:
	// <br/><br/>
	// <code>
	// &lt;WeightMajor unit="lbs"&gt;2&lt;/WeightMajor&gt;<br/>
	// &lt;WeightMinor unit="oz"&gt;0&lt;/WeightMinor&gt;
	// </code>
	// <br/><br/>
	// In all cases, both the <b>WeightMajor</b> and <b>WeightMinor</b> should be specified in an Add/Revise/Relist/Verify call, even if either's value is '0'.
	// <br><br>
	// The <b>WeightMajor</b> and <b>WeightMinor</b> are applicable for calculated shipping or for flat-rate shipping if shipping rate tables are specified and the shipping rate table uses weight surcharges.
	//
	WeightMajor *MeasureType `xml:"WeightMajor,omitempty"`

	//
	// <b>WeightMajor</b> and <b>WeightMinor</b> are used to specify the weight of a
	// shipping package. <b>WeightMinor</b> is used to specify the weight of the package in ounces (in US) or grams (all countries that use metric system). Although <b>MeasureType</b> is of decimal type, decimal values should not be used in <b>WeightMajor</b> and <b>WeightMinor</b>. If a shipping package was weighed at 5 pounds and 1.8 ounces, the 1.8 ounces should just be rounded up to an even 2 ounces. So, below is how you would represent a package
	// weight of 5 lbs 2 oz:
	// <br/><br/>
	// <code>
	// &lt;WeightMajor unit="lbs"&gt;5&lt;/WeightMajor&gt;<br/>
	// &lt;WeightMinor unit="oz"&gt;2&lt;/WeightMinor&gt;
	// </code>
	// <br/><br/>
	// If a package weighed 14 ounces, below is how you would represent this weight:
	// <br/><br/>
	// <code>
	// &lt;WeightMajor unit="lbs"&gt;0&lt;/WeightMajor&gt;<br/>
	// &lt;WeightMinor unit="oz"&gt;14&lt;/WeightMinor&gt;
	// </code>
	// <br/><br/>
	// If a package weighed exactly two pounds, below is how you would represent this weight:
	// <br/><br/>
	// <code>
	// &lt;WeightMajor unit="lbs"&gt;2&lt;/WeightMajor&gt;<br/>
	// &lt;WeightMinor unit="oz"&gt;0&lt;/WeightMinor&gt;
	// </code>
	// <br/><br/>
	// In all cases, both the <b>WeightMajor</b> and <b>WeightMinor</b> should be specified in an Add/Revise/Relist/Verify call, even if either's value is '0'.
	// <br><br>
	// The <b>WeightMajor</b> and <b>WeightMinor</b> are applicable for calculated shipping or for flat-rate shipping if shipping rate tables are specified and the shipping rate table uses weight surcharges.
	//
	WeightMinor *MeasureType `xml:"WeightMinor,omitempty"`
}

type ShipmentLineItemType struct {

	//
	// Contains information about one order line item in a Global Shipping Program package. The package can contain multiple units of a given order line item, and multiple order line items.
	//
	LineItem []*LineItemType `xml:"LineItem,omitempty"`
}

type ShipmentTrackingDetailsType struct {

	//
	// The name of the shipping carrier used to ship the item. This field and the <strong>ShipmentTrackingNumber</strong> field are mutually dependent. When you submit <strong>ShippingCarrierUsed</strong>, you must also supply a value for <strong>ShipmentTrackingNumber</strong>. When you submit <strong>ShipmentTrackingNumber</strong>, you must also supply a value for <strong>ShippingCarrierUsed</strong>.
	// <br/><br/>
	// When the site ID is Austria, Poland, or UK, <strong>ShippingCarrierUsed</strong> can be any value, because it is not checked by eBay. For all other sites, only the following  characters are allowed: letters (<code>a-z</code>, <code>A-Z</code>), numbers (<code>0-9</code>), space, and dash (<code>-</code>). The site ID is specified in the <b>CompleteSale</b> request header.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Commonly used shipping carriers can be found by calling <b>GeteBayDetails</b> with <b>DetailName</b> set to <code>ShippingCarrierDetails</code> and examining the returned <b>ShippingCarrierDetails.ShippingCarrier</b> field. <a href="http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/types/ShippingCarrierCodeType.html">ShippingCarrierCodeType</a> also has a list of valid shipping carriers, but eBay cannot guarantee that this enumerated type contains a full, updated list of shipping carriers.
	// </span>
	// <strong>For the CompleteSale call</strong>:
	// <ul>
	// <li>This field is not case sensitive in the <strong>CompleteSale</strong> request.</li>
	// <li>When using UPS Mail Innovations, supply the value <code>UPS-MI</code>. Buyers will subsequently be sent to the UPS Mail Innovations website for tracking status. </li>
	// <li>When using FedEx SmartPost, supply the value <code>FedEx</code>. Buyers will subsequently be sent to the FedEx web site for tracking status. </li>
	// </ul>
	// <strong>For the Get calls</strong>: When using the Global Shipping Program, this field returns a value of <code>PBI</code>.
	//
	ShippingCarrierUsed string `xml:"ShippingCarrierUsed,omitempty"`

	//
	// The tracking number assigned by the shipping carrier to the item shipment. This field and the <b>ShippingCarrierUsed</b> field are mutually dependent. When you submit <strong>ShipmentTrackingNumber</strong>, you must also supply a value for <strong>ShippingCarrierUsed</strong>. When you submit <strong>ShippingCarrierUsed</strong>, you must also supply a value for <strong>ShipmentTrackingNumber</strong>.
	// <br/><br/>
	// The format of the tracking number must be consistent with the format used by the specified shipping carrier (<strong>ShippingCarrierUsed</strong>). Typically, you should avoid spaces and hyphens.
	// Returned only if set.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the real tracking number is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	ShipmentTrackingNumber string `xml:"ShipmentTrackingNumber,omitempty"`

	//
	// Contains information about one or more order line items in a Global Shipping Program package. Required or returned if the value of <strong>ShippingCarrierUsed</strong> is <code>PBI</code>.
	//
	ShipmentLineItem *ShipmentLineItemType `xml:"ShipmentLineItem,omitempty"`
}

type ShipmentType struct {
	EstimatedDeliveryDate time.Time `xml:"EstimatedDeliveryDate,omitempty"`

	InsuredValue *AmountType `xml:"InsuredValue,omitempty"`

	//
	// Depth dimension of the package needed to ship the item after it is sold.
	// <br>
	// For calculated shipping only.
	//
	PackageDepth *MeasureType `xml:"PackageDepth,omitempty"`

	//
	// Length dimension of the package needed to ship the item after it is sold.
	// <br>
	// For calculated shipping only.
	//
	PackageLength *MeasureType `xml:"PackageLength,omitempty"`

	//
	// Width dimension of the package needed to ship the item after it is sold.
	// <br>
	// For calculated shipping only.
	//
	PackageWidth *MeasureType `xml:"PackageWidth,omitempty"`

	PayPalShipmentID string `xml:"PayPalShipmentID,omitempty"`

	ShipmentID int64 `xml:"ShipmentID,omitempty"`

	PostageTotal *AmountType `xml:"PostageTotal,omitempty"`

	PrintedTime time.Time `xml:"PrintedTime,omitempty"`

	//
	// The address from which the item is being shipped.
	//
	ShipFromAddress *AddressType `xml:"ShipFromAddress,omitempty"`

	//
	// The address to which the item is to be shipped.
	//
	ShippingAddress *AddressType `xml:"ShippingAddress,omitempty"`

	//
	// This field is deprecated.
	//
	ShippingCarrierUsed string `xml:"ShippingCarrierUsed,omitempty"`

	ShippingFeature []*ShippingFeatureCodeType `xml:"ShippingFeature,omitempty"`

	//
	// The size of the package used to ship the item(s). See ShippingPackageCodeType
	// for its possible values. Input.
	//
	ShippingPackage *ShippingPackageCodeType `xml:"ShippingPackage,omitempty"`

	//
	// The size of the package used to ship the item(s). See ShippingPackageCodeType
	// for its possible values. Input.
	//
	ShippingServiceUsed string `xml:"ShippingServiceUsed,omitempty"`

	//
	// This field is deprecated.
	//
	ShipmentTrackingNumber string `xml:"ShipmentTrackingNumber,omitempty"`

	//
	// The 'unit' attribute can have a value of lbs.
	//
	WeightMajor *MeasureType `xml:"WeightMajor,omitempty"`

	//
	// The 'unit' attribute is optional and assumed to be the
	// minor compared to the value of 'unit' in WeightMajor.
	//
	WeightMinor *MeasureType `xml:"WeightMinor,omitempty"`

	ItemTransactionID []*ItemTransactionIDType `xml:"ItemTransactionID,omitempty"`

	//
	// Revise only
	//
	DeliveryDate time.Time `xml:"DeliveryDate,omitempty"`

	//
	// Revise only
	//
	DeliveryStatus *ShipmentDeliveryStatusCodeType `xml:"DeliveryStatus,omitempty"`

	//
	// Revise only
	//
	RefundGrantedTime time.Time `xml:"RefundGrantedTime,omitempty"`

	//
	// Revise only
	//
	RefundRequestedTime time.Time `xml:"RefundRequestedTime,omitempty"`

	//
	// Status, for revise only
	//
	Status *ShipmentStatusCodeType `xml:"Status,omitempty"`

	//
	// The date and time that the seller handed off the package(s) to the shipping
	// carrier. If this field is not included in the request, the timestamp of the call
	// execution is used as the shipped time. Note that sellers have the ability to set
	// this value up to 3 calendar days in the future.
	//
	ShippedTime time.Time `xml:"ShippedTime,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field is only applicable for Half.com listings, and since API support for Half.com listings is being deprecated, this field is no longer applicable.
	// </span>
	// This string field allows a seller to provide notes to the buyer regarding shipment of a Half.com item. Only alphanumeric characters can be used in this field. This is an optional field that is only applicable to Half.com items.
	//
	Notes string `xml:"Notes,omitempty"`

	//
	// Container consisting of the tracking number and shipping carrier associated with
	// the shipment of one item (package).
	// <br><br>
	// Because an order can have multiple line items and/or packages, there can be
	// multiple <b>ShipmentTrackingDetails</b> containers under the
	// <b>Shipment</b> container.
	//
	ShipmentTrackingDetails []*ShipmentTrackingDetailsType `xml:"ShipmentTrackingDetails,omitempty"`

	//
	// Contains information about one or more order line items in a Global Shipping Program package. Required or returned if the value of <strong>ShippingCarrierUsed</strong> is <code>PBI</code>.
	//
	ShipmentLineItem *ShipmentLineItemType `xml:"ShipmentLineItem,omitempty"`
}

type ShippingCarrierDetailsType struct {

	//
	// Numeric identifier.
	// Some applications use this ID
	// to look up shipping Carriers more efficiently.
	//
	ShippingCarrierID int32 `xml:"ShippingCarrierID,omitempty"`

	//
	// Display string that applications can use to present a list of shipping carriers in
	// a more user-friendly format (such as in a drop-down list).
	//
	Description string `xml:"Description,omitempty"`

	//
	// The code for the shipping carrier.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Commonly used shipping carriers can also be found by calling <b>GeteBayDetails</b> with <b>DetailName</b> set to <code>ShippingCarrierDetails</code> and examining the returned <b>ShippingCarrierDetails.ShippingCarrier</b> field.
	// </span>
	//
	ShippingCarrier *ShippingCarrierCodeType `xml:"ShippingCarrier,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ShippingCategoryDetailsType struct {

	//
	// Indicates the shipping category. Shipping categories include the following: ECONOMY, STANDARD, EXPEDITED, ONE_DAY, PICKUP, OTHER, and NONE. International shipping services are generally grouped into the NONE category. For more information on these shipping categories, and which services fall into which category, see the <a href="http://pages.ebay.com/sellerinformation/shipping/chooseservice.html">Shipping Basics</a> page on the eBay Shipping Center site.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field is returned only for those sites that support shipping categories: US (0), CA (2), CAFR (210), UK (3), AU (15), FR (71), DE (77), IT (101) and ES (186).
	// </span>
	//
	ShippingCategory string `xml:"ShippingCategory,omitempty"`

	//
	// Display string that applications can use to present a list of shipping categories in a more user-friendly format (such as in a drop-down list). This field is localized per site.
	//
	Description string `xml:"Description,omitempty"`

	//
	// The current version number for shipping categories. Sellers can compare this
	// version number to their version number to determine if and when to refresh
	// cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Indicates the time of the last version update.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ShippingCostPaidByDetailsType struct {

	//
	// The party who pays the shipping cost for a returned item.
	// This value can be passed in the Add/Revise/Relist calls.
	//
	ShippingCostPaidByOption string `xml:"ShippingCostPaidByOption,omitempty"`

	//
	// Display string that applications can use to present <b>ShippingCostPaidByOption</b> in a more user-friendly format (such as in a drop-down list). Not applicable as input to the Add/Revise/Relist calls. (Use <b>ShippingCostPaidBy</b> instead.)
	//
	Description string `xml:"Description,omitempty"`
}

type ShippingDetailsType struct {

	//
	// This field is deprecated and has been replaced by the <b>ShippingDetails.PaymentEdited</b> field.
	//
	AllowPaymentEdit bool `xml:"AllowPaymentEdit,omitempty"`

	//
	// This field is deprecated.
	//
	ApplyShippingDiscount bool `xml:"ApplyShippingDiscount,omitempty"`

	//
	// Indicates whether eBay's Global Shipping Program is offered for the listing. If the value of <strong>GlobalShipping</strong> is <code>True</code>, international shipping through the Global Shipping Program is available for the listing, and eBay automatically sets one of the available shipping service options to <code>International Priority Shipping</code>. If the value of <strong>GlobalShipping</strong> is <code>false</code>, the seller is responsible for specifying one or more international shipping service options if the seller is willing to ship internationally.
	// <br/><br/>
	// When calling <strong>RelistFixedPriceItem</strong>, <strong>RelistItem</strong>, <strong>ReviseFixedPriceItem</strong> or <strong>ReviseItem</strong>, you can omit this field if its value doesn't need to change.
	// <br/><br/>
	// Before using this field for a listing, ensure that the seller and the item being listed are eligible for the Global Shipping Program.
	//
	GlobalShipping bool `xml:"GlobalShipping,omitempty"`

	//
	// Details pertinent to one or more items for which calculated shipping has been
	// offered by the seller, such as package dimension and weight and
	// packaging/handling costs. If your call specifies a large-dimension item listed
	// with UPS, see <a href=
	// "https://ebaydts.com/eBayKBDetails?KBid=1159"
	// >Dimensional Weight limit on UPS shipping services results in failure of
	// shipping calculator</a>.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The <strong>CalculatedShippingRate</strong> container should only be used to specify values for the <strong>InternationalPackagingHandlingCosts</strong>, <strong>OriginatingPostalCode</strong>, and/or <strong>PackagingHandlingCosts</strong> fields. The rest of the fields in the <strong>CalculatedShippingRate</strong> container are used to specify package dimensions and package weight, and these values should now be specified in the <strong>ShippingPackageDetails</strong> container instead.
	// </span>
	//
	CalculatedShippingRate *CalculatedShippingRateType `xml:"CalculatedShippingRate,omitempty"`

	//
	// Whether the seller specified payment and shipping instructions during checkout
	// (for example, to update the details of an order). Valid for flat and calculated
	// shipping.
	//
	ChangePaymentInstructions bool `xml:"ChangePaymentInstructions,omitempty"`

	//
	// Whether or not the buyer selected to pay for insurance as an option offered by
	// the seller. This only has a value after the buyer has gone through checkout and
	// selected the insurance preference.
	// <br><br>
	// Valid only on the following sites: FR and IT
	//
	InsuranceWanted bool `xml:"InsuranceWanted,omitempty"`

	//
	// Whether the seller allows the buyer to edit the payment amount for the order.
	// (Sellers enable this property in their My eBay user preferences on the eBay site.)
	//
	PaymentEdited bool `xml:"PaymentEdited,omitempty"`

	//
	// This free-form string field gives sellers the ability add detailed payment instructions to their listings.
	// The payment instructions appear on eBay's View Item and Checkout pages.
	// <br><br>
	// Sellers can use this field to specify payment instructions, how soon the item will shipped, feedback
	// instructions, and other items that the buyer should be aware of when they bid on or buy an item.
	// eBay recommends sellers use this field to clarify payment policies for motor vehicle listings on eBay Motors.
	// For example, sellers can include the specifics on the deposit (if required), pickup/delivery arrangements,
	// and full payment details on the vehicle.
	// <br><br>
	// The field allows only 500 characters as input, but due to the way the eBay web site UI treats characters,
	// this field can return more than 500 characters in the response. For example, characters like & and '
	// (ampersand and single quote) count as 5 characters each.
	// <br><br>
	// This field can be specified regardless of the shipping type. Use <b>DeletedField</b> to remove
	// this value when revising or relisting an item.
	// <br><br>
	// Applicable to eBay Motors (usually used to elaborate on the return policy).
	// <br>
	//
	PaymentInstructions string `xml:"PaymentInstructions,omitempty"`

	//
	// This container shows the sales tax rate percentage for a specific tax jurisdiction. Additionally, it indicates whether or not the seller applies sales tax to shipping charges in addition to the item cost. The concept of 'sales tax' is only applicable to eBay US and Canada (English and French) sites.
	// <br><br>
	// This container can be used in an Add/Revise/Relist/Verify call to set sales tax settings for a specific tax jurisdiction, but it is actually a better practice if a user sets up sales tax rates through the Sales Tax Table tool in My eBay (or by using the <b>SetTaxTable</b> call). A seller's Sales Tax Table is applied to the listing by including the <b>UseTaxTable</b> field in the request and setting its value to <code>true</code>. The <b>GetTaxTable</b> call can be used to retrieve the current sales tax rates for different tax jurisdictions.
	// <br><br>
	// This container is only returned in order-related 'Get' calls if sales tax is applicable to the order line item.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. So, if a sales tax rate is established for a state that is subject to 'eBay Collect and Remit', this sales tax rate will be ignored by eBay during checkout process. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	// </span>
	//
	SalesTax *SalesTaxType `xml:"SalesTax,omitempty"`

	//
	// For most applicable calls, returns the words No Error or returns an error message
	// related to an attempt to calculate shipping rates. For calculated shipping only.
	// <br><br>
	// The message text explains that a postal code is needed to calculate
	// shipping. Only returned when <b>ItemDetails</b> is set to <code>Fine</code>.
	//
	ShippingRateErrorMessage string `xml:"ShippingRateErrorMessage,omitempty"`

	//
	// A shipping rate scale for shipping through USPS that affects the shipping cost calculated for USPS (lower if <strong>ShippingRateType</strong> is <code>DailyPickup</code>). <strong>ShippingRateType</strong> is returned only if the value of <strong>ShippingService</strong> is one of the USPS shipping services. For calculated shipping only.
	//
	ShippingRateType *ShippingRateTypeCodeType `xml:"ShippingRateType,omitempty"`

	//
	// This container is used to provide details on a specific domestic shipping service option, including the unique identifier of the shipping service option and the costs related to domestic shipping service. A separate <b>ShippingServiceOptions</b> container is needed for each domestic shipping service option that is available to ship the item. Unless a fulfillment business policy is being used, generally at least one <b>ShippingServiceOptions</b> container will be required.
	// <br><br>
	// If you specify multiple <b>ShippingServiceOptions</b> nodes, the repeating nodes must be
	// contiguous. For example, you can insert <b>InternationalShippingServiceOption</b> nodes
	// after a list of repeating <b>ShippingServiceOptions</b> nodes, but not between them:
	// <br><br>
	// <code>
	// &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br>
	// &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br>
	// &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br>
	// &lt;InternationalShippingServiceOption&gt;...&lt;/InternationalShippingServiceOption&gt;<br>
	// &lt;InternationalShippingServiceOption&gt;...&lt;/InternationalShippingServiceOption&gt;
	// </code>
	// <br><br>
	// If you specify <b>ShippingDetails</b> when you revise or relist an item but you omit
	// <b>ShippingServiceOptions</b>, eBay will drop the domestic shipping services from the
	// listing. This may also have unintended side effects, as other fields that depend
	// on this data may be dropped as well.
	// <br/><br/>
	// To retain the shipping services and
	// dependent fields when you modify other shipping details, it may be simplest to
	// specify all <b>ShippingDetails</b> that you still want to include in the listing.
	// <br><br>
	// A seller can offer up to four domestic shipping services and up to five
	// international shipping services. However, if the seller is opted in to the Global Shipping Program, only four other international shipping services may be offered (regardless of whether or not Global Shipping is offered for the listing). All specified domestic and international
	// shipping services must be the same shipping type (for example, Flat versus
	// Calculated).
	// <br><br>
	// For <b>GetItemShipping</b>, results are filtered:  if any service is not available
	// in the buyer's region, it is removed. If no services remain after this
	// filtering, a warning is returned.
	//
	ShippingServiceOptions []*ShippingServiceOptionsType `xml:"ShippingServiceOptions,omitempty"`

	//
	// Shipping costs and options related to an international shipping service. If used, at least one domestic shipping service must also be provided in <b>ShippingServiceOptions</b>.
	// <br><br>
	// If you specify multiple <b>InternationalShippingServiceOption</b> nodes, the repeating nodes must be contiguous. That is, you cannot insert other nodes between <b>InternationalShippingServiceOption</b> nodes.
	// <br><br>
	// All specified domestic and international shipping services must be the same shipping type (for example, Flat versus Calculated).
	// <br><br>
	// A seller can offer up to four domestic shipping services and up to five international shipping services. However, if the seller is opted in to the Global Shipping Program, only four other international shipping services may be offered (regardless of whether or not Global Shipping is offered for the listing).
	// <br><br>
	// If you specify <b>ShippingDetails</b> when you revise or relist an item but you omit <b>InternationalShippingServiceOption</b>, eBay will drop the international shipping services (except the Global Shipping Program) from the listing. This may also have unintended side effects, as other fields that depend on this data may be dropped as well. To retain the shipping services and dependent fields when you modify other shipping details, it may be simplest to specify all <b>ShippingDetails</b> that you still want to include in the listing.
	// <br><br>
	// For <b>GetItemShipping</b>, results are filtered:  if any service is not available in the buyer's region, it is removed. If no services remain after this filtering, a warning is returned.
	//
	InternationalShippingServiceOption []*InternationalShippingServiceOptionsType `xml:"InternationalShippingServiceOption,omitempty"`

	//
	// The shipping cost model offered by the seller. This is not returned for
	// various calls since shipping type can be deduced: if a <b>CalculatedShippingRate</b>
	// structure is returned by the call, the shipping type is Calculated. Otherwise,
	// it is one of the other non-Calculated shipping types.
	// <br><br>
	// <b>GetItemShipping and GetItemTransactions</b>:
	// If the type was a mix of flat and calculated services, this is
	// set simply to Flat or Calculated because it is the buyer's
	// selection that results in one of these.
	// <br><br>
	// <b>GetMyeBayBuying</b>:
	// If the seller has set the <b>ShipToLocation</b> to <code>Worldwide</code> for an item, but has not specified any international shipping service options, <code>NotSpecified</code> is returned as the <b>ShippingType</b> value.
	//
	ShippingType *ShippingTypeCodeType `xml:"ShippingType,omitempty"`

	//
	// The sale record ID. Applicable to Selling Manager users.
	// When an item is sold, Selling Manager generates a sale record.
	// A sale record contains buyer information, shipping, and other information.
	// A sale record is displayed in the Sold view in Selling Manager.
	// Each sale record has a sale record ID.
	// <br/><br/>
	// In the following calls,
	// the value for the sale record ID is in the <b>SellingManagerSalesRecordNumber</b> field:
	// <b>GetItemTransactions</b>, <b>GetSellerTransactions</b>, <b>GetOrders</b>, <b>GetOrderTransactions</b>.
	// In the Selling Manager calls, the value for the sale record ID is in the
	// <b>SaleRecordID</b> field.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the real record number is only returned to the buyer or seller, and a dummy value of <code>0</code> will be returned to all third parties.
	// <br/><br/>
	// The sale record ID can be for a single or a multiple line item order.
	//
	SellingManagerSalesRecordNumber int32 `xml:"SellingManagerSalesRecordNumber,omitempty"`

	//
	// This field is deprecated.
	//
	ThirdPartyCheckout bool `xml:"ThirdPartyCheckout,omitempty"`

	//
	// Tax details for a jurisdiction, such as a state or province. If no tax table
	// is associated with the item, a tax table is not returned.
	// <br><br>
	// For <b>GetItem</b>, a tax table is returned if it exists when:
	// <ul>
	// <li><b>DetailLevel</b> is set to <code>ReturnAll</code> or <b>ItemReturnDescription</b> (in this case,
	// the value of <b>IncludeTaxTable</b> does not matter)</li>
	// <li><b>IncludeTaxTable</b> is set to <code>true</code> and <b>DetailLevel</b> is not set or it is set
	// to <code>ItemReturnAttributes</code></li>
	// </ul>
	//
	TaxTable *TaxTableType `xml:"TaxTable,omitempty"`

	//
	// This field is deprecated.
	//
	GetItFast bool `xml:"GetItFast,omitempty"`

	//
	// The shipping service actually used by the seller to ship the item(s) to the
	// buyer.
	//
	ShippingServiceUsed string `xml:"ShippingServiceUsed,omitempty"`

	//
	// The field is deprecated.
	//
	DefaultShippingCost *AmountType `xml:"DefaultShippingCost,omitempty"`

	//
	// On input, this is the ID of the shipping discount to offer for the domestic
	// shipping services (where the shipping discount is either of type
	// <b>FlatShippingDiscount</b> or <b>CalculatedShippingDiscount</b>).
	// <br/><br/>
	// On output, this is the ID
	// of the shipping discount offered and corresponds to whichever is returned:
	// <b>FlatShippingDiscount</b> or <b>CalculatedShippingDiscount</b>. Only returned if the calling user is the seller.
	// <br/><br/>
	// If the user created a shipping discount profile,
	// use the <b>ShippingDiscountProfileID</b>.
	// <br><br>
	// In the <b>RelistItem</b> and <b>ReviseItem</b> family of calls, you can remove the existing
	// <b>ShippingDiscountProfileID</b> associated with the item by supplying a value of 0 (zero).
	// <br><br>
	// Only returned if the calling user is the seller.
	//
	ShippingDiscountProfileID string `xml:"ShippingDiscountProfileID,omitempty"`

	//
	// If a flat rate shipping discount was offered for the domestic shipping
	// services, this contains the details of the flat rate shipping discount.
	// Otherwise, it is not returned. Only returned if the calling user is the seller.
	//
	FlatShippingDiscount *FlatShippingDiscountType `xml:"FlatShippingDiscount,omitempty"`

	//
	// If a calculated shipping discount was offered for the domestic shipping
	// services, this contains the details of the calculated shipping discount.
	// Otherwise, it is not returned. Only returned if the calling user is the seller.
	//
	CalculatedShippingDiscount *CalculatedShippingDiscountType `xml:"CalculatedShippingDiscount,omitempty"`

	//
	// On input, this specifies whether to offer the promotional shipping discount for
	// the domestic shipping services of this listing (only applicable if the seller
	// has a promotional shipping discount in effect at the moment).
	// <br><br>
	// Returned on output only if the seller is making the call. This indicates
	// whether the promotional shipping discount is being offered for the domestic
	// shipping services of this listing (if the listing is still active&#8212;this is only
	// possible if the seller has a promotional shipping discount in effect at the
	// moment) or whether the discount was offered at the time the listing ended.
	//
	PromotionalShippingDiscount bool `xml:"PromotionalShippingDiscount,omitempty"`

	//
	// On input, this is the ID of the shipping discount to offer for the
	// international shipping services (where the shipping discount is either
	// of type <b>FlatShippingDiscount</b> or <b>CalculatedShippingDiscount</b>).
	// <br><br>
	// In the <b>RelistItem</b> and <b>ReviseItem</b> family of calls, you can remove the existing
	// <b>InternationalShippingDiscountProfileID</b> associated with the item by supplying a
	// value of 0 (zero).
	// <br><br>
	// Returned on output only if the seller is making the call. The value is
	// the ID of the shipping discount offered and corresponds to whichever
	// is returned: <b>FlatShippingDiscount</b> or <b>CalculatedShippingDiscount</b>.
	// <br><br>
	// If the user created a shipping discount profile, use
	// <b>InternationalShippingDiscountProfileID</b>.
	//
	InternationalShippingDiscountProfileID string `xml:"InternationalShippingDiscountProfileID,omitempty"`

	//
	// This value is returned only if the seller is making the call. If a flat
	// rate shipping discount was offered for the international shipping
	// services, this contains the details of the flat rate shipping discount.
	// Otherwise, it is not returned.
	//
	InternationalFlatShippingDiscount *FlatShippingDiscountType `xml:"InternationalFlatShippingDiscount,omitempty"`

	//
	// This value is returned only if the seller is making the call. If a
	// calculated shipping discount was offered for the international shipping
	// services, this contains the details of the calculated shipping
	// discount. Otherwise, it is not returned.
	//
	InternationalCalculatedShippingDiscount *CalculatedShippingDiscountType `xml:"InternationalCalculatedShippingDiscount,omitempty"`

	//
	// On input, this specifies whether to offer the promotional shipping
	// discount for the listing's international shipping services (only
	// applicable if the seller has a promotional shipping discount in effect
	// at the moment).
	// <br><br>
	// Returned on output only if the seller is making the call. This value
	// indicates whether the promotional shipping discount is being offered
	// for the international shipping services of this listing (if the listing
	// is still active&#8212;this is only possible if the seller has a promotional
	// shipping discount in effect at the moment) or whether the discount was
	// offered at the time the listing ended.
	//
	InternationalPromotionalShippingDiscount bool `xml:"InternationalPromotionalShippingDiscount,omitempty"`

	//
	// This value is returned only if the seller is making the call. Contains details of the promotional shipping discount, if such is being offered while the listing is active or if it was offered at the time the listing ended.
	//
	PromotionalShippingDiscountDetails *PromotionalShippingDiscountDetailsType `xml:"PromotionalShippingDiscountDetails,omitempty"`

	//
	// This dollar value indicates the money due from the buyer upon delivery of the item.
	// <br><br>
	// This field should only be specified in the request if 'COD' (cash-on-delivery) is a
	// valid payment method for the site and it is included as a <b>PaymentMethods</b>
	// value in the same request.
	// <br><br>
	// This field is only returned if set for the listing.
	// <br><br>
	// To see if 'COD' is a supported payment method for a site, call <b>GetCategoryFeatures</b>, specifying the listing category ID, and including the <b>FeatureID</b> field set to <b>PaymentMethods</b>. Look for
	// a value of 'CashOnPickup' in one of the <b>Category.PaymentMethod</b>
	// fields in the response.
	//
	CODCost *AmountType `xml:"CODCost,omitempty"`

	//
	// Use this field to specify an international country or region, or a special domestic
	// location, such as 'PO Box' (in US) or 'Packstation' (in DE), to where you
	// will not ship the associated item. Repeat this element in the call request for each
	// location that you want to exclude as a shipping destination for your item.
	// <br><br>
	// Set <b>ShipToRegistrationCountry</b> to <code>true</code> to have your <b>ExcludeShipToLocation</b>
	// settings applied to your listing. The locations you have excluded display in
	// the Shipping and Handling section of your item listing.
	// <br><br>
	// If a buyer's primary ship-to location is a location that you have listed as
	// an excluded ship-to location (or if the buyer does not have a primary ship-to
	// location), they will receive an error message if they attempt to buy or place
	// a bid on your item.
	// <br><br>
	// The exclude ship-to location values are eBay regions and countries. To see
	// the valid exclude ship-to locations for a specified site, call <b>GeteBayDetails</b>
	// with <b>DetailName</b> set to <b>ExcludeShippingLocationDetails</b>,
	// and then look for the <b>ExcludeShippingLocationDetails.Location</b> fields in the response.
	// Repeat <b>GeteBayDetails</b> for each site on which you list.
	// <br><br>
	// This field works in conjunction with <b>Item.ShipToLocation</b>s to create a set of
	// international countries and regions to where you will, and will not, ship.
	// You can list a region in the <b>ShipToLocations</b> field, then exclude specific
	// countries within that region with this field (for example, you can specify
	// Africa in <b>ShipToLocations</b>, yet exclude Chad with a <b>ExcludeShipToLocation</b>
	// setting). In addition, if your <b>ShipToLocations</b> is <code>Worldwide</code>, you can use
	// this field to specify both regions and countries that you want to exclude
	// from your shipping destinations.
	// <br><br>
	// You can specify a default set of locations to where you will not ship in My
	// eBay. If you create an Exclude Ship-To List, it is, by default, in effect
	// when you list items. However, if you specify any value in this field on
	// input, it nullifies the default settings in your Exclude Ship-To List. (If
	// you use <b>ExcludeShipToLocation</b> when you list an item, you will need to list
	// all the locations to where you will not ship the associated item, regardless
	// of the default settings in your Exclude Ship-To List.)
	// <br><br>
	// Specify <code>none</code> in this field to override the default Exclude Ship-To List you
	// might have set up in My eBay and indicate that you do not want to exclude any
	// shipping locations from the respective item listing.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// To enable your default Exclude Ship-To List, you must enable Exclude
	// Shipping Locations and Buyer Requirements in your My eBay Site Preferences.
	// For details, see the KnowledgeBase Article <a href=
	// "https://ebaydts.com/eBayKBDetails?KBid=1495"
	// >HowTo: ExcludeShipToLocation</a>.
	// </span>
	//
	ExcludeShipToLocation []string `xml:"ExcludeShipToLocation,omitempty"`

	//
	// Sellers can set up a global Exclude Ship-To List through their My eBay account.
	// The Exclude Ship-To List defines the countries to where the seller does not
	// ship, by default.
	// <br><br>
	// This flag returns true if the Exclude Ship-To List is enabled by the seller for
	// the associated item. If <code>false</code>, the seller's Exclude Ship-To List is either not
	// set up, or it has been overridden by the seller when they listed the item with
	// ExcludeShipToLocation fields.
	// <br><br>
	// In the response, <b>ExcludeShipToLocation</b> fields detail the locations to where the
	// seller will not ship the item, regardless of the value returned in this field.
	//
	SellerExcludeShipToLocationsPreference bool `xml:"SellerExcludeShipToLocationsPreference,omitempty"`

	//
	// Container for the shipping carrier and tracking information associated with the
	// shipment of an order.
	// <br><br>
	// As each package has a unique tracking number, this container should be
	// repeated for each package in the order.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Top-rated sellers must have a record of uploading shipment tracking
	// information (through site or through API) for at least 90 percent of their order line
	// items (purchased by U.S. buyers) to keep their status as Top-rated sellers. For more
	// information on eBay's Top-rated seller program, see the <a href="http://pages.ebay.com/help/sell/top-rated.html">Becoming a Top Rated Seller and qualifying for Top Rated Plus</a> page.
	// </span>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Shipment tracking information does not appear in Merchant Data API's <b>OrderReport</b> or <b>SoldReport</b> responses, because once shipment tracking information is provided to the buyer, the order/order line item is considered acknowledged, and acknowledged orders do not show up in <b>OrderReport</b> or <b>SoldReport</b> responses.
	// </span>
	//
	ShipmentTrackingDetails []*ShipmentTrackingDetailsType `xml:"ShipmentTrackingDetails,omitempty"`

	//
	// This container is used to reference and apply a seller's specific domestic and/or international shipping rate tables to a listing. Shipping rate tables allow sellers to configure specific shipping costs based on the shipping destinations and level of service (e.g. economy, standard, expedited, and one-day). Generally speaking, sellers want to use these shipping rate tables so they can charge a higher shipping cost to the buyer whenever shipping costs are higher for them as well. For example, shipping to Alaska or Hawaii is generally more expensive than shipping to any other of the 48 US states, or in regards to international shipping, shipping to some regions and countries are more expensive than others.
	// <br><br>
	// Sellers configure domestic and international shipping rate tables in My eBay Shipping Preferences. To apply shipping rate tables, the shipping cost type must be flat-rate.
	// <br><br>
	// For domestic shipping rate tables, the three supported domestic regions are Alaska & Hawaii, US Protectorates (e.g. Puerto Rico and Guam), and APO/FPO destinations, which are US military bases/locations outside of the continental US. In addition to setting one flat rate based on the destination and service level, the seller also has the option of adding an extra charge based on the weight of the shipping package, or they can add a surcharge instead. To determine if a domestic shipping rate table is set up for the seller's account, the <b>GetUser</b> call can be used, and then the seller will look for a value of <code>true</code> in the <b>User.SellerInfo.DomesticRateTable</b> field. Although the <b>GetUser</b> call can be used to see if a domestic shipping rate table exists for the seller's account, details of the shipping rate table, including all specified costs for the different regions, can only be viewed and modified in My eBay Shipping Preferences. This functionality is not yet available in any public APIs.
	// <br><br>
	// For international shipping rate tables, specific rates may be set up for any and all of the nine geographical regions and individual countries within those regions. Similar to domestic shipping rate tables, the seller has the option of adding an extra charge based on the weight of the shipping package. Sellers cannot add a surcharge for international shipping. To determine if a international shipping rate table is set up for the seller's account, the <b>GetUser</b> call can be used, and then the seller will look for a value of <code>true</code> in the <b>User.SellerInfo.InternationalRateTable</b> field. Although the <b>GetUser</b> call can be used to see if an international shipping rate table exists for the seller's account, details of the shipping rate table, including all specified costs for the different regions/countries, can only be viewed and modified in My eBay Shipping Preferences. This functionality is not yet available in any public APIs.
	// <br/><br/>
	// If you are applying a domestic or international shipping rate table that specifies a surcharge by weight, you must specify the item weight in the <b>ShippingPackageDetails</b> container's <b>WeightMajor</b> and <b>WeightMinor</b> fields, even though the listing is using flat-rate shipping. Do not use any other fields in the <b>ShippingPackageDetails</b> container because none of those fields are applicable in this use case.
	// <br><br>
	// This container is only returned in the 'Get' calls if one or more shipping rate tables have been applied to the listing, and if the call is being made by the seller who listed the item.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b> The capability to create and use multiple domestic and international shipping rate tables (up to 40 per seller account) has rolled out to the US, Australia, UK, Germany, Canada (English and French), and Italy sites. For other sites, only one domestic and one international shipping rate table may be set up per seller. Whether a seller is using the old default domestic and international shipping rate tables or the new shipping rate tables, these shipping rate tables are set up in My eBay Shipping Preferences or as part of a Shipping Business Policy. If using the Trading API to create a listing that will use the new shipping rate tables, the <b>DomesticRateTableId</b> and <b>InternationalRateTableId</b> fields are used to reference and apply these new shipping rate tables to the listing. If desired, sellers can still use the old default shipping rate tables, but they are not allowed to mix and match old and new shipping rate tables, meaning that they will get an error if they pass in both the old fields (<b>DomesticRateTable</b> and <b>InternationalRateTable</b>) and the new fields (<b>DomesticRateTableId</b> and <b>InternationalRateTableId</b>). The new shipping rate tables have all of the functionality of the old shipping rate tables, plus the seller has access to all domestic regions and not just the special regions (such as Alaska & Hawaii, US Protectorates, and APO/FPO locations in US).</span>
	//
	RateTableDetails *RateTableDetailsType `xml:"RateTableDetails,omitempty"`
}

type ShippingEstimatedDeliveryInfoType struct {

	//
	// This field is not currently in use.
	//
	//
	OriginalDeliveryEstimatedTimeMin time.Time `xml:"OriginalDeliveryEstimatedTimeMin,omitempty"`

	//
	// This field is not currently in use.
	//
	//
	OriginalDeliveryEstimatedTimeMax time.Time `xml:"OriginalDeliveryEstimatedTimeMax,omitempty"`
}

type ShippingInsuranceType struct {

	//
	// Whether the seller offers shipping insurance and, if
	// so, whether the insurance is optional or required. Flat and
	// calculated shipping.
	//
	InsuranceOption *InsuranceOptionCodeType `xml:"InsuranceOption,omitempty"`

	//
	// A pairing of range of item price total and insurance cost.
	// For SetShippingDiscountProfiles, if InsuranceOption is Optional or Required, you must
	// submit all range pairs. For those ranges that do not apply, set the cost to 0.
	//
	FlatRateInsuranceRangeCost []*FlatRateInsuranceRangeCostType `xml:"FlatRateInsuranceRangeCost,omitempty"`
}

type ShippingLocationDetailsType struct {

	//
	// Short name or abbreviation for a region (e.g., Asia) or location (e.g. Japan).
	//
	ShippingLocation string `xml:"ShippingLocation,omitempty"`

	//
	// Display string that applications can use to present a list of shipping locations in
	// a more user-friendly format (such as in a drop-down list). This field is localized
	// in the language of the site.
	//
	Description string `xml:"Description,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ShippingOverrideType struct {

	//
	// This field is reserved for internal or future use.
	//
	//
	//
	ShippingServiceCostOverrideList *ShippingServiceCostOverrideListType `xml:"ShippingServiceCostOverrideList,omitempty"`

	//
	// This field is reserved for internal or future use.
	//
	//
	DispatchTimeMaxOverride int32 `xml:"DispatchTimeMaxOverride,omitempty"`
}

type ShippingPackageDetailsType struct {

	//
	// Numeric identifier.
	// Some applications use this ID to look up shipping packages more efficiently.
	//
	PackageID int32 `xml:"PackageID,omitempty"`

	//
	// Display string that applications can use to present a list of shipping package
	// options in a more user-friendly format (such as in a drop-down list).
	//
	Description string `xml:"Description,omitempty"`

	//
	// A supported value for the site that can be used in the
	// <b>Item.ShippingPackageDetails.ShippingPackage</b> or
	// <b>Item.ShippingDetails.CalculatedShippingRate.ShippingPackage</b> fields
	// of an Add/Revise/Relist API call.
	//
	ShippingPackage *ShippingPackageCodeType `xml:"ShippingPackage,omitempty"`

	//
	// Indicates if the package type is the default for the specified site.
	//
	DefaultValue bool `xml:"DefaultValue,omitempty"`

	//
	// This field is returned as 'true' if the shipping package supports the use of
	// package dimensions.
	//
	DimensionsSupported bool `xml:"DimensionsSupported,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type ShippingPackageInfoType struct {

	//
	// The unique identifier of the store from where the order will be delivered. This field is only applicable to 'In-Store Pickup' and 'Click and Collect' orders.
	//
	StoreID string `xml:"StoreID,omitempty"`

	//
	// This enumeration value indicates whether or not the order has been picked up from the store indicated by the <b>StoreID</b> value. This field is only applicable to 'In-Store Pickup' and 'Click and Collect' orders.
	//
	ShippingTrackingEvent string `xml:"ShippingTrackingEvent,omitempty"`

	//
	// The <b>ScheduledDeliveryTimeMin</b> and <b>ScheduledDeliveryTimeMax</b> timestamps indicate the delivery window for which the buyer can expect to receive the order. The <b>ScheduledDeliveryTimeMin</b> value indicates the earliest time that the buyer can expect to receive the order.
	// <br><br>
	// The <b>ScheduledDeliveryTimeMin</b> and <b>ScheduledDeliveryTimeMax</b> fields will start being returned once the seller marks the order as shipped/provides tracking information. Until then, the <b>EstimatedDeliveryTimeMin</b> and <b>EstimatedDeliveryTimeMax</b> dates are returned instead.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// This field does not appear in Merchant Data API's <b>OrderReport</b> or <b>SoldReport</b> responses, because once shipment tracking information is provided to the buyer, the order/order line item is considered acknowledged, and acknowledged orders do not show up in <b>OrderReport</b> or <b>SoldReport</b> responses.
	// </span>
	//
	ScheduledDeliveryTimeMin time.Time `xml:"ScheduledDeliveryTimeMin,omitempty"`

	//
	// The <b>ScheduledDeliveryTimeMin</b> and <b>ScheduledDeliveryTimeMax</b> timestamps indicate the delivery window for which the buyer can expect to receive the order. The <b>ScheduledDeliveryTimeMax</b> value indicates the latest time that the buyer can expect to receive the order.
	// <br><br>
	// The <b>ScheduledDeliveryTimeMin</b> and <b>ScheduledDeliveryTimeMax</b> fields will start being returned once the seller marks the order as shipped/provides tracking information. Until then, the <b>EstimatedDeliveryTimeMin</b> and <b>EstimatedDeliveryTimeMax</b> dates are returned instead.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// This field does not appear in Merchant Data API's <b>OrderReport</b> or <b>SoldReport</b> responses, because once shipment tracking information is provided to the buyer, the order/order line item is considered acknowledged, and acknowledged orders do not show up in <b>OrderReport</b> or <b>SoldReport</b> responses.
	// </span>
	//
	ScheduledDeliveryTimeMax time.Time `xml:"ScheduledDeliveryTimeMax,omitempty"`

	//
	// This timestamp indicates when the order was actually delivered to the buyer. This field is only returned after the order has been delivered to the buyer.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// This field does not appear in Merchant Data API's <b>OrderReport</b> or <b>SoldReport</b> responses, because once shipment tracking information is provided to the buyer (or marked as shipped), the order/order line item is considered acknowledged, and acknowledged orders do not show up in <b>OrderReport</b> or <b>SoldReport</b> responses.
	// </span>
	//
	ActualDeliveryTime time.Time `xml:"ActualDeliveryTime,omitempty"`

	//
	// The <b>EstimatedDeliveryTimeMin</b> and <b>EstimatedDeliveryTimeMax</b> timestamps indicate the window during which the buyer can expect delivery. The <b>EstimatedDeliveryTimeMin</b> value indicates the earliest date and time that the buyer can expect to receive the order.
	// <br><br>
	// The <b>EstimatedDeliveryTimeMin</b> and <b>EstimatedDeliveryTimeMax</b> dates are only estimates made by eBay, and their accuracy will depend on the seller meeting the handling time deadline. Once the seller ships the order, and marks it as shipped/provides tracking information, the more accurate delivery dates can be found in the the <b>ScheduledDeliveryTimeMin</b> and <b>ScheduledDeliveryTimeMax</b> fields.
	//
	EstimatedDeliveryTimeMin time.Time `xml:"EstimatedDeliveryTimeMin,omitempty"`

	//
	// The <b>EstimatedDeliveryTimeMin</b> and <b>EstimatedDeliveryTimeMax</b> timestamps indicate the window during which the buyer can expect delivery. The <b>EstimatedDeliveryTimeMax</b> value indicates the latest date and time that the buyer can expect to receive the order.
	// <br><br>
	// The <b>EstimatedDeliveryTimeMin</b> and <b>EstimatedDeliveryTimeMax</b> dates are only estimates made by eBay, and their accuracy will depend on the seller meeting the handling time deadline. Once the seller ships the order, and marks it as shipped/provides tracking information, the more accurate delivery dates can be found in the the <b>ScheduledDeliveryTimeMin</b> and <b>ScheduledDeliveryTimeMax</b> fields.
	//
	EstimatedDeliveryTimeMax time.Time `xml:"EstimatedDeliveryTimeMax,omitempty"`

	//
	// This timestamp indicates the latest date/time that the seller should ship the package to ensure that the package arrives to the buyer within the estimated delivery window. This date/time is calculated by adding the handling time (in days) to the purchase time.
	// <br><br>
	// This field is applicable for domestic shipping services, and for Click and Collect orders in the UK and Australia.
	//
	HandleByTime time.Time `xml:"HandleByTime,omitempty"`

	//
	// The <b>MinNativeEstimatedDeliveryTime</b> and <b>MaxNativeEstimatedDeliveryTime</b> timestamps indicate the window during which the buyer can expect delivery based on the seller's handling time and selected shipping service. The <b>MinNativeEstimatedDeliveryTime</b> value indicates the earliest date and time that the buyer can expect to receive the order.
	// <br><br>
	// This field is applicable for domestic shipping services, and for Click and Collect orders in the UK and Australia.
	//
	MinNativeEstimatedDeliveryTime time.Time `xml:"MinNativeEstimatedDeliveryTime,omitempty"`

	//
	// The <b>MinNativeEstimatedDeliveryTime</b> and <b>MaxNativeEstimatedDeliveryTime</b> timestamps indicate the window during which the buyer can expect delivery based on the seller's handling time and selected shipping service. The <b>MaxNativeEstimatedDeliveryTime</b> value indicates the latest date and time that the buyer can expect to receive the order.
	// <br><br>
	// This field is applicable for domestic shipping services, and for Click and Collect orders in the UK and Australia.
	//
	MaxNativeEstimatedDeliveryTime time.Time `xml:"MaxNativeEstimatedDeliveryTime,omitempty"`
}

type ShippingServiceCostOverrideListType struct {

	//
	// A <b>ShippingServiceCostOverride</b> container is required for each domestic and/or international shipping service that is defined in the <b>domesticShippingPolicyInfoService</b> and <b>intlShippingPolicyInfoService</b> containers of the Business Policies shipping profile. Shipping costs include the cost to ship one item, the cost to ship each additional identical item, and any shipping surcharges applicable to domestic shipping services.
	// <br/><br/>
	// Shipping service cost overrides are a listing-level concept, and the shipping costs specified through each <b>ShippingServiceCostOverride</b> container will not change the shipping costs defined for the same shipping services in the Business Policies shipping profile.
	// <br/><br/>
	// To override the shipping costs for each domestic shipping service in the Business Policies shipping profile, the <b>ShippingServiceType</b> field should be set to 'Domestic', and to override the shipping costs for each international shipping service, the <b>ShippingServiceType</b> field should be set to 'International'. For both domestic and international shipping services, the <b>ShippingServicePriority</b> value should match the <b>sortOrderId</b> value for the matching shipping service in the shipping profile. If any of the domestic and/or international shipping service priorities and shipping service options in the Add/Revise/Relist call and Business Policies shipping profile do not match, an error occurs.
	// <br/><br/>
	// If shipping service cost overrides are used in a listing, the <b>ShippingServiceCostOverride</b> container will be returned in the <b>GetSellerList</b> and <b>GetSellingManagerTemplates</b> calls.
	//
	ShippingServiceCostOverride []*ShippingServiceCostOverrideType `xml:"ShippingServiceCostOverride,omitempty"`
}

type ShippingServiceCostOverrideType struct {

	//
	// This integer value maps the particular instance of the <strong>ShippingServiceCostOverride</strong> container to the <strong>domesticShippingPolicyInfoService</strong> or <strong>intlShippingPolicyInfoService</strong> container of the Business Policies shipping profile. The <strong>ShippingServicePriority</strong> value should match the <strong>sortOrderId</strong> value for the matching shipping service in the Business Policies shipping profile. If overriding the shipping costs for domestic shipping services, the <strong>ShippingServiceType</strong> field should be set to 'Domestic', and to override the shipping costs for international shipping services, the <strong>ShippingServiceType</strong> field should be set to 'International'.
	// <br/><br/>
	// If any of the domestic and/or international shipping service priorities and shipping service options in the Add/Revise/Relist call and Business Policies shipping profile do not match, an error occurs.
	//
	ShippingServicePriority int32 `xml:"ShippingServicePriority,omitempty"`

	//
	// This enumerated value indicates whether domestic or international shipping costs are being overridden. To override the shipping costs for each domestic shipping service in the Business Policies shipping profile, this field should be set to 'Domestic', and to override the shipping costs for each international shipping service, this field should be set to 'International'.
	//
	ShippingServiceType *ShippingServiceType `xml:"ShippingServiceType,omitempty"`

	//
	// This dollar value indicates the shipping service cost to ship one item to the buyer. If the shipping service costs override operation is successful, this value will override the corresponding <strong>shippingServiceCost</strong> value set in the <strong>domesticShippingPolicyInfoService</strong> (domestic shipping service) or <strong>intlShippingPolicyInfoService</strong> (international shipping service) containers in the Business Policies shipping profile.
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// This dollar value indicates the cost to ship each additional identical item to the buyer. If the shipping service costs override operation is successful, this value will override the corresponding <strong>shippingServiceAdditionalCost</strong> value set in the <strong>domesticShippingPolicyInfoService</strong> (domestic shipping service) or <strong>intlShippingPolicyInfoService</strong> (international shipping service) containers in the Business Policies shipping profile.
	// <br/><br/>
	// This field is only applicable to multi-quantity, fixed-price listings.
	//
	ShippingServiceAdditionalCost *AmountType `xml:"ShippingServiceAdditionalCost,omitempty"`

	//
	// This dollar value indicates the shipping surcharge applicable to the domestic shipping service. If the shipping service costs override operation is successful, this value will override the corresponding <strong>shippingSurcharge</strong> value set in the <strong>domesticShippingPolicyInfoService</strong> container in the Business Policies shipping profile.
	// <br/><br/>
	// This field can only be used if the shipping surcharges are applicable for the corresponding shipping service.
	//
	ShippingSurcharge *AmountType `xml:"ShippingSurcharge,omitempty"`
}

type ShippingServiceDetailsType struct {

	//
	// Display string that applications can use to present a list of shipping service
	// options in a more user-friendly format (such as in a drop-down list).
	//
	Description string `xml:"Description,omitempty"`

	//
	// Indicates whether the shipping service is an expedited shipping service. This field is only returned if the shipping service is an expedited shipping service (value=<code>true</code>). Expedited generally means that the shipment can arrive at the buyer's location within one or two business days.
	//
	ExpeditedService bool `xml:"ExpeditedService,omitempty"`

	//
	// Indicates whether the shipping service is an international shipping service.
	// An international shipping service option is required if an item is being
	// shipped from one country (origin) to another (destination).
	//
	InternationalService bool `xml:"InternationalService,omitempty"`

	//
	// The name of shipping service option. The ShippingServiceDetails.<strong>ValidForSellingFlow</strong> flag must also be present and <code>true</code>. Otherwise, that particular shipping service option is no longer valid and cannot be offered to buyers through a listing.
	// <br/><br/>
	// This token value is the text that a seller will provide in the ShippingDetails.ShippingServiceOptions.<strong>ShippingService</strong> field when creating a listing.
	//
	ShippingService string `xml:"ShippingService,omitempty"`

	//
	// Numeric identifier. A value greater than 50000 represents an
	// international shipping service (confirmed by
	// <strong>InternationalShippingService</strong> being true). Some applications use this ID
	// to look up shipping services more efficiently.
	//
	ShippingServiceID int32 `xml:"ShippingServiceID,omitempty"`

	//
	// The integer value returned here indicates the maximum number of business days that the shipping carrier (indicated in the corresponding <b>ShippingCarrier</b> field) will take to ship an item using the corresponding shipping service option (indicated in the <b>ShippingService</b> field).
	// <br><br>
	// This maximum shipping time does not include the seller's handling time, and the clock starts on the shipping time only after the seller has delivered the item to the shipping carrier for shipment to the buyer. 'Business days' can vary by shipping carrier and by country, but 'business days' are generally Monday through Friday, excluding holidays. This field is returned if defined for that particular shipping service option.
	// <br><br>
	// For sellers opted into and using eBay Guaranteed Delivery, they should be looking at this value, and this value plus their handling time stated in the listing cannot be greater than 4 business days in order for that listing to be eligible for eBay Guaranteed Delivery.
	//
	ShippingTimeMax int32 `xml:"ShippingTimeMax,omitempty"`

	//
	// The integer value returned here indicates the minimum number of business days that the shipping carrier (indicated in the corresponding <b>ShippingCarrier</b> field) will take to ship an item using the corresponding shipping service option (indicated in the <b>ShippingService</b> field).
	// <br><br>
	// This minimum shipping time does not include the seller's handling time, and the clock starts on the shipping time only after the seller has delivered the item to the shipping carrier for shipment to the buyer. 'Business days' can vary by shipping carrier and by country, but 'business days' are generally Monday through Friday, excluding holidays. This field is returned if defined for that particular shipping service option.
	//
	ShippingTimeMin int32 `xml:"ShippingTimeMin,omitempty"`

	//
	// For future use.
	//
	ShippingServiceCode *ShippingServiceCodeType `xml:"ShippingServiceCode,omitempty"`

	//
	// The shipping cost types that this shipping service option supports, such as flat-rate or calculated. A <strong>ServiceType</strong> field is returned for each shipping cost type supported by the shipping service option.
	//
	ServiceType []*ShippingTypeCodeType `xml:"ServiceType,omitempty"`

	//
	// The shipping packages that can be used for this shipping service option. A <strong>ShippingPackage</strong> field is returned for each shipping package supported by the shipping service option.
	//
	ShippingPackage []*ShippingPackageCodeType `xml:"ShippingPackage,omitempty"`

	//
	// This field is only returned if the shipping service option requires that package dimensions are provided by the seller. This field is only returned if 'true'.
	//
	DimensionsRequired bool `xml:"DimensionsRequired,omitempty"`

	//
	// If this field is returned as 'true', the shipping service option can be used in a Add/Revise/Relist API call. If this field is returned as 'false', the shipping service option is not currently supported and cannot be used in a Add/Revise/Relist API call.
	//
	ValidForSellingFlow bool `xml:"ValidForSellingFlow,omitempty"`

	//
	// This field is only returned if 'true', and indicates that a shipping surcharge is applicable for this shipping service option.
	//
	SurchargeApplicable bool `xml:"SurchargeApplicable,omitempty"`

	//
	// The enumeration value for the shipping carrier associated with the shipping service option.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Commonly used shipping carriers can also be found by calling <b>GeteBayDetails</b> with <b>DetailName</b> set to <code>ShippingCarrierDetails</code> and examining the returned <b>ShippingCarrierDetails.ShippingCarrier</b> field.
	// </span>
	//
	ShippingCarrier []*ShippingCarrierCodeType `xml:"ShippingCarrier,omitempty"`

	//
	// This field is only returned if'true', and indicates that the corresponding <b>ShippingServiceDetails.ShippingService</b> value is a COD (Cash-On-Delivery) service.
	// <br/><br/>
	// COD shipping services are not supported by all sites.
	//
	CODService bool `xml:"CODService,omitempty"`

	//
	// A mechanism by which details about deprecation of a shipping service is
	// announced. See also MappedToShippingServiceID.
	// If this container is empty, it means that there is no mapping for this
	// shipping service and that the shipping service will be dropped from the
	// listing without an accompanying warning message from the eBay API.
	//
	DeprecationDetails []*AnnouncementMessageType `xml:"DeprecationDetails,omitempty"`

	//
	// The ID of another shipping service that will be used when a
	// shipping service is deprecated. See also DeprecationDetails.
	//
	MappedToShippingServiceID int32 `xml:"MappedToShippingServiceID,omitempty"`

	//
	// If returned, this is the shipping service group to which the shipping service belongs. Valid values are found in CostGroupFlatCodeType.
	//
	CostGroupFlat string `xml:"CostGroupFlat,omitempty"`

	//
	// Shipping Package level details for the enclosing shipping service, this
	// complex type replaces the existing ShippingPackage type.
	//
	ShippingServicePackageDetails []*ShippingServicePackageDetailsType `xml:"ShippingServicePackageDetails,omitempty"`

	//
	// If true, a seller who selects this package type for the listing and then offers this shipping service must specify WeightMajor and WeightMinor in the item definition. If not returned, WeightRequired is false.
	//
	WeightRequired bool `xml:"WeightRequired,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`

	//
	// Indicates the shipping category. Shipping categories include the following: <code>ECONOMY</code>, <code>STANDARD</code>, <code>EXPEDITED</code>, <code>ONE_DAY</code>, <code>PICKUP</code>, <code>OTHER</code>, and <code>NONE</code>. International shipping services are generally grouped into the <code>NONE</code> category. For more information about these shipping categories, see the <a href="http://pages.ebay.com/sellerinformation/shipping/chooseservice.html">Shipping Basics</a> page on the eBay Shipping Center site.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This field is returned only for those sites that support shipping categories: US (0), CA (2), CAFR (210), UK (3), AU (15), FR (71), DE (77), IT (101) and ES (186).
	// </span>
	//
	ShippingCategory string `xml:"ShippingCategory,omitempty"`
}

type ShippingServiceOptionsType struct {

	//
	// This field is no longer applicable as it is not longer possible for a seller to offer a buyer shipping insurance.
	//
	ShippingInsuranceCost *AmountType `xml:"ShippingInsuranceCost,omitempty"`

	//
	// This enumeration value indicates a specific domestic shipping service option being offered by the seller to ship an item to a buyer who is located within the same country as the item. This field is required to identify each domestic shipping service option that is specified with a <b>ShippingServiceOptions</b> container.
	// <br><br>
	// For a list of valid <b>ShippingService</b> values, call  <b>GeteBayDetails</b>
	// with <b>DetailName</b> set to <code>ShippingServiceDetails</code>. The
	// <b>ShippingServiceDetails.ValidForSellingFlow</b> flag must also be present. Otherwise,
	// that particular shipping service option is no longer valid and cannot be offered
	// to buyers through a listing.
	// <br><br>
	// To view the full list of domestic shipping service options in the response, look for the
	// <b>ShippingServiceDetails.ShippingService</b> fields. Domestic shipping service options will
	// not have a <b>InternationalService</b> = <code>true</code> field, as this indicates that the <b>ShippingService</b>
	// value is an International shipping service option.
	// <br><br>
	// For flat and calculated shipping.
	// <br><br>
	// If there are two or more services and one is "pickup", "pickup"
	// must not be specified as the first service.
	//
	ShippingService string `xml:"ShippingService,omitempty"`

	//
	// The base cost of shipping one unit of the item using the shipping service specified in the corresponding <b>ShippingService</b> field.
	// <br>
	// <br>
	// In the case of a multiple-quantity, fixed-price listing, the <b>ShippingServiceAdditionalCost</b> field also becomes applicable, and shows the cost to ship each additional unit of the item if the buyer purchases multiple quantity of the same line item.
	// <br>
	// <br>
	// <span class="tablenote"><strong>Note:</strong>
	// If the corresponding shipping service option is set as a 'free shipping' option (<b>FreeShipping=true</b>), the seller still needs to include this <b>ShippingServiceCost</b> field and set its value to <code>0.0</code>, as eBay will not do this automatically.
	// </span>
	// When returned by <b>GetItemShipping</b>, it includes the packaging and
	// handling cost. For flat and calculated shipping.
	// <br>
	// <br>
	// Note that if <b>ShippingService</b> is set to <code>LocalPickup</code>, <b>ShippingServiceCost</b> must be set to <code>0.0</code>. Also, if a shipping service has been specified (even <b>LocalPickup</b>), <b>GetItem</b> returns
	// the shipping service cost, even if the cost is zero.
	// <br>
	// <br>
	// If this is for calculated shipping for a listing that has not
	// yet ended, note that the cost cannot be determined until the listing
	// has ended and the buyer has specified a postal code.
	// <br>
	// <br>
	// For <b>GetItemShipping</b>, promotional shipping savings is reflected in the cost, if
	// applicable.
	// <b></b>
	// <ul>
	// <li>If the promotional shipping option is lower than other shipping
	// services being offered, the savings is reflected in the returned shipping
	// cost. The shipping service named Promotional Shipping Service (or whatever is
	// the localized name for it) is included among the shipping services.</li>
	// <li>If the promotional shipping cost is lower than the cost of other shipping
	// services being offered, it is presented first in the list. (The LOWEST shipping
	// service cost is always presented first, regardless of whether there is
	// promotional shipping.) </li>
	// </ul>
	//
	ShippingServiceCost *AmountType `xml:"ShippingServiceCost,omitempty"`

	//
	// The cost of shipping each additional item if the same buyer purchases multiple quantity of the same line item. This field is required when creating a multiple-quantity, fixed-price listing. Generally, the seller will give the buyer a shipping discount if that buyer purchases multiple quantity of the item, so this value should usually be less than the value set for <b>ShippingServiceCost</b>.
	// <br/><br/>
	// The value of this field can even be set to <code>0</code> if the seller wants to encourage buyers to buy multiple quantity of the item, or it could be that the seller can fit multiple quantities of the line item in a single shipping package, so the seller is just passing this shipping savings onto the buyer.  This field is not applicable for single-quantity listings.
	//
	ShippingServiceAdditionalCost *AmountType `xml:"ShippingServiceAdditionalCost,omitempty"`

	//
	// Controls the order (relative to other shipping services) in
	// which the corresponding <b>ShippingService</b> will appear in the View Item and
	// Checkout page.
	// <br/><br/>
	// Sellers can specify up to four domestic shipping services (with
	// four <b>ShippingServiceOptions</b> containers), so valid values are 1, 2, 3, and 4. A
	// shipping service with a <b>ShippingServicePriority</b> value of 1 appears at the top.
	// Conversely, a shipping service with a <b>ShippingServicePriority</b> value of 4 appears
	// at the bottom of a list of four shipping service options.
	// <br><br>
	// This field is applicable to Flat and Calculated shipping.
	//
	ShippingServicePriority int32 `xml:"ShippingServicePriority,omitempty"`

	//
	// Indicates whether the service is an expedited shipping service.
	//
	ExpeditedService bool `xml:"ExpeditedService,omitempty"`

	//
	// The integer value returned here indicates the minimum number of business days that the shipping service (indicated in the corresponding <b>ShippingService</b> field) will take to be delivered to the buyer.
	// <br><br>
	// This minimum shipping time does not include the seller's handling time, and the clock starts on the shipping time only after the seller has delivered the item to the shipping carrier for shipment to the buyer. 'Business days' can vary by shipping carrier and by country, but 'business days' are generally Monday through Friday, excluding holidays. This field is returned if defined for that particular shipping service option.
	//
	ShippingTimeMin int32 `xml:"ShippingTimeMin,omitempty"`

	//
	// The integer value returned here indicates the maximum number of business days that the shipping service (indicated in the corresponding <b>ShippingService</b> field) will take to be delivered to the buyer.
	// <br><br>
	// This maximum shipping time does not include the seller's handling time, and the clock starts on the shipping time only after the seller has delivered the item to the shipping carrier for shipment to the buyer. 'Business days' can vary by shipping carrier and by country, but 'business days' are generally Monday through Friday, excluding holidays. This field is returned if defined for that particular shipping service option.
	//
	ShippingTimeMax int32 `xml:"ShippingTimeMax,omitempty"`

	//
	// An additional fee to charge US buyers who have the item shipped via UPS or FedEx to Alaska, Hawaii
	// or Puerto Rico. Can only be assigned a value for the eBay US site and for
	// items in the Parts and Accessories category of the eBay Motors site. Only returned if set.
	// If some line items in an order have a surcharge, surcharge is added
	// only for those line items.
	// Flat rate shipping only.
	//
	ShippingSurcharge *AmountType `xml:"ShippingSurcharge,omitempty"`

	//
	// This boolean field indicates whether or not the corresponding domestic shipping service option is free to the buyer. In an Add/Revise/Relist call, free shipping can only be offered for the first specified shipping service (so, the corresponding <b>ShippingServicePriority</b> value should be <code>1</code> or included first in the call request). If 'free shipping' is for any other shipping service, this field is ignored.
	// <br/><br/>
	// For 'Get' calls, including <b>GetItem</b>, this field is only returned if <code>1</code>.
	// <br/><br/>
	// <span class="tablenote"><strong>Note:</strong>
	// If a seller is specifying a shipping service option as 'free shipping', in addition to this <b>FreeShipping</b> boolean field, the seller will also need to include the corresponding <b>ShippingServiceCost</b> field and set its value to <code>0.0</code>, as eBay will not do this automatically.
	// </span>
	//
	FreeShipping bool `xml:"FreeShipping,omitempty"`

	//
	// The <b>LocalPickup</b> flag is used by the <b>GetMyEbayBuying</b> and <b>GetMyEbaySelling</b> calls to indicate whether the buyer has selected local pickup as the shipping option or the seller has specified local pickup as the first shipping option.
	// The <b>LocalPickup</b> flag can also be used with other fields to indicate if there is  no fee for local pickup.
	// <br/><br/>
	// For example, if the <b>LocalPickup</b> flag is used with the <b>ShippingServiceOptions</b> and <b>ShippingServiceCost</b> fields, the seller can indicate that local pickup is an available option and that no is fee charged. This is the equivalent of free shipping.
	//
	LocalPickup bool `xml:"LocalPickup,omitempty"`

	//
	// The total cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This amount is calculated and supplied for each item by the international shipping provider when a buyer views the item properties.
	//
	ImportCharge *AmountType `xml:"ImportCharge,omitempty"`

	//
	// This container is returned in order management calls.
	// <br/><br/>
	// If the order is being delivered through eBay On Demand Delivery, it contains information on the status of the order, the unique identifier of the store where the order is originating from, and the expected and actual delivery times.
	// <br/><br/>
	// For other orders, this container only returns an estimated delivery window.
	// <br/><br/>
	// <span class="tablenote"><strong>Note:</strong>
	// eBay Now has been officially retired in all US locations, so this field is no longer applicable for US listings. However, a feature similar to eBay Now, called 'eBay On Demand Delivery', is available in some parts of London, so this field is still applicable on the eBay UK site.
	// </span>
	//
	ShippingPackageInfo []*ShippingPackageInfoType `xml:"ShippingPackageInfo,omitempty"`

	//
	// The last time of day that an order using the specified shipping service will be accepted by the seller for the current listing. The cut off time applies and is returned only when the <strong>ShippingService</strong> field contains the name of a qualifying time-sensitive shipping service, such as <code>eBayNowImmediateDelivery</code>.
	// <br/><br/>
	// The cut off time is set by eBay and determined in part by the policies and locations of the seller and the shipping carrier.
	//
	ShippingServiceCutOffTime time.Time `xml:"ShippingServiceCutOffTime,omitempty"`

	//
	// Reserved for internal or future use.
	//
	LogisticPlanType string `xml:"LogisticPlanType,omitempty"`
}

type ShippingServicePackageDetailsType struct {

	//
	// The name of the package type.
	//
	Name *ShippingPackageCodeType `xml:"Name,omitempty"`

	//
	// This field is only returned if package dimensions are required for the corresponding
	// package type (<b>ShippingServicePackageDetails.Name</b> value) supported
	// by the corresponding shipping service option
	// (<b>ShippingServiceDetails.ShippingService</b> value).
	//
	DimensionsRequired bool `xml:"DimensionsRequired,omitempty"`
}

type ShippingTermRequiredDefinitionType struct {
}

type SiteBuyerRequirementDetailsType struct {

	//
	// <span class="tablenote"><b>Note: </b>
	// This field is no longer applicable, as sellers can no longer set the Buyer Requirement that buyers must have a PayPal account linked to their eBay account in order to purchase an item.
	// </span>
	//
	LinkedPayPalAccount bool `xml:"LinkedPayPalAccount,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b>
	// This field is no longer applicable, as sellers can no longer set the Buyer Requirement that buyers must have only a certain amount of buyer policy violations within a specified amount of time in order to purchase an item.
	// </span>
	//
	MaximumBuyerPolicyViolations *MaximumBuyerPolicyViolationsDetailsType `xml:"MaximumBuyerPolicyViolations,omitempty"`

	//
	// This container shows the supported values that can be set as the <b>MaximumItemCount</b> and <b>MinimumFeedbackScore</b> to help control inexperienced or low Feedback bidders/buyers from bidding on or buying an item in a listing.
	//
	MaximumItemRequirements *MaximumItemRequirementsDetailsType `xml:"MaximumItemRequirements,omitempty"`

	//
	// This container shows the supported values that can be set as the Maximum Unpaid Item count and period (number of days) to block buyers who have recent Unpaid Item Strikes from bidding on or buying an item in a listing.
	//
	MaximumUnpaidItemStrikesInfo *MaximumUnpaidItemStrikesInfoDetailsType `xml:"MaximumUnpaidItemStrikesInfo,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b>
	// This field is no longer applicable, as sellers can no longer set a buyer's Minimum Feedback Score threshold Buyer Requirement at the listing-level in Add/Revise/Relist calls.
	// </span>
	//
	MinimumFeedbackScore *MinimumFeedbackScoreDetailsType `xml:"MinimumFeedbackScore,omitempty"`

	//
	// A <code>true</code> value returned in this field indicates that the <b>ShipToRegistrationCountry</b> Buyer Requirement is supported for the specified site.
	//
	ShipToRegistrationCountry bool `xml:"ShipToRegistrationCountry,omitempty"`

	//
	// The Verified User Buyer Requirement has been deprecated, so this field is no longer applicable.
	//
	VerifiedUserRequirements *VerifiedUserRequirementsDetailsType `xml:"VerifiedUserRequirements,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT when the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type SiteDefaultsType struct {

	//
	// Specifies the ID of a set of default durations for a certain type of listing.
	// The actual duration values are returned within the FeatureDefinitions node.
	// The type of listing is named in the type attribute.
	//
	ListingDuration []*ListingDurationReferenceType `xml:"ListingDuration,omitempty"`

	//
	// Specifies the default site setting for whether sellers are
	// required to specify a domestic shipping service and its associated cost
	// when listing items. True means the shipping terms are required
	// unless a specific category overrides this setting.
	//
	ShippingTermsRequired bool `xml:"ShippingTermsRequired,omitempty"`

	//
	// Specifies the default site setting for whether categories allow Best Offers. A value of <code>true</code> means Best Offers are allowed site-wide, unless a specific category overrides the setting.
	//
	BestOfferEnabled bool `xml:"BestOfferEnabled,omitempty"`

	//
	// This field is no longer applicable as Dutch auctions are no longer available on eBay sites.
	// </span>
	// <br>
	//
	DutchBINEnabled bool `xml:"DutchBINEnabled,omitempty"`

	//
	// Specifies the default site setting for whether a bidder must consent to the
	// bid by confirming that he or she read and agrees to the terms in eBay's
	// privacy policy.
	//
	UserConsentRequired bool `xml:"UserConsentRequired,omitempty"`

	//
	// Indicates whether or not it is possible to enhance a listing by putting
	// it into a rotation for display on a special area of the eBay home page.
	// Support for this feature varies by site. Item or feedback restrictions may apply.
	//
	HomePageFeaturedEnabled bool `xml:"HomePageFeaturedEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// the ProPack feature (a feature pack). True means ProPack is allowed site-wide,
	// unless a specific category overrides the setting.
	//
	ProPackEnabled bool `xml:"ProPackEnabled,omitempty"`

	//
	// Specifies the default site setting for whether
	// categories allow the <b>BasicUpgradePack</b> feature (a feature pack).
	// No longer allowed on any sites.
	// Formerly, Australia site (site ID 15, abbreviation AU) only.
	//
	BasicUpgradePackEnabled bool `xml:"BasicUpgradePackEnabled,omitempty"`

	//
	// Specifies the default site setting for whether
	// categories allow the ValuePack feature (a feature pack).
	// A value of <code>true</code> means it is allowed site-wide, unless a specific category overrides the setting.
	//
	ValuePackEnabled bool `xml:"ValuePackEnabled,omitempty"`

	//
	// Specifies the default site setting for whether
	// categories allow the ProPackPlus feature (a feature pack).
	// A value of <code>true</code> means it is allowed site-wide, unless a specific category overrides the setting.
	//
	ProPackPlusEnabled bool `xml:"ProPackPlusEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// Classified Ad format listings. A value of <code>true</code> means the feature is allowed site-wide,
	// unless a specific category overrides the setting.
	//
	AdFormatEnabled *AdFormatEnabledCodeType `xml:"AdFormatEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow counter offers
	// for Best Offers. A value of <code>true</code> means counter offers are allowed site-wide, unless a
	// specific category overrides the setting.
	//
	BestOfferCounterEnabled bool `xml:"BestOfferCounterEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// auto decline for Best Offers. A value of <code>true</code> means auto decline is allowed site-wide,
	// unless a specific category overrides the setting.
	//
	BestOfferAutoDeclineEnabled bool `xml:"BestOfferAutoDeclineEnabled,omitempty"`

	//
	// Specifies the default site setting for whether
	// <b>LocalMarketSpecialitySubscription</b> feature is supported for most categories.
	//
	LocalMarketSpecialitySubscription bool `xml:"LocalMarketSpecialitySubscription,omitempty"`

	//
	// Specifies the default site setting for whether <b>LocalMarketRegularSubscription</b>
	// feature is supported for most categories.
	//
	LocalMarketRegularSubscription bool `xml:"LocalMarketRegularSubscription,omitempty"`

	//
	// Specifies the default site setting for whether <b>LocalMarketPremiumSubscription</b>
	// feature is supported for most categories.
	//
	LocalMarketPremiumSubscription bool `xml:"LocalMarketPremiumSubscription,omitempty"`

	//
	// Specifies the default site setting for whether <b>LocalMarketNonSubscription</b>
	// feature is supported for most categories.
	//
	LocalMarketNonSubscription bool `xml:"LocalMarketNonSubscription,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressEnabled bool `xml:"ExpressEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressPicturesRequired bool `xml:"ExpressPicturesRequired,omitempty"`

	//
	// This field is deprecated.
	//
	ExpressConditionRequired bool `xml:"ExpressConditionRequired,omitempty"`

	//
	// Specifies the default site setting for whether the Minimum Reserve Price
	// feature is supported for most categories.
	//
	MinimumReservePrice float64 `xml:"MinimumReservePrice,omitempty"`

	//
	// Specifies the default site setting for whether most categories allow seller-
	// level contact information for Classified Ad listings.
	// <br/><br/>
	// A value of <code>true</code> means
	// seller-level contact information is available for Classified Ad format
	// listings site-wide, unless a specific category overrides the setting.
	//
	SellerContactDetailsEnabled bool `xml:"SellerContactDetailsEnabled,omitempty"`

	//
	// Specifies the default site setting for whether the Transaction Confirmation
	// Request feature is supported for most categories.
	//
	TransactionConfirmationRequestEnabled bool `xml:"TransactionConfirmationRequestEnabled,omitempty"`

	//
	// This field is is no longer applicable.
	//
	StoreInventoryEnabled bool `xml:"StoreInventoryEnabled,omitempty"`

	//
	// This feature is no longer applicable.
	//
	SkypeMeTransactionalEnabled bool `xml:"SkypeMeTransactionalEnabled,omitempty"`

	//
	// This feature is no longer applicable.
	//
	SkypeMeNonTransactionalEnabled bool `xml:"SkypeMeNonTransactionalEnabled,omitempty"`

	//
	// Specifies the supported local listing distances of regular vehicles
	// for most categories.
	//
	LocalListingDistancesRegular string `xml:"LocalListingDistancesRegular,omitempty"`

	//
	// Specifies the supported local listing distances of specialty vehicles
	// for most categories.
	//
	LocalListingDistancesSpecialty string `xml:"LocalListingDistancesSpecialty,omitempty"`

	//
	// Specifies the supported local listing distances for most categories,
	// for users who have not subscribed to either Regular or Specialty vehicles.
	//
	LocalListingDistancesNonSubscription string `xml:"LocalListingDistancesNonSubscription,omitempty"`

	//
	// Indicates if the payment method should be displayed to the user
	// for most categories. Even if enabled, checkout may or may not
	// be enabled.
	//
	ClassifiedAdPaymentMethodEnabled *ClassifiedAdPaymentMethodEnabledCodeType `xml:"ClassifiedAdPaymentMethodEnabled,omitempty"`

	//
	// Indicates if shipping options are available for most categories.
	//
	ClassifiedAdShippingMethodEnabled bool `xml:"ClassifiedAdShippingMethodEnabled,omitempty"`

	//
	// Indicates if Best Offer is enabled for Classified Ad listings
	// in most categories.
	//
	ClassifiedAdBestOfferEnabled *ClassifiedAdBestOfferEnabledCodeType `xml:"ClassifiedAdBestOfferEnabled,omitempty"`

	//
	// Indicates whether counter offers are allowed on Best Offers for
	// most categories.
	//
	ClassifiedAdCounterOfferEnabled bool `xml:"ClassifiedAdCounterOfferEnabled,omitempty"`

	//
	// Indicates whether automatic decline for Best Offers is allowed for most
	// categories.
	//
	ClassifiedAdAutoDeclineEnabled bool `xml:"ClassifiedAdAutoDeclineEnabled,omitempty"`

	//
	// Indicates whether most categories support including a phone number in the
	// seller's contact information.
	//
	ClassifiedAdContactByPhoneEnabled bool `xml:"ClassifiedAdContactByPhoneEnabled,omitempty"`

	//
	// Indicates whether most categories support including an email address in the
	// seller's contact information.
	//
	ClassifiedAdContactByEmailEnabled bool `xml:"ClassifiedAdContactByEmailEnabled,omitempty"`

	//
	// Specifies whether categories on the site require a seller to offer a safe payment method (i.e. PayPal or one of the credit cards specified in <b>Item.PaymentMethods</b>). If a seller has a 'SafePaymentExempt' status, they are exempt from the category requirement to offer at least one safe payment method, even if the site and category have the safe payment method turned on.
	// <br/><br/>
	// If <code>true</code>, items on
	// the site need to have the safe payment method selected, but specific
	// categories can override the setting if they don't need this requirement. For
	// example, Business and Industrial, Motors, Real Estate, and Mature Audiences
	// categories, and all listings that don't support <b>Item.PaymentMethods</b> are
	// exempt from this requirement, which means that any seller can list without
	// any safe payment method selected.
	// <br><br/>
	// If <code>false</code>, all sellers in all categories can list without any safe payment
	// method selected and this setting cannot be overridden at the category level.
	// If site is not enabled, there is no category where this requirement is
	// enabled on that site.
	//
	SafePaymentRequired bool `xml:"SafePaymentRequired,omitempty"`

	//
	// Specifies the default site setting for whether the pay-per-lead feature
	// is supported for most categories.
	//
	ClassifiedAdPayPerLeadEnabled bool `xml:"ClassifiedAdPayPerLeadEnabled,omitempty"`

	//
	// The value returned in this field indicates whether most categories on the specified eBay site support listings with Item Specifics. Item Specifics enable sellers to present descriptive details of an item in a structured manner.
	//
	ItemSpecificsEnabled *ItemSpecificsEnabledCodeType `xml:"ItemSpecificsEnabled,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> eBay India is no longer a functioning eBay marketplace, so the <code>PaisaPayEscrow</code> payment method is no longer applicable since this payment method was only supported on the eBay India site.
	// </span>
	//
	PaisaPayFullEscrowEnabled bool `xml:"PaisaPayFullEscrowEnabled,omitempty"`

	//
	// This field is no longer applicable.
	//
	ISBNIdentifierEnabled bool `xml:"ISBNIdentifierEnabled,omitempty"`

	//
	// This field is no longer applicable.
	//
	UPCIdentifierEnabled bool `xml:"UPCIdentifierEnabled,omitempty"`

	//
	// This field is no longer applicable.
	//
	EANIdentifierEnabled bool `xml:"EANIdentifierEnabled,omitempty"`

	//
	// Indicates whether the category is enabled for the <b>BrandMPN</b> field for a specific item. If
	// <code>true</code>, sellers can add <b>BrandMPN</b> for that item.
	//
	BrandMPNIdentifierEnabled bool `xml:"BrandMPNIdentifierEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// auto-accept for Best Offers for Classified Ads.
	//
	ClassifiedAdAutoAcceptEnabled bool `xml:"ClassifiedAdAutoAcceptEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// auto-accept for Best Offers.
	//
	BestOfferAutoAcceptEnabled bool `xml:"BestOfferAutoAcceptEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// you to specify that listings be displayed in the default search
	// results of the respective sites.
	//
	CrossBorderTradeNorthAmericaEnabled bool `xml:"CrossBorderTradeNorthAmericaEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// you to specify that listings be displayed in the default search
	// results of the respective site.
	//
	CrossBorderTradeGBEnabled bool `xml:"CrossBorderTradeGBEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// you to specify that listings be displayed in the default search
	// results of the respective site.
	//
	CrossBorderTradeAustraliaEnabled bool `xml:"CrossBorderTradeAustraliaEnabled,omitempty"`

	//
	// For the Australia site, if both <b>PayPalBuyerProtectionEnabled</b> and
	// <b>BuyerGuaranteeEnabled</b> are returned, then the default site setting
	// is that categories allow buyer protection.
	//
	PayPalBuyerProtectionEnabled bool `xml:"PayPalBuyerProtectionEnabled,omitempty"`

	//
	// For the Australia site, if both <b>PayPalBuyerProtectionEnabled</b> and
	// <b>BuyerGuaranteeEnabled</b> are returned, then the default site setting
	// is that categories allow buyer protection.
	//
	BuyerGuaranteeEnabled bool `xml:"BuyerGuaranteeEnabled,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> eBay India is no longer a functioning eBay marketplace, so this feature is no longer applicable since it was only supported on the eBay India site.
	// </span>
	//
	INEscrowWorkflowTimeline *INEscrowWorkflowTimelineCodeType `xml:"INEscrowWorkflowTimeline,omitempty"`

	//
	// This field is deprecated.
	//
	CombinedFixedPriceTreatmentEnabled bool `xml:"CombinedFixedPriceTreatmentEnabled,omitempty"`

	//
	// Specifies the default site setting
	// that enables durations for "Gallery Featured".
	//
	GalleryFeaturedDurations *ListingEnhancementDurationReferenceType `xml:"GalleryFeaturedDurations,omitempty"`

	//
	// Specifies the default site setting for whether
	// categories have PayPal as a required payment method for listings.
	//
	PayPalRequired bool `xml:"PayPalRequired,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// Classified Ad listings. A value of <code>true</code> means the feature is allowed site-wide,
	// unless a specific category overrides the setting. This element is for eBay Motors Pro users.
	//
	EBayMotorsProAdFormatEnabled *AdFormatEnabledCodeType `xml:"eBayMotorsProAdFormatEnabled,omitempty"`

	//
	// Indicates whether most categories support including a phone number in the
	// seller's contact information. This element is for eBay Motors Pro users.
	//
	EBayMotorsProContactByPhoneEnabled bool `xml:"eBayMotorsProContactByPhoneEnabled,omitempty"`

	//
	// Indicates which telephone option is enabled to
	// contact the seller. This element is for eBay Motors Pro users.
	//
	EBayMotorsProPhoneCount int32 `xml:"eBayMotorsProPhoneCount,omitempty"`

	//
	// Indicates whether most categories support including an address in the seller's
	// contact information. This element is for eBay Motors Pro users.
	//
	EBayMotorsProContactByAddressEnabled bool `xml:"eBayMotorsProContactByAddressEnabled,omitempty"`

	//
	// Indicates which address option is enabled to
	// contact the seller. This element is for eBay Motors Pro users.
	//
	EBayMotorsProStreetCount int32 `xml:"eBayMotorsProStreetCount,omitempty"`

	//
	// Indicates whether most categories support including a company name in the
	// seller's contact information. This element is for eBay Motors Pro users.
	//
	EBayMotorsProCompanyNameEnabled bool `xml:"eBayMotorsProCompanyNameEnabled,omitempty"`

	//
	// Indicates whether most categories support including an email address in the
	// seller's contact information. This element is for eBay Motors Pro users.
	//
	EBayMotorsProContactByEmailEnabled bool `xml:"eBayMotorsProContactByEmailEnabled,omitempty"`

	//
	// Indicates if Best Offer is enabled for Classified Ad listings
	// in most categories. This element is for eBay Motors Pro users.
	//
	EBayMotorsProBestOfferEnabled *ClassifiedAdBestOfferEnabledCodeType `xml:"eBayMotorsProBestOfferEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// auto-accept for Best Offers for Classified Ads.
	// This element is for eBay Motors Pro users.
	//
	EBayMotorsProAutoAcceptEnabled bool `xml:"eBayMotorsProAutoAcceptEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// auto-decline for Best Offers for Classified Ads.
	// This element is for eBay Motors Pro users.
	//
	EBayMotorsProAutoDeclineEnabled bool `xml:"eBayMotorsProAutoDeclineEnabled,omitempty"`

	//
	// Indicates if the payment method should be displayed to the user
	// for most categories. Even if enabled, checkout may or may not
	// be enabled. This element is for eBay Motors Pro users.
	//
	EBayMotorsProPaymentMethodCheckOutEnabled *ClassifiedAdPaymentMethodEnabledCodeType `xml:"eBayMotorsProPaymentMethodCheckOutEnabled,omitempty"`

	//
	// Indicates if shipping options are available for most categories.
	// This element is for eBay Motors Pro users.
	//
	EBayMotorsProShippingMethodEnabled bool `xml:"eBayMotorsProShippingMethodEnabled,omitempty"`

	//
	// Indicates whether counter offers are allowed on Best Offers for
	// most categories. This element is for eBay Motors Pro users.
	//
	EBayMotorsProCounterOfferEnabled bool `xml:"eBayMotorsProCounterOfferEnabled,omitempty"`

	//
	// Specifies the default site setting for whether most categories allow seller-
	// level contact information for Classified Ad format listings. A value of <code>true</code>
	// means seller-level contact information is available for Classified Ad listings
	// site-wide, unless a specific category overrides the setting. This element is
	// for eBay Motors Pro users.
	//
	EBayMotorsProSellerContactDetailsEnabled bool `xml:"eBayMotorsProSellerContactDetailsEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow Classified Ad
	// listings. A value of <code>true</code> means the feature is allowed site-wide, unless a specific
	// category overrides the setting. This element is for Local Market dealers.
	//
	LocalMarketAdFormatEnabled *AdFormatEnabledCodeType `xml:"LocalMarketAdFormatEnabled,omitempty"`

	//
	// Indicates whether most categories support including a phone number in the
	// seller's contact information. This element is for Local Market dealers.
	//
	LocalMarketContactByPhoneEnabled bool `xml:"LocalMarketContactByPhoneEnabled,omitempty"`

	//
	// Indicates which telephone option is enabled to
	// contact the seller. This element is for Local Market dealers.
	//
	LocalMarketPhoneCount int32 `xml:"LocalMarketPhoneCount,omitempty"`

	//
	// Indicates whether most categories support including an address in the seller's
	// contact information. This element is for Local Market dealers.
	//
	LocalMarketContactByAddressEnabled bool `xml:"LocalMarketContactByAddressEnabled,omitempty"`

	//
	// Indicates which address option is enabled to
	// contact the seller. This element is for Local Market dealers.
	//
	LocalMarketStreetCount int32 `xml:"LocalMarketStreetCount,omitempty"`

	//
	// Indicates whether most categories support including a company name in the
	// seller's contact information. This element is for Local Market dealers.
	//
	LocalMarketCompanyNameEnabled bool `xml:"LocalMarketCompanyNameEnabled,omitempty"`

	//
	// Indicates whether most categories support including an email address in the
	// seller's contact information. This element is for Local Market dealers.
	//
	LocalMarketContactByEmailEnabled bool `xml:"LocalMarketContactByEmailEnabled,omitempty"`

	//
	// Indicates if Best Offer is enabled for Classified Ad listings
	// in most categories. This element is for Local Market dealers.
	//
	LocalMarketBestOfferEnabled *ClassifiedAdBestOfferEnabledCodeType `xml:"LocalMarketBestOfferEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// auto-accept for Best Offers for Classified Ads.
	// This element is for Local Market dealers.
	//
	LocalMarketAutoAcceptEnabled bool `xml:"LocalMarketAutoAcceptEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// auto-decline for Best Offers for Classified Ads.
	// This element is for Local Market dealers.
	//
	LocalMarketAutoDeclineEnabled bool `xml:"LocalMarketAutoDeclineEnabled,omitempty"`

	//
	// Indicates if the payment method should be displayed to the user
	// for most categories. Even if enabled, checkout may or may not
	// be enabled. This element is for Local Market dealers.
	//
	LocalMarketPaymentMethodCheckOutEnabled *ClassifiedAdPaymentMethodEnabledCodeType `xml:"LocalMarketPaymentMethodCheckOutEnabled,omitempty"`

	//
	// Indicates if shipping options are available for most categories.
	// This element is for Local Market dealers.
	//
	LocalMarketShippingMethodEnabled bool `xml:"LocalMarketShippingMethodEnabled,omitempty"`

	//
	// Indicates whether counter offers are allowed on Best Offers for
	// most categories. This element is for Local Market dealers.
	//
	LocalMarketCounterOfferEnabled bool `xml:"LocalMarketCounterOfferEnabled,omitempty"`

	//
	// Specifies the default site setting for whether most categories allow seller-
	// level contact information for Classified Ad format listings. A value of <code>true</code>
	// means seller-level contact information is available for Classified Ad format
	// listings site-wide, unless a specific category overrides the setting. This
	// element is for Local Market dealers.
	//
	LocalMarketSellerContactDetailsEnabled bool `xml:"LocalMarketSellerContactDetailsEnabled,omitempty"`

	//
	// Indicates which telephone option is enabled to
	// contact the seller. This element is for For Sale By Owner.
	//
	ClassifiedAdPhoneCount int32 `xml:"ClassifiedAdPhoneCount,omitempty"`

	//
	// Indicates whether most categories support including an address in the seller's
	// contact information. This element is for For Sale By Owner.
	//
	ClassifiedAdContactByAddressEnabled bool `xml:"ClassifiedAdContactByAddressEnabled,omitempty"`

	//
	// Indicates which address option is enabled to
	// contact the seller. This element is for For Sale By Owner.
	//
	ClassifiedAdStreetCount int32 `xml:"ClassifiedAdStreetCount,omitempty"`

	//
	// Indicates whether most categories support including a company name in the
	// seller's contact information. This element is for For Sale By Owner.
	//
	ClassifiedAdCompanyNameEnabled bool `xml:"ClassifiedAdCompanyNameEnabled,omitempty"`

	//
	// Specifies the default site setting for whether
	// <b>LocalMarketSpecialitySubscription</b> feature is supported for most categories.
	//
	SpecialitySubscription *GeographicExposureCodeType `xml:"SpecialitySubscription,omitempty"`

	//
	// Specifies the default site setting for whether <b>LocalMarketRegularSubscription</b>
	// feature is supported for most categories.
	//
	RegularSubscription *GeographicExposureCodeType `xml:"RegularSubscription,omitempty"`

	//
	// Specifies the default site setting for whether <b>LocalMarketPremiumSubscription</b>
	// feature is supported for most categories.
	//
	PremiumSubscription *GeographicExposureCodeType `xml:"PremiumSubscription,omitempty"`

	//
	// Specifies the supported local listing distances for most categories,
	// for users who have not subscribed to either Regular or Specialty vehicles.
	//
	NonSubscription *GeographicExposureCodeType `xml:"NonSubscription,omitempty"`

	//
	// This field is deprecated and will no longer be returned.
	//
	PayPalRequiredForStoreOwner bool `xml:"PayPalRequiredForStoreOwner,omitempty"`

	//
	// Defines if quantity can be revised while a listing is in semi or fully restricted mode.
	// Applies to fixed-price listings.
	//
	ReviseQuantityAllowed bool `xml:"ReviseQuantityAllowed,omitempty"`

	//
	// Defines if price can be revised while a listing is in semi or fully restricted mode.
	// Applies to fixed-price listings.
	//
	RevisePriceAllowed bool `xml:"RevisePriceAllowed,omitempty"`

	//
	// Defines if extended business seller listing durations are enabled on a given site.
	// When the value of this element is <code>true</code>, it means the listing duration values
	// defined in <b>StoreOwnerExtendedListingDurations</b> are applicable to fixed-price
	// listings.
	//
	StoreOwnerExtendedListingDurationsEnabled bool `xml:"StoreOwnerExtendedListingDurationsEnabled,omitempty"`

	//
	// Provides additional listings durations that are supported by Store Owners.
	// The extended listing durations provided here in this element should be merged
	// in with the baseline listing durations provided in the <b>ListingDurations</b> container.
	//
	StoreOwnerExtendedListingDurations *StoreOwnerExtendedListingDurationsType `xml:"StoreOwnerExtendedListingDurations,omitempty"`

	//
	// Specifies the default site setting for whether a return policy is
	// required for most categories.<br>
	// <br>
	// <b>For most sites:</b> If true, listings in most
	// categories require a return policy. <br>
	// <br>
	// <b>For eBay Australia (AU) and
	// US eBay Motors Parts and Accessories:</b>
	// If true, most categories support but do not require a
	// return policy.<br>
	// <br>
	// Individual categories can override the site default.
	//
	ReturnPolicyEnabled bool `xml:"ReturnPolicyEnabled,omitempty"`

	//
	// Specifies the default site setting for whether a handling time (dispatch time) is
	// required for most categories.<br>
	// <br>
	// The handling time is the maximum number of business days the seller
	// commits to for preparing an item to be shipped after receiving a
	// cleared payment. The seller's handling time does not include the
	// shipping time (the carrier's transit time).<br>
	// <br>
	// If <code>false</code>, most listings on the site require a handling time
	// (see <b>DispatchTimeMax</b> in <b>AddItem</b>) when flat or calculated shipping
	// is specified. (A handling time is not required for local pickup
	// or for freight shipping.)<br>
	// <br>
	// For a list of the handling time values allowed for each site, use
	// <b>DispatchTimeMaxDetails</b> in <b>GeteBayDetails</b>.<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Although the field name ends with "Enabled", a value of <code>true</code> means
	// that a handling time is NOT required, and value of <code>false</code> means
	// that a handling time IS required.</span>
	//
	HandlingTimeEnabled bool `xml:"HandlingTimeEnabled,omitempty"`

	//
	// Specifies the default site setting for whether a maximum flat rate shipping cost
	// is imposed for listings in most categories on the site.
	//
	MaxFlatShippingCost *AmountType `xml:"MaxFlatShippingCost,omitempty"`

	//
	// Specifies the default site setting for whether a maximum flat rate shipping cost
	// is imposed on sellers who list in categories on this site yet are shipping an
	// item into the country of this site from another country.
	//
	MaxFlatShippingCostCBTExempt bool `xml:"MaxFlatShippingCostCBTExempt,omitempty"`

	//
	// Returns the applicable max cap per shipping cost for shipping service group1
	//
	Group1MaxFlatShippingCost *AmountType `xml:"Group1MaxFlatShippingCost,omitempty"`

	//
	// Returns the applicable max cap per shipping cost for shipping service group2
	//
	Group2MaxFlatShippingCost *AmountType `xml:"Group2MaxFlatShippingCost,omitempty"`

	//
	// Returns the applicable max cap per shipping cost for shipping service group3
	//
	Group3MaxFlatShippingCost *AmountType `xml:"Group3MaxFlatShippingCost,omitempty"`

	//
	// Indicates the acceptable payment methods that can be used when using the <b>Add</b>/<b>Revise</b>/<b>Relist</b> calls for an item listed on the corresponding site.
	//
	PaymentMethod []*BuyerPaymentMethodCodeType `xml:"PaymentMethod,omitempty"`

	//
	// Specifies the default site setting for whether categories support
	// multi-variation listings. If true, you can pass in Item.Variations
	// in the AddFixedPriceItem family of calls when you list in
	// categories that support this feature.<br>
	// <br>
	// Multi-variation listings contain items that are logically the same
	// product, but that vary in their manufacturing details or packaging.
	// For example, a particular brand and style of shirt could be
	// available in different sizes and colors, such as "large blue" and
	// "medium black" variations.
	//
	VariationsEnabled bool `xml:"VariationsEnabled,omitempty"`

	//
	// This field is deprecated.
	//
	AttributeConversionEnabled *AttributeConversionEnabledCodeType `xml:"AttributeConversionEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// free, automatic upgrades for Gallery Plus, which enhances pictures
	// in search results.
	//
	FreeGalleryPlusEnabled bool `xml:"FreeGalleryPlusEnabled,omitempty"`

	//
	// Specifies the default site setting for whether categories allow
	// free, automatic upgrades for Picture Pack, a discount package
	// that includes super-sizing of pictures.
	//
	FreePicturePackEnabled bool `xml:"FreePicturePackEnabled,omitempty"`

	//
	// Specifies the default site setting for whether listing items with parts
	// compatibility is supported by application (<code>ByApplication</code>), by specification
	// (<code>BySpecification</code>), or not at all (<code>Disabled</code>). A given category cannot support
	// both types of parts compatibility.
	// <br><br>
	// Parts compatibility listings contain information to determine the assemblies
	// with which a part is compatible. For example, an automotive part or accessory
	// listed with parts compatibility can be matched with vehicles (e.g., specific
	// years, makes, and models) with which the part or accessory can  be used.
	// <br><br>
	// Parts Compatibility is supported in limited Parts & Accessories
	// categories for the US eBay Motors site only.
	//
	ItemCompatibilityEnabled *ItemCompatibilityEnabledCodeType `xml:"ItemCompatibilityEnabled,omitempty"`

	//
	// Specifies the default site setting for whether parts compatibility
	// information is required when listing items, and if so, how many
	// compatibilities must be specified. If the value is "0," you are not required
	// to specify compatibility information. A value greater than "0" indicates that
	// listing with parts compatibity is mandatory and the listing must contain the
	// specified number of compatibilities at a minimum.
	// <br><br>
	// Parts compatibility listings contain information to determine the assemblies
	// with which a part is compatible. For example, an automotive part or accessory
	// listed witih parts compatibility can be matched with vehicles (e.g., specific
	// years, makes, and models) with which the part or accessory can  be used.
	// <br><br>
	// This field applies only to listings in which compatibility is specified by
	// application. Entering parts compatibility by application specifies the
	// assemblies (e.g., a specific year, make, and model of car) to which the item
	// applies. This can be done automatically by listing with a catalog product
	// that supports parts compatibility, or manually, using
	// <b class="con">Item.ItemCompatibilityList</b> when listing or
	// revising an item.
	//
	MinItemCompatibility int32 `xml:"MinItemCompatibility,omitempty"`

	//
	// Specifies the default site setting for the maximum number of compatible
	// applications allowed per item when adding or revising items with parts
	// compatibility.
	// <br><br>
	// Parts compatibility listings contain structured information to determine the
	// assemblies with which a part is compatible. For example, an automotive part
	// or accessory listed with parts compatibility can be matched with vehicles
	// (e.g., specific years, makes, and models) with which the part or accessory
	// can be used.
	// <br><br>
	// This field applies only to listings in which compatibility is specified by
	// application manually when listing or revising an item. Entering parts
	// compatibility by application manually specifies the assemblies (e.g., a
	// specific year, make, and model of car) to which the item applies, using <b
	// class="con">Item.ItemCompatibilityList</b>.
	//
	MaxItemCompatibility int32 `xml:"MaxItemCompatibility,omitempty"`

	//
	// Specifies the default site setting for whether most categories
	// support (or require) <b>Item.ConditionID</b> in listings.
	// Use this to determine whether to use
	// <b>ConditionID</b> in <b>AddItem</b> and related calls.
	// See <b>ConditionValues</b> for a list of valid IDs.
	// <br><br>
	// In general, this is set to <code>Disabled</code>, and meta-categories
	// (level 1 categories) define their own default settings.
	//
	ConditionEnabled *ConditionEnabledCodeType `xml:"ConditionEnabled,omitempty"`

	//
	// The comprehensive list of item conditions on the site. That is,
	// this lists any value that could be supported by at least one
	// category on the site.
	// Individual meta-categories define their own default set of
	// condition values. (In other words, categories always override
	// this list with a customized subset of these values.)
	//
	ConditionValues *ConditionValuesType `xml:"ConditionValues,omitempty"`

	//
	// Specifies the default site setting for whether most categories
	// follow specific rules associated with "value categories".<br>
	// <br>
	// Some eBay sites may select a few categories and designate them as
	// "value categories". These are typically selected from
	// categories where buyers can find great deals. (Not all categories
	// with great deals are designated as value categories.)
	// This designation can change over time. <br>
	// <br>
	// While a category is designated as a value category
	// (i.e., when <b>ValueCategory</b> = <code>true</code>),
	// it is subject to the following rule: Items in value categories can only be listed in one category.<br>
	// <br>
	// For example, if you attempt to list in two categories and the
	// <b>PrimaryCategory</b> or <b>SecondaryCategory</b> is a value category,
	// then eBay drops the <b>SecondaryCategory</b> and lists the
	// item in the <b>PrimaryCategory</b> only.
	// Similarly, if you attempt to add a secondary category to an existing
	// listing, or you change the category for an existing listing,
	// and if the primary or secondary category is a value category,
	// then eBay drops the secondary category.
	//
	ValueCategory bool `xml:"ValueCategory,omitempty"`

	//
	// Specifies the default site setting for whether most categories
	// support (or require) product creation in listings.
	// Use this to determine whether it is mandatory to send
	// product id in AddItem and related calls.
	// In general, this is set to Disabled, and meta-categories
	// (level 1 categories) define their own default settings.
	//
	ProductCreationEnabled *ProductCreationEnabledCodeType `xml:"ProductCreationEnabled,omitempty"`

	//
	// This enumeration value indicates whether or not most categories on the specified eBay site support the use of European Article Numbers (EANs) to help create a listing in an <b>Add</b>/<b>Revise</b>/<b>Relist</b>/<b>Verify</b> API call.
	// <b></b>
	// <ul>
	// <li>A value of <code>Disabled</code> indicates that EANs cannot be used for most categories on the specified eBay site. </li>
	// <li>A value of <code>Enabled</code> indicates that EANs can be used for most categories on the specified eBay site. </li>
	// <li>A value of <code>Required</code> indicates that an EAN is required for most categories on the specified eBay site. </li>
	// </ul>
	//
	EANEnabled *ProductIdentiferEnabledCodeType `xml:"EANEnabled,omitempty"`

	//
	// This enumeration value indicates whether or not most categories on the specified eBay site support the use of International Standard Book Numbers (ISBNs) to help create a listing in an <b>Add</b>/<b>Revise</b>/<b>Relist</b>/<b>Verify</b> API call.
	// <br/><br/>
	// A value of <code>Disabled</code> indicates that ISBNs cannot be used for most categories on the specified eBay site, a value of <code>Enabled</code> indicates that ISBNs can be used for most categories on the specified eBay site, and a value of <code>Required</code> indicates that an ISBN is required for most categories on the specified eBay site.
	//
	ISBNEnabled *ProductIdentiferEnabledCodeType `xml:"ISBNEnabled,omitempty"`

	//
	// This enumeration value indicates whether or not most categories on
	// the specified eBay site support the use of Universal Product Codes
	// (UPCs) to help create a listing in an
	// Add/Revise/Relist/Verify API call. A value of
	// <code>Disabled</code> indicates that UPCs cannot be
	// used for most categories on the specified eBay site, a value of
	// <code>Enabled</code> indicates that UPCs can be used
	// for most categories on the specified eBay site, and a value of
	// <code>Required</code> indicates that a UPC is required
	// for most categories on the specified eBay site.
	//
	UPCEnabled *ProductIdentiferEnabledCodeType `xml:"UPCEnabled,omitempty"`

	//
	// Specifies the maximum fitment count. Sellers can provide up to
	// 1000 fitments at the lowest level of granularity.
	//
	MaxGranularFitmentCount int32 `xml:"MaxGranularFitmentCount,omitempty"`

	//
	// Indicates the type of vehicle; car, truck, boat, or motorcycle.
	//
	CompatibleVehicleType string `xml:"CompatibleVehicleType,omitempty"`

	//
	// This field is deprecated
	//
	PaymentOptionsGroup *PaymentOptionsGroupEnabledCodeType `xml:"PaymentOptionsGroup,omitempty"`

	//
	// Specifies what categories the Shipping profile is applicable to.
	// Only returned when this value (or this category's setting)
	// overrides the value inherited from the category's parent.
	//
	ShippingProfileCategoryGroup *ProfileCategoryGroupCodeType `xml:"ShippingProfileCategoryGroup,omitempty"`

	//
	// Specifies what categories the Payment profile is applicable to.
	// Only returned when this value (or this category's setting)
	// overrides the value inherited from the category's parent.
	//
	PaymentProfileCategoryGroup *ProfileCategoryGroupCodeType `xml:"PaymentProfileCategoryGroup,omitempty"`

	//
	// Specifies what categories the Return Policy profile is applicable to.
	// Only returned when this value (or this category's setting)
	// overrides the value inherited from the category's parent.
	//
	ReturnPolicyProfileCategoryGroup *ProfileCategoryGroupCodeType `xml:"ReturnPolicyProfileCategoryGroup,omitempty"`

	//
	// After EOL Attributes, VIN will no longer be supported as primary attributes,
	// rather consumers should use new tag. This feature helps consumers in identifying
	// if category supports VIN.
	//
	VINSupported bool `xml:"VINSupported,omitempty"`

	//
	// After EOL Attributes, VRM will no longer be supported as primary attributes,
	// rather consumers should use new tag. This feature helps consumers in identifying
	// if category supports VRM.
	//
	VRMSupported bool `xml:"VRMSupported,omitempty"`

	//
	// After EOL Attributes, Seller Provided Title will no longer be supported as primary attributes,
	// rather consumers should use new tag. This feature helps consumers in identifying
	// if category supports Seller Provided Title.
	//
	SellerProvidedTitleSupported bool `xml:"SellerProvidedTitleSupported,omitempty"`

	//
	// After EOL Attributes, Deposit will no longer be supported as primary attributes,
	// rather consumers should use new tags. This feature helps consumers in identifying
	// if category supports Deposit.
	//
	DepositSupported bool `xml:"DepositSupported,omitempty"`

	//
	// Indicates whether or not the the specified category is enabled for Global Shipping Program.
	//
	GlobalShippingEnabled bool `xml:"GlobalShippingEnabled,omitempty"`

	//
	// Indicates whether most categories on the specified eBay site support the Boat and Motorcycle Parts Compatibility feature. The Boats Parts Compatibility feature allows sellers to list their boats' parts and accessories items with parts compatibility name-value pairs specific to boats, and allows potential buyers to search for these items using parts compatibility search fields.
	//
	AdditionalCompatibilityEnabled bool `xml:"AdditionalCompatibilityEnabled,omitempty"`

	//
	// Indicates whether most categories on the specified eBay site
	// support the "Click and Collect" feature. With the 'Click and Collect' feature, a buyer can purchase certain items on an eBay site and collect them at a local store. Buyers are notified by eBay once their items are available.
	// <br/><br/>
	// The "Click and Collect" feature is only available to large merchants on the UK and Australia sites. The 'Click and Collect' feature is only available to large merchants on the eBay UK (site ID - 3), eBay Australia (Site ID - 15), and eBay Germany (Site ID - 77) sites.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b> For Click and Collect eligible sellers, the Click and Collect feature can only be enabled at the account level, and then each of the seller's listings within an Click and Collect enabled category will be automatically evaluated for Click and Collect eligibility.
	// </span>
	//
	PickupDropOffEnabled bool `xml:"PickupDropOffEnabled,omitempty"`

	//
	// This field indicates whether or not most categories on the specified eBay site support digital gift cards.
	// <br/><br/>
	// Digital gift cards are currently only supported on the US site. There are some restrictions when it comes to selling gift cards, including the following:
	//
	// <ul>
	// <li>Each seller can only have one gift card listing at any given time</li>
	// <li>The maximum dollar value of the gift card may not exceed 500.00</li>
	// <li>Prepaid credit cards from American Express, Discover, MasterCard, or Visa are not allowed</li>
	// </ul>
	// For more information on eBay's Gift Card policy, see the <a href="http://pages.ebay.com/help/policies/gift.html">Gift cards policy</a> Help page.
	//
	DigitalGoodDeliveryEnabled bool `xml:"DigitalGoodDeliveryEnabled,omitempty"`

	//
	// This field is returned as <code>true</code> if one or more categories on an eBay site
	// support the use of an eBay Product ID (e.g. ePID) in an Add/Revise/Relist API
	// call to identify which motorcycles and/or scooters are compatible with a motor
	// vehicle part or accessory. ePIDs can only be used to identify motorcycles and
	// scooters on the Germany and UK sites. <br/><br/> For more
	// information on using an ePID to identify a compatible motorcycle or scooter
	// through an Add/Revise/Relist API call on the Germany or UK site, see the
	// documentation for the <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request
	// .Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.Name
	// ValueList</a> container.
	//
	EpidSupported bool `xml:"EpidSupported,omitempty"`

	//
	// This field is returned as <code>true</code> if one or more categories on an eBay site
	// support the use of a K Type vehicle number in an Add/Revise/Relist API call
	// to identify which cars and/or trucks are compatible with a motor vehicle part
	// or accessory. K type vehicle numbers can only be used to identify cars and
	// trucks on the Germany site. <br/><br/> For more information on
	// using a K Type vehicle number to identify a compatible car or truck through an
	// Add/Revise/Relist API call on the Germany site, see the documentation for the
	// <a href="
	// http://developer.ebay.com/Devzone/XML/docs/Reference/eBay/AddItem.html#Request
	// .Item.ItemCompatibilityList.Compatibility.NameValueList">Compatibility.Name
	// ValueList</a> container.
	//
	KTypeSupported bool `xml:"KTypeSupported,omitempty"`

	//
	// This field indicates whether or not the specified eBay site supports Product-Based Shopping Experience. The Product-Based Shopping Experience (PBSE) is currently supported by the US, UK, Australia, and Canada (English) sites.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Currently, this field will only be returned in Sandbox for Phase 2 Product-Based Shopping Experience (PBSE) categories. When Phase 2 of PBSE starts rolling out in August 2018, this field will start being returned in Production. For more information on PBSE, see the <a href="https://developer.ebay.com/api-docs/sell/static/inventory/pbse_playbook_intro.html" target="_blank">Product-Based Shopping Experience Playbook</a>.
	// </span>
	//
	ProductRequiredEnabled *ProductRequiredEnabledCodeType `xml:"ProductRequiredEnabled,omitempty"`

	//
	// This field returns the options a seller has for accepting or not accepting domestic item returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	DomesticReturnsAcceptedValues *DomesticReturnsAcceptedCodeType `xml:"DomesticReturnsAcceptedValues,omitempty"`

	//
	// This field returns the options a seller has for accepting or not accepting international item returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	InternationalReturnsAcceptedValues *InternationalReturnsAcceptedCodeType `xml:"InternationalReturnsAcceptedValues,omitempty"`

	//
	// This field returns the options a seller has for specifying the return period for domestic item returns. The return period is the amount of time the buyer has to initiate a return once they have received the item.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	DomesticReturnsDurationValues *DomesticReturnsDurationCodeType `xml:"DomesticReturnsDurationValues,omitempty"`

	//
	// This field returns the options a seller has for specifying the return period for international item returns. The return period is the amount of time the buyer has to initiate a return once they have received the item.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	InternationalReturnsDurationValues *InternationalReturnsDurationCodeType `xml:"InternationalReturnsDurationValues,omitempty"`

	//
	// This field returns the options a seller has for specifying who pays the return shipping cost for domestic returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	DomesticReturnsShipmentPayeeValues *DomesticReturnsShipmentPayeeCodeType `xml:"DomesticReturnsShipmentPayeeValues,omitempty"`

	//
	// This field returns the options a seller has for specifying who pays the return shipping cost for international returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	InternationalReturnsShipmentPayeeValues *InternationalReturnsShipmentPayeeCodeType `xml:"InternationalReturnsShipmentPayeeValues,omitempty"`

	//
	// In US, sellers can offer an item replacement in addition to offering money-back for domestic returns. This field returns the options a seller has for specifying how they will handle domestic returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	DomesticRefundMethodValues *DomesticRefundMethodCodeType `xml:"DomesticRefundMethodValues,omitempty"`

	//
	// In US, sellers can offer an item replacement in addition to offering money-back for international returns. This field returns the options a seller has for specifying how they will handle international returns.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	InternationalRefundMethodValues *InternationalRefundMethodCodeType `xml:"InternationalRefundMethodValues,omitempty"`

	//
	// In some EU countries, sellers are legally required to describe the return policy they offer. This field returns a flag that indicates whether or not the seller can specify their return-policy details in the associated marketplace.
	// <br><br>
	// The values returned in this field are pertinent only if <b>ReturnPolicyEnabled</b> in GetCategoryFeatures is set to <code>true</code> for the associated marketplace and category.
	//
	ReturnPolicyDescriptionEnabled bool `xml:"ReturnPolicyDescriptionEnabled,omitempty"`
}

type SiteDetailsType struct {

	//
	// Short name that identifies an eBay site. Usually, an eBay site is associated
	// with a particular country or region (e.g., US or Belgium_French). Specialty
	// sites (e.g., eBay Stores) use the same site ID as their associated main eBay
	// site. The US eBay Motors site is an exception to this convention.
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// Numeric identifier for an eBay site. If you are using the
	// SOAP API, you use numeric site IDs in the request URL.
	// If you are using the XML API, you use numeric site IDs in the
	// X-EBAY-API-SITEID header.
	//
	SiteID int32 `xml:"SiteID,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type SiteHostedPictureDetailsType struct {

	//
	// The seller-defined name for the picture. This field is only returned if a <b>PictureName</b> value was specified in the request. A name for a picture can make it easier to track than an arbitrary, eBay-assigned URL.
	//
	PictureName string `xml:"PictureName,omitempty"`

	//
	// This enumeration value indicates the size of the generated picture. This value may differ from the one specified in the request (e.g. if a Supersize image cannot be generated).
	//
	PictureSet *PictureSetCodeType `xml:"PictureSet,omitempty"`

	//
	// This enumeration value indicates the image format of the generated image, such as JPG, GIF, or PNG.
	//
	PictureFormat *PictureFormatCodeType `xml:"PictureFormat,omitempty"`

	//
	// This is the full URL for the uploaded picture on the EPS server. This value should be stored by the seller, as this URL will be needed when create, revise, or relist an item and add this image to the listing. This URL will also be needed for unpublished pictures whose expiration date must be extended through an <b>ExtendSiteHostedPictures</b> call.
	//
	FullURL *AnyURI `xml:"FullURL,omitempty"`

	//
	// This is the truncated version of the full URL.
	//
	BaseURL *AnyURI `xml:"BaseURL,omitempty"`

	//
	// The URL and size information for each generated image.
	//
	PictureSetMember []*PictureSetMemberType `xml:"PictureSetMember,omitempty"`

	//
	// The URL of the external Web site hosting the uploaded photo. This field is returned if an <b>ExternalPictureURL</b> is provided in the call request.
	// <br>
	//
	ExternalPictureURL *AnyURI `xml:"ExternalPictureURL,omitempty"`

	//
	// This timestamp indicates when the picture must be uploaded with an eBay listing before it is purged from the EPS server.
	// <br>
	// <br>
	// By default, unpublished pictures (not associated with an active eBay listing) are kept on the EPS server for five days, but a seller can use the <b>ExtensionInDays</b> field in the request to make the expiration date further into the future (a maximum of 30 days). The seller can also use the <b>ExtendSiteHostedPictures</b> to extend the expiration date of the picture.
	//
	UseByDate time.Time `xml:"UseByDate,omitempty"`
}

type SiteLocationType struct {

	//
	// Specifies the criteria for filtering search results by site, where site is
	// determined by the site ID in the SOAP URL or, for Unified Schema XML requests,
	// X-EBAY-API-SITEID HTTP Header.
	//
	SiteID *SiteIDFilterCodeType `xml:"SiteID,omitempty"`
}

type SiteWideCharacteristicsType struct {

	//
	// This field is deprecated.
	//
	CharacteristicsSet *CharacteristicsSetType `xml:"CharacteristicsSet,omitempty"`

	//
	// This field is deprecated.
	//
	ExcludeCategoryID []string `xml:"ExcludeCategoryID,omitempty"`
}

type SkypeMeNonTransactionalEnabledDefinitionType struct {
}

type SkypeMeTransactionalEnabledDefinitionType struct {
}

type SpecialitySubscriptionDefinitionType struct {
}

type StoreColorSchemeArrayType struct {

	//
	// A Store color scheme.
	//
	ColorScheme []*StoreColorSchemeType `xml:"ColorScheme,omitempty"`
}

type StoreColorSchemeType struct {

	//
	// Store color scheme ID. (use GetStoreOptions to get the list of
	// valid theme color scheme IDs).
	//
	ColorSchemeID int32 `xml:"ColorSchemeID,omitempty"`

	//
	// Store color scheme name. Provides a user-friendly name for the
	// color scheme.
	//
	Name string `xml:"Name,omitempty"`

	//
	// Store color set.
	//
	Color *StoreColorType `xml:"Color,omitempty"`

	//
	// Container consisting of the Store's font properties. This container is not returned if an eBay predefined store theme is
	// used 'as is'. Use the <b>GetStoreOptions</b>
	// call to retrieve the complete set of data for the list of predefined eBay Stores options, including the themes and color
	// schemes.
	//
	Font *StoreFontType `xml:"Font,omitempty"`
}

type StoreColorType struct {

	//
	// Primary color for the Store. Specified in 6-digit Hex format.
	// For example: F6F6C9
	//
	Primary string `xml:"Primary,omitempty"`

	//
	// Secondary color for the Store. Specified in 6-digit Hex format.
	// For example: F6F6C9
	//
	Secondary string `xml:"Secondary,omitempty"`

	//
	// Accent color for the Store. Specified in 6-digit Hex format.
	// For example: F6F6C9
	//
	Accent string `xml:"Accent,omitempty"`
}

type StoreCustomCategoryArrayType struct {

	//
	// A custom category for your eBay Store.
	//
	CustomCategory []*StoreCustomCategoryType `xml:"CustomCategory,omitempty"`
}

type StoreCustomCategoryType struct {

	//
	// Custom category ID. For SetStoreCategories, required only if
	// Action is set to Rename, Move or Delete.
	//
	CategoryID int64 `xml:"CategoryID,omitempty"`

	//
	// Name of the custom category.
	//
	Name string `xml:"Name,omitempty"`

	//
	// Order in which the custom category appears in the list of store
	// categories.
	//
	Order int32 `xml:"Order,omitempty"`

	//
	// Contains the properties of a custom subcategory for an eBay Store. eBay Stores support
	// three category levels.
	//
	ChildCategory []*StoreCustomCategoryType `xml:"ChildCategory,omitempty"`
}

type StoreCustomListingHeaderLinkType struct {

	//
	// Link ID for the listing header link. The ID is used when the link
	// is a custom category or for a custom page, and it is not needed
	// when the LinkType property is "AboutMe" or "None".
	//
	LinkID int32 `xml:"LinkID,omitempty"`

	//
	// Order in which to show the custom listing header link.
	//
	Order int32 `xml:"Order,omitempty"`

	//
	// Type of link to include in the custom listing header.
	//
	LinkType *StoreCustomListingHeaderLinkCodeType `xml:"LinkType,omitempty"`
}

type StoreCustomListingHeaderType struct {

	//
	// Display type for the custom listing header.
	//
	DisplayType *StoreCustomListingHeaderDisplayCodeType `xml:"DisplayType,omitempty"`

	//
	// Specifies whether the custom header has a logo.
	//
	Logo bool `xml:"Logo,omitempty"`

	//
	// Specifies whether the custom header has a search box.
	//
	SearchBox bool `xml:"SearchBox,omitempty"`

	//
	// Link to include in the custom header.
	//
	LinkToInclude []*StoreCustomListingHeaderLinkType `xml:"LinkToInclude,omitempty"`

	//
	// Specifies whether the custom header has a link to Add to
	// Favorite Stores.
	//
	AddToFavoriteStores bool `xml:"AddToFavoriteStores,omitempty"`

	//
	// Specifies whether the custom header has a link to Sign up for Store
	// Newsletter.
	//
	SignUpForStoreNewsletter bool `xml:"SignUpForStoreNewsletter,omitempty"`
}

type StoreCustomPageArrayType struct {

	//
	// A Store custom page.
	//
	CustomPage []*StoreCustomPageType `xml:"CustomPage,omitempty"`
}

type StoreCustomPageType struct {

	//
	// Name of the eBay Store custom page. This value is required if you are creating a new
	// page (and omitting a <b>PageID</b> value). Note that you must include a
	// name for the page even if you are using the <b>PreviewEnabled</b> flag.
	// However, since using the preview functionality means that the page will not be
	// persisted, you can enter a dummy value for this field if you have not decided on a
	// name for the page. The <b>Name</b> value is used in links to the page.
	//
	Name string `xml:"Name,omitempty"`

	//
	// Unique identifier for an eBay Store custom page. If you specify a valid
	// <b>PageID</b> value in a
	// <b>SetStoreCustomPage</b> call, the existing custom page
	// is updated. If you do not specify a <b>PageID</b> value, you are
	// creating a new custom page.
	// <br/><br/>
	// The <b>PageID</b> field is always returned in
	// <b>GetStoreCustomPage</b>.
	//
	PageID int64 `xml:"PageID,omitempty"`

	//
	// The URL path of the eBay Store custom page. This field is only required if you are
	// using Chinese characters in the <b>Name</b> field. The URL path of the
	// eBay Store custom page is normally derived from the <b>Name</b> field, but
	// the URL path cannot be derived from the name of the custom page if it contains Chinese
	// characters because URLs cannot contain Chinese characters.
	// <br/><br/>
	// The <b>URLPath</b> is only returned in the <b>GetStoreCustomPage</b>
	// response if it is defined for the eBay Store custom page, and if a <b>PageID</b>
	// value is included in the request.
	//
	URLPath string `xml:"URLPath,omitempty"`

	//
	// The full URL of the eBay Store custom page, which is generally derived from the
	// <b>CustomPage.Name</b> value. The exception to this rule is if the seller
	// specified a custom URL using the <b>CustomPage.URLPath</b> field in a
	// <b>SetStoreCustomPage</b> call.
	// <br/><br/>
	// The <b>URL</b> is only returned in the
	// <b>GetStoreCustomPage</b> response if a <b>PageID</b> value
	// is included in the request.
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// This value indicates the status of the eBay custom page. In a
	// <b>SetStoreCustomPage</b> call, the seller uses the optional
	// <b>Status</b> field to make an inactive custom page active, to make an
	// active custom page inactive, or to delete an active or inactive custom page. To
	// change the status (including delete) of a custom page, a <b>PageID</b>
	// value must be included to identify the custom page to modify.
	// <br/><br/>
	// The <b>Status</b> value is always returned in the
	// <b>GetStoreCustomPage</b> response.
	//
	Status *StoreCustomPageStatusCodeType `xml:"Status,omitempty"`

	//
	// The HTML content of the eBay Store custom page. This field has a maximum size of 96
	// kilobytes. If the <b>PreviewEnabled</b> field is set to 'true', then
	// this field is required in a <b>SetStoreCustomPage</b> call. Otherwise,
	// it is optional.
	// <br/><br/>
	// The <b>Content</b> field is only returned in the
	// <b>GetStoreCustomPage</b> response if a <b>PageID</b> value
	// is included in the request.
	//
	Content string `xml:"Content,omitempty"`

	//
	// This flag controls whether or not the left navigation bar is included in the eBay
	// Store custom page. To include the left navigation bar in a custom page, the seller
	// will include the <b>LeftNav</b> field in the <b>SetStoreCustomPage</b>
	// request and set it to 'true'.
	// <br/><br/>
	// The <b>LeftNav</b> field is only returned in the
	// <b>GetStoreCustomPage</b> response if a <b>PageID</b> value
	// is included in the request.
	//
	LeftNav bool `xml:"LeftNav,omitempty"`

	//
	// This flag controls whether or not a custom page preview is enabled. To enable the
	// a custom page preview, the seller will include the
	// <b>PreviewEnabled</b> field in the <b>SetStoreCustomPage</b>
	// request and set it to 'true'.
	// <br/><br/>
	// The <b>PreviewEnabled</b> field is only returned in the
	// <b>GetStoreCustomPage</b> response if a <b>PageID</b> value
	// is included in the request.
	//
	PreviewEnabled bool `xml:"PreviewEnabled,omitempty"`

	//
	// This integer value controls the order in which the corresponding eBay Store custom
	// page is displayed in the list of custom pages. To make the corresponding custom
	// page appear first in the list of custom pages, the seller would include the
	// <b>Order</b> field and set its value to '1'.
	// <br/><br/>
	// The <b>Order</b> value is always returned in the
	// <b>GetStoreCustomPage</b> response.
	//
	Order int32 `xml:"Order,omitempty"`
}

type StoreFontType struct {

	//
	// Font for the Store name.
	//
	NameFace *StoreFontFaceCodeType `xml:"NameFace,omitempty"`

	//
	// Font size for the Store name.
	//
	NameSize *StoreFontSizeCodeType `xml:"NameSize,omitempty"`

	//
	// Font color for the Store name. Specified in 6-digit Hex format.
	// For example: F6F6C9
	//
	NameColor string `xml:"NameColor,omitempty"`

	//
	// Font for the Store section title.
	//
	TitleFace *StoreFontFaceCodeType `xml:"TitleFace,omitempty"`

	//
	// Font size for the Store section title.
	//
	TitleSize *StoreFontSizeCodeType `xml:"TitleSize,omitempty"`

	//
	// Font color for the Store section title. Specified in 6-digit Hex
	// format. For example: F6F6C9
	//
	TitleColor string `xml:"TitleColor,omitempty"`

	//
	// Font for the Store description.
	//
	DescFace *StoreFontFaceCodeType `xml:"DescFace,omitempty"`

	//
	// Font size for the Store description.
	//
	DescSize *StoreFontSizeCodeType `xml:"DescSize,omitempty"`

	//
	// Font color for the Store description. Specified in 6-digit Hex
	// format. For example: F6F6C9
	//
	DescColor string `xml:"DescColor,omitempty"`
}

type StoreInventoryEnabledDefinitionType struct {
}

type StoreLogoArrayType struct {

	//
	// A Store logo.
	//
	Logo []*StoreLogoType `xml:"Logo,omitempty"`
}

type StoreLogoType struct {

	//
	// Store logo ID (use GetStoreOptions to get the list of valid logo IDs).
	//
	LogoID int32 `xml:"LogoID,omitempty"`

	//
	// Store logo name. Provides a user-friendly name for the logo.
	//
	Name string `xml:"Name,omitempty"`

	//
	// URL of the logo. Must have a .gif or .jpg extention. Specified when
	// you are using a customized logo.
	//
	URL *AnyURI `xml:"URL,omitempty"`
}

type StoreOwnerExtendedListingDurationsDefinitionType struct {
}

type StoreOwnerExtendedListingDurationsEnabledDefinitionType struct {
}

type StoreOwnerExtendedListingDurationsType struct {

	//
	// Specifies the length of time an auction can be open, in days. The allowed
	// durations vary according to the type of listing. The value GTC means Good Til
	// Canceled.
	//
	Duration []string `xml:"Duration,omitempty"`
}

type StorePreferencesType struct {

	//
	// Store vacation hold preferences.
	//
	VacationPreferences *StoreVacationPreferencesType `xml:"VacationPreferences,omitempty"`
}

type StoreSubscriptionArrayType struct {

	//
	// A Store subscription level.
	//
	Subscription []*StoreSubscriptionType `xml:"Subscription,omitempty"`
}

type StoreSubscriptionType struct {

	//
	// Store subscription level.
	//
	Level *StoreSubscriptionLevelCodeType `xml:"Level,omitempty"`

	//
	// Monthly fee for the Store subscription level.
	//
	Fee *AmountType `xml:"Fee,omitempty"`
}

type StoreThemeArrayType struct {

	//
	// A Store theme.
	//
	Theme []*StoreThemeType `xml:"Theme,omitempty"`

	//
	// Set of color schemes. This set is for use with those themes that do
	// not explicitly list a color scheme in the theme definition (these
	// themes are also known as advanced themes).
	//
	GenericColorSchemeArray *StoreColorSchemeArrayType `xml:"GenericColorSchemeArray,omitempty"`
}

type StoreThemeType struct {

	//
	// Store theme ID (use GetStoreOptions to get the list of valid theme
	// IDs).
	//
	ThemeID int32 `xml:"ThemeID,omitempty"`

	//
	// Store theme name. Provides a user-friendly name for the theme.
	//
	Name string `xml:"Name,omitempty"`

	//
	// Theme color scheme.
	//
	ColorScheme *StoreColorSchemeType `xml:"ColorScheme,omitempty"`
}

type StoreType struct {

	//
	// Name of the eBay Store. The name is shown
	// at the top of the Store page.
	//
	Name string `xml:"Name,omitempty"`

	//
	// The URL path of the Store (58 characters maximum). Only if you
	// are using Chinese characters in the Name property do you need to
	// use this field, such as if you are opening a Store on the Taiwan
	// site. The reason for this is that the URL path is normally derived
	// from the Store name, but it cannot be derived from the name of the
	// Store if it contains Chinese characters because URLs cannot
	// contain Chinese characters.
	//
	URLPath string `xml:"URLPath,omitempty"`

	//
	// The complete URL of the user's Store. This field is only ever
	// returned, and does not need to be explicitly set.
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// Subscription level (tier) for the user's eBay Store.
	//
	SubscriptionLevel *StoreSubscriptionLevelCodeType `xml:"SubscriptionLevel,omitempty"`

	//
	// Store description (300 characters maximum).
	//
	Description string `xml:"Description,omitempty"`

	//
	// Store logo.
	//
	Logo *StoreLogoType `xml:"Logo,omitempty"`

	//
	// Store theme.
	//
	Theme *StoreThemeType `xml:"Theme,omitempty"`

	//
	// Style for the Store header.
	//
	HeaderStyle *StoreHeaderStyleCodeType `xml:"HeaderStyle,omitempty"`

	//
	// Page to use as the Store's homepage (default is 0). To change the
	// homepage, specify the PageID of one of the Store's custom pages.
	//
	HomePage int64 `xml:"HomePage,omitempty"`

	//
	// The default layout type to use for the Store items.
	//
	ItemListLayout *StoreItemListLayoutCodeType `xml:"ItemListLayout,omitempty"`

	//
	// The default sort order to use for the items for sale in the Store.
	//
	ItemListSortOrder *StoreItemListSortOrderCodeType `xml:"ItemListSortOrder,omitempty"`

	//
	// Layout for the Store's custom header.
	//
	CustomHeaderLayout *StoreCustomHeaderLayoutCodeType `xml:"CustomHeaderLayout,omitempty"`

	//
	// Custom header text for the Store.
	//
	CustomHeader string `xml:"CustomHeader,omitempty"`

	//
	// Specifies whether to export the Store listings to comparison
	// shopping websites.
	//
	ExportListings bool `xml:"ExportListings,omitempty"`

	//
	// Container consisting of an array of one or more <b>CustomCategory</b>
	// containers. Each <b>CustomCategory</b> container consists of details
	// related to an eBay Store custom category.
	// <br>
	// <br>
	// To modify an eBay Store's custom categories, an eBay Store owner would use the
	// <b>StoreCategories</b> container in the request of a
	// <b>SetStoreCategories</b> call.
	//
	CustomCategories *StoreCustomCategoryArrayType `xml:"CustomCategories,omitempty"`

	//
	// Custom listing header for the Store.
	//
	CustomListingHeader *StoreCustomListingHeaderType `xml:"CustomListingHeader,omitempty"`

	//
	// This field is deprecated.
	//
	MerchDisplay *MerchDisplayCodeType `xml:"MerchDisplay,omitempty"`

	//
	// Indicates the time the store was last opened or reopened.
	//
	LastOpenedTime time.Time `xml:"LastOpenedTime,omitempty"`

	//
	// A flag indicating if a Compatibility tab exists for the Store item listing. This
	// field is only applicable to Parts & Accessories listings in eBay US Motors.
	// The Compatibility tab will contain vehicles that are compatible with the part
	// in the listing. The seller specifies this information at listing time.
	//
	TitleWithCompatibility bool `xml:"TitleWithCompatibility,omitempty"`
}

type StoreVacationPreferencesType struct {

	//
	// In a <b>SetStorePreferences</b> call, this field should be included in the request and set to <code>true</code> if the eBay store owner is going on vacation and wants to temporarily turn off all active listings. Conversely, if the eBay store owner is back from vacation, this field can be included and set to <code>false</code> to turn off the vacation setting.
	// <br/><br/>
	// If the 'On Vacation' setting is turned on for an eBay store owner, all of the store owner's listings will be hidden from search, and shoppers can not buy any items from that store.
	// <br/><br/>
	// In a <b>GetStorePreferences</b> call, this field is returned as <code>true</code> if the 'On Vacation' setting is turned on, or returned as <code>false</code> if the 'On Vacation' setting is turned off.
	//
	OnVacation bool `xml:"OnVacation,omitempty"`

	//
	// In a <b>SetStorePreferences</b> call, this field should be included in the request if the eBay store owner wants to inform shoppers when he/she will return from vacation. The seller should make sure they use the proper date-time format, as specified in the <b>dateTime</b> simple type. If a date is specified in this field, the following behavior can be expected:<br/>
	// <ul>
	// <li>The 'On Vacation' setting (if it was turned on) will automatically be turned off when this date is reached</li>
	// <li>This return date will be displayed in the listing if the <b>VacationPreferences.MessageItem</b> field is set to <code>true</code></li>
	// <li>This return date will be displayed on the seller's store page if the <b>VacationPreferences.MessageStore</b> field is set to <code>true</code></li>
	// </ul>
	// In a <b>GetStorePreferences</b> call, this field is returned if it was set.
	//
	ReturnDate time.Time `xml:"ReturnDate,omitempty"`

	//
	// This field is deprecated, as it was used for Store Inventory listings, which are no longer supported on any eBay site.
	//
	HideFixedPriceStoreItems bool `xml:"HideFixedPriceStoreItems,omitempty"`

	//
	// In a <b>SetStorePreferences</b> call, this field should be included in the request and set to <code>true</code> if the eBay store owner wants information regarding the vacation to be posted on all of the seller's active listings. The following information will be displayed if this field is set to <code>true</code>:<br/>
	// <ul>
	// <li>A note about the seller being on vacation (and items being unavailable for purchase) if the <b>OnVacation</b> field is set to <code>true</code></li>
	// <li>The date when the seller will return from vacation if the <b>ReturnDate</b> was set</li>
	// </ul>
	// If this field is included in the <b>SetStorePreferences</b> request and set to <code>false</code>, no information regarding the seller's vacation will appear on active listings.
	// <br/><br/>
	// In a <b>GetStorePreferences</b> call, this field is returned as <code>true</code> if information regarding the vacation is being displayed on active listings, or returned as <code>false</code> if no information regarding the vacation is being displayed on active listings.
	//
	MessageItem bool `xml:"MessageItem,omitempty"`

	//
	// In a <b>SetStorePreferences</b> call, this field should be included in the request and set to <code>true</code> if the eBay store owner wants information regarding the vacation to be posted on store pages. The following information will be displayed if this field is set to <code>true</code>:<br/>
	// <ul>
	// <li>A note about the seller being on vacation (and items being unavailable for purchase) if the <b>OnVacation</b> field is set to <code>true</code></li>
	// <li>The date when the seller will return from vacation if the <b>ReturnDate</b> was set</li>
	// <li>A customized message from the seller regarding this vacation if the seller included a customized message through the <b>MessageStoreCustomText</b> field and the <b>DisplayMessageStoreCustomText</b> was set to </code>true</code>. If the <b>DisplayMessageStoreCustomText</b> is set to </code>false</code>, the generic 'On Vacation' and return date (if available) will be displayed instead.</li>
	// </ul>
	// In a <b>GetStorePreferences</b> call, this field is returned as <code>true</code> if information regarding the vacation is being displayed on the store page, or returned as <code>false</code> if no information regarding the vacation is being displayed on the store page.
	//
	MessageStore bool `xml:"MessageStore,omitempty"`

	//
	// In a <b>SetStorePreferences</b> call, this field should be included in the request and set to <code>true</code> if the eBay store owner wants a custom message regarding a vacation to display on store pages. For this field to have an affect, the seller will create their custom message regarding the vacation through the <b>MessageStoreCustomText</b> field. If this field is turned off (or <code>false</code>), instead of a custom message, a generic 'On Vacation' message and the return date (if available) will be posted to the Store pages.
	// <br/><br/>
	// In a <b>GetStorePreferences</b> call, this field is returned as <code>true</code> if the seller wants a customized vacation message to be displayed on the store page, or returned as <code>false</code> if the seller wants the generic 'On Vacation' message and the return date (if available) to be posted to the Store pages.
	//
	DisplayMessageStoreCustomText bool `xml:"DisplayMessageStoreCustomText,omitempty"`

	//
	// In a <b>SetStorePreferences</b> call, this field should be included in the request, and the seller will create the customized vacation message in this field. HTML markup can be used in this field. This vacation message will appear on store pages as long as the <b>DisplayMessageStoreCustomText</b> field is set to <code>true</code>. If the <b>DisplayMessageStoreCustomText</b> field is set to <code>false</code>, any text provided through the <b>MessageStoreCustomText</b> will not be displayed on store pages.
	// <br/><br/>
	// In a <b>GetStorePreferences</b> call, this field is returned if it is set.
	//
	MessageStoreCustomText string `xml:"MessageStoreCustomText,omitempty"`
}

type StorefrontType struct {

	//
	// Unique identifier of a primary custom category in which to list the item. A custom category is a category that the seller created in their eBay Store. eBay Store sellers can create up to three levels of custom categories for their stores, but the API only supports root-level categories.
	// <br> <br>
	// To list an item using the categories in a seller's store, you must set this field to a root-level custom category or a custom category that has no child categories (subcategories). If you attempt to list an item in a category that has subcategories, the call response contains a warning, and the item is listed in the 'Other' store category.
	//
	StoreCategoryID int64 `xml:"StoreCategoryID,omitempty"`

	//
	// Unique identifier for the secondary custom category in which to list the item. Set this field to a root-level custom category or a custom category that has no child categories (subcategories).
	// <br> <br>
	// The system resets the value to 0 (None) in the following cases:
	// <br> - The values of <b>StoreCategoryID</b> and <b>StoreCategory2ID</b> field are the same
	// <br> - You specify <b>StoreCategory2ID</b> but not <b>StoreCategoryID</b>
	// <br> <br>
	// <br>In other words, <b>StoreCategoryID</b> must be set to a valid custom category and be different from <b>StoreCategory2ID</b>.
	//
	StoreCategory2ID int64 `xml:"StoreCategory2ID,omitempty"`

	//
	// Category name of a primary custom category in which to list the item. A custom category is a category that the seller created in their eBay Store. eBay Store sellers can create up to three levels of custom categories for their stores, but the API only supports root-level categories.
	// <br> <br>
	// To list an item using a category name from a seller's store, you must set this field to a root-level custom category or a custom category that has no child categories (subcategories). If you attempt to list an item in a category that has subcategories, the call response contains a warning, and the item is listed in the store category called 'Other'.
	//
	StoreCategoryName string `xml:"StoreCategoryName,omitempty"`

	//
	// Name of the secondary custom category in which to list the item. Set this field to a root-level custom category or a custom category that has no child categories (subcategories).
	// <br> <br>
	// The system resets the value to 0 (None) in the following cases:
	// <br> - The values of <b>StoreCategoryName</b> and <b>StoreCategory2Name</b> field are the same
	// <br> - You specify <b>StoreCategory2Name</b> but not <b>StoreCategoryName</b>
	// <br> <br>
	// <br>In other words <b>StoreCategoryName</b> must be set to a valid custom category name and be different from <b>StoreCategory2Name</b>.
	//
	StoreCategory2Name string `xml:"StoreCategory2Name,omitempty"`

	//
	// The URL of the seller's eBay Stores page.
	//
	StoreURL *AnyURI `xml:"StoreURL,omitempty"`

	//
	// The name of the seller's eBay Store.
	//
	StoreName string `xml:"StoreName,omitempty"`
}

type SubscriptionType struct {
	EIASToken string `xml:"EIASToken,omitempty"`

	SiteID *SiteCodeType `xml:"SiteID,omitempty"`

	Active bool `xml:"Active,omitempty"`
}

type SuggestedBidValueType struct {

	//
	// The <b>SuggestedBidValues</b> container is only returned if the buyer is attempting to bid on an auction item. A <b>BidValue</b> field is returned for each incremental bid value (up to the dollar value specified in the <b>Offer.MaxBid</b> field in the request) that eBay will bid on behalf of the buyer each time that buyer is outbid for the auction item. How many <b>BidValue</b> fields that appear will depend on the current winning bid amount, the required bid increment, and the buyer's specified max bid amount.
	//
	BidValue []*AmountType `xml:"BidValue,omitempty"`
}

type SuggestedCategoryArrayType struct {

	//
	// Describes a category that contains listings that match
	// specified keywords in the query. Returned if a category matches the query.
	//
	SuggestedCategory []*SuggestedCategoryType `xml:"SuggestedCategory,omitempty"`
}

type SuggestedCategoryType struct {

	//
	// Describes a category that contains items that match the query.
	//
	Category *CategoryType `xml:"Category,omitempty"`

	//
	// Percentage of the matching items that were found in this category,
	// relative to other categories in which matching items were also found.
	// Indicates the distribution of matching items across the suggested categories.
	//
	PercentItemFound int32 `xml:"PercentItemFound,omitempty"`
}

type SummaryEventScheduleType struct {

	//
	// The event type associated with this alert.
	//
	EventType *NotificationEventTypeCodeType `xml:"EventType,omitempty"`

	//
	// The period of time for which to create a summary.
	//
	SummaryPeriod *SummaryWindowPeriodCodeType `xml:"SummaryPeriod,omitempty"`

	//
	// How often the summary is to be delivered.
	//
	Frequency *SummaryFrequencyCodeType `xml:"Frequency,omitempty"`
}

type SupportedEventTypesArrayType struct {
	EventType []*NotificationEventTypeCodeType `xml:"EventType,omitempty"`
}

type SupportedSellerProfileType struct {

	//
	// Unique identifier of a Business Policies profile. This identifier is auto-generated by eBay when the seller creates the profile. This field is always
	// returned with the <b>SupportedSellerProfile</b> container.
	//
	ProfileID int64 `xml:"ProfileID,omitempty"`

	//
	// Indicates the type of the Business Policies profile. Valid values are PAYMENT,
	// RETURN_POLICY, and SHIPPING. This field is always returned with the
	// <b>SupportedSellerProfile</b> container.
	//
	ProfileType string `xml:"ProfileType,omitempty"`

	//
	// The seller-defined name for a Business Policies profile. This field is always
	// returned with the <b>SupportedSellerProfile</b> container.
	//
	ProfileName string `xml:"ProfileName,omitempty"`

	//
	// Seller-provided description of a Business Policies profile. This field is only
	// returned if a seller has provided a description for the profile.
	//
	ShortSummary string `xml:"ShortSummary,omitempty"`

	//
	// Identifies the the Business Policies category group associated with the Business
	// Policies profile. Current values are ALL (referring to all non-motor vehicle
	// categories) and MOTORS_VEHICLE (for motor vehicle listings).
	//
	CategoryGroup *CategoryGroupType `xml:"CategoryGroup,omitempty"`
}

type SupportedSellerProfilesType struct {

	//
	// Container consisting of information related to specific Business Policies payment, return,
	// and shipping policy profiles. The profile type is found in the
	// <b>ProfileType</b> field.
	//
	SupportedSellerProfile []*SupportedSellerProfileType `xml:"SupportedSellerProfile,omitempty"`
}

type TCREnabledDefinitionType struct {
}

type TaxDetailsType struct {

	//
	// This field indicates the sales tax type. A separate TaxDetails container is
	// required for each unique imposition (tax type).
	//
	Imposition *TaxTypeCodeType `xml:"Imposition,omitempty"`

	//
	// This field indicates the description of the sales tax.
	//
	TaxDescription *TaxDescriptionCodeType `xml:"TaxDescription,omitempty"`

	//
	// This value is the total amount of sales tax for the order line item for the
	// corresponding impositiion (tax type).
	// <br><br>
	// <b>TaxAmount</b> = <b>TaxOnSubtotalAmount</b> + <b>TaxOnShippingAmount</b> + <b>TaxOnHandlingAmount</b>
	//
	TaxAmount *AmountType `xml:"TaxAmount,omitempty"`

	//
	// This value is the amount of sales tax applied based on the unit cost of the
	// order line item for the corresponding impositiion (tax type).
	//
	TaxOnSubtotalAmount *AmountType `xml:"TaxOnSubtotalAmount,omitempty"`

	//
	// This value is the amount of sales tax applied based on shipping costs for the
	// order line item for the corresponding impositiion (tax type).
	//
	TaxOnShippingAmount *AmountType `xml:"TaxOnShippingAmount,omitempty"`

	//
	// This value is the amount of sales tax applied based on handling costs for the
	// order line item for the corresponding impositiion (tax type).
	//
	TaxOnHandlingAmount *AmountType `xml:"TaxOnHandlingAmount,omitempty"`

	//
	// This value is the actual tax ID for the buyer. This field will generally only be returned if a seller on the Italy or Spain sites required that the buyer supply a tax ID during the checkout process. If the <b>Order.BuyerTaxIdentifier</b> container is returned, the type of tax ID can be found in the <b>BuyerTaxIdentifier.Type</b> field.
	//
	TaxCode string `xml:"TaxCode,omitempty"`
}

type TaxIdentifierAttributeType struct {
	Value string

	//
	// The only supported value for this attribute is 'IssuingCountry', but in the future, other attributes related to the tax ID may be supported.
	//
	Name *TaxIdentifierAttributeCodeType `xml:"name,attr,omitempty"`
}

type TaxIdentifierType struct {

	//
	// This enumeration value identifies the type of tax ID that was supplied by the buyer during the checkout process.
	//
	Type *ValueTypeCodeType `xml:"Type,omitempty"`

	//
	// This value is the actual tax ID for the buyer. The type of tax ID is shown in the <b>Type</b> field.
	//
	ID string `xml:"ID,omitempty"`

	//
	// This field shows an attribute, and its corresponding value for the buyer's tax identification card. Currently, this field is only used to indicate which country issued the buyer's tax ID, but in the future, other attributes related to the tax ID may be returned in this field. This field's value will be an <a href="http://en.wikipedia.org/wiki/ISO_3166-1" target="_blank">ISO 3166-1 two-digit code</a> that represents the issuing country.
	//
	Attribute []*TaxIdentifierAttributeType `xml:"Attribute,omitempty"`
}

type TaxJurisdictionType struct {

	//
	// This is the unique, two-digit identifier of the tax jurisdiction (such as 'CA' for California). To retrieve all <b>JurisdictionID</b> values for a site, a seller can either use a <b>GetTaxTable</b> call with <b>DetailLevel</b> set to <code>ReturnAll</code>, or they can use the <b>GeteBayDetails</b> call with <b>DetailLevel</b> name set to <code>TaxJurisdiction</code>.
	// <br/><br/>
	// The <b>JurisdictionID</b> field is always required in a <b>SetTaxTable</b> call, and always returned with each <b>TaxJurisdiction</b> container to identify the tax jurisdiction.
	//
	JurisdictionID string `xml:"JurisdictionID,omitempty"`

	//
	// This float value is the sales tax percentage rate applicable to the corresponding tax jurisdiction. Sellers are responsible for providing accurate sales tax rates for each jurisdiction. This sales tax rate comes into play when a buyer from that tax jurisdiction makes a purchase from the seller. The value passed in is stored with a precision of 3 digits after the decimal point (##.###).
	// <br><br>
	// This field is only returned in <b>GetTaxTable</b> (and other 'Get' calls) if a sales tax percentage rate has been set.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. So, if a sales tax rate is established for a state that is subject to 'eBay Collect and Remit', the sales tax rate in this field is ignored by eBay during checkout process. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	// </span>
	//
	SalesTaxPercent float32 `xml:"SalesTaxPercent,omitempty"`

	//
	// This field is included in a <b>SetTaxTable</b> call and set to <code>true</code> if the seller wants sales tax for the jurisdiction to apply to the cumulative amount of item cost and shipping charges. This value defaults to <code>false</code> if not specified.
	// <br><br>
	// This field is always returned with each <b>TaxJurisdiction</b> container (whether <code>true</code> or <code>false</code>).
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. So, if a <code>true</code> value is set for this field for a state that is subject to 'eBay Collect and Remit', this setting is ignored by eBay during checkout process. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	// </span>
	//
	ShippingIncludedInTax bool `xml:"ShippingIncludedInTax,omitempty"`

	//
	// Full name for the jurisdiction or region for display purposes.
	//
	JurisdictionName string `xml:"JurisdictionName,omitempty"`

	//
	// Returns the latest version number for this feature. Use the version to determine
	// if and when to refresh your cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// The time in GMT when the details for this feature were last updated. Use this
	// timestamp to determine if and when to refresh your cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type TaxTableType struct {

	//
	// In a <b>SetTaxTable</b>, a <b>TaxJurisdiction</b> container is required for each tax jurisdiction that the seller wishes to make additions/changes. Sales tax details for zero or more jurisdictions (states,
	// provinces, etc). This can be just one jurisdiction, up to all jurisdictions defined for the site's country. Any values specified through a <b>TaxJurisdiction</b> container will override any existing values defined in the seller's Sales Tax Table.
	// <br><br>
	// If <b>GetTaxTable</b> is called without the <b>DetailLevel</b> field, only tax jurisdictions where sales tax rates have been set up are returned. However, if the <b>DetailLevel</b> field is included in the request and set to <code>ReturnAll</code>, all tax jurisdictions are returned, regardless of whether or not the seller has modified settings for any/all of these jurisdictions.
	// <br><br>
	// This container is only returned in order-related 'Get' calls if sales tax is applicable to the order line item.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. So, if a sales tax rate is established for a state that is subject to 'eBay Collect and Remit', this sales tax rate will be ignored by eBay during checkout process. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	// </span>
	//
	TaxJurisdiction []*TaxJurisdictionType `xml:"TaxJurisdiction,omitempty"`
}

type TaxesType struct {

	//
	// This value indicates the total tax amount for the order line item, including the
	// sales tax on the item, the sales tax on shipping and handling, and any electronic
	// waste recycling fee.
	//
	TotalTaxAmount *AmountType `xml:"TotalTaxAmount,omitempty"`

	//
	// Container consisting of detailed sales tax information for an order line item,
	// including the tax type and description, sales tax on the item cost, and sales tax
	// related to shipping and handling.
	//
	TaxDetails []*TaxDetailsType `xml:"TaxDetails,omitempty"`
}

type ThemeGroupType struct {

	//
	// Unique identifier for this theme group.
	//
	GroupID int32 `xml:"GroupID,omitempty"`

	//
	// Name of this theme group (localized to the language associated
	// with the eBay site).
	//
	GroupName string `xml:"GroupName,omitempty"`

	//
	// Unique identifier for each theme in this group. There
	// is at least one theme in a theme group.
	//
	ThemeID []int32 `xml:"ThemeID,omitempty"`

	//
	// The number of <b>ThemeID</b> elements in this group.
	//
	ThemeTotal int32 `xml:"ThemeTotal,omitempty"`
}

type TicketListingDetailsType struct {

	//
	// The name of the event, as shown on the ticket. Typically the
	// headliner. There is no maximum number of words or characters.
	// However, the words in the name must be an exact match (or a subset
	// consisting of complete words) to the words in the product title in
	// the catalog. The words in the name are matched using OR logic
	// (the order of the words does not matter). As with all strings, you
	// need to escape reserved characters such as ampersand.
	// <br>
	//
	EventTitle string `xml:"EventTitle,omitempty"`

	//
	// The name of the venue, as shown on the ticket.
	// The validation rules are the same as the rules for the event name.
	// In addition, eBay supports both US English and UK English spelling
	// variations for typical words found on tickets (such as "theater" and
	// "theatre"). As with all strings, you need to escape reserved
	// characters such as ampersand.
	// <br>
	//
	Venue string `xml:"Venue,omitempty"`

	//
	// The date of the event, as shown on the ticket. Use the date shown on
	// the ticket, without attempting to adjust it for a different time
	// zone (such as Pacific time or GMT).<br>
	// <br>
	// In most cases, you should be able to specify any numeric date format
	// in month/day/year order. eBay supports m or mm for the month,
	// d or dd for the day, and yy or yyyy for the year, in all
	// combinations. The delimiters must be forward slashes (/).
	//
	PrintedDate string `xml:"PrintedDate,omitempty"`

	//
	// The time of the event, as shown on the ticket. Use the time value
	// shown on the ticket, without attempting to convert it to a different
	// time zone (such as Pacific time or GMT). Do not round the value up
	// or down (e.g., do not round 7:01 PM to 7:00 PM).<br>
	// <br>
	// In most cases, you should be able to specify the time format exactly
	// as shown on the ticket.
	//
	PrintedTime string `xml:"PrintedTime,omitempty"`
}

type TimeRangeType struct {

	//
	// Specifies the earliest (oldest) date to be used in a date range.
	//
	TimeFrom time.Time `xml:"TimeFrom,omitempty"`

	//
	// Specifies the latest (most recent) date to be used in a date range.
	//
	TimeTo time.Time `xml:"TimeTo,omitempty"`
}

type TimeZoneDetailsType struct {

	//
	// A unique identifier for a given time zone. This ID does not change for a
	// given time zone, even if the time zone supports both standard and daylight
	// saving time variants. Valid values for TimeZoneID correspond to OLSON IDs.
	// These IDs provide not only the information as to the offset from GMT (UTC),
	// but also daylight saving time information. Thus, for example, America/Phoenix
	// is distinct from America/Denver because they have different daylight saving
	// time behavior. This value is not localized.
	//
	TimeZoneID string `xml:"TimeZoneID,omitempty"`

	//
	// Display name of a time zone in its standard (non-daylight saving) time
	// representation. This value is localized and returned in the language for the
	// site specified in the request (i.e., the numeric site ID that you specify in
	// the request URL for the SOAP API or the X-EBAY-API-SITEID header for the XML
	// API).
	//
	StandardLabel string `xml:"StandardLabel,omitempty"`

	//
	// The offset in hours from GMT for a time zone when it is not adjusted for
	// daylight saving time.
	//
	StandardOffset string `xml:"StandardOffset,omitempty"`

	//
	// Display name of a time zone in its daylight saving time representation.
	// This element is emitted for time zones that support daylight saving time
	// only. The value is localized and returned in the language for the site
	// specified in the request.
	//
	DaylightSavingsLabel string `xml:"DaylightSavingsLabel,omitempty"`

	//
	// The offset in hours from GMT for a time zone when it is on daylight saving
	// time. This element is emitted for time zones that support daylight
	// saving time only.
	//
	DaylightSavingsOffset string `xml:"DaylightSavingsOffset,omitempty"`

	//
	// Indicates whether or not the time zone is currently on daylight saving time.
	// A value of true indicates that the time zone is on daylights savings time.
	// This element is emitted for time zones that support daylight saving time only.
	//
	DaylightSavingsInEffect bool `xml:"DaylightSavingsInEffect,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type TokenStatusType struct {

	//
	// Current token status.
	//
	Status *TokenStatusCodeType `xml:"Status,omitempty"`

	//
	// Identifies the user to whom the token belongs.
	//
	EIASToken string `xml:"EIASToken,omitempty"`

	//
	// Original expiration time for the token.
	//
	ExpirationTime time.Time `xml:"ExpirationTime,omitempty"`

	//
	// Token revocation time, if the token has been revoked.
	//
	RevocationTime time.Time `xml:"RevocationTime,omitempty"`
}

type TopRatedSellerDetailsType struct {

	//
	// A <b>TopRatedProgram</b> field is returned for each Top-Rated Seller program that the eBay user qualifies for.
	//
	TopRatedProgram []*TopRatedProgramCodeType `xml:"TopRatedProgram,omitempty"`
}

type TransactionArrayType struct {

	//
	// A <b>Transaction</b> container is returned for each line item in the order. This container consists of detailed information on one order line item.
	// <br/><br/>
	// For the <b>AddOrder</b> call, a <b>Transaction</b> container is used to identified the unpaid order line items that are being combined into one Combined Invoice order.
	//
	Transaction []*TransactionType `xml:"Transaction,omitempty"`
}

type TransactionReferenceType struct {
	Value string

	//
	// This attribute indicates the type of payment.
	//
	Type *TransactionReferenceCodeType `xml:"type,attr,omitempty"`
}

type TransactionStatusType struct {

	//
	// Indicates the success or failure of the buyer's online payment for an order.
	// Applicable for the payment method that the buyer chose for the order. If the
	// payment failed, the value returned indicates the reason for the failure.
	//
	EBayPaymentStatus *PaymentStatusCodeType `xml:"eBayPaymentStatus,omitempty"`

	//
	// Indicates the current status of the checkout flow for the order.
	//
	CheckoutStatus *CheckoutStatusCodeType `xml:"CheckoutStatus,omitempty"`

	//
	// Indicates date and time an order's status was last updated (in GMT).
	//
	LastTimeModified time.Time `xml:"LastTimeModified,omitempty"`

	//
	// The payment method that the buyer selected to pay for the order. If checkout is not yet complete, <b>PaymentMethodUsed</b>, which is returned by the <b>GetItemTransactions</b> call, is set to whatever the buyer selected as his or her preference on the Review Your Purchase page.
	//
	PaymentMethodUsed *BuyerPaymentMethodCodeType `xml:"PaymentMethodUsed,omitempty"`

	//
	// Indicates whether checkout is complete, incomplete, or pending for an order.
	//
	CompleteStatus *CompleteStatusCodeType `xml:"CompleteStatus,omitempty"`

	//
	// Indicates whether the buyer has selected shipping details
	// during checkout. False indicates that the shipping service was
	// selected by eBay for the buyer. For example, if the buyer has
	// not yet completed the Review Your Purchase page, he has not
	// picked a shipping service. If it is false, the application
	// should ignore <strong>ShippingServiceCost</strong> and <strong>ShippingServiceSelected</strong>
	// (items whose values are defaulted by eBay).
	//
	BuyerSelectedShipping bool `xml:"BuyerSelectedShipping,omitempty"`

	//
	// This field indicates the type and/or status of a payment hold on the item.
	//
	PaymentHoldStatus *PaymentHoldStatusCodeType `xml:"PaymentHoldStatus,omitempty"`

	//
	// Indicates whether the item can be paid for through a payment gateway account.
	// If <strong>IntegratedMerchantCreditCardEnabled</strong> is true, then integrated merchant
	// credit card (IMCC) is enabled for credit cards because the seller
	// has a payment gateway (Payflow) account.
	// Therefore, if <strong>IntegratedMerchantCreditCardEnabled</strong> is true, and AmEx, Discover, or
	// VisaMC is returned for an item, then on checkout, an online credit card payment
	// is processed through a payment gateway account.
	//
	IntegratedMerchantCreditCardEnabled bool `xml:"IntegratedMerchantCreditCardEnabled,omitempty"`

	//
	// This container is no longer used.
	//
	EBayPaymentMismatchDetails *EBayPaymentMismatchDetailsType `xml:"eBayPaymentMismatchDetails,omitempty"`

	//
	// This field gives the status of a buyer's Item Not Received (INR) Inquiry. This field is only returned if the buyer has created an INR Inquiry through the site or through the Post-Order API.
	//
	InquiryStatus *InquiryStatusCodeType `xml:"InquiryStatus,omitempty"`

	//
	// This field gives the status of a buyer's return request. This field is only returned if the buyer has initiated a return request, or has escalated an existing return request into a return case.
	//
	ReturnStatus *ReturnStatusCodeType `xml:"ReturnStatus,omitempty"`

	//
	// The enumeration value in this field indicates which payment method was used by the German buyer who was offered the 'Pay Upon Invoice' option. This field will only be returned if a German buyer was offered the 'Pay Upon Invoice' option. Otherwise, the buyer's selected payment method is returned in the <b>PaymentMethodUsed</b> field by the <b>GetItemTransactions</b> call.
	//
	PaymentInstrument *BuyerPaymentInstrumentCodeType `xml:"PaymentInstrument,omitempty"`

	//
	// This enumeration value indicates the current state of a purchased digital gift card. The normal flow is for the buyer (or other recipient of the gift card) to download the gift card from the delivered email after purchase, and then to activate the card for use. This field is only applicable and returned for digital gift card order line items.
	//
	DigitalStatus *DigitalStatusCodeType `xml:"DigitalStatus,omitempty"`

	//
	// The current status for the order cancellation request if it exists. This field is only returned if a cancellation request has been made on an order, or if the order is currently going through the cancellation process, or if the order has already been cancelled.
	//
	CancelStatus *CancelStatusCodeType `xml:"CancelStatus,omitempty"`
}

type TransactionType struct {

	//
	// The total amount the buyer paid for the order line item. This
	// amount includes all costs such as shipping, handling, or sales tax. If the
	// seller allowed the buyer to change the total for an order, the buyer is
	// able to change the total up until the time when Checkout status is
	// Complete. Determine whether the buyer changed the amount by retrieving the
	// order line item data and comparing the <b>AmountPaid</b> value to
	// what the seller expected. If multiple order line items
	// between the same buyer and seller have been combined into a Combined
	// Invoice order, the <b>AmountPaid</b> value returned in <b>GetSellerTransactions</b> and
	// <b>GetItemTransactions</b> reflects the amount paid for the Combined Invoice order
	// and not the individual order line item. You can determine the
	// order line items that belong to the same Combined Invoice order by checking
	// to see if the <b>ContainingOrder.OrderID</b> value is the same. For Motors items,
	// <b>AmountPaid</b> is the amount paid by the buyer for the deposit.
	//
	AmountPaid *AmountType `xml:"AmountPaid,omitempty"`

	//
	// Adjustment amount entered by the buyer. A positive amount indicates the
	// amount is an extra charge being paid to the seller by the buyer. A negative
	// value indicates this amount is a credit given to the buyer by the seller.
	//
	AdjustmentAmount *AmountType `xml:"AdjustmentAmount,omitempty"`

	//
	// Converted value of <b>AdjustmentAmount</b> in the currency of the site that
	// returned the response. Refresh this value every 24 hours to pick up the
	// current conversion rates.
	//
	ConvertedAdjustmentAmount *AmountType `xml:"ConvertedAdjustmentAmount,omitempty"`

	//
	// Container consisting of user and shipping details for the buyer. See
	// <b>UserType</b> for its child elements. Returned by <b>GetItemsAwaitingFeedback</b> if
	// Seller is making the request.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this container will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, real data is only returned to the buyer or seller, and dummy/masked data will be returned to all third parties.
	//
	Buyer *UserType `xml:"Buyer,omitempty"`

	//
	// Container consisting of shipping-related details for an order. Shipping
	// details include shipping rates, package dimensions, handling costs,
	// excluded shipping locations (if specified), shipping service options,
	// shipping insurance information, sales tax information (if applicable), and
	// shipment tracking details (if shipped).
	// <br><br>
	// For <b>GetSellerTransactions</b> and <b>GetItemTransactions</b>, the <b>ShippingDetails</b>
	// container is returned in the <b>Transaction</b> container. For <b>GetOrders</b> and
	// <b>GetOrderTransactions</b>, the <b>ShippingDetails</b> container is returned at the
	// Order level.
	//
	ShippingDetails *ShippingDetailsType `xml:"ShippingDetails,omitempty"`

	//
	// Converted value of <b>AmountPaid</b> in the currency of the site that returned the
	// response. Refresh this value every 24 hours to pick up the current
	// conversion rates.
	//
	ConvertedAmountPaid *AmountType `xml:"ConvertedAmountPaid,omitempty"`

	//
	// Converted value of <b>TransactionPrice</b> in the currency of the site that returned the response. Refresh this value every 24 hours to pick up the current conversion rates.
	//
	ConvertedTransactionPrice *AmountType `xml:"ConvertedTransactionPrice,omitempty"`

	//
	// Indicates the creation time of the order line item. For
	// auction listings, an order line item is created when that
	// listing ends with a high bidder whose bid meets or exceeds the Reserve
	// Price (if set). For a fixed-price listing or a Buy It Now auction listing,
	// an order line item is created once the buyer clicks the Buy
	// button.
	//
	CreatedDate time.Time `xml:"CreatedDate,omitempty"`

	//
	// This value indicates whether or not the seller requires a deposit for the
	// vehicle. This field is only applicable to US eBay Motors listings.
	// Otherwise, this field is returned as an empty value.
	//
	DepositType *DepositTypeCodeType `xml:"DepositType,omitempty"`

	//
	// Container consisting of details about an item in a listing. The child
	// fields return are dependent on the call, the type of item or listing, and
	// the listing site.
	//
	Item *ItemType `xml:"Item,omitempty"`

	//
	// This value indicates the number of identical items purchased at the same
	// time by the same buyer from one listing. For auction listings, this value
	// is always 1. For fixed-price, non-variation listings, this value can be
	// greater than 1. In either case, this field is tied to the same order line
	// item.
	//
	QuantityPurchased int32 `xml:"QuantityPurchased,omitempty"`

	//
	// Container consisting of status details of an order line item,
	// including payment information. Several of these fields change values during
	// the checkout flow. See <b>TransactionStatusType</b> for its child elements.
	// <br><br>
	// For <b>GetOrders</b>, only the <b>IntegratedMerchantCreditCardEnabled</b>,
	// and <b>PaymentHoldStatus</b> child elements are returned. The
	// fields indicating the status of the order are actually found in the
	// <b>OrderArray.Order.CheckoutStatus</b> container.
	//
	Status *TransactionStatusType `xml:"Status,omitempty"`

	//
	// Unique identifier for an eBay order line item. An order line
	// item is created once there is a commitment from a buyer to
	// purchase an item. Since an auction listing can only have one order line
	// item during the duration of the listing, the <b>TransactionID</b>
	// for auction listings is always 0. Along with its corresponding <b>ItemID</b>, a
	// <b>TransactionID</b> is used and referenced during an order checkout flow and
	// after checkout has been completed.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer, seller, or PayPal (if payment method is PayPal), and no longer returned at all to third parties (except for PayPal). If using a Trading WSDL older than Version 1019, transaction ID is only returned to the buyer, seller or PayPal, and a dummy value of <code>10000000000000</code> will be returned to all third parties (except for PayPal).
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// The sale price for one unit of the order line item. This price does not include any other costs like shipping charges or sales tax, and its value will remain the same before and after payment. If multiple units were purchased through a single-variation, fixed-price listing, to get the subtotal of the units purchased, the <b>TransactionPrice</b> value would have to be multiplied by the <b>Transaction.QuantityPurchased</b> value. <br><br>
	// For a motor vehicle listing that required a deposit/down payment, the amount in the <b>TransactionPrice</b> is actually the deposit amount. <br><br>
	// <strong>For GetMyeBaySelling</strong>: this field is only returned if the transaction came as a result of a buyer's Best Offer accepted by the seller. Otherwise, the <b>Transaction.TotalPrice</b> field should be viewed instead.
	//
	TransactionPrice *AmountType `xml:"TransactionPrice,omitempty"`

	//
	// Indicates whether or not the order line item was created
	// as the result of the seller accepting a Best Offer from a buyer.
	//
	BestOfferSale bool `xml:"BestOfferSale,omitempty"`

	//
	// VAT rate for the item. When the <b>VATPercent</b> is specified, the item's VAT
	// information appears on the item's listing page. In addition, the seller
	// can choose to print an invoice that includes the item's net price, VAT
	// percent, VAT amount, and total price. Since VAT rates vary depending on the
	// item and on the user's country of residence, a seller is responsible for
	// entering the correct VAT rate; it is not calculated by eBay. To specify a
	// <b>VATPercent</b>, a seller must have a VAT-ID registered with eBay and must be
	// listing the item on a VAT-enabled site. Max precision 3 decimal places. Max
	// length 5 characters. Note: The View Item page displays the precision to 2
	// decimal places with no trailing zeros. However, the full value you send in is
	// stored.
	//
	VATPercent float64 `xml:"VATPercent,omitempty"`

	//
	// Container consisting of details for a PayPal transaction that relates to
	// the eBay order. PayPal transactions may include a buyer payment or refund,
	// or a fee or credit applied to the seller's account. This field is only
	// returned if a PayPal transaction related to order has occurred.
	// <br><br>
	// <b>For GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the real transaction identifier is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	ExternalTransaction []*ExternalTransactionType `xml:"ExternalTransaction,omitempty"`

	//
	// This container consists of Selling Manager product details and is only
	// returned if the item was listed through Selling Manager.
	//
	SellingManagerProductDetails *SellingManagerProductDetailsType `xml:"SellingManagerProductDetails,omitempty"`

	//
	// The shipping service selected by the buyer from the services
	// offered by the seller.
	//
	ShippingServiceSelected *ShippingServiceOptionsType `xml:"ShippingServiceSelected,omitempty"`

	//
	// Display message from buyer. This field holds transient data that is only
	// being returned in Checkout related notifications.
	//
	BuyerMessage string `xml:"BuyerMessage,omitempty"`

	//
	// This field is deprecated.
	//
	DutchAuctionBid *AmountType `xml:"DutchAuctionBid,omitempty"`

	//
	// Specifies the paid status of the order.
	//
	BuyerPaidStatus *PaidStatusCodeType `xml:"BuyerPaidStatus,omitempty"`

	//
	// Specifies the paid status of the order.
	//
	SellerPaidStatus *PaidStatusCodeType `xml:"SellerPaidStatus,omitempty"`

	//
	// Indicates the time when the order was marked paid. This field is not
	// returned until payment has been made by the buyer. This field will not be returned for orders where the buyer has received partial or full refunds.
	// <br><br>
	// This value will only be
	// visible to the user on either side of the order. An order can be marked as
	// paid in the following ways:
	// <ul>
	// <li>Automatically when a payment is made via PayPal </li>
	// <li>Seller marks the item as paid in My eBay or through Selling Manager Pro </li>
	// <li>Programmatically by the seller through the <b>ReviseCheckoutStatus</b> or <b>CompleteSale</b> calls.</li>
	// </ul>
	//
	PaidTime time.Time `xml:"PaidTime,omitempty"`

	//
	// Indicates the time when the item(s) associated with the order were marked as shipped. This value will only be visible to the user on either side of the order. An order can be marked as shipped in My eBay or through Selling Manager Pro, or programmatically by the seller through the <b>CompleteSale</b> call.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// This field does not appear in Merchant Data API's <b>OrderReport</b> or <b>SoldReport</b> responses, because once shipment tracking information is provided to the buyer (or marked as shipped), the order/order line item is considered acknowledged, and acknowledged orders do not show up in <b>OrderReport</b> or <b>SoldReport</b> responses.
	// </span>
	//
	ShippedTime time.Time `xml:"ShippedTime,omitempty"`

	//
	// This field indicates the total price for an order line item. Before payment, this dollar value will be the price before a shipping service option is selected. Once a shipping service option is selected, the price in this field will be updated to reflect the shipping and handling costs associated with that shipping service option.
	//
	TotalPrice *AmountType `xml:"TotalPrice,omitempty"`

	//
	// This container consists of Feedback left by the caller for their order
	// partner. This container is only returned if the order is complete and
	// feedback on the order line item has been left by the caller.
	//
	FeedbackLeft *FeedbackInfoType `xml:"FeedbackLeft,omitempty"`

	//
	// This container consists of Feedback received by the caller from their
	// order partner. This container is only returned if the order is complete and
	// feedback on the order line item has been received by the
	// caller.
	//
	FeedbackReceived *FeedbackInfoType `xml:"FeedbackReceived,omitempty"`

	//
	// The Combined Invoice order to which the order line item
	// belongs. This container is only returned if <b>IncludeContainingOrder</b> is
	// included and set to true in a <b>GetItemTransactions</b> or <b>GetSellerTransactions</b>
	// request.
	//
	ContainingOrder *OrderType `xml:"ContainingOrder,omitempty"`

	//
	// A Final Value Fee is calculated and charged to a seller's account
	// immediately upon creation of an order line item. Note that this fee is created
	// before the buyer makes a payment.The Final Value Fee for each order line
	// item is returned by <b>GetSellerTransactions</b>, <b>GetItemTransactions</b>, <b>GetOrders</b>,
	// and <b>GetOrderTransactions</b>, regardless of the checkout status.
	// <br><br>
	// If a seller requests a Final Value Fee credit, the value of
	// <b>Transaction.FinalValueFee</b> will not change if a credit is
	// issued. The credit only appears in the seller's account data.
	//
	FinalValueFee *AmountType `xml:"FinalValueFee,omitempty"`

	//
	// This field is no longer applicable
	//
	ListingCheckoutRedirectPreference *ListingCheckoutRedirectPreferenceType `xml:"ListingCheckoutRedirectPreference,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This container is only applicable for Half.com order refunds, and since the Half.com site has been shut down, this field is no longer applicable.
	// </span>
	// Container consisting of one or more refund transactions to Half.com buyers.
	//
	RefundArray *RefundArrayType `xml:"RefundArray,omitempty"`

	//
	// The site upon which the order line item (transaction) was created.
	//
	TransactionSiteID *SiteCodeType `xml:"TransactionSiteID,omitempty"`

	//
	// This value indicates the site on which the order line item originated.
	// <br><br>
	// <span class="tablenote"><b>Note: </b> Currently, the only value that should be returned in this field is <code>eBay</code>,  as Half.com listings will no longer be supported in APIs.
	// </span>
	//
	Platform *TransactionPlatformCodeType `xml:"Platform,omitempty"`

	//
	// This field is no longer applicable as Shopping.com listings are no longer created or managed with eBay APIs.
	//
	CartID string `xml:"CartID,omitempty"`

	//
	// This field is no longer applicable as Shopping.com listings are no longer created or managed with eBay APIs.
	//
	SellerContactBuyerByEmail bool `xml:"SellerContactBuyerByEmail,omitempty"`

	//
	// The seller's PayPal email address. This value is only revealed if it is the
	// seller making the call.
	//
	PayPalEmailAddress string `xml:"PayPalEmailAddress,omitempty"`

	//
	// Unique identifier for a <b>PaisaPay</b> transaction. Only applicable if <b>PaisaPay</b> was the payment method used.
	//
	PaisaPayID string `xml:"PaisaPayID,omitempty"`

	//
	// For the Australia site, <b>BuyerGuaranteePrice</b> is the PayPal Buyer Protection coverage,
	// offered for the item at the time of purchase. Details of coverage are in the
	// following sections of the View Item page: the Buy Safely section and the Payment
	// Details section.
	//
	BuyerGuaranteePrice *AmountType `xml:"BuyerGuaranteePrice,omitempty"`

	//
	// In a fixed-priced listing, a seller can offer variations of the same item.
	// For example, the seller could create a fixed-priced listing for a t-shirt
	// design and offer the shirt in different colors and sizes. In this case, each
	// color and size combination is a separate variation. Each variation can have
	// a different quantity and price. Due to the possible price differentiation,
	// buyers can buy multiple items from this listing at the same time, but all of
	// the items must be of the same variation. One order line item is created
	// whether one or multiple items of the same variation are purchased.
	// <br><br>
	// The <b>Variation</b> node contains information about which variation
	// was purchased. Therefore, applications that process orders
	// should always check to see if this node is present.
	//
	Variation *VariationType `xml:"Variation,omitempty"`

	//
	// This field is returned if a buyer left a comment for the seller during the
	// left by buyer during the checkout flow.
	// <br><br>
	// <b>For GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, real data is only returned to the buyer or seller, and a string value of <code>Unavailable</code> will be returned to all third parties.
	//
	BuyerCheckoutMessage string `xml:"BuyerCheckoutMessage,omitempty"`

	//
	// The sale price of the order line item. This amount does not take
	// into account shipping and handling charges, sales tax, or any other costs related to the order line
	// item. If multiple units were purchased through a non-
	// variation, fixed-price listing, this value will reflect that. So, if the base cost of the order line item was $15.00, and a quantity of two were purchased (<b>Transaction.QuantityPurchased</b>) the value in this field would show as <code>30.00</code>.
	// <br><br>
	// To see the full price of the order line item, including any shipping and handling charges, and any sales tax, the (<b>Transaction.TotalPrice</b>) field value should be viewed instead. However, note that the <b>TotalPrice</b> field value is only updated after a shipping service option is selected and payment is made. And if the seller is offering free shipping, the values in the <b>TotalTransactionPrice</b> and the <b>TotalPrice</b> fields may be the same.
	//
	TotalTransactionPrice *AmountType `xml:"TotalTransactionPrice,omitempty"`

	//
	// A container consisting of detailed tax information (sales tax, Goods and Services tax, or VAT) for an order line item. The <b>Taxes</b> container is only returned if the order line item is subject to a tax on the buyer's purchase. The information in this container supercedes/overrides any sales tax information in the <b>ShippingDetails.SalesTax</b> container.
	//
	Taxes *TaxesType `xml:"Taxes,omitempty"`

	//
	// Boolean value indicating whether or not an order line item is
	// part of a bundle purchase using Product Configurator.
	//
	BundlePurchase bool `xml:"BundlePurchase,omitempty"`

	//
	// The shipping cost paid by the buyer for the order line item. This field is only returned after checkout is complete.
	//
	ActualShippingCost *AmountType `xml:"ActualShippingCost,omitempty"`

	//
	// The handling cost that the seller has charged for the order line item. This field is only returned after checkout is complete.
	// <br><br>
	// The value of this field is returned as zero dollars (0.0) if the seller did not specify a handling cost for the listing.
	//
	ActualHandlingCost *AmountType `xml:"ActualHandlingCost,omitempty"`

	//
	// A unique identifier for an eBay order line item. This field is created as
	// soon as there is a commitment to buy from the seller, and its value is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, order line item ID is only returned to the buyer or seller, and a dummy value of <code>10000000000000</code> will be returned to all third parties.
	// <br>
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`

	//
	// The generated eBay payment ID used by the buyer when he/she chooses electronic
	// transfer as payment method for paying the seller. This field is only applicable to the eBay Germany site (Site ID 77).
	//
	EBayPaymentID string `xml:"eBayPaymentID,omitempty"`

	//
	// This container consists of information related to the payment hold on the order line item, including the reason why the buyer's payment for the order line item is being held, the expected release date of the funds into the seller's account, and possible action(s) the seller can take to expedite the payout of funds into their account. This container is only returned if PayPal has placed a payment hold on the order line item.
	// <br/><br/>
	// An American seller (selling on US or US Motors sites) and a Canadian seller (selling on CA and CA- FR sites) may be subject to PayPal payment holds (that last from three to 21 days) if that seller is new to selling on eBay or is classified as a "Below Standard" seller. For other reasons why a seller's funds may be held by PayPal, see the <b>PaymentHoldReason</b> field.
	//
	PaymentHoldDetails *PaymentHoldDetailType `xml:"PaymentHoldDetails,omitempty"`

	//
	// A container consisting of name and ID of the seller's discount campaign, as well as the discount amount that is being applied to the order line item.
	//
	SellerDiscounts *SellerDiscountsType `xml:"SellerDiscounts,omitempty"`

	//
	// This field is deprecated.
	//
	RefundAmount *AmountType `xml:"RefundAmount,omitempty"`

	//
	// This field is deprecated.
	//
	RefundStatus string `xml:"RefundStatus,omitempty"`

	//
	// This field is returned if the <b>IncludeCodiceFiscale</b> flag is included in the request and set to <code>true</code>, and if the buyer has provided this value at checkout time.
	// <br/><br/>
	// This field is only applicable to buyers on the Italy and Spain sites. The Codice Fiscale number is unique for each Italian and Spanish citizen and is used for tax purposes.
	//
	CodiceFiscale string `xml:"CodiceFiscale,omitempty"`

	//
	// If <strong>IsMultilegShipping</strong> is true, the Global Shipping Program (GSP) will be used to ship the order line item to an international buyer. A GSP shipment has a domestic leg and an international leg. The buyer's shipping address is in a country other than the country where the item was listed, and the seller has specified 'InternationalPriorityShipping' as the default international shipping service in the listing.
	// <br/><br/>
	// If <strong>IsMultilegShipping</strong> is false, the order line item will not be shipped with the Global Shipping Program.
	// </span>
	//
	IsMultiLegShipping bool `xml:"IsMultiLegShipping,omitempty"`

	//
	// Contains details about the domestic leg of a Global Shipping Program shipment.
	// <br/><br/>
	// This container is not returned if <strong>IsMultilegShipping</strong> is false.
	//
	MultiLegShippingDetails *MultiLegShippingDetailsType `xml:"MultiLegShippingDetails,omitempty"`

	//
	// This field indicates the date/time that an order invoice was sent from the seller to the buyer. This field is only returned if an invoice (containing the order line item) was sent to the buyer.
	//
	InvoiceSentTime time.Time `xml:"InvoiceSentTime,omitempty"`

	//
	// Container consisting of details related to the type and status of an Unpaid Item case. This container is only returned if there is an open or closed Unpaid Item case associated with the order line item.
	//
	UnpaidItem *UnpaidItemType `xml:"UnpaidItem,omitempty"`

	//
	// This flag indicates whether or not the order line item is an intangible good such as an MP3 track or a mobile phone ringtone. Intangible items are not eligible for PayPal's Seller Protection program, so the seller will not be able to open an Unpaid Item case against the buyer.
	//
	IntangibleItem bool `xml:"IntangibleItem,omitempty"`

	//
	// Contains information about how funds exchanged for an order line item are allocated to payees.
	// <br/><br/>
	// For example, for an order line item using eBay's Global Shipping Program, users can see the portion of the buyer's payment that is allocated as shipping and import charges remitted to the international shipping provider. Currently, only payment information is returned.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> In an upcoming release, <strong>MonetaryDetails</strong> will replace the <strong>ExternalTransaction</strong> container, so you are encouraged to start using <strong>MonetaryDetails</strong> now.
	// </span>
	//
	MonetaryDetails *PaymentsInformationType `xml:"MonetaryDetails,omitempty"`

	//
	// Container consisting of an array of <strong>PickupOptions</strong> containers. Each <strong>PickupOptions</strong> container consists of the pickup method and	its priority. The priority of each pickup method controls the order (relative to other pickup methods) in which the corresponding pickup method will appear in the View Item and Checkout page. With this initial version of In-Store Pickup, the only pickup method is 'InStorePickup'.
	// <br/><br/>
	// For <strong>GetOrders</strong> and <strong>GetOrderTransactions</strong>, this container is always returned prior to order payment if the seller created/revised/relisted the item with the <strong>EligibleForPickupInStore</strong> flag in the call request set to 'true'. If and when the In-Store pickup method is selected by the buyer and payment for the order is made, this container will no longer be returned in the response, and will essentially be replaced by the <strong>PickupMethodSelected</strong> container.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> A seller must be eligible for the In-Store Pickup feature to list an item that is eligible for In-Store Pickup. At this time, the In-Store Pickup feature is generally only available to large retail merchants in US, and can only be applied to multi-quantity, fixed-price listings.
	// </span>
	//
	PickupDetails *PickupDetailsType `xml:"PickupDetails,omitempty"`

	//
	// This container consists of details related to the selected In-Store pickup method, including the pickup method, the merchant's store ID, the status of the In-Store pickup, and the pickup reference code (if provided by merchant).
	//
	PickupMethodSelected *PickupMethodSelectedType `xml:"PickupMethodSelected,omitempty"`

	//
	// The dollar value in this field indicates the amount that the seller is being charged (at line item level) for the convenience of an eBay Scheduled Delivery. eBay Scheduled Delivery is currently only available in the London (UK) area.
	//
	ShippingConvenienceCharge *AmountType `xml:"ShippingConvenienceCharge,omitempty"`

	//
	// This field will be returned at the order line item level only if the buyer purchased a digital gift card, which is delivered by email, or if the buyer purchased an item that is enabled with the 'Click and Collect' feature.
	// <br/><br/>
	// Currently, <strong>LogisticsPlanType</strong> has two applicable values: <code>PickUpDropOff</code>, which indicates that the buyer selected the 'Click and Collect' option. With Click and Collect, buyers are able to purchase from thousands of sellers on the eBay UK,  Australia, and Germany sites, and then pick up their order from the nearest 'eBay Collection Point', including over 750 Argos stores in the UK. The Click and Collect feature is only available on the eBay UK, Australia, and Germaany sites; or, <code>DigitalDelivery</code>, which indicates that the order line item is a digital gift card that will be delivered to the buyer or recipient of the gift card by email.
	//
	LogisticsPlanType string `xml:"LogisticsPlanType,omitempty"`

	//
	// This container is returned in <b>GetOrders</b> (and other order management calls) if the 'Pay Upon Invoice' option is being offered to the buyer, and the seller is including payment instructions in the shipping package(s) for the order. The 'Pay Upon Invoice' option is only available on the German site.
	//
	BuyerPackageEnclosures *BuyerPackageEnclosuresType `xml:"BuyerPackageEnclosures,omitempty"`

	//
	// The unique identifier of the inventory reservation.
	//
	InventoryReservationID string `xml:"InventoryReservationID,omitempty"`

	//
	// A unique identifier for an eBay order line item in the new Inventory model. <b>ExtendedOrderID</b> values will be used to identify orders in REST-based APIs, including the Post-Order API and the Fulfillment API. Below is the syntax/format used for an <b>ExtendedOrderID</b> value:
	// <br><br>
	// <code>240698113015!140000138620555</code>
	// <br><br>
	// For Trading and Merchant Data API order management calls, <b>OrderID</b> values should still be used.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the correct Order ID is returned to the buyer or seller, but a dummy Order ID value of <code>1000000000000</code> will be returned to all third parties.
	//
	ExtendedOrderID string `xml:"ExtendedOrderID,omitempty"`

	//
	// If <code>true</code>, this transaction is for an item that was purchased under the eBay Plus program. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top Rated eBay sellers must opt in to eBay Plus to be able offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.
	// <br/><br/>
	// <span class="tablenote"><b>Note:</b> Currently, eBay Plus is available only to buyers in Germany, Austria, and Australia.
	// </span>
	//
	EBayPlusTransaction bool `xml:"eBayPlusTransaction,omitempty"`

	//
	// This container is returned in <b>GetOrders</b> and other order management calls if a buyer has purchased a digital gift card but has sent it to another individual as a gift, and has left a message for the recipient. The <b>GiftSummary</b> container consists of the message that the buyer wrote for the recipient of the digital gift card. A digital gift card line item is indicated if the <b>DigitalDeliverySelected</b> container is returned in the response, and if the digital gift card is sent to another individual as a gift, the <b>Gift</b> boolean field will be returned with a value of <code>true</code>.
	//
	GiftSummary *GiftSummaryType `xml:"GiftSummary,omitempty"`

	//
	// This container is only returned by <b>GetOrders</b> and other order management calls if the buyer purchased a digital gift card for themselves, or is giving the digital gift card to someone else as a gift (in this case, the <b>Gift</b> boolean field will be returned with a value of <code>true</code>). The <b>DigitalDeliverySelected</b> container consists of information related to the digital gift card order line item, including the delivery method, delivery status, and recipient of the gift card (either the buyer, or another individual that is receiving the gift card as a gift from the buyer.
	//
	DigitalDeliverySelected *DigitalDeliverySelectedType `xml:"DigitalDeliverySelected,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the seller is giving a digital gift card to another individual as a gift. This field is only applicable for digital gift card order line items.
	//
	Gift bool `xml:"Gift,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> This field is for future use, as the eBay Guaranteed Shipping feature has been put on hold. eBay Guaranteed Shipping should not be confused with eBay Guaranteed Delivery, which is a completely different feature.
	// </span>
	// This field is returned as <code>true</code> if the seller chose to use eBay's Guaranteed Shipping feature at listing time. With eBay's Guaranteed Shipping, the seller will never pay more for shipping than what is charged to the buyer. eBay recommends the shipping service option for the seller to use based on the dimensions and weight of the shipping package.
	//
	GuaranteedShipping bool `xml:"GuaranteedShipping,omitempty"`

	//
	// This field is returned as <code>true</code> if the order line item is qualified for eBay Guaranteed Delivery, or <code>false</code> if it is not eligible. At this time, eBay Guaranteed Delivery is only available to a select number of sellers on the US and Australia sites, but this feature will be enabled on more eBay sites in 2019. <br/><br/>Only domestic shipments are available for eBay Guaranteed Delivery. For an order line item to be qualified for eBay Guaranteed Delivery, the following must be true:
	// <ul>
	// <li>The eBay Guaranteed Delivery feature must be available to the seller</li>
	// <li>That seller must be opted in to one of the two eBay Guaranteed Delivery programs</li>
	// <li>If the seller is opted into the "Door-to-Door" program, a domestic shipping rate table must be applied to the listing, and that shipping rate table must include the buyer's location with a transit time (handling + shipping time) of 3 business days or less; </li>
	// <li>If the seller is opted into the "Handling Time" program, the handling time plus the max shipping time must equal 3 business days or less, and that shipping rate table must include the buyer's location with a transit time (handling + shipping time) of 3 business days or less</li>
	// <li>The listing must have a return policy</li>
	// </ul>
	// With eBay Guaranteed Delivery, the sellers are committed to getting the order line item to the buyer within 3 business days. The seller's defined "Order Cutoff" time will control what is considered 3 business days. If a buyer wanted to get an order by Friday, that buyer would have to purchase that item on Monday before the seller's "Order Cutoff" time. The seller's "Order Cutoff" time is generally set in their timezone, so the buyer should take this into account before the purchase.
	//
	GuaranteedDelivery bool `xml:"GuaranteedDelivery,omitempty"`

	//
	// This boolean field is returned as <code>true</code> if the order line item is subject to a tax (US sales tax or Australian Goods and Services tax) that eBay will collect and remit to the proper taxing authority on the buyer's behalf. This field is not returned if <code>false</code>.  The type and amount of this tax is displayed in the corresponding <b>eBayCollectAndRemitTaxes.TaxDetails</b> container.
	// <br/><br/>
	// Australian 'Goods and Services' tax (GST) is automatically charged to buyers outside of Australia when they purchase items on the eBay Australia site. Sellers on the Australia site do not have to take any extra steps to enable the collection of GST, as this tax is collected by eBay and remitted to the Australian government. For more information about Australian GST, see the <a href="https://www.ebay.com.au/help/selling/fees-credits-invoices/taxes-import-charges?id=4121">Taxes and import charges</a> help topic.
	// <br/><br/>
	// Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. Sellers do not have to take any extra steps to enable the collection of this sales tax. If the seller is employing a Sales Tax Table for the listing, and a sales tax rate is established for a state that is subject to 'eBay Collect and Remit', this sales tax rate will be ignored by eBay. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	//
	EBayCollectAndRemitTax bool `xml:"eBayCollectAndRemitTax,omitempty"`

	//
	// This container is returned if the order line item is subject to a tax (US sales tax or Australian Goods and Services tax) that eBay will collect and remit to the proper taxing authority on the buyer's behalf. The type of tax will be shown in the <b>TaxDetails.Imposition</b> and <b>TaxDetails.TaxDescription</b> fields, and the amount of this tax will be displayed in the <b>TaxDetails.TaxAmount</b> field.
	// <br/><br/>
	// Australian 'Goods and Services' tax (GST) is automatically charged to buyers outside of Australia when they purchase items on the eBay Australia site. Sellers on the Australia site do not have to take any extra steps to enable the collection of GST, as this tax is collected by eBay and remitted to the Australian government. For more information about Australian GST, see the <a href="https://www.ebay.com.au/help/selling/fees-credits-invoices/taxes-import-charges?id=4121">Taxes and import charges</a> help topic.
	// <br/><br/>
	// Beginning January 1, 2019, buyers in some US states will automatically be charged sales tax for eBay purchases. eBay will collect and remit this sales tax to the proper taxing authority on the buyer's behalf. Sellers do not have to take any extra steps to enable the collection of this sales tax. If the seller is employing a Sales Tax Table for the listing, and a sales tax rate is established for a state that is subject to 'eBay Collect and Remit', this sales tax rate will be ignored by eBay. For a list of the US states that will become subject to 'eBay Collect and Remit' (and effective dates), see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121#section4">eBay sales tax collection</a> help topic.
	//
	EBayCollectAndRemitTaxes *TaxesType `xml:"eBayCollectAndRemitTaxes,omitempty"`
}

type UPCEnabledDefinitionType struct {
}

type UPCIdentifierEnabledDefinitionType struct {
}

type URLDetailsType struct {

	//
	// This enumeration value indicates the type of eBay page.
	//
	URLType *URLTypeCodeType `xml:"URLType,omitempty"`

	//
	// A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL)
	// to launch eBay Web site pages in a browser.<br><br>
	// Logo URLs are required to be used in certain types of applications.
	// See your API license agreement. Also see this page for logo usage rules:<br>
	// http://developer.ebay.com/join/licenses/apilogousage
	//
	URL *AnyURI `xml:"URL,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type UnitInfoType struct {

	//
	// Designation of size, weight, volume or count to be used to specify the unit quantity of the item. This value can be one of the following:
	// <br/>
	// <pre> Kg  100g  10g  L  100ml  10ml  M  M2  M3  Unit </pre>
	// With <b>GetItem</b>, this field is returned only when you provide <strong>IncludeItemSpecifics</strong> in the request and set it to <code>true</code>.
	//
	UnitType string `xml:"UnitType,omitempty"`

	//
	// Number of units of size, weight, volume or count of the specified unit type for the item. eBay divides the item price by this number to get the price per unit to be displayed in the item listing for comparison purposes.
	// <br/><br/>
	// With GetItem, this field is returned only when you provide <strong>IncludeItemSpecifics</strong> in the request and set it to <code>true</code>.
	//
	UnitQuantity float64 `xml:"UnitQuantity,omitempty"`
}

type UnitOfMeasurementDetailsType struct {

	//
	// This field is deprecated.
	//
	UnitOfMeasurement []*UnitOfMeasurementType `xml:"UnitOfMeasurement,omitempty"`

	//
	// This field is deprecated.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// This field is deprecated.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type UnitOfMeasurementType struct {

	//
	// This field is deprecated.
	//
	AlternateText []string `xml:"AlternateText,omitempty"`

	//
	// This field is deprecated.
	//
	SuggestedText string `xml:"SuggestedText,omitempty"`
}

type UnpaidItemAssistancePreferencesType struct {

	//
	// This value indicates the number of days that should elapse before the Unpaid
	// Item Assistant mechanism opens an Unpaid Item case on behalf of the seller.
	// <b>Valid values are</b>: 4, 8, 16, 24, and 32 (days).
	// <br/><br/>
	// This field is ignored if the <b>OptInStatus</b> flag is included and set to <code>false</code> in the request, or if the seller is not currently opted into the Unpaid Item Assistant feature in Unpaid Item Assistant Preferences on My eBay.
	// <br/>
	//
	DelayBeforeOpeningDispute int32 `xml:"DelayBeforeOpeningDispute,omitempty"`

	//
	// Flag to indicate whether or not the Unpaid Item Assistant mechanism is turned on for the seller. Through the Unpaid Item Assistant mechanism, eBay can automatically file Unpaid Item cases on behalf of the seller.
	// <br/><br/>
	// The Unpaid Item Assistant feature also has options to automatically relist disputed items, to automatically request a PayPal Giving Fund donation refund (for eBay for Charity listings only), or to create an 'Exclusion list' of buyers who are not subject to the automatic filing of an Unpaid Item case.
	//
	OptInStatus bool `xml:"OptInStatus,omitempty"`

	//
	// Flag to indicate whether or not the seller wants eBay to automatically relist
	// items after corresponding Unpaid Item cases are opened and closed through the
	// Unpaid Item Assistant mechanism without payment. For a multiple-quantity listing,
	// the quantity is adjusted if <b>AutoRelist</b> is set to <code>true</code>.
	// <br/><br/>
	// This field is ignored if the <b>OptInStatus</b> flag is included and set to <code>false</code> in the request, or if the seller is not currently opted into the Unpaid Item Assistant feature in Unpaid Item Assistant Preferences on My eBay.
	//
	AutoRelist bool `xml:"AutoRelist,omitempty"`

	//
	// This field should be included and set to <code>true</code> if the seller wants to clear all users from the Unpaid Item Assistant Exclusion list. The Exclusion list can be viewed from the Unpaid Item Assistant Preferences in My eBay. Excluded users are not subject to the automatic filing of Unpaid Item cases. The seller can still open Unpaid Item cases against excluded users, but these cases must be opened manually.
	// <br/><br/>
	// Users can be added to Exclusion list through the <b>ExcludedUser</b>
	// field. The <b>RemoveAllExcludedUsers</b> field is ignored if the
	// <b>OptInStatus</b> flag is included and set to false in the request,
	// or if the seller is not currently opted into the Unpaid Item Assistant feature
	// in Unpaid Item Assistant Preferences on My eBay.
	//
	RemoveAllExcludedUsers bool `xml:"RemoveAllExcludedUsers,omitempty"`

	//
	// An eBay User ID for which the Unpaid Item Assistant mechanism is disabled. This
	// field is typically used by a seller who would prefer to file an Unpaid Item
	// dispute manually for the specified user.
	// <br/><br/>
	// One or more <b>ExcludedUser</b> fields are used in
	// <b>SetUserPreferences</b> to add users to Unpaid Item Assistant Exclusion
	// list. Any and all <b>ExcludedUser</b> fields are ignored if the
	// <b>OptInStatus</b> flag is included and set to <code>false</code> in the request,
	// or if the seller is not currently opted into the Unpaid Item Assistant feature
	// in Unpaid Item Assistant Preferences on My eBay.
	// <br/><br/>
	// In <b>GetUserPreferences</b>, one or more <b>ExcludedUser</b> fields
	// represent the current Excluded user list.
	//
	ExcludedUser []string `xml:"ExcludedUser,omitempty"`

	//
	// Flag to indicate whether or not the seller wants eBay to automatically request
	// PayPal Giving Fund donation refunds after Unpaid Item cases are opened and closed
	// through the Unpaid Item Assistant mechanism without payment. This setting is
	// only applicable to eBay for Charity listings.
	// <br/><br/>
	// This field is ignored if the
	// <b>OptInStatus</b> flag is included and set to <code>false</code> in the request, or if
	// the seller is not currently opted into the Unpaid Item Assistant feature in
	// Unpaid Item Assistant Preferences on My eBay.
	//
	AutoOptDonationRefund bool `xml:"AutoOptDonationRefund,omitempty"`
}

type UnpaidItemType struct {

	//
	// This field indicates the status of the Unpaid Item case. This field is always
	// returned with the <strong>UnpaidItem</strong> container.
	//
	Status *UnpaidItemCaseStatusTypeCodeType `xml:"Status,omitempty"`

	//
	// This field indicates if the Unpaid Item case was opened manually by the customer or
	// opened automatically by eBay's Unpaid Item Assistant feature. This field is always
	// returned with the <strong>UnpaidItem</strong> container.
	//
	Type *UnpaidItemCaseOpenTypeCodeType `xml:"Type,omitempty"`
}

type UserAgreementInfoType struct {

	//
	// This field is deprecated.
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// This field is deprecated.
	//
	SellereBayPaymentProcessStatus *SellereBayPaymentProcessStatusCodeType `xml:"SellereBayPaymentProcessStatus,omitempty"`

	//
	// This field is deprecated.
	//
	AcceptedTime time.Time `xml:"AcceptedTime,omitempty"`

	//
	// This field is deprecated.
	//
	SellereBayPaymentProcessEnableTime time.Time `xml:"SellereBayPaymentProcessEnableTime,omitempty"`

	//
	// This field is deprecated.
	//
	UserAgreementURL *AnyURI `xml:"UserAgreementURL,omitempty"`
}

type UserConsentRequiredDefinitionType struct {
}

type UserDefinedListType struct {

	//
	// The user's chosen name for this list.
	//
	Name string `xml:"Name,omitempty"`

	//
	// The value in this field indicates the total number of items in the
	// user-defined list. The number of <b>Item</b> nodes in the
	// <b>ItemArray</b> should match this value.
	//
	ItemCount int32 `xml:"ItemCount,omitempty"`

	//
	// This field is not supported.
	//
	FavoriteSearcheCount int32 `xml:"FavoriteSearcheCount,omitempty"`

	//
	// The value in this field indicates the total number of favorite sellers in the
	// user-defined list. The number of <b>FavoriteSeller</b> nodes returned
	// in the response should match this value.
	//
	FavoriteSellerCount int32 `xml:"FavoriteSellerCount,omitempty"`

	//
	// An array of Items that the user has added to the user-defined list.
	//
	ItemArray *ItemArrayType `xml:"ItemArray,omitempty"`

	//
	// An array of Favorite Searches that the user has added to the user-defined list.
	//
	FavoriteSearches *MyeBayFavoriteSearchListType `xml:"FavoriteSearches,omitempty"`

	//
	// An array of Favorite Sellers that the user has added to the user-defined list.
	//
	FavoriteSellers *MyeBayFavoriteSellerListType `xml:"FavoriteSellers,omitempty"`
}

type UserIDArrayType struct {

	//
	// Unique eBay user ID for the user.
	// Applies to eBay Motors Pro applications only.
	//
	UserID []*UserIDType `xml:"UserID,omitempty"`
}

type UserIdentityType struct {
	Value string

	//
	// This attribute indicates if the payer or payee is an eBay user or an eBay partner.
	//
	Type *UserIdentityCodeType `xml:"type,attr,omitempty"`
}

type UserType struct {

	//
	// If <code>true</code>, indicates that the user has set up an About Me page.
	//
	AboutMePage bool `xml:"AboutMePage,omitempty"`

	//
	// Unique identifier for the user that does not change when the eBay user name
	// is changed. Use when an application needs to associate a new eBay user name
	// with the corresponding eBay user.
	//
	EIASToken string `xml:"EIASToken,omitempty"`

	//
	// Email address for the user.
	// Please see the links below to the topics related to anonymous user information
	// and static email addresses.
	// You cannot retrieve an email address for any user
	// with whom you do not have an order relationship, regardless of site.
	// <br/><br/>
	// An email address of another user is only returned
	// if you and the other user are in an order relationship,
	// within a certain time of order line item creation
	// (although this limitation isn't applicable to the <b>GetAllBidders</b> call
	// in the case of motor vehicles categories.)
	// Based on Trust and Safety policies, the time is
	// unspecified and can vary by site.
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to that
	// bidder, and to the seller of an item that the user is bidding on.
	// <br><br>
	// For the order retrieval calls, the buyer's registration email address is only
	// returned if the buyer is registered on the DE, AT, or CH sites, regardless of
	// the seller's registration site and the site to which the seller sends the
	// request.
	// <br>
	//
	Email string `xml:"Email,omitempty"`

	//
	// The aggregate feedback score for a user. A user's feedback score is the net
	// positive feedback minus the net negative feedback left for the user.
	// Feedback scores are a quantitative expression of the desirability of dealing
	// with a user as a buyer or a seller in either side of an order.
	// <br/><br/>
	// Each order line item can
	// result in one feedback entry for a given user (the buyer can leave feedback
	// for the seller, and the seller can leave feedback for the buyer.). That one
	// feedback can be positive, negative, or neutral. The aggregated feedback
	// counts for a particular user represent that user's overall feedback score
	// (referred to as a "feedback rating" on the eBay site).
	// <br/><br/>
	// If the user has
	// chosen to make their feedback private and that user is not the user
	// identified in the request's authentication token, <b>FeedbackScore</b> is not
	// returned and <b>FeedbackPrivate</b> is returned with a value of <code>true</code>.
	// <br/><br/>
	// In <b>GetMyeBayBuying</b> and <b>GetMyeBaySelling</b>, feedback information (<b>FeedbackScore</b>
	// and <b>FeedbackRatingStar</b>) is returned in <b>BidList.ItemArray.Item.Seller</b>. For
	// <b>GetMyeBayBuying</b>, the feedback score of each seller with an item having
	// received a bid from the buyer is returned. For <b>GetMyeBaySelling</b>, the
	// feedback score of the seller is returned. <br>
	// <br>
	// <b>GetMyeBayBuying</b> and <b>GetMyeBaySelling</b> also return feedback information
	// (<b>FeedbackScore</b> and <b>FeedbackRatingStar</b>) in
	// <b>BidList.ItemArray.Item.SellingStatus.HighBidder</b>. <b>GetMyeBayBuying</b> returns
	// feedback information on the high bidder of each item the buyer is bidding
	// on. <b>GetMyeBaySelling</b> returns feedback information on the high bidder of each
	// item the seller is selling.<br>
	// <br>
	// Since a bidder's user info is anonymous, the real feedback score will
	// be returned only to that bidder, and to the seller of an item that the
	// user is bidding on. For all other users, the value -99 is returned.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the accurate Feedback Score for the user is returned to the buyer or seller, but a dummy value of <code>0</code> will be returned to all third parties.
	//
	FeedbackScore int32 `xml:"FeedbackScore,omitempty"`

	//
	// Total count of negative Feedback entries received by the user, including weekly repeats.
	//
	UniqueNegativeFeedbackCount int32 `xml:"UniqueNegativeFeedbackCount,omitempty"`

	//
	// Total count of positive Feedback entries received by the user, including
	// weekly repeats. This contains the aggregate feedback score for a user. A member's
	// feedback score is the net positive feedback minus the net negative feedback
	// left for the member.
	// <br/><br/>
	// Feedback scores are a quantitative expression of the
	// desirability of dealing with that person as a Buyer or a Seller on either side of an order. Each order line item can result in one feedback entry for
	// a given user (the buyer can leave feedback for the seller, and the seller
	// can leave feedback for the buyer).
	// <br/><br/>
	// Feedback can be positive,
	// negative, or neutral. The aggregated feedback counts for a particular user
	// represent that user's overall feedback score (referred to as a "feedback
	// rating" on the eBay site). This rating is commonly expressed as the eBay
	// Feedback score for the user.
	//
	UniquePositiveFeedbackCount int32 `xml:"UniquePositiveFeedbackCount,omitempty"`

	//
	// Percent of total feedback that is positive. For example, if the member has
	// 50 feedbacks, where 49 are positive and 1 is neutral or negative, the
	// positive feedback percent could be 98.0. The value uses a max precision of 4
	// and a scale of 1. If the user has feedback, this value can be returned
	// regardless of whether the member has chosen to make their feedback private.
	// Not returned if the user has no feedback.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the accurate Positive Feedback Percentage value for the user is returned to the buyer or seller, but a dummy value of <code>0.0</code> will be returned to all third parties.
	//
	PositiveFeedbackPercent float32 `xml:"PositiveFeedbackPercent,omitempty"`

	//
	// Indicates whether the user has chosen to make their feedback score and
	// feedback details private (hidden from other users). The percentage
	// of positive feedback can still be returned, even if other feedback details
	// are private.
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to
	// that bidder, and to the seller of an item that the user is bidding on.
	//
	FeedbackPrivate bool `xml:"FeedbackPrivate,omitempty"`

	//
	// Visual indicator of user's feedback score. See <b>FeedbackRatingStarCodeType</b> for
	// specific values.
	// <br><br>
	// <b>For GetOrders, GetOrderTransactions, and GetItemTransactions only:</b> If using Trading WSDL Version 1019 or above, this field will only be returned to the buyer or seller, and no longer returned at all to third parties. If using a Trading WSDL older than Version 1019, the accurate Feedback Rating Star value for the user is returned to the buyer or seller, but a dummy value of <code>None</code> will be returned to all third parties.
	//
	FeedbackRatingStar *FeedbackRatingStarCodeType `xml:"FeedbackRatingStar,omitempty"`

	//
	// Indicates whether the user has been verified. For more information
	// about the ID Verify program, see:
	// <a href="http://pages.ebay.com/help/policies/identity-idverify.html">Protecting your account</a>
	//
	IDVerified bool `xml:"IDVerified,omitempty"`

	//
	// If <code>true</code>, indicates that the user is in good standing with eBay.
	//
	EBayGoodStanding bool `xml:"eBayGoodStanding,omitempty"`

	//
	// If <code>true</code>, identifies a new user who has been a registered eBay user for 30 days
	// or less. This is always <code>false</code> after the user has been registered for more than 30
	// days. Does not indicate an ID change (see <b>UserIdChanged</b>).
	//
	NewUser bool `xml:"NewUser,omitempty"`

	//
	// This container consists of the Registration address for the eBay user making the call.<br>
	// <br>
	// <b>GetUser:</b> eBay returns complete
	// <b>RegistrationAddress</b> details (including Phone), as applicable to the
	// registration site for the eBay user making the call.
	// <br><br>
	// <b>GetItem and GetSellerTransactions:</b> <b>RegistrationAddress</b> for another user
	// (except for Phone) is only returned if you have an order relationship
	// with that user AND that user is registered on DE/AT/CH, regardless of your
	// registration site and the site to which you send the request. For example,
	// the seller can see the buyer's registration address if the buyer is
	// registered on DE/AT/CH, or the buyer can see the seller's registration
	// address if the seller is registered on DE/AT/CH. (The buyer and seller won't
	// see their own registration addresses in <b>GetItem</b>.)
	//
	RegistrationAddress *AddressType `xml:"RegistrationAddress,omitempty"`

	//
	// Indicates the date the specified user originally registered with eBay.
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
	// and to the seller of an item that the user is bidding on.
	//
	RegistrationDate time.Time `xml:"RegistrationDate,omitempty"`

	//
	// eBay site the user is registered with.
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to
	// that bidder, and to the seller of an item that the user is bidding on.
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// Indicates the user's registration/user status.
	//
	Status *UserStatusCodeType `xml:"Status,omitempty"`

	//
	// Unique eBay user ID for the user.<br>
	// <br>
	// Since a bidder's user info is anonymous, this tag contains the actual
	// value of an ID only for that bidder, and for the seller of an item that the user is
	// bidding on. For other users, the actual value is replaced by an
	// anonymous value, according to these rules:
	// <br><br>
	// When bidding on items, <b>UserID</b> is replaced with the
	// value "a****b" where a and b are random characters from the <b>UserID</b>. For
	// example, if the <b>UserID</b> = <code>IBidALot</code>, it might be displayed as, "I****A".
	// <br/><br/>
	// <span class="tablenote"><b>Important: </b>
	// In this format, the anonymous bidder ID can change for each
	// auction.
	// </span>
	// For <b>GetMyeBayBuying</b> only, when bidding on items: <b>UserID</b>
	// is replaced with the value "a****b" where a and b are random characters from
	// the <b>UserID</b>.
	// <br><br>
	// When bidding on items listed on the the Philippines site: <b>UserID</b> is replaced
	// with the value "Bidder X" where X is a number indicating the order of that
	// user's first bid. For example, if the user was the third bidder,
	// <b>UserID</b> = <code>Bidder 3</code>.
	// Note that in this Philippines site format, the anonymous bidder ID stays the same for a given
	// auction, but is different for different auctions. For example, a bidder who
	// is the third and then the seventh bidder in an auction will be listed for
	// both bids as "Bidder 3". However, if that same bidder is the first bidder on
	// a different auction, the bidder will be listed for that auction as "Bidder
	// 1", not "Bidder 3".
	// <br><br>
	// For <b>GetMyeBayBuying</b> only, when bidding on items listed on the UK and AU sites:
	// <b>UserID</b> is replaced with the string "High Bidder".
	// <br><br>
	// For <b>PlaceOffer</b>, see also <b>SellingStatus.HighBidder</b>.
	//
	UserID *UserIDType `xml:"UserID,omitempty"`

	//
	// If <code>true</code>, identifies a user whose ID has changed within the last 30 days. Does not
	// indicate a new user (see <b>NewUser</b>).
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
	// and to the seller of an item that the user is bidding on.
	//
	UserIDChanged bool `xml:"UserIDChanged,omitempty"`

	//
	// Date and time the user's data was last changed (in GMT).
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
	// and to the seller of an item that the user is bidding on.
	//
	UserIDLastChanged time.Time `xml:"UserIDLastChanged,omitempty"`

	//
	// Indicates whether or not the user is subject to VAT.
	// Users who have registered with eBay as VAT-exempt are not
	// subject to VAT. See documentation on Value-Added Tax (VAT).
	//
	VATStatus *VATStatusCodeType `xml:"VATStatus,omitempty"`

	//
	// Contains information about the user as a buyer, such as
	// the shipping address. See <b>BuyerType</b> for its child elements.
	// <br><br>
	// Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
	// and to the seller of an item that the user is bidding on.
	//
	BuyerInfo *BuyerType `xml:"BuyerInfo,omitempty"`

	//
	// Contains information about a seller, including listing settings, listing
	// preferences, seller rankings, and seller type.
	// <br><br>
	// This field is replaced by the <b>SellerBusinessType</b>
	// field if the user is a business seller with a site
	// ID of 77 (Germany), ID of 3 (UK), ID of 205 (Ireland) or ID of 0 (US Motors).
	// <br><br>
	// See <b>SellerType</b> or <b>SellerBusinessCodeType</b> for the child elements.
	//
	SellerInfo *SellerType `xml:"SellerInfo,omitempty"`

	//
	// This field indicates whether the user's account is enabled for buying and selling
	// (indicated by <b>FullMarketPlaceParticipant</b>) on eBay, or if the account is a Partially
	// Provisioned Account (indicated by <b>Shopper</b>) without selling and buying privileges on
	// eBay.
	//
	BusinessRole *BusinessRoleType `xml:"BusinessRole,omitempty"`

	//
	// This type is deprecated. Use instead <b>User.SellerInfo.CharityAffiliationDetail</b>.
	//
	CharityAffiliations *CharityAffiliationsType `xml:"CharityAffiliations,omitempty"`

	//
	// The user's PayPal account level. Only returned for the user identified in
	// eBayAuthToken. That is, you cannot see someone else's PayPal account level.
	// Use this information to check whether a seller is eligible to list digital
	// downloadable items. See the eBay Web site online
	// help for current PayPal requirements for listing digital items.
	//
	PayPalAccountLevel *PayPalAccountLevelCodeType `xml:"PayPalAccountLevel,omitempty"`

	//
	// The user's PayPal account type. Only returned for the user identified in
	// <b>eBayAuthToken</b>. That is, you cannot see someone else's PayPal account type.
	// Use this information to check whether a seller is likely to be eligible to
	// list digital downloadable items. See the eBay Web site online help for
	// current PayPal requirements for listing digital items.
	//
	PayPalAccountType *PayPalAccountTypeCodeType `xml:"PayPalAccountType,omitempty"`

	//
	// The user's PayPal account status. Only returned for the user identified in
	// <b>eBayAuthToken</b>. That is, you cannot see someone else's PayPal account status.
	// Use this information to check whether a seller is eligible to list digital
	// downloadable items. See the eBay Web site online
	// help for current PayPal requirements for listing digital items.
	//
	PayPalAccountStatus *PayPalAccountStatusCodeType `xml:"PayPalAccountStatus,omitempty"`

	//
	// Specifies the subscription level for a user.
	//
	UserSubscription []*EBaySubscriptionTypeCodeType `xml:"UserSubscription,omitempty"`

	//
	// This field is deprecated.
	//
	SiteVerified bool `xml:"SiteVerified,omitempty"`

	//
	// This field is deprecated.
	//
	SkypeID []string `xml:"SkypeID,omitempty"`

	//
	// Indicates whether a user has read-only access to the eBay Wiki (<code>true</code>)
	// or whether the user is able contribute or edit articles on the eBay Wiki
	// (<code>false</code>). By default, all registered eBay users have access to contribute and
	// edit articles on the eBay Wiki. All content contributed to the eBay Wiki is
	// subject to the Community Content Policy.
	//
	EBayWikiReadOnly bool `xml:"eBayWikiReadOnly,omitempty"`

	//
	// TUV level is a number allocated to a user based on various characteristics
	// such as buyer, seller, new buyer, new seller, high risk, or bid limit.
	// Applies to eBay Motors Pro applications only.
	//
	TUVLevel int32 `xml:"TUVLevel,omitempty"`

	//
	// The value added tax identifier (<b>VATID</b>) is applicable to the VAT-enabled
	// sites.
	// Applies to eBay Motors Pro applications only.
	//
	VATID string `xml:"VATID,omitempty"`

	//
	// This field is deprecated.
	//
	SellerPaymentMethod *SellerPaymentMethodCodeType `xml:"SellerPaymentMethod,omitempty"`

	//
	// Contains information about the user as a bidder on a certain
	// item. Returned by <b>GetAllBidders</b> if <b>IncludeBiddingSummary</b> =
	// <code>true</code> is included in the request.
	//
	BiddingSummary *BiddingSummaryType `xml:"BiddingSummary,omitempty"`

	//
	// Indicates whether or not the User container has been made
	// anonymous. If <code>true</code>, some elements in the User container have
	// either been removed, or had their values changed to remove
	// identifying characteristics. If false, all expected elements
	// are returned, and no values are changed.
	// <br><br>
	// Since a bidder's user info is anonymous, this tag is returned as false
	// only to the bidder, and to the seller of an item that the user is bidding
	// on. For all other users, this tag is returned as <code>true</code>.
	//
	UserAnonymized bool `xml:"UserAnonymized,omitempty"`

	//
	// Total count of neutral Feedback entries received by the user, including weekly repeats.
	//
	UniqueNeutralFeedbackCount int32 `xml:"UniqueNeutralFeedbackCount,omitempty"`

	//
	// Reserved for internal or future use.
	//
	EnterpriseSeller bool `xml:"EnterpriseSeller,omitempty"`

	//
	// When a user has their billing option set to <code>email</code>, they can include
	// this element in a <b>GetUser</b> request to retrieve their own email bills.
	//
	BillingEmail string `xml:"BillingEmail,omitempty"`

	//
	// This flag indicates whether or not the user is eligible to sell items on eBay. This field is only returned if the <b>IncludeFeatureEligibility</b> flag is included in the call request and set to <code>true</code>.
	//
	QualifiesForSelling bool `xml:"QualifiesForSelling,omitempty"`

	//
	// Contains the static email address of an eBay member, used within the "reply to"
	// email address when the eBay member sends a message.
	// (Each eBay member is assigned a static alias. The alias is
	// used within a static email address.)
	//
	StaticAlias string `xml:"StaticAlias,omitempty"`

	//
	// Contains the shipping address of a bidder who has made a Best Offer for an item.
	// <br/><br/>
	// You cannot retrieve a shipping address for any user with whom you do not have an order relationship, regardless of site. The shipping address of another user is returned only if you and the other user are in an order relationship, within a certain time of order line item creation.
	// <br><br>
	// Because a bidder's user information is anonymous, this container is returned only to that bidder, and to the seller of an item that the user is bidding on.
	//
	ShippingAddress *AddressType `xml:"ShippingAddress,omitempty"`

	//
	// The <strong>Membership</strong> container will be returned if the seller is enrolled in one or more membership programs on one or more eBay sites. A <b>Program</b> container will be returned for each applicable membership program, and provides details on that program, including the eBay site, the program name (such as '<code>EBAYPLUS</code>'), and the membership expiration date. This container will not be returned at all if the seller is not enrolled in any applicable membership programs.
	//
	Membership *MembershipDetailsType `xml:"Membership,omitempty"`

	//
	// The first name of the buyer who purchased the order.
	//
	UserFirstName string `xml:"UserFirstName,omitempty"`

	//
	// The last name of the buyer who purchased the order.
	//
	UserLastName string `xml:"UserLastName,omitempty"`
}

type VATDetailsType struct {

	//
	// This field should be included in an Add/Revise/Relist call and set to <code>true</code> if the seller is registered on the selling site as a Business Seller. This field must be included and set to <code>true</code> if the <b>RestrictedToBusiness</b> field is also included and set to <code>true</code>. The <b>RestrictedToBusiness</b> field is used by German (Site ID 77), Austrian (Site ID 16), and Swiss (Site ID 193) sellers who wish to restrict sales of their item to other users registered as business users.
	// <br><br>
	// This field is returned in 'Get' calls only if set on the listing, and the person making the call owns the listing. However, other Business Seller-related information will be returned to all users in 'Get' calls under the <b>SellerInfo</b> and <b>BusinessSellerDetails</b> containers.
	//
	BusinessSeller bool `xml:"BusinessSeller,omitempty"`

	//
	// This field must be included in an Add/Revise/Relist call and set to <code>true</code> if a German (Site ID 77), Austrian (Site ID 16), or Swiss (Site ID 193) seller wishes to restrict sales of their item to other users registered on eBay as business users. If this field is set as <code>true</code>, the <b>BusinessSeller</b> field must also be included and set to <code>true</code>. This feature is not available on any other eBay marketplaces.
	// <br><br>
	// This field can be included and set to <code>true</code> only by Business Sellers registered on one of the three sites above, and only if the listing category supports Business-to-Business listings. The <b>GetCategories</b> call can be used by the seller (using one of the Site IDs above) to see which categories support Business-to-Business listings. A <b>B2BVATEnabled</b> boolean field will be returned as <code>true</code> if a listing category supports Business-to-Business listings.
	// <br><br>
	// This field is returned in 'Get' calls only if set on the listing, and the person making the call owns the listing. However, other Business Seller-related information will be returned to all users in 'Get' calls under the <b>SellerInfo</b> and <b>BusinessSellerDetails</b> containers.
	//
	RestrictedToBusiness bool `xml:"RestrictedToBusiness,omitempty"`

	//
	// This container is used in an Add/Revise/Relist call to set the VAT (Value-added Tax) percentage rate that will be charged to buyers when an item is purchased from the listing.
	// <br/><br/>
	// VAT is not applicable to all countries, including the US. Allowed VAT percentage rates can vary by region/country, so sellers should be aware of the rates they are legally required/allowed to charge, and they are responsible for charging the correct VAT rate.
	// <br/><br/>
	// If VAT is charged on a listing, the seller can choose to print an invoice for the buyer that shows the item's net price, the VAT percentage rate, the VAT amount, and the total price.
	// <br/><br/>
	// This field is returned in 'Get' calls only if the listing is subject to VAT.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// The float value input into an Add/Revise/Relist call can have up to three digits beyond the decimal point (e.g. 12.346).
	// </span>
	//
	VATPercent float32 `xml:"VATPercent,omitempty"`

	//
	// This string value is the Site ID value of the eBay Marketplace where the VAT is applicable and where the seller is registered as a Business Seller.
	// <br/><br/>
	// The eBay sites that support VAT (and their corresponding Site IDs) can be found in the <a href="https://developer.ebay.com/DevZone/guides/ebayfeatures/Development/IntlDiffs-B2BFields.html" target="_blank">Business Feature Field Differences</a> topic.
	//
	VATSite string `xml:"VATSite,omitempty"`

	//
	// This is the unique VAT identifier associated with the Business Seller's account. This field will only be returned to Business Sellers who own the specified listing.
	// <br/><br/>
	// Non-Business Sellers will not have a VAT identifier associated with their account, so this field will never be returned for those users.
	//
	VATID string `xml:"VATID,omitempty"`
}

type VATRateType struct {

	//
	// Unique identifier for an eBay listing. A listing can have multiple
	// order line items (transactions), but only one <b>ItemID</b>. An <b>ItemID</b> can be
	// paired up with a corresponding <b>TransactionID</b> and used as an input filter for
	// <b>ReviseSellingManagerSaleRecord</b>. However, if <b>OrderID</b> is passed in as an input
	// filter for <b>ReviseSellingManagerSaleRecord</b>, the <b>ItemID</b>/<b>TransactionID</b> pair is
	// ignored.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// Unique identifier for an eBay order line item. An order line
	// item is created once there is a commitment from a buyer to purchase an item.
	// Since an auction listing can only have one order line item
	// during the duration of the listing, the <b>TransactionID</b> for auction listings
	// is always 0. Along with its corresponding <b>ItemID</b>, a <b>TransactionID</b> is used
	// and referenced during an order checkout flow and after checkout has been
	// completed. The <b>ItemID</b>/<b>TransactionID</b> pair can be used as an input filter for
	// <b>ReviseSellingManagerSaleRecord</b>. However, if <b>OrderID</b> is passed in as an input
	// filter for <b>ReviseSellingManagerSaleRecord</b>, the <b>ItemID</b>/<b>TransactionID</b> pair is
	// ignored.
	//
	TransactionID string `xml:"TransactionID,omitempty"`

	//
	// The VAT (Value-Added Tax) rate for the order line item. When the <b>VATPercent</b> is specified, the
	// item's VAT information appears on the item's listing page. In
	// addition, the seller can choose to print an invoice that
	// includes the item's net price, VAT percent, VAT amount, and
	// total price. Since VAT rates vary
	// depending on the item and on the user's country of residence, a
	// seller is responsible for entering the correct VAT rate; it is
	// not calculated by eBay. To specify a <b>VATPercent</b>, a seller must
	// have a VAT-ID registered with eBay and must be listing the item on a
	// VAT-enabled site. Max applicable length is 6 characters,
	// including the decimal (e.g., 12.345). The scale is 3 decimal places.
	// (If you pass in 12.3456, eBay may round up the value to 12.346.)
	// Note: The View Item page may display the precision to 2 decimal places
	// with no trailing zeros. However, the full value you send in is stored.
	//
	VATPercent float32 `xml:"VATPercent,omitempty"`

	//
	// <b>OrderLineItemID</b> is a unique identifier for an eBay order line item and is
	// based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
	// between these two IDs. If a VATRate is specified in the
	// <b>ReviseSellingManagerSaleRecord</b> request, <b>OrderLineItemID</b> can be used instead
	// of <b>ItemID</b> and <b>TransactionID</b>. For a single line item order, the
	// <b>OrderLineItemID</b> value can be passed into the <b>OrderID</b> field to revise the
	// corresponding order.
	//
	OrderLineItemID string `xml:"OrderLineItemID,omitempty"`
}

type VINSupportedDefinitionType struct {
}

type VRMSupportedDefinitionType struct {
}

type ValType struct {

	//
	// <span class="tablenote"><b>Note: </b> <b>ValType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	// For Half.com, use <b>AttributeArray.Attribute.Value.ValueLiteral</b>
	// in listing requests.
	// <br/><br/>
	// <b>AttributeArray.Attribute.Value.ValueLiteral</b> is required when
	// you use <b>AddItem</b>.  For the Half.com Notes attribute, the max
	// length is 500 characters. You can revise
	// <b>AttributeArray.Attribute.Value.ValueLiteral</b> for Half.com
	// listings.
	//
	ValueLiteral string `xml:"ValueLiteral,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ValType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	// </span>
	//
	SuggestedValueLiteral []string `xml:"SuggestedValueLiteral,omitempty"`

	//
	// <span class="tablenote"><b>Note: </b> <b>ValType</b> and all of its fields are no longer applicable since the Half.com site has been shut down.
	//
	ValueID int32 `xml:"ValueID,omitempty"`
}

type ValueCategoryDefinitionType struct {
}

type ValuePackEnabledDefinitionType struct {
}

type ValueRecommendationType struct {

	//
	// A recommended value for the corresponding, recommended Item Specific. Only returned when a recommended value is available.
	//
	Value string `xml:"Value,omitempty"`

	//
	// Constraints that eBay places on this Item Specific value.<br>
	// <br>
	// Only returned when you configure your request to include
	// relationships and/or confidence, and a recommended value
	// is available.
	// (Not returned when <b>ExcludeRelationships</b> is  <code>true</code> and
	// <b>IncludeConfidence</b> is  <code>false</code>.)
	//
	ValidationRules *RecommendationValidationRulesType `xml:"ValidationRules,omitempty"`
}

type VariationDetailsType struct {

	//
	// This value indicates the maximum number of item variations that the site will allow within one multi-variation listing.
	//
	MaxVariationsPerItem int32 `xml:"MaxVariationsPerItem,omitempty"`

	//
	// This value indicates the maximum number of variation specific sets that the site will allow per listing. Typical variation specific sets for clothing may be 'Color', 'Size', 'Long Sleeve', etc.
	//
	MaxNamesPerVariationSpecificsSet int32 `xml:"MaxNamesPerVariationSpecificsSet,omitempty"`

	//
	// This value indicates the maximum number of values that the site will allow within one variation specific set. For example, if the variation specific set was 'Color', the seller could specify as many colors that are available up to this maximum value.
	//
	MaxValuesPerVariationSpecificsSetName int32 `xml:"MaxValuesPerVariationSpecificsSetName,omitempty"`

	//
	// Returns the latest version number for this field. The version can be
	// used to determine if and when to refresh cached client data.
	//
	DetailVersion string `xml:"DetailVersion,omitempty"`

	//
	// Gives the time in GMT that the feature flags for the details were last
	// updated. This timestamp can be used to determine if and when to refresh
	// cached client data.
	//
	UpdateTime time.Time `xml:"UpdateTime,omitempty"`
}

type VariationKeyType struct {

	//
	// The unique identifier of the fixed-price listing whose variation(s) should be added to or removed from the watch list.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This container is used to identify one or more item variations within the multiple-variation listing. If the specified name-value pairs do not match any item variation, the call behaves as if no variations were specified.
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`
}

type VariationProductListingDetailsType struct {

	//
	// This field is used if the seller wants to, or is required to identify each product variation within a multi-variation listing by an ISBN (International Standard Book Number) value. An ISBN is a unique identifer for books. Both 10 and 13-character ISBNs are supported. When specifying a 13-character ISBN, the value must begin with either '978' or '979'. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if an ISBN is supported/required for a category.
	// <br/><br/>
	// This field is only applicable for multiple-variation listings. For a single-variation listing, if the category/product requires an ISBN value, this value should be passed into the <b>Item.ProductListingDetails.ISBN</b> field instead. Unlike single-variation listings, an eBay catalog product cannot be used to prefill product details for a multiple-variation listing.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that expects ISBN values, but one doesn't exist for the product, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	//
	ISBN string `xml:"ISBN,omitempty"`

	//
	// This field is used if the seller wants to, or is required to identify each product variation within a multiple-variation listing by a UPC (Universal Product Code) value. A UPC is a commonly-used identifier for many different products. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if a UPC is supported/required for a category.
	// <br/><br/>
	// This field is only applicable for multiple-variation listings. For a single-variation listing, if the category/product requires a UPC value, this value should be passed into the <b>Item.ProductListingDetails.UPC</b> field instead. Unlike single-variation listings, an eBay catalog product cannot be used to prefill product details for a multiple-variation listing.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that expects UPC values, but one doesn't exist for the product, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	//
	UPC string `xml:"UPC,omitempty"`

	//
	// This field is used if the seller wants to, or is required to identify each product variation within a multiple-variation listing by an EAN (European Article Number) value. An  EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if an EAN is supported/required for a category.
	// <br/><br/>
	// This field is only applicable for multiple-variation listings. For a single-variation listing, if the category/product requires an EAN value, this value should be passed into the <b>Item.ProductListingDetails.EAN</b> field instead. Unlike single-variation listings, an eBay catalog product cannot be used to prefill product details for a multiple-variation listing.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// If the listing is being posted to a category that expects EAN values, but one doesn't exist for the product, the seller must pass in the text that can be found in the <b>ProductDetails.ProductIdentifierUnavailableText</b> field of the <b>GeteBayDetails</b> response. To get the <b>ProductDetails</b> container to return in the <b>GeteBayDetails</b> response, <code>ProductDetails</code> should be included as a <b>DetailName</b> value in the call request.
	// </span>
	//
	EAN string `xml:"EAN,omitempty"`

	//
	// This field is used if the seller wants to, or is required to identify each product variation within a multiple-variation listing by an eBay Product ID  (ePID). An ePID is a unique identifier of an eBay Catalog product. The seller can use the <b>GetCategoryFeatures</b> or <b>GetCategorySpecifics</b> calls to see if an ePID is supported/required for a category. Each variation within the listing must use a unique ePID or an error will occur.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// The <b>ProductReferenceID</b> field can only be used  to specify an ePID for an eBay Catalog product that is part of the Product-Based Shopping Experience mandate. If an ePID is supplied for another eBay Catalog product that is not a part of the Product-Based Shopping Experience mandate, the listing may be blocked. For more information about PBSE, see the  <a href="https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> page.
	// </span>
	// This field is also returned in <b>GetItem</b> if the product variations within the listing are associated with eBay Catalog products.
	// <br>
	//
	ProductReferenceID string `xml:"ProductReferenceID,omitempty"`

	//
	// This container is for future use. If it used, it will be ignored.
	//
	NameValueList []*NameValueListType `xml:"NameValueList,omitempty"`
}

type VariationSpecificPictureSetType struct {

	//
	// A value that is associated with <b>VariationSpecificName</b>. For example,
	// suppose this set of pictures is showing blue shirts, and some of
	// the variations include Color=Blue in their variation specifics.
	// If <b>VariationSpecificName</b> is  <code>Color </code>, then <b>VariationSpecificValue</b> would be <code>Blue</code>.
	//
	VariationSpecificValue string `xml:"VariationSpecificValue,omitempty"`

	//
	// The URL of a picture that is associated with the
	// <b>VariationSpecificValue</b>. A variation specific picture set can
	// consist of up to 12 self-hosted or eBay Picture Services (EPS) hosted pictures. eBay Picture
	// Services and self-hosted images can never be combined into the same variation
	// specific picture set. To specify more than one image, use
	// multiple <b>PictureURL</b> fields, passing in a distinct URL in each
	// of those fields. This field cannot have an empty/null value. The <b>UploadSiteHostedPictures</b> call can be used to upload pictures to EPS. Note that if pictures are externally-hosted, they must be hosted on a site that is using the 'https' protocol.
	// <br><br>
	// The image specified in the first <b>PictureURL</b> field is also used as the thumbnail image for applicable variations. For example, if the picture set contains pictures of red
	// shirts (i.e., VariationSpecificName=Color and VariationSpecificValue=Red), the
	// first picture is used as the thumbnail image for all the red shirt variations.
	// <br/><br/>
	// <span class="tablenote"><b>Note: </b>
	// All images must comply with the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Pictures-Intro.html">Picture Requirements</a>.
	// </span>
	//
	// You can use Item.PictureDetails to specify additional pictures.
	// For example, the item-level pictures could include a model wearing a
	// black shirt, as a typical example of the shirt style.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// If a URI contains spaces, replace them with <code>%20</code>.
	// For example, <code>http://example.com/my image.jpg</code> must be
	// submitted as <code>http://example.com/my%20image.jpg</code> to
	// replace the space in the image file name.
	// </span>
	// Variation pictures cannot be added or removed from a fixed-price listing when the listing is scheduled to end within 12 hours or if the item variation has already had transactions.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> For some large merchants, there are no limitations on when variation pictures can be added or removed from a fixed-price listing, even when the item variation has had transactions or is set to end within 12 hours.
	// </span>
	//
	PictureURL []*AnyURI `xml:"PictureURL,omitempty"`

	//
	// No longer used.
	//
	GalleryURL *AnyURI `xml:"GalleryURL,omitempty"`

	//
	// Returns the URL of a variation-specific picture that is hosted outside of eBay.<br>
	// <br>
	// When you list, revise, or relist a variation, use VariationSpecificPictureSet.PictureURL (not ExternalPictureURL) to specify your self-hosted picture or EPS picture.<br>
	// <br/>
	// <span class="tablenote"><b>Note: </b>
	// All images must comply to the <a href="http://developer.ebay.com/DevZone/guides/ebayfeatures/Development/Pictures-Intro.html">Picture Requirements</a>.
	// </span>
	// This is returned only when the seller used a self-hosted picture for the variation.
	//
	ExternalPictureURL []*AnyURI `xml:"ExternalPictureURL,omitempty"`

	//
	// Returns the URLs of the seller's self-hosted (hosted outside of eBay) variation specific pictures and the URL for the corresponding eBay Picture Services (EPS), that was generated when the picture was uploaded.
	//
	ExtendedPictureDetails *ExtendedPictureDetailsType `xml:"ExtendedPictureDetails,omitempty"`
}

type VariationType struct {

	//
	// A SKU (stock keeping unit) is a seller-defined identifier. It is only intended for the seller's use (not for buyers). A SKU value is not required, but many large sellers like to add SKU value to their listings. If defined on a listing, a SKU value can be used by sellers to reconcile their eBay inventory with your own inventory system, instead of using the <b>VariationSpecifics</b> identifying values.
	// <br>
	// <br>
	// If specified, all SKU values must be unique within the <b>Variations</b>
	// node. That is, no two variations within the same listing can have
	// the same SKU. <br>
	// <br>
	// If you include the <b>Item.InventoryTrackingMethod</b> field in an 'FixedPriceItem' call and set its value to <code>SKU</code>,
	// the <b>Variation.SKU</b> values become required for each variation..<br>
	// <br>
	// <b>For GetItem, GetOrders and other 'Get' calls:</b> Only returned if the
	// seller specified a SKU for the variation.
	//
	SKU *SKUType `xml:"SKU,omitempty"`

	//
	// The fixed price for this item variation.
	// For example, a "Blue, Large" variation price could be USD 10.00,
	// and a "Black, Medium" variation price could be USD 5.00.<br>
	// <br>
	// Each variation requires this field, and the prices can be the same for all variations, or
	// be different for each variation. This enables sellers to
	// provide discounts on certain
	// variations without affecting the price of others.
	// Required (and always returned) for listings with variations.<br>
	// <br>
	// You can revise a variation's price at any time (even if it
	// has purchases). When you modify a variation during revise or
	// relist, you need to include both its <b>StartPrice</b> and <b>Quantity</b>.
	//
	StartPrice *AmountType `xml:"StartPrice,omitempty"`

	//
	// This value indicates the quantity of the specific variation that are
	// available for purchase. If you set <b>Variation.Quantity</b> to <code>0</code> when
	// you create, revise, or relist an item listing, the variation is dropped from
	// the listing. To prevent this, you can set
	// <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/ebay/SetUserPreferences.html#Request.OutOfStockControlPreference">SetUserPreferences.OutOfStockControlPreference</a> to <code>true</code>.
	// <br/><br/>
	// For <b>GetItem</b> (and other related calls that retrieve the Item
	// object), the <b>Variation.Quantity</b> value indicates the total quantity associated with the variation, including the quantity available and the
	// quantity sold. To calculate the quantity available for sale, subtract
	// <b>SellingStatus.QuantitySold</b> from this value.<br>
	// <br>
	// <b>For RelistFixedPriceItem:</b>
	// <ul>
	// <li>For an item variation that had an available quantity greater than <code>0</code> when the listing ended, the <b>Quantity</b> value of the item variation for  the newly relisted item is set to the actual quantity available. For item variations, there is actually no <b>QuantityAvailable</b> field, but this value may be derived if you look at the corresponding item variation in a <b>GetMyeBaySelling</b>) response and subtract the <b>Variation.QuantitySold</b> value from the <b>Variation.Quantity</b> value, which represents the original <b>Variation.Quantity</b> value at creation time of the previous listing. </li>
	// <li>For item variations with an available quantity of <code>0</code> when the listing ended, the relisted item will retain the <b>Variaton.Quantity</b> value that was passed in at creation time of the previous listing.   </li>
	// </ul>
	// So, if you are relisting an item that had one or more item variations with an available quantity of <code>0</code> when the listing ended, we strongly recommend that you pass in the correct available quantity through the corresponding <b>Variation.Quantity</b> field of a relist call. Alternatively, you can update the correct quantity available by using a <b>ReviseInventoryStatus</b> call and passing in a <b>Quantity</b> value, while also making sure to pass in the correct <b>SKU</b> value(s) to identify the correct item variation. A <b>ReviseInventoryStatus</b> call can be used to revise the quantity of up to four single item listings and/or item variations (from the same or different listings).
	// <br> <br>
	// <b>For ReviseFixedPriceItem:</b>
	// You can revise a variation's quantity at any time, even if
	// it has purchases. However, unless you set the <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/ebay/SetUserPreferences.html#Request.OutOfStockControlPreference">OutOfStockControlPreference</a> boolean field of the <b>SetUserPreferences</b> call to <code>true</code>, at least one variation must remain
	// with a non-zero quantity in order for the listing to remain active. If you set the <b>OutOfStockControlPreference</b> field to <code>true</code>, a multiple-variation listing will remain active but hidden from search even if the quantity of all variations in the listing is set to <code>0</code>.
	// When you modify a variation during revise or
	// relist, you need to include both its <b>StartPrice</b> and <b>Quantity</b>.
	// If you revise the <b>Quantity</b> value for a variation after items have
	// already sold, specify the quantity available for sale.
	// (eBay will automatically add the
	// quantity sold to the value you specify.) If you set the quantity to
	// <code>0</code> and the variation has no purchases, the variation may be
	// dropped from the listing.
	// <br> <br>
	// <b>For GetSellerTransactions:</b> See <b>Item.Quantity</b> instead.<br>
	// <br>
	// See the <a href="http://developer.ebay.com/Devzone/guides/ebayfeatures/Development/Variations-Updating.html">eBay Features Guide</a>
	// for more details about setting and modifying a variation's quantity.
	// <br><br>
	// <span class="tablenote"><b>Note:</b>
	// The number in the <b>Variation.Quantity</b> field represents the current quantity of the item variation that is available using the "Ship to home" fulfillment method. This number does not take into account any quantity of the item variation that is available through "local" fulfillment methods such as In-Store Pickup or Click and Collect. This is due to the fact that there is no current implementation (or API field) where the seller informs eBay about the quantity of item variations available through each local fulfillment method. In the case where a listing is only offering the item variations through a local fulfillment method, this value should default to <code>0</code>, and the <b>Item.IgnoreQuantity</b> will also be returned as <code>True</code>.
	// </span>
	// <br>
	//
	Quantity int32 `xml:"Quantity,omitempty"`

	//
	// A list of name/value pairs that uniquely identify the variation within
	// the listing. All variations must specify the same set of Item Specific names, but
	// each variation must provide a unique combination of values for those
	// Item Specific names. For example, if the items vary by color and size, then every
	// variation must specify 'Color' and 'Size' as Item Specific names, but no two
	// variations can specify the same combination of 'Color' and 'Size' values.<br>
	// <br>
	// When you revise a listing that includes variations, you can
	// change names of <b>Variationpecifics</b> by using the <b>Variations.ModifyNameList</b> container. You can also add, delete, or replace individual variations as needed to match your
	// current inventory. Use the <b>Variation.Delete</b> field to delete a variation that has no sales (order line items). If the variation has
	// sales, then set the Quantity to 0.<br>
	// <br>
	// <b>For GetSellerEvents</b> To keep the <b>GetSellerEvents</b>
	// response smaller, <b>Variationpecifics</b> are not returned if the
	// variation has a SKU. If the variation has no SKU, then
	// <b>Variationpecifics</b> are returned instead. Optionally, you can pass
	// <b>IncludeVariationSpecifics</b> as <code>true</code> in the request to force
	// <b>Variationpecifics</b> to be returned, even when the SKU is returned.
	//
	VariationSpecifics *NameValueListArrayType `xml:"VariationSpecifics,omitempty"`

	//
	// Quantity of items in the seller's inventory for this
	// Selling Manager product.
	// This is not the same as the quantity available in a listed item.
	// Required when a Selling Manager product defines variations.
	//
	UnitsAvailable int32 `xml:"UnitsAvailable,omitempty"`

	//
	// Cost of the Selling Manager product that matches this variation.
	//
	UnitCost *AmountType `xml:"UnitCost,omitempty"`

	//
	// Contains the variation's quantity sold.
	// Always returned when variations are present.
	//
	SellingStatus *SellingStatusType `xml:"SellingStatus,omitempty"`

	//
	// The title of the variation. This is a concatenation of the listing
	// title plus the values (no names) from <b>Variationpecifics</b>.
	// For example, if the Title is "Polo Shirt" and the variation is
	// for a medium pink shirt, the variation title could be
	// "Polo Shirt[Pink,M].
	// PayPal may also use this value
	// to identify item variations (for buyers and sellers).
	//
	VariationTitle string `xml:"VariationTitle,omitempty"`

	//
	// URL for the variation on eBay. This links to eBay's View Item page,
	// with the page configured to show details of the specified variation.
	// The syntax of this URL is similar to Item.ViewItemURL (not optimized
	// for natural search).
	//
	VariationViewItemURL *AnyURI `xml:"VariationViewItemURL,omitempty"`

	//
	// If this field is included and set to <b>true</b>, the corresponding variation is deleted from the listing with a successful call. In general,
	// a listing with variations must have at least one
	// variation with a non-zero quantity in order to remain active.
	// Additional deletion rules depend
	// on whether you are revising or relisting.<br>
	// <br>
	// <b>For ReviseFixedPriceItem only</b>:
	// This boolean field can now be used in a Revise call to delete a variation even if the variation still has quantity and/or has had one or more previous sales during the life of the listing. Previously, if a variation had any purchases, you could not delete the variation, but only set its quantity to zero.
	// <br>
	// <br>
	// To replace a varation, you can delete it and add the new
	// or corrected one.
	// However, you can't specify the same SKU twice in the
	// same request (because the intent would be ambiguous).
	// So, either use a new SKU for the newer variation,
	// or use the call twice (once to delete the variation, and
	// once to add the new variation with the same SKU).<br>
	// <br>
	// <b>For RelistFixedPriceItem only</b>:
	// You can delete any variation, as long as the relisted listing
	// includes at least 1 variation with a non-zero quantity.
	// (That is, when you relist, you could delete all but one variation,
	// or you could delete all existing variations and add a new one.)
	//
	Delete bool `xml:"Delete,omitempty"`

	//
	// Container for statistics about the Selling Manager product
	// that is associated with this variation.
	//
	SellingManagerProductInventoryStatus *SellingManagerProductInventoryStatusType `xml:"SellingManagerProductInventoryStatus,omitempty"`

	//
	// The number of watches placed on this variation by eBay users.
	//
	WatchCount int64 `xml:"WatchCount,omitempty"`

	//
	// A note a user makes on an item with variations in My eBay.
	// <br>
	// <br>
	// For eBay.com, only GetMyeBaySelling (not GetItem) returns this
	// field, and only if you pass IncludeNotes in the request.
	// Only visible to the user who created the note.<br>
	// <br>
	// Not supported as input in ReviseFixedPriceItem.
	// Use SetUserNotes instead.<br>
	// <br>
	// In SoldList, notes for variations are only returned at the
	// Item level, not the variation level.
	//
	PrivateNotes string `xml:"PrivateNotes,omitempty"`

	//
	// This container provides information for a single variation (within a multiple-variation listing) that has a Strikethrough Price (STP) or a Minimum Advertised Price (MAP) discount pricing treatment. For a multiple-variation listing, the discount pricing information should be set at the variation level and not at the item level (e.g. <b>Item.DiscountPriceInfo</b>).   STP and MAP apply only to fixed-price listings. STP is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites, while MAP is available only on the US site.
	// <br><br>
	// Discount pricing is available to qualified sellers (and their associated developers) who participate in the Discount Pricing Program. Once qualified, sellers receive a 'special account flag' (SAF) that allows them to apply Discount Pricing to both single-variation and multi-variation items. STP is intended for eBay partners and their sellers only.
	// <br><br>
	// As a seller listing Discount Price items, you are required to maintain records of your discount pricing in the event you are called upon to substantiate your item pricing.
	//
	DiscountPriceInfo *DiscountPriceInfoType `xml:"DiscountPriceInfo,omitempty"`

	//
	// This container is used to provide one or more product identifiers for a product variation within a multiple-variation, fixed-price listing. The same product identifier type(s) must be used for all product variations within the listing. For instance, if one product variation uses ISBNs, all product variations must use ISBN values.
	// <br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Currently, the <b>EAN</b>, <b>ISBN</b>, or <b>UPC</b> fields are used to specify a Global Trade Item Number (GTIN), and the <b>GetCategoryFeatures</b> call is used to see if particular product identifier types are supported/required. The <b>ProductReferenceID</b> field can only be used  to specify an ePID for an eBay Catalog product that is part of the Product-Based Shopping Experience mandate. For more information about PBSE, see the  <a href="https://developer.ebay.com/pbse/" target="_blank">Product-Based Shopping Experience</a> page.
	// </span>
	// <br>
	// When you include the  <b>VariationProductListingDetails</b> container in a call, you must specify at least one GTIN or ePID. If an ePID is provided, a matching eBay catalog product must exist for the value that is passed in.
	// <br>
	// <br>
	// <b>For ReviseItem and RelistItem only:</b> When you revise a
	// listing, if it ends within 12 hours, you cannot change the
	// product identifier and you cannot remove existing product variation listing details data.
	//
	VariationProductListingDetails *VariationProductListingDetailsType `xml:"VariationProductListingDetails,omitempty"`
}

type VariationsEnabledDefinitionType struct {
}

type VariationsType struct {

	//
	// Contains data that distinguishes one item variation from another.
	// For example, if an item varies by color and size, each <b>Variation</b>
	// node specifies a combination of one of those colors and
	// sizes.<br>
	// <br>
	// When listing or relisting an item, you are allowed to create a
	// listing with only one item variation, and you might have a plan to add more item variations to the listing in the future. However, if you don't plan to add other item variations in the future, we recommend that you avoid listing with only one variation, so that you avoid confusing buyers.
	// <br> <br>
	// If you specify multiple <b>Variation</b> containers in an add/revise/relist/verify add call to define multiple item variations, the <b>Variation</b> containers must be contiguous or an error will occur. This means that you would not want to input a <b>Pictures</b> or a <b>VariationSpecificsSet</b> container in between <b>Variation</b> containers in an API call.
	// <br> <br>
	// When you modify an item variation with a <b>ReviseFixedPriceItem</b> call, the best practice is to include all applicable fields under the <b>Variation</b> container, even if some of the values/settings are not being modified. The <b>StartPrice</b> and <b>VariationSpecifics</b> must be included when modifying an existing item variation, even if these values are not being changed. If a SKU value is defined for the item variation, it is strongly recommended that you include the <b>SKU</b> field, regardless of whether the SKU value is changing or not. If the <b>SKU</b> field is not included, any existing SKU value will be removed from the item variation. It is also strongly recommended that you include the <b>Quantity</b> field and input an accurate value, because if the <b>Quantity</b> field is omitted in the API call, the quantity for the item variation is set to  <code>0</code>.
	//
	Variation []*VariationType `xml:"Variation,omitempty"`

	//
	// Contains a set of pictures that correspond to one of the
	// variation specifics, such as Color. For example, if a listing
	// has blue and black color variations, you could choose Color
	// for all the pictures, and then include a set of pictures
	// for the blue variations and another set of pictures for the black
	// variations.<br>
	// <br>
	// We strongly recommend that you also include shared pictures
	// in Item.PictureDetails, as this results in a better experience
	// for buyers.<br>
	// <br>
	// <b>For ReviseFixedPriceItem only:</b> To replace
	// or delete individual pictures, pass in the entire Pictures
	// node with the complete set of variation pictures that you
	// want in the listing. If the applicable variations have purchases
	// or the listing ends in less than 12 hours, you can add
	// pictures, but you can't remove existing pictures.<br>
	// <br>
	// Variation, Pictures, or ModifyNameList (or all) need to be
	// specified when the Variations node is specified in listing requests<br>
	// <br>
	// <span class="tablenote"><b>Note:</b>
	// Only one Pictures node is allowed for a listing.
	// However, the node has been defined as unbounded (repeatable) in
	// the schema to allow for different use cases for some calls or sites
	// in the future.</span>
	//
	Pictures []*PicturesType `xml:"Pictures,omitempty"`

	//
	// The set of all variation specific names and values that can be
	// applicable to the listing (at any time in its life cycle).
	// This must include all names and values specified in the
	// VariationSpecifics nodes.<br>
	// <br>
	// Required when Variations are specified in a new listing, and when you
	// modify the name of a variation by using ModifyNameList.
	// When you modify variation specific names, VariationSpecificsSet  must
	// include the new names plus the names that are not changing (but omit the old names), <br>
	// <br>
	// This set configures variation selection widgets
	// that appear on eBay's  View Item page.
	// For example, if you specify Color and Size names in the set,
	// eBay's View Item page displays Color and Size drop-down lists
	// to enable a buyer to choose a variation of interest.<br>
	// <br>
	// The order in which you specify the names and values also
	// controls the order in which the selection widgets appear on
	// the View Item page.
	// For example, if you specify "Color", then "Size", and then
	// "Sleeve Style" as names, the View Item page shows drop-down lists
	// with those labels in that order. For "Size", if you specify
	// "S", "M", and "L" as values, the View Item page
	// shows the values in that order in the Size drop-down list.<br>
	// <br>
	// Use GetCategorySpecifics to retrieve recommendations for names,
	// values, and order.<br>
	// <br>
	// Required when Variations are specified in a new listing
	// (e.g., in AddFixedPriceItem). Also required when you change
	// variation specific names or values in ReviseFixedPriceItem and
	// RelistFixedPriceItem.
	//
	VariationSpecificsSet *NameValueListArrayType `xml:"VariationSpecificsSet,omitempty"`

	//
	// Modifies variation specific names when you revise or
	// relist items.<br>
	// <br>
	// You can modify a variation specific name regardless of the quantity sold (i.e., no restrictions on whether the item has orders or order line items (transactions)).<br>
	// <br>
	// (Use VariationSpecifics to modify variation specific values.)<br>
	// <br>
	// You are not required to specify SKU, VariationSpecifics, and other variation details in the request when you are only modifying a variation specific name.
	// <br>
	// <br>
	// Variation, Pictures, VariationSpecificsSet, or ModifyNameList (or all) need to be specified when the Variations node is specified in listing requests.
	//
	ModifyNameList *ModifyNameArrayType `xml:"ModifyNameList,omitempty"`
}

type VeROReasonCodeDetailsType struct {

	//
	// Contains reason code details for a site.
	//
	VeROSiteDetail []*VeROSiteDetailType `xml:"VeROSiteDetail,omitempty"`
}

type VeROReportItemType struct {

	//
	// The unique identifier for the listing being reported for the alleged infringement, which is specified in the <b>VeROReasonCodeID</b> field.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// The unique identifier for the type of claimed infringement. The
	// <b>GetVeROReasonCodeDetails</b> call can be used to retrieve a list of reason codes for a given eBay site.
	//
	VeROReasonCodeID int64 `xml:"VeROReasonCodeID,omitempty"`

	//
	// This field is used by the VeRO Program member to provide more details to the seller about why the item is being reported as violating copyright, trademark, or intellectual property rights.
	//
	MessageToSeller string `xml:"MessageToSeller,omitempty"`

	//
	// If the VeRO Program member wants a copy of the Notice of Claimed Infringement (NOCI) document sent to their email address, this field should be included in the request and set to <code>true</code>. This same document is automatically sent to the seller of the reported item.
	//
	CopyEmailToRightsOwner bool `xml:"CopyEmailToRightsOwner,omitempty"`

	//
	// If the infringement type stated in the <b>VeROReasonCodeID</b> has anything to do about which geographical region the item is shipped to, each region that would trigger this infringement type should be specified in its own <b>Region</b> field. Supported values for <b>Region</b> are found in <b>ShippingRegionCodeType</b>.
	//
	Region []*ShippingRegionCodeType `xml:"Region,omitempty"`

	//
	// If the infringement type stated in the <b>VeROReasonCodeID</b> has anything to do about which country the item is shipped to, each country that would trigger this infringement type should be specified in its own <b>Country</b> field. Supported values for <b>Country</b> are found in <b>CountryCodeType</b>.
	// <br><br>
	// This field is required when the <b>VeROReasonCodeID</b>
	// is 9037 (Item(s) is unlawful importation of product bearing trademark).
	//
	Country []*CountryCodeType `xml:"Country,omitempty"`

	//
	// This string field is used to specify the number of a product patent that is being violated.
	// <br><br>
	// This field is required when the <b>VeROReasonCodeID</b> is 9048 (Item(s) infringes a valid patent).
	//
	Patent string `xml:"Patent,omitempty"`

	//
	// Explanatory text from the VeRO Program member. This field is conditionally required when the
	// <b>VeROReasonCodeID</b> is <code>Others</code>. Note that there is a 1000-character restriction on this text field when the items are being reported with the <code>Others</code> reason code.
	//
	DetailedMessage string `xml:"DetailedMessage,omitempty"`
}

type VeROReportItemsType struct {

	//
	// A <b>ReportItem</b> container is required for each eBay item that the product owner is reporting as violating the product owner's copyright, trademark, or intellectual property rights. The <b>ItemID</b> and <b>VeROReasonCodeID</b> fields are required, and the rest of the <b>ReportItem</b> fields can be supplied based on the situation.
	//
	ReportItem []*VeROReportItemType `xml:"ReportItem,omitempty"`
}

type VeROReportedItemDetailsType struct {

	//
	// Contains the data and status of a reported item.
	//
	ReportedItem []*VeROReportedItemType `xml:"ReportedItem,omitempty"`
}

type VeROReportedItemType struct {

	//
	// The unique identifier (<b>ItemID</b>) of the listing reported for
	// copyright, trademark, or intellectual property right infringment.
	// <br><br>
	// This field is always returned with the <b>ReportedItem</b> container.
	//
	ItemID *ItemIDType `xml:"ItemID,omitempty"`

	//
	// This value indicates the current submission status of the VeRO Report.
	// <br><br>
	// This field is always returned with the <b>ReportedItem</b> container.
	//
	ItemStatus *VeROItemStatusCodeType `xml:"ItemStatus,omitempty"`

	//
	// This text explanation is submitted by eBay when the submission of an VeRO Report
	// has failed or was blocked.
	// <br><br>
	// This field is only returned with the <b>ReportedItem</b> container if
	// the <b>ItemStatus</b> value is <b>SubmissionFailed</b> or
	// <b>ClarificationRequired</b>.
	//
	ItemReasonForFailure string `xml:"ItemReasonForFailure,omitempty"`
}

type VeROSiteDetailType struct {

	//
	// This enumeration value indicates the eBay site for which reason code details are returned.
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// This container includes brief and detailed text descriptions for the VeRO program intellectual property right infringement reason. There can be multiple <b>ReasonCodeDetail</b> containers returned for each eBay site. This container also consists of a <b>codeID</b> attribute, which is the unique identifier of the reason code.
	//
	ReasonCodeDetail []*ReasonCodeDetailType `xml:"ReasonCodeDetail,omitempty"`
}

type VerifiedUserRequirementsDetailsType struct {
	VerifiedUser bool `xml:"VerifiedUser,omitempty"`

	FeedbackScore []int32 `xml:"FeedbackScore,omitempty"`
}

type VerifiedUserRequirementsType struct {
	VerifiedUser bool `xml:"VerifiedUser,omitempty"`

	MinimumFeedbackScore int32 `xml:"MinimumFeedbackScore,omitempty"`
}

type WantItNowPostArrayType struct {

	//
	// This field is deprecated.
	//
	WantItNowPost []*WantItNowPostType `xml:"WantItNowPost,omitempty"`
}

type WantItNowPostType struct {

	//
	// This field is deprecated.
	//
	CategoryID string `xml:"CategoryID,omitempty"`

	//
	// This field is deprecated.
	//
	Description string `xml:"Description,omitempty"`

	//
	// This field is deprecated.
	//
	PostID *ItemIDType `xml:"PostID,omitempty"`

	//
	// This field is deprecated.
	//
	Site *SiteCodeType `xml:"Site,omitempty"`

	//
	// This field is deprecated.
	//
	StartTime time.Time `xml:"StartTime,omitempty"`

	//
	// This field is deprecated.
	//
	ResponseCount int32 `xml:"ResponseCount,omitempty"`

	//
	// This field is deprecated.
	//
	Title string `xml:"Title,omitempty"`
}

type WarrantyDurationDetailsType struct {
	WarrantyDurationOption string `xml:"WarrantyDurationOption,omitempty"`

	Description string `xml:"Description,omitempty"`
}

type WarrantyOfferedDetailsType struct {
	WarrantyOfferedOption string `xml:"WarrantyOfferedOption,omitempty"`

	Description string `xml:"Description,omitempty"`
}

type WarrantyTypeDetailsType struct {
	WarrantyTypeOption string `xml:"WarrantyTypeOption,omitempty"`

	Description string `xml:"Description,omitempty"`
}

type XSLFileType struct {

	//
	// This field is deprecated.
	//
	FileName string `xml:"FileName,omitempty"`

	//
	// This field is deprecated.
	//
	FileVersion string `xml:"FileVersion,omitempty"`

	//
	// This field is deprecated.
	//
	FileContent string `xml:"FileContent,omitempty"`
}

type EBayMotorsProAdFormatEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProAdFormatEnabledDefinitionType"`
}

type EBayMotorsProAutoAcceptEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProAutoAcceptEnabledDefinitionType"`
}

type EBayMotorsProAutoDeclineEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProAutoDeclineEnabledDefinitionType"`
}

type EBayMotorsProBestOfferEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProBestOfferEnabledDefinitionType"`
}

type EBayMotorsProCompanyNameEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProCompanyNameEnabledDefinitionType"`
}

type EBayMotorsProContactByAddressEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProContactByAddressEnabledDefinitionType"`
}

type EBayMotorsProContactByEmailEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProContactByEmailEnabledDefinitionType"`
}

type EBayMotorsProContactByPhoneEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProContactByPhoneEnabledDefinitionType"`
}

type EBayMotorsProCounterOfferEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProCounterOfferEnabledDefinitionType"`
}

type EBayMotorsProPaymentMethodCheckOutEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType"`
}

type EBayMotorsProPhoneCountDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProPhoneCountDefinitionType"`
}

type EBayMotorsProSellerContactDetailsEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProSellerContactDetailsEnabledDefinitionType"`
}

type EBayMotorsProShippingMethodEnabledDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProShippingMethodEnabledDefinitionType"`
}

type EBayMotorsProStreetCountDefinitionType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayMotorsProStreetCountDefinitionType"`
}

type EBayPLUSPreferenceType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayPLUSPreferenceType"`

	//
	// An ISO 3166 standard two-letter code that identifies a country where the seller is eligible to offer eBay Plus on fixed price listings.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> Currently, eBay Plus is available only to buyers in Germany (<code>DE</code>).
	// </span>
	//
	Country *CountryCodeType `xml:"Country,omitempty"`

	//
	// A value of <code>true</code> indicates that the seller has opted in to eBay Plus for listings in the specified country.
	//
	OptInStatus bool `xml:"OptInStatus,omitempty"`

	//
	// A value of <code>true</code> indicates that if <strong>OptInStatus</strong> is also <code>true</code>, the seller will offer eBay Plus by default for new listings in the specified country. If this field's value is <code>false</code> (and <strong>OptInStatus</strong> is <code>true</code>), the seller will offer eBay Plus on a listing by listing basis in the specified country.
	//
	ListingPreference bool `xml:"ListingPreference,omitempty"`
}

type EBayPaymentMismatchDetailsType struct {
	XMLName xml.Name `xml:"urn:ebay:apis:eBLBaseComponents eBayPaymentMismatchDetailsType"`

	//
	// This field is deprecated.
	//
	MismatchType *MismatchTypeCodeType `xml:"MismatchType,omitempty"`

	//
	// This field is deprecated.
	//
	ActionRequiredBy time.Time `xml:"ActionRequiredBy,omitempty"`

	//
	// This field is deprecated.
	//
	MismatchAmount *AmountType `xml:"MismatchAmount,omitempty"`
}

type EBayAPIInterface interface {
	AddDispute(request *AddDisputeRequestType) (*AddDisputeResponseType, error)

	AddDisputeResponse(request *AddDisputeResponseRequestType) (*AddDisputeResponseResponseType, error)

	AddFixedPriceItem(request *AddFixedPriceItemRequestType) (*AddFixedPriceItemResponseType, error)

	AddItem(request *AddItemRequestType) (*AddItemResponseType, error)

	AddItemFromSellingManagerTemplate(request *AddItemFromSellingManagerTemplateRequestType) (*AddItemFromSellingManagerTemplateResponseType, error)

	AddItems(request *AddItemsRequestType) (*AddItemsResponseType, error)

	AddMemberMessageAAQToPartner(request *AddMemberMessageAAQToPartnerRequestType) (*AddMemberMessageAAQToPartnerResponseType, error)

	AddMemberMessageRTQ(request *AddMemberMessageRTQRequestType) (*AddMemberMessageRTQResponseType, error)

	AddMemberMessagesAAQToBidder(request *AddMemberMessagesAAQToBidderRequestType) (*AddMemberMessagesAAQToBidderResponseType, error)

	AddOrder(request *AddOrderRequestType) (*AddOrderResponseType, error)

	AddSecondChanceItem(request *AddSecondChanceItemRequestType) (*AddSecondChanceItemResponseType, error)

	AddSellingManagerInventoryFolder(request *AddSellingManagerInventoryFolderRequestType) (*AddSellingManagerInventoryFolderResponseType, error)

	AddSellingManagerProduct(request *AddSellingManagerProductRequestType) (*AddSellingManagerProductResponseType, error)

	AddSellingManagerTemplate(request *AddSellingManagerTemplateRequestType) (*AddSellingManagerTemplateResponseType, error)

	AddToItemDescription(request *AddToItemDescriptionRequestType) (*AddToItemDescriptionResponseType, error)

	AddToWatchList(request *AddToWatchListRequestType) (*AddToWatchListResponseType, error)

	AddTransactionConfirmationItem(request *AddTransactionConfirmationItemRequestType) (*AddTransactionConfirmationItemResponseType, error)

	CompleteSale(request *CompleteSaleRequestType) (*CompleteSaleResponseType, error)

	ConfirmIdentity(request *ConfirmIdentityRequestType) (*ConfirmIdentityResponseType, error)

	DeleteMyMessages(request *DeleteMyMessagesRequestType) (*DeleteMyMessagesResponseType, error)

	DeleteSellingManagerInventoryFolder(request *DeleteSellingManagerInventoryFolderRequestType) (*DeleteSellingManagerInventoryFolderResponseType, error)

	DeleteSellingManagerItemAutomationRule(request *DeleteSellingManagerItemAutomationRuleRequestType) (*DeleteSellingManagerItemAutomationRuleResponseType, error)

	DeleteSellingManagerProduct(request *DeleteSellingManagerProductRequestType) (*DeleteSellingManagerProductResponseType, error)

	DeleteSellingManagerTemplate(request *DeleteSellingManagerTemplateRequestType) (*DeleteSellingManagerTemplateResponseType, error)

	DeleteSellingManagerTemplateAutomationRule(request *DeleteSellingManagerTemplateAutomationRuleRequestType) (*DeleteSellingManagerTemplateAutomationRuleResponseType, error)

	DisableUnpaidItemAssistance(request *DisableUnpaidItemAssistanceRequestType) (*DisableUnpaidItemAssistanceResponseType, error)

	EndFixedPriceItem(request *EndFixedPriceItemRequestType) (*EndFixedPriceItemResponseType, error)

	EndItem(request *EndItemRequestType) (*EndItemResponseType, error)

	EndItems(request *EndItemsRequestType) (*EndItemsResponseType, error)

	ExtendSiteHostedPictures(request *ExtendSiteHostedPicturesRequestType) (*ExtendSiteHostedPicturesResponseType, error)

	FetchToken(request *FetchTokenRequestType) (*FetchTokenResponseType, error)

	GetAccount(request *GetAccountRequestType) (*GetAccountResponseType, error)

	GetAdFormatLeads(request *GetAdFormatLeadsRequestType) (*GetAdFormatLeadsResponseType, error)

	GetAllBidders(request *GetAllBiddersRequestType) (*GetAllBiddersResponseType, error)

	GetApiAccessRules(request *GetApiAccessRulesRequestType) (*GetApiAccessRulesResponseType, error)

	GetBestOffers(request *GetBestOffersRequestType) (*GetBestOffersResponseType, error)

	GetBidderList(request *GetBidderListRequestType) (*GetBidderListResponseType, error)

	GetCategories(request *GetCategoriesRequestType) (*GetCategoriesResponseType, error)

	GetCategoryFeatures(request *GetCategoryFeaturesRequestType) (*GetCategoryFeaturesResponseType, error)

	GetCategoryMappings(request *GetCategoryMappingsRequestType) (*GetCategoryMappingsResponseType, error)

	GetCategorySpecifics(request *GetCategorySpecificsRequestType) (*GetCategorySpecificsResponseType, error)

	GetChallengeToken(request *GetChallengeTokenRequestType) (*GetChallengeTokenResponseType, error)

	GetCharities(request *GetCharitiesRequestType) (*GetCharitiesResponseType, error)

	GetClientAlertsAuthToken(request *GetClientAlertsAuthTokenRequestType) (*GetClientAlertsAuthTokenResponseType, error)

	GetContextualKeywords(request *GetContextualKeywordsRequestType) (*GetContextualKeywordsResponseType, error)

	GetDescriptionTemplates(request *GetDescriptionTemplatesRequestType) (*GetDescriptionTemplatesResponseType, error)

	GetDispute(request *GetDisputeRequestType) (*GetDisputeResponseType, error)

	GetFeedback(request *GetFeedbackRequestType) (*GetFeedbackResponseType, error)

	GetItem(request *GetItemRequestType) (*GetItemResponseType, error)

	GetItemShipping(request *GetItemShippingRequestType) (*GetItemShippingResponseType, error)

	GetItemTransactions(request *GetItemTransactionsRequestType) (*GetItemTransactionsResponseType, error)

	GetItemsAwaitingFeedback(request *GetItemsAwaitingFeedbackRequestType) (*GetItemsAwaitingFeedbackResponseType, error)

	GetMemberMessages(request *GetMemberMessagesRequestType) (*GetMemberMessagesResponseType, error)

	GetMessagePreferences(request *GetMessagePreferencesRequestType) (*GetMessagePreferencesResponseType, error)

	GetMyMessages(request *GetMyMessagesRequestType) (*GetMyMessagesResponseType, error)

	GetMyeBayBuying(request *GetMyeBayBuyingRequestType) (*GetMyeBayBuyingResponseType, error)

	GetMyeBayReminders(request *GetMyeBayRemindersRequestType) (*GetMyeBayRemindersResponseType, error)

	GetMyeBaySelling(request *GetMyeBaySellingRequestType) (*GetMyeBaySellingResponseType, error)

	GetNotificationPreferences(request *GetNotificationPreferencesRequestType) (*GetNotificationPreferencesResponseType, error)

	GetNotificationsUsage(request *GetNotificationsUsageRequestType) (*GetNotificationsUsageResponseType, error)

	GetOrderTransactions(request *GetOrderTransactionsRequestType) (*GetOrderTransactionsResponseType, error)

	GetOrders(request *GetOrdersRequestType) (*GetOrdersResponseType, error)

	GetPromotionalSaleDetails(request *GetPromotionalSaleDetailsRequestType) (*GetPromotionalSaleDetailsResponseType, error)

	GetSellerDashboard(request *GetSellerDashboardRequestType) (*GetSellerDashboardResponseType, error)

	GetSellerEvents(request *GetSellerEventsRequestType) (*GetSellerEventsResponseType, error)

	GetSellerList(request *GetSellerListRequestType) (*GetSellerListResponseType, error)

	GetSellerTransactions(request *GetSellerTransactionsRequestType) (*GetSellerTransactionsResponseType, error)

	GetSellingManagerAlerts(request *GetSellingManagerAlertsRequestType) (*GetSellingManagerAlertsResponseType, error)

	GetSellingManagerEmailLog(request *GetSellingManagerEmailLogRequestType) (*GetSellingManagerEmailLogResponseType, error)

	GetSellingManagerInventory(request *GetSellingManagerInventoryRequestType) (*GetSellingManagerInventoryResponseType, error)

	GetSellingManagerInventoryFolder(request *GetSellingManagerInventoryFolderRequestType) (*GetSellingManagerInventoryFolderResponseType, error)

	GetSellingManagerItemAutomationRule(request *GetSellingManagerItemAutomationRuleRequestType) (*GetSellingManagerItemAutomationRuleResponseType, error)

	GetSellingManagerSaleRecord(request *GetSellingManagerSaleRecordRequestType) (*GetSellingManagerSaleRecordResponseType, error)

	GetSellingManagerSoldListings(request *GetSellingManagerSoldListingsRequestType) (*GetSellingManagerSoldListingsResponseType, error)

	GetSellingManagerTemplateAutomationRule(request *GetSellingManagerTemplateAutomationRuleRequestType) (*GetSellingManagerTemplateAutomationRuleResponseType, error)

	GetSellingManagerTemplates(request *GetSellingManagerTemplatesRequestType) (*GetSellingManagerTemplatesResponseType, error)

	GetSessionID(request *GetSessionIDRequestType) (*GetSessionIDResponseType, error)

	GetShippingDiscountProfiles(request *GetShippingDiscountProfilesRequestType) (*GetShippingDiscountProfilesResponseType, error)

	GetStore(request *GetStoreRequestType) (*GetStoreResponseType, error)

	GetStoreCategoryUpdateStatus(request *GetStoreCategoryUpdateStatusRequestType) (*GetStoreCategoryUpdateStatusResponseType, error)

	GetStoreCustomPage(request *GetStoreCustomPageRequestType) (*GetStoreCustomPageResponseType, error)

	GetStoreOptions(request *GetStoreOptionsRequestType) (*GetStoreOptionsResponseType, error)

	GetStorePreferences(request *GetStorePreferencesRequestType) (*GetStorePreferencesResponseType, error)

	GetSuggestedCategories(request *GetSuggestedCategoriesRequestType) (*GetSuggestedCategoriesResponseType, error)

	GetTaxTable(request *GetTaxTableRequestType) (*GetTaxTableResponseType, error)

	GetTokenStatus(request *GetTokenStatusRequestType) (*GetTokenStatusResponseType, error)

	GetUser(request *GetUserRequestType) (*GetUserResponseType, error)

	GetUserContactDetails(request *GetUserContactDetailsRequestType) (*GetUserContactDetailsResponseType, error)

	GetUserDisputes(request *GetUserDisputesRequestType) (*GetUserDisputesResponseType, error)

	GetUserPreferences(request *GetUserPreferencesRequestType) (*GetUserPreferencesResponseType, error)

	GetVeROReasonCodeDetails(request *GetVeROReasonCodeDetailsRequestType) (*GetVeROReasonCodeDetailsResponseType, error)

	GetVeROReportStatus(request *GetVeROReportStatusRequestType) (*GetVeROReportStatusResponseType, error)

	GeteBayDetails(request *GeteBayDetailsRequestType) (*GeteBayDetailsResponseType, error)

	GeteBayOfficialTime(request *GeteBayOfficialTimeRequestType) (*GeteBayOfficialTimeResponseType, error)

	LeaveFeedback(request *LeaveFeedbackRequestType) (*LeaveFeedbackResponseType, error)

	MoveSellingManagerInventoryFolder(request *MoveSellingManagerInventoryFolderRequestType) (*MoveSellingManagerInventoryFolderResponseType, error)

	PlaceOffer(request *PlaceOfferRequestType) (*PlaceOfferResponseType, error)

	RelistFixedPriceItem(request *RelistFixedPriceItemRequestType) (*RelistFixedPriceItemResponseType, error)

	RelistItem(request *RelistItemRequestType) (*RelistItemResponseType, error)

	RemoveFromWatchList(request *RemoveFromWatchListRequestType) (*RemoveFromWatchListResponseType, error)

	RespondToBestOffer(request *RespondToBestOfferRequestType) (*RespondToBestOfferResponseType, error)

	RespondToFeedback(request *RespondToFeedbackRequestType) (*RespondToFeedbackResponseType, error)

	ReviseCheckoutStatus(request *ReviseCheckoutStatusRequestType) (*ReviseCheckoutStatusResponseType, error)

	ReviseFixedPriceItem(request *ReviseFixedPriceItemRequestType) (*ReviseFixedPriceItemResponseType, error)

	ReviseInventoryStatus(request *ReviseInventoryStatusRequestType) (*ReviseInventoryStatusResponseType, error)

	ReviseItem(request *ReviseItemRequestType) (*ReviseItemResponseType, error)

	ReviseMyMessages(request *ReviseMyMessagesRequestType) (*ReviseMyMessagesResponseType, error)

	ReviseMyMessagesFolders(request *ReviseMyMessagesFoldersRequestType) (*ReviseMyMessagesFoldersResponseType, error)

	ReviseSellingManagerInventoryFolder(request *ReviseSellingManagerInventoryFolderRequestType) (*ReviseSellingManagerInventoryFolderResponseType, error)

	ReviseSellingManagerProduct(request *ReviseSellingManagerProductRequestType) (*ReviseSellingManagerProductResponseType, error)

	ReviseSellingManagerSaleRecord(request *ReviseSellingManagerSaleRecordRequestType) (*ReviseSellingManagerSaleRecordResponseType, error)

	ReviseSellingManagerTemplate(request *ReviseSellingManagerTemplateRequestType) (*ReviseSellingManagerTemplateResponseType, error)

	RevokeToken(request *RevokeTokenRequestType) (*RevokeTokenResponseType, error)

	SaveItemToSellingManagerTemplate(request *SaveItemToSellingManagerTemplateRequestType) (*SaveItemToSellingManagerTemplateResponseType, error)

	SellerReverseDispute(request *SellerReverseDisputeRequestType) (*SellerReverseDisputeResponseType, error)

	SendInvoice(request *SendInvoiceRequestType) (*SendInvoiceResponseType, error)

	SetMessagePreferences(request *SetMessagePreferencesRequestType) (*SetMessagePreferencesResponseType, error)

	SetNotificationPreferences(request *SetNotificationPreferencesRequestType) (*SetNotificationPreferencesResponseType, error)

	SetPromotionalSale(request *SetPromotionalSaleRequestType) (*SetPromotionalSaleResponseType, error)

	SetPromotionalSaleListings(request *SetPromotionalSaleListingsRequestType) (*SetPromotionalSaleListingsResponseType, error)

	SetSellingManagerFeedbackOptions(request *SetSellingManagerFeedbackOptionsRequestType) (*SetSellingManagerFeedbackOptionsResponseType, error)

	SetSellingManagerItemAutomationRule(request *SetSellingManagerItemAutomationRuleRequestType) (*SetSellingManagerItemAutomationRuleResponseType, error)

	SetSellingManagerTemplateAutomationRule(request *SetSellingManagerTemplateAutomationRuleRequestType) (*SetSellingManagerTemplateAutomationRuleResponseType, error)

	SetShippingDiscountProfiles(request *SetShippingDiscountProfilesRequestType) (*SetShippingDiscountProfilesResponseType, error)

	SetStore(request *SetStoreRequestType) (*SetStoreResponseType, error)

	SetStoreCategories(request *SetStoreCategoriesRequestType) (*SetStoreCategoriesResponseType, error)

	SetStoreCustomPage(request *SetStoreCustomPageRequestType) (*SetStoreCustomPageResponseType, error)

	SetStorePreferences(request *SetStorePreferencesRequestType) (*SetStorePreferencesResponseType, error)

	SetTaxTable(request *SetTaxTableRequestType) (*SetTaxTableResponseType, error)

	SetUserNotes(request *SetUserNotesRequestType) (*SetUserNotesResponseType, error)

	SetUserPreferences(request *SetUserPreferencesRequestType) (*SetUserPreferencesResponseType, error)

	UploadSiteHostedPictures(request *UploadSiteHostedPicturesRequestType) (*UploadSiteHostedPicturesResponseType, error)

	ValidateChallengeInput(request *ValidateChallengeInputRequestType) (*ValidateChallengeInputResponseType, error)

	ValidateTestUserRegistration(request *ValidateTestUserRegistrationRequestType) (*ValidateTestUserRegistrationResponseType, error)

	VeROReportItems(request *VeROReportItemsRequestType) (*VeROReportItemsResponseType, error)

	VerifyAddFixedPriceItem(request *VerifyAddFixedPriceItemRequestType) (*VerifyAddFixedPriceItemResponseType, error)

	VerifyAddItem(request *VerifyAddItemRequestType) (*VerifyAddItemResponseType, error)

	VerifyAddSecondChanceItem(request *VerifyAddSecondChanceItemRequestType) (*VerifyAddSecondChanceItemResponseType, error)

	VerifyRelistItem(request *VerifyRelistItemRequestType) (*VerifyRelistItemResponseType, error)
}

type eBayAPIInterface struct {
	client *soap.Client
}

func NewEBayAPIInterface(client *soap.Client) EBayAPIInterface {
	return &eBayAPIInterface{
		client: client,
	}
}

func (service *eBayAPIInterface) AddDispute(request *AddDisputeRequestType) (*AddDisputeResponseType, error) {
	response := new(AddDisputeResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddDisputeResponse(request *AddDisputeResponseRequestType) (*AddDisputeResponseResponseType, error) {
	response := new(AddDisputeResponseResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddFixedPriceItem(request *AddFixedPriceItemRequestType) (*AddFixedPriceItemResponseType, error) {
	response := new(AddFixedPriceItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddItem(request *AddItemRequestType) (*AddItemResponseType, error) {
	response := new(AddItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddItemFromSellingManagerTemplate(request *AddItemFromSellingManagerTemplateRequestType) (*AddItemFromSellingManagerTemplateResponseType, error) {
	response := new(AddItemFromSellingManagerTemplateResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddItems(request *AddItemsRequestType) (*AddItemsResponseType, error) {
	response := new(AddItemsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddMemberMessageAAQToPartner(request *AddMemberMessageAAQToPartnerRequestType) (*AddMemberMessageAAQToPartnerResponseType, error) {
	response := new(AddMemberMessageAAQToPartnerResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddMemberMessageRTQ(request *AddMemberMessageRTQRequestType) (*AddMemberMessageRTQResponseType, error) {
	response := new(AddMemberMessageRTQResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddMemberMessagesAAQToBidder(request *AddMemberMessagesAAQToBidderRequestType) (*AddMemberMessagesAAQToBidderResponseType, error) {
	response := new(AddMemberMessagesAAQToBidderResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddOrder(request *AddOrderRequestType) (*AddOrderResponseType, error) {
	response := new(AddOrderResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddSecondChanceItem(request *AddSecondChanceItemRequestType) (*AddSecondChanceItemResponseType, error) {
	response := new(AddSecondChanceItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddSellingManagerInventoryFolder(request *AddSellingManagerInventoryFolderRequestType) (*AddSellingManagerInventoryFolderResponseType, error) {
	response := new(AddSellingManagerInventoryFolderResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddSellingManagerProduct(request *AddSellingManagerProductRequestType) (*AddSellingManagerProductResponseType, error) {
	response := new(AddSellingManagerProductResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddSellingManagerTemplate(request *AddSellingManagerTemplateRequestType) (*AddSellingManagerTemplateResponseType, error) {
	response := new(AddSellingManagerTemplateResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddToItemDescription(request *AddToItemDescriptionRequestType) (*AddToItemDescriptionResponseType, error) {
	response := new(AddToItemDescriptionResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddToWatchList(request *AddToWatchListRequestType) (*AddToWatchListResponseType, error) {
	response := new(AddToWatchListResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) AddTransactionConfirmationItem(request *AddTransactionConfirmationItemRequestType) (*AddTransactionConfirmationItemResponseType, error) {
	response := new(AddTransactionConfirmationItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) CompleteSale(request *CompleteSaleRequestType) (*CompleteSaleResponseType, error) {
	response := new(CompleteSaleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ConfirmIdentity(request *ConfirmIdentityRequestType) (*ConfirmIdentityResponseType, error) {
	response := new(ConfirmIdentityResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) DeleteMyMessages(request *DeleteMyMessagesRequestType) (*DeleteMyMessagesResponseType, error) {
	response := new(DeleteMyMessagesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) DeleteSellingManagerInventoryFolder(request *DeleteSellingManagerInventoryFolderRequestType) (*DeleteSellingManagerInventoryFolderResponseType, error) {
	response := new(DeleteSellingManagerInventoryFolderResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) DeleteSellingManagerItemAutomationRule(request *DeleteSellingManagerItemAutomationRuleRequestType) (*DeleteSellingManagerItemAutomationRuleResponseType, error) {
	response := new(DeleteSellingManagerItemAutomationRuleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) DeleteSellingManagerProduct(request *DeleteSellingManagerProductRequestType) (*DeleteSellingManagerProductResponseType, error) {
	response := new(DeleteSellingManagerProductResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) DeleteSellingManagerTemplate(request *DeleteSellingManagerTemplateRequestType) (*DeleteSellingManagerTemplateResponseType, error) {
	response := new(DeleteSellingManagerTemplateResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) DeleteSellingManagerTemplateAutomationRule(request *DeleteSellingManagerTemplateAutomationRuleRequestType) (*DeleteSellingManagerTemplateAutomationRuleResponseType, error) {
	response := new(DeleteSellingManagerTemplateAutomationRuleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) DisableUnpaidItemAssistance(request *DisableUnpaidItemAssistanceRequestType) (*DisableUnpaidItemAssistanceResponseType, error) {
	response := new(DisableUnpaidItemAssistanceResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) EndFixedPriceItem(request *EndFixedPriceItemRequestType) (*EndFixedPriceItemResponseType, error) {
	response := new(EndFixedPriceItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) EndItem(request *EndItemRequestType) (*EndItemResponseType, error) {
	response := new(EndItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) EndItems(request *EndItemsRequestType) (*EndItemsResponseType, error) {
	response := new(EndItemsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ExtendSiteHostedPictures(request *ExtendSiteHostedPicturesRequestType) (*ExtendSiteHostedPicturesResponseType, error) {
	response := new(ExtendSiteHostedPicturesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) FetchToken(request *FetchTokenRequestType) (*FetchTokenResponseType, error) {
	response := new(FetchTokenResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetAccount(request *GetAccountRequestType) (*GetAccountResponseType, error) {
	response := new(GetAccountResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetAdFormatLeads(request *GetAdFormatLeadsRequestType) (*GetAdFormatLeadsResponseType, error) {
	response := new(GetAdFormatLeadsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetAllBidders(request *GetAllBiddersRequestType) (*GetAllBiddersResponseType, error) {
	response := new(GetAllBiddersResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetApiAccessRules(request *GetApiAccessRulesRequestType) (*GetApiAccessRulesResponseType, error) {
	response := new(GetApiAccessRulesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetBestOffers(request *GetBestOffersRequestType) (*GetBestOffersResponseType, error) {
	response := new(GetBestOffersResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetBidderList(request *GetBidderListRequestType) (*GetBidderListResponseType, error) {
	response := new(GetBidderListResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetCategories(request *GetCategoriesRequestType) (*GetCategoriesResponseType, error) {
	response := new(GetCategoriesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetCategoryFeatures(request *GetCategoryFeaturesRequestType) (*GetCategoryFeaturesResponseType, error) {
	response := new(GetCategoryFeaturesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetCategoryMappings(request *GetCategoryMappingsRequestType) (*GetCategoryMappingsResponseType, error) {
	response := new(GetCategoryMappingsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetCategorySpecifics(request *GetCategorySpecificsRequestType) (*GetCategorySpecificsResponseType, error) {
	response := new(GetCategorySpecificsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetChallengeToken(request *GetChallengeTokenRequestType) (*GetChallengeTokenResponseType, error) {
	response := new(GetChallengeTokenResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetCharities(request *GetCharitiesRequestType) (*GetCharitiesResponseType, error) {
	response := new(GetCharitiesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetClientAlertsAuthToken(request *GetClientAlertsAuthTokenRequestType) (*GetClientAlertsAuthTokenResponseType, error) {
	response := new(GetClientAlertsAuthTokenResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetContextualKeywords(request *GetContextualKeywordsRequestType) (*GetContextualKeywordsResponseType, error) {
	response := new(GetContextualKeywordsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetDescriptionTemplates(request *GetDescriptionTemplatesRequestType) (*GetDescriptionTemplatesResponseType, error) {
	response := new(GetDescriptionTemplatesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetDispute(request *GetDisputeRequestType) (*GetDisputeResponseType, error) {
	response := new(GetDisputeResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetFeedback(request *GetFeedbackRequestType) (*GetFeedbackResponseType, error) {
	response := new(GetFeedbackResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetItem(request *GetItemRequestType) (*GetItemResponseType, error) {
	response := new(GetItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetItemShipping(request *GetItemShippingRequestType) (*GetItemShippingResponseType, error) {
	response := new(GetItemShippingResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetItemTransactions(request *GetItemTransactionsRequestType) (*GetItemTransactionsResponseType, error) {
	response := new(GetItemTransactionsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetItemsAwaitingFeedback(request *GetItemsAwaitingFeedbackRequestType) (*GetItemsAwaitingFeedbackResponseType, error) {
	response := new(GetItemsAwaitingFeedbackResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetMemberMessages(request *GetMemberMessagesRequestType) (*GetMemberMessagesResponseType, error) {
	response := new(GetMemberMessagesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetMessagePreferences(request *GetMessagePreferencesRequestType) (*GetMessagePreferencesResponseType, error) {
	response := new(GetMessagePreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetMyMessages(request *GetMyMessagesRequestType) (*GetMyMessagesResponseType, error) {
	response := new(GetMyMessagesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetMyeBayBuying(request *GetMyeBayBuyingRequestType) (*GetMyeBayBuyingResponseType, error) {
	response := new(GetMyeBayBuyingResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetMyeBayReminders(request *GetMyeBayRemindersRequestType) (*GetMyeBayRemindersResponseType, error) {
	response := new(GetMyeBayRemindersResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetMyeBaySelling(request *GetMyeBaySellingRequestType) (*GetMyeBaySellingResponseType, error) {
	response := new(GetMyeBaySellingResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetNotificationPreferences(request *GetNotificationPreferencesRequestType) (*GetNotificationPreferencesResponseType, error) {
	response := new(GetNotificationPreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetNotificationsUsage(request *GetNotificationsUsageRequestType) (*GetNotificationsUsageResponseType, error) {
	response := new(GetNotificationsUsageResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetOrderTransactions(request *GetOrderTransactionsRequestType) (*GetOrderTransactionsResponseType, error) {
	response := new(GetOrderTransactionsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetOrders(request *GetOrdersRequestType) (*GetOrdersResponseType, error) {
	response := new(GetOrdersResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetPromotionalSaleDetails(request *GetPromotionalSaleDetailsRequestType) (*GetPromotionalSaleDetailsResponseType, error) {
	response := new(GetPromotionalSaleDetailsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellerDashboard(request *GetSellerDashboardRequestType) (*GetSellerDashboardResponseType, error) {
	response := new(GetSellerDashboardResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellerEvents(request *GetSellerEventsRequestType) (*GetSellerEventsResponseType, error) {
	response := new(GetSellerEventsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellerList(request *GetSellerListRequestType) (*GetSellerListResponseType, error) {
	response := new(GetSellerListResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellerTransactions(request *GetSellerTransactionsRequestType) (*GetSellerTransactionsResponseType, error) {
	response := new(GetSellerTransactionsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerAlerts(request *GetSellingManagerAlertsRequestType) (*GetSellingManagerAlertsResponseType, error) {
	response := new(GetSellingManagerAlertsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerEmailLog(request *GetSellingManagerEmailLogRequestType) (*GetSellingManagerEmailLogResponseType, error) {
	response := new(GetSellingManagerEmailLogResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerInventory(request *GetSellingManagerInventoryRequestType) (*GetSellingManagerInventoryResponseType, error) {
	response := new(GetSellingManagerInventoryResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerInventoryFolder(request *GetSellingManagerInventoryFolderRequestType) (*GetSellingManagerInventoryFolderResponseType, error) {
	response := new(GetSellingManagerInventoryFolderResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerItemAutomationRule(request *GetSellingManagerItemAutomationRuleRequestType) (*GetSellingManagerItemAutomationRuleResponseType, error) {
	response := new(GetSellingManagerItemAutomationRuleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerSaleRecord(request *GetSellingManagerSaleRecordRequestType) (*GetSellingManagerSaleRecordResponseType, error) {
	response := new(GetSellingManagerSaleRecordResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerSoldListings(request *GetSellingManagerSoldListingsRequestType) (*GetSellingManagerSoldListingsResponseType, error) {
	response := new(GetSellingManagerSoldListingsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerTemplateAutomationRule(request *GetSellingManagerTemplateAutomationRuleRequestType) (*GetSellingManagerTemplateAutomationRuleResponseType, error) {
	response := new(GetSellingManagerTemplateAutomationRuleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSellingManagerTemplates(request *GetSellingManagerTemplatesRequestType) (*GetSellingManagerTemplatesResponseType, error) {
	response := new(GetSellingManagerTemplatesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSessionID(request *GetSessionIDRequestType) (*GetSessionIDResponseType, error) {
	response := new(GetSessionIDResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetShippingDiscountProfiles(request *GetShippingDiscountProfilesRequestType) (*GetShippingDiscountProfilesResponseType, error) {
	response := new(GetShippingDiscountProfilesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetStore(request *GetStoreRequestType) (*GetStoreResponseType, error) {
	response := new(GetStoreResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetStoreCategoryUpdateStatus(request *GetStoreCategoryUpdateStatusRequestType) (*GetStoreCategoryUpdateStatusResponseType, error) {
	response := new(GetStoreCategoryUpdateStatusResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetStoreCustomPage(request *GetStoreCustomPageRequestType) (*GetStoreCustomPageResponseType, error) {
	response := new(GetStoreCustomPageResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetStoreOptions(request *GetStoreOptionsRequestType) (*GetStoreOptionsResponseType, error) {
	response := new(GetStoreOptionsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetStorePreferences(request *GetStorePreferencesRequestType) (*GetStorePreferencesResponseType, error) {
	response := new(GetStorePreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetSuggestedCategories(request *GetSuggestedCategoriesRequestType) (*GetSuggestedCategoriesResponseType, error) {
	response := new(GetSuggestedCategoriesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetTaxTable(request *GetTaxTableRequestType) (*GetTaxTableResponseType, error) {
	response := new(GetTaxTableResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetTokenStatus(request *GetTokenStatusRequestType) (*GetTokenStatusResponseType, error) {
	response := new(GetTokenStatusResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetUser(request *GetUserRequestType) (*GetUserResponseType, error) {
	response := new(GetUserResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetUserContactDetails(request *GetUserContactDetailsRequestType) (*GetUserContactDetailsResponseType, error) {
	response := new(GetUserContactDetailsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetUserDisputes(request *GetUserDisputesRequestType) (*GetUserDisputesResponseType, error) {
	response := new(GetUserDisputesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetUserPreferences(request *GetUserPreferencesRequestType) (*GetUserPreferencesResponseType, error) {
	response := new(GetUserPreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetVeROReasonCodeDetails(request *GetVeROReasonCodeDetailsRequestType) (*GetVeROReasonCodeDetailsResponseType, error) {
	response := new(GetVeROReasonCodeDetailsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GetVeROReportStatus(request *GetVeROReportStatusRequestType) (*GetVeROReportStatusResponseType, error) {
	response := new(GetVeROReportStatusResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GeteBayDetails(request *GeteBayDetailsRequestType) (*GeteBayDetailsResponseType, error) {
	response := new(GeteBayDetailsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) GeteBayOfficialTime(request *GeteBayOfficialTimeRequestType) (*GeteBayOfficialTimeResponseType, error) {
	response := new(GeteBayOfficialTimeResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) LeaveFeedback(request *LeaveFeedbackRequestType) (*LeaveFeedbackResponseType, error) {
	response := new(LeaveFeedbackResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) MoveSellingManagerInventoryFolder(request *MoveSellingManagerInventoryFolderRequestType) (*MoveSellingManagerInventoryFolderResponseType, error) {
	response := new(MoveSellingManagerInventoryFolderResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) PlaceOffer(request *PlaceOfferRequestType) (*PlaceOfferResponseType, error) {
	response := new(PlaceOfferResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) RelistFixedPriceItem(request *RelistFixedPriceItemRequestType) (*RelistFixedPriceItemResponseType, error) {
	response := new(RelistFixedPriceItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) RelistItem(request *RelistItemRequestType) (*RelistItemResponseType, error) {
	response := new(RelistItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) RemoveFromWatchList(request *RemoveFromWatchListRequestType) (*RemoveFromWatchListResponseType, error) {
	response := new(RemoveFromWatchListResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) RespondToBestOffer(request *RespondToBestOfferRequestType) (*RespondToBestOfferResponseType, error) {
	response := new(RespondToBestOfferResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) RespondToFeedback(request *RespondToFeedbackRequestType) (*RespondToFeedbackResponseType, error) {
	response := new(RespondToFeedbackResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseCheckoutStatus(request *ReviseCheckoutStatusRequestType) (*ReviseCheckoutStatusResponseType, error) {
	response := new(ReviseCheckoutStatusResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseFixedPriceItem(request *ReviseFixedPriceItemRequestType) (*ReviseFixedPriceItemResponseType, error) {
	response := new(ReviseFixedPriceItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseInventoryStatus(request *ReviseInventoryStatusRequestType) (*ReviseInventoryStatusResponseType, error) {
	response := new(ReviseInventoryStatusResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseItem(request *ReviseItemRequestType) (*ReviseItemResponseType, error) {
	response := new(ReviseItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseMyMessages(request *ReviseMyMessagesRequestType) (*ReviseMyMessagesResponseType, error) {
	response := new(ReviseMyMessagesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseMyMessagesFolders(request *ReviseMyMessagesFoldersRequestType) (*ReviseMyMessagesFoldersResponseType, error) {
	response := new(ReviseMyMessagesFoldersResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseSellingManagerInventoryFolder(request *ReviseSellingManagerInventoryFolderRequestType) (*ReviseSellingManagerInventoryFolderResponseType, error) {
	response := new(ReviseSellingManagerInventoryFolderResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseSellingManagerProduct(request *ReviseSellingManagerProductRequestType) (*ReviseSellingManagerProductResponseType, error) {
	response := new(ReviseSellingManagerProductResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseSellingManagerSaleRecord(request *ReviseSellingManagerSaleRecordRequestType) (*ReviseSellingManagerSaleRecordResponseType, error) {
	response := new(ReviseSellingManagerSaleRecordResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ReviseSellingManagerTemplate(request *ReviseSellingManagerTemplateRequestType) (*ReviseSellingManagerTemplateResponseType, error) {
	response := new(ReviseSellingManagerTemplateResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) RevokeToken(request *RevokeTokenRequestType) (*RevokeTokenResponseType, error) {
	response := new(RevokeTokenResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SaveItemToSellingManagerTemplate(request *SaveItemToSellingManagerTemplateRequestType) (*SaveItemToSellingManagerTemplateResponseType, error) {
	response := new(SaveItemToSellingManagerTemplateResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SellerReverseDispute(request *SellerReverseDisputeRequestType) (*SellerReverseDisputeResponseType, error) {
	response := new(SellerReverseDisputeResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SendInvoice(request *SendInvoiceRequestType) (*SendInvoiceResponseType, error) {
	response := new(SendInvoiceResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetMessagePreferences(request *SetMessagePreferencesRequestType) (*SetMessagePreferencesResponseType, error) {
	response := new(SetMessagePreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetNotificationPreferences(request *SetNotificationPreferencesRequestType) (*SetNotificationPreferencesResponseType, error) {
	response := new(SetNotificationPreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetPromotionalSale(request *SetPromotionalSaleRequestType) (*SetPromotionalSaleResponseType, error) {
	response := new(SetPromotionalSaleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetPromotionalSaleListings(request *SetPromotionalSaleListingsRequestType) (*SetPromotionalSaleListingsResponseType, error) {
	response := new(SetPromotionalSaleListingsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetSellingManagerFeedbackOptions(request *SetSellingManagerFeedbackOptionsRequestType) (*SetSellingManagerFeedbackOptionsResponseType, error) {
	response := new(SetSellingManagerFeedbackOptionsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetSellingManagerItemAutomationRule(request *SetSellingManagerItemAutomationRuleRequestType) (*SetSellingManagerItemAutomationRuleResponseType, error) {
	response := new(SetSellingManagerItemAutomationRuleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetSellingManagerTemplateAutomationRule(request *SetSellingManagerTemplateAutomationRuleRequestType) (*SetSellingManagerTemplateAutomationRuleResponseType, error) {
	response := new(SetSellingManagerTemplateAutomationRuleResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetShippingDiscountProfiles(request *SetShippingDiscountProfilesRequestType) (*SetShippingDiscountProfilesResponseType, error) {
	response := new(SetShippingDiscountProfilesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetStore(request *SetStoreRequestType) (*SetStoreResponseType, error) {
	response := new(SetStoreResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetStoreCategories(request *SetStoreCategoriesRequestType) (*SetStoreCategoriesResponseType, error) {
	response := new(SetStoreCategoriesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetStoreCustomPage(request *SetStoreCustomPageRequestType) (*SetStoreCustomPageResponseType, error) {
	response := new(SetStoreCustomPageResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetStorePreferences(request *SetStorePreferencesRequestType) (*SetStorePreferencesResponseType, error) {
	response := new(SetStorePreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetTaxTable(request *SetTaxTableRequestType) (*SetTaxTableResponseType, error) {
	response := new(SetTaxTableResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetUserNotes(request *SetUserNotesRequestType) (*SetUserNotesResponseType, error) {
	response := new(SetUserNotesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) SetUserPreferences(request *SetUserPreferencesRequestType) (*SetUserPreferencesResponseType, error) {
	response := new(SetUserPreferencesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) UploadSiteHostedPictures(request *UploadSiteHostedPicturesRequestType) (*UploadSiteHostedPicturesResponseType, error) {
	response := new(UploadSiteHostedPicturesResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ValidateChallengeInput(request *ValidateChallengeInputRequestType) (*ValidateChallengeInputResponseType, error) {
	response := new(ValidateChallengeInputResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) ValidateTestUserRegistration(request *ValidateTestUserRegistrationRequestType) (*ValidateTestUserRegistrationResponseType, error) {
	response := new(ValidateTestUserRegistrationResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) VeROReportItems(request *VeROReportItemsRequestType) (*VeROReportItemsResponseType, error) {
	response := new(VeROReportItemsResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) VerifyAddFixedPriceItem(request *VerifyAddFixedPriceItemRequestType) (*VerifyAddFixedPriceItemResponseType, error) {
	response := new(VerifyAddFixedPriceItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) VerifyAddItem(request *VerifyAddItemRequestType) (*VerifyAddItemResponseType, error) {
	response := new(VerifyAddItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) VerifyAddSecondChanceItem(request *VerifyAddSecondChanceItemRequestType) (*VerifyAddSecondChanceItemResponseType, error) {
	response := new(VerifyAddSecondChanceItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eBayAPIInterface) VerifyRelistItem(request *VerifyRelistItemRequestType) (*VerifyRelistItemResponseType, error) {
	response := new(VerifyRelistItemResponseType)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
