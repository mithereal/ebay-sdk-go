// Code generated by gowsdl DO NOT EDIT.

package ebay.soap

import (
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

//
// Container for available types of charges that your application's subscribers can incur.
//
type SubscriptionChargeType string

const (

	//
	// The subscription is on a free trial.
	//
	SubscriptionChargeTypeFreeTrial SubscriptionChargeType = "FreeTrial"

	//
	// Non-recurring charge (one-time subscription fee).
	//
	SubscriptionChargeTypeNRC SubscriptionChargeType = "NRC"

	//
	// Non-recurring setup charge.
	//
	SubscriptionChargeTypeNRCSetup SubscriptionChargeType = "NRCSetup"

	//
	// Recurring charge for a plan when the plan charges are not to be pro-rated at the
	// end of subscription. Not applicable for usage. For this kind of charge
	// originating from the addUsage call, a manual credit is needed for a desired adjustment.
	//
	SubscriptionChargeTypeRecurring SubscriptionChargeType = "Recurring"

	//
	// Recurring charge for a plan when the plan charges are to be pro-rated at the
	// end of subscription. Not applicable for usage.
	//
	SubscriptionChargeTypeRecurringProRateEnd SubscriptionChargeType = "RecurringProRateEnd"

	//
	// A charge for which the subscriber will pay usage charges.
	//
	SubscriptionChargeTypeUsage SubscriptionChargeType = "Usage"

	//
	// A free plan that will not have usage or other charges.
	//
	SubscriptionChargeTypeFree SubscriptionChargeType = "Free"

	//
	// Billable charge that is not included in the plan and is not subject to
	// eBay service fee. For example, shipping charges.
	//
	SubscriptionChargeTypeNonPlanUsage SubscriptionChargeType = "NonPlanUsage"
)

//
// Container for types of transactions that can be contained in billing records.
//
type BillingRecordType string

const (

	//
	// Indicates that the billing record represents a recurring subscription charge.
	// Pre-defined in the billing plan (not ever applied through the addUsage call).
	//
	BillingRecordTypeSubscriptionCharge BillingRecordType = "SubscriptionCharge"

	//
	// Indicates that the billing record represents a one-time subscription
	// charge or a setup fee. Equivalent to NRC (non-recurring charge). Pre-
	// defined in the billing plan (not ever applied through the addUsage call).
	//
	BillingRecordTypeOneTimeCharge BillingRecordType = "OneTimeCharge"

	//
	// Indicates just that the charge in the billing record was applied by the
	// addUsage call.
	//
	BillingRecordTypeUsageCharge BillingRecordType = "UsageCharge"

	//
	// Indicates that the billing record represents a statement. Pre-defined in
	// the billing plan (not ever applied through the addUsage call).
	//
	BillingRecordTypeStatement BillingRecordType = "Statement"

	//
	// Indicates that the billing record represents a refund of charges that the
	// user has paid after cancellation date. This might apply, for example, to a
	// user who is subscribed to a plan that is prorated, who has been billed in
	// advance for a month and who unsubscribes before the end of that month.
	// Credits can be added manually or system-generated upon subscription
	// cancellation.
	//
	BillingRecordTypeCreditSubscriptionCharge BillingRecordType = "CreditSubscriptionCharge"

	//
	// Indicates that the billing record represents a credit for one-time
	// subscription fee or setup fee.
	//
	BillingRecordTypeCreditOneTimeCharge BillingRecordType = "CreditOneTimeCharge"

	//
	// Indicates that the billing record represents a credit for usage charge.
	//
	BillingRecordTypeCreditUsageCharge BillingRecordType = "CreditUsageCharge"

	//
	// Indicates that the billing record represents an account-level credit
	// statement for the user.
	//
	BillingRecordTypeCreditStatement BillingRecordType = "CreditStatement"

	//
	// Indicates that the billing record represents a reversal of a
	// CreditUsageCharge, a CreditOneTimeCharge, or
	// a CreditSubscriptionCharge.
	//
	BillingRecordTypeCreditReversal BillingRecordType = "CreditReversal"

	//
	// Indicates that the billing record represents a payment reversal, which
	// records that a regularly scheduled payment has failed. A payment reversal
	// and a payment will both appear on the user's account.
	//
	BillingRecordTypePaymentReversal BillingRecordType = "PaymentReversal"

	//
	// Indicates that the billing record represents a payment refund, in which
	// money has been refunded to the user's PayPal account.
	//
	BillingRecordTypePaymentRefund BillingRecordType = "PaymentRefund"

	//
	// Indicates that the billing record represents all transactions related to
	// payment like reversal and refund and not just payment.
	//
	BillingRecordTypePayment BillingRecordType = "Payment"

	//
	// Reserved for future use. When discounts are introduced, a discount, such as 10% off a subscription charge
	// or 100% of for a month or $10 for the first 3 months, will be calculated at bill processing time.
	//
	BillingRecordTypeDiscount BillingRecordType = "Discount"

	//
	// Indicates that the billing record represents all types of credit such as CreditSubscriptionCharge,
	// CreditOneTimeCharge, CreditUsageCharge, CreditStatement, CreditReversal.
	//
	BillingRecordTypeCredit BillingRecordType = "Credit"

	//
	// Indicates that the billing record represents all types of charges such as SubscriptionCharge,
	// OneTimeCharge, UsageCharge.
	//
	BillingRecordTypeCharge BillingRecordType = "Charge"

	//
	// Indicates that the billing record represents all transactions in the statement.
	//
	BillingRecordTypeAll BillingRecordType = "All"
)

//
// The format of the statement image after your application has successfully converted it.
// After your application uncompresses
// the base64 data, your application must convert it to text/html format.
//
type ImageFormat string

const (

	//
	// Indicates that the format of the image is text/html.
	//
	ImageFormatTexthtml ImageFormat = "text/html"
)

//
// The data for the billing statement generally is returned as compressed.
// If the value of imageCompressionType field
// is other than none, your application must uncompress the data.
//
type ImageCompressionType string

const (

	//
	// Indicates that the billing statement image is uncompressed.
	//
	ImageCompressionTypeNone ImageCompressionType = "none"

	//
	// Indicates that the billing statement image is gzip-compressed.
	//
	ImageCompressionTypeGzip ImageCompressionType = "gzip"
)

//
// In the case of getSubscribers, you can specify an output selector
// of SubscriptionHistory or of SubscriberCount.
// If you specify an output selector of SubscriptionHistory,
// then you must include the user name
// of the user whose history you are retrieving.
//
type SubscriberOutputSelector string

const (

	//
	// Use this value if you want to get a count of subscribers.
	//
	SubscriberOutputSelectorSubscriberCount SubscriberOutputSelector = "SubscriberCount"

	//
	// Use this value if you want to get subscribers' history.
	// If you specify a value of SubscriptionHistory,
	// you must specify the user name(s) in the request.
	//
	SubscriberOutputSelectorSubscriptionHistory SubscriberOutputSelector = "SubscriptionHistory"
)

//
// Defines possible subscription states.
// Used in getSubscribers to filter by subscription state.
//
type SubscriptionState string

const (

	//
	// For internal use.
	//
	SubscriptionStateCreated SubscriptionState = "Created"

	//
	// The subscription has been created and is not yet active.
	//
	SubscriptionStatePending SubscriptionState = "Pending"

	//
	// The user is actively subscribed to the application.
	//
	SubscriptionStateActive SubscriptionState = "Active"

	//
	// Suspended state, possibly due to a payment failure or past due account. There is a block (which can be
	// removed) on the user's access to the application. The user cannot start the application.
	//
	SubscriptionStateSuspended SubscriptionState = "Suspended"

	//
	// User is no longer subscribed to the application.
	// When a user clicks the "unsubscribe" link to unsubscribe from your non-prorated plan, eBay sends an
	// updateSubscriber call to your application with the the subscription end date in the note field. The
	// subscriptionStateChangeInfo.newState field may still be Active, but the user's status in in your Active
	// Subscribers list will be CancelledPending. If you want to cancel the user's subscription immediately, use
	// the control in the embedded applications tab in your My Account page as follows. In the embedded
	// applications tab, select Active Users, and search for the user. Pull down the Status selection list, select
	// Cancel Immediately, and then click Submit.
	//
	SubscriptionStateCancelled SubscriptionState = "Cancelled"

	//
	// One of the following has occurred: your application rejected the subscription after
	// receiving an addSubscriber call, or you have manually changed the subscription to the rejected state.
	//
	SubscriptionStateRejected SubscriptionState = "Rejected"

	//
	// When a user clicks the "unsubscribe" link to unsubscribe from your non-prorated plan, eBay sends an
	// updateSubscriber call to your application with the the subscription end date in the note field. The
	// subscriptionStateChangeInfo.newState field may still be Active, but the user's status in in your Active
	// Subscribers list will be CancelledPending. If you want to cancel the user's subscription immediately, use
	// the control in the embedded applications tab in your My Account page as follows. In the embedded
	// applications tab, select Active Users, and search for the user. Pull down the Status selection list, select
	// Cancel Immediately, and then click Submit.
	//
	SubscriptionStateCancelledPending SubscriptionState = "CancelledPending"

	//
	// The user's free trial period has elapsed.
	//
	SubscriptionStateExpired SubscriptionState = "Expired"
)

//
// Defines possible subscription plan lifecycle states.
//
type SubscriptionPlanState string

const (

	//
	// Plan has been created. With a plan in this state you can test how it displays in the
	// subscription flow, and subscribe to the plan without incurring charges. You can also
	// continue to make changes to the plan.
	//
	SubscriptionPlanStateStored SubscriptionPlanState = "Stored"

	//
	// A plan in this state has been submitted for approval and is being tested by
	// eBay. Plans in this state cannot be changed.
	//
	SubscriptionPlanStateSubmitted SubscriptionPlanState = "Submitted"

	//
	// Applies when eBay begins configuring the plan in the Managed Billing
	// Platform. If the Developers Program finds an error in the information
	// you provided or in the app, you are notified and the plan is placed in
	// a "change requested" state for you to edit. Please note:
	// When a plan is in a "non-active" state (stored, submitted for
	// configuration, pending, or change requested), the plan is treated as
	// private, meaning that only users specified in the Permission tag of the
	// deployment descriptor can view the plan. Plans in this state cannot be
	// changed.
	//
	SubscriptionPlanStatePending SubscriptionPlanState = "Pending"

	//
	// For future use.
	//
	SubscriptionPlanStateChangeRequested SubscriptionPlanState = "ChangeRequested"

	//
	// The plan is subscribable. The plan can remain hidden from the public in the
	// active state, during final verification.
	//
	SubscriptionPlanStateActive SubscriptionPlanState = "Active"
)

//
// Container for reasons for subscription states.
//
type SubscriptionReasonCode string

const (

	//
	// Subscription is pending an OEPI response. eBay has made
	// the corresponding OEPI call to your application's listener
	// but has not received a response, or has received a response with
	// a Pending status. Or eBay has not yet made the OEPI call.
	//
	SubscriptionReasonCodeEPIPending SubscriptionReasonCode = "EPIPending"

	//
	// Subscription is pending on eBay internal billing processing.
	//
	SubscriptionReasonCodeBillingPending SubscriptionReasonCode = "BillingPending"

	//
	// User has been billed, and a payment failure has occurred. The subscription
	// is still active. User will be suspended by eBay if the account balance is
	// greater than one dollar and more than 18 days have elapsed since the last
	// billing statement. eBay will cancel the subscription at 22 days after the
	// last billing statement.
	//
	SubscriptionReasonCodeAccountPastDue SubscriptionReasonCode = "AccountPastDue"

	//
	// Developer has suspended the subscription.
	//
	SubscriptionReasonCodeSuspendedByDeveloper SubscriptionReasonCode = "SuspendedByDeveloper"

	//
	// eBay has suspended the subscription, possibly because of a payment failure
	// and an account past due. User can not use the application until the
	// subscription state returns to Active. After the user brings the account
	// current, the subscription's transition back to the Active state takes about
	// five minutes.
	//
	SubscriptionReasonCodeSuspendedByEbay SubscriptionReasonCode = "SuspendedByEbay"

	//
	// Following the suspension of a past due subscription, if the account remains
	// unpaid, eBay will put the subscription in the AccountNotPaidInTime state and
	// cancel the the subscription.
	//
	SubscriptionReasonCodeAccountNotPaidInTime SubscriptionReasonCode = "AccountNotPaidInTime"

	//
	// Account has been cancelled by developer.
	//
	SubscriptionReasonCodeCancelledByDeveloper SubscriptionReasonCode = "CancelledByDeveloper"

	//
	// User has cancelled the subscription. If this occurs during the free trial
	// period, the subscription is cancelled immediately. If the user requests
	// immediate cancellation from a paid subscription, see Cancel Immediately in
	// the Managed Billing Platform Guide for steps you should take.
	//
	SubscriptionReasonCodeCancelledBySubscriber SubscriptionReasonCode = "CancelledBySubscriber"

	//
	// eBay has cancelled the subscription, possibly because the account remained
	// unpaid for 22 days following a billing statement.
	//
	SubscriptionReasonCodeCancelledByEbay SubscriptionReasonCode = "CancelledByEbay"

	//
	// Developer has declined to accept the subscription.
	//
	SubscriptionReasonCodeRejectedByDeveloper SubscriptionReasonCode = "RejectedByDeveloper"

	//
	// eBay has declined to accept the subscription.
	//
	SubscriptionReasonCodeRejectedByEbay SubscriptionReasonCode = "RejectedByEbay"
)

//
// Contains information about a subscriber's eligibility for a free trial.
//
type SubscriptionPropertyCode string

const (

	//
	// The subscription is not eligible for a free trial, probably because the
	// user has previously subscribed to a free trial.
	//
	SubscriptionPropertyCodeNotEligibleForFreeTrial SubscriptionPropertyCode = "NotEligibleForFreeTrial"

	//
	// The subscription is ineligible for a free trial because the user's token
	// has been revoked.
	//
	SubscriptionPropertyCodeAuthTokenRevoked SubscriptionPropertyCode = "AuthTokenRevoked"
)

//
// For recurring charges, defines the unit of time for which a user is charged.
//
type SubscriptionChargeTermUnit string

const (

	//
	// Charge recurs daily. Only applies to a free trial.
	//
	SubscriptionChargeTermUnitDay SubscriptionChargeTermUnit = "Day"

	//
	// Charge recurs monthly.
	//
	SubscriptionChargeTermUnitMonth SubscriptionChargeTermUnit = "Month"

	//
	// Charge recurs weekly.
	//
	SubscriptionChargeTermUnitWeek SubscriptionChargeTermUnit = "Week"

	//
	// Charge recurs quarterly.
	//
	SubscriptionChargeTermUnitQuarter SubscriptionChargeTermUnit = "Quarter"

	//
	// Charge is annual.
	//
	SubscriptionChargeTermUnitYear SubscriptionChargeTermUnit = "Year"
)

//
// Container for attributes that identify the amounts in a billing record.
//
type RecordAmountType string

const (

	//
	// When RecordAmount has this attribute, amount represents the amount charged in
	// the biller's currency.
	//
	RecordAmountTypeRated RecordAmountType = "Rated"

	//
	// When RecordAmount has this attribute, amount represents the amount charged in
	// the subscriber's currency.
	//
	RecordAmountTypeBilled RecordAmountType = "Billed"

	//
	// When RecordAmount has this attribute, amount represents the amount of a
	// discount applied to the charges in the billing record, to two or fewer
	// digits after the decimal point, in the billing currency.
	//
	RecordAmountTypeDiscount RecordAmountType = "Discount"

	//
	// When RecordAmount has this attribute, amount represents the amount of the
	// tax to two or fewer digits after the decimal point, in the billing
	// currency.
	//
	RecordAmountTypeTax RecordAmountType = "Tax"

	//
	// When RecordAmount has this attribute, the amount represents the amount
	// credited to the subscriber in a statement, in the subscriber's currency.
	//
	RecordAmountTypeCredited RecordAmountType = "Credited"

	//
	// When RecordAmount has this attribute, the amount represents the payment amount
	// in the subscriber's currency.
	//
	RecordAmountTypePayment RecordAmountType = "Payment"

	//
	// Monetary amount of the charge, in the subscriber's currency.
	//
	RecordAmountTypeAmount RecordAmountType = "Amount"

	//
	// When RecordAmount has this attribute, the amount represents the value of
	// new charges, in the subscriber's currency.
	//
	RecordAmountTypeNewCharges RecordAmountType = "NewCharges"
)

//
// Container for attributes that identify the time values in a billing record.
//
type RecordTimeType string

const (

	//
	// When RecordTime has this attribute, the time specified represents the
	// statement date.
	//
	RecordTimeTypeStatement RecordTimeType = "Statement"

	//
	// When RecordTime has this attribute, the time specified is the timestamp
	// of the transaction.
	//
	RecordTimeTypeTransaction RecordTimeType = "Transaction"

	//
	// When RecordTime has this attribute, the time specified is the timestamp
	// of the statement creation.
	//
	RecordTimeTypeCreation RecordTimeType = "Creation"

	//
	// When RecordTime has this attribute, the time specified is the
	// beginning of the time range for which the subscriber is being charged.
	//
	RecordTimeTypeFrom RecordTimeType = "From"

	//
	// When RecordTime has this attribute, the time specified is the
	// end of the time range for which the subscriber is being charged.
	//
	RecordTimeTypeTo RecordTimeType = "To"

	//
	// When RecordTime has this attribute, the time specified is the timestamp
	// of the transaction.
	//
	RecordTimeTypeOriginalTransaction RecordTimeType = "OriginalTransaction"
)

//
// Container for types of credits that can be contained in credit records.
//
type CreditRecordType string

const (

	//
	// Indicates that the credit record represents a refund of charges that the
	// user has paid after cancellation date. This might apply, for example, to a
	// user who is subscribed to a plan that is prorated, who has been billed in
	// advance for a month and who unsubscribes before the end of that month.
	// Credits can be added manually or system-generated upon subscription
	// cancellation.
	//
	CreditRecordTypeCreditSubscriptionCharge CreditRecordType = "CreditSubscriptionCharge"

	//
	// Indicates that the credit record represents a credit so a subscriber for a one-time
	// subscription fee or setup fee.
	//
	CreditRecordTypeCreditOneTimeCharge CreditRecordType = "CreditOneTimeCharge"

	//
	// Indicates that the credit record represents a credit to a subscriber for a usage charge.
	//
	CreditRecordTypeCreditUsageCharge CreditRecordType = "CreditUsageCharge"

	//
	// Indicates that the billing record represents an account-level credit
	// statement for the user.
	//
	CreditRecordTypeCreditStatement CreditRecordType = "CreditStatement"
)

//
// Indicates whether the error is a severe error (causing the request to fail)
// or an informational error (a warning) that should be communicated to the
// user.
//
type AckValue string

const (

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user.
	//
	AckValueSuccess AckValue = "Success"

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was processed successfully but with some warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// The request that triggered the error was processed successfully but with some warnings.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

//
// Indicates whether the error is a severe error (causing the request to fail)
// or an informational error (a warning) that should be communicated to the
// user.
//
type ErrorSeverity string

const (

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user. For example, eBay may have changed a
	// value the user sent in. In this case, eBay returns a normal, successful
	// response and also returns the warning.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

//
// There are three categories of error: request errors, application errors,
// and system errors. Request and application errors are caused primarily by
// invalid data passed in the request. System errors are caused primarily by
// application failures and cannot be corrected by changing request values.
//
type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side, such as a
	// database or server down. An application can retry the request as-is a
	// reasonable number of times (eBay recommends twice). If the error
	// persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, such as missing or
	// invalid fields. The problem must be corrected before the request can be
	// made again. If the problem is due to something in the application (such
	// as a missing required field), the application must be changed. Once the
	// problem in the appilcation or data is resolved, resend the corrected
	// request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, such as invalid or
	// missing data. The problem must be corrected before the request can be
	// made again. If the problem is a result of end-user data, the application
	// must alert the end-user to the problem and provide the means for the
	// end-user to correct the data. Once the problem in the data is resolved,
	// resend the request to eBay with the corrected data.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

//
// This type is used to represent a combination of site and Locale. Locales are combination of language and territory.
// Some territories have a default language. Others can have more than one language and there might not be a default one.
// Example:	EBAY-US   indicates language English in territory U.S.
// EBAY-ENCA indicates language en_US in territory Canada.
// EBAY-FRCA indicates language en_FR in territory Canada.
// Accepted values are use case specific.
// The syntax is: ebay_properties '-' site ('_' variant)?
// where ? emans optional. Example for ebay_properties are: EBAY, AC, SDC, PP etc
// site is not just limited to country language.  We actually have MOTOR.
// The only use of variant for now is OLD for depreciated sites.
//
type GlobalId string

type AddUsageRequest AddUsageRequest

type AddUsageResponse AddUsageResponse

type GetBillingStatementsRequest GetBillingStatementsRequest

type GetBillingStatementsResponse GetBillingStatementsResponse

type GetBillingRecordsRequest GetBillingRecordsRequest

type GetBillingRecordsResponse GetBillingRecordsResponse

type GetBillingStatementImageRequest GetBillingStatementImageRequest

type GetBillingStatementImageResponse GetBillingStatementImageResponse

type SetBillingStartDateRequest SetBillingStartDateRequest

type SetBillingStartDateResponse SetBillingStartDateResponse

type SetSubscriptionStateRequest SetSubscriptionStateRequest

type SetSubscriptionStateResponse SetSubscriptionStateResponse

type GetSubscriptionPlansRequest GetSubscriptionPlansRequest

type GetSubscriptionPlansResponse GetSubscriptionPlansResponse

type GetSubscribersRequest GetSubscribersRequest

type GetSubscribersResponse GetSubscribersResponse

type GetVersionRequest GetVersionRequest

type GetVersionResponse GetVersionResponse

type AddCreditRequest AddCreditRequest

type AddCreditResponse AddCreditResponse

type AddRefundRequest AddRefundRequest

type AddRefundResponse AddRefundResponse

type GetRefundStatusRequest GetRefundStatusRequest

type GetRefundStatusResponse GetRefundStatusResponse

type GetVersionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getVersionRequest"`

	*BaseRequest
}

type GetVersionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getVersionResponse"`

	*BaseResponse
}

type StatementImage struct {

	//
	// Contains the image of a billing statement. The image is base64-encoded and usually compressed.
	//
	ImageData []byte `xml:"imageData,omitempty"`

	//
	// The format of the statement image after your application has decompressed it and then
	// decoded it from the base64 format.
	//
	ImageFormat *ImageFormat `xml:"imageFormat,omitempty"`

	//
	// The type of compression, generally the gzip type of compression.
	// The data for the billing statement usually is returned as gzip-compressed.
	//
	ImageCompressionType *ImageCompressionType `xml:"imageCompressionType,omitempty"`
}

type BillingStatement struct {

	//
	// Unique identifier for a billing statement, created at statement-time.
	//
	StatementId string `xml:"statementId,omitempty"`

	//
	// Time a statement was generated. Subscribers see the date only.
	//
	StatementTime time.Time `xml:"statementTime,omitempty"`

	//
	// Time at which full payment was made.
	// Note that a payment reversal can reopen a statement.
	//
	ClosedTime time.Time `xml:"closedTime,omitempty"`

	//
	// Previous statement balance, plus new charges (RC, NRC, Usage, Prebill Usage
	// Adjustments, Discounts, Unit Credits and Taxes) and payments.
	// This value doesn't change after statement creation.
	//
	StatementTotal *Amount `xml:"statementTotal,omitempty"`

	//
	// Net adjustments (credits) applied to this statement.
	// Varies, depending on credits applied.
	// These are post-bill adjustments only.
	// Changes such as payments or adjustments are made against statements.
	//
	AdjustmentTotal *Amount `xml:"adjustmentTotal,omitempty"`

	//
	// Total payments already applied to the statement.
	//
	PaymentTotal *Amount `xml:"paymentTotal,omitempty"`

	//
	// Total new charges (combination of postitive and negative charges). The newChargeTotal
	// minus the adjustmentTotal lets you know the available balance to credit for the
	// statement. This value doesn't change after statement creation.
	//
	NewChargeTotal *Amount `xml:"newChargeTotal,omitempty"`

	//
	// Total new negative charges for a statement. Includes pre-billed adjustments. Not
	// changed after statement creation.
	//
	NewCreditTotal *Amount `xml:"newCreditTotal,omitempty"`

	//
	// Sum of the new charges, plus adjustments, plus payments.
	//
	BalanceDue *Amount `xml:"balanceDue,omitempty"`
}

type Usage struct {

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription and the plan ID.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// Reserved for future use.
	//
	UserName string `xml:"userName,omitempty"`

	//
	// The transaction date assigned to the transaction by the application.
	//
	ChargeTime time.Time `xml:"chargeTime,omitempty"`

	//
	// The transaction reference number assigned by the third party developer.
	//
	ExternalChargeId string `xml:"externalChargeId,omitempty"`

	//
	// Memo that will be visible on the subscriber statement.
	//
	Memo string `xml:"memo,omitempty"`

	//
	// Amount that eBay will display, as a charge, to the subscriber, on behalf of your
	// application. The charge amount must have two or fewer digits after the decimal
	// point and 12 or fewer digits before the decimal point.
	//
	ChargeAmount *Amount `xml:"chargeAmount,omitempty"`

	//
	// Identifier of the charge.
	//
	ChargeType *SubscriptionChargeType `xml:"chargeType,omitempty"`

	//
	// Set to true when you require immediate payment for the charge type.
	// Not available if the subscription is cancelled.
	//
	ImmediatePayment bool `xml:"immediatePayment,omitempty"`
}

type AddUsageRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services addUsageRequest"`

	*BaseRequest

	//
	// Container for information about the charge for which the subscriber will be billed.
	//
	Usage *Usage `xml:"usage,omitempty"`
}

type AddUsageResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services addUsageResponse"`

	*BaseResponse

	//
	// An ID assigned to the transaction.
	// Store this for reference, because this value is displayed
	// on the user's statement.
	//
	ChargeId int64 `xml:"chargeId,omitempty"`
}

type GetBillingStatementsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getBillingStatementsRequest"`

	*BaseRequest

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`
}

type GetBillingStatementsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getBillingStatementsResponse"`

	*BaseResponse

	//
	// Billing statement details.
	//
	Statement []*BillingStatement `xml:"statement,omitempty"`
}

type GetBillingRecordsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getBillingRecordsRequest"`

	*BaseRequest

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// Specifies whether the record is a one-time charge, a statement, a
	// subscription charge, or a usage charge.
	//
	RecordType *BillingRecordType `xml:"recordType,omitempty"`

	//
	// Unique identifier for a billing statement, created by eBay at statement time. Obtain this value from
	// the response to the getBillingStatements request.
	//
	StatementId string `xml:"statementId,omitempty"`

	//
	// Requested time range for records.
	//
	RecordTimeRange *TimeRange `xml:"recordTimeRange,omitempty"`
}

type GetBillingRecordsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getBillingRecordsResponse"`

	*BaseResponse

	//
	// Transaction record for a billing account.
	//
	Record []*BillingRecord `xml:"record,omitempty"`
}

type SetBillingStartDateRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services setBillingStartDateRequest"`

	*BaseRequest

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// Date from which a subscription begins to incur subscription charges.
	//
	BillingStartDate time.Time `xml:"billingStartDate,omitempty"`
}

type SetBillingStartDateResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services setBillingStartDateResponse"`

	*BaseResponse
}

type SetSubscriptionStateRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services setSubscriptionStateRequest"`

	*BaseRequest

	//
	// For a particular application, the subscriptionId uniquely identifies a
	// user's subscription and billing plan.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// The new state of the user's subscription.
	//
	SubscriptionState *SubscriptionState `xml:"subscriptionState,omitempty"`

	//
	// Reason for the change in the subscription state of the user.
	//
	Note string `xml:"note,omitempty"`

	//
	// Whether the subscription should immediately be cancelled.
	// For more information on cancelling a subscription,
	// see the Managed Billing Platform Guide.
	// Only can apply if the subscription state is set to
	// cancelled and the plan is non-prorated-at-end.
	//
	ImmediateCancellation bool `xml:"immediateCancellation,omitempty"`
}

type SetSubscriptionStateResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services setSubscriptionStateResponse"`

	*BaseResponse
}

type GetSubscriptionPlansRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getSubscriptionPlansRequest"`

	*BaseRequest

	//
	// Filters response by specifying the state of plans to be returned.
	//
	PlanState *SubscriptionPlanState `xml:"planState,omitempty"`
}

type GetSubscriptionPlansResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getSubscriptionPlansResponse"`

	*BaseResponse

	//
	// Information about a subscription plan.
	//
	SubscriptionPlan []*SubscriptionPlan `xml:"subscriptionPlan,omitempty"`
}

type GetSubscribersRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getSubscribersRequest"`

	*BaseRequest

	//
	// The eBay user ID of the subscriber. If the output selector
	// is SubscriptionHistory, then this field is required.
	//
	UserName string `xml:"userName,omitempty"`

	//
	// Specifies the subscription state of the subscribers to be returned.
	//
	SubscriptionState *SubscriptionState `xml:"subscriptionState,omitempty"`

	//
	// Specifies the start of a time range for filtering the subscribers to be returned.
	//
	SubscriptionStartTimeRange *TimeRange `xml:"subscriptionStartTimeRange,omitempty"`

	//
	// Specifies the end of a time range for filtering the subscribers to be returned.
	//
	SubscriptionEndTimeRange *TimeRange `xml:"subscriptionEndTimeRange,omitempty"`

	//
	// Specify a value of SubscriberCount in this field if you want to get a count of subscribers.
	// Specify a value of SubscriptionHistory in this field if you want to get subscribers's history.
	// If you specify a value of SubscriptionHistory, you must specify the user name(s) in the request.
	//
	OutputSelector *SubscriberOutputSelector `xml:"outputSelector,omitempty"`

	//
	// Controls the pagination of the result set.
	//
	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`
}

type GetSubscribersResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getSubscribersResponse"`

	*BaseResponse

	//
	// Not returned if the output selector is set to SubscriptionHistory.
	//
	SubscriberCount int32 `xml:"subscriberCount,omitempty"`

	//
	// Information about the subscriber and subscription history.
	//
	Subscriber []*Subscriber `xml:"subscriber,omitempty"`

	//
	// The page number of the response data, the number of entries, etc.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`
}

type Subscriber struct {

	//
	// The user ID of the eBay member.
	//
	UserName string `xml:"userName,omitempty"`

	//
	// Details about the subscription.
	//
	Subscription *Subscription `xml:"subscription,omitempty"`

	//
	// Details about the subscription history.
	//
	SubscriptionHistory *SubscriptionHistory `xml:"subscriptionHistory,omitempty"`
}

type SubscriptionHistory struct {

	//
	// Information about one of the subscriptions in the subscriber's history
	// with the application.
	//
	Subscription []*Subscription `xml:"subscription,omitempty"`
}

type SubscriptionPlan struct {

	//
	// ID assigned to the subscription plan by eBay.
	//
	PlanId int64 `xml:"planId,omitempty"`

	//
	// A developer-assigned value identifying the plan.
	// Also passed in the externalPlanID
	// field of the addSubscriber call.
	//
	ExternalPlanId string `xml:"externalPlanId,omitempty"`

	//
	// Defined in the billing plan, the planName accompanies the application name in statements
	// sent to subscribers.
	//
	PlanName string `xml:"planName,omitempty"`

	//
	// Corresponds to the site ID. For example, EBAY-US.
	//
	GlobalId *GlobalId `xml:"globalId,omitempty"`

	//
	// Specifies whether the plan is free to subscribers, or must be paid for.
	//
	Billable bool `xml:"billable,omitempty"`

	//
	// If true, the plan is visible to all users,
	// on the condition that the start date is in the past
	// (because users never see a plan with a start date that is in the future).
	// If false, visible only to you and eBay administrators.
	//
	Visible bool `xml:"visible,omitempty"`

	//
	// Information about the version
	// that eBay assigned to a subscription plan.
	//
	PlanVersion []*SubscriptionPlanVersion `xml:"planVersion,omitempty"`
}

type Subscription struct {

	//
	// Identifies a user's subscription to a billing plan offered by an Open
	// eBay app.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// Identifies the plan to which the user is subscribed.
	//
	PlanId int64 `xml:"planId,omitempty"`

	//
	// A developer-assigned Plan ID that will be passed in the externalID
	// field of the addSubscriber call to notify you of a new subscription.
	//
	ExternalPlanId string `xml:"externalPlanId,omitempty"`

	//
	// Identifies the state of the subscription.
	//
	SubscriptionState *SubscriptionState `xml:"subscriptionState,omitempty"`

	//
	// The reason for the subscription state.
	//
	ReasonCode *SubscriptionReasonCode `xml:"reasonCode,omitempty"`

	//
	// Information about a subscriber's eligibility for a free trial.
	//
	Property []*SubscriptionPropertyCode `xml:"property,omitempty"`

	//
	// The date when the user subscribed to the plan, e.g. the start of the free trial.
	//
	SubscriptionStartTime time.Time `xml:"subscriptionStartTime,omitempty"`

	//
	// End date of the user's subscription.
	// Specifically, the endDate is the date on which the subscription actually ends.
	// That is, for a prorated-at-end plan, it is the date when the user unsubscribed.
	// (For prorated-at-end plans, the cancel and end dates are the same.)
	// For a nonprorated-at-end plan, it is the date of the term end.
	//
	SubscriptionEndTime time.Time `xml:"subscriptionEndTime,omitempty"`

	//
	// Start date of the user's term for purposes of billing.
	//
	BillingStartDate time.Time `xml:"billingStartDate,omitempty"`

	//
	// The date when the user submitted a cancel request
	//
	SubscriptionCancelRequestTime time.Time `xml:"subscriptionCancelRequestTime,omitempty"`

	//
	// Reserved for future use.
	//
	Note string `xml:"note,omitempty"`
}

type SubscriptionPlanVersion struct {

	//
	// The ID of the entire version of the plan, at the plan level.
	//
	PlanVersionId int64 `xml:"planVersionId,omitempty"`

	//
	// The version number of the plan.
	// When the third-party developer submits updates to the plan,
	// eBay increments the version of the plan.
	//
	PlanVersion int32 `xml:"planVersion,omitempty"`

	//
	// Information about the plan that is displayed
	// to potential subscribers in the subscription flow.
	//
	PlanDescription string `xml:"planDescription,omitempty"`

	//
	// State of the plan, e.g. Active.
	//
	PlanState *SubscriptionPlanState `xml:"planState,omitempty"`

	//
	// Start time of the plan version.
	//
	PlanVersionStartTime time.Time `xml:"planVersionStartTime,omitempty"`

	//
	// End time of the plan version.
	//
	PlanVersionEndTime time.Time `xml:"planVersionEndTime,omitempty"`

	//
	// Details about this version of the plan.
	//
	PlanVersionDetail []*SubscriptionPlanVersionDetail `xml:"planVersionDetail,omitempty"`
}

type SubscriptionPlanVersionDetail struct {

	//
	// ID for the charge type (there is a charge type of each version of the plan).
	//
	PlanVersionDetailId int64 `xml:"planVersionDetailId,omitempty"`

	//
	// The type of charge the plan utilizes. Examples: recurring fee, usage fee, and
	// non-recurring setup fee.
	//
	ChargeType *SubscriptionChargeType `xml:"chargeType,omitempty"`

	//
	// Length of the term in charge term units (specifically, see the chargeTermUnit field).
	// For example, if the term unit is month, the chargeTerm value is the
	// number of months.
	// Note that if the plan is a free trial, this field is the number of days.
	//
	ChargeTerm int32 `xml:"chargeTerm,omitempty"`

	//
	// The term unit. Multiply the chargeTerm value by the chargeTermUnit value
	// to arrive at the length of the plan version, as set by the third party developer.
	//
	ChargeTermUnit *SubscriptionChargeTermUnit `xml:"chargeTermUnit,omitempty"`

	//
	// The amount of money charged for the plan, as set by the third party developer,
	// based on the charge type.
	//
	ChargeAmount float64 `xml:"chargeAmount,omitempty"`

	//
	// Additional plan information that is displayed on the page
	// where a user views plans, under "Usage Fee."
	// The value in the extendedDescription field is only applicable
	// when information was added with the addUsage call.
	//
	ExtendedDescription string `xml:"extendedDescription,omitempty"`

	//
	// Applied with addUsage, for the charge type.
	//
	UsageBilled bool `xml:"usageBilled,omitempty"`
}

type RecordAmount struct {
	Value *Amount

	//
	// The type of amount value of a record.
	//
	Type *RecordAmountType `xml:"type,attr,omitempty"`
}

type RecordTime struct {
	Value time.Time

	//
	// The type of time value of a record.
	//
	Type *RecordTimeType `xml:"type,attr,omitempty"`
}

type BillingRecord struct {

	//
	// A unique identifier for each combination of an application and a subscriber.
	// Used for billing-related calls (getBillingStatements, getBillingRecords).
	// Also known as EID.
	//
	BillingAccountId string `xml:"billingAccountId,omitempty"`

	//
	// Specifies the type of record.
	// The possible types are one-time charge, statement, subscription
	// charge, and usage charge.
	// In the case of each record type, the values
	// of other fields, such as taxAmount and recordTime, are
	// appropriate to the record type. For example, if the recordType is
	// usage charge, then recordTime represents the transaction date. If
	// recordType is statement, recordTime represents the time of the
	// statement's creation.
	//
	RecordType *BillingRecordType `xml:"recordType,omitempty"`

	//
	// Unique identifier for the record, assigned by eBay. Contains state and location
	// information about the record. An example of a recordId: 1111:222:333:444:x.
	// Retrieve a recordID using getBillingRecords.
	//
	RecordId string `xml:"recordId,omitempty"`

	//
	// For this record, specifies whether the fee appeared on the user's statement
	// (i.e., whether it's been billed).
	//
	Billed bool `xml:"billed,omitempty"`

	//
	// Unique identifier for a billing statement, created at statement-time.
	//
	StatementId string `xml:"statementId,omitempty"`

	//
	// The recordType determines what this value signifies.
	// <br><br>
	// If recordType is SubscriptionCharge, recordTime represents the transaction date.
	// <br><br>
	// If recordType is OneTimeCharge, recordTime represents the time of the transaction.
	// <br><br>
	// If recordType is UsageCharge, recordTime represents the time of the transaction.
	// <br><br>
	// If recordType is Statement, recordTime represents the statement date.
	//
	RecordTime []*RecordTime `xml:"recordTime,omitempty"`

	//
	// The recordType determines what this value signifies.
	// <br><br>
	// If recordType is SubscriptionCharge, amount represents the total amount due for the
	// subscription to two or fewer digits after the decimal point in the subscriber's currency.
	// <br><br>
	// If recordType is OneTimeCharge, amount represents the amount of the charge to
	// two or fewer digits after the decimal	point in the subscriber's currency.
	// <br><br>
	// If recordType is UsageCharge, amount represents the total of the usage charge to
	// two or fewer digits after the decimal point in the subscriber's currency.
	// <br><br>
	// If recordType is Statement, amount represents the amount available to credit at
	// the time of the statement, to two or fewer digits after the decimal
	// point, in the subscriber's currency.
	//
	RecordAmount []*RecordAmount `xml:"recordAmount,omitempty"`

	//
	// The recordType determines what this value signifies.
	// <br><br>
	// If recordType is SubscriptionCharge, recordDescription contains a text
	// description of the subscription.
	// <br><br>
	// If recordType is OneTimeCharge, recordDescription contains a text
	// description of the charge.
	// <br><br>
	// If recordType is UsageCharge, recordDescription contains a text
	// description of the usage.
	// <br><br>
	// If recordType is Statement, recordDescription contains a text description
	// of the statement.
	//
	RecordDescription string `xml:"recordDescription,omitempty"`

	//
	// Allows additional description for the record.
	//
	RecordAdditionalDescription string `xml:"recordAdditionalDescription,omitempty"`

	//
	// True if the transaction can be credited.
	// Only applicable to one-time charges and setup fees.
	//
	Adjustable bool `xml:"adjustable,omitempty"`
}

type GetBillingStatementImageRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getBillingStatementImageRequest"`

	*BaseRequest

	//
	// Unique identifier for a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// Unique identifier for a billing statement.
	// You can obtain this value using
	// the getBillingStatements call.
	//
	StatementId string `xml:"statementId,omitempty"`
}

type GetBillingStatementImageResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getBillingStatementImageResponse"`

	*BaseResponse

	//
	// The image of a billing statement.
	// The image is base64-encoded.
	// The image is of a single billing statement of a user
	// who is subscribed to your application.
	// Your application must uncompress the base64 data and then convert
	// the base64 data into text format. The end-result will be a text
	// file containing the HTML for the billing statement you specified in the request.
	//
	StatementImage *StatementImage `xml:"statementImage,omitempty"`

	//
	// This message about the billing statement image is returned only if
	// a problem has occurred in the retrieval of the billing statement image.
	// The following problems can prevent an image from being returned:
	// The image may not be available, or the image may be too large.
	// If image is too large, only the first page will be returned (or, in some cases,
	// no pages will be returned).
	//
	StatementImageMessage string `xml:"statementImageMessage,omitempty"`
}

type AddCreditRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services addCreditRequest"`

	*BaseRequest

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// Possible values are CreditSubscriptionCharge,CreditOneTimeCharge,CreditUsageCharge and
	// CreditStatement.
	//
	CreditRecordType *CreditRecordType `xml:"creditRecordType,omitempty"`

	//
	// Unique identifier for the record, assigned by eBay. Contains state and location
	// information about the record. An example of a recordId: 1111:222:333:444:x.
	// Returned in the getBillingRecords response.
	//
	TransactionId string `xml:"transactionId,omitempty"`

	//
	// The statement date is applicable only for the CreditSubscriptionCharge creditRecordType.
	//
	StatementDate time.Time `xml:"statementDate,omitempty"`

	//
	// Specifies the amount you want to credit. The amount credited may differ, for example
	// if a partial credit has already been applied.
	//
	CreditAmount *Amount `xml:"creditAmount,omitempty"`

	//
	// Explains why the credit has been applied to the subscriber's account.Possible values:
	// <br><br>
	// 100 - Courtesy
	// <br><br>
	// 101 - Non-payment
	// <br><br>
	// 102 - Test account
	// <br><br>
	// 103 - Bugs
	// <br><br>
	// 104 - Pricing issue
	// <br><br>
	// 105 - Site outage: eBay site outage
	// <br><br>
	// 106 - Site outage: app site outage
	// <br><br>
	// 107 - Promo: general
	//
	CreditReason string `xml:"creditReason,omitempty"`

	//
	// Date on which the credit is requested.
	//
	CreditDate time.Time `xml:"creditDate,omitempty"`

	//
	// The eBay user ID of the subscriber.
	//
	SubmitterName string `xml:"submitterName,omitempty"`

	//
	// A description of the credit applied to the subscriber's account,
	// which will appear in the user's View Account Status.
	//
	CreditDescription string `xml:"creditDescription,omitempty"`

	//
	// Identifier for the request, assigned by the app. The app should supply
	// a unique externalCreditId for each request.
	//
	ExternalCreditId string `xml:"externalCreditId,omitempty"`
}

type AddCreditResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services addCreditResponse"`

	*BaseResponse

	//
	// Unique identifier assigned to the credit request by eBay.
	//
	CreditId int64 `xml:"creditId,omitempty"`

	//
	// Actual amount credited. This value might be equal or less than the original amount.
	//
	CreditedAmount *Amount `xml:"creditedAmount,omitempty"`
}

type AddRefundRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services addRefundRequest"`

	*BaseRequest

	//
	// For a particular application, the subscription ID
	// uniquely identifies a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// Specify the transactionId value as the value
	// that was returned in the record.recordId field of the getBillingRecords call,
	// if the getBillingRecords call returned the
	// the recordType value as Payment.
	//
	TransactionId string `xml:"transactionId,omitempty"`

	//
	// Amount, in the billing currency, of the refund requested for the subscriber's account.
	//
	RefundAmount *Amount `xml:"refundAmount,omitempty"`

	//
	// The refund date, provided by the third-party developer. Analogous to the
	// usage.chargeTime value provided by the third-party developer in the addUsage call.
	//
	RefundTime time.Time `xml:"refundTime,omitempty"`

	//
	// A name for the subscriber that is identifiable by the third-party developer.
	//
	SubmitterName string `xml:"submitterName,omitempty"`

	//
	// Text to display to the subscriber, about the refund.
	//
	RefundDescription string `xml:"refundDescription,omitempty"`

	//
	// A reference number provided by the third-party developer. Helps
	// to prevent duplicate requests. Analogous to the
	// usage.externalChargeId value provided by the third-party developer in the addUsage call.
	//
	ExternalRefundId string `xml:"externalRefundId,omitempty"`
}

type AddRefundResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services addRefundResponse"`

	*BaseResponse

	//
	// Unique identifier assigned to the refund request.
	//
	RefundId int64 `xml:"refundId,omitempty"`

	//
	// Amount of the refund request.
	//
	RefundedAmount *Amount `xml:"refundedAmount,omitempty"`
}

type GetRefundStatusRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getRefundStatusRequest"`

	*BaseRequest

	//
	// The time range for the retrieval of records.
	// If no time range is specified, the last six months of data is returned.
	//
	RecordTimeRange *TimeRange `xml:"recordTimeRange,omitempty"`

	//
	// For a particular application, the subscription ID
	// uniquely identifies a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// The refundId value that is returned in the addRefund response.
	//
	TransactionId string `xml:"transactionId,omitempty"`
}

type GetRefundStatusResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/openebay/v1/services getRefundStatusResponse"`

	*BaseResponse

	//
	// Container for information about a refund.
	//
	RefundStatusInfo []*RefundStatusInfo `xml:"refundStatusInfo,omitempty"`
}

type RefundStatusInfo struct {

	//
	// This refund status is one of the following:
	// Submitted, Pending, Processed, or Failed.
	//
	RefundStatus string `xml:"refundStatus,omitempty"`

	//
	// An error code that applies to the refund.
	// The error code can be 2509 (refund rejected),
	// 2510 (refund amount is greater than any of the payments), or
	// 2511 (timeout error).
	//
	ErrorCode string `xml:"errorCode,omitempty"`

	//
	// This value is either "S" (for "service") or B (for "batch").
	// "Service" means initiated by a third-party developer, or initiated manually.
	// "Batch" applies in other cases, e.g. if a subscription was cancelled, and
	// as a result, a refund was made.
	//
	SubmitterType string `xml:"submitterType,omitempty"`

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription.
	//
	SubscriptionId int64 `xml:"subscriptionId,omitempty"`

	//
	// The refund ID that is returned in the
	// addRefund response.
	//
	TransactionId string `xml:"transactionId,omitempty"`

	//
	// Amount of the refund for the transaction.
	//
	RefundedAmount *Amount `xml:"refundedAmount,omitempty"`

	//
	// Date of the refund request.
	//
	RefundRequestedDate time.Time `xml:"refundRequestedDate,omitempty"`
}

type Amount struct {
	Value float64

	//
	// Currency in which the monetary amount is specified. A three-letter ID, such as
	// USD, CAD, DEM. Currently, USD is the only available value.
	//
	CurrencyId string `xml:"currencyId,attr,omitempty"`
}

type TimeRange struct {

	//
	// Specifies the earliest (oldest) date to be used in a date range.
	//
	TimeFrom time.Time `xml:"timeFrom,omitempty"`

	//
	// Specifies the latest (most recent) date to be used in a date range.
	//
	TimeTo time.Time `xml:"timeTo,omitempty"`
}

type BaseRequest struct {
	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type BaseResponse struct {

	//
	// Indicates whether or not errors or warnings were generated during the
	// processing of the request.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that
	// occurred when eBay processed the request.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The release version that eBay used to process the request. Developer
	// Technical Support may ask you for the version value if you work with them
	// to troubleshoot issues.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The version in use is normally the latest release version, as specified
	// in the release notes.
	// </span>
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the request.
	// This value is returned in GMT, the ISO 8601 date and time format (YYYY-
	// MM- DDTHH:MM:SS.SSSZ). See the "dateTime" type for information about the
	// time format, and for details on converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`

	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type ExtensionType struct {
	Id *PositiveInteger `xml:"id,omitempty"`

	Version string `xml:"version,omitempty"`

	ContentType string `xml:"contentType,omitempty"`

	Value string `xml:"value,omitempty"`
}

type ErrorMessage struct {

	//
	// ActivityProfile about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorData struct {

	//
	// A unique code that identifies the particular error condition that occurred.
	// Your application can use error codes as identifiers in your customized
	// error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain upon which the error occurred.
	// <dl>
	// <lh>Domains include:</lh>
	// <dt>
	// Marketplace
	// </dt>
	// <dd>
	// A business or validation error occurred for the UserProfile Service.
	// </dd>
	// <dt>
	// SOA
	// </dt>
	// <dd>
	// An exception occurred in the Service Oriented Architecture (SOA) framework.
	// </dd>
	// </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Indicates whether the error caused the request to fail (Error) or not
	// (Warning).
	// <br><br>
	// If the request fails and the source of the problem is within the application
	// (such as a missing required element), please change the application before you
	// retry the request. If the problem is due to end-user input data, please alert
	// the end-user to the problem and provide the means for them to correct the data.
	// Once the problem in the application or data is resolved, you can attempt to re-
	// send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request as-is
	// a reasonable number of times (eBay recommends twice). If the error persists,
	// contact Developer Technical Support. Once the problem has been resolved, the
	// request may be resent in its original form.
	// <br><br>
	// When a warning occurs, the error is returned in addition to the business data.
	// In this case, you do not need to retry the request (as the original request was
	// successful). However, depending on the cause or nature of the warning, you
	// might need to contact either the end user or eBay to effect a long term
	// solution to the problem to prevent it from reoccurring in the future.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application errors, and
	// system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that resulted in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Name of the subdomain upon which the error occurred. Subdomains include the
	// following: UserProfile (in which the error is specific to the UserProfile
	// service) and MarketplaceCommon (in which the error is common to all
	// Marketplace
	// services).
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Some warning and error messages return one or more variables that contain
	// contextual information about the error. This is often the field or value that
	// triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorParameter struct {
	Value string

	//
	// The name of the parameter in the list of parameter types returned
	// within the error type.
	//
	Name string `xml:"name,attr,omitempty"`
}

type PaginationInput struct {

	//
	// Specifies the number of the page of data to return in the current call.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// Specifies the maximum number of entries to return in a single call.
	// If the number of entries that can be returned is less
	// than the value in EntriesPerPage, then the lower number
	// is returned.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`
}

type PaginationOutput struct {

	//
	// The total number of pages of data that could be returned by repeated
	// search requests. Note that if you modify the value of
	// inputPagination.entriesPerPage in a request, the value output for
	// totalPages will change.
	//
	TotalPages int32 `xml:"totalPages,omitempty"`

	//
	// The total number of entries. Depending on the input
	// value for entriesPerPage, the response
	// might include only a portion (a page) of the entire result set.
	//
	TotalEntries int32 `xml:"totalEntries,omitempty"`

	//
	// The subset of item data returned in the current response. Search results
	// are divided into sets, or "pages," of item data. The number of pages is
	// equal to the total number of entries divided
	// by the value specified for entriesPerPage in the request. The response
	// for a request contains one "page" of item data.
	// <br> <br>
	// This returned value indicates the page number of data returned (a
	// subset of the complete result set). If this field contains 1, the
	// response contains the first page of data (the default). If the value
	// returned in totalEntries is less than the value for entriesPerPage,
	// pageNumber returns 1 and the response contains the entire set of data.
	// <br> <br>
	// The value of pageNumber is normally equal to the value input for
	// paginationInput.pageNumber. However, if the number input for pageNumber
	// is greater than the total possible pages of output, eBay returns the last
	// page of data in the set of data, and the value for pageNumber is set
	// to the respective (last) page number.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// The maximum number of entries that can be returned in the response. This
	// number is always equal to the value that you specified for
	// paginationInput.entriesPerPage.
	// <br> <br>
	// The end of the result set has been reached if the number specified for
	// entriesPerPage is greater than the number of entries found on the specified
	// pageNumber. In this case, there will be fewer entries returned than the
	// number specified in entriesPerPage.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`
}

type OpeneBaySubscriptionServicePort interface {
	AddUsage(request *AddUsageRequest) (*AddUsageResponse, error)

	GetBillingStatements(request *GetBillingStatementsRequest) (*GetBillingStatementsResponse, error)

	GetBillingRecords(request *GetBillingRecordsRequest) (*GetBillingRecordsResponse, error)

	SetBillingStartDate(request *SetBillingStartDateRequest) (*SetBillingStartDateResponse, error)

	SetSubscriptionState(request *SetSubscriptionStateRequest) (*SetSubscriptionStateResponse, error)

	GetSubscriptionPlans(request *GetSubscriptionPlansRequest) (*GetSubscriptionPlansResponse, error)

	GetSubscribers(request *GetSubscribersRequest) (*GetSubscribersResponse, error)

	GetVersion(request *GetVersionRequest) (*GetVersionResponse, error)

	GetBillingStatementImage(request *GetBillingStatementImageRequest) (*GetBillingStatementImageResponse, error)

	AddCredit(request *AddCreditRequest) (*AddCreditResponse, error)

	AddRefund(request *AddRefundRequest) (*AddRefundResponse, error)

	GetRefundStatus(request *GetRefundStatusRequest) (*GetRefundStatusResponse, error)
}

type openeBaySubscriptionServicePort struct {
	client *soap.Client
}

func NewOpeneBaySubscriptionServicePort(client *soap.Client) OpeneBaySubscriptionServicePort {
	return &openeBaySubscriptionServicePort{
		client: client,
	}
}

func (service *openeBaySubscriptionServicePort) AddUsage(request *AddUsageRequest) (*AddUsageResponse, error) {
	response := new(AddUsageResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) GetBillingStatements(request *GetBillingStatementsRequest) (*GetBillingStatementsResponse, error) {
	response := new(GetBillingStatementsResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) GetBillingRecords(request *GetBillingRecordsRequest) (*GetBillingRecordsResponse, error) {
	response := new(GetBillingRecordsResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) SetBillingStartDate(request *SetBillingStartDateRequest) (*SetBillingStartDateResponse, error) {
	response := new(SetBillingStartDateResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) SetSubscriptionState(request *SetSubscriptionStateRequest) (*SetSubscriptionStateResponse, error) {
	response := new(SetSubscriptionStateResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) GetSubscriptionPlans(request *GetSubscriptionPlansRequest) (*GetSubscriptionPlansResponse, error) {
	response := new(GetSubscriptionPlansResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) GetSubscribers(request *GetSubscribersRequest) (*GetSubscribersResponse, error) {
	response := new(GetSubscribersResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) GetVersion(request *GetVersionRequest) (*GetVersionResponse, error) {
	response := new(GetVersionResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) GetBillingStatementImage(request *GetBillingStatementImageRequest) (*GetBillingStatementImageResponse, error) {
	response := new(GetBillingStatementImageResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) AddCredit(request *AddCreditRequest) (*AddCreditResponse, error) {
	response := new(AddCreditResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) AddRefund(request *AddRefundRequest) (*AddRefundResponse, error) {
	response := new(AddRefundResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *openeBaySubscriptionServicePort) GetRefundStatus(request *GetRefundStatusRequest) (*GetRefundStatusResponse, error) {
	response := new(GetRefundStatusResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
