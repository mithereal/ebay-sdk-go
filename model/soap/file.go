// Code generated by gowsdl DO NOT EDIT.

package ebay.soap

import (
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

//
// Indicates whether the error is a severe error (causing the request to fail)
// or an informational error (a warning) that should be communicated to the
// user.
//
type AckValue string


//
// Indicates whether the error is a severe error (causing the request to fail)
// or an informational error (a warning) that should be communicated to the
// user.
//


//
// There are three categories of error: request errors, application errors,
// and system errors. Request and application errors are caused primarily by
// invalid data passed in the request. System errors are caused by
// application failures and cannot be corrected by changing request values.
//


type UploadFileRequest UploadFileRequest

type UploadFileResponse UploadFileResponse

type DownloadFileRequest DownloadFileRequest

type DownloadFileResponse DownloadFileResponse

type UploadFileRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services uploadFileRequest"`

	*BaseServiceRequest

	//
	// This is an external identifier used by a service that interacts with the
	// File Transfer Service.
	// <br><br>
	// For instance, the Bulk Data Exchange Service uses a job ID as a primary
	// identifier, so, if you're using the Bulk Data Exchange Service, enter the
	// job ID as the taskReferenceId.
	//
	TaskReferenceId string `xml:"taskReferenceId,omitempty"`

	//
	// A unique ID assigned to a file by the Bulk Data Exchange service
	// when createUploadJobRequest is called.
	// <br>
	// <br>
	// Pass the fileReferenceId into a File Transfer service uploadFile call.
	// The File Transfer Service uses this identifier to
	// keep track of the files that are uploaded.
	//
	FileReferenceId string `xml:"fileReferenceId,omitempty"`

	//
	// Specifies the format of the file being uploaded.
	// <dl>
	// <dt>
	// gzip
	// </dt>
	// <dd>
	// It specifies that the file to be uploaded is in gzip format
	// </dd>
	// <dt>
	// zip
	// </dt>
	// <dd>
	// It specifies that the file to be uploaded is in zip format.
	// </dd>
	// </dl>
	//
	FileFormat string `xml:"fileFormat,omitempty"`

	//
	// The zipped report file that is encoded in Base64 Binary format and included
	// in the request according to the SOAP MTOM standard.
	//
	FileAttachment *FileAttachment `xml:"fileAttachment,omitempty"`
}

type DownloadFileRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services downloadFileRequest"`

	*BaseServiceRequest

	//
	// This is ID is determimed by a service (or API) that interacts with the
	// File Transfer API.
	// <br><br>
	// For instance, the Bulk Data Exchange API uses a job ID as a primary
	// identifier, so, if you're using the Bulk Data Exchange API, enter the
	// job ID as the taskReferenceId.
	//
	TaskReferenceId string `xml:"taskReferenceId,omitempty"`

	//
	// A unique Id assigned to a file. For example, the Bulk Data Exchange API
	// assigns this ID to a file when startDownloadJob is called and then it
	// creates the file.
	// <br>lt;br>
	// Pass the fileReferenceId into a File Transfer service downloadFile call.
	// The File Transfer API uses this identifier to
	// keep track of the files that are downloaded.
	//
	FileReferenceId string `xml:"fileReferenceId,omitempty"`
}

type UploadFileResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services uploadFileResponse"`

	*BaseServiceResponse
}

type DownloadFileResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services downloadFileResponse"`

	*BaseServiceResponse

	//
	// A zipped report file that is encoded in Base64 Binary format and included
	// in the response according to the SOAP MTOM standard.
	//
	FileAttachment *FileAttachment `xml:"fileAttachment,omitempty"`
}


type FileAttachment struct {

	//
	// This is the size of the file you are attaching (that contains the Merchant Data API
	// or Trading API requests that you want to upload) or of the file you are receiving
	// as a download.
	// <br><br>
	// The default maximum size for a
	// data file attachment in the File Transfer uploadJob call is 15MB,
	// If you have a large call limit and you want to send more calls than would fit in
	// a 15MB file, you will have to divide your data into multiple uploads.
	//
	Size int64 `xml:"Size,omitempty"`

	//
	// The data in the attached file. When this is returned in
	// downloadFile and you are working with Large Merchant Services or
	// GetCategorySpecifics, the attached file is a .zip file.
	//
	Data []byte `xml:"Data,omitempty"`
}

type FileTransferServicePort interface {
	UploadFile(request *UploadFileRequest) (*UploadFileResponse, error)

	DownloadFile(request *DownloadFileRequest) (*DownloadFileResponse, error)
}

type fileTransferServicePort struct {
	client *soap.Client
}

func NewFileTransferServicePort(client *soap.Client) FileTransferServicePort {
	return &fileTransferServicePort{
		client: client,
	}
}

func (service *fileTransferServicePort) UploadFile(request *UploadFileRequest) (*UploadFileResponse, error) {
	response := new(UploadFileResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *fileTransferServicePort) DownloadFile(request *DownloadFileRequest) (*DownloadFileResponse, error) {
	response := new(DownloadFileResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
