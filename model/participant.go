package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type OpeneBayTokenType string

const (

	//
	// The token is passed by reference; reserved for future use.
	//
	OpeneBayTokenTypeReference OpeneBayTokenType = "Reference"

	//
	// The token is passed by value.
	//
	OpeneBayTokenTypeValue OpeneBayTokenType = "Value"
)

type AckValueType string

const (

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user.
	//
	AckValueTypeSuccess AckValueType = "Success"

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, an error is returned
	// instead of business data.
	//
	AckValueTypeFailure AckValueType = "Failure"

	//
	// The request that triggered the error was processed successfully but with
	// some warnings.
	//
	AckValueTypeWarning AckValueType = "Warning"

	//
	// The request that triggered the error was processed successfully but with
	// some warnings.
	//
	AckValueTypePartialFailure AckValueType = "PartialFailure"
)

type ErrorSeverityType string

const (

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	ErrorSeverityTypeError ErrorSeverityType = "Error"

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user. For example, eBay may have changed a
	// value the user sent in. In this case, eBay returns a normal, successful
	// response and also returns the warning.
	//
	ErrorSeverityTypeWarning ErrorSeverityType = "Warning"
)

type OpeneBaySubscriptionReasonCode string

const (

	//
	// Subscription is pending an OEPI response. eBay has made
	// the corresponding OEPI call to your application's listener
	// but has not received a response, or has received a response with
	// a Pending status. Or eBay has not yet made the OEPI call.
	//
	OpeneBaySubscriptionReasonCodeEPIPending OpeneBaySubscriptionReasonCode = "EPIPending"

	OpeneBaySubscriptionReasonCodeBillingPending OpeneBaySubscriptionReasonCode = "BillingPending"

	//
	// Subscription is pending on eBay internal billing processing.
	//
	OpeneBaySubscriptionReasonCodeAccountPastDue OpeneBaySubscriptionReasonCode = "AccountPastDue"

	//
	// User has been billed, and a payment failure has occurred. The subscription
	// is still active. User will be suspended by eBay if the account balance is
	// greater than one dollar and more than 18 days have elapsed since the last
	// billing statement. eBay will cancel the subscription at 22 days after the
	// last billing statement.
	//
	OpeneBaySubscriptionReasonCodeSuspendedByDeveloper OpeneBaySubscriptionReasonCode = "SuspendedByDeveloper"

	//
	// Developer has suspended the subscription.
	//
	OpeneBaySubscriptionReasonCodeSuspendedByEbay OpeneBaySubscriptionReasonCode = "SuspendedByEbay"

	//
	// Following the suspension of a past due subscription, if the account remains
	// unpaid, eBay will put the subscription in the AccountNotPaidInTime state and
	// cancel the the subscription.
	//
	OpeneBaySubscriptionReasonCodeAccountNotPaidInTime OpeneBaySubscriptionReasonCode = "AccountNotPaidInTime"

	//
	// The subscription has been cancelled by the developer.
	//
	OpeneBaySubscriptionReasonCodeCancelledByDeveloper OpeneBaySubscriptionReasonCode = "CancelledByDeveloper"

	//
	// User has cancelled the subscription. If this occurs during the free trial
	// period, the subscription is cancelled immediately. If the user requests
	// immediate cancellation from a paid subscription, see Cancel Immediately in
	// the Managed Billing Platform Guide for steps you should take.
	//
	OpeneBaySubscriptionReasonCodeCancelledBySubscriber OpeneBaySubscriptionReasonCode = "CancelledBySubscriber"

	//
	// eBay has cancelled the subscription, possibly because the account remained
	// unpaid for 22 days following a billing statement.
	//
	OpeneBaySubscriptionReasonCodeCancelledByEbay OpeneBaySubscriptionReasonCode = "CancelledByEbay"

	//
	// Developer has declined to accept the subscription.
	//
	OpeneBaySubscriptionReasonCodeRejectedByDeveloper OpeneBaySubscriptionReasonCode = "RejectedByDeveloper"

	//
	// eBay has declined to accept the subscription.
	//
	OpeneBaySubscriptionReasonCodeRejectedByEbay OpeneBaySubscriptionReasonCode = "RejectedByEbay"
)

type OpeneBaySubscriptionStatusType string

const (

	//
	// Subscription status is approved, according to your application.
	// If you specify this value, eBay sets the user's
	// subscription to Active.
	//
	OpeneBaySubscriptionStatusTypeApproved OpeneBaySubscriptionStatusType = "Approved"

	//
	// Subscription status is pending, according to your application.
	// If you specify this value, eBay takes no action.
	//
	OpeneBaySubscriptionStatusTypePending OpeneBaySubscriptionStatusType = "Pending"

	//
	// Subscription status is rejected, according to your application.
	// If you specify this value in an addSubscriber response,
	// it means that, for whatever reason, your application is not
	// accepting the subscription specified by eBay in the addSubscriber request.
	// If eBay receives an addSubscriber response with
	// a status of Rejected, eBay will set the user's subscription status to Rejected.
	//
	OpeneBaySubscriptionStatusTypeRejected OpeneBaySubscriptionStatusType = "Rejected"
)

type OpeneBaySubscriptionStateType string

const (

	//
	// Reserved for future use.
	//
	OpeneBaySubscriptionStateTypeCreated OpeneBaySubscriptionStateType = "Created"

	//
	// Pending state. The subscription is not yet in the Active state.
	//
	OpeneBaySubscriptionStateTypePending OpeneBaySubscriptionStateType = "Pending"

	//
	// Active state, i.e. actively subscribed to an application.
	//
	OpeneBaySubscriptionStateTypeActive OpeneBaySubscriptionStateType = "Active"

	//
	// Suspended state, e.g. due to a payment failure or past due account.
	// There is a block (that can be removed)
	// on the user's access to the application.
	// That is, the user cannot start the application.
	//
	OpeneBaySubscriptionStateTypeSuspended OpeneBaySubscriptionStateType = "Suspended"

	//
	// Cancelled state, i.e. unsubscribed from an application.
	// When a user clicks the "unsubscribe" link to unsubscribe from your non-prorated
	// plan, eBay sends an updateSubscriber call to your application with the the
	// subscription end date in the note field. The
	// subscriptionStateChangeInfo.newState field may still be Active, but the user's
	// status in in your Active Subscribers list will be CancelledPending. If you want
	// to cancel the user's subscription immediately, use the control in the embedded
	// applications tab in your My Account page as follows. In the embedded
	// applications tab, select Active Users, and search for the user. Pull down the
	// Status selection list, select Cancel Immediately, and then click Submit.
	//
	OpeneBaySubscriptionStateTypeCancelled OpeneBaySubscriptionStateType = "Cancelled"

	//
	// Rejected state. One of the following
	// has occurred: your application
	// rejected the subscription (after receiving an addSubscriber call),
	// or the subscription was manually changed (by the third-party
	// application developer) to the rejected state.
	//
	OpeneBaySubscriptionStateTypeRejected OpeneBaySubscriptionStateType = "Rejected"

	//
	// When a user clicks the "unsubscribe" link to unsubscribe from your non-prorated
	// plan, eBay sends an updateSubscriber call to your application with the the
	// subscription end date in the note field. The
	// subscriptionStateChangeInfo.newState field may still be Active, but the user's
	// status in in your Active Subscribers list will be CancelledPending. If you want
	// to cancel the user's subscription immediately, use the control in the embedded
	// applications tab in your My Account page as follows. In the embedded
	// applications tab, select Active Users, and search for the user. Pull down the
	// Status selection list, select Cancel Immediately, and then click Submit.
	//
	OpeneBaySubscriptionStateTypeCancelledPending OpeneBaySubscriptionStateType = "CancelledPending"

	//
	// Expired state.
	//
	OpeneBaySubscriptionStateTypeExpired OpeneBaySubscriptionStateType = "Expired"
)

type OpeneBayPrincipalIdentifierType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayPrincipalIdentifierType"`

	//
	// The AppID of the receiving application.
	// When you upload a deployment descriptor for your application,
	// you provide a value (as myapp.mycompany.com) that becomes your AppID in the keys
	// that are issued for your application.
	// For information about uploading a deployment descriptor, see
	// the Users Guide.
	//
	AppId string `xml:"appId,attr,omitempty"`
}

type OpeneBayRequestCredentialsType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayRequestCredentialsType"`

	*OpeneBayPrincipalIdentifierType

	//
	// Container for signature and tokenValue.
	//
	Token *OpeneBaySecurityTokenType `xml:"token,omitempty"`
}

type OpeneBaySecurityTokenType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBaySecurityTokenType"`

	*OpeneBayBaseSecurityTokenType

	//
	// A base64-encoded string that you must decrypt before
	// extracting values. In the case of addSubscriber, the values that you
	// extract include the following for
	// the user to be added as a subscriber to your application: the user name and
	// the user Auth token (that is, the Auth and Auth token used in the
	// Trading API). In the case of removeSubscriber, values that you
	// extract (for the user to remove) include the user name.
	//
	TokenValue string `xml:"tokenValue,omitempty"`

	//
	// An RSA-encrypted string by which you can verify that the
	// request is from eBay. You decrypt this string with the public eBay key.
	// For more information, and the location of the public key, see the link below.
	//
	Signature string `xml:"signature,omitempty"`
}

type OpeneBayBaseSecurityTokenType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayBaseSecurityTokenType"`

	//
	// The base type for tokens.
	//
	Type *OpeneBayTokenType `xml:"type,attr,omitempty"`
}

type BaseOpeneBayParticipantInterfaceRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseOpeneBayParticipantInterfaceRequestType"`

	//
	// Container for signature and tokenValue.
	//
	Credentials *OpeneBayRequestCredentialsType `xml:"credentials,omitempty"`
}

type BaseOpeneBayParticipantInterfaceResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseOpeneBayParticipantInterfaceResponseType"`

	//
	// Indicates whether there are any errors or warnings associated with the
	// processing of the request.
	//
	Ack *AckValueType `xml:"ack,omitempty"`

	//
	// After you decide how your implementation of this service
	// will define errors, you can decide whether to use this container.
	// eBay does not inspect the value of this errorMessage field.
	//
	ErrorMessage string `xml:"errorMessage,omitempty"`

	//
	// Indicates whether the error is a severe error
	// (causing the request to fail) or an informational error
	// (a warning) that should be communicated to the user.
	//
	ErrorSeverity *ErrorSeverityType `xml:"errorSeverity,omitempty"`

	//
	// The date and time the request was processed. The time zone of this value
	// is GMT and the format is the ISO 8601 date and time format (YYYY-MM-
	// DDTHH:MM:SS.SSSZ). See Time Values in the eBay Web Services guide for
	// information about this time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type OpeneBaySubscriberInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBaySubscriberInfoType"`

	//
	// The user name of an eBay user, provided for convenience.
	// Instead of using this value for the user name, use the value in tokenValue.
	//
	UserName string `xml:"userName,omitempty"`
}

type OpeneBaySubscriptionStateChangeInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBaySubscriptionStateChangeInfoType"`

	//
	// The state that the subscription was in, before eBay detected that a change
	// occurred.
	//
	PreviousState *OpeneBaySubscriptionStateType `xml:"previousState,omitempty"`

	//
	// The new state of a subscription.
	// This value is sent by eBay;
	// eBay sends an updateSubscriber request to your application when
	// a change in a user's subscription state is detected.
	// For example, eBay sends an updateSubscriber request
	// to your application if, due to a payment failure,
	// a user's subscription goes into a suspended state.
	//
	NewState *OpeneBaySubscriptionStateType `xml:"newState,omitempty"`

	//
	// A message about the reason for the change in state of the subscription.
	// Depending on how the subscription state was changed,
	// this message may have been manually entered (as part of the
	// change) or may have been auto-generated.
	//
	ReasonCode *OpeneBaySubscriptionReasonCode `xml:"reasonCode,omitempty"`

	//
	// A message about the reason for the change in state of the subscription.
	// Depending on how the subscription state was changed,
	// this message may have been manually entered (as part of the
	// change) or may have been auto-generated.
	// If a user unsubscribed themselves, this field contains a
	// statement that the user unsubscribed using the Manage Applications page.
	//
	Note string `xml:"note,omitempty"`
}

type OpeneBaySubscriptionInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBaySubscriptionInfoType"`

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription.
	//
	SubscriptionId string `xml:"subscriptionId,omitempty"`

	//
	// A planId is assigned by eBay to each subscription plan.
	// Your application often uses this value in calls
	// to the Open eBay Application Integration Service.
	// Note that the planId is diffrent from the externalPlanId.
	// In contrast to the planId, the externalPlanId is the
	// value that you provide,
	// as a "Developer Plan ID," when you create a subscription plan.
	//
	PlanId string `xml:"planId,omitempty"`

	//
	// The plan name that you provided for your subscription plan when you created the plan.
	// This plan name is provided in the call request to help
	// you read log files, during debugging.
	// Instead of using this value for programmatically
	// identifying the subscription plan, use value in the externalPlanId field.
	//
	PlanName string `xml:"planName,omitempty"`

	//
	// When you create a subscription plan, you provide a Developer Plan ID.
	// That Developer Plan ID is contained in this externalPlanId field.
	// (For users to subscribe to your application,
	// you must create at least one subscription plan.)
	// In this call, the externalPlanId identifies the plan to which a user has subscribed.
	// Note that if you are running an application in the sandbox,
	// a subscription plan, and an associated value for the Developer Plan ID,
	// are created for you. You can create others plans, if desired, with
	// different Developer Plan IDs.
	//
	ExternalPlanId string `xml:"externalPlanId,omitempty"`

	//
	// Reserved for future use.
	//
	Note string `xml:"note,omitempty"`

	//
	// The state of an eBay member's subscription.
	// The following are examples: The user may be in an active state,
	// i.e. actively subscribed to your application.
	// The user may be in a suspended state, as in the case of
	// a payment failure, so
	// the user cannot start your application. The
	// user may be in a cancelled state, i.e. the user may no
	// longer have access to your application.
	//
	SubscriptionState *OpeneBaySubscriptionStateType `xml:"subscriptionState,omitempty"`

	//
	// The date when the user subscribed to the plan, e.g. the start of the free trial.
	//
	StartDate time.Time `xml:"startDate,omitempty"`

	//
	// Start date of the user's term for purposes of billing.
	//
	BillStartDate time.Time `xml:"billStartDate,omitempty"`

	//
	// The date on which the user or developer
	// requested cancellation of the subscription.
	// For example, in the case of a prorated-at-end plan, the cancelDate can be the
	// date of when the third party
	// changed the subscription state to "Canceled" or to "Cancel Immediately."
	// For a nonprorated-at-end plan, the cancelDate can be the
	// the date of when the third party changed the state to "Cancel Immediately."
	//
	CancelDate time.Time `xml:"cancelDate,omitempty"`

	//
	// End date of the user's subscription.
	// Specifically, the endDate is the date on which the
	// subscription actually ends.
	// That is, for a prorated-at-end plan, it is the date when the user unsubscribed.
	// (For prorated-at-end plans, the cancel and end dates are the same.)
	// For a nonprorated-at-end plan, it is the date of the term end.
	//
	EndDate time.Time `xml:"endDate,omitempty"`
}

type OpeneBayAddSubscriberRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayAddSubscriberRequestType"`

	*BaseOpeneBayParticipantInterfaceRequestType

	//
	// Container for a field that indicates the user name of an eBay user.
	//
	UserInfo *OpeneBaySubscriberInfoType `xml:"userInfo,omitempty"`

	//
	// Container for subscription-related information.
	//
	SubscriptionInfo *OpeneBaySubscriptionInfoType `xml:"subscriptionInfo,omitempty"`
}

type OpeneBayAddSubscriberResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayAddSubscriberResponseType"`

	*BaseOpeneBayParticipantInterfaceResponseType

	//
	// For a particular application, the subscriptionId
	// uniquely identifies a user's subscription.
	//
	SubscriptionId string `xml:"subscriptionId,omitempty"`

	//
	// The status of the subscription, according to
	// your application (if ack is success).
	// For example, when you receive an addSubscriber request,
	// your application's response includes this field to indicate the
	// latest subscription status of the user, according to your database.
	// This status value initially is
	// set by your application, unlike the
	// subscriptionStateChangeInfo.newState
	// value, which is set by eBay. When eBay receives this status value from
	// your application, eBay sets the subscription to Active, Pending,
	// or Rejected, depending on the status value you send in the response.
	//
	Status *OpeneBaySubscriptionStatusType `xml:"status,omitempty"`

	//
	// Message about the subscription status.
	//
	Message string `xml:"message,omitempty"`
}

type OpeneBayUpdateSubscriberRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayUpdateSubscriberRequestType"`

	*BaseOpeneBayParticipantInterfaceRequestType

	//
	// Container for a field that indicates the user name of an eBay user.
	//
	UserInfo *OpeneBaySubscriberInfoType `xml:"userInfo,omitempty"`

	//
	// Container for subscription-related information.
	//
	SubscriptionInfo *OpeneBaySubscriptionInfoType `xml:"subscriptionInfo,omitempty"`

	//
	// Container for subscription-related information.
	//
	SubscriptionStateChangeInfo *OpeneBaySubscriptionStateChangeInfoType `xml:"subscriptionStateChangeInfo,omitempty"`
}

type OpeneBayUpdateSubscriberResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayUpdateSubscriberResponseType"`

	*BaseOpeneBayParticipantInterfaceResponseType
}

type OpeneBayRemoveSubscriberRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayRemoveSubscriberRequestType"`

	*BaseOpeneBayParticipantInterfaceRequestType

	//
	// Container for a field that indicates the user name of an eBay user.
	//
	UserInfo *OpeneBaySubscriberInfoType `xml:"userInfo,omitempty"`

	//
	// Container for subscription-related information.
	//
	SubscriptionInfo *OpeneBaySubscriptionInfoType `xml:"subscriptionInfo,omitempty"`
}

type OpeneBayRemoveSubscriberResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayRemoveSubscriberResponseType"`

	*BaseOpeneBayParticipantInterfaceResponseType
}

type OpeneBayChangeSubscriptionPlanRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayChangeSubscriptionPlanRequestType"`

	*BaseOpeneBayParticipantInterfaceRequestType

	//
	// Container for a field that indicates the user name of an eBay user.
	//
	UserInfo *OpeneBaySubscriberInfoType `xml:"userInfo,omitempty"`

	//
	// Container for subscription-related information.
	//
	SubscriptionInfo *OpeneBaySubscriptionInfoType `xml:"subscriptionInfo,omitempty"`

	//
	// Container for subscription-related information.
	//
	PreviousSubscriptionInfo *OpeneBaySubscriptionInfoType `xml:"previousSubscriptionInfo,omitempty"`
}

type OpeneBayChangeSubscriptionPlanResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayChangeSubscriptionPlanResponseType"`

	*BaseOpeneBayParticipantInterfaceResponseType
}

type OpeneBayUpdateSubscriberPaymentMethodRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayUpdateSubscriberPaymentMethodRequestType"`

	*BaseOpeneBayParticipantInterfaceRequestType

	//
	// A payment method is either manual or automatic.
	// If true, indicates that there is no longer a recurring payment method.
	// If false, indicates that a recurring payment method (currently, only PayPal)
	// is set up for the subscriber.
	// If the payment method is manual, the subscriber doesn't have a recurring
	// payment method set up. If the payment method is automatic, the subscriber has a recurring
	// payment method set up (currently, only PayPal is available).
	//
	ManualPayment bool `xml:"manualPayment,omitempty"`

	//
	// The reason for the change in payment method.
	// If the payment method has been changed to manual,
	// the reason field can be PAYPAL_USER_AGREEMENT_CANCELED,
	// PAYPAL_HARD_DECLINED, INVALID, or NONE.
	//
	Reason string `xml:"reason,omitempty"`
}

type OpeneBayUpdateSubscriberPaymentMethodResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayUpdateSubscriberPaymentMethodResponseType"`

	*BaseOpeneBayParticipantInterfaceResponseType
}

type OpeneBayUpdateSubscriberCredentialsRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayUpdateSubscriberCredentialsRequestType"`

	*BaseOpeneBayParticipantInterfaceRequestType

	//
	// Container for a field that indicates the user name of an eBay user.
	//
	UserInfo *OpeneBaySubscriberInfoType `xml:"userInfo,omitempty"`

	//
	// Container for subscription-related information.
	//
	SubscriptionInfo *OpeneBaySubscriptionInfoType `xml:"subscriptionInfo,omitempty"`

	//
	// Contains the event that triggered the updateSubscriberCredentials call.
	// For more information, see the description of the updateSubscriberCredentials call.
	// If the value is TokenRevoked, the user's token was revoked.
	// If the value is TokenRenewed, the user's token has changed.
	//
	EventCode string `xml:"eventCode,omitempty"`
}

type OpeneBayUpdateSubscriberCredentialsResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayUpdateSubscriberCredentialsResponseType"`

	*BaseOpeneBayParticipantInterfaceResponseType
}

type OpeneBayParticipantInterfaceServicePortType struct {
	client *gowsdl.SoapClient
}

func NewOpeneBayParticipantInterfaceServicePortType(url string, tls bool) *OpeneBayParticipantInterfaceServicePortType {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &OpeneBayParticipantInterfaceServicePortType{
		client: client,
	}
}

func (service *OpeneBayParticipantInterfaceServicePortType) AddSubscriber(request *OpeneBayAddSubscriberRequestType) (*OpeneBayAddSubscriberResponseType, error) {
	response := &OpeneBayAddSubscriberResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *OpeneBayParticipantInterfaceServicePortType) UpdateSubscriber(request *OpeneBayUpdateSubscriberRequestType) (*OpeneBayUpdateSubscriberResponseType, error) {
	response := &OpeneBayUpdateSubscriberResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *OpeneBayParticipantInterfaceServicePortType) RemoveSubscriber(request *OpeneBayRemoveSubscriberRequestType) (*OpeneBayRemoveSubscriberResponseType, error) {
	response := &OpeneBayRemoveSubscriberResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *OpeneBayParticipantInterfaceServicePortType) ChangeSubscriptionPlan(request *OpeneBayChangeSubscriptionPlanRequestType) (*OpeneBayChangeSubscriptionPlanResponseType, error) {
	response := &OpeneBayChangeSubscriptionPlanResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *OpeneBayParticipantInterfaceServicePortType) UpdateSubscriberPaymentMethod(request *OpeneBayUpdateSubscriberPaymentMethodRequestType) (*OpeneBayUpdateSubscriberPaymentMethodResponseType, error) {
	response := &OpeneBayUpdateSubscriberPaymentMethodResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *OpeneBayParticipantInterfaceServicePortType) UpdateSubscriberCredentials(request *OpeneBayUpdateSubscriberCredentialsRequestType) (*OpeneBayUpdateSubscriberCredentialsResponseType, error) {
	response := &OpeneBayUpdateSubscriberCredentialsResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
