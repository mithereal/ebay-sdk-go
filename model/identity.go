package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type OpeneBayTokenType string

const (

	//
	// The token is passed by reference.
	//
	OpeneBayTokenTypeReference OpeneBayTokenType = "Reference"

	//
	// The token is passed by value.
	//
	OpeneBayTokenTypeValue OpeneBayTokenType = "Value"
)

type AckValue string

const (

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user.
	//
	AckValueSuccess AckValue = "Success"

	//
	// The request that triggered the error was not processed successfully. When a
	// serious application-level error occurs, the error is returned instead of the
	// business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was processed successfully but with some
	// warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// The request that triggered the error was processed successfully but with some
	// warnings.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type ErrorSeverity string

const (

	//
	// The request that triggered the error was
	// not processed successfully. When a
	// serious application-level error occurs,
	// the error is returned instead of the
	// business data.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user. For example, eBay may have changed a
	// value the user sent in. In this case, eBay returns a normal, successful
	// response and also returns the warning.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side, such as a
	// database or server down. An application can retry the request as-is a
	// reasonable number of times (eBay recommends twice). If the error persists,
	// contact Developer Technical Support. Once the problem has been resolved, the
	// request may be resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, such as missing or
	// invalid fields. The problem must be corrected before the request can be made
	// again. If the problem is due to something in the application (such as a
	// missing required field), the application must be changed. Once the problem in
	// the application or data is resolved, resend the corrected request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, such as invalid or
	// missing data. The problem must be corrected before the request can be made
	// again. If the problem is a result of end-user data, the application must
	// alert the end-user to the problem and provide the means for the end-user to
	// correct the data. Once the problem in the data is resolved, resend the
	// request to eBay with the corrected data.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type OpeneBayPrincipalIdentifierType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayPrincipalIdentifierType"`

	//
	// AppID, or fully-qualified name of an application as required in the deployment
	// descriptor. This value must be structured as
	// ApplicationName.PlatformName.TopDomain.
	//
	AppId string `xml:"appId,attr,omitempty"`
}

type OpeneBayAcceptType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayAcceptType"`

	//
	// Container for specifying whether a token is passed by reference or by value.
	//
	By *OpeneBayTokenType `xml:"by,attr,omitempty"`
}

type OpeneBayLoginCredentialsType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayLoginCredentialsType"`

	*OpeneBayPrincipalIdentifierType

	//
	// The certID is generated by eBay and provided to third parties who use Selling Manager Applications. Third
	// parties use the certId to log into eBay through the EIDP service.
	//
	CertId string `xml:"certId,omitempty"`
}

type OpeneBaySecurityTokenType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBaySecurityTokenType"`

	*OpeneBayBaseSecurityTokenType

	//
	// The EIDP token identifying the third-party application. Obtained using
	// the login request.
	//
	TokenValue string `xml:"tokenValue,omitempty"`

	//
	// Reserved for future use.
	//
	Signature string `xml:"signature,omitempty"`
}

type OpeneBayBaseSecurityTokenType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayBaseSecurityTokenType"`

	//
	// Base type for tokens.
	//
	Type *OpeneBayTokenType `xml:"type,attr,omitempty"`

	//
	// Issuing authority for the token. Value is eBay.
	//
	IssuingAuthority string `xml:"issuingAuthority,attr,omitempty"`

	//
	// The time and date that the EIDP token expires (typically, 24 hours after
	// issuance).
	//
	ExpirationDate time.Time `xml:"expirationDate,attr,omitempty"`
}

type BaseServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceRequest"`
}

type BaseServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceResponse"`

	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that occurred when eBay processed the
	// request.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// Open eBay version.
	//
	Version string `xml:"version,omitempty"`

	//
	// The date and time when eBay processed the request. The time zone of this value
	// is GMT and the format is the ISO 8601 date and time format (YYYY-MM-
	// DDTHH:MM:SS.SSSZ). See Time Values in the eBay Web Services guide for
	// information about this time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorMessage"`

	//
	// ActivityProfile about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that occurred.
	// Your application can use error codes as identifiers in your customized error-
	// handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain in which the error occurred.
	// <dl> <lh>
	// Domains include:
	// </lh> <dt>
	// Marketplace
	// </dt> <dd>
	// A business or validation error occurred
	// for the UserProfile Service.
	// </dd> <dt>
	// SOA
	// </dt> <dd>
	// An exception occurred in the Service Oriented Architecture (SOA) framework.
	// </dd> </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Indicates whether the error caused the request to fail (Error) or not
	// (Warning).
	// <br><br>
	// If the request fails and the source of the problem is within the application
	// (such as a missing required element), please change the application before
	// you retry the request. If the problem is due to end-user input data, please
	// alert the end-user to the problem and provide the means for them to correct
	// the data. Once the problem in the application or data is resolved, you can
	// attempt to re- send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request as-
	// is a reasonable number of times (eBay recommends twice). If the error
	// persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	// <br><br>
	// When a warning occurs, the error is returned in addition to the business
	// data. In this case, you do not need to retry the request (as the original
	// request was successful). However, depending on the cause or nature of the
	// warning, you might need to contact either the end user or eBay to effect a
	// long term solution to the problem to prevent it from reoccurring in the
	// future.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application errors, and
	// system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that resulted in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Name of the subdomain in which the error occurred.
	// <dl>
	// <lh>
	// Subdomains include:
	// </lh>
	// <dt>
	// UserProfile
	// </dt>
	// <dd>
	// The error is specific to the UserProfile service.
	// </dd>
	// <dt>
	// MarketplaceCommon
	// </dt>
	// <dd>
	// The error is common to all Marketplace services.
	// </dd>
	// </dl>
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Some warning and error messages return one or more variables that contain
	// contextual information about the error. This is often the field or value that
	// triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorParameter"`

	Value string

	//
	// The name of the parameter in the list of parameter types returned within
	// the error type.
	//
	Name string `xml:"name,attr,omitempty"`
}

type OpeneBayAuthenticateRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayAuthenticateRequestType"`

	*BaseServiceRequest

	//
	// The EIDP token to be validated. The EIDP token is included in the HTTP header
	// to validate calls from your application to eBay, such as OEAIS service
	// operations.
	//
	TokenToValidate string `xml:"tokenToValidate,omitempty"`
}

type OpeneBayAuthenticateResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayAuthenticateResponseType"`

	*BaseServiceResponse

	//
	// Internal use only.
	//
	Attributes *OpeneBayAssertionAttributesType `xml:"attributes,omitempty"`
}

type OpeneBayAssertionAttributeType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayAssertionAttributeType"`

	//
	// Contains the values of the identity assertion, usually a DevID, used in the login
	// call.
	//
	AttributeValue string `xml:"attributeValue,omitempty"`

	//
	// Specifies which identity assertion is used in the login call. For example, DevID.
	//
	Name string `xml:"name,attr,omitempty"`
}

type OpeneBayAssertionAttributesType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayAssertionAttributesType"`

	//
	// Container for the identity assertions used in the login call.
	//
	Attribute []*OpeneBayAssertionAttributeType `xml:"attribute,omitempty"`
}

type OpeneBayLoginRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayLoginRequestType"`

	*BaseServiceRequest

	//
	// Specifies the type of credentials offered in the login request.
	//
	Credential *OpeneBayLoginCredentialsType `xml:"credential,omitempty"`

	//
	// Specifies whether acceptance will be based on a token passed by value or
	// by reference.
	//
	Accept *OpeneBayAcceptType `xml:"accept,omitempty"`

	//
	// The identity assertions submitted at login include CertID and AppID.
	//
	Attributes *OpeneBayAssertionAttributesType `xml:"attributes,omitempty"`
}

type OpeneBayLoginResponseType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services OpeneBayLoginResponseType"`

	*BaseServiceResponse

	//
	// Container for EIDP token, returned in the login response. This token accompanies all subsequent calls made to
	// eBay by Selling Manager applications.
	//
	SecurityToken *OpeneBaySecurityTokenType `xml:"securityToken,omitempty"`
}

type OpeneBayIdentityProviderServicePort struct {
	client *gowsdl.SoapClient
}

func NewOpeneBayIdentityProviderServicePort(url string, tls bool) *OpeneBayIdentityProviderServicePort {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &OpeneBayIdentityProviderServicePort{
		client: client,
	}
}

func (service *OpeneBayIdentityProviderServicePort) Authenticate(request *OpeneBayAuthenticateRequestType) (*OpeneBayAuthenticateResponseType, error) {
	response := &OpeneBayAuthenticateResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *OpeneBayIdentityProviderServicePort) Login(request *OpeneBayLoginRequestType) (*OpeneBayLoginResponseType, error) {
	response := &OpeneBayLoginResponseType{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
