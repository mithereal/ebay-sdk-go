package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckValue string

const (

	//
	// The request was processed successfully without errors or warnings.
	//
	AckValueSuccess AckValue = "Success"

	//
	// Errors occurred that prevented the request from being processed
	// successfully.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request was processed successfully, but some warnings were returned.
	//
	AckValueWarning AckValue = "Warning"

	//
	// Reserved for future use.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type ErrorSeverity string

const (

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user. For example, eBay may have changed a
	// value the user sent in. In this case, eBay returns a normal, successful
	// response and also returns the warning.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side, such as a
	// database or server down. An application can retry the request as-is a
	// reasonable number of times (eBay recommends twice). If the error
	// persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, such as missing or
	// invalid fields. The problem must be corrected before the request can be
	// made again. If the problem is due to something in the application (such
	// as a missing required field), the application must be changed. Once the
	// problem in the application or data is resolved, resend the corrected
	// request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, such as invalid or
	// missing data. The problem must be corrected before the request can be
	// made again. If the problem is a result of end-user data, the application
	// must alert the end-user to the problem and provide the means for the
	// end-user to correct the data. Once the problem in the data is resolved,
	// resend the request to eBay with the corrected data.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type BaseServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceRequest"`
}

type CreateDSRSummaryByTransactionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services CreateDSRSummaryByTransactionRequest"`

	*BaseServiceRequest

	//
	// The transactionKey consists of a combination of an item ID and a
	// transaction ID. This combination uniquely identifies a given transaction.
	//
	TransactionKey []*TransactionKey `xml:"transactionKey,omitempty"`
}

type CreateDSRSummaryByPeriodRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services CreateDSRSummaryByPeriodRequest"`

	*BaseServiceRequest

	//
	// Specifies the time period used for collecting DSR data for purchased
	// items. The time period applies to either the end date of the item
	// transaction or the date the item was listed.
	// <br><br>
	// Note the following restrictions when specifying a date range:
	// <ul>
	// <li>Date ranges cannot be more than 90 days in duration or the call
	// will fail.</li>
	// <li>Date ranges cannot be specified to begin more than 16 months
	// before the current date or the call will fail. </li>
	// <li>When retriiving DSR summary reports for a date range, if there
	// are more than 5,000 transanctions in the time period, only the 5,000 most
	// recent transactions will be processed and a warning will be returned. <
	// /li>
	// </ul>
	//
	DateRange *DateRange `xml:"dateRange,omitempty"`

	//
	// Type of item event upon which the date range will be based.
	// <br><br>
	// Date Range Event Types include:
	// <dl>
	// <dt>
	// TransactionEndDate
	// </dt>
	// <dd>
	// The specified date range relates to the date transactions were ended.
	// </dd>
	// <dt>
	// ListingDate
	// </dt>
	// <dd>
	// The specified date range relates to the date items were listed.
	// </dd>
	// </dl>
	//
	DateRangeEventType string `xml:"dateRangeEventType,omitempty"`
}

type CreateDSRSummaryByCategoryRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services CreateDSRSummaryByCategoryRequest"`

	*BaseServiceRequest

	//
	// Specifies the time period used for collecting DSR data for purchased
	// items. The time period applies to either the end date of the item
	// transaction or the date the item was listed.
	// <br><br>
	// The date range must not exceed 90 days and must not start more than 16
	// months before the current date.
	//
	DateRange *DateRange `xml:"dateRange,omitempty"`

	//
	// Type of item event upon which the date range will be based.
	// <br><br>
	// Date Range Event Types include:
	//
	// <dl>
	// <dt>
	// TransactionEndDate
	// </dt>
	// <dd>
	// The specified date range relates to the date transactions were ended.
	// </dd>
	// <dt>
	// ListingDate
	// </dt>
	// <dd>
	// The specified date range relates to the date items were listed.
	// </dd>
	// </dl>
	//
	DateRangeEventType string `xml:"dateRangeEventType,omitempty"`

	//
	// DSR summary report will be based on DSRs left for items that
	// were listed in specified categories only.
	// <br><br>
	// Category IDs are site-specific. If a specified category ID doesn't
	// match an existing category for the site, an invalid-category warning
	// message is returned. To determine valid categories, you can use either
	// the Shopping API or the Trading API. In the Shopping API, use the <a
	// href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindItemsAdvanced.html">
	// FindItemsAdvanced</a> call with the CategoryHistogram value in the
	// IncludeSelector field to retrieve matching category information. In the
	// Trading API, use calls like <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategories.html">
	// GetCategories</a> and <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategoryFeatures.html">
	// GetCategoryFeatures</a> to determine valid values for the site.
	// <br><br>
	// If you specify more than 30 categories, only the first 30 will be used.
	//
	CategoryId []string `xml:"categoryId,omitempty"`
}

type CreateDSRSummaryByShippingDetailRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services CreateDSRSummaryByShippingDetailRequest"`

	*BaseServiceRequest

	//
	// Specifies the time period used for collecting DSR data for purchased
	// items. The time period applies to either the end date of the item
	// transaction or the date the item was listed.
	// <br><br>
	// The date range must not exceed 90 days and must not start more than 16
	// months before the current date.
	//
	DateRange *DateRange `xml:"dateRange,omitempty"`

	//
	// Type of item event upon which the date range will be based.
	// <br><br>
	// Date Range Event Types include:
	//
	// <dl>
	// <dt>
	// TransactionEndDate
	// </dt>
	// <dd>
	// The specified date range relates to the date transactions were ended.
	// </dd>
	// <dt>
	// ListingDate
	// </dt>
	// <dd>
	// The specified date range relates to the date items were listed.
	// </dd>
	// </dl>
	//
	DateRangeEventType string `xml:"dateRangeEventType,omitempty"`

	//
	// Specifies whether to aggregate DSRs for items for which buyers did not
	// pay any shipping or handling charges or for items for which buyers were
	// charged for shipping and handling.
	// <br><br>
	// Shipping Cost Types include:
	// <dl>
	// <dt>
	// Free
	// </dt>
	// <dd>
	// Limits DSRs to items for which shipping was provided free of charge.
	// </dd>
	// <dt>
	// Paid
	// </dt>
	// <dd>
	// Limits DSRs to items for which there was a charge for shipping
	// and handling.
	// </dd>
	// </dl>
	// <br><br>
	// If you don't specify this field, DSRs for items for which buyers did or
	// did not pay shipping and handling charges will be aggregated.
	//
	ShippingCostType string `xml:"shippingCostType,omitempty"`

	//
	// Specifies a limit on DSRs,
	// based on the buyer's country-of-residence
	// (not based on the shipping destination).
	// <br><br>
	// The choices for the buyer's country-of-residence are
	// the following: Domestic for domestic, International for international,
	// US for United States, UK for the United Kingdom, and DE for Germany.
	// If you don't specify this field, this limitation does not apply.
	//
	ShippingDestinationType string `xml:"shippingDestinationType,omitempty"`

	//
	// The buyer's country-of-residence (not necessarily the ship-to country).
	// DSRs will be aggregated for these items only.
	// <br><br>
	// Use the two-letter ISO 3166 country code to indicate the country.
	// For English names that correspond to each code (e.g.,
	// KY="Cayman Islands"), see the ISO site: <a
	// href="http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html"> http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html</a>.
	// <br><br>
	// If you don't specify this field, no restriction on this country
	// is applied to the request.
	//
	ShipToCountry []string `xml:"shipToCountry,omitempty"`

	//
	// Shipping service used to ship items. You can specify multiple shipping
	// services. DSRs will be aggregated for items that used the specified
	// shipping services only.
	// <br><br>
	// Use one of the transaction calls in the Trading API, such as <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetSellerTransactions.html">GetSellerTransactions</a>
	// to determine what shipping services buyers selected (e.g.,
	// TransactionArray.Transaction.ShippingServiceSelected.ShippingService).
	// Alternatively, use <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GeteBayDetails.html">GeteBayDetails</a>
	// in the Trading API with DetalName set to ShippingServiceDetails to retrieve
	// the currently supported shipping service names.
	// <br><br>
	// If you don't specify this field, no shipping service restriction
	// applies to the request.
	//
	ShippingService []string `xml:"shippingService,omitempty"`
}

type GetDSRSummaryRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetDSRSummaryRequest"`

	*BaseServiceRequest

	//
	// The Request ID for a particular DSR report.
	//
	JobId string `xml:"jobId,omitempty"`
}

type CreateDSRSummaryResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services CreateDSRSummaryResponse"`

	*BaseServiceResponse

	//
	// A unique identifier associated with the create report request. The jobId
	// is used as input for the getDSRSummary call to retrieve the requested
	// report.
	//
	JobId string `xml:"jobId,omitempty"`
}

type GetDSRSummaryResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services GetDSRSummaryResponse"`

	*BaseServiceResponse

	//
	// A list of detailed seller ratings for one of the following areas: Item
	// As Described, Communication, Shipping Time, and Shipping Charges. This
	// list includes a DSR average, the total number of ratings received, and a
	// count for each of the one-to-five star ratings received by a seller for a
	// particular DSR area. The detailed seller rating system is based on a one-to-five-star
	// scale. Five stars is the highest rating, and one star is the lowest.
	//
	DSRSummary []*DSRSummary `xml:"DSRSummary,omitempty"`

	//
	// The total number of transactions for the seller in the applicable date-range period.
	//
	TotalTransactionCount int32 `xml:"totalTransactionCount,omitempty"`
}

type TransactionKey struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services TransactionKey"`

	//
	// ID of the listing associated with the transaction for which  the seller is
	// collecting DSRs.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// Unique identifier for a transaction from the listing indicated by itemId.
	// In the Trading API, you can use <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetItemTransactions.html">
	// GetItemTransactions</a> or <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetSellerTransactions.html">
	// GetSellerTransactions</a> to determine the appropriate transaction IDs.
	//
	TransactionId string `xml:"transactionId,omitempty"`
}

type DateRange struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services DateRange"`

	//
	// The starting point of the date range. DSRs will be aggregated for
	// items with the specified date range event (transaction end date or
	// listing date) on or after the dateFrom value and before or on the
	// dateTo value.
	//
	DateFrom time.Time `xml:"dateFrom,omitempty"`

	//
	// The end point of the date range. DSRs will be aggregated for
	// items with the specified date range event (transaction end date or
	// listing date) on or after the dateFrom value and before or on the
	// dateTo value.
	//
	DateTo time.Time `xml:"dateTo,omitempty"`
}

type DSRSummary struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services DSRSummary"`

	//
	// One of the areas in which a buyer can provide a seller a detailed seller
	// rating. The detailed seller rating system is based on a one-to-five-star
	// scale. Five stars is the highest rating, and one star is the lowest.
	// <br><br>
	// Applicable values:
	//
	// <dl>
	// <dt>ItemAsDescribed</dt>
	// <dd>Detailed seller ratings on how well the Item Title and Description
	// actually described the item purchased by the buyer. This includes the
	// condition of the item and whether the selling terms of the item were honored
	// or not.</dd>
	//
	// <dt>Communication</dt>
	// <dd>Detailed seller ratings on how promptly and clearly the seller
	// communicated with the buyer during the transaction. This includes how well
	// the seller responded to the buyer's emails and proactively provided order
	// status updates when needed. </dd>
	//
	// <dt>ShippingTime</dt>
	// <dd>Detailed seller ratings on how effectively the seller set clear
	// expectations for shipping time up front in the Item Description. This
	// includes how long it took the seller to mail the item and whether the terms
	// for weekend shipping were clearly specified in the Item Description or not.
	// </dd>
	//
	// <dt>ShippingCharges</dt>
	// <dd>Detailed seller ratings on how appropriate the shipping charges
	// and fees were in relation to the seller's time and direct costs associated
	// with packaging materials, handling, and shipping.</dd>
	//
	// </dl>
	//
	//
	DSRType string `xml:"DSRType,omitempty"`

	//
	// Average rating for a particular DSR area. The average rating is computed on a
	// rolling 12-month basis and has a value of 1.00 to 5.00 when at
	// least ten ratings have been received. Otherwise, the value is 0.00.
	//
	DSRAverage float64 `xml:"DSRAverage,omitempty"`

	//
	// The total number of ratings a seller has received for a particular DSR area.
	//
	TotalRatingCount int32 `xml:"totalRatingCount,omitempty"`

	//
	// The total number of 1-star ratings received by a seller for a particular
	// DSR area.
	//
	Rating1Count int32 `xml:"rating1Count,omitempty"`

	//
	// The total number of 2-star ratings received by a seller for a particular
	// DSR area.
	//
	Rating2Count int32 `xml:"rating2Count,omitempty"`

	//
	// The total number of 3-star ratings received by a seller for a particular
	// DSR area.
	//
	Rating3Count int32 `xml:"rating3Count,omitempty"`

	//
	// The total number of 4-star ratings received by a seller for a particular
	// DSR area.
	//
	Rating4Count int32 `xml:"rating4Count,omitempty"`

	//
	// The total number of 5-star ratings received by a seller for a particular
	// DSR area.
	//
	Rating5Count int32 `xml:"rating5Count,omitempty"`
}

type BaseServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services BaseServiceResponse"`

	//
	// Indicates whether there are any errors or warnings associated with the
	// processing of the request.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that occurred when eBay processed the
	// request. Not returned when responseStatus is Success.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The version of the response payload schema. Indicates the version of the
	// schema that eBay used to process the request. Developer Technical Support
	// may ask you for the version value when you work with them to troubleshoot
	// issues.
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the
	// request. The time zone of this value is <a
	// href="types/simpleTypes.html#dateTime">GMT</a>
	// and the format is the
	// ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ).
	// See the "dateTime" type for information about this
	// time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that occurred.
	// Your application can use error codes as identifiers in your customized
	// error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain upon which the error occurred.
	// <br><br>
	// Domains include:
	//
	// <dl>
	// <dt>
	// Marketplace
	// </dt>
	// <dd>
	// A business or validation error occurred for the Feedback Service.
	// </dd>
	// <dt>
	// SOA
	// </dt>
	// <dd>
	// An exception occurred in the Service Oriented Architecture (SOA)
	// framework.
	// </dd>
	// </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Indicates whether the error caused the request to fail (Error) or not
	// (Warning).
	// <br><br>
	// If the request fails and the source of the problem is within the application
	// (such as a missing required element), please change the application before you
	// retry the request. If the problem is due to end-user input data, please alert
	// the end-user to the problem and provide the means for them to correct the data.
	// Once the problem in the application or data is resolved, you can attempt to re-
	// send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request as-is
	// a reasonable number of times (eBay recommends twice). If the error persists,
	// contact Developer Technical Support. Once the problem has been resolved, the
	// request may be resent in its original form.
	// <br><br>
	// When a warning occurs, the error is returned in addition to the business data.
	// In this case, you do not need to retry the request (as the original request was
	// successful). However, depending on the cause or nature of the warning, you
	// might need to contact either the end user or eBay to effect a long term
	// solution to the problem to prevent it from reoccurring in the future.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application errors, and
	// system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that resulted in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Name of the subdomain upon which the error occurred.
	// <br><br>
	// Subdomains include:
	//
	// <dl>
	// <dt>
	// Merchandising
	// </dt>
	// <dd>
	// The error is specific to the Feedback service.
	// </dd>
	// <dt>
	// MarketplaceCommon
	// </dt>
	// <dd>
	// The error is common to all Marketplace services.
	// </dd>
	// </dl>
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Some warning and error messages return one or more variables that contain
	// contextual information about the error. This is often the field or value that
	// triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/services ErrorParameter"`

	Value string

	//
	// The name of the parameter in the list of parameter types returned
	// within the error type.
	//
	Name string `xml:"name,attr,omitempty"`
}

type FeedbackServicePort struct {
	client *gowsdl.SoapClient
}

func NewFeedbackServicePort(url string, tls bool) *FeedbackServicePort {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &FeedbackServicePort{
		client: client,
	}
}

func (service *FeedbackServicePort) CreateDSRSummaryByTransaction(request *CreateDSRSummaryByTransactionRequest) (*CreateDSRSummaryResponse, error) {
	response := &CreateDSRSummaryResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FeedbackServicePort) CreateDSRSummaryByPeriod(request *CreateDSRSummaryByPeriodRequest) (*CreateDSRSummaryResponse, error) {
	response := &CreateDSRSummaryResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FeedbackServicePort) CreateDSRSummaryByCategory(request *CreateDSRSummaryByCategoryRequest) (*CreateDSRSummaryResponse, error) {
	response := &CreateDSRSummaryResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FeedbackServicePort) CreateDSRSummaryByShippingDetail(request *CreateDSRSummaryByShippingDetailRequest) (*CreateDSRSummaryResponse, error) {
	response := &CreateDSRSummaryResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FeedbackServicePort) GetDSRSummary(request *GetDSRSummaryRequest) (*GetDSRSummaryResponse, error) {
	response := &GetDSRSummaryResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
