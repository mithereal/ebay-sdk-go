package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckValue string

const (

	//
	// eBay successfully processed the request and the business data is returned in
	// the response. Note that it is possible for a response to return Success, but
	// still not contain the expected data in the result.
	//
	AckValueSuccess AckValue = "Success"

	//
	// eBay encountered a fatal error during the processing of the request, causing
	// the request to fail. When a serious application-level error occurs, the error
	// is returned instead of the business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was processed successfully but with
	// one or more warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// eBay successfully processed the request, but one or more non-fatal errors
	// occurred during the processing. Inspect the message details and resolve any
	// problems before resubmitting the request.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side. For example, a
	// database or server could be down. Inspect the error message to find the cause
	// of the problem. If the problem is on the eBay side, an application can retry
	// the request a reasonable number of times (eBay recommends twice). If the
	// error persists, contact Developer Technical Support. Once the problem has been
	// resolved, the request may be resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being the application sending the request. For example, the request is
	// missing a required data element or it contains an invalid field. The problem
	// must be corrected before the request can be resent. Inspect the error message
	// to find the cause of the problem. If the problem is due to an application
	// error, modify the application and resend the request. If the error is due to
	// invalid data, the source of the data must be corrected before you resend the
	// resend request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being missing or invalid data in the request. The problem must be
	// corrected before the request can be retried. Inspect the error message to
	// find the cause of the problem. If the problem is a result of end-user data,
	// alert the end-user to the problem and provide the means for them to correct
	// the problem. Once the problem is resolved, resend the request to eBay.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type ErrorSeverity string

const (

	//
	// eBay encountered a fatal error during the processing of the request, causing the request to fail. When eBay encounters an error, it returns error data instead of the requested business data. Inspect the error details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was successfully processed, but eBay encountered a non-fatal error during the processing that could affect the data returned. For example, eBay might have changed the value of an input field. In this case, eBay returns a successful response, but it also returns a warning. For best results, requests should return without warnings. Inspect the warning details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type ProofType string

const (

	//
	// This document is uploaded by the seller to provide proof that a full or partial
	// refund has been issued to the buyer. Supported file types for this document are
	// JPEG, GIF, BMP, and PNG. The size limit for each document is 1 MB.
	//
	ProofTypePROOFOFREFUND ProofType = "PROOFOFREFUND"

	//
	// This document is uploaded by the seller to provide proof that an item was shipped
	// to the buyer. Supported file types for this document are JPEG, GIF, BMP, and PNG.
	// The size limit for each document is 1 MB.
	//
	ProofTypePROOFOFSHIPPING ProofType = "PROOFOFSHIPPING"

	//
	// The proof document type is reserved for future use.
	//
	ProofTypeOTHER ProofType = "OTHER"
)

type CaseType string

const (

	//
	// An older Item Not Received dispute filed by a buyer.
	//
	CaseTypeINR CaseType = "INR"

	//
	// An older Significantly Not As Described dispute filed by a buyer.
	//
	CaseTypeSNAD CaseType = "SNAD"

	//
	// An Unpaid Item case created by a seller through the Resolution Center or with
	// the <b>AddDispute</b> Trading API call. Unpaid Item disputes are
	// also created automatically if the seller has the Unpaid Item Assistant
	// mechanism turned on.
	//
	CaseTypeUPI CaseType = "UPI"

	//
	// An Item Not Received case opened by a buyer in the Resolution Center.
	//
	CaseTypeEBPINR CaseType = "EBPINR"

	//
	// A Significantly Not As Described case opened by a buyer in the Resolution
	// Center.
	//
	CaseTypeEBPSNAD CaseType = "EBPSNAD"

	//
	// This value is returned in <b>getUserCases</b> and <b>getEBPCaseDetail</b> if the buyer selected
	// the <em>"I want to return an item and get a refund."</em> option and
	// opened a case in the Resolution Center. The return an item and get a refund option
	// is only available for UK and DE buyers and not US buyers. To return an item for a
	// refund, US buyers must arrange a return with the seller or go through the new US
	// managed return process.
	//
	CaseTypeRETURN CaseType = "RETURN"

	//
	// A mutually agreed upon transaction withdrawal case initiated by the seller
	// for an unpaid item, and created through the Resolution Center or with the
	// <b>AddDispute</b> Trading API call.
	//
	CaseTypeCANCELTRANSACTION CaseType = "CANCELTRANSACTION"

	//
	// An Item Not Received case filed by a buyer through the PayPal system.
	//
	CaseTypePAYPALINR CaseType = "PAYPALINR"

	//
	// A Significantly Not As Described case filed by a buyer through
	// the PayPal system.
	//
	CaseTypePAYPALSNAD CaseType = "PAYPALSNAD"
)

type CaseStatusInputType string

const (

	//
	// An open case. A final decision has not been made on the case.
	//
	CaseStatusInputTypeOPEN CaseStatusInputType = "OPEN"

	//
	// A closed case. A final decision has been made on the case.
	//
	CaseStatusInputTypeCLOSED CaseStatusInputType = "CLOSED"

	//
	// An open case that is awaiting a response from the user making the call.
	//
	CaseStatusInputTypeMYRESPONSEDUE CaseStatusInputType = "MYRESPONSEDUE"

	//
	// An open case that is awaiting a response from the other party involved in the
	// case.
	//
	CaseStatusInputTypeOTHERPARTYRESPONSEDUE CaseStatusInputType = "OTHERPARTYRESPONSEDUE"

	//
	// An open case that is awaiting a payment from the user making the call.
	//
	CaseStatusInputTypeMYPAYMENTDUE CaseStatusInputType = "MYPAYMENTDUE"

	//
	// A case where the seller is eligible to receive a Final Value Fee credit.
	//
	CaseStatusInputTypeELIGIBLEFORCREDIT CaseStatusInputType = "ELIGIBLEFORCREDIT"
)

type CaseSortOrderType string

const (

	//
	// Cases are sorted based on the status of the case in ascending order .
	//
	CaseSortOrderTypeCASESTATUSASCENDING CaseSortOrderType = "CASESTATUSASCENDING"

	//
	// Cases are sorted based on the status of the case in descending order.
	//
	CaseSortOrderTypeCASESTATUSDESCENDING CaseSortOrderType = "CASESTATUSDESCENDING"

	//
	// Cases are sorted based on creation date in ascending order.
	//
	CaseSortOrderTypeCREATIONDATEASCENDING CaseSortOrderType = "CREATIONDATEASCENDING"

	//
	// Cases are sorted based on creation date in descending order.
	//
	CaseSortOrderTypeCREATIONDATEDESCENDING CaseSortOrderType = "CREATIONDATEDESCENDING"
)

type CaseDecisionType string

const (

	//
	// The seller was found to be at fault in the final disposition of the case.
	//
	CaseDecisionTypeSELLERFAULT CaseDecisionType = "SELLERFAULT"

	//
	// Neither the seller nor the buyer was found to be at fault in the final
	// disposition of the case.
	//
	CaseDecisionTypeNEITHERSELLERNORBUYERFAULT CaseDecisionType = "NEITHERSELLERNORBUYERFAULT"

	//
	// The buyer was found to be at fault in the final disposition of the case.
	//
	CaseDecisionTypeBUYERFAULT CaseDecisionType = "BUYERFAULT"

	//
	// The buyer and seller were both found to be at fault in the final disposition
	// of the case.
	//
	CaseDecisionTypeBUYERFAULTSELLERFAULT CaseDecisionType = "BUYERFAULTSELLERFAULT"

	//
	// The final disposition of the case was classifed as 'Other'.
	//
	CaseDecisionTypeOTHER CaseDecisionType = "OTHER"
)

type CaseUserRoleType string

const (

	//
	// The user's role in the case is buyer.
	//
	CaseUserRoleTypeBUYER CaseUserRoleType = "BUYER"

	//
	// The user's role in the case is seller.
	//
	CaseUserRoleTypeSELLER CaseUserRoleType = "SELLER"

	//
	// A representative of eBay involved in mediating the case.
	//
	CaseUserRoleTypeEBAY CaseUserRoleType = "EBAY"

	//
	// The user's role in the case is classified as 'other'.
	//
	CaseUserRoleTypeOTHER CaseUserRoleType = "OTHER"
)

type INRCaseStatusType string

const (

	//
	// Case has been closed by eBay customer support.
	//
	INRCaseStatusTypeCSCLOSED INRCaseStatusType = "CSCLOSED"

	//
	// Case is closed.
	//
	INRCaseStatusTypeCLOSED INRCaseStatusType = "CLOSED"

	//
	// A response is due from the other party in the case.
	//
	INRCaseStatusTypeOTHERPARTYRESPONSEDUE INRCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response is due from the user (caller).
	//
	INRCaseStatusTypeMYRESPONSEDUE INRCaseStatusType = "MYRESPONSEDUE"

	//
	// The user (caller) has contacted and is awaiting a response from eBay customer
	// support.
	//
	INRCaseStatusTypeYOUCONTACTEDCSAWAITINGRESPONSE INRCaseStatusType = "YOUCONTACTEDCSAWAITINGRESPONSE"

	//
	// The other party in the case has contacted and is awaiting a response from
	// eBay customer support.
	//
	INRCaseStatusTypeOTHERPARTYCONTACTEDCSAWAITINGRESPONSE INRCaseStatusType = "OTHERPARTYCONTACTEDCSAWAITINGRESPONSE"

	//
	// The user (caller) contacted eBay customer support to discuss a closed
	// case.
	//
	INRCaseStatusTypeYOUCONTACTEDCSABOUTCLOSEDCASE INRCaseStatusType = "YOUCONTACTEDCSABOUTCLOSEDCASE"

	//
	// The disputed amount in the case has been paid.
	//
	INRCaseStatusTypePAID INRCaseStatusType = "PAID"

	//
	// A payment is due from the user (caller).
	//
	INRCaseStatusTypeMYPAYMENTDUE INRCaseStatusType = "MYPAYMENTDUE"

	//
	// The life of the case has expired.
	//
	INRCaseStatusTypeEXPIRED INRCaseStatusType = "EXPIRED"

	//
	// The status of the case is classified as 'other'.
	//
	INRCaseStatusTypeOTHER INRCaseStatusType = "OTHER"
)

type SNADCaseStatusType string

const (

	//
	// Case has been closed by eBay customer support.
	//
	SNADCaseStatusTypeCSCLOSED SNADCaseStatusType = "CSCLOSED"

	//
	// Case is closed.
	//
	SNADCaseStatusTypeCLOSED SNADCaseStatusType = "CLOSED"

	//
	// A response is due from the other party in the case.
	//
	SNADCaseStatusTypeOTHERPARTYRESPONSEDUE SNADCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response is due from the user (caller).
	//
	SNADCaseStatusTypeMYRESPONSEDUE SNADCaseStatusType = "MYRESPONSEDUE"

	//
	// The user (caller) has contacted and is awaiting a response from eBay customer
	// support.
	//
	SNADCaseStatusTypeYOUCONTACTEDCSAWAITINGRESPONSE SNADCaseStatusType = "YOUCONTACTEDCSAWAITINGRESPONSE"

	//
	// The other party in the case has contacted and is awaiting a response from
	// eBay customer support.
	//
	SNADCaseStatusTypeOTHERPARTYCONTACTEDCSAWAITINGRESPONSE SNADCaseStatusType = "OTHERPARTYCONTACTEDCSAWAITINGRESPONSE"

	//
	// The user (caller) contacted eBay customer support to discuss a closed
	// case.
	//
	SNADCaseStatusTypeYOUCONTACTEDCSABOUTCLOSEDCASE SNADCaseStatusType = "YOUCONTACTEDCSABOUTCLOSEDCASE"

	//
	// The disputed amount in the case has been paid.
	//
	SNADCaseStatusTypePAID SNADCaseStatusType = "PAID"

	//
	// A payment is due from the user (caller).
	//
	SNADCaseStatusTypeMYPAYMENTDUE SNADCaseStatusType = "MYPAYMENTDUE"

	//
	// The life of the case has expired.
	//
	SNADCaseStatusTypeEXPIRED SNADCaseStatusType = "EXPIRED"

	//
	// Based on the status of the case, this value can indicate that the buyer is
	// awaiting a replacement item from the seller, or the seller is awaiting the
	// return shipment from the buyer.
	//
	SNADCaseStatusTypeWAITINGDELIVERY SNADCaseStatusType = "WAITINGDELIVERY"

	//
	// The status of the case is classifed as 'other'.
	//
	SNADCaseStatusTypeOTHER SNADCaseStatusType = "OTHER"
)

type EBPINRCaseStatusType string

const (

	//
	// Case has been closed by eBay customer support.
	//
	EBPINRCaseStatusTypeCSCLOSED EBPINRCaseStatusType = "CSCLOSED"

	//
	// Case is closed.
	//
	EBPINRCaseStatusTypeCLOSED EBPINRCaseStatusType = "CLOSED"

	//
	// A response is due from the other party in the case.
	//
	EBPINRCaseStatusTypeOTHERPARTYRESPONSEDUE EBPINRCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response is due from the user (caller).
	//
	EBPINRCaseStatusTypeMYRESPONSEDUE EBPINRCaseStatusType = "MYRESPONSEDUE"

	//
	// The user (caller) has contacted and is awaiting a response from eBay customer
	// support.
	//
	EBPINRCaseStatusTypeYOUCONTACTEDCSAWAITINGRESPONSE EBPINRCaseStatusType = "YOUCONTACTEDCSAWAITINGRESPONSE"

	//
	// The other party in the case has contacted and is awaiting a response from
	// eBay customer support.
	//
	EBPINRCaseStatusTypeOTHERPARTYCONTACTEDCSAWAITINGRESPONSE EBPINRCaseStatusType = "OTHERPARTYCONTACTEDCSAWAITINGRESPONSE"

	//
	// The user (caller) contacted eBay customer support to discuss a closed
	// case.
	//
	EBPINRCaseStatusTypeYOUCONTACTEDCSABOUTCLOSEDCASE EBPINRCaseStatusType = "YOUCONTACTEDCSABOUTCLOSEDCASE"

	//
	// The disputed amount in the case has been paid.
	//
	EBPINRCaseStatusTypePAID EBPINRCaseStatusType = "PAID"

	//
	// A payment is due from the user (caller).
	//
	EBPINRCaseStatusTypeMYPAYMENTDUE EBPINRCaseStatusType = "MYPAYMENTDUE"

	//
	// The life of the case has expired.
	//
	EBPINRCaseStatusTypeEXPIRED EBPINRCaseStatusType = "EXPIRED"

	//
	// eBay customer support responded to a closed case.
	//
	EBPINRCaseStatusTypeCASECLOSEDCSRESPONDED EBPINRCaseStatusType = "CASECLOSEDCSRESPONDED"

	//
	// The status of the case is classified as 'other'.
	//
	EBPINRCaseStatusTypeOTHER EBPINRCaseStatusType = "OTHER"
)

type EBPSNADCaseStatusType string

const (

	//
	// Case has been closed by eBay customer support.
	//
	EBPSNADCaseStatusTypeCSCLOSED EBPSNADCaseStatusType = "CSCLOSED"

	//
	// Case is closed.
	//
	EBPSNADCaseStatusTypeCLOSED EBPSNADCaseStatusType = "CLOSED"

	//
	// A response is due from the other party in the case.
	//
	EBPSNADCaseStatusTypeOTHERPARTYRESPONSEDUE EBPSNADCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response is due from the user (caller).
	//
	EBPSNADCaseStatusTypeMYRESPONSEDUE EBPSNADCaseStatusType = "MYRESPONSEDUE"

	//
	// The user (caller) has contacted and is awaiting a response from eBay customer
	// support.
	//
	EBPSNADCaseStatusTypeYOUCONTACTEDCSAWAITINGRESPONSE EBPSNADCaseStatusType = "YOUCONTACTEDCSAWAITINGRESPONSE"

	//
	// The other party in the eBP SNAD case has contacted customer support and is
	// awaiting a response.
	//
	EBPSNADCaseStatusTypeOTHERPARTYCONTACTEDCSAWAITINGRESPONSE EBPSNADCaseStatusType = "OTHERPARTYCONTACTEDCSAWAITINGRESPONSE"

	//
	// The user in the eBP SNAD case has contacted customer support regarding a
	// closed case.
	//
	EBPSNADCaseStatusTypeYOUCONTACTEDCSABOUTCLOSEDCASE EBPSNADCaseStatusType = "YOUCONTACTEDCSABOUTCLOSEDCASE"

	//
	// The disputed amount in the eBP SNAD case has been paid.
	//
	EBPSNADCaseStatusTypePAID EBPSNADCaseStatusType = "PAID"

	//
	// The user's payment in the eBP SNAD case is due.
	//
	EBPSNADCaseStatusTypeMYPAYMENTDUE EBPSNADCaseStatusType = "MYPAYMENTDUE"

	//
	// The life of the eBP SNAD case has expired.
	//
	EBPSNADCaseStatusTypeEXPIRED EBPSNADCaseStatusType = "EXPIRED"

	//
	// The user is awaiting the return shipment of the item(s) in the eBP SNAD case.
	//
	EBPSNADCaseStatusTypeWAITINGDELIVERY EBPSNADCaseStatusType = "WAITINGDELIVERY"

	//
	// Customer Support responded to closed case.
	//
	EBPSNADCaseStatusTypeCASECLOSEDCSRESPONDED EBPSNADCaseStatusType = "CASECLOSEDCSRESPONDED"

	//
	// The status of the eBP SNAD case is 'other'.
	//
	EBPSNADCaseStatusTypeOTHER EBPSNADCaseStatusType = "OTHER"
)

type UPICaseStatusType string

const (

	//
	// The Unpaid Item case has been closed by customer service.
	//
	UPICaseStatusTypeCSCLOSED UPICaseStatusType = "CSCLOSED"

	//
	// A closed Unpaid Item case.
	//
	UPICaseStatusTypeCLOSED UPICaseStatusType = "CLOSED"

	//
	// A response from the other party in the Unpaid Item case is due.
	//
	UPICaseStatusTypeOTHERPARTYRESPONSEDUE UPICaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response from the user in the Unpaid Item case is due.
	//
	UPICaseStatusTypeMYRESPONSEDUE UPICaseStatusType = "MYRESPONSEDUE"

	//
	// The Unpaid Item case has been closed with a Final Value Fee credit applied to
	// the winning party's account and a strike applied against the party at
	// fault.
	//
	UPICaseStatusTypeCLOSEDFVFCREDITSTRIKE UPICaseStatusType = "CLOSEDFVFCREDITSTRIKE"

	//
	// The Unpaid Item case has been closed with a Final Value Fee credit applied to
	// the winning party's account but with no strike applied against the party
	// at fault.
	//
	UPICaseStatusTypeCLOSEDFVFCREDITNOSTRIKE UPICaseStatusType = "CLOSEDFVFCREDITNOSTRIKE"

	//
	// The user's payment in the Unpaid Item case is due.
	//
	UPICaseStatusTypeMYPAYMENTDUE UPICaseStatusType = "MYPAYMENTDUE"

	//
	// The Unpaid Item case has been closed with no Final Value Fee credit applied to
	// the winning party's account but with a strike applied against the party
	// at fault.
	//
	UPICaseStatusTypeCLOSEDNOFVFCREDITSTRIKE UPICaseStatusType = "CLOSEDNOFVFCREDITSTRIKE"

	//
	// The Unpaid Item case has been closed with no Final Value Fee credit applied to
	// the winning party's account and no strike applied against the party at
	// fault.
	//
	UPICaseStatusTypeCLOSEDNOFVFCREDITNOSTRIKE UPICaseStatusType = "CLOSEDNOFVFCREDITNOSTRIKE"

	//
	// The life of the Unpaid Item case has expired.
	//
	UPICaseStatusTypeEXPIRED UPICaseStatusType = "EXPIRED"

	//
	// The status of the Unpaid Item case is 'other'.
	//
	UPICaseStatusTypeOTHER UPICaseStatusType = "OTHER"
)

type CancelTransactionCaseStatusType string

const (

	//
	// Cancel Transaction case has been closed by customer service.
	//
	CancelTransactionCaseStatusTypeCSCLOSED CancelTransactionCaseStatusType = "CSCLOSED"

	//
	// Closed Cancel Transaction case.
	//
	CancelTransactionCaseStatusTypeCLOSED CancelTransactionCaseStatusType = "CLOSED"

	//
	// A response from the other party in the Cancel Transaction case is due.
	//
	CancelTransactionCaseStatusTypeOTHERPARTYRESPONSEDUE CancelTransactionCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response from the user in the Cancel Transaction case is due.
	//
	CancelTransactionCaseStatusTypeMYRESPONSEDUE CancelTransactionCaseStatusType = "MYRESPONSEDUE"

	//
	// The life of the Cancel Transaction case has expired.
	//
	CancelTransactionCaseStatusTypeEXPIRED CancelTransactionCaseStatusType = "EXPIRED"

	//
	// The Cancel Transaction case has been closed with a Final Value Fee (FVF)
	// credit applied to the seller's account.
	//
	CancelTransactionCaseStatusTypeCLOSEDFVFCREDIT CancelTransactionCaseStatusType = "CLOSEDFVFCREDIT"

	//
	// The Cancel Transaction case has been closed with no Final Value Fee (FVF)
	// credit applied to the seller's account.
	//
	CancelTransactionCaseStatusTypeCLOSEDNOFVFCREDIT CancelTransactionCaseStatusType = "CLOSEDNOFVFCREDIT"

	//
	// The Cancel Transaction case has been cancelled.
	//
	CancelTransactionCaseStatusTypeCANCELLED CancelTransactionCaseStatusType = "CANCELLED"

	//
	// The status of the Cancel Transaction case is 'other'.
	//
	CancelTransactionCaseStatusTypeOTHER CancelTransactionCaseStatusType = "OTHER"
)

type ReturnCaseStatusType string

const (

	//
	// Returned Item case has been closed by customer service.
	//
	ReturnCaseStatusTypeCSCLOSED ReturnCaseStatusType = "CSCLOSED"

	//
	// Closed Returned Item case.
	//
	ReturnCaseStatusTypeCLOSED ReturnCaseStatusType = "CLOSED"

	//
	// A response from the other party in the Returned Item case is due.
	//
	ReturnCaseStatusTypeOTHERPARTYRESPONSEDUE ReturnCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response from the user in the Returned Item case is due.
	//
	ReturnCaseStatusTypeMYRESPONSEDUE ReturnCaseStatusType = "MYRESPONSEDUE"

	//
	// The life of the Returned Item case has expired.
	//
	ReturnCaseStatusTypeEXPIRED ReturnCaseStatusType = "EXPIRED"

	//
	// The Returned Item case has been closed with a Final Value Fee (FVF)
	// credit applied to the buyer's account and a strike applied against
	// the party at fault.
	//
	ReturnCaseStatusTypeCLOSEDFVFCREDITSTRIKE ReturnCaseStatusType = "CLOSEDFVFCREDITSTRIKE"

	//
	// The status of the Returned Item case is 'other'.
	//
	ReturnCaseStatusTypeOTHER ReturnCaseStatusType = "OTHER"
)

type PaypalINRCaseStatusType string

const (

	//
	// An open PayPal Item Not Received case.
	//
	PaypalINRCaseStatusTypeOPEN PaypalINRCaseStatusType = "OPEN"

	//
	// A closed PayPal Item Not Received case.
	//
	PaypalINRCaseStatusTypeCLOSED PaypalINRCaseStatusType = "CLOSED"

	//
	// A response from the other party in the PayPal Item Not Received case is due.
	//
	PaypalINRCaseStatusTypeOTHERPARTYRESPONSEDUE PaypalINRCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response from the user in the PayPal Item Not Received case is due.
	//
	PaypalINRCaseStatusTypeMYRESPONSEDUE PaypalINRCaseStatusType = "MYRESPONSEDUE"

	//
	// The status of the PayPal Item Not Received case is 'other'.
	//
	PaypalINRCaseStatusTypeOTHER PaypalINRCaseStatusType = "OTHER"
)

type PaypalSNADCaseStatusType string

const (

	//
	// The case is open.
	//
	PaypalSNADCaseStatusTypeOPEN PaypalSNADCaseStatusType = "OPEN"

	//
	// The case is closed.
	//
	PaypalSNADCaseStatusTypeCLOSED PaypalSNADCaseStatusType = "CLOSED"

	//
	// A response is due from the other party in the case.
	//
	PaypalSNADCaseStatusTypeOTHERPARTYRESPONSEDUE PaypalSNADCaseStatusType = "OTHERPARTYRESPONSEDUE"

	//
	// A response is due from the user (caller).
	//
	PaypalSNADCaseStatusTypeMYRESPONSEDUE PaypalSNADCaseStatusType = "MYRESPONSEDUE"

	//
	// The status of the case is classified as 'other'.
	//
	PaypalSNADCaseStatusTypeOTHER PaypalSNADCaseStatusType = "OTHER"
)

type RefundStatusType string

const (

	//
	// Indicates a successful full refund to the buyer through PayPal.
	//
	RefundStatusTypeSUCCESS RefundStatusType = "SUCCESS"

	//
	// This value is always returned if the refund is not being handled in the
	// PayPal system. Non-PayPal transactions cannot be tracked by eBay. If AGREED
	// is returned, the <b>refundDate</b> field is also returned. The
	// <b>refundDate</b> gives the buyer an approximate date of the
	// actual refund transaction.
	//
	RefundStatusTypeAGREED RefundStatusType = "AGREED"

	//
	// Indicates that the full refund to the buyer through PayPal was unsuccessful.
	// This does not indicate that the call request failed. If FAILED is returned,
	// it is recommended that the seller make a subsequent call at a later time.
	//
	RefundStatusTypeFAILED RefundStatusType = "FAILED"
)

type SellerINREscalationReasonType string

const (

	//
	// This value is passed into the
	// <b>escalationReason.sellerINRReason</b> field of the <b>
	// escalateToCustomerSupport</b> request if the seller issued a refund to
	// the buyer, but the buyer is still not satisfied.
	//
	SellerINREscalationReasonTypeBUYERSTILLUNHAPPYAFTERREFUND SellerINREscalationReasonType = "BUYERSTILLUNHAPPYAFTERREFUND"

	//
	// This value is passed into the
	// <b>escalationReason.sellerINRReason</b> field of the <b>
	// escalateToCustomerSupport</b> request if the seller is having trouble
	// communicating with the buyer.
	//
	SellerINREscalationReasonTypeTROUBLECOMMUNICATIONWITHBUYER SellerINREscalationReasonType = "TROUBLECOMMUNICATIONWITHBUYER"

	//
	// This value is passed into the
	// <b>escalationReason.sellerINRReason</b> field of the <b>
	// escalateToCustomerSupport</b> request if the seller has already shipped
	// the item to the buyer and provided tracking information.
	//
	SellerINREscalationReasonTypeITEMSHIPPEDWITHTRACKING SellerINREscalationReasonType = "ITEMSHIPPEDWITHTRACKING"

	//
	// This value is passed into the
	// <b>escalationReason.sellerINRReason</b> field of the <b>
	// escalateToCustomerSupport</b> request if the seller is escalating the
	// case for any other reason besides the other three reasons defined in
	// <b>SellerINREscalationReasonType</b>. If this value is used, it
	// is recommended that the seller also use the <b>comments</b> field
	// in the <b>escalateToCustomerSupport</b> request to justify and
	// support the escalation reason.
	//
	SellerINREscalationReasonTypeOTHER SellerINREscalationReasonType = "OTHER"
)

type SellerSNADEscalationReasonType string

const (

	//
	// This value is passed into the <b>escalationReason.sellerSNADReason</b>
	// field of the <b>escalateToCustomerSupport</b> request if the
	// seller issued a refund to the buyer, but the buyer is still not satisfied.
	//
	SellerSNADEscalationReasonTypeBUYERSTILLUNHAPPYAFTERREFUND SellerSNADEscalationReasonType = "BUYERSTILLUNHAPPYAFTERREFUND"

	//
	// This value is passed into the <b>escalationReason.sellerSNADReason</b>
	// field of the <b>escalateToCustomerSupport</b> request if the
	// seller is having trouble communicating with the buyer.
	//
	SellerSNADEscalationReasonTypeTROUBLECOMMUNICATIONWITHBUYER SellerSNADEscalationReasonType = "TROUBLECOMMUNICATIONWITHBUYER"

	//
	// This value is passed into the <b>escalationReason.sellerSNADReason</b>
	// field of the <b>escalateToCustomerSupport</b> request if
	// the seller is escalating the case for any other reason besides the other
	// three reasons defined in <b>SellerSNADEscalationReasonType</b>.
	// If this value is used, it is recommended that the seller also use the
	// <b>comments</b> field in the
	// <b>escalateToCustomerSupport</b> request to justify and support
	// the escalation reason.
	//
	SellerSNADEscalationReasonTypeOTHER SellerSNADEscalationReasonType = "OTHER"
)

type BuyerINREscalationReasonType string

const (

	//
	// For future use.
	//
	//
	BuyerINREscalationReasonTypeSELLERNORESPONSE BuyerINREscalationReasonType = "SELLERNORESPONSE"

	//
	// For future use.
	//
	//
	BuyerINREscalationReasonTypeTROUBLECOMMUNICATIONWITHSELLER BuyerINREscalationReasonType = "TROUBLECOMMUNICATIONWITHSELLER"

	//
	// For future use.
	//
	//
	BuyerINREscalationReasonTypeITEMNOTRECEIVED BuyerINREscalationReasonType = "ITEMNOTRECEIVED"

	//
	// For future use.
	//
	//
	BuyerINREscalationReasonTypeOTHER BuyerINREscalationReasonType = "OTHER"
)

type BuyerSNADEscalationReasonType string

const (

	//
	// For future use.
	//
	//
	BuyerSNADEscalationReasonTypeSELLERNORESPONSE BuyerSNADEscalationReasonType = "SELLERNORESPONSE"

	//
	// For future use.
	//
	//
	BuyerSNADEscalationReasonTypeTROUBLECOMMUNICATIONWITHSELLER BuyerSNADEscalationReasonType = "TROUBLECOMMUNICATIONWITHSELLER"

	//
	// For future use.
	//
	//
	BuyerSNADEscalationReasonTypeOTHER BuyerSNADEscalationReasonType = "OTHER"
)

type AppealReasonType string

const (

	//
	// This value is passed into the <b>appealReason</b> field of the
	// <b>appealToCustomerSupport</b> request if the seller has new
	// information on the case not previously considered by eBay customer support.
	//
	AppealReasonTypeNEWINFORMATION AppealReasonType = "NEWINFORMATION"

	//
	// This value is passed into the <b>appealReason</b> field of the
	// <b>appealToCustomerSupport</b> request if the seller disagrees
	// with the case decision made by eBay customer support.
	//
	AppealReasonTypeDISAGREEWITHFINALDECISION AppealReasonType = "DISAGREEWITHFINALDECISION"

	//
	// This value is passed into the <b>appealReason</b> field of the
	// <b>appealToCustomerSupport</b> request if the seller's reason for
	// escalating the case is for any other reason besides the other two reasons
	// defined in <b>AppealReasonType</b>. If this value is used, it is
	// recommended that the seller also use the <b>comments</b> field in
	// the <b>appealToCustomerSupport</b> request to justify and support
	// the appeal reason.
	//
	AppealReasonTypeOTHER AppealReasonType = "OTHER"
)

type IsoCurrencyCode string

const (
	IsoCurrencyCodeUSD IsoCurrencyCode = "USD"

	IsoCurrencyCodeCAD IsoCurrencyCode = "CAD"

	IsoCurrencyCodeGBP IsoCurrencyCode = "GBP"

	IsoCurrencyCodeDEM IsoCurrencyCode = "DEM"

	IsoCurrencyCodeAUD IsoCurrencyCode = "AUD"

	IsoCurrencyCodeJPY IsoCurrencyCode = "JPY"

	IsoCurrencyCodeEUR IsoCurrencyCode = "EUR"

	IsoCurrencyCodeFRF IsoCurrencyCode = "FRF"

	IsoCurrencyCodeATS IsoCurrencyCode = "ATS"

	IsoCurrencyCodeBEF IsoCurrencyCode = "BEF"

	IsoCurrencyCodeCHF IsoCurrencyCode = "CHF"

	IsoCurrencyCodeCNY IsoCurrencyCode = "CNY"

	IsoCurrencyCodeCZK IsoCurrencyCode = "CZK"

	IsoCurrencyCodeDKK IsoCurrencyCode = "DKK"

	IsoCurrencyCodeESP IsoCurrencyCode = "ESP"

	IsoCurrencyCodeFIM IsoCurrencyCode = "FIM"

	IsoCurrencyCodeGRD IsoCurrencyCode = "GRD"

	IsoCurrencyCodeHKD IsoCurrencyCode = "HKD"

	IsoCurrencyCodeHUF IsoCurrencyCode = "HUF"

	IsoCurrencyCodeIDR IsoCurrencyCode = "IDR"

	IsoCurrencyCodeIEP IsoCurrencyCode = "IEP"

	IsoCurrencyCodeILS IsoCurrencyCode = "ILS"

	IsoCurrencyCodeITL IsoCurrencyCode = "ITL"

	IsoCurrencyCodeNLG IsoCurrencyCode = "NLG"

	IsoCurrencyCodeNOK IsoCurrencyCode = "NOK"

	IsoCurrencyCodeNZD IsoCurrencyCode = "NZD"

	IsoCurrencyCodePHP IsoCurrencyCode = "PHP"

	IsoCurrencyCodePLN IsoCurrencyCode = "PLN"

	IsoCurrencyCodePTE IsoCurrencyCode = "PTE"

	IsoCurrencyCodeRUR IsoCurrencyCode = "RUR"

	IsoCurrencyCodeSEK IsoCurrencyCode = "SEK"

	IsoCurrencyCodeSGD IsoCurrencyCode = "SGD"

	IsoCurrencyCodeTHB IsoCurrencyCode = "THB"

	IsoCurrencyCodeTWD IsoCurrencyCode = "TWD"

	IsoCurrencyCodeZAR IsoCurrencyCode = "ZAR"

	IsoCurrencyCodeINR IsoCurrencyCode = "INR"

	IsoCurrencyCodePEN IsoCurrencyCode = "PEN"

	IsoCurrencyCodeMYR IsoCurrencyCode = "MYR"

	IsoCurrencyCodeVND IsoCurrencyCode = "VND"

	IsoCurrencyCodeKRW IsoCurrencyCode = "KRW"

	IsoCurrencyCodeTRY IsoCurrencyCode = "TRY"

	IsoCurrencyCodeANG IsoCurrencyCode = "ANG"

	IsoCurrencyCodeAWG IsoCurrencyCode = "AWG"

	IsoCurrencyCodeBMD IsoCurrencyCode = "BMD"

	IsoCurrencyCodeCRC IsoCurrencyCode = "CRC"

	IsoCurrencyCodeRON IsoCurrencyCode = "RON"

	IsoCurrencyCodeVEF IsoCurrencyCode = "VEF"

	IsoCurrencyCodeBBD IsoCurrencyCode = "BBD"

	IsoCurrencyCodeBGN IsoCurrencyCode = "BGN"

	IsoCurrencyCodeBND IsoCurrencyCode = "BND"

	IsoCurrencyCodeBSD IsoCurrencyCode = "BSD"

	IsoCurrencyCodeCOP IsoCurrencyCode = "COP"

	IsoCurrencyCodeDOP IsoCurrencyCode = "DOP"

	IsoCurrencyCodeGTQ IsoCurrencyCode = "GTQ"

	IsoCurrencyCodeKYD IsoCurrencyCode = "KYD"

	IsoCurrencyCodeMVR IsoCurrencyCode = "MVR"

	IsoCurrencyCodeQAR IsoCurrencyCode = "QAR"

	IsoCurrencyCodeSAR IsoCurrencyCode = "SAR"

	IsoCurrencyCodeTTD IsoCurrencyCode = "TTD"

	IsoCurrencyCodeUAH IsoCurrencyCode = "UAH"

	IsoCurrencyCodeUYU IsoCurrencyCode = "UYU"

	IsoCurrencyCodeXCD IsoCurrencyCode = "XCD"

	IsoCurrencyCodeXPF IsoCurrencyCode = "XPF"

	IsoCurrencyCodeJMD IsoCurrencyCode = "JMD"
)

type AppealDecisionType string

const (

	//
	// An absolute win for the buyer on the appeal of the case.
	//
	AppealDecisionTypeBUYERWINS AppealDecisionType = "BUYERWINS"

	//
	// The buyer wins partial credit on the appeal of the case.
	//
	AppealDecisionTypeBUYERWINSPARTIALCREDIT AppealDecisionType = "BUYERWINSPARTIALCREDIT"

	//
	// The buyer has been denied on the appeal and the original decision on the
	// case stands.
	//
	AppealDecisionTypeBUYERDENIED AppealDecisionType = "BUYERDENIED"

	//
	// An absolute win for the seller on the appeal of the case.
	//
	AppealDecisionTypeSELLERWINS AppealDecisionType = "SELLERWINS"

	//
	// The seller wins partial credit on the appeal of the case.
	//
	AppealDecisionTypeSELLERWINSPARTIALCREDIT AppealDecisionType = "SELLERWINSPARTIALCREDIT"

	//
	// The seller has been denied on the appeal and the original decision on the
	// case stands.
	//
	AppealDecisionTypeSELLERDENIED AppealDecisionType = "SELLERDENIED"

	//
	// The decision on the appeal has been classified as "other".
	//
	AppealDecisionTypeOTHER AppealDecisionType = "OTHER"
)

type MoneyMovementType string

const (

	//
	// A refund against a specific money movement transaction to the seller or
	// buyer.
	//
	MoneyMovementTypeREFUND MoneyMovementType = "REFUND"

	//
	// A refund to the seller or buyer.
	//
	MoneyMovementTypePAYOUT MoneyMovementType = "PAYOUT"

	//
	// A charge against the seller.
	//
	MoneyMovementTypeREIMBURSEMENT MoneyMovementType = "REIMBURSEMENT"

	//
	// A reversal against a refund, payout, or reimbursement.
	//
	MoneyMovementTypeREVERSAL MoneyMovementType = "REVERSAL"

	//
	// A money movement transaction classified as "other".
	//
	MoneyMovementTypeOTHER MoneyMovementType = "OTHER"
)

type MoneyMovementStatusType string

const (

	//
	// Indicates a successful money movement transaction. If SUCCESS is returned, no
	// additional money movement transactions are expected.
	//
	MoneyMovementStatusTypeSUCCESS MoneyMovementStatusType = "SUCCESS"

	//
	// Indicates a cancelled money movement transaction.
	//
	MoneyMovementStatusTypeCANCELLED MoneyMovementStatusType = "CANCELLED"

	//
	// Indicates a successful money movement transaction. If COMPLETED is returned,
	// additional money movement transactions are expected.
	//
	MoneyMovementStatusTypeCOMPLETED MoneyMovementStatusType = "COMPLETED"
)

type PaymentMethodType string

const (

	//
	// PayPal is the selected payment method for the money movement transaction. If
	// PayPal is the selected payment method, the
	// <b>paypalTransactionId</b> field will be returned after
	// completion of the money movement transaction.
	//
	PaymentMethodTypePAYPAL PaymentMethodType = "PAYPAL"

	//
	// A credit card is the selected payment method for the money movement
	// transaction.
	//
	PaymentMethodTypeCREDITCARD PaymentMethodType = "CREDITCARD"

	//
	// Direct debit is the selected payment method for the money movement
	// transaction.
	//
	PaymentMethodTypeDIRECTDEBIT PaymentMethodType = "DIRECTDEBIT"

	//
	// The selected payment method for the money movement transaction is classified
	// as "other".
	//
	PaymentMethodTypeOTHER PaymentMethodType = "OTHER"
)

type NotificationEventNameType string

const (

	//
	// This notification type is sent to the subscribed user or application when
	// a response to a case is due from the calling party.
	//
	NotificationEventNameTypeEBPMyResponseDue NotificationEventNameType = "EBPMyResponseDue"

	//
	// This notification type is sent to the subscribed user or application when
	// a response to a case is due from the other party.
	//
	NotificationEventNameTypeEBPOtherPartyResponseDue NotificationEventNameType = "EBPOtherPartyResponseDue"

	//
	// This notification type is sent to the subscribed user or application when
	// an open case is escalated.
	//
	NotificationEventNameTypeEBPEscalatedCase NotificationEventNameType = "EBPEscalatedCase"

	//
	// This notification type is sent to the subscribed user or application when
	// an appeal is made on a closed case.
	//
	NotificationEventNameTypeEBPAppealedCase NotificationEventNameType = "EBPAppealedCase"

	//
	// This notification type is sent to the subscribed user or application when
	// a payment (related to the case) is due from the calling party.
	//
	NotificationEventNameTypeEBPMyPaymentDue NotificationEventNameType = "EBPMyPaymentDue"

	//
	// This notification type is sent to the subscribed user or application when
	// a payment (related to the case) from the calling party has been processed.
	//
	NotificationEventNameTypeEBPPaymentDone NotificationEventNameType = "EBPPaymentDone"

	//
	// This notification type is sent to the subscribed user or application when
	// a case appeal is closed.
	//
	NotificationEventNameTypeEBPClosedAppeal NotificationEventNameType = "EBPClosedAppeal"

	//
	// This notification type is sent to the subscribed user or application when
	// a case is closed.
	//
	NotificationEventNameTypeEBPClosedCase NotificationEventNameType = "EBPClosedCase"

	//
	// This notification type is sent to the subscribed user or application when
	// a case is put on hold.
	//
	NotificationEventNameTypeEBPOnHoldCase NotificationEventNameType = "EBPOnHoldCase"
)

type BaseRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services BaseRequest"`

	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type BaseResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services BaseResponse"`

	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Information for an error or warning that occurred when eBay processed the
	// request. This field is not returned if the ack value is Success.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The version of the response payload schema. Indicates the version of the schema that eBay used to process the request.
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the request. The time zone of this value is GMT and the format is the ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ). See Time Values in the eBay Web Services guide for information about this time format and converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`

	//
	// Reserved for future use.
	//
	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain in which the error occurred.
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Name of the subdomain in which the error occurred.
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Indicates whether the reported problem is fatal (an error) or is less- severe (a warning). Review the error message details for information on the cause.
	// <br>
	// <br>
	// If the request fails and the application is the source of the error (for example, a required element is missing), update the application before you retry the request. If the problem is due to incorrect user data, alert the end-user to the problem and provide the means for them to correct the data. Once the problem in the application or data is resolved, re-send the request to eBay.
	// <br>
	// <br>
	// If the source of the problem is on eBay's side, you can retry the request a reasonable number of times (eBay recommends you try the request twice). If the error persists, contact Developer Technical Support. Once the problem has been resolved, you can resend the request in its original form.
	// <br>
	// <br>
	// If a warning occurs, warning information is returned in addition to the business data. Normally, you do not need to resend the request (as the original request was successful). However, depending on the cause of the warning, you might need to contact the end user, or eBay, to effect a long term solution to the problem.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application errors, and system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that caused the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Various warning and error messages return one or more variables that contain contextual information about the error. This is often the field or value that triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ErrorParameter"`

	Value string

	//
	// The name of the input parameter returned with the error. Inspecting the parameter (or its input value) will often aid in understanding the cause of the error. Not all error messages contain this value.
	//
	Name string `xml:"name,attr,omitempty"`
}

type ExtensionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ExtensionType"`

	//
	// Reserved for future use.
	//
	Id *PositiveInteger `xml:"id,omitempty"`

	//
	// Reserved for future use.
	//
	Version string `xml:"version,omitempty"`

	//
	// Reserved for future use.
	//
	ContentType string `xml:"contentType,omitempty"`

	//
	// Reserved for future use.
	//
	Value string `xml:"value,omitempty"`
}

type GetVersionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetVersionRequest"`

	*BaseRequest
}

type GetVersionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetVersionResponse"`

	*BaseResponse
}

type GetUserCasesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetUserCasesRequest"`

	*BaseRequest

	//
	// This filter restricts results to cases filed against a specific item listing or a
	// specific order line item. If the <b>itemFilter.transactionId</b>
	// field is specified, a maximum of one case will be returned since there can only
	// be one case per order line item.
	//
	ItemFilter *ItemFilterType `xml:"itemFilter,omitempty"`

	//
	// This filter restricts results to cases created within a specified date
	// range. The specified date range is inclusive. The maximum date range that
	// can be specified with this filter is 90 days. Cases with creation dates
	// dating back more than 18 months cannot be returned. If you want to retrieve
	// cases for a period longer than 90 days, you have to make multiple
	// <b>getUserCases</b> calls using this filter and specifying
	// different date ranges in each subsequent call.
	//
	CreationDateRangeFilter *DateRangeFilterType `xml:"creationDateRangeFilter,omitempty"`

	//
	// Container element for case type filters. One or more
	// <b>caseType</b> elements may be used. The <b>
	// caseTypeFilter</b> field uses Boolean OR logic, which means all
	// specified and matching case types are returned. There are nine possible
	// case types to retrieve.
	//
	CaseTypeFilter *CaseTypeFilterType `xml:"caseTypeFilter,omitempty"`

	//
	// Container element for case status filters. One or more <b>
	// caseStatus</b> elements may be used. The
	// <b>caseStatusFilter</b> field uses Boolean OR logic, which
	// means all matching case statuses are returned. There are
	// six possible case statuses to retrieve.
	//
	CaseStatusFilter *CaseStatusFilterType `xml:"caseStatusFilter,omitempty"`

	//
	// Controls the pagination of the result set, including the number of cases
	// returned per page and the page number you want returned in the output.
	//
	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`

	//
	// Sorts the results based on creation date or case status, in ascending or
	// descending order. Results are returned based on case creation date in
	// ascending order if this field is not included in the request.
	//
	SortOrder *CaseSortOrderType `xml:"sortOrder,omitempty"`
}

type GetUserCasesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetUserCasesResponse"`

	*BaseResponse

	//
	// Root container for all cases and disputes in which the caller is involved
	// either as the seller or buyer. There can be one or more <b>caseSummary<
	// /b> nodes under the <b>cases</b> container.
	//
	Cases *CaseArrayType `xml:"cases,omitempty"`

	//
	// Container consisting of fields that indicate the total number
	// of pages and cases that match the input criteria, the number of cases appearing
	// on each page, and the current page number being viewed.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`
}

type GetEBPCaseDetailRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetEBPCaseDetailRequest"`

	*BaseRequest

	//
	// This container is used to identify and retrieve a specific eBay Buyer Protection
	// case opened by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`
}

type GetEBPCaseDetailResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetEBPCaseDetailResponse"`

	*BaseResponse

	//
	// Container consisting of high-level information on the eBay Buyer
	// Protection Item Not Received or Significantly Not As Described case.
	//
	CaseSummary *CaseSummaryType `xml:"caseSummary,omitempty"`

	//
	// Container consisting of detailed information for the eBay Buyer Protection case,
	// including information on case decisions, appeal decisions, all activities logged
	// in the case, and payment details.
	//
	CaseDetail *EBPCaseDetailType `xml:"caseDetail,omitempty"`
}

type GetActivityOptionsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetActivityOptionsRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`
}

type GetActivityOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services GetActivityOptionsResponse"`

	*BaseResponse

	//
	// Container consisting of one or more activity options that a seller is
	// eligible to perform to move toward resolving the case. The eligible
	// activity options are based on case type and status.
	//
	ActivityOptions *ActivityOptionListType `xml:"activityOptions,omitempty"`
}

type IssueFullRefundRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services IssueFullRefundRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// This optional field allows the seller to add a comment intended to be read by the
	// buyer receiving the refund. For example, the seller might add a comment such as
	// this in the field: "Here is your full refund of the item."
	//
	Comments string `xml:"comments,omitempty"`
}

type IssueFullRefundResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services IssueFullRefundResponse"`

	*BaseResponse

	//
	// This enumeration value indicates the result of the full refund operation.
	//
	FullRefundStatus *RefundStatusType `xml:"fullRefundStatus,omitempty"`

	//
	// This field is only returned if <b>fullRefundStatus</b> is
	// AGREED. The date in this field indicates the approximate date that the
	// non-PayPal refund transaction will be processed.
	//
	RefundDate time.Time `xml:"refundDate,omitempty"`
}

type ProvideTrackingInfoRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideTrackingInfoRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The shipment tracking number. eBay checks to verify that the tracking
	// number is consistent with the numbering scheme used by the specified
	// shipping carrier, but eBay cannot verify that the tracking number is
	// accurate. Accuracy is the responsibility of the seller.
	//
	TrackingNumber string `xml:"trackingNumber,omitempty"`

	//
	// The shipping carrier being used by the seller to ship the package to the buyer.
	//
	CarrierUsed string `xml:"carrierUsed,omitempty"`

	//
	// This optional field allows the seller to add a comment intended to be read by the
	// buyer receiving the tracking information. For example, the seller might add a
	// comment such as this in the field: "Here is the shipment tracking number that
	// you requested."
	//
	Comments string `xml:"comments,omitempty"`
}

type ProvideTrackingInfoResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideTrackingInfoResponse"`

	*BaseResponse
}

type ProvideReturnInfoRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideReturnInfoRequest"`

	*BaseRequest

	//
	// Container consisting of the seller's return address. The street
	// (<b>address.street1</b>), city, state/province, and postal code of the seller's
	// shipping address are required. The <b>name</b>, <b>country</b>, and <b>street2</b>
	// fields are optional. The <b>county</b> field is not used.
	//
	Address *Address `xml:"address,omitempty"`

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// If applicable and requested by the buyer, the seller can provide the Return
	// Merchandise Authorization number to the buyer.
	//
	ReturnMerchandiseAuthorization string `xml:"returnMerchandiseAuthorization,omitempty"`
}

type ProvideReturnInfoResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideReturnInfoResponse"`

	*BaseResponse
}

type OfferOtherSolutionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OfferOtherSolutionRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The seller writes a customized message in this field to the buyer suggesting
	// one or more suggested solutions for resolving the eBay Buyer Protection case.
	//
	MessageToBuyer string `xml:"messageToBuyer,omitempty"`
}

type OfferOtherSolutionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OfferOtherSolutionResponse"`

	*BaseResponse
}

type EscalateToCustomerSupportRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EscalateToCustomerSupportRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// This container holds the reason why the seller is escalating an open case
	// to eBay customer support. Based on whether it is an Item Not Received or
	// Significantly Not As Described case, the seller will include either the
	// <b>sellerINRReason</b> or <b>sellerSNADReason</b>
	// field under the <b>escalationReason</b> container.
	//
	EscalationReason *EscalationReasonType `xml:"escalationReason,omitempty"`

	//
	// This optional field allows the seller to add a supporting comment to justify the
	// escalation reason. This comment is intended to be read by eBay customer support.
	// It is in the best interest of the seller that he/she includes a comment in this
	// field if the specified <b>sellerINRReason</b> or
	// <b>sellerSNADReason<b> is 'OTHER'.
	//
	Comments string `xml:"comments,omitempty"`
}

type EscalateToCustomerSupportResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EscalateToCustomerSupportResponse"`

	*BaseResponse
}

type AppealToCustomerSupportRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services AppealToCustomerSupportRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// Specify one of the three possible values as the reason for the appeal.
	//
	AppealReason *AppealReasonType `xml:"appealReason,omitempty"`

	//
	// This optional field allows the seller to add a supporting comment to justify the
	// appeal reason. This comment is intended to be read by eBay customer support. It
	// is in the best interest of the seller that he/she includes a comment in this
	// field if the specified <b>appealReason</b> is 'OTHER'.
	//
	Comments string `xml:"comments,omitempty"`
}

type AppealToCustomerSupportResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services AppealToCustomerSupportResponse"`

	*BaseResponse
}

type OfferPartialRefundRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OfferPartialRefundRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The seller enters the amount of the partial refund that is being offered to
	// the buyer. This amount is in the currency used by the listing site.
	//
	Amount *Money `xml:"amount,omitempty"`

	//
	// This optional field allows the seller to add a supporting comment regarding the
	// partial refund solution. For example, the seller might add a comment such as this
	// in the field: "Since you are not 100 percent satisfied with the item, I will
	// offer you a partial refund of $10 and you can keep the item." This comment is
	// intended to be read by the buyer.
	//
	Comments string `xml:"comments,omitempty"`
}

type OfferPartialRefundResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OfferPartialRefundResponse"`

	*BaseResponse
}

type IssuePartialRefundRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services IssuePartialRefundRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The seller enters the amount of the partial refund that is being offered to
	// the buyer. This amount is in the currency used by the listing site. This
	// amount must be identical to the amount offered through the <b>
	// offerPartialRefund</b> call.
	//
	Amount *Money `xml:"amount,omitempty"`

	//
	// This optional field allows the seller to add a comment regarding the partial
	// refund. For example, the seller might add a comment such as this in the field:
	// "Here is your $10 partial refund that we both agreed upon." This comment is
	// intended to be read by the buyer.
	//
	Comments string `xml:"comments,omitempty"`
}

type IssuePartialRefundResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services IssuePartialRefundResponse"`

	*BaseResponse
}

type ProvideShippingInfoRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideShippingInfoRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The shipping carrier being used by the seller to ship the package to the buyer.
	//
	CarrierUsed string `xml:"carrierUsed,omitempty"`

	//
	// Timestamp indicating when the item was shipped to the buyer.
	//
	ShippedDate time.Time `xml:"shippedDate,omitempty"`

	//
	// This optional field allows the seller to add a comment regarding the shipping of
	// the item. For example, the seller might add a comment such as this in the field:
	// "I have shipped your item via USPS on 9/12/11." This comment is intended to be
	// read by the buyer.
	//
	Comments string `xml:"comments,omitempty"`
}

type ProvideShippingInfoResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideShippingInfoResponse"`

	*BaseResponse
}

type ProvideRefundInfoRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideRefundInfoRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The seller provides relevant refund information in this field. This
	// information might include the refund transaction date, the payment
	// method, or the expected receipt date of the refund.
	//
	RefundMessage string `xml:"refundMessage,omitempty"`
}

type ProvideRefundInfoResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideRefundInfoResponse"`

	*BaseResponse
}

type UploadDocumentsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services UploadDocumentsRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The seller must specify the type of document(s) being uploaded. Currently, only
	// PROOF_OF_REFUND and PROOF_OF_SHIPPING are applicable for the
	// <b>uploadDocuments</b> call. If 'OTHER' is passed in this field, an error
	// will occur.
	//
	ProofType *ProofType `xml:"proofType,omitempty"`

	//
	// Container consisting of the name and content of a proof document. A <b>document</b>
	// container is required for each proof document being uploaded.
	//
	Document []*UploadDocumentInfoType `xml:"document,omitempty"`
}

type UploadDocumentsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services UploadDocumentsResponse"`

	*BaseResponse
}

type OfferRefundUponReturnRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OfferRefundUponReturnRequest"`

	*BaseRequest

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// This container, defined by <b>Address</b> type, allows the seller
	// to input a different return address than the one listed as the shipping
	// address for the seller. This container is optional.
	//
	ReturnAddress *Address `xml:"returnAddress,omitempty"`

	//
	// If applicable and requested by the buyer, the seller can include the Return Merchandise
	// Authorization number in the request.
	//
	ReturnMerchandiseAuthorization string `xml:"returnMerchandiseAuthorization,omitempty"`

	//
	// This optional field allows the seller to add additional instructions
	// regarding the return of the item. This comment is intended to be read by
	// the buyer in the Resolution Center.
	//
	AdditionalReturnInstructions string `xml:"additionalReturnInstructions,omitempty"`
}

type OfferRefundUponReturnResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OfferRefundUponReturnResponse"`

	*BaseResponse
}

type UploadDocumentInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services UploadDocumentInfoType"`

	//
	// The file name of the proof document. The file name must be unique for each proof
	// document "attached" to the case.
	//
	Name string `xml:"name,omitempty"`

	//
	// The binary representation of the proof document. Supported file types for proof
	// documents include JPEG, GIF, BMP, and PNG. The upload operation will be
	// unsuccessful for any other file type. There is a file size limit of 1 MB per
	// document.
	//
	Content []byte `xml:"content,omitempty"`
}

type ItemFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ItemFilterType"`

	//
	// The unique identifier for an eBay item listing. All cases filed against this
	// <b>itemId</b> are returned.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// The unique identifier for an eBay order line item. The
	// <b>transactionId</b> must match the specified <b>itemId</b> or an error is
	// returned. If a <b>transactionId</b> is specified, only one case,
	// that matches the <b>itemId</b> and the
	// <b>transactionId</b>, may be returned.
	//
	TransactionId string `xml:"transactionId,omitempty"`
}

type DateRangeFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services DateRangeFilterType"`

	//
	// The starting date for the date range. The <b>fromDate</b> must be
	// older than the <b>toDate</b>, and it cannot be set back more than
	// 18 months in the past.
	//
	FromDate time.Time `xml:"fromDate,omitempty"`

	//
	// The ending date for the date range. The <b>toDate</b> must be
	// more recent than the <b>fromDate</b>. This field is optional. If
	// it is omitted, all cases created from the <b>fromDate</b> up to
	// the present (system date) are returned, unless the range specified by the
	// <b>fromDate</b> and the present date is greater than 90 days, in
	// which case the <b>toDate</b> defaults to 90 days forward from the
	// <b>fromDate</b>.
	//
	ToDate time.Time `xml:"toDate,omitempty"`
}

type CaseTypeFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services CaseTypeFilterType"`

	//
	// The type of case or dispute to search for is specified in this field. At least one
	// <b>caseType</b> field must be used if <b>caseTypeFilter</b>
	// is included in the input.
	//
	CaseType []*CaseType `xml:"caseType,omitempty"`
}

type CaseStatusFilterType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services CaseStatusFilterType"`

	//
	// The case status to search for is specified in this field. At least one
	// <b>caseStatus</b> field must be used if
	// <b>caseStatusFilter</b> is included in the input.
	//
	CaseStatus []*CaseStatusInputType `xml:"caseStatus,omitempty"`
}

type CaseArrayType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services CaseArrayType"`

	//
	// Container consisting of summary information for a case. One <b>
	// caseSummary</b> container will be returned for each case that matches
	// the input criteria.
	//
	CaseSummary []*CaseSummaryType `xml:"caseSummary,omitempty"`
}

type CaseSummaryType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services CaseSummaryType"`

	//
	// This container is used to identify a specific eBay Buyer Protection case opened
	// by a buyer in the eBay Resolution Center.
	//
	CaseId *CaseIdType `xml:"caseId,omitempty"`

	//
	// The role (e.g. buyer, seller) of the user making the call.
	//
	User *CaseUserType `xml:"user,omitempty"`

	//
	// The role (e.g. buyer, seller) of the other party involved in the case.
	//
	OtherParty *CaseUserType `xml:"otherParty,omitempty"`

	//
	// Container holding the status of the case. The field appearing under this
	// container is dependent on the case type.
	//
	Status *CaseStatusType `xml:"status,omitempty"`

	//
	// A container consisting of details on the order line item associated with the case.
	//
	Item *ItemType `xml:"item,omitempty"`

	//
	// This value indicates the quantity of items in the order line item related to the
	// case. This value is usually '1', but can be more if the buyer bought multiple items
	// at the same time from the same fixed-priced listing.
	//
	CaseQuantity int32 `xml:"caseQuantity,omitempty"`

	//
	// The amount of money involved in the case. Typically, this is the purchase price.
	//
	CaseAmount *Amount `xml:"caseAmount,omitempty"`

	//
	// The date by which the next action in the case must be made either by the user
	// (caller) or other party involved in the case. This field is only returned if
	// a response or payment is due from the user or the other party involved in the
	// case.
	//
	RespondByDate time.Time `xml:"respondByDate,omitempty"`

	//
	// Timestamp indicating the date that the case was opened. This field is always
	// returned with the <b>caseSummary</b> container in <b>getUserCases</b>
	// and <b>getEBPCaseDetail</b>.
	//
	CreationDate time.Time `xml:"creationDate,omitempty"`

	//
	// Timestamp indicating the date on which the case was last modified. A case is
	// considered modified if the status value changes.
	//
	LastModifiedDate time.Time `xml:"lastModifiedDate,omitempty"`
}

type CaseIdType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services CaseIdType"`

	//
	// Unique identifier of the case. The <b>caseId.id</b> value is required in
	// the request of every call except <b>getVersion</b>. The <b>caseId.id</b>
	// value for a case is always returned in the <b>caseSummary</b> container
	// of the <b>getUserCases</b> and <b>getEBPCaseDetail</b> calls.
	//
	Id string `xml:"id,omitempty"`

	//
	// eBay case type. Case types include eBay Buyer Protection and PayPal Buyer
	// Protection cases (opened through the Resolution Center), older disputes
	// created through other sites, and Unpaid Item or Cancel Transaction disputes
	// created through the Resolution Center or with the
	// <b>AddDispute</b> call of the Trading API.
	//
	Type_ *CaseType `xml:"type,omitempty"`
}

type CaseUserType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services CaseUserType"`

	//
	// The eBay user ID for the user involved in the case.
	//
	UserId string `xml:"userId,omitempty"`

	//
	// The user's role in the eBay Buyer Protection case.
	//
	Role *CaseUserRoleType `xml:"role,omitempty"`
}

type CaseStatusType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services CaseStatusType"`

	//
	// The current status of an older Item Not Received case.
	//
	INRStatus *INRCaseStatusType `xml:"INRStatus,omitempty"`

	//
	// The current status of an older Significantly Not As Described case.
	//
	SNADStatus *SNADCaseStatusType `xml:"SNADStatus,omitempty"`

	//
	// The current status of an Item Not Received case opened by the buyer in the
	// Resolution Center.
	//
	EBPINRStatus *EBPINRCaseStatusType `xml:"EBPINRStatus,omitempty"`

	//
	// The current status of a Significantly Not As Described case opened by the
	// buyer in the Resolution Center.
	//
	EBPSNADStatus *EBPSNADCaseStatusType `xml:"EBPSNADStatus,omitempty"`

	//
	// The current status of an Unpaid Item case opened by the seller in the
	// Resolution Center or with the <b>AddDispute</b> call of the
	// Trading API.
	//
	UPIStatus *UPICaseStatusType `xml:"UPIStatus,omitempty"`

	//
	// The current status of a mutually cancelled transaction case opened by the seller in
	// the Resolution Center or with the <b>AddDispute</b> call of the
	// Trading API.
	//
	CancelTransactionStatus *CancelTransactionCaseStatusType `xml:"cancelTransactionStatus,omitempty"`

	//
	// The current status of a returned item case.
	//
	ReturnStatus *ReturnCaseStatusType `xml:"returnStatus,omitempty"`

	//
	// The current status of an Item Not Received case opened by the
	// buyer in the PayPal system.
	//
	PaypalINRStatus *PaypalINRCaseStatusType `xml:"PaypalINRStatus,omitempty"`

	//
	// The current status of a Significantly Not As Described case opened by the
	// buyer in the PayPal system.
	//
	PaypalSNADStatus *PaypalSNADCaseStatusType `xml:"PaypalSNADStatus,omitempty"`
}

type ItemType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ItemType"`

	//
	// The unique identifier for the eBay item listing involved in the case.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// The title of the item listing involved in the case.
	//
	ItemTitle string `xml:"itemTitle,omitempty"`

	//
	// The monetary amount for the eBay order line item being disputed in the case.
	//
	TransactionPrice *Amount `xml:"transactionPrice,omitempty"`

	//
	// The timestamp of the eBay order line item being disputed in the case.
	//
	TransactionDate time.Time `xml:"transactionDate,omitempty"`

	//
	// The unique identifier for the eBay site where the item was listed. See
	// <a href="../Concepts/SiteIDToGlobalID.html">eBay Site ID to GlobalID</a> for a
	// list of eBay site IDs. Although they can be the same, this field should not be
	// confused with the <b>caseDetail.globalId</b> value, which indicates
	// the site where the buyer opened the case.
	//
	GlobalId string `xml:"globalId,omitempty"`

	//
	// The unique identifier for the eBay order line item being disputed in the case.
	//
	TransactionId string `xml:"transactionId,omitempty"`
}

type Amount struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services Amount"`

	Value float64

	//
	// This attribute identifies the currency in which the monetary amount is
	// specified.
	//
	CurrencyId string `xml:"currencyId,attr,omitempty"`
}

type Money struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services Money"`

	Value float64

	//
	// This attribute identifies the currency in which the monetary amount is
	// specified.
	//
	CurrencyCode *IsoCurrencyCode `xml:"currencyCode,attr,omitempty"`
}

type EBPCaseDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EBPCaseDetailType"`

	//
	// A token value describing the reason for the case being opened. For Item Not
	// Received cases, this value is always 'Item not received.'. Possible token
	// values for Significantly Not As Described cases include 'Unknown', 'Fake',
	// 'MissingPartsPieces', 'Wrong', 'Unusable', 'Other', 'EmptyBox', 'Damaged',
	// 'Internal Damaged', 'External Damaged', or 'All'.
	//
	OpenReason string `xml:"openReason,omitempty"`

	//
	// A code value that represents the decision that eBay customer support made on
	// the case. It is only returned if a decision has been made on a case.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// This field is in the process of being deprecated. To reference the decision reason
	// on the case, view the <b>decisionReasonDetail</b> container instead.
	// </span>
	//
	DecisionReason string `xml:"decisionReason,omitempty"`

	//
	// This container consists of the code value and description of the decision
	// that eBay customer support made on the case. It is only returned if a
	// decision has been made on a case. This field can be considered an alternative
	// to <b>decisionReason</b>, which only returns a code value.
	//
	DecisionReasonDetail *DecisionReasonDetailType `xml:"decisionReasonDetail,omitempty"`

	//
	// The timestamp for a decision made on a case. This field is only returned if a
	// decision has been made on a case.
	//
	DecisionDate time.Time `xml:"decisionDate,omitempty"`

	//
	// The disposition (outcome) of the case. Some decisions favor the seller and
	// some decisions favor the buyer. This field is only returned if a decision has
	// been made on a case. See <b>caseDetail.decisionReasonDetail</b>
	// for more details on the decision.
	//
	Decision *CaseDecisionType `xml:"decision,omitempty"`

	//
	// Flag to indicate whether or not a Final Value Fee (FVF) was credited back to
	// the seller's account as part of the case decision. This field will only appear
	// if a decision has been made on the case.
	//
	FVFCredited bool `xml:"FVFCredited,omitempty"`

	//
	// Flag that indicates whether or not a closed eBay Buyer Protection case will
	// count against the seller's performance standards. A true value indicates
	// that the case will not count against the seller's performance
	// standards, and a false value indicates that the case will count against the
	// seller's performance standards. This field is only returned if a decision has
	// been made on a case.
	//
	NotCountedInBuyerProtectionCases bool `xml:"notCountedInBuyerProtectionCases,omitempty"`

	//
	// The unique identifier for the eBay site where the buyer opened the eBay Buyer
	// Protection case. See <a href="../Concepts/SiteIDToGlobalID.html">eBay
	// Site ID to GlobalID</a> for a list of eBay site IDs. Although they can be
	// the same, this field should not be confused with the
	// <b>caseSummary.item.globalId</b> value, which indicates the listing site of the
	// item involved in the case.
	//
	GlobalId string `xml:"globalId,omitempty"`

	//
	// Container consisting of case appeal details. This container is only returned if an appeal has
	// been made on the case decision by the buyer or seller. Each appeal has a
	// unique ID that is returned as an attribute. Until a decision is made on the
	// appeal, only the <b>creationDate</b> child field is returned.
	//
	Appeal []*AppealType `xml:"appeal,omitempty"`

	//
	// Container consisting of case activity details. A <b>responseHistory</b>
	// node is returned for each activity that has occurred with the case,
	// and each node contains the type of activity, the timestamp for the activity,
	// the initiator of the activity, and any notes related to the case.
	// Additionally, if the activity is related to a case appeal, a money movement
	// transaction, or a hold put on a case, a <b>caseDetail.responseHistory.attributes</b>
	// container is returned providing more information on these activities.
	//
	ResponseHistory []*EBPCaseResponseHistoryType `xml:"responseHistory,omitempty"`

	//
	// The monetary value of a partial or full refund if applicable for the case.
	// This field is only returned if a partial or full refund is being issued to
	// the buyer.
	//
	AgreedRefundAmount *Amount `xml:"agreedRefundAmount,omitempty"`

	//
	// Container consisting of one or more money movement transactions that may occur
	// between a buyer and seller (and eBay) during an eBay Buyer Protection case flow. This
	// container is only returned if a money movement transaction related to the case has
	// occurred.
	//
	PaymentDetail *PaymentDetailType `xml:"paymentDetail,omitempty"`

	//
	// This container is only returned if the buyer is returning the item to the seller as
	// part of the solution to a Significantly Not As Described
	// case. This container consists of the shipping carrier that the buyer will use, the
	// status and expected date of the delivery, the shipping costs, the tracking number of
	// the package(s), and the seller's shipping address.
	//
	BuyerReturnShipment *ShipmentType `xml:"buyerReturnShipment,omitempty"`

	//
	// This container is only returned if the seller is shipping the original item,
	// a replacement item, or missing/replacement parts to the buyer as a solution
	// to an Item Not Received or Significantly Not As Described case. This
	// container consists of the shipping carrier that the seller will use, the
	// status and expected date of the delivery, the shipping costs, the tracking
	// number of the package(s), and the buyer's shipping address.
	//
	SellerShipment *ShipmentType `xml:"sellerShipment,omitempty"`

	//
	// A code value that represents the current high-level status of a case.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// This field is in the process of being deprecated. To reference the case activity,
	// view the <b>detailStatusInfo</b> container instead.
	// </span>
	//
	DetailStatus string `xml:"detailStatus,omitempty"`

	//
	// This container consists of the code value and description of case status.
	// This field can be considered an alternative to
	// <b>detailStatus</b>, which only returns a code value.
	//
	DetailStatusInfo *DetailStatusInfoType `xml:"detailStatusInfo,omitempty"`

	//
	// A code value that represents the buyer's initial expectation for resolving
	// the case.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// This field is in the process of being deprecated. To reference the case activity,
	// view the <b>initialBuyerExpectationDetail</b> container instead.
	// </span>
	//
	InitialBuyerExpectation string `xml:"initialBuyerExpectation,omitempty"`

	//
	// This container consists of the code value and description what the buyer is
	// expecting from the seller in order to resolve the case. This field can be
	// considered an alternative to <b>initialBuyerExpectation</b>,
	// which only returns a code value.
	//
	InitialBuyerExpectationDetail *InitialBuyerExpectationDetailType `xml:"initialBuyerExpectationDetail,omitempty"`

	//
	// The Return Merchandize Authorization number is returned if the seller provided
	// this number to the buyer (through <b>provideRefundInfo</b> or in the Resolution
	// Center).
	//
	ReturnMerchandiseAuthorization string `xml:"returnMerchandiseAuthorization,omitempty"`

	//
	// Container consisting of the name, type, and upload date of the proof document
	// associated with the case. Only German sellers can upload proof documents
	// using the <b>uploadDocuments</b> call, so this container will never be returned for
	// US and UK sellers. One <b>caseDocumentInfo</b> container is returned for each
	// proof document uploaded by a German seller (maximum of 5).
	//
	CaseDocumentInfo []*EBPCaseDocumentInfoType `xml:"caseDocumentInfo,omitempty"`
}

type EBPCaseDocumentInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EBPCaseDocumentInfoType"`

	//
	// The file name of the proof document. The file name must be unique for each proof
	// document "attached" to the case.
	//
	Name string `xml:"name,omitempty"`

	//
	// This field indicates the proof document's type. This field is always returned with
	// the <b>caseDocumentInfo</b> container. 'OTHER' is currently not
	// supported.
	//
	Type_ *ProofType `xml:"type,omitempty"`

	//
	// Timestamp indicating the date and time that the document was uploaded. This value
	// is automatically generated by eBay.
	//
	UploadDate time.Time `xml:"uploadDate,omitempty"`
}

type PaymentDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services PaymentDetailType"`

	//
	// Container consisting of the details of a money movement transaction. There
	// can be more than one <b>moneyMovement</b> node returned in the
	// <b>getEBPCaseDetail</b> response. Details in each <b>
	// moneyMovement</b> node include the transaction type, the amount, the
	// payer and payee, the date, the payment method, and the PayPal transaction ID
	// (if the payment method is PayPal).
	//
	MoneyMovement []*MoneyMovementDetailType `xml:"moneyMovement,omitempty"`

	//
	// The current balance due from the seller to the buyer or to eBay. If no balance
	// is due from the seller, it is returned as 0.00.
	//
	BalanceDue *Amount `xml:"balanceDue,omitempty"`
}

type AppealType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services AppealType"`

	//
	// The disposition (outcome) of the case appeal. The initiator of the appeal
	// (buyer or seller) can either win the appeal, be denied the appeal, or earn
	// partial credit through the appeal. This field is only returned if a decision
	// has been made on the appeal. See
	// <b>caseDetail.appeal.decisionReasonDetail</b> for more details on
	// the appeal decision.
	//
	Decision *AppealDecisionType `xml:"decision,omitempty"`

	//
	// A code value that represents the decision that eBay customer support made on
	// the case appeal. It is only returned if a decision has been made on the
	// appeal.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// This field is in the process of being deprecated. To reference the decision reason
	// on the appeal, view the <b>decisionReasonDetail</b> container instead.
	//
	DecisionReason string `xml:"decisionReason,omitempty"`

	//
	// This container consists of the code value and description of the decision
	// that eBay customer support made on the case appeal. It is only returned if a
	// decision has been made on the appeal. This field can be considered an
	// alternative to <b>decisionReason</b>, which only returns a code
	// value.
	//
	DecisionReasonDetail *DecisionReasonDetailType `xml:"decisionReasonDetail,omitempty"`

	//
	// The timestamp for a decision made on the appeal. This field is only returned
	// if a decision has been made on the appeal.
	//
	DecisionDate time.Time `xml:"decisionDate,omitempty"`

	//
	// Timestamp indicating the date that the case decision was appealed. This field is
	// always returned with the <b>appeal</b> container in the
	// <b>getEBPCaseDetail</b> call.
	//
	CreationDate time.Time `xml:"creationDate,omitempty"`

	//
	// The unique identifier for the appeal. This ID attribute is created by eBay when a buyer
	// or seller appeals a case decision.
	//
	Id string `xml:"id,attr,omitempty"`
}

type EBPCaseResponseHistoryType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EBPCaseResponseHistoryType"`

	//
	// This field is returned if a note was created to accompany the activity or
	// response.
	//
	Note string `xml:"note,omitempty"`

	//
	// Container that identifies the user who initiated the activity. The container
	// includes the author's role (either buyer, seller, or eBay) and the eBay user
	// ID if the author (initiator of the activity) is a buyer or seller.
	//
	Author *CaseUserType `xml:"author,omitempty"`

	//
	// The type of activity or response made on the case by a buyer, a seller, or
	// eBay.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// This field is in the process of being deprecated. To reference the case activity,
	// view the <b>activityDetail</b> container instead.
	// </span>
	//
	//
	Activity string `xml:"activity,omitempty"`

	//
	// This container consists of the code value and description of the case
	// activity. This field can be considered an alternative to the <b>
	// activity</b> field.
	//
	ActivityDetail *ActivityDetailType `xml:"activityDetail,omitempty"`

	//
	// Timestamp indicating the date and time of the case activity or response. This field
	// is always returned with each <b>responseHistory</b> node in
	// the <b>getEBPCaseDetail</b> call.
	//
	CreationDate time.Time `xml:"creationDate,omitempty"`

	//
	// Container consisting of three possible child fields to indicate if there is a
	// money movement transaction or an appeal associated with case activity, or if
	// the case has been put on hold. This field is always returned but sometimes as
	// an empty field (no children).
	//
	Attributes *ResponseHistoryAttributesType `xml:"attributes,omitempty"`
}

type ResponseHistoryAttributesType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ResponseHistoryAttributesType"`

	AppealRef struct {

		//
		// This attribute is the ID of the case appeal. This ID will match the ID
		// value contained in the <b>caseDetail.appeal</b> field.
		//
		Idref string `xml:"idref,attr,omitempty"`
	} `xml:"appealRef,omitempty"`

	MoneyMovementRef struct {

		//
		// This attribute is the ID of the money movement transaction. This ID will
		// match the ID value contained in the
		// <b>caseDetail.paymentDetail.moneyMovement</b> field.
		//
		Idref string `xml:"idref,attr,omitempty"`
	} `xml:"moneyMovementRef,omitempty"`

	//
	// If an eBay Buyer Protection case is put on hold, this field is returned as a code
	// value.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// This field is in the process of being deprecated. To reference the case activity,
	// view the <b>onholdReasonDetail</b> container instead.
	// </span>
	//
	OnholdReason string `xml:"onholdReason,omitempty"`

	//
	// If an eBay Buyer Protection case is put on hold, this container is returned under
	// <b>responseHistory.attributes</b>. This container consists of the
	// code value and description of the reason why the case is on hold. This field
	// can be considered an alternative to <b>onholdReason</b>, which
	// only returns a code value.
	//
	OnholdReasonDetail *OnHoldReasonDetailType `xml:"onholdReasonDetail,omitempty"`
}

type MoneyMovementDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services MoneyMovementDetailType"`

	//
	// The type of money movement transaction.
	//
	Type_ *MoneyMovementType `xml:"type,omitempty"`

	//
	// Container that identifies the user who is the originator (or source) of the
	// money movement transaction. The user is identified by case role (buyer,
	// seller, or eBay) and eBay user ID.
	//
	FromParty *CaseUserType `xml:"fromParty,omitempty"`

	//
	// Container that identifies the user who is the receiver (or destination) of
	// the money movement transaction. The user is identified by case role (buyer,
	// seller, or eBay) and eBay user ID.
	//
	ToParty *CaseUserType `xml:"toParty,omitempty"`

	//
	// The amount of the money movement transaction.
	//
	Amount *Amount `xml:"amount,omitempty"`

	//
	// The payment method used for the money movement transaction.
	//
	PaymentMethod *PaymentMethodType `xml:"paymentMethod,omitempty"`

	//
	// The PayPal Transaction ID. This element is only applicable and returned if PayPal is
	// the payment method used in the money movement transaction.
	//
	PaypalTransactionId string `xml:"paypalTransactionId,omitempty"`

	//
	// The status of the money movement transaction.
	//
	Status *MoneyMovementStatusType `xml:"status,omitempty"`

	//
	// The timestamp of the money movement transaction.
	//
	TransactionDate time.Time `xml:"transactionDate,omitempty"`

	//
	// The unique identifier for the money movement transaction. Unique values are
	// assigned for each money movement transaction. This attribute is always returned with the
	// <b>caseDetail.paymentDetail.moneyMovement</b> field.
	//
	Id string `xml:"id,attr,omitempty"`

	//
	// The unique identifier for the original money movement transaction. This
	// attribute is returned with the
	// <b>caseDetail.paymentDetail.moneyMovement</b> field if the current
	// money movement transaction (indicated by the <b>id</b> attribute)
	// is a reversal.
	//
	ParentId string `xml:"parentId,attr,omitempty"`
}

type ShipmentType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ShipmentType"`

	//
	// The shipment tracking number. This value is returned under the
	// <b>buyerReturnShipment</b> container if the buyer has provided a
	// shipment tracking number for the item being returned, or is returned under the
	// <b>sellerShipment</b> container if the seller has provided a
	// shipment tracking number for the package (containing original item, replacement
	// item, missing/replacement parts) being shipped to the seller.
	//
	TrackingNumber string `xml:"trackingNumber,omitempty"`

	//
	// The shipping carrier used by the seller to ship the package to the buyer (if found in
	// <b>sellerShipment</b> container), or the shipping carrier used by the
	// buyer to return an item to the seller (if found in <b>buyerReturnShipment</b>
	// container).
	//
	CarrierUsed string `xml:"carrierUsed,omitempty"`

	//
	// The delivery status of the item being returned by the buyer
	// (if returned under the <b>buyerReturnShipment</b> container), or the
	// delivery status of the item being shipped by the seller to the buyer
	// (if returned under the <b>sellerShipment</b> container).
	//
	DeliveryStatus string `xml:"deliveryStatus,omitempty"`

	//
	// The expected date of delivery of the item being returned by the buyer
	// (if returned under the <b>buyerReturnShipment</b> container), or the
	// expected date of delivery of the item being shipped by the seller to the buyer
	// (if returned under the <b>sellerShipment</b> container).
	//
	DeliveryDate time.Time `xml:"deliveryDate,omitempty"`

	//
	// The total shipping costs for the buyer
	// (<b>buyerReturnShipment</b>) or the seller
	// (<b>sellerShipment</b>).
	//
	ShippingCost *Amount `xml:"shippingCost,omitempty"`

	//
	// The container for the shipping address for the buyer or seller. If the buyer
	// is returning an item, this address is the seller's shipping address. If the
	// seller is shipping an item, this address is the buyer's shipping address.
	//
	ShippingAddress *Address `xml:"shippingAddress,omitempty"`
}

type Address struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services Address"`

	//
	// The name listed for the eBay user's shipping address.
	//
	Name string `xml:"name,omitempty"`

	//
	// The first line of the street listed for the eBay user's shipping address.
	// <br/><br/>
	// This field is required in the <b>provideReturnInfo</b> request, and is
	// also required in the <b>offerRefundUponReturn</b> request if the seller is
	// providing the buyer an alternative return shipping address via the
	// <b>returnAddress</b> container.
	// <br/><br/>
	// This field is always returned with the <b>shippingAddress</b> container
	// (seller shipment or buyer return) in the <b>getEBPCaseDetail</b> response.
	//
	Street1 string `xml:"street1,omitempty"`

	//
	// The second line of the street listed for the eBay user's shipping address.
	// Based on the eBay user's shipping address, this field may empty.
	// <br/><br/>
	// This field is conditional in the <b>provideReturnInfo</b> and
	// <b>offerRefundUponReturn</b> requests.
	// <br/><br/>
	// If specified, this field will be returned with the <b>shippingAddress</b>
	// container (seller shipment or buyer return) in the
	// <b>getEBPCaseDetail</b> response.
	//
	Street2 string `xml:"street2,omitempty"`

	//
	// The city listed for the eBay user's shipping address.
	//
	City string `xml:"city,omitempty"`

	//
	// The county listed for the eBay user's shipping address.
	//
	County string `xml:"county,omitempty"`

	//
	// The state or province listed for the eBay user's shipping address.
	//
	StateOrProvince string `xml:"stateOrProvince,omitempty"`

	//
	// The country listed for the eBay user's shipping address.
	//
	Country string `xml:"country,omitempty"`

	//
	// The postal code listed for the eBay user's shipping address.
	//
	PostalCode string `xml:"postalCode,omitempty"`
}

type PaginationInput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services PaginationInput"`

	//
	// Specifies which page of case results to retrieve in the response. The total
	// number of result pages is determined by the total number of cases matching
	// the input criteria divided by the number of cases to display in each page.
	// The total number of cases is returned in the
	// <b>paginationOutput.totalEntries</b> field of the
	// <b>getUserCases</b> response. The cases to display per page is
	// set with the <b>paginationInput.entriesPerPage</b> field. If
	// there are multiple result pages returned, subsequent calls can be made with
	// all of the same input parameters, except for the
	// <b>pageNumber</b> field, which is incremented by a value of 1
	// each time so that each subsequent page may be viewed and/or handled.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// Specifies the number of cases to retrieve in one page of results in the
	// <b>getUserCases</b> response. This value, along with the number
	// of cases that match the input criteria in the <b>getUserCases</b>
	// request, will determine how many result pages are returned. This field is
	// required if the <b>paginationInput</b> filter is used in the request.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`
}

type PaginationOutput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services PaginationOutput"`

	//
	// The page number currently being viewed. The total number of result pages is
	// shown in the <b>totalPages</b> field. If
	// <b>totalPages</b> is more than 1, multiple <b>getUserCases</b> calls  must
	// be made to view all case results, with the
	// <b>paginationInput.pageNumber</b> value being incremented by 1 in each
	// subsequent call.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// The number of cases appearing on each page of results. This value is set in the
	// <b>paginationInput.entriesPerPage</b> field in the
	// <b>getUserCases</b> request.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`

	//
	// This value indicates the total number of result pages that exist based on the
	// current input criteria, including the <b>paginationInput</b>
	// fields. If <b>totalPages</b> is more than 1, multiple
	// <b>getUserCases</b> calls  must be made to view all case results, with the
	// <b>paginationInput.pageNumber</b> value being incremented by 1 in
	// each subsequent call.
	//
	TotalPages int32 `xml:"totalPages,omitempty"`

	//
	// This value indicates the total number of cases that exist based on the
	// current input criteria. Once this value is known, the caller may want to
	// considering tweaking the <b>paginationInput</b> fields and making
	// another call.
	//
	TotalEntries int32 `xml:"totalEntries,omitempty"`
}

type EnumerationDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EnumerationDetailType"`

	//
	// Unique identifier of the enumeration value.
	//
	Code string `xml:"code,omitempty"`

	//
	// A description of the enumeration value.
	//
	Description string `xml:"description,omitempty"`

	//
	// For future use.
	//
	Content string `xml:"content,omitempty"`
}

type BaseActivityOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services BaseActivityOptionType"`

	//
	// This field indicates which of the available activity options for a seller is
	// the buyer's preference for resolving the case. The buyer's preference is
	// stated when the buyer opens the case in the Resolution Center. For an Item
	// Not Received case, the <b>buyerPreference</b> field is only
	// returned for <b>activityOptions.issueFullRefund</b>. For a
	// Significantly Not As Described case, the <b>buyerPreference</b>
	// field is only returned for
	// <b>activityOptions.issuePartialRefund</b> and <b>
	// activityOptions.requestBuyerToReturn</b>. Only one activity option
	// returned for a seller in the <b>getActivityOptions</b> response
	// can be the buyer's preference. In other words, the
	// <b>buyerPreference</b> field can only be 'true' for one activity option
	// returned to the seller in the response.
	//
	BuyerPreference bool `xml:"buyerPreference,omitempty"`
}

type OfferOtherSolutionOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OfferOtherSolutionOptionType"`

	*BaseActivityOptionType
}

type ProvideTrackingInfoOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideTrackingInfoOptionType"`

	*BaseActivityOptionType

	//
	// The tracking number is returned if the calling party has previously
	// provided tracking information to the other party. This value can be reused
	// in the <b>provideTrackingInfo</b> call (sellers only) or in the
	// Resolution Center.
	//
	TrackingNumber string `xml:"trackingNumber,omitempty"`

	//
	// The shipping carrier is returned if the calling party has previously
	// provided tracking information to the other party. This value can be
	// reused in the <b>provideTrackingInfo</b> call (sellers only)
	// or in the Resolution Center.
	//
	CarrierUsed string `xml:"carrierUsed,omitempty"`
}

type IssueFullRefundOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services IssueFullRefundOptionType"`

	*BaseActivityOptionType

	//
	// If a full refund from the seller is the buyer's preference, the
	// <b>daysToRefundBuyer</b> field will also be returned under the
	// <b>issueFullRefund</b> container. This integer value will
	// indicate the number of business days within which the buyer should receive a full
	// refund from the seller. The <b>daysToRefundBuyer</b> value
	// will affect the <b>refundDate</b> field (only returned for a
	// non-PayPal refund) in the <b>issueFullRefund</b> response.
	//
	DaysToRefundBuyer int32 `xml:"daysToRefundBuyer,omitempty"`
}

type IssuePartialRefundOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services IssuePartialRefundOptionType"`

	*BaseActivityOptionType
}

type ProvideShippingInfoOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideShippingInfoOptionType"`

	*BaseActivityOptionType

	//
	// The date the item was shipped to the buyer. This value will only be returned if
	// it was already provided by the seller.
	//
	ShippedDate string `xml:"shippedDate,omitempty"`

	//
	// The shipping carrier is returned if the calling party has previously
	// provided shipping information to the other party. This value can be
	// reused in the <b>provideShippingInfo</b> call (sellers only)
	// or in the Resolution Center.
	//
	CarrierUsed string `xml:"carrierUsed,omitempty"`
}

type RequestBuyerToReturnOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services RequestBuyerToReturnOptionType"`

	*BaseActivityOptionType
}

type ProvideShippingOrTrackingInfoOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideShippingOrTrackingInfoOptionType"`

	*BaseActivityOptionType
}

type ProvideRefundInfoOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ProvideRefundInfoOptionType"`

	*BaseActivityOptionType
}

type ContactCustomerSupportOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ContactCustomerSupportOptionType"`

	*BaseActivityOptionType
}

type EscalateToCustomerSupportOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EscalateToCustomerSupportOptionType"`

	*BaseActivityOptionType

	//
	// The <b>customerSupportResponseTimeInHours</b> field gives the
	// projected eBay customer support response time (in hours) if the seller
	// decides to escalate an open case. eBay customer support should escalate
	// the case (or deny the escalation) within this time frame.
	//
	CustomerSupportResponseTimeInHours int32 `xml:"customerSupportResponseTimeInHours,omitempty"`
}

type AppealToCustomerSupportOptionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services AppealToCustomerSupportOptionType"`

	*BaseActivityOptionType

	//
	// The <b>customerSupportResponseTimeInHours</b> field gives the
	// projected eBay customer support response time (in hours) if the seller
	// decides to appeal a case decision. eBay customer support should allow or
	// deny the appeal within this time frame.
	//
	CustomerSupportResponseTimeInHours int32 `xml:"customerSupportResponseTimeInHours,omitempty"`
}

type ActivityOptionListType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ActivityOptionListType"`

	//
	// This container is always returned in the
	// <b>getActivityOptions</b> response. The seller can use the
	// <b>offerOtherSolution</b> call to deliver another option to the buyer to
	// resolve the case.
	//
	OfferOtherSolution *OfferOtherSolutionOptionType `xml:"offerOtherSolution,omitempty"`

	//
	// If this container is returned in the <b>getActivityOptions</b>
	// response, the seller can use the <b>provideTrackingInfo</b> call
	// to provide tracking information to the buyer. If
	// previously provided to the other party, the <b>carrierUsed</b>
	// and <b>trackingNumber</b> are returned as child fields, and their
	// values can be referenced and reused in the
	// <b>provideTrackingInfo</b> call, or in the Resolution Center.
	// <br><br>
	// The <b>provideTrackingInfo</b> activity option is applicable for
	// the seller if the seller has shipped the original item, a replacement item,
	// or missing/replacement parts to the buyer.
	//
	ProvideTrackingInfo *ProvideTrackingInfoOptionType `xml:"provideTrackingInfo,omitempty"`

	//
	// This container can be returned in the <b>getActivityOptions</b>
	// response if the seller is making the call. The
	// <b>buyerPreference</b> child field will indicate whether a full
	// refund from the seller is the buyer's preference. The buyer's preference for
	// resolving a case is specified when the buyer opens a case in the Resolution
	// Center. If this container is returned, the seller can use the
	// <b>issueFullRefund</b> call to issue a full refund to the buyer. If a full
	// refund from the seller is the buyer's preference, the
	// <b>daysToRefundBuyer</b> field will also be returned under the
	// <b>issueFullRefund</b> container.
	//
	IssueFullRefund *IssueFullRefundOptionType `xml:"issueFullRefund,omitempty"`

	//
	// This container can be returned in the <b>getActivityOptions</b>
	// response if the seller is making the call. The <b>buyerPreference</b>
	// child field will indicate whether a partial refund from the seller is the buyer's
	// preference for a Significantly Not As Described case. The buyer's preference for
	// resolving a case is specified when the buyer opens a case in the Resolution
	// Center. If this container is returned, the seller can offer this partial refund
	// solution through the <b>offerPartialRefund</b> call, and upon buyer
	// acceptance, can then use the <b>issuePartialRefund</b> call.
	//
	IssuePartialRefund *IssuePartialRefundOptionType `xml:"issuePartialRefund,omitempty"`

	//
	// If this container is returned in the <b>getActivityOptions</b>
	// response, the seller can use the <b>provideShippingInfo</b> call
	// to provide shipping information to the buyer.
	// <br><br>
	// The <b>provideShippingInfo</b> option is applicable for the
	// seller if the seller has shipped the original item, a replacement item, or
	// missing/replacement parts to the buyer.
	//
	ProvideShippingInfo *ProvideShippingInfoOptionType `xml:"provideShippingInfo,omitempty"`

	//
	// This container can be returned in the <b>getActivityOptions</b>
	// response if the seller is making the call. If the
	// <b>buyerPreference</b> child field is returned as 'true', the
	// buyer is expecting a full refund from the seller after returning an item
	// related to a Significantly Not As Described case. The buyer's preference for
	// resolving a case is specified when the buyer opens a case in the Resolution
	// Center. If this container is returned, the seller can use the
	// <b>offerRefundUponReturn</b> call to request that the buyer return the item
	// before a full refund is issued. Upon receiving the returned item, the seller
	// can then use the <b>issueFullRefund</b> call to issue the full
	// refund to the buyer.
	//
	RequestBuyerToReturn *RequestBuyerToReturnOptionType `xml:"requestBuyerToReturn,omitempty"`

	//
	// If this container is returned in the <b>getActivityOptions</b>
	// response, the seller can use the <b>provideTrackingInfo</b> call
	// to provide tracking information to the buyer, or use the
	// <b>provideShippingInfo</b> request to
	// provide any related shipping information.
	// <br><br>
	// The <b>provideShippingOrTrackingInfo</b> activity option is
	// applicable for the seller if the seller has shipped the original item, a
	// replacement item, or missing/replacement parts to the buyer.
	//
	ProvideShippingOrTrackingInfo *ProvideShippingOrTrackingInfoOptionType `xml:"provideShippingOrTrackingInfo,omitempty"`

	//
	// This container can be returned in the <b>getActivityOptions</b>
	// response if the seller is making the call. If this container is returned, the
	// seller can use the <b>provideRefundInfo</b> call to provide
	// refund information to the buyer.
	// <br><br>
	// The <b>provideRefundInfo</b> activity option is applicable if the
	// seller has agreed to give a full or partial refund to the buyer.
	//
	ProvideRefundInfo *ProvideRefundInfoOptionType `xml:"provideRefundInfo,omitempty"`

	//
	// For future use.
	//
	//
	ContactCustomerSupport *ContactCustomerSupportOptionType `xml:"contactCustomerSupport,omitempty"`

	//
	// If this container is returned in the <b>getActivityOptions</b> response,
	// the seller can use the <b>escalateToCustomerSupport</b> call to escalate
	// an open case to eBay customer support. Note that DE and UK sellers cannot escalate
	// a Return case to eBay customer support.
	// <br/><br/>
	// The buyer must use the Resolution Center to escalate a case.
	//
	EscalateToCustomerSupport *EscalateToCustomerSupportOptionType `xml:"escalateToCustomerSupport,omitempty"`

	//
	// If this container is returned in the <b>getActivityOptions</b>
	// response, the seller can use the <b>appealToCustomerSupport</b>
	// call to appeal a case decision. The buyer must use the Resolution Center to
	// appeal a case decision.
	//
	AppealToCustomerSupport *AppealToCustomerSupportOptionType `xml:"appealToCustomerSupport,omitempty"`
}

type DecisionReasonDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services DecisionReasonDetailType"`

	*EnumerationDetailType
}

type DetailStatusInfoType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services DetailStatusInfoType"`

	*EnumerationDetailType
}

type OnHoldReasonDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services OnHoldReasonDetailType"`

	*EnumerationDetailType
}

type InitialBuyerExpectationDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services InitialBuyerExpectationDetailType"`

	*EnumerationDetailType
}

type ActivityDetailType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services ActivityDetailType"`

	*EnumerationDetailType
}

type EscalationReasonType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services EscalationReasonType"`

	//
	// This field contains the applicable reason why the seller is escalating an
	// eBay Buyer Protection Item Not Received case.
	//
	SellerINRReason *SellerINREscalationReasonType `xml:"sellerINRReason,omitempty"`

	//
	// This field contains the applicable reason why the seller is escalating an
	// eBay Buyer Protection Significantly Not As Described case.
	//
	SellerSNADReason *SellerSNADEscalationReasonType `xml:"sellerSNADReason,omitempty"`

	//
	// For future use.
	//
	//
	BuyerINRReason *BuyerINREscalationReasonType `xml:"buyerINRReason,omitempty"`

	//
	// For future use.
	//
	//
	BuyerSNADReason *BuyerSNADEscalationReasonType `xml:"buyerSNADReason,omitempty"`
}

type NotificationEventType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/resolution/v1/services NotificationEventType"`

	//
	// One of the nine possible eBay Buyer Protection Platform Notification events. See also http://developer.ebay.com/devzone/xml/docs/reference/ebay/SetNotificationPreferences.html#Request.EventProperty.EventType
	//
	NotificationEventName *NotificationEventNameType `xml:"NotificationEventName,omitempty"`

	//
	// The user ID of the eBay user subscribed to Platform Notifications.
	//
	RecipientUserID string `xml:"RecipientUserID,omitempty"`

	// Echo back of user data. See also http://developer.ebay.com/devzone/xml/docs/reference/ebay/SetNotificationPreferences.html#Request.UserData.ExternalUserData
	ExternalUserData string `xml:"ExternalUserData,omitempty"`

	// The unique identifier of an eBay Buyer Protection case.
	CaseId string `xml:"CaseId,omitempty"`

	// The type of eBay Buyer Protection case.
	CaseType *CaseType `xml:"CaseType,omitempty"`

	// Unique identifier for the eBay item listing related to the case.
	ItemId string `xml:"ItemId,omitempty"`

	//
	// Unique identifier for the eBay order line item related to the case.
	//
	TransactionId string `xml:"TransactionId,omitempty"`

	// Timestamp for the creation of the Platform Notification (in UTC)
	CreationDate time.Time `xml:"CreationDate,omitempty"`

	// The eBay user ID of the other party in the case.
	OtherPartyId string `xml:"OtherPartyId,omitempty"`

	// The other party's role in the case.
	OtherPartyRole *CaseUserRoleType `xml:"OtherPartyRole,omitempty"`

	// The status of the eBay Buyer Protection Item Not Received or Signficantly Not As Described case.
	CaseStatus string `xml:"CaseStatus,omitempty"`

	// Unique identifier of the eBay Site where the case was opened.
	CaseGlobalId string `xml:"CaseGlobalId,omitempty"`
}

type ResolutionCaseManagementServicePort struct {
	client *gowsdl.SoapClient
}

func NewResolutionCaseManagementServicePort(url string, tls bool) *ResolutionCaseManagementServicePort {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &ResolutionCaseManagementServicePort{
		client: client,
	}
}

/*
	Get current service version.
*/
func (service *ResolutionCaseManagementServicePort) GetVersion(request *GetVersionRequest) (*GetVersionResponse, error) {
	response := &GetVersionResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Get list of resolution cases for an eBay member. This includes cases from both the
	new eBay Buyer Protection(eBP) and the eBay and PayPal ODR systems.
*/
func (service *ResolutionCaseManagementServicePort) GetUserCases(request *GetUserCasesRequest) (*GetUserCasesResponse, error) {
	response := &GetUserCasesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Gets details on a specific eBay Buyer Protection (eBP) case.
*/
func (service *ResolutionCaseManagementServicePort) GetEBPCaseDetail(request *GetEBPCaseDetailRequest) (*GetEBPCaseDetailResponse, error) {
	response := &GetEBPCaseDetailResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Get activity options for the current state of the eBay Buyer Protection (eBP) case.
*/
func (service *ResolutionCaseManagementServicePort) GetActivityOptions(request *GetActivityOptionsRequest) (*GetActivityOptionsResponse, error) {
	response := &GetActivityOptionsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Issues full refund.
*/
func (service *ResolutionCaseManagementServicePort) IssueFullRefund(request *IssueFullRefundRequest) (*IssueFullRefundResponse, error) {
	response := &IssueFullRefundResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Accepts the tracking info and associate the tracking info to the case.
*/
func (service *ResolutionCaseManagementServicePort) ProvideTrackingInfo(request *ProvideTrackingInfoRequest) (*ProvideTrackingInfoResponse, error) {
	response := &ProvideTrackingInfoResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Accepts the alternate solution from Seller and inform buyer.
*/
func (service *ResolutionCaseManagementServicePort) OfferOtherSolution(request *OfferOtherSolutionRequest) (*OfferOtherSolutionResponse, error) {
	response := &OfferOtherSolutionResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Esclate the case to customer support.
*/
func (service *ResolutionCaseManagementServicePort) EscalateToCustomerSupport(request *EscalateToCustomerSupportRequest) (*EscalateToCustomerSupportResponse, error) {
	response := &EscalateToCustomerSupportResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Appeal the case to customer support.
*/
func (service *ResolutionCaseManagementServicePort) AppealToCustomerSupport(request *AppealToCustomerSupportRequest) (*AppealToCustomerSupportResponse, error) {
	response := &AppealToCustomerSupportResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Offer partial refund.
*/
func (service *ResolutionCaseManagementServicePort) OfferPartialRefund(request *OfferPartialRefundRequest) (*OfferPartialRefundResponse, error) {
	response := &OfferPartialRefundResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Issues partial refund.
*/
func (service *ResolutionCaseManagementServicePort) IssuePartialRefund(request *IssuePartialRefundRequest) (*IssuePartialRefundResponse, error) {
	response := &IssuePartialRefundResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Accepts the shipping info and associate the shipping info to the case.
*/
func (service *ResolutionCaseManagementServicePort) ProvideShippingInfo(request *ProvideShippingInfoRequest) (*ProvideShippingInfoResponse, error) {
	response := &ProvideShippingInfoResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Allow seller to provide the return address to buyer for SNAD.
*/
func (service *ResolutionCaseManagementServicePort) ProvideReturnInfo(request *ProvideReturnInfoRequest) (*ProvideReturnInfoResponse, error) {
	response := &ProvideReturnInfoResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Allow seller to provide the refund information.
*/
func (service *ResolutionCaseManagementServicePort) ProvideRefundInfo(request *ProvideRefundInfoRequest) (*ProvideRefundInfoResponse, error) {
	response := &ProvideRefundInfoResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Allow seller to upload proof of documents.
*/
func (service *ResolutionCaseManagementServicePort) UploadDocuments(request *UploadDocumentsRequest) (*UploadDocumentsResponse, error) {
	response := &UploadDocumentsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Allows seller to request the buyer to return the item for full refund.
*/
func (service *ResolutionCaseManagementServicePort) OfferRefundUponReturn(request *OfferRefundUponReturnRequest) (*OfferRefundUponReturnResponse, error) {
	response := &OfferRefundUponReturnResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
