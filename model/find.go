package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type MapExposureEnum string

const (

	//
	// PreCheckout specifies that the buyer must click a link (or a button)
	// to navigate to a separate page (or window) that displays the discount price.
	//
	MapExposureEnumPreCheckout MapExposureEnum = "PreCheckout"

	//
	// DuringCheckout specifies that the discounted price must be shown on
	// the eBay checkout flow page.
	//
	MapExposureEnumDuringCheckout MapExposureEnum = "DuringCheckout"
)

type PriceTreatmentEnum string

const (

	//
	// STP stands for Strike-Through Pricing.
	//
	PriceTreatmentEnumSTP PriceTreatmentEnum = "STP"

	//
	// MAP stands for Minimum Advertised Price.
	//
	PriceTreatmentEnumMAP PriceTreatmentEnum = "MAP"
)

type SortOrderType string

const (

	//
	// Sorts items by Best Match, which is based on community buying activity
	// and other relevance-based factors.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// eBay site search results sorted by Best Match may not match the API
	// search results sorted by Best Match. The site Best Match algorithm takes
	// into account additional factors, such as user information, not available
	// to the API.
	// </span>
	//
	SortOrderTypeBestMatch SortOrderType = "BestMatch"

	//
	// Sorts items by their current price, with the highest price first.
	//
	SortOrderTypeCurrentPriceHighest SortOrderType = "CurrentPriceHighest"

	//
	// Sorts items by distance from the buyer in ascending order. The request
	// must also include a buyerPostalCode.
	//
	SortOrderTypeDistanceNearest SortOrderType = "DistanceNearest"

	//
	// Sorts items by end time, with items ending soonest listed first.
	//
	SortOrderTypeEndTimeSoonest SortOrderType = "EndTimeSoonest"

	//
	// Sorts items by the combined cost of the item price plus the shipping
	// cost, with the lowest combined price items listed first. Items are
	// returned in the following groupings: lowest total-cost items (for items
	// where shipping was properly specified) appear first, followed by freight-
	// shipping items, and then items for which no shipping was specified. Each
	// group is sorted by price.
	//
	SortOrderTypePricePlusShippingLowest SortOrderType = "PricePlusShippingLowest"

	//
	// Sorts items by the combined cost of the item price plus the shipping
	// cost, with highest combined price items listed first. Items are returned
	// in the following groupings: highest total-cost items (for items where
	// shipping was properly specified) appear first, followed by freight-
	// shipping items, and then items for which no shipping was specified. Each
	// group is sorted by price.
	//
	SortOrderTypePricePlusShippingHighest SortOrderType = "PricePlusShippingHighest"

	//
	// Sorts items by the start time, the most recently listed (newest) items
	// appear first.
	//
	SortOrderTypeStartTimeNewest SortOrderType = "StartTimeNewest"

	//
	// Sorts items by the number of bids they have received, with items that
	// have received the most bids first.
	// <br><br>
	// To sort by bid count, you must specify a listing type filter
	// to limit results to auction listings only (such as, <code>&
	// itemFilter.name=ListingType&itemFilter.value=Auction</code>).
	//
	SortOrderTypeBidCountMost SortOrderType = "BidCountMost"

	//
	// Sorts items by the number of bids they have received, with items that
	// have received the fewest bids first.
	// <br><br>
	// To sort by bid count, you must specify a listing type filter
	// to limit results to auction listings only (such as, <code>&
	// itemFilter.name=ListingType&itemFilter.value=Auction</code>).
	//
	SortOrderTypeBidCountFewest SortOrderType = "BidCountFewest"

	//
	// Sorts items available on the given site (as specified by <a
	// href="http://developer.ebay.com/DevZone/finding/Concepts/MakingACall.html#StandardURLParameters"
	// >global ID in the HTTP header or URL parameter</a>) by the
	// country in which they are located. For CountryAscending, items located in
	// the country most closely associated with the site appear first, followed
	// by items in related countries, and then items from other countries.
	// <br><br>
	// For example, when searching the Ireland site, items located in Ireland
	// (IE) will be returned first, followed by items located in related
	// countries like the United Kingdom (GB), the United States (US), Hong Kong
	// (HK), and Singapore (SG) next. Remaining items are sorted in alphabetical
	// order by English country name (regardless of the language for the site),
	// with some exceptions (for example, United States sorts first, APO/FPO sorts
	// near the end).
	// <br><br>
	// CountryAscending applies to the following sites only: Austria (EBAY-AT),
	// Belgium-French (EBAY-FRBE), Belgium-Netherlands (EBAY-NLBE), Germany
	// (EBAY-DE), Ireland (EBAY-IE), Netherlands (EBAY-NL), Poland (EBAY-PL),
	// Spain (EBAY-ES), and Switzerland (EBAY-CH).
	//
	SortOrderTypeCountryAscending SortOrderType = "CountryAscending"

	//
	// Sorts items available on the given site (as specified by global ID in
	// the HTTP header or URL parameter) by the country in which they are
	// located. For CountryDescending, items are sorted in reverse order of
	// CountryAscending. That is, items in countries not specifically related to
	// the site appear first, sorted in descending alphabetical order by English
	// country name. For example, when searching the Ireland site, items located
	// in countries like Yugoslavia or Uganda are returned first. Items located
	// in Ireland (IE) will be returned last.
	// <br><br>
	// CountryDescending applies to the following sites only: Austria (EBAY-AT),
	// Belgium-French (EBAY-FRBE), Belgium-Netherlands (EBAY-NLBE), Germany
	// (EBAY-DE), Ireland (EBAY-IE), Netherlands (EBAY-NL), Poland (EBAY-PL),
	// Spain (EBAY-ES), and Switzerland (EBAY-CH).
	//
	SortOrderTypeCountryDescending SortOrderType = "CountryDescending"
)

type AckValue string

const (

	//
	// eBay successfully processed the request and the business data is returned
	// in the response. Note that it is possible for a response to return
	// Success, but still not contain the expected data in the result.
	//
	AckValueSuccess AckValue = "Success"

	//
	// eBay encountered a fatal error during the processing of the request,
	// causing the request to fail. When a serious application-level error
	// occurs, the error is returned instead of the business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request was successfully processed, but eBay encountered a non-fatal
	// error during the processing. For best results, requests should return
	// without warnings. Inspect the warning details and resolve the problem
	// before resubmitting the request.
	//
	AckValueWarning AckValue = "Warning"

	//
	// eBay successfully processed the request, but one or more non-fatal errors
	// occurred during the processing. For best results, requests should return
	// without warning messages. Inspect the message details and resolve any
	// problems before resubmitting the request.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type ErrorSeverity string

const (

	//
	// eBay encountered a fatal error during the processing of the request,
	// causing the request to fail. When eBay encounters an error, it returns
	// error data instead of the requested business data. Inspect the error
	// details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was successfully processed, but eBay encountered a non-fatal
	// error during the processing that could affect the data returned. For
	// example, eBay might have changed the value of an input field. In this
	// case, eBay returns a successful response, but it also returns a warning.
	// For best results, requests should return without warnings. Inspect the
	// warning details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side. For
	// example, a database or server could be down. Inspect the error message to
	// find the cause of the problem. If the problem is on the eBay side, an
	// application can retry the request as-is a reasonable number of times
	// (eBay recommends twice). If the error persists, contact Developer
	// Technical Support. Once the problem has been resolved, the request may be
	// resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being the application sending the request. For example, the
	// request is missing a required data element or it contains an invalid
	// field. The problem must be corrected before the request can be resent.
	// Inspect the error message to find the cause of the problem. If the
	// problem is due to an application error, modify the application and resend
	// the request. If the error is due to invalid data, the source of the data
	// must be corrected before you resend the resend request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being missing or invalid data in the request. The problem must be
	// corrected before the request can be retried. Inspect the error message to
	// find the cause of the problem. If the problem is a result of end-user
	// data, alert the end-user to the problem and provide the means for them to
	// correct the problem. Once the problem is resolved, resend the request to
	// eBay.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type ItemFilterType string

const (

	//
	// <a name="Condition"></a>
	// Limits items to those that have the matching item condition.
	// The order of the results depends on the sortOrder you specify
	// (not ordered by conditions).
	// <br><br>
	// Mostly useful to filter items where the seller used one of
	// eBay's structured item condition formats (conditionId or
	// item specifics) to specify the item condition. If the
	// seller used item specifics, the condition is only returned
	// in conditionDisplayName.
	// <br><br>
	// If you repeat condition values, the values are processed using
	// OR logic. For example:<br>
	// To precisely find only brand new and
	// manufacturer-refurbished items, pass the filter with values of
	// 1000 and 2000 in the same request.<br>
	// To find all flavors of new items plus refurbished items (but not used items), pass the filter with values of
	// New, 2000, and 2500.<br>
	// To find a much broader set of new items, plus items with no
	// condition specified, pass the filter with values of
	// New and Unspecified.<br>
	// (The order of the values does not affect the results.
	// That is, passing New, 2000, and then 2500 gives the same
	// results as passing 2000, New, and then 2500.)
	// <br>
	// <blockquote>
	// <p>
	// <b>Allowed text values (<a
	// class="defn_type" href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// These text values (except Unspecified) limit results to items
	// with the condition defined in conditionId or item specifics.
	// </p>
	// <dl>
	// <dt>
	// New
	// </dt>
	// <dd>
	// New (or the equivalent). Excludes items with used,
	// refurbished, for parts, or unspecified conditions.
	// </dd>
	// <dt>
	// Used
	// </dt>
	// <dd>
	// Used, refurbished, or for parts.
	// Excludes items with new or unspecified conditions.
	// </dd>
	// <dt>
	// Unspecified
	// </dt>
	// <dd>
	// The seller did not specify an item condition using one of
	// eBay's structured formats. That is, either the item has no
	// condition, or the seller only specified the condition in the
	// title or narrative description. (You can try including words
	// like "new" in your search keywords to reduce unspecified
	// results. In this case, if you're using findItemsAdvanced, you
	// can also try setting descriptionSearch to true to find items
	// with the condition value in the description.)
	// Excludes items that the seller listed as new, used, refurbished,
	// for parts, or the equivalent.
	// </dd>
	// </dl>
	// </p>
	// <p>
	// <b>Allowed ID values (<a
	// class="defn_type" href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// These IDs limit results to items with the condition defined in
	// conditionId.
	// <br><br>
	// For details about the meaning of each condition, see
	// <a href="../Enums/conditionIdList.html">Item Condition IDs and Names</a>.
	// More importantly, always see the seller's listing for full
	// details and description of any imperfections before purchasing
	// an item.
	// </p>
	// <dl>
	// <dt>
	// 1000
	// </dt>
	// <dd>
	// New
	// </dd>
	// <dt>
	// 1500
	// </dt>
	// <dd>
	// New other (see details)
	// </dd>
	// <dt>
	// 1750
	// </dt>
	// <dd>
	// New with defects
	// </dd>
	// <dt>
	// 2000
	// </dt>
	// <dd>
	// Manufacturer refurbished
	// </dd>
	// <dt>
	// 2500
	// </dt>
	// <dd>
	// Seller refurbished
	// </dd>
	// <dt>
	// 3000
	// </dt>
	// <dd>
	// Used
	// </dd>
	// <dt>
	// 4000
	// </dt>
	// <dd>
	// Very Good
	// </dd>
	// <dt>
	// 5000
	// </dt>
	// <dd>
	// Good
	// </dd>
	// <dt>
	// 6000
	// </dt>
	// <dd>
	// Acceptable
	// </dd>
	// <dt>
	// 7000
	// </dt>
	// <dd>
	// For parts or not working
	// </dd>
	// </dl>
	// </blockquote>
	// <b>Example:</b>
	// <br>
	// <pre>
	// ...<br>
	// &itemFilter(0).name=Condition<br>
	// &itemFilter(0).value(0)=New<br>
	// &itemFilter(0).value(1)=2000<br>
	// &itemFilter(0).value(2)=2500<br>
	// ...
	// </pre>
	//
	ItemFilterTypeCondition ItemFilterType = "Condition"

	//
	// <a name="Currency"></a>
	// Limits results to items listed with the specified currency only.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// For a list of allowed currency values, see <a
	// href="../Enums/currencyIdList.html">currencyId Values</a>.
	// <br><br>
	//
	ItemFilterTypeCurrency ItemFilterType = "Currency"

	//
	// <a name="EndTimeFrom"></a>
	// Limits the results to items ending on or after the specified time.
	// Specify a time in the future.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#dateTime">dateTime</a>):</b>
	// <br>
	// Specify the time in GMT.
	// <br><br>
	//
	ItemFilterTypeEndTimeFrom ItemFilterType = "EndTimeFrom"

	//
	// <a name="ModTimeFrom"></a>
	// Limits the results to active items whose status has changed since the
	// specified time. Specify a time in the past. Time must be in GMT.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#dateTime">dateTime</a>):</b>
	// <br>
	// Specify the time in GMT.
	// <br><br>
	//
	ItemFilterTypeModTimeFrom ItemFilterType = "ModTimeFrom"

	//
	// <a name="EndTimeTo"></a>
	// Limits the results to items ending on or before the specified time.
	// Specify a time in the future.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#dateTime">dateTime</a>):</b>
	// <br>
	// Specify the time in GMT.
	// <br><br>
	//
	ItemFilterTypeEndTimeTo ItemFilterType = "EndTimeTo"

	//
	// <a name="ExcludeAutoPay"></a>
	// If true, excludes all items requiring immediate payment. Default is
	// false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeExcludeAutoPay ItemFilterType = "ExcludeAutoPay"

	//
	// <a name="BestOfferOnly"></a>
	// If true, the search results are limited to only items that
	// have Best Offer enabled. Default is false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeBestOfferOnly ItemFilterType = "BestOfferOnly"

	//
	// <a name="FeaturedOnly"></a>
	// If true, the search results are limited to featured item listings only.
	// Default is false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeFeaturedOnly ItemFilterType = "FeaturedOnly"

	//
	// <a name="FeedbackScoreMax"></a>
	// Specifies the maximum feedback score of a seller whose items can be
	// included in the response. If FeedbackScoreMin is also specified, the
	// FeedbackScoreMax value must be greater than or equal to the
	// FeedbackScoreMin value.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 0.
	// <br><br>
	//
	ItemFilterTypeFeedbackScoreMax ItemFilterType = "FeedbackScoreMax"

	//
	// <a name="FeedbackScoreMin"></a>
	// Specifies the minimum feedback score of a seller whose items can be
	// included in the response. If FeedbackScoreMax is also specified, the
	// FeedbackScoreMax value must be greater than or equal to the
	// FeedbackScoreMin value.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 0.
	// <br><br>
	//
	ItemFilterTypeFeedbackScoreMin ItemFilterType = "FeedbackScoreMin"

	//
	// <a name="FreeShippingOnly"></a>
	// If true, the search results are limited to only items with free shipping
	// to the site specified in the request (see <a
	// href="../Enums/GlobalIdList.html">Global ID Values</a>). Default is
	// false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeFreeShippingOnly ItemFilterType = "FreeShippingOnly"

	//
	// <a name="GetItFastOnly"></a>
	// If true, the search results are limited to only Get It Fast listings.
	// Default is false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeGetItFastOnly ItemFilterType = "GetItFastOnly"

	//
	// <a name="HideDuplicateItems"></a>
	// If true, and there are duplicate items for an item in the search results,
	// the subsequent duplicates will not appear in the results. Default is
	// false.<br>
	// Item listings are considered duplicates when all of the following
	// conditions are met:<br>
	// 1. Items are listed by the same seller<br>
	// 2. Items have exactly the same item title<br>
	// 3. Items have similar listing formats: <br>
	// &nbsp;&nbsp;&nbsp;
	// - Auctions (Auction Items and Auction BIN items)<br>
	// &nbsp;&nbsp;&nbsp;
	// - Fixed Price (Fixed Price, Multi-quantity Fixed Price, and Fixed
	// Price with Best Offer Format items)<br>
	// &nbsp;&nbsp;&nbsp;
	// - Classified Ads<br>
	// <br>
	// For Auctions, items must also have the same price and number of bids to
	// be considered duplicates.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeHideDuplicateItems ItemFilterType = "HideDuplicateItems"

	//
	// <a name="AvailableTo"></a>
	// Limits items to those available to the specified country only. Item
	// filter LocatedIn cannot be used together with item filter AvailableTo.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// Expects the two-letter ISO 3166 country code to indicate the country
	// where the item is located. For English names that correspond to each code
	// (for example, KY="Cayman Islands"), see the ISO site:
	// <br>
	// <a
	// href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm">
	// http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm</a>.
	// <br><br>
	//
	ItemFilterTypeAvailableTo ItemFilterType = "AvailableTo"

	//
	// <a name="LocatedIn"></a>
	// Limits the result set to just those items located in the specified
	// country. Item filter AvailableTo cannot be used together with item filter
	// LocatedIn.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// Expects the two-letter ISO 3166 country code to indicate the country
	// where the item is located. For English names that correspond to each code
	// (for example, KY="Cayman Islands"), see the ISO site:
	// <br>
	// <a href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm">
	// http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm</a>.
	// <br><br>
	// <b>Note: </b>Multiple values are allowed. Up to 25 countries
	// can be specified.
	// <br><br>
	//
	ItemFilterTypeLocatedIn ItemFilterType = "LocatedIn"

	//
	// <a name="LocalPickupOnly"></a>
	// If true, the search results are limited to only items which have local
	// pickup available. Default is false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeLocalPickupOnly ItemFilterType = "LocalPickupOnly"

	//
	// <a name="LocalSearchOnly"></a>
	// If true, the search results are limited to only matching items with the
	// Local Inventory Listing Options (LILO). Must be used together with the
	// <b class="con"> MaxDistance</b> item filter, and the request
	// must also specify <b class="con">buyerPostalCode</b>.
	// Currently, this is only available for the Motors site (global ID EBAY-
	// MOTOR).
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeLocalSearchOnly ItemFilterType = "LocalSearchOnly"

	//
	// <a name="ListingType"></a>
	// Filters items based listing type information. Default behavior is to
	// return all matching items.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// <blockquote>
	// <dl>
	// <dt>Auction</dt>
	// <dd>Retrieves matching auction listings (i.e., listings eligible for
	// competitive bidding at auction) only. Excludes auction items with Buy It
	// Now.</dd>
	// <dt>AuctionWithBIN</dt>
	// <dd>Retrieves all matching auction listings with Buy It Now
	// available. Excludes auction listings without Buy It Now. An auction
	// listed with Buy It Now will not be returned if a valid bid has been
	// placed on the auction.
	// </dd>
	// <dt>Classified</dt>
	// <dd>Retrieves Classified Ad format (i.e., Classified and AdFormat
	// listing type) listings only.</dd>
	// <dt>FixedPrice</dt>
	// <dd>Retrieves matching fixed price items only.  </dd>
	// <dt>All</dt>
	// <dd>Retrieves matching items for any listing type.</dd>
	// </blockquote>
	// <br>
	// <b>Note: </b>Multiple listing type values can be specified
	// for this filter.
	// <br><br>
	// <b>Example:</b>
	// <br>
	// <pre>
	// ...<br>
	// &itemFilter(0).name=ListingType<br>
	// &itemFilter(0).value(0)=AuctionWithBIN<br>
	// &itemFilter(0).value(1)=FixedPrice<br>
	// ...
	// </pre>
	// <br>
	//
	ItemFilterTypeListingType ItemFilterType = "ListingType"

	//
	// <a name="LotsOnly"></a>
	// If true, the search results are limited to only matching listings for
	// which the lot size is 2 or more. Default is false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeLotsOnly ItemFilterType = "LotsOnly"

	//
	// <a name="MaxBids"></a>
	// Limits the results to items with bid counts less than or equal to the
	// specified value. If MinBids is also specified, the MaxBids value must be
	// greater than or equal to the MinBids value.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 0.
	// <br><br>
	//
	ItemFilterTypeMaxBids ItemFilterType = "MaxBids"

	//
	// <a name="MinBids"></a>
	// Limits the results to items with bid counts greater than or equal to the
	// specified value. If MaxBids is also specified, the MaxBids value must be
	// greater than or equal to the MinBids value.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 0.
	// <br><br>
	//
	ItemFilterTypeMinBids ItemFilterType = "MinBids"

	//
	// <a name="MaxPrice"></a>
	// Specifies the maximum current price an item can have to be included in
	// the response. Optionally, you can also specify a currency ID, using the
	// <b class="con">paramName</b> and <b class="con">
	// paramValue</b> fields (for example,
	// <code>&paramName=Currency&paramValue=EUR</code>). If
	// using with MinPrice to specify a price range, the MaxPrice value must be
	// greater than or equal to MinPrice.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#decimal">decimal</a>):</b>
	// <br>
	// Decimal values greater than or equal to 0.0.
	// <br><br>
	//
	ItemFilterTypeMaxPrice ItemFilterType = "MaxPrice"

	//
	// <a name="MinPrice"></a>
	// Specifies the minimum current price an item can have to be included in
	// the response. Optionally, you can also specify a currency ID, using the
	// <b class="con">paramName</b> and <b class="con">
	// paramValue</b> fields (for example,
	// <code>&paramName=Currency&paramValue=EUR</code>). If
	// using with MaxPrice to specify a price range, the MaxPrice value must be
	// greater than or equal to MinPrice.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#decimal">decimal</a>):</b>
	// <br>
	// Decimal values greater than or equal to 0.0.
	// <br><br>
	//
	ItemFilterTypeMinPrice ItemFilterType = "MinPrice"

	//
	// <a name="PaymentMethod"></a>
	// Limits results to items that accept the specified payment method.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):
	// </b><br>
	// <blockquote>
	// <dl>
	// <dt>PayPal</dt>
	// <dd>PayPal payment method.</dd>
	// <dt>PaisaPay</dt>
	// <dd>PaisaPay payment method. The PaisaPay payment method is only
	// for the India site (global ID EBAY-IN).</dd>
	// <dt>PaisaPayEMI</dt>
	// <dd>PaisaPayEscrow EMI (Equal Monthly Installment) payment method.
	// The PaisaPayEscrowEMI payment method is only for the India site (global
	// ID EBAY-IN).</dd>
	// </blockquote>
	// <br>
	//
	ItemFilterTypePaymentMethod ItemFilterType = "PaymentMethod"

	//
	// <a name="MaxQuantity"></a>
	// Limits the results to listings with a quantity less than or equal to the
	// specified value. If MinQuantity is also specified, the MaxQuantity value
	// must be greater than or equal to the MinQuantity value.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 1.
	// <br><br>
	//
	ItemFilterTypeMaxQuantity ItemFilterType = "MaxQuantity"

	//
	// <a name="MinQuantity"></a>
	// Limits the results to listings with a quantity greater than or equal to
	// the specified value. If MaxQuantity is also specified, the MaxQuantity
	// value must be greater than or equal to the MinQuantity value.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 1.
	// <br><br>
	//
	ItemFilterTypeMinQuantity ItemFilterType = "MinQuantity"

	//
	// <a name="Seller"></a>
	// Specify one or more seller names. Search results will include items from
	// the specified sellers only. The Seller item filter cannot be used
	// together with either the ExcludeSeller or TopRatedSellerOnly item
	// filters.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// Valid seller names.
	// <br><br>
	// <b>Note: </b>Multiple values are allowed. Up to 100 sellers
	// can be specified.
	// <br><br>
	// <b>Example:</b>
	// <br>
	// <pre>
	// ...<br>
	// &itemFilter(0).name=Seller<br>
	// &itemFilter(0).value(0)=seller01<br>
	// &itemFilter(0).value(1)=seller02<br>
	// &itemFilter(0).value(2)=seller03<br>
	// ...
	// </pre>
	//
	ItemFilterTypeSeller ItemFilterType = "Seller"

	//
	// <a name="ExcludeSeller"></a>
	// Specify one or more seller names. Search results will not include items
	// from the specified sellers. The ExcludeSeller item filter cannot be used
	// together with either the Seller or TopRatedSellerOnly item filters.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// Valid seller names.
	// <br><br>
	// <b>Note: </b>Multiple values are allowed. Up to 100 sellers
	// can be specified.
	// <br><br>
	// <b>Example:</b>
	// <br>
	// <pre>
	// ...<br>
	// &itemFilter(0).name=ExcludeSeller<br>
	// &itemFilter(0).value(0)=seller01<br>
	// &itemFilter(0).value(1)=seller02<br>
	// &itemFilter(0).value(2)=seller03<br>
	// ...
	// </pre>
	//
	ItemFilterTypeExcludeSeller ItemFilterType = "ExcludeSeller"

	//
	// <a name="ExcludeCategory"></a>
	// Specify one or more category IDs. Search results will not include items
	// from the specified categories or their child categories.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// Valid category IDs.
	// <br><br>
	// <b>Note: </b>Multiple values are allowed. Up to 25 categories
	// can be specified.
	// <br><br>
	// <b>Example:</b>
	// <br>
	// <pre>
	// ...<br>
	// &itemFilter(0).name=ExcludeCategory<br>
	// &itemFilter(0).value(0)=168093<br>
	// &itemFilter(0).value(1)=56170<br>
	// &itemFilter(0).value(2)=73834<br>
	// ...
	// </pre>
	//
	ItemFilterTypeExcludeCategory ItemFilterType = "ExcludeCategory"

	//
	// <a name="WorldOfGoodOnly"></a>
	// If true, the search results are limited to only items listed in the World
	// of Good marketplace. Defaults to false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeWorldOfGoodOnly ItemFilterType = "WorldOfGoodOnly"

	//
	// <a name="MaxDistance"></a>
	// Specifies the maximum distance from the specified postal code (<b
	// class="con">buyerPostalCode</b>) to search for items. The
	// request must also specify <b class="con">buyerPostalCode</b>.
	// <br><br>
	// The minimum distance supported is 5 miles or 10 kilometers, depending
	// upon whether the distance unit supported for the site to which the
	// request is submitted is miles (mi) or kilometers (km). For example, the
	// smallest MaxDistance for searches submitted to the US eBay site (global
	// ID EBAY-US) is 5 (miles). The smallest MaxDistance for searches submitted
	// to the Germany eBay site (global ID EBAY-DE) is 10 (kilometers).
	// <br><br>
	// Values are rounded up to the nearest 5 (mi) or 10 (km) increment. For
	// example, a value of 21 will be rounded up to 25 (mi) on the eBay US site
	// and to 30 (km) on the eBay Germany site.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 5.
	// <br><br>
	//
	ItemFilterTypeMaxDistance ItemFilterType = "MaxDistance"

	//
	// <a name="SellerBusinessType"></a>
	// Restricts the items to those that are from sellers whose business type is
	// the specified value. Only one value can be specified.
	// <br><br>
	// Not supported on all sites. Applies only to the following sites, which
	// support seller business features:
	// <ul>
	// <li>Austria (EBAY-AT)</li>
	// <li>Belgium - Dutch (EBAY-NLBE)</li>
	// <li>Belgium - French (EBAY-FRBE)</li>
	// <li>France (EBAY-FR)</li>
	// <li>Germany (EBAY-DE)</li>
	// <li>Ireland (EBAY-IE)</li>
	// <li>Italy  (EBAY-IT)</li>
	// <li>Poland (EBAY-PL)</li>
	// <li>Spain (EBAY-ES)</li>
	// <li>Switzerland (EBAY-CH)</li>
	// <li>UK (EBAY-GB)</li>
	// </ul>
	// <br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):
	// </b><br>
	// <blockquote>
	// <dl>
	// <dt>
	// Business
	// </dt>
	// <dd>
	// The seller is registered as a business on eBay.
	// </dd>
	// <dt>
	// Private
	// </dt>
	// <dd>
	// The seller is registered as an individual on eBay.
	// </dd>
	// </dl>
	// </blockquote>
	// <br>
	//
	ItemFilterTypeSellerBusinessType ItemFilterType = "SellerBusinessType"

	//
	// <a name="TopRatedSellerOnly"></a>
	// If true, the search results are limited to only matching items where the
	// seller qualifies as a top-rated seller on the specified site. Site is
	// specified with the <a
	// href="../../Concepts/MakingACall.html#StandardURLParameters">global ID
	// header or URL parameter</a>. The default <a
	// href="../Enums/GlobalIdList.html ">global ID value</a> is EBAY-
	// US (the eBay US site). Default for this filter is false.
	// <br><br>
	// The TopRatedSellerOnly item filter cannot be used together with either
	// the Seller or ExcludeSeller item filters.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeTopRatedSellerOnly ItemFilterType = "TopRatedSellerOnly"

	//
	// <a name="SoldItemsOnly"></a>
	// If true, excludes all completed items which are not ended by being sold. This filter can be used only with the findCompletedItems call.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeSoldItemsOnly ItemFilterType = "SoldItemsOnly"

	//
	// <a name="CharityOnly"></a>
	// If true, the search results are limited to items for which all or part of
	// the proceeds are given to a charity. Each item in the search results will
	// include the ID of the given charity. Default is false.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeCharityOnly ItemFilterType = "CharityOnly"

	//
	// <a name="ListedIn"></a>
	// The site on which the items were originally listed. This can be useful
	// for buyers who wish to
	// see only items on their domestic site either for delivery cost reasons or
	// time reasons, such as for gifting
	// occasions like birthdays or holidays.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="../Enums/GlobalIdList.html">Global ID
	// Values</a>):</b>
	// <br><br>
	// GlobalID Value
	// <br><br>
	//
	ItemFilterTypeListedIn ItemFilterType = "ListedIn"

	//
	// <a name="ExpeditedShippingType"></a>
	// Specifies the type of expedited shipping. You can specify
	// either Expedited or OneDayShipping. Only items that can be shipped
	// by the specified type are returned.
	// <br><br>
	// ExpeditedShippingType is used together with the MaxHandlingTime and
	// ReturnsAcceptedOnly filters to filter items
	// for certain kinds of gifting events such as birthdays or holidays where
	// the items must be delivered by a certain date.
	// If you wish to mimic the behavior of the eBay holiday filters, you would
	// use ExpeditedShippingType set
	// to either Expedited or OneDayShipping, MaxHandlingTime to 1,
	// ReturnsAcceptedOnly set to true, and for the
	// Germany site, set PaymentMethod to PayPal. (The holiday filters may not
	// always be available in the
	// eBay UI, depending on the season; however, the equivalent filter behavior
	// continues to be available in the API.)
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#string">string</a>):</b>
	// <br>
	// Expedited, OneDayShipping
	// <br><br>
	//
	ItemFilterTypeExpeditedShippingType ItemFilterType = "ExpeditedShippingType"

	//
	// <a name="MaxHandlingTime"></a>
	// Specifies the maximum number of handling days the seller requires to ship
	// the item. Only items with a handling time less than or equal to this
	// number will be returned. (The handling time is the amount of time, in
	// days, required by the seller to get the item ready to ship and handed off
	// to the actual carrier who does the delivery. It does not include the time
	// required by the carrier to deliver the item. <br><br>
	// ExpeditedShippingType is used together with the MaxHandlingTime and
	// ReturnsAcceptedOnly filters to filter items for certain kinds of gifting
	// events such as birthdays or holidays where the items must be delivered by
	// a certain date. If you wish to mimic the behavior of the eBay holiday
	// filters, you would use ExpeditedShippingType set to either Expedited or
	// OneDayShipping, MaxHandlingTime to 1, ReturnsAcceptedOnly set to true,
	// and for the Germany site, set PaymentMethod to PayPal. (The holiday
	// filters may not always be available in the eBay UI, depending on the
	// season; however, the equivalent filter behavior continues to be available
	// in the API.)
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#int">int</a>):</b>
	// <br>
	// Integer greater than or equal to 1.
	// <br><br>
	//
	ItemFilterTypeMaxHandlingTime ItemFilterType = "MaxHandlingTime"

	//
	// <a name="ReturnsAcceptedOnly"></a>
	// If set to true, returns only items where the seller accepts returns.
	// <br><br>
	// ExpeditedShippingType is used together with the MaxHandlingTime and
	// ReturnsAcceptedOnly filters to filter items for certain kinds of gifting
	// events such as birthdays or holidays where the items must be delivered by
	// a certain date. If you wish to mimic the behavior of the eBay holiday
	// filters, you would use ExpeditedShippingType set to either Expedited or
	// OneDayShipping, MaxHandlingTime to 1, ReturnsAcceptedOnly set to true,
	// and for the Germany site, set PaymentMethod to PayPal. (The holiday
	// filters may not always be available in the eBay UI, depending on the
	// season; however, the equivalent filter behavior continues to be available
	// in the API.)
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// true, false
	// <br><br>
	//
	ItemFilterTypeReturnsAcceptedOnly ItemFilterType = "ReturnsAcceptedOnly"

	//
	// <a name="ValueBoxInventory"></a>
	// <b>Coming Soon: </b>
	// This filter can be used in conjunction with the sortOrder
	// PricePlusShippingLowest to return competitively priced items from eBay
	// top-rated sellers that have a BuyItNow price, with the lowest priced item
	// at the top of the list. This filter returns items from categories that
	// are catalog-enabled; items from non catalog-enabled categories are not
	// returned. Sellers can use this item filter to determine competitive
	// pricing; buying applications can use it to obtain competitive items from
	// top rated sellers that are likely to sell quickly.
	// <br><br>
	// If set to 1, the item filter constraints are applied and the items are
	// returned accordingly. If set to 0 (zero) the item filter is not applied.
	// Defaults to 0.
	// <br><br>
	// <b>Allowed values (<a
	// class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br>
	// 1, 0
	// <br><br>
	//
	ItemFilterTypeValueBoxInventory ItemFilterType = "ValueBoxInventory"

	//
	// <a name="OutletSellerOnly"></a>
	// If set to true, returns only items listed by sellers at eBay's outlet stores, such as the <a href="http://www.ebay.com/fashion/outlet">Fashion Outlet</a>.
	// <br/><br/>
	// <b>Allowed values (<a class="defn_type" href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br/>
	// true, false
	// <br/><br/>
	//
	ItemFilterTypeOutletSellerOnly ItemFilterType = "OutletSellerOnly"

	//
	// <a name="AuthorizedSellerOnly"></a>
	// If set to true, returns only items listed by authorized sellers.
	// <br/><br/>
	// <b>Allowed values (<a class="defn_type" href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#boolean">boolean</a>):</b>
	// <br/>
	// true, false
	// <br/><br/>
	//
	ItemFilterTypeAuthorizedSellerOnly ItemFilterType = "AuthorizedSellerOnly"

	//
	// <a name="StartTimeFrom"></a>
	// Limits the results to items started on or after the specified time.
	// Specify a time in the future.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#dateTime">dateTime</a>):</b>
	// <br>
	// Specify the time in GMT.
	// <br><br>
	//
	ItemFilterTypeStartTimeFrom ItemFilterType = "StartTimeFrom"

	//
	// <a name="StartTimeTo"></a>
	// Limits the results to items started on or before the specified time.
	// Specify a time in the future.
	// <br><br>
	// <b>Allowed values (<a class="defn_type"
	// href="http://developer.ebay.com/DevZone/finding/CallRef/types/simpleTypes.html#dateTime">dateTime</a>):</b>
	// <br>
	// Specify the time in GMT.
	// <br><br>
	//
	ItemFilterTypeStartTimeTo ItemFilterType = "StartTimeTo"
)

type OutputSelectorType string

const (

	//
	// Include information about the seller in the response.
	//
	OutputSelectorTypeSellerInfo OutputSelectorType = "SellerInfo"

	//
	// Include information about the seller's eBay store in the response.
	//
	OutputSelectorTypeStoreInfo OutputSelectorType = "StoreInfo"

	//
	// Include a CategoryHistogram container with information about categories
	// that match your search.
	//
	OutputSelectorTypeCategoryHistogram OutputSelectorType = "CategoryHistogram"

	//
	// Include an AspectHistogram container with information about aspects from
	// the category that is most relevant to your search.
	// </span>
	//
	OutputSelectorTypeAspectHistogram OutputSelectorType = "AspectHistogram"

	//
	// Include a ConditionHistogram container with the number of
	// items found per condition (for example, how many items are new).
	// This value has no effect when Condition is specified as
	// an item filter. Supported for all eBay sites except US eBay Motors, India (IN), Malaysia
	// (MY) and Philippines (PH).
	//
	OutputSelectorTypeConditionHistogram OutputSelectorType = "ConditionHistogram"

	//
	// Include the GalleryInfoContainer, which contains URLs for three thumbnail
	// images of the item in different sizes: large, medium, and small.
	//
	OutputSelectorTypeGalleryInfo OutputSelectorType = "GalleryInfo"

	//
	// Include a URL to a picture of the item that is 800x800 pixels in size.
	//
	OutputSelectorTypePictureURLSuperSize OutputSelectorType = "PictureURLSuperSize"

	//
	// Include a URL to a picture of the item that is 400x400 pixels in size.
	//
	OutputSelectorTypePictureURLLarge OutputSelectorType = "PictureURLLarge"

	//
	// Include the unitPrice container with unit type and quantity information used for per-unit
	// pricing (on eBay EU sites only).
	//
	OutputSelectorTypeUnitPriceInfo OutputSelectorType = "UnitPriceInfo"
)

type GallerySizeEnum string

const (

	//
	// Small sized thumbnail image. Small images are up to 80 pixels on the longest side.
	//
	GallerySizeEnumSmall GallerySizeEnum = "Small"

	//
	// Medium sized thumbnail image  Medium images are up to 96 pixels on the longest side.
	//
	GallerySizeEnumMedium GallerySizeEnum = "Medium"

	//
	// Large sized thumbnail image. Large images are up to 140 pixels on the longest side.
	//
	GallerySizeEnumLarge GallerySizeEnum = "Large"
)

type GetVersionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GetVersionRequest"`

	*BaseServiceRequest
}

type GetVersionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GetVersionResponse"`

	*BaseServiceResponse
}

type FindItemsForFavoriteSearchRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsForFavoriteSearchRequest"`

	*BaseServiceRequest

	//
	// Reserved for future use.
	//
	SearchId int64 `xml:"searchId,omitempty"`

	//
	// Reserved for future use.
	//
	SearchName string `xml:"searchName,omitempty"`

	//
	// Reserved for future use.
	//
	StartTimeFrom time.Time `xml:"startTimeFrom,omitempty"`

	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`
}

type FindItemsForFavoriteSearchResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsForFavoriteSearchResponse"`

	*BaseFindingServiceResponse

	//
	// Reserved for future use.
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Reserved for future use.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Reserved for future use.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type FindCompletedItemsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindCompletedItemsRequest"`

	*BaseFindingServiceRequest

	//
	// Specify one or more words to use in a search query for finding items
	// on eBay. By default, queries search item titles only. When running
	// queries, it is best to include complete keywords values--eBay checks
	// words in context with each other. If you are using a URL request and
	// your keyword query consists of multiple words, use "%20" to separate
	// the words. For example, use "Harry%20Potter" to search for items
	// containing those words in any order. Queries aren't case-sensitive,
	// so it doesn't matter whether you use uppercase or lowercase letters.
	// <br><br>
	// The words "and" and "or" are treated like any other word (and not their
	// logical connotation). Only use "and", "or", or "the" if you are
	// searching for listings containing those specific words.
	// <br><br>
	// findCompletedItems requires that you specify either keywords or a
	// categoryId in the search criteria.
	//
	Keywords string `xml:"keywords,omitempty"`

	//
	// Specifies the category from which you want to retrieve item listings.
	// This field can be repeated to include multiple categories.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid categories, use the Shopping API <b
	// class="con">GetCategoryInfo</b> call.
	//
	CategoryId []string `xml:"categoryId,omitempty"`

	//
	// Reduce the number of items returned by a find request using item
	// filters. Use <b class="con">itemFilter</b> to specify
	// name/value pairs. You can include multiple item filters in a single
	// request.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`

	//
	// Aspect filters refine (limit) the number of items returned by a find
	// request. Obtain input values for aspectFilter fields from an
	// aspectHistogramContainer returned in the response of a previous
	// query.
	// <br><br>
	// By issuing a series of find queries, you can continually refine the
	// items returned in your responses. Do this by repeating a query using
	// the aspect values returned in one response as the input values to
	// your next query.
	// <br><br>
	// For example, the aspectHistogramContainer in a response on Men's
	// Shoes could contain an aspect of Size, along with "aspect values" for
	// the different sizes currently available in Men's Shoes. By populating
	// aspectFilter fields with the values returned in an
	// aspectHistogramContainer, you can hone the item results returned by
	// your new query.
	// <br><br>
	//
	AspectFilter []*AspectFilter `xml:"aspectFilter,omitempty"`

	//
	// Defines what data to return, in addition to the default set of data,
	// in a response.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of item
	// fields. Use outputSelector to include more information in the
	// response. The additional data is grouped into discrete nodes. You can
	// specify multiple nodes by including this field multiple times, as
	// needed, in the request.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's response time (performance), including in the case with
	// feedback data.
	//
	OutputSelector []*OutputSelectorType `xml:"outputSelector,omitempty"`

	//
	// <b>As of October 2014, domains will be deprecated and "category" is used instead. </b>
	//
	DomainFilter []*DomainFilter `xml:"domainFilter,omitempty"`

	//
	// Input ISBN, UPC, EAN, or ReferenceID (ePID) to specify the type of
	// product for which you want to search.
	// <br><br>
	// For example, to search using an ISBN, specify productID.type=ISBN and
	// set productID.value to an ISBN value. To search using an eBay Product
	// Reference ID, specify productID.type= ReferenceID and set
	// productID.value to an ePID value (also known as an Bay Product
	// Reference ID). If you do not know the ePID value for a product, use <b class="con">FindProducts</b> in the eBay Shopping API to retrieve the desired ePID.
	//
	ProductId *ProductId `xml:"productId,omitempty"`
}

type FindCompletedItemsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindCompletedItemsResponse"`

	*BaseFindingServiceResponse

	//
	// Response container for category histograms. Only returned when one or
	// more category histograms are returned. A category histogram is not
	// returned if there are no matching items or if the search is
	// restricted to a single leaf category.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The category IDs returned for items in search results are for the
	// leaf categories in which the items are listed. If you use these
	// category IDs as input, the response will not return a category
	// histogram.
	// </span>
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// When searching the eBay Motors site, category histograms may not be
	// available for some parent categories. In these cases, aspect
	// histograms should be used to refine search results. This behavior is
	// consistent with eBay Motors site search behavior.
	// </span>
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Response container for aspect histograms.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Reserved for future use.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type GetSearchKeywordsRecommendationRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GetSearchKeywordsRecommendationRequest"`

	*BaseServiceRequest

	//
	// Specify one or more words to use in a search query for finding items
	// on eBay. It is best to include the complete keywords value, as words
	// are checked in context with each other. If you are using a URL
	// request and your keyword query consists of multiple words, use
	// <code>%20</code> to separate the words (for example,
	// <code>arry%20Potter</code>). Submitted keywords are not
	// case sensitive.
	// <br> <br>
	// Keyword recommendations will not be returned if the submitted
	// keywords are accepted standard spellings for item listings. For
	// example, no recommended keywords are returned for "nrfb" (Never
	// Removed From Box) even if the keywords query does not return any
	// search results, because this is an accepted listing term. If no
	// correct spelling can be identified for submitted keywords (such as
	// <code>aabbccdd</code>), no recommended keywords are
	// returned, even though the keyword is obviously not a word and will
	// not return search results.
	//
	Keywords string `xml:"keywords,omitempty"`
}

type GetSearchKeywordsRecommendationResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GetSearchKeywordsRecommendationResponse"`

	*BaseServiceResponse

	//
	// Contains a spell-checked version of the submitted keywords. If no
	// recommended spelling can be identified for the submitted keywords,
	// the response contains a warning to that effect and an empty keywords
	// field is returned.
	//
	Keywords string `xml:"keywords,omitempty"`

	//
	// Reserved for future use.
	//
	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type FindItemsByKeywordsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByKeywordsRequest"`

	*BaseFindingServiceRequest

	//
	// Specify one or more words to use in a search query for finding items
	// on eBay. By default, queries search item titles only. When running
	// queries, it is best to include complete keywords values--eBay checks
	// words in context with each other. If you are using a URL request and
	// your keyword query consists of multiple words, use "%20" to separate
	// the words. For example, use "Harry%20Potter" to search for items
	// containing those words in any order. Queries aren't case-sensitive,
	// so it doesn't matter whether you use uppercase or lowercase letters.
	//
	Keywords string `xml:"keywords,omitempty"`

	//
	// Reduce the number of items returned by a find request using item
	// filters. Use <b class="con">itemFilter</b> to specify
	// name/value pairs. You can include multiple item filters in a single
	// request.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`

	//
	// Aspect filters refine (limit) the number of items returned by a find
	// request. Obtain input values for aspectFilter fields from an
	// aspectHistogramContainer returned in the response of a previous
	// query.
	// <br><br>
	// By issuing a series of find queries,
	// you can continually refine the items returned in your responses. Do
	// this by repeating a query using the aspect values returned in one
	// response as the input values to your next query.
	// <br><br/>
	// For example, the aspectHistogramContainer in a response on
	// Men's Shoes could contain an aspect of Size, along with "aspect
	// values" for the different sizes currently available in Men's Shoes.
	// By populating aspectFilter fields with the values returned in an
	// aspectHistogramContainer, you can refine the item results returned by
	// your new query.
	//
	AspectFilter []*AspectFilter `xml:"aspectFilter,omitempty"`

	//
	// Specifies what item data to return in a response in addition to the
	// default set of data.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of item
	// fields. Use outputSelector to include more item information in the
	// response. The additional data is grouped into discrete nodes. You can
	// specify multiple nodes by including this field multiple times, as
	// needed, in the request.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's performance (response time), as is the case with including
	// seller feedback data.
	//
	OutputSelector []*OutputSelectorType `xml:"outputSelector,omitempty"`

	//
	// <b>As of October 2014, domains will be deprecated and "category" is used instead. </b>
	//
	DomainFilter []*DomainFilter `xml:"domainFilter,omitempty"`
}

type FindItemsByKeywordsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByKeywordsResponse"`

	*BaseFindingServiceResponse

	//
	// Response container for category histograms. Only returned when one or
	// more category histograms are returned. A category histogram is not
	// returned if the search query returns no matching items.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// When searching the eBay Motors site, category histograms may not be
	// available for some parent categories. In these cases, aspect
	// histograms should be used to refine search results. This behavior
	// is consistent with eBay Motors site search behavior.
	// </span>
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Response container for aspect histograms.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Response container for condition histograms.<br>
	// <br>
	// Not returned when Condition is specified in itemFilter.
	// That is, only returned when you have not yet narrowed
	// your search based on specific conditions.<br>
	// <br>
	// Supported for all eBay sites except US eBay Motors,
	// India (IN), Malaysia (MY) and Philippines (PH).
	// International items that appear in search results
	// are included in a site's histogram counts.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type FindItemsByCategoryRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByCategoryRequest"`

	*BaseFindingServiceRequest

	//
	// Specifies the category from which you want to retrieve item listings.
	// This field can be repeated to include multiple categories.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid categories, use the Shopping API <b
	// class="con">GetCategoryInfo</b> call.
	// <br><br>
	// Up to three (3) categories can be specified.
	//
	CategoryId []string `xml:"categoryId,omitempty"`

	//
	// Reduce the number of items returned by a find request using item
	// filters. Use <b class="con">itemFilter</b> to specify
	// name/value pairs. You can include multiple item filters in a single
	// request.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`

	//
	// Aspect filters refine (limit) the number of items returned by a find
	// request. Obtain input values for aspectFilter fields from an
	// aspectHistogramContainer returned in the response of a previous
	// query.
	// <br><br>
	// By issuing a series of find queries, you can continually refine the
	// items returned in your responses. Do this by repeating a query using
	// the aspect values returned in one response as the input values to
	// your next query.
	// <br><br>
	// For example, the aspectHistogramContainer in a response on Men's
	// Shoes could contain an aspect of Size, along with "aspect values" for
	// the different sizes currently available in Men's Shoes. By populating
	// aspectFilter fields with the values returned in an
	// aspectHistogramContainer, you can refine the item results returned by
	// your new query.
	//
	AspectFilter []*AspectFilter `xml:"aspectFilter,omitempty"`

	//
	// Defines what data to return, in addition to the default set of data,
	// in a response.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of item
	// fields. Use outputSelector to include more information in the
	// response. The additional data is grouped into discrete nodes. You can
	// specify multiple nodes by including this field multiple times, as
	// needed, in the request.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's response time (performance), including in the case with
	// feedback data.
	//
	OutputSelector []*OutputSelectorType `xml:"outputSelector,omitempty"`

	//
	// <b>As of October 2014, domains will be deprecated and "category" is used instead. </b>
	//
	DomainFilter []*DomainFilter `xml:"domainFilter,omitempty"`
}

type FindItemsByCategoryResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByCategoryResponse"`

	*BaseFindingServiceResponse

	//
	// Response container for a category histogram. This container is
	// returned only when the specified category has children categories.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The category IDs returned for items in search results are for the
	// leaf categories in which the items are listed. If you use a leaf
	// category ID as input, the response will not return a category
	// histogram.
	// </span>
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// When searching the eBay Motors site, category histograms may not be
	// available for some parent categories. In these cases, aspect
	// histograms should be used to refine search results. This behavior
	// is consistent with eBay Motors site search behavior.
	// </span>
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Response container for aspect histograms. Aspect histograms are
	// returned for categories.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Response container for condition histograms.
	// Condition histograms are returned for any category
	// (leaf or parent).<br>
	// <br>
	// Not returned when Condition is specified in itemFilter.
	// That is, only returned when you have not yet narrowed
	// your search based on specific conditions.<br>
	// <br>
	// Only returned when you search the eBay US site (as of
	// February 2011). International items in US search results
	// are included in the histogram counts.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type FindItemsAdvancedRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsAdvancedRequest"`

	*BaseFindingServiceRequest

	//
	// Specify one or more words to use in a search query for finding items
	// on eBay. By default, queries search item titles only. When running
	// queries, it is best to include complete keywords values--eBay checks
	// words in context with each other. If you are using a URL request and
	// your keyword query consists of multiple words, use "%20" to separate
	// the words. For example, use "Harry%20Potter" to search for items
	// containing those words in any order. Queries aren't case-sensitive,
	// so it doesn't matter whether you use uppercase or lowercase letters.
	// <b class="con">findItemsAdvanced</b> requires that you
	// specify <b class="con">keywords</b>  and/or a <b
	// class="con">categoryId</b> in the request. The exception to
	// this rule is when the Seller item filter is used. The Seller item
	// filter can be used without specifying either <b class="con">
	// keywords</b> or <b class="con">categoryId</b> to
	// retrieve all active items for the specified seller.
	// <br><br>
	//
	Keywords string `xml:"keywords,omitempty"`

	//
	// Specifies the category from which you want to retrieve item listings.
	// This field can be repeated to include multiple categories. Up to
	// three (3) categories can be specified.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid categories, use the Shopping API <b
	// class="con">GetCategoryInfo</b> call.
	// <br><br>
	// <b class="con">findItemsAdvanced</b> requires that you
	// specify <b class="con">keywords</b>  and/or a <b
	// class="con">categoryId</b> in the request. The exception to
	// this rule is when the Seller item filter is used. The Seller item
	// filter can be used without specifying either <b class="con">
	// keywords</b> or <b class="con">categoryId</b> to
	// retrieve all active items for the specified seller.
	//
	CategoryId []string `xml:"categoryId,omitempty"`

	//
	// Reduce the number of items returned by a find request using item
	// filters. Use <b class="con">itemFilter</b> to specify
	// name/value pairs. You can include multiple item filters in a single
	// request.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`

	//
	// Aspect filters refine (limit) the number of items returned by a find
	// request. Obtain input values for aspectFilter fields from an
	// aspectHistogramContainer returned in the response of a previous
	// query.
	// <br><br>
	// By issuing a series of find queries, you can continually refine the
	// items returned in your responses. Do this by repeating a query using
	// the aspect values returned in one response as the input values to
	// your next query.
	// <br><br>
	// For example, the aspectHistogramContainer in a response on Men's
	// Shoes could contain an aspect of Size, along with "aspect values" for
	// the different sizes currently available in Men's Shoes. By populating
	// aspectFilter fields with the values returned in an
	// aspectHistogramContainer, you can refine the item results returned by
	// your new query.
	//
	AspectFilter []*AspectFilter `xml:"aspectFilter,omitempty"`

	//
	// Defines what data to return, in addition to the default set of data,
	// in a response.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of item
	// fields. Use outputSelector to include more information in the
	// response. The additional data is grouped into discrete nodes. You can
	// specify multiple nodes by including this field multiple times, as
	// needed, in the request.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's response time (performance), including in the case with
	// feedback data.
	//
	OutputSelector []*OutputSelectorType `xml:"outputSelector,omitempty"`

	//
	// Specifies whether your keyword query should be applied to item
	// descriptions in addition to titles. Searching the text of item
	// descriptions incurs a performance hit (it can take longer than
	// searches that don't include description searches). If true, the text
	// of the item's description and subtitles will be included in the
	// search. If false, only item titles are included in keyword searches.
	//
	DescriptionSearch bool `xml:"descriptionSearch,omitempty"`

	//
	// <b>As of October 2014, domains will be deprecated and "category" is used instead. </b>
	//
	DomainFilter []*DomainFilter `xml:"domainFilter,omitempty"`
}

type FindItemsAdvancedResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsAdvancedResponse"`

	*BaseFindingServiceResponse

	//
	// Response container for category histograms. Only returned when one or
	// more category histograms are returned. A category histogram is not
	// returned if there are no matching items or if the search is
	// restricted to a single leaf category.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The category IDs returned for items in search results are for the
	// leaf categories in which the items are listed. If you use these
	// category IDs as input, the response will not return a category
	// histogram.
	// </span>
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// When searching the eBay Motors site, category histograms may not be
	// available for some parent categories. In these cases, aspect
	// histograms should be used to refine search results. This behavior is
	// consistent with eBay Motors site search behavior.
	// </span>
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Response container for aspect histograms.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Response container for condition histograms.
	// <br>
	// <br>
	// Not returned when Condition is specified in itemFilter.
	// That is, only returned when you have not yet narrowed
	// your search based on specific conditions.<br>
	// <br>
	// Only returned when you search the eBay US site (as of
	// February 2011). International items in US search results
	// are included in the histogram counts.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type FindItemsByProductRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByProductRequest"`

	*BaseFindingServiceRequest

	//
	// Input ISBN, UPC, EAN, or ReferenceID (ePID) to specify the type of
	// product for which you want to search.
	// <br><br>
	// For example, to search using an ISBN, specify productID.type=ISBN and
	// set productID.value to an ISBN value. To search using an eBay Product
	// Reference ID, set <b class="con">productId.type</b> to
	// "ReferenceID" and set <b class="con">productId.value</b>
	// to an ePID value (also known as an Bay Product Reference ID). If you
	// do not know the ePID value for a product, use <b
	// class="con">FindProducts</b> in the eBay Shopping API to
	// retrieve the desired ePID.
	//
	ProductId *ProductId `xml:"productId,omitempty"`

	//
	// Reduce the number of items returned by a find request using item
	// filters. Use <b class="con">itemFilter</b> to specify
	// name/value pairs. You can include multiple item filters in a single
	// request.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`

	//
	// Defines what data to return, in addition to the default set of data,
	// in a response.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of item
	// fields. Use outputSelector to include more information in the
	// response. The additional data is grouped into discrete nodes. You can
	// specify multiple nodes by including this field multiple times, as
	// needed, in the request.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's response time (performance), including in the case with
	// feedback data.
	//
	OutputSelector []*OutputSelectorType `xml:"outputSelector,omitempty"`
}

type FindItemsByProductResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByProductResponse"`

	*BaseFindingServiceResponse

	//
	// Response container for aspect histograms.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Response container for condition histograms.<br>
	// <br>
	// Not returned when Condition is specified in itemFilter.
	// That is, only returned when you have not yet narrowed
	// your search based on specific conditions.<br>
	// <br>
	// Only returned when you search the eBay US site (as of
	// February 2011). International items in US search results
	// are included in the histogram counts.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type FindItemsIneBayStoresRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsIneBayStoresRequest"`

	*BaseFindingServiceRequest

	//
	// Specify one or more words to use in a search query for finding items
	// on eBay. By default, queries search item titles only. When running
	// queries, it is best to include complete keywords values--eBay checks
	// words in context with each other. If you are using a URL request and
	// your keyword query consists of multiple words, use "%20" to separate
	// the words. For example, use "Harry%20Potter" to search for items
	// containing those words in any order. Queries aren't case-sensitive,
	// so it doesn't matter whether you use uppercase or lowercase letters.
	// <br><br>
	// You must specify keywords when you are searching across all eBay
	// stores. That is, <b class="con">keywords</b> is required
	// if <b class="con">storeName</b> is not specified in the
	// request.
	//
	Keywords string `xml:"keywords,omitempty"`

	//
	// The name of the eBay store to search. Returns all items in the store,
	// or can be used with keywords to search for specific items in an eBay
	// store. If you do not specify keywords, you must specify storeName.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// Store names are case sensitive. Also, if the store name contains an
	// ampersand (&), you must use the & character entity (&
	// amp;) in its place.
	// </span>
	// If you do not specify <b class="con">storeName</b> in the
	// request, the search is across all eBay stores. When searching across
	// all stores, you must specify keywords.
	// <br><br>
	// The results can be filtered by item listing details or aspects.
	//
	StoreName string `xml:"storeName,omitempty"`

	//
	// Reduce the number of items returned by a find request using item
	// filters. Use <b class="con">itemFilter</b> to specify
	// name/value pairs. You can include multiple item filters in a single
	// request.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`

	//
	// Defines what data to return, in addition to the default set of data,
	// in a response.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of item
	// fields. Use outputSelector to include more information in the
	// response. The additional data is grouped into discrete nodes. You can
	// specify multiple nodes by including this field multiple times, as
	// needed, in the request.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's response time (performance), including in the case with
	// feedback data.
	//
	OutputSelector []*OutputSelectorType `xml:"outputSelector,omitempty"`

	//
	// Aspect filters refine (limit) the number of items returned by a find
	// request. Obtain input values for aspectFilter fields from an
	// aspectHistogramContainer returned in the response of a previous
	// query.
	// <br><br>
	// By issuing a series of find queries, you can continually refine the
	// items returned in your responses. Do this by repeating a query using
	// the aspect values returned in one response as the input values to
	// your next query.
	// <br><br/>
	// For example, the aspectHistogramContainer in a response on
	// Men's Shoes could contain an aspect of Size, along with "aspect
	// values" for the different sizes currently available in Men's Shoes.
	// By populating aspectFilter fields with the values returned in an
	// aspectHistogramContainer, you can refine the item results returned by
	// your new query.
	//
	AspectFilter []*AspectFilter `xml:"aspectFilter,omitempty"`

	//
	// <b>As of October 2014, domains will be deprecated and "category" is used instead. </b>
	//
	DomainFilter []*DomainFilter `xml:"domainFilter,omitempty"`

	//
	// Specifies the category from which you want to retrieve item listings.
	// This field can be repeated to include multiple categories.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid categories, use the Shopping API <b
	// class="con">GetCategoryInfo</b> call.
	// <br><br>
	// Up to three (3) categories can be specified.
	//
	CategoryId []string `xml:"categoryId,omitempty"`
}

type FindItemsIneBayStoresResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsIneBayStoresResponse"`

	*BaseFindingServiceResponse

	//
	// Response container for category histograms. Only returned when one or
	// more category histograms are returned. A category histogram is not
	// returned if there are no matching items or if the search is
	// restricted to a single leaf category.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The category IDs returned for items in search results are for the
	// leaf categories in which the items are listed. If you use these
	// category IDs as input, the response will not return a category
	// histogram.
	// </span>
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// When searching the eBay Motors site, category histograms may not be
	// available for some parent categories. In these cases, aspect
	// histograms should be used to refine search results. This behavior is
	// consistent with eBay Motors site search behavior.
	// </span>
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Response container for aspect histograms.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Response container for condition histograms.
	// These can be returned for any category (parent or leaf).
	// <br>
	// <br>
	// Not returned when Condition is specified in itemFilter.
	// That is, only returned when you have not yet narrowed
	// your search based on specific conditions.<br>
	// <br>
	// Only returned when you search the eBay US site (as of
	// February 2011). International items in US search results
	// are included in the histogram counts.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type FindItemsByImageRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByImageRequest"`

	*BestMatchFindingServiceRequest

	//
	// Specifies the item that the customer wants to use for retrieving
	// more listings with similar images. The item must active and it must
	// be listed in a Clothing, Shoes & Accessories category (parent
	// category ID 11450 on the eBay US site). In addition, the item ID you
	// specify must exist on either the US, UK, or DE the sites.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// Specifies the leaf category from which you want to retrieve item
	// listings with similar images. If no category is specified, search
	// results can come from any Clothing, Shoes & Accessories leaf
	// category. This field can be repeated (up to 3 times) to include
	// multiple categories.
	// <br><br>
	// Image similarity searches are only supported in Clothing, Shoes &
	// Accessories leaf categories on the eBay US, UK, and Germany sites.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid leaf categories, use the Shopping API <b
	// class="con">GetCategoryInfo</b> call.
	//
	CategoryId []string `xml:"categoryId,omitempty"`

	//
	// Reduce the number of items returned by a find request using item
	// filters. Use <b class="con">itemFilter</b> to specify
	// name/value pairs. You can include multiple item filters in a single
	// request.
	//
	ItemFilter []*ItemFilter `xml:"itemFilter,omitempty"`

	//
	// Aspect filters refine (limit) the number of items returned by a find
	// request. Obtain input values for aspectFilter fields from an
	// aspectHistogramContainer returned in the response of a previous
	// query.
	// <br><br>
	// By issuing a series of find queries, you can continually refine the
	// items returned in your responses. Do this by repeating a query using
	// the aspect values returned in one response as the input values to
	// your next query.
	// <br><br>
	// For example, the aspectHistogramContainer in a response on Men's
	// Shoes could contain an aspect of Size, along with "aspect values" for
	// the different sizes currently available in Men's Shoes. By populating
	// aspectFilter fields with the values returned in an
	// aspectHistogramContainer, you can refine the item results returned by
	// your new query.
	//
	AspectFilter []*AspectFilter `xml:"aspectFilter,omitempty"`

	//
	// <b>As of October 2014, domains will be deprecated and "category" is used instead. </b>
	//
	DomainFilter []*DomainFilter `xml:"domainFilter,omitempty"`

	//
	// Defines what data to return, in addition to the default set of data,
	// in a response.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of item
	// fields. Use outputSelector to include more information in the
	// response. The additional data is grouped into discrete nodes. You can
	// specify multiple nodes by including this field multiple times, as
	// needed, in the request.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's response time (performance), including in the case with
	// feedback data.
	//
	OutputSelector []*OutputSelectorType `xml:"outputSelector,omitempty"`
}

type FindItemsByImageResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services FindItemsByImageResponse"`

	*BaseFindingServiceResponse

	//
	// Response container for category histograms. Only returned when one or
	// more category histograms are returned. A category histogram is not
	// returned if there are no matching items or if the search is
	// restricted to a single leaf category.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The category IDs returned for items in search results are for the
	// leaf categories in which the items are listed. If you use these
	// category IDs as input, the response will not return a category
	// histogram.
	// </span>
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// When searching the eBay Motors site, category histograms may not be
	// available for some parent categories. In these cases, aspect
	// histograms should be used to refine search results. This behavior is
	// consistent with eBay Motors site search behavior.
	// </span>
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Response container for aspect histograms.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Response container for condition histograms.
	// These can be returned for any category (parent or leaf).
	// <br>
	// <br>
	// Not returned when Condition is specified in itemFilter.
	// That is, only returned when you have not yet narrowed
	// your search based on specific conditions.<br>
	// <br>
	// Only returned when you search the eBay US site (as of
	// February 2011). International items in US search results
	// are included in the histogram counts.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`
}

type GetHistogramsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GetHistogramsRequest"`

	*BaseServiceRequest

	//
	// Specifies the category from which you want to retrieve histogram
	// information.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid categories, use the Shopping API <b
	// class="con">GetCategoryInfo</b> call.
	//
	CategoryId string `xml:"categoryId,omitempty"`
}

type GetHistogramsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GetHistogramsResponse"`

	*BaseServiceResponse

	//
	// Response container for category histograms. This container is
	// returned only when the specified category has children categories.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// Category histograms may not be available for some parent categories
	// on the eBay Motors site.
	// </span>
	//
	CategoryHistogramContainer *CategoryHistogramContainer `xml:"categoryHistogramContainer,omitempty"`

	//
	// Response container for aspect histograms. Aspect histograms are
	// returned for categories only.
	//
	AspectHistogramContainer *AspectHistogramContainer `xml:"aspectHistogramContainer,omitempty"`

	//
	// Response container for condition histograms.
	// Returned for leaf and parent categories.<br>
	// <br>
	// Only returned when you search the eBay US site (as of
	// February 2011). International items in US search results
	// are included in the histogram counts.
	//
	ConditionHistogramContainer *ConditionHistogramContainer `xml:"conditionHistogramContainer,omitempty"`

	//
	// Reserved for future use.
	//
	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type BestMatchFindingServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services BestMatchFindingServiceRequest"`

	*BaseServiceRequest

	//
	// Controls the pagination of the result set. Child elements specify the
	// maximum number of item listings to return per call and the page of
	// data to return. Controls the number of listings returned in the
	// response, but does not specify the details to return for each
	// listing.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// No more than 10,000 items can be retrieved for a given search,
	// regardless of how many matches are found. This limit is enforced
	// by the maximum page number allowed (100) and the maximum entries per
	// page allowed (100). </span>
	//
	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`

	//
	// The postal code of the buyer. This is used as the basis for proximity
	// searches as well as local searches.
	// <br><br>
	// A proximity search requires <b
	// class="con">buyerPostalCode</b> and a <b
	// class="con">MaxDistance</b> item filter.
	// A local search requires <b
	// class="con">buyerPostalCode</b> and item filters for <b
	// class="con">MaxDistance</b> and <b
	// class="con">LocalSearch</b>.
	//
	BuyerPostalCode string `xml:"buyerPostalCode,omitempty"`

	//
	// Container for affiliate details. eBay uses the specified affiliate
	// information to build a View Item URL and Product URL string with
	// correctly formatted affiliate tracking information, which it returns
	// in the response. You can publish these URLs, and if a user clicks
	// them to access eBay, the respective affiliate might get a commission,
	// depending on the user's actions.
	//
	Affiliate *Affiliate `xml:"affiliate,omitempty"`
}

type BaseFindingServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services BaseFindingServiceRequest"`

	*BestMatchFindingServiceRequest

	//
	// Sort the returned items according to a single specified sort order.
	//
	SortOrder *SortOrderType `xml:"sortOrder,omitempty"`
}

type BaseFindingServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services BaseFindingServiceResponse"`

	*BaseServiceResponse

	//
	// Container for the item listings that matched the search criteria.
	// The data for each item is returned in individual containers, if
	// any matches were found.
	//
	SearchResult *SearchResult `xml:"searchResult,omitempty"`

	//
	// Indicates the pagination of the result set. Child elements indicate
	// the page number that is returned, the maximum number of item listings
	// to return per page, total number of pages that can be returned, and
	// the total number of listings that match the search criteria.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`

	//
	// A URL to view the search results on the eBay web site. The search
	// results on the web site will use the same pagination as the API
	// search results.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// eBay URLs returned in fields, such as <b
	// class="con">viewItemURL</b>, are subject to syntax and other
	// changes without notice. To avoid problems in your application when
	// eBay alters the URL format, we advise you to avoid parsing eBay URLs
	// programmatically. We strive to ensure that other fields in the
	// response contain all the information that is encoded in the URL, and
	// more.
	// </span>
	//
	ItemSearchURL *AnyURI `xml:"itemSearchURL,omitempty"`

	//
	// Reserved for future use.
	//
	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type ExtensionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ExtensionType"`

	//
	// Reserved for future use.
	//
	Id *PositiveInteger `xml:"id,omitempty"`

	//
	// Reserved for future use.
	//
	Version string `xml:"version,omitempty"`

	//
	// Reserved for future use.
	//
	ContentType string `xml:"contentType,omitempty"`

	//
	// Reserved for future use.
	//
	Value string `xml:"value,omitempty"`
}

type Affiliate struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services Affiliate"`

	//
	// Specify the affiliate value obtained from your tracking partner. For the
	// eBay Partner Network, the tracking ID is the provided Campaign ID
	// ("campid"). A Campaign ID is a unique 10-digit number used for
	// associating traffic and is valid across all programs to which you have
	// been accepted. Another example of this value is the Affiliate ID given to
	// you by TradeDoubler.
	//
	TrackingId string `xml:"trackingId,omitempty"`

	//
	// Specifies your tracking partner for affiliate commissions. Affiliates
	// earn money from eBay for driving traffic to eBay. This field is required
	// if you specify a tracking ID. Depending on your tracking partner, specify
	// one of the following values. Not all partners are valid for all sites.
	// For PlaceOffer, only the eBay Partner Network and Mediaplex are valid:
	// <br>
	// <br>2 = Be Free
	// <br>3 = Affilinet
	// <br>4 = TradeDoubler
	// <br>5 = Mediaplex
	// <br>6 = DoubleClick
	// <br>7 = Allyes
	// <br>8 = BJMT
	// <br>9 = eBay Partner Network
	//
	NetworkId string `xml:"networkId,omitempty"`

	//
	// You can define an affiliate customId if you want an ID to monitor your
	// marketing efforts. Chose an ID up to up to 256 characters in length. If
	// you are using the eBay Partner Network, and you provide a customId, the
	// tracking URL returned by the eBay Partner Network will contain your
	// customId value.
	//
	CustomId string `xml:"customId,omitempty"`

	//
	// The geoTargeting parameter will be used for geographical targeting your
	// affiliate programs. The geo-targeting feature works for English speaking
	// countries (US, UK, CA, AU, and IE) only.
	//
	GeoTargeting bool `xml:"geoTargeting,omitempty"`
}

type CategoryHistogram struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services CategoryHistogram"`

	*Category

	//
	// The total number of items in the associated category that match the
	// search criteria.
	//
	Count int64 `xml:"count,omitempty"`

	//
	// Container for histogram information pertaining to a child of the
	// category specified in the request. Histograms return data on up to
	// 10 children. Histograms are only a single level deep. That is, a
	// given category histogram contains only immediate children.
	//
	ChildCategoryHistogram []*CategoryHistogram `xml:"childCategoryHistogram,omitempty"`
}

type CategoryHistogramContainer struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services CategoryHistogramContainer"`

	//
	// Statistical (item count) information on the categories that contain items
	// that match the search criteria or specified category or categories. A
	// category histogram contains information for up to 10 child categories.
	// Search result total entries may not necessarily match the sum of category
	// histogram item counts.
	// <br><br>
	// For search calls, the item count shows the distribution of matching items
	// across each of the returned categories. A category histogram is not
	// returned if there are no matching items or if the search is restricted to
	// a single leaf category.
	// <br><br>
	// For getHistograms, the category histogram contains the total item count
	// for the specified category and item counts for the child categories
	// containing the most item listings. A category histogram is not returned
	// if the specified category is a leaf category.
	// <br><br>
	// For categories associated with specific items, review the individual item
	// containers returned in the search result.
	//
	CategoryHistogram []*CategoryHistogram `xml:"categoryHistogram,omitempty"`
}

type AspectValueHistogram struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services AspectValueHistogram"`

	//
	// Number of items that share the characteristic the respective aspect
	// value.
	//
	Count int64 `xml:"count,omitempty"`

	//
	// Name of an aspect value. For example, "Short Sleeve" could be an aspect
	// value of the Sleeve Style aspect in the Women's Dresses category, or
	// "Athletic" could be an aspect value of the Style aspect in the Men's Shoes
	// category.
	//
	ValueName string `xml:"valueName,attr,omitempty"`
}

type AspectHistogramContainer struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services AspectHistogramContainer"`

	//
	// As of October 2014, this field will no longer be returned.
	//
	DomainName string `xml:"domainName,omitempty"`

	//
	// As of October 2014, this field will no longer be returned.
	//
	DomainDisplayName string `xml:"domainDisplayName,omitempty"`

	//
	// A characteristic of an item in a category. For example, "Optical Zoom",
	// "Brand", and "Megapixels" could be aspects of the Digital Cameras category.
	// Aspects are well-known, standardized characteristics of a category, and
	// they vary from category to category (the aspects of "Men's Shoes" are
	// different from those of "Digital Cameras"). A search request on the eBay
	// site will often display aspects and their respective aspect values on the
	// left-had side of a query response.
	// <br><br>
	// Aspects are extracted from item listing properties (such as item titles
	// and subtitles), and represent the characteristics of active items. Values
	// returned in the Aspect container can be used as inputs to the
	// aspectFilter fields in a query to distill the items returned by the
	// query. eBay generates aspects dynamically from the items currently
	// listed; aspects provide a view into what is currently available on eBay.
	// Because of this, aspect values returned one day cannot be guaranteed to
	// be valid the next day.
	// <br><br>
	// The following graphic shows how eBay might return a set of aspects for
	// the Digital Cameras category. In this graphic, "Product Type", "Brand", and
	// "Megapixels" are aspects, and "Point & Shoot", "Canon", and "12.0 to
	// 12.9 MP" are aspect values. Histogram values (item counts) are shown for
	// each aspect value.
	// <br><br>
	// <img
	// src="http://developer.ebay.com/DevZone/finding/Concepts/images/refinesearch.jpg" width="142" height="468"
	// alt="eBay Aspects" />
	//
	Aspect []*Aspect `xml:"aspect,omitempty"`
}

type Aspect struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services Aspect"`

	//
	// Container that returns the name of the respective aspect value and the
	// histogram (the number of available items) that share that item
	// characteristic.
	// <br><br>
	// This value is not returned if there are no matching aspects for the category.
	//
	ValueHistogram []*AspectValueHistogram `xml:"valueHistogram,omitempty"`

	//
	// Name of an aspect that is part of a category. For example, "Optical Zoom" or
	// "Megapixels" could be aspects of the Digital Cameras category. For the
	// current aspect names associated with a specific item, refer to the
	// aspectHistogramContainer returned for the respective item.
	// <br><br>
	// This value is not returned if there are no matching aspects for the
	// category.
	//
	Name string `xml:"name,attr,omitempty"`
}

type AspectFilter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services AspectFilter"`

	//
	// Name of a standard item characteristic associated with a given category.
	// For example, "Optical Zoom" or "Megapixels" are aspects for the Digital
	// Cameras category. The current aspect names associated with a specific
	// category can be found in the aspect histogram. Aspect histograms can be
	// retrieved for a given keyword query or category. The aspect histogram
	// contains information about aspects from the category that is most relevant
	// to your search.
	//
	AspectName string `xml:"aspectName,omitempty"`

	//
	// A value name for a given aspect. For example, "Point & Shoot" is a
	// value name for the "Product Type" aspect in the "Digital Cameras" category.
	//
	AspectValueName []string `xml:"aspectValueName,omitempty"`
}

type SearchResult struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services SearchResult"`

	//
	// Container for the data of a single item that matches the search criteria.
	//
	Item []*SearchItem `xml:"item,omitempty"`

	//
	// The total number of items returned in the search response. This is often
	// equal to the <b class="con">entriesPerPage</b> value. If the
	// count is less than the specified <b
	// class="con">entriesPerPage</b>, it indicates the end of
	// the result set.
	//
	Count int32 `xml:"count,attr,omitempty"`
}

type DiscountPriceInfo struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services DiscountPriceInfo"`

	//
	// This field contains the price to which a discounted-price display treatment
	// is to be applied (for example, a strikethrough price). The discounted price
	// of an item (specified in the currentPrice field) is the BIN price and is
	// less than the originalRetailPrice of the item.
	//
	OriginalRetailPrice *Amount `xml:"originalRetailPrice,omitempty"`

	//
	// If pricingTreatment is MAP, the item price cannot be displayed directly on
	// the page containing the item. When listing a MAP item, the seller stipulates
	// how they want the buyer to view the price of the item by setting this field
	// to either PreCheckout or DuringCheckout.
	// <br /><br />
	// If this field is set to PreCheckout, the buyer must click a link (or button)
	// to view the item price on a different page (such as in a pop-up window). If
	// this field is set to DuringCheckout, the currentPrice must be shown only
	// when the buyer is driven to the eBay site, where the price is displayed in
	// the checkout flow.
	// <br /><br />
	// MAP items are supported only on the eBay US site.
	//
	MinimumAdvertisedPriceExposure *MapExposureEnum `xml:"minimumAdvertisedPriceExposure,omitempty"`

	//
	// This field denotes whether or not an item qualifies for a discount pricing
	// treatment display. If a seller lists an item with DiscountPriceInfo values,
	// the item response container will include a DiscountPriceInfo container,
	// and this field will be set to either STP, MAP, or None. If this field is
	// set to MAP, you must abide by the rules for displaying MAP items, as described
	// in minimumAdvertisedPriceExposure.
	// <br /><br />
	// <span class="tablenote"><b>Important:</b>
	// For listings that return PricingTreatment set to MAP, you are legally
	// required to follow the rules for displaying the price of the item to
	// potential buyers. You are bound by the terms of the API License Agreement
	// to follow these rules. Refer to the API License Agreement for consequences
	// of non-compliance.
	// </span>
	//
	PricingTreatment *PriceTreatmentEnum `xml:"pricingTreatment,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this field indicates that
	// the discount price (specified as currentPrice) is the price for which the
	// seller offered the same (or similar) item for sale on eBay within the
	// previous 30 days. The discount price is always in reference to the seller's
	// own price for the item.
	// <br /><br />
	// In the event both soldOffEbay and soldOnEbay fields are	set, soldOnEbay
	// takes precedence.
	//
	SoldOnEbay bool `xml:"soldOnEbay,omitempty"`

	//
	// Used by the eBay UK and eBay Germany (DE) sites, this field indicates that
	// the discount price (specified as currentPrice) is the price for which the
	// seller offered the same item for sale on a web site or offline store other
	// than eBay in the previous 30 days. The discount price is always in reference
	// to the seller's own price for the item.
	// <br /><br />
	// In the event both soldOffEbay and soldOnEbay fields are	set, soldOnEbay
	// takes precedence.
	//
	SoldOffEbay bool `xml:"soldOffEbay,omitempty"`
}

type DomainFilter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services DomainFilter"`

	//
	// <b>As of October 2014, domains will be deprecated and "category" is used instead. </b>
	//
	DomainName []string `xml:"domainName,omitempty"`
}

type ProductId struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ProductId"`

	Value string

	//
	// The nature of the identifier being used. Applies to findCompletedItems and
	// findItemsByProduct. For findItemsByProduct, search
	// by a single type.
	// <dl>
	// <dt>
	// <strong>productId values:</strong>
	// </dt>
	// <dt>
	// ReferenceID
	// </dt>
	// <dd>
	// The global reference ID (ePID) for an eBay catalog product. A reference ID is a
	// fixed reference to a product, regardless of version. Use FindProducts in the
	// Shopping API to determine valid ePID values that you can use as input to
	// findItemsByProduct or findCompletedItems. Each product in the response includes
	// its reference ID.
	// </dd>
	// <dt>
	// ISBN
	// </dt>
	// <dd>
	// ISBN-10 or ISBN-13 value for books. (The string length of ProductID
	// indicates whether the ID is 10 or 13 characters.) If you know a
	// book's ISBN, you can use this instead of the eBay Reference ID to
	// search for that book. Max length of corresponding value: 13
	// </dd>
	// <dt>
	// UPC
	// </dt>
	// <dd>
	// UPC value for products in Music (for example, CDs), DVDs & Movies, and
	// Video Games categories. If you know a product's UPC, you
	// can use this instead of the eBay Reference ID to search for that
	// product. Max length of corresponding value: 12
	// </dd>
	// <dt>
	// EAN
	// </dt>
	// <dd>
	// EAN value for books. (This is used more commonly in European
	// countries.) If you know a book's EAN, you can use this instead of the
	// eBay Reference ID to search for that book. Max length of
	// corresponding value: 13
	// </dd>
	// </dl>
	//
	Type string `xml:"type,attr,omitempty"`
}

type ItemFilter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ItemFilter"`

	//
	// In addition to filter Name/Value pairs, some itemFilters use an
	// additional parameter Name/Value pair. Specifically, filters that use
	// currency values (MaxPrice and MinPrice) make use of addition parameters.
	// When you use these itemFilters, set paramName to Currency and provide the
	// currency ID in paramValue.
	// <br><br>
	// For example, if you use the MaxPrice itemFilter, you will need to specify
	// a parameter Name of Currency with a parameter Value that specifies the
	// type of currency desired.
	// <br><br>
	// Note that for MaxPrice and MinPrice itemFilters, the default value for
	// paramName is Currency.
	//
	ParamName string `xml:"paramName,omitempty"`

	//
	// The currency value associated with the respective itemFilter parameter
	// Name.
	// <br><br>
	// Usually paramName is set to Currency and paramValue is set to the
	// currency type in which the monetary transaction occurs.
	// <br><br>
	// Note that for MaxPrice and MinPrice itemFilters, the default value for
	// paramValue is USD.
	//
	ParamValue string `xml:"paramValue,omitempty"`

	//
	// Specify the name of the item filter you want to use. The itemFilter name
	// must have a corresponding value. You can apply multiple itemFilter
	// Name/Value pairs in a single request.
	//
	Name *ItemFilterType `xml:"name,omitempty"`

	//
	// The value associated with the respective item filter name. Allowed values
	// and datatypes vary for a given filter name.
	//
	Value []string `xml:"value,omitempty"`
}

type ConditionHistogramContainer struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ConditionHistogramContainer"`

	//
	// Statistical (item count) information on the condition of items
	// that match the search criteria (or specified category).
	// For example, the number of brand new items that match the query.
	// <br>
	// <br>
	// Each conditionHistogram specifies one condition and the
	// number of matching items found. The list of all
	// conditionHistogram containers returned represents the union of
	// all conditions that were found in the item results.
	// For example, if items were found in different categories,
	// and if those categories support different sets of
	// item conditions, then all those conditions are
	// returned in the list, regardless of category.<br>
	// <br>
	// If multiple items use the same condition ID, but some items
	// use different display names for that condition, the histogram
	// shows the site's default display name for that condition.
	// This means that the condition name in a histogram may not
	// always exactly match the condition names on the counted items.
	//
	ConditionHistogram []*ConditionHistogram `xml:"conditionHistogram,omitempty"`
}

type ConditionHistogram struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ConditionHistogram"`

	//
	// The ID and name of a condition that was found in the item results.
	//
	Condition *Condition `xml:"condition,omitempty"`

	//
	// The number of items found that match the condition.
	// Only counts items where the seller specified the
	// condition by using item.conditionId.
	//
	Count int32 `xml:"count,omitempty"`
}

type BaseServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services BaseServiceResponse"`

	//
	// Indicates whether or not errors or warnings were generated during the
	// processing of the request.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Description of an error or warning that occurred when eBay processed the
	// request. Not returned if the ack value is Success.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The release version that eBay used to process the request. Developer
	// Technical Support may ask you for the version value if you work with them
	// to troubleshoot issues.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The version in use is normally the latest release version, as specified
	// in the release notes. Note that eBay releases the API to international
	// sites about a week after the API version is released to the US site.
	// </span>
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the request.
	// This value is returned in GMT, the ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ). See the "dateTime" type for information about the time format, and for details on converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that
	// occurred. Your application can use error codes as identifiers in your
	// customized error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain in which the error occurred.
	// <dl>
	// <dt>
	// <strong>domain values:</strong>
	// </dt>
	// <dt>
	// Marketplace
	// </dt>
	// <dd>
	// A business or validation error occurred in the service.
	// </dd>
	// <dt>
	// SOA
	// </dt>
	// <dd>
	// An exception occurred in the Service Oriented Architecture (SOA)
	// framework.
	// </dd>
	// </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Indicates whether the reported problem is fatal (an error) or is less-
	// severe (a warning). Review the error message details for information on
	// the cause.
	// <br><br>
	// If the request fails and the application is the source of the error (for
	// example, a required element is missing), update the application before
	// you retry the request. If the problem is due to incorrect user data,
	// alert the end-user to the problem and provide the means for them to
	// correct the data. Once the problem in the application or data is
	// resolved, re-send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request
	// a reasonable number of times (eBay recommends you try the request twice).
	// If the error persists, contact Developer Technical Support. Once the
	// problem has been resolved, you can resend the request in its original
	// form.
	// <br><br>
	// If a warning occurs, warning information is returned in addition to the
	// business data. Normally, you do not need to resend the request (as the
	// original request was successful). However, depending on the cause of the
	// warning, you might need to contact the end user, or eBay, to effect a
	// long term solution to the problem.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application
	// errors, and system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that caused in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Name of the subdomain in which the error occurred.
	// <dl>
	// <dt>
	// <strong>subdomain values:</strong>
	// </dt>
	// <dt>
	// Finding
	// </dt>
	// <dd>
	// The error is specific to the Finding service.
	// </dd>
	// <dt>
	// MarketplaceCommon
	// </dt>
	// <dd>
	// The error is common to all Marketplace services.
	// </dd>
	// </dl>
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Various warning and error messages return one or more variables that
	// contain contextual information about the error. This is often the
	// field or value that triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ErrorParameter"`

	Value string

	//
	// The name of the input parameter returned with the error.
	// Inspecting the parameter (or its input value) will often aid in
	// understanding the cause of the error. Not all error messages
	// contain this value.
	//
	Name string `xml:"name,attr,omitempty"`
}

type BaseServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services BaseServiceRequest"`
}

type PaginationInput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services PaginationInput"`

	//
	// Specifies which subset of data (or "page") to return in the call
	// response. The number of data pages is determined by the total number of
	// items matching the request search criteria (returned in
	// paginationOutput.totalEntries) divided by the number of entries to
	// display in each response (entriesPerPage). You can return up to the first
	// 100 pages of the result set by issuing multiple requests and specifying,
	// in sequence, the pages to return.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// Specifies the maximum number of entries to return in a single call. If
	// the number of entries found on the specified pageNumber is less than the
	// value specified here, the number of items returned will be less than the
	// value of entriesPerPage. This indicates the end of the result set.
	// <br><br>
	// If entriesPerPage is set to a number greater than 100, the default value,
	// 100, will be used.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`
}

type PaginationOutput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services PaginationOutput"`

	//
	// The subset of item data returned in the current response. Search results
	// are divided into sets, or "pages," of item data. The number of pages is
	// equal to the total number of items matching the search criteria divided
	// by the value specified for entriesPerPage in the request. The response
	// for a request contains one "page" of item data.
	// <br> <br>
	// This returned value indicates the page number of item data returned (a
	// subset of the complete result set). If this field contains 1, the
	// response contains the first page of item data (the default). If the value
	// returned in totalEntries is less than the value for entriesPerPage,
	// pageNumber returns 1 and the response contains the entire result set.
	// <br> <br>
	// The value of pageNumber is normally equal to the value input for
	// paginationInput.pageNumber. However, if the number input for pageNumber
	// is greater than the total possible pages of output, eBay returns the last
	// page of item data in the result set, and the value for pageNumber is set
	// to the respective (last) page number.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// The maximum number of items that can be returned in the response. This
	// number is always equal to the value input for
	// paginationInput.entriesPerPage.
	// <br> <br>
	// The end of the result set has been reached if the number specified for
	// entriesPerPage is greater than the number of items found on the specified
	// pageNumber. In this case, there will be fewer items returned than the
	// number specified in entriesPerPage. This can be determined by comparing
	// the entriesPerPage value with the value returned in the count attribute
	// for the searchResult field.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`

	//
	// The total number of pages of data that could be returned by repeated
	// search requests. Note that if you modify the value of
	// inputPagination.entriesPerPage in a request, the value output for
	// totalPages will change. A value of "0" is returned if eBay does not find
	// any items that match the search criteria.
	//
	TotalPages int32 `xml:"totalPages,omitempty"`

	//
	// The total number of items found that match the search criteria in your
	// request. Depending on the input value for entriesPerPage, the response
	// might include only a portion (a page) of the entire result set. A value
	// of "0" is returned if eBay does not find any items that match the search
	// criteria.
	//
	TotalEntries int32 `xml:"totalEntries,omitempty"`
}

type UnitPriceInfo struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services UnitPriceInfo"`

	//
	// Designation of size, weight, volume or count to be used to specify the unit quantity
	// of the item. This value can be one of the following:
	// <br/><br/>
	// <pre> Kg  100g  10g  L  100ml  10ml  M  M2  M3  Unit </pre>
	//
	Type_ string `xml:"type,omitempty"`

	//
	// Number of units of size, weight, volume or count of the specified unit type for the
	// item. eBay divides the item price by this number to get the price per unit to be
	// displayed in the item listing for comparison purposes.
	//
	Quantity float64 `xml:"quantity,omitempty"`
}

type Amount struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services Amount"`

	Value float64

	//
	// Currency in which the monetary amount is specified.
	//
	CurrencyId string `xml:"currencyId,attr,omitempty"`
}

type Category struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services Category"`

	//
	// The unique ID of a category on the specified eBay site.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// Display name of a category as it appears on the eBay Web site.
	//
	CategoryName string `xml:"categoryName,omitempty"`
}

type Condition struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services Condition"`

	//
	// The numeric ID (for example, 1000) for the item condition.<br>
	// <br>
	// In item results, this is only returned when the seller listed the
	// item with a condition ID.
	// Some categories don't support or require condition IDs
	// (for example, most Antiques categories don't). Also, until spring 2011,
	// some GTC listings may define the item condition in item specifics
	// instead, so no ID is returned.<br>
	// <br>
	// If you specify Condition in itemFilter, the response returns items
	// with the correctly matching condition(s), even if conditionId is
	// not returned. For example, if you specify a value of "New"
	// or "1000" in the item filter, the response only returns new items.
	//
	ConditionId int32 `xml:"conditionId,omitempty"`

	//
	// The human-readable label for the item condition.
	// Display names are localized for the site on which they're listed
	// (not necessarily the site on which they're viewed).<br>
	// <br>
	// In item results, this is only returned when the seller specified the item's condition
	// using a structured format eBay recognizes (for example, conditionId or an
	// older item specifics format).<br>
	// <br>
	// <b>When conditionId is also present:</b>
	// Most categories use the same display name for the same
	// condition ID. Some categories may override the display name based
	// on buyer expectations for items in the category.
	// For example, condition ID 1000 could be called "New"
	// in one category and "New with tags" in another.
	// If an item is listed in two categories, the primary category
	// controls the display name.<br>
	// <br>
	// Behind the scenes, eBay's search engine uses the ID (not the
	// display name) to determine whether items are new, used, or
	// refurbished. So, if you need to normalize the conditions
	// across categories (such as to group items by condition),
	// it may be easier to use the ID and then show the varying
	// display names for reference.<br>
	// <br>
	// <b>In condition histograms:</b> If you search against
	// a specific category and some items match based on their
	// secondary category, the histogram only shows the display name
	// if the secondary category supports the condition.
	// (Condition IDs and names are dependent on the primary category.)
	// However, the histogram shows the condition ID and item counts.
	// This should only occur in a very small percent of results.
	// Histograms may support display names in these cases later in 2011.
	// As a workaround, you can fill in the missing name based on the
	// "Item Condition IDs and Names" (link below) or based on
	// the condition from an applicable item in the results.<br>
	// <br>
	// For example, suppose a seller lists a concert T-shirt in a
	// clothing category with the condition "New without tags" (1500),
	// and also in a music accessories secondary category (where
	// "New without tags" isn't a recognized condition).
	// If you specify the music accessories category in your request,
	// the condition ID (1500) is shown in the histogram, but not the
	// display name. However, the display name is shown within the items.
	//
	ConditionDisplayName string `xml:"conditionDisplayName,omitempty"`
}

type Distance struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services Distance"`

	Value float64

	//
	// Unit of measure used in a distance calculation. Units can be in either
	// kilometers or miles, depending on the Global ID.
	//
	Unit string `xml:"unit,attr,omitempty"`
}

type GalleryInfoContainer struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GalleryInfoContainer"`

	//
	// URL for a single item image thumbnail of a specific size.
	//
	GalleryURL *GalleryURL `xml:"galleryURL,omitempty"`
}

type GalleryURL struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services GalleryURL"`

	Value *AnyURI

	//
	// Relative size (Large, Medium, or Small) of the image thumbnail for the
	// item.
	//
	GallerySize *GallerySizeEnum `xml:"gallerySize,attr,omitempty"`
}

type ListingInfo struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ListingInfo"`

	//
	// Shows whether or not the seller will accept a best offer for the
	// associated item. Best Offer allows a buyer to make a lower-priced binding
	// offer on a fixed price item. Buyers cannot see how many offers have been
	// made (only the seller can see this information). To make a best offer on
	// a listing, use the eBay Web site.
	//
	BestOfferEnabled bool `xml:"bestOfferEnabled,omitempty"`

	//
	// Applies only to auction listings that were listed with a Buy It Now
	// price. Buy It Now lets a user purchase the item at a fixed price,
	// effectively ending the auction. On most sites, the Buy It Now option is
	// removed (and this value returns false) once a valid bid is made on the
	// associated item (a valid bid could be a bid above the reserve price).
	// <br><br>
	// buyItNowAvailable will return "false" if the listing type is anything but
	// "AuctionWithBIN". Please ignore buyItNowAvailable for fixed-price
	// listings.
	//
	BuyItNowAvailable bool `xml:"buyItNowAvailable,omitempty"`

	//
	// The Buy It Now Price of the item (if any), in the currency of the site on
	// which the item was listed. You can use this field to determine if the
	// item was originally listed with Buy It Now, even if the Buy It Now option
	// is no longer available for the item.
	// <br><br>
	// For Basic Fixed-Price (FixedPrice), Ad Format (AdFormat), and Classified Ad (Classified)
	// listings, currentPrice	is the current fixed price.
	// <br><br>
	// Only returned if an item was listed with Buy It Now.
	//
	BuyItNowPrice *Amount `xml:"buyItNowPrice,omitempty"`

	//
	// The listing's Buy It Now Price (if any), converted into the currency of
	// the site to which you sent your search request. For active items, refresh
	// this value every 24 hours to pick up changes in conversion rates (if this
	// value has been converted).
	// <br><br>
	// Price fields are returned as doubles, not necessarily in the traditional
	// monetary format of the site's country. For example, a US Dollar value
	// might be returned as 3.880001 instead of 3.88.
	// <br><br>
	// Only returned if an item was listed with Buy It Now.
	//
	ConvertedBuyItNowPrice *Amount `xml:"convertedBuyItNowPrice,omitempty"`

	//
	// Time stamp that eBay recorded as the moment the listing was made
	// available. This value is returned in GMT, the ISO 8601 date and time
	// format (YYYY-MM-DDTHH:MM:SS.SSSZ). See the "dateTime" type for
	// information about the time format, and for details on converting to and
	// from the GMT time zone. Note that it is possible for startTime to be
	// different from the value returned by GetSingleItem.
	//
	StartTime time.Time `xml:"startTime,omitempty"`

	//
	// Time stamp specifying when the listing is scheduled to end, or the
	// actual end time if the item listing has ended. This value is returned in
	// GMT, the ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ). See
	// the "dateTime" type for information about the time format, and for
	// details on converting to and from the GMT time zone.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// For items that are "Good Till Canceled," this value is 5 minutes later
	// than the actual end time of the item. This difference in time is
	// intended to facilitate the renewal of these items' end times (which
	// occurs every 30 days).
	// </span>
	//
	EndTime time.Time `xml:"endTime,omitempty"`

	//
	// The format of the listing, such as online auction, fixed price, or
	// advertisement.
	// <dl>
	// <dt>
	// <strong>listingType values:</strong>
	// </dt>
	// <dt>
	// AdFormat
	// </dt>
	// <dd>
	// Advertisement to solicit inquiries on listings such as real estate.
	// Permits no bidding on that item, service, or property. To express
	// interest, a buyer fills out a contact form that eBay forwards to the
	// seller as a lead. This format does not enable buyers and sellers to
	// transact online through eBay and eBay Feedback is not available for
	// ad format listings.
	// </dd>
	// <dt>
	// Auction
	// </dt>
	// <dd>
	// Competitive-bid online auction format. Buyers engage in competitive
	// bidding, although Buy It Now may be offered as long as no valid bids
	// have been placed. Online auctions are listed on eBay.com; they can
	// also be listed in a seller's eBay Store if the seller is a Store
	// owner.
	// </dd>
	// <dt>
	// AuctionWithBIN
	// </dt>
	// <dd>
	// Same as Auction format, but Buy It Now is enabled. AuctionWithBIN
	// changes to Auction if a valid bid has been placed on the item. Valid
	// bids include bids that are equal to or above any specified reserve
	// price.
	// </dd>
	// <dt>
	// Classified
	// </dt>
	// <dd>
	// Classified Ads connect buyers and sellers, who then complete the sale
	// outside of eBay. This format does not enable buyers and sellers to
	// transact online through eBay and eBay Feedback is not available for
	// these listing types.
	// </dd>
	// <dt>
	// FixedPrice
	// </dt>
	// <dd>
	// A fixed-price listing. Auction-style bidding is not allowed. On some
	// sites, this auction format is also known as "Buy It Now Only" (not to
	// be confused with the Buy It Now option available with competitive-
	// bidding auctions). Fixed-price listings appear on eBay.com; they can
	// also be listed in a seller's eBay Store if the seller is a Store
	// owner.
	// </dd>
	// </dl>
	//
	ListingType string `xml:"listingType,omitempty"`

	//
	// If true, a generic gift icon displays next the listing's title in search
	// and browse pages.
	//
	Gift bool `xml:"gift,omitempty"`
}

type SearchItem struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services SearchItem"`

	//
	// The ID that uniquely identifies the item listing. eBay generates this
	// ID when an item is listed. ID values are unique across all eBay sites.
	//
	ItemId string `xml:"itemId,omitempty"`

	//
	// Name of the item as it appears in the listing title, or in search and
	// browse results.
	//
	Title string `xml:"title,omitempty"`

	//
	// The identifier for the site on which the item is listed. Returns a Global
	// ID, which is a unique identifier that specifies the combination of the
	// site, language, and territory. In other eBay APIs (such as the Shopping
	// API), this value is know as the site ID.
	//
	GlobalId string `xml:"globalId,omitempty"`

	//
	// Subtitle of the item. Only returned if the seller included a subtitle for
	// the listing.
	//
	Subtitle string `xml:"subtitle,omitempty"`

	//
	// Details about the first (or only) category in which the item is listed.
	// Note that items can be listed in more than a single category.
	//
	PrimaryCategory *Category `xml:"primaryCategory,omitempty"`

	//
	// Details about the second category in which the item is listed. This
	// element is not returned if the seller did not specify a secondary
	// category.
	//
	SecondaryCategory *Category `xml:"secondaryCategory,omitempty"`

	//
	// URL for the Gallery thumbnail image. Returned only if the seller
	// uploaded images for the item or the item was listed using a product
	// identifier.
	//
	GalleryURL *AnyURI `xml:"galleryURL,omitempty"`

	//
	// Contains three URLs for item thumbnail images in standard sizes. Not
	// returned if the item has no images. That is, if the item was not listed
	// using a product identifier and the seller has not uploaded images, the
	// container will not be returned, even when the outputSelector is set to
	// GalleryInfo.
	//
	GalleryInfoContainer *GalleryInfoContainer `xml:"galleryInfoContainer,omitempty"`

	//
	// The URL to view this specific listing on eBay.
	// <br><br>
	// The returned URL is optimized to support natural search. That is, the URL
	// is designed to make items on eBay easier to find via popular internet
	// search engines. The URL includes the item title along with other
	// optimizations.
	// <br><br>
	// If you enabled affiliate tracking in the call, viewItemURL contains a
	// string that includes affiliate tracking information.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// eBay URLs returned in fields, such as <b
	// class="con">viewItemURL</b>, are subject to syntax and other
	// changes without notice. To avoid problems in your application when eBay
	// alters the URL format, we advise you to avoid parsing eBay URLs
	// programmatically. We strive to ensure that other fields in the response
	// contain all the information that is encoded in the URL, and more.
	// </span>
	//
	ViewItemURL *AnyURI `xml:"viewItemURL,omitempty"`

	//
	// A unique identification number assigned by eBay to a registered
	// non-profit charity organization.
	//
	CharityId string `xml:"charityId,omitempty"`

	//
	// Unique identifier for the eBay catalog product with which the item was
	// listed. An eBay catalog product consists of pre-filled Item Specifics,
	// additional descriptive information, plus a stock photo (if available).
	// These product details are used to pre-fill item information, which is
	// used to describe the item and can also help surface the item in searches.
	// <br><br>
	// eBay supports the following types of product ID types: ISBN, UPC, EAN,
	// and ReferenceID (ePID, also known as an eBay Product Reference ID).
	// ReferenceID values are returned when available. A UPC, ISBN, or EAN
	// product identifier will be returned only when a ReferenceID is not
	// available.
	// <br><br>
	// This productId value can be used as input with findItemsByProduct to
	// retrieve items that were listed with the specified eBay catalog product.
	// <br><br>
	// This field is only returned when a product was used to list the item.
	//
	ProductId *ProductId `xml:"productId,omitempty"`

	//
	// Identifies the payment method (or methods) the seller will accept for the
	// item (such as PayPal).
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// If the seller accepts only PayPal, the buyer can still pay with a
	// credit card. PayPal supports major credit cards.
	// </span>
	// Payment methods are not applicable to eBay Real Estate advertisement
	// listings or other Classified Ad listing formats.
	//
	PaymentMethod []string `xml:"paymentMethod,omitempty"`

	//
	// If true, the seller requires immediate payment for the item. If false (or
	// not specified), immediate payment is not requested. Buyers must have a
	// PayPal account to purchase items that require immediate payment.
	// <br><br>
	// A seller can choose to require immediate payment for Fixed Price and Buy
	// It Now listings. If a Buy It
	// Now item ends as an auction (that is, if the Buy It Now option is removed
	// due to bids being placed on the listing), the immediate payment
	// requirement does not apply.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The value of the AutoPay flag indicates the seller's stated preference
	// only. It does not indicate whether the listing is still a candidate for
	// purchase via immediate payment. For example, if a listing receives bids
	// and no longer qualifies for immediate payment, the value of the AutoPay
	// flag does not change.
	// </span>
	// <br>
	// Only applicable to items listed on PayPal-enabled sites and in categories
	// that support immediate payment.
	//
	AutoPay bool `xml:"autoPay,omitempty"`

	//
	// The postal code where the listed item is located. This field is returned
	// only if a postal code has been specified by the seller. eBay proximity
	// and local search behavior can use the combination of buyerPostalCode and
	// postalCode values.
	//
	PostalCode string `xml:"postalCode,omitempty"`

	//
	// Physical location of the item, as specified by the seller. This gives a
	// general indication from where the item will be shipped (or delivered).
	//
	Location string `xml:"location,omitempty"`

	//
	// Two-letter ISO 3166 country code to indicate the country where the item
	// is located (for example, "US" for the United States or "GB" for the United
	// Kingdom).
	//
	Country string `xml:"country,omitempty"`

	//
	// Information about the eBay store in which the item is listed. Only
	// returned if the item is listed in a store and StoreInfo is specified in
	// the outputSelector field in the request.
	//
	StoreInfo *Storefront `xml:"storeInfo,omitempty"`

	//
	// Information about the item's seller. Only returned if SellerInfo is
	// specified in the outputSelector field in the request.
	//
	SellerInfo *SellerInfo `xml:"sellerInfo,omitempty"`

	//
	// Container for data about a listing's shipping details.
	//
	ShippingInfo *ShippingInfo `xml:"shippingInfo,omitempty"`

	//
	// Specifies the item's selling status with regards to eBay's processing
	// workflow.
	//
	SellingStatus *SellingStatus `xml:"sellingStatus,omitempty"`

	//
	// The format type of the listing, such as online auction, fixed price, or
	// advertisement.
	//
	ListingInfo *ListingInfo `xml:"listingInfo,omitempty"`

	//
	// This is set to true if the seller accepts return of the item.
	//
	ReturnsAccepted bool `xml:"returnsAccepted,omitempty"`

	//
	// URL for the Gallery Plus image. The size of Gallery Plus images (up to
	// 500 pixels on the longest side) is bigger than the size of standard
	// gallery images. In site search results, you can view the Gallery Plus
	// image by hovering over or clicking the Enlarge link or magnifying glass
	// icon. This field is only returned when the seller has opted for
	// the Gallery Plus option for the given item.
	//
	GalleryPlusPictureURL []*AnyURI `xml:"galleryPlusPictureURL,omitempty"`

	//
	// This field returns terms from the keywords in the request that match
	// values in one of the item's compatible applications (vehicles). If the
	// keywords match more than one compatible application for an item, the
	// field returns "Two or more of your vehicles" to indicate multiple
	// matches.
	// <br><br>
	// For example, keyword queries that contain vehicle details, such as make
	// and model (for example, Honda Accord), in addition to keywords for the part or
	// accessory, will search through structured parts compatibility information
	// for matching listings. If an item has a 2007 Honda Accord (any trim or
	// engine) specified as a compatible application, and the item matches the
	// part or accessory terms in the query, this field will return the matching
	// terms from the query (i.e., Honda Accord).
	// <br><br>
	// Parts compatibility is an eBay feature that uses structured data to
	// associate compatible assemblies with parts and accessories listed on
	// eBay. For example, parts compatibility enables sellers to specify
	// accurately and comprehensively the vehicles on which a side mirror or a
	// rim fit. Parts compatibility improves search relevancy and frees up item
	// titles and descriptions for more useful descriptions of the part.
	//
	Compatibility string `xml:"compatibility,omitempty"`

	//
	// The distance that the item is from the buyer, calculated using
	// buyerPostalCode. The unit for distance varies by site, and is either
	// miles or kilometers. If the country whose site you are searching uses
	// kilometers to measure distance (for example, India/EBAY-IN), the unit is
	// kilometers. If the site is either the US or UK, the distance unit is
	// miles.
	// <br><br>
	// This value is only returned for distance-based searches. You must specify
	// a buyerPostalCode and either sort by Distance, or use a combination of
	// the MaxDistance LocalSearch itemFilters.
	//
	Distance *Distance `xml:"distance,omitempty"`

	//
	// Contains information about the item's condition.
	// Only returned when the seller listed the item with an
	// item condition.<br>
	// <br>
	// Different categories can support different
	// condition choices. If a listing is in two categories,
	// the seller uses condition details that are supported in
	// the primary category. Thus, even if two nearly identical
	// items are found in the same category search, they could support
	// different condition details if they have different
	// primary categories.
	// For example, suppose Seller A lists a concert T-shirt
	// in clothing, and also in music accessories as the
	// secondary category. Seller B lists an identical shirt in
	// music accessories only.
	// If you search against the music accessories category,
	// you will find both items, but seller A's shirt may have
	// condition details that are slightly different from seller B's
	// shirt, because the listings have different primary categories.
	//
	Condition *Condition `xml:"condition,omitempty"`

	//
	// Returns true if the item is a multi-variation listing.
	//
	IsMultiVariationListing bool `xml:"isMultiVariationListing,omitempty"`

	//
	// Returns information on the item if it is listed as a Strikethrough Price (STP) or
	// Minimum Advertised Price (MAP) item by the seller.
	//
	DiscountPriceInfo *DiscountPriceInfo `xml:"discountPriceInfo,omitempty"`

	//
	// URL to a picture of the item that is 800x800 pixels in size.
	//
	PictureURLSuperSize *AnyURI `xml:"pictureURLSuperSize,omitempty"`

	//
	// URL to a picture of the item that is 400x400 pixels in size.
	//
	PictureURLLarge *AnyURI `xml:"pictureURLLarge,omitempty"`

	//
	// Contains information about the weight, volume or other quantity measurement of a listed
	// item. The European Union requires listings for certain types of products to include the
	// price per unit so buyers can accurately compare prices. eBay uses the <strong>
	// UnitInfo</strong> data and the item's listed price to calculate and display the
	// per-unit price on eBay EU sites.
	// <br/><br/>
	// <span class="tablenote">
	// <strong>Note:</strong> This information is currently required only for
	// EU business sellers, and only for listings with a Buy It Now option.
	// </span>
	//
	UnitPrice *UnitPriceInfo `xml:"unitPrice,omitempty"`

	//
	// Contains a name/value pair defining an item attribute. Multiple
	// <strong>attribute</strong> containers can be returned for an item.
	//
	Attribute []*ItemAttribute `xml:"attribute,omitempty"`

	//
	// Indicates whether the item listing is a <b>Top-Rated Plus</b> listing. A
	// <b>Top-Rated Plus</b> listing must meet the following requirements:
	// <ul>
	// <li>14-day (or longer) return policy with Money Back option</li>
	// <li>1-day Handling Time or better</li>
	// <li>Listed by a <b>Top-Rated Seller</b></li>
	// </ul>
	// This field is returned only for the US (EBAY-US) site.
	//
	TopRatedListing bool `xml:"topRatedListing,omitempty"`

	//
	// Indicates the energy efficiency rating of the item. Energy efficiency
	// ratings apply to products listed by commercial vendors in electronics
	// categories only. Rating values are of the form A+++, A++, A+, A, B, C,  D,
	// E, F, or G. This field is only returned if the seller has specified the
	// energy efficiency rating in the item specifics.
	// <br><br>
	// Applicable to the eBay Germany site (EBAY-DE) only.
	//
	EekStatus []string `xml:"eekStatus,omitempty"`
}

type SellerInfo struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services SellerInfo"`

	//
	// The seller's eBay user name; a unique value.
	//
	SellerUserName string `xml:"sellerUserName,omitempty"`

	//
	// The aggregate feedback score of the seller. A seller's feedback score is
	// their net positive feedback minus their net negative feedback. Feedback
	// scores are a quantitative expression of the desirability of dealing with
	// a seller in a transaction.
	//
	FeedbackScore int64 `xml:"feedbackScore,omitempty"`

	//
	// The percentage value of a user's positive feedback (their positive
	// feedbackScore divided by their total positive plus negative feedback).
	//
	PositiveFeedbackPercent float64 `xml:"positiveFeedbackPercent,omitempty"`

	//
	// Visual indicator of user's feedback score.
	// <dl>
	// <dt>
	// <strong>feedbackRatingStar values:</strong>
	// </dt>
	// <dt>
	// None
	// </dt>
	// <dd>
	// No graphic displayed, feedback score 0-9.
	// </dd>
	// <dt>
	// Yellow
	// </dt>
	// <dd>
	// Yellow Star, feedback score 10-49.
	// </dd>
	// <dt>
	// Blue
	// </dt>
	// <dd>
	// Blue Star, feedback score 50-99.
	// </dd>
	// <dt>
	// Turquoise
	// </dt>
	// <dd>
	// Turquoise Star, feedback score 100-499.
	// </dd>
	// <dt>
	// Purple
	// </dt>
	// <dd>
	// Purple Star, feedback score 500-999.
	// </dd>
	// <dt>
	// Red
	// </dt>
	// <dd>
	// Red Star, feedback score 1,000-4,999.
	// </dd>
	// <dt>
	// Green
	// </dt>
	// <dd>
	// Green Star, feedback score 5,000-9,999.
	// </dd>
	// <dt>
	// YellowShooting
	// </dt>
	// <dd>
	// Yellow Shooting Star, feedback score 10,000-24,999.
	// </dd>
	// <dt>
	// TurquoiseShooting
	// </dt>
	// <dd>
	// Turquoise Shooting Star, feedback score 25,000-49,999.
	// </dd>
	// <dt>
	// PurpleShooting
	// </dt>
	// <dd>
	// Purple Shooting Star, feedback score 50,000-99,999.
	// </dd>
	// <dt>
	// RedShooting
	// </dt>
	// <dd>
	// Red Shooting Star, feedback score 100,000-499,000 and above.
	// </dd>
	// <dt>
	// GreenShooting
	// </dt>
	// <dd>
	// Green Shooting Star, feedback score 500,000-999,000 and above.
	// </dd>
	// <dt>
	// SilverShooting
	// </dt>
	// <dd>
	// Silver Shooting Star, feedback score 1,000,000 or more.
	// </dd>
	// </dl>
	//
	FeedbackRatingStar string `xml:"feedbackRatingStar,omitempty"`

	//
	// Indicates whether the seller of the item is top rated. A <b>Top Rated Seller</b>:
	// <ul>
	// <li>Consistently receives highest buyers' ratings</li>
	// <li>Ships items quickly</li>
	// <li>Has earned a track record of excellent service</li>
	// </ul>
	// eBay regularly reviews the performance of these sellers to confirm
	// that they continue to meet the program's requirements.
	//
	TopRatedSeller bool `xml:"topRatedSeller,omitempty"`
}

type SellingStatus struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services SellingStatus"`

	//
	// The current price of the item given in the currency of the site on which
	// the item is listed. That is, currentPrice is returned in the original
	// listing currency.
	// <br><br>
	// For competitive-bid item listings, currentPrice is the current minimum
	// bid price if the listing has no bids, or the current high bid if the
	// listing has bids. A Buy It Now price has no effect on currentPrice.
	// <br><br>
	// For Basic Fixed-Price (FixedPrice), Ad Format (AdFormat), and Classified Ad (Classified)
	// listings, currentPrice is the current fixed price.
	//
	CurrentPrice *Amount `xml:"currentPrice,omitempty"`

	//
	// The listing's current price converted to the currency of the site
	// specified in the find request (globalId).
	//
	ConvertedCurrentPrice *Amount `xml:"convertedCurrentPrice,omitempty"`

	//
	// The number of bids that have been placed on the item.
	//
	BidCount int32 `xml:"bidCount,omitempty"`

	//
	// Specifies the listing's status in eBay's processing workflow. If an
	// item's EndTime is in the past, but there are no details about the buyer
	// or high bidder (and the user is not anonymous), you can use sellingState
	// information to determine whether eBay has finished processing the
	// listing.
	// <dl>
	// <dt>
	// <strong>sellingState values:</strong>
	// </dt>
	// <dt>
	// Active
	// </dt>
	// <dd>
	// The listing is still live. It is also possible that the auction has
	// recently ended, but eBay has not completed the final processing
	// (for example, the high bidder is still being determined).
	// </dd>
	// <dt>
	// Canceled
	// </dt>
	// <dd>
	// The listing has been canceled by either the seller or eBay.
	// </dd>
	// <dt>
	// Ended
	// </dt>
	// <dd>
	// The listing has ended and eBay has completed the processing of the
	// sale (if any).
	// </dd>
	// <dt>
	// EndedWithSales
	// </dt>
	// <dd>
	// The listing has been ended with sales.
	// </dd>
	// <dt>
	// EndedWithoutSales
	// </dt>
	// <dd>
	// The listing has been ended without sales.
	// </dd>
	// </dl>
	//
	SellingState string `xml:"sellingState,omitempty"`

	//
	// Time left before the listing ends. The duration is represented in the ISO
	// 8601 duration format (PnYnMnDTnHnMnS). For listings that have ended, the
	// time left is PT0S (zero seconds). See the "duration" type for information
	// about this time format.
	//
	TimeLeft *Duration `xml:"timeLeft,omitempty"`
}

type ShippingInfo struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ShippingInfo"`

	//
	// The basic shipping cost of the item. This reflects the domestic shipping
	// cost or the international shipping costs, depending on which applies
	// (that is, whether the bidder/buyer is in the same country as the listing
	// site of the item).
	//
	ShippingServiceCost *Amount `xml:"shippingServiceCost,omitempty"`

	//
	// The shipping method that was used for determining the cost of shipping.
	// For example: flat rate, calculated, or free. The seller specifies the
	// available shipping services when they list the item.
	// <dl>
	// <dt>
	// <strong>shippingType values:</strong>
	// </dt>
	// <dt>
	// Calculated
	// </dt>
	// <dd>
	// The calculated shipping model: The posted cost of shipping is based
	// on the buyer-selected shipping service, chosen by the buyer from the
	// different shipping services offered by the seller. The shipping costs
	// are calculated by eBay and the shipping carrier, based on the buyer's
	// address. Any packaging and handling costs established by the seller
	// are automatically rolled into the total.
	// </dd>
	// <dt>
	// CalculatedDomesticFlatInternational
	// </dt>
	// <dd>
	// The seller specified one or more calculated domestic shipping
	// services and one or more flat international shipping services.
	// </dd>
	// <dt>
	// Flat
	// </dt>
	// <dd>
	// The flat-rate shipping model: The seller establishes the cost
	// of shipping and any shipping insurance, regardless of what any
	// buyer-selected shipping service might charge the seller.
	// </dd>
	// <dt>
	// FlatDomesticCalculatedInternational
	// </dt>
	// <dd>
	// The seller specified one or more flat domestic shipping
	// services and one or more calculated international shipping services.
	// </dd>
	// <dt>
	// Free
	// </dt>
	// <dd>
	// Free is used when the seller has declared that shipping is free
	// for the buyer.
	// </dd>
	// <dt>
	// FreePickup
	// </dt>
	// <dd>
	// No shipping available, the buyer must pick up the item from the
	// seller.
	// </dd>
	// <dt>
	// Freight
	// </dt>
	// <dd>
	// The freight shipping model: the cost of shipping is determined by a
	// third party, FreightQuote.com, based on the buyer's address (postal
	// code).
	// </dd>
	// <dt>
	// FreightFlat
	// </dt>
	// <dd>
	// The flat rate shipping model: the seller establishes the cost
	// of freight shipping and freight insurance, regardless of what any
	// buyer-selected shipping service might charge the seller.
	// </dd>
	// <dt>
	// NotSpecified
	// </dt>
	// <dd>
	// The seller did not specify the shipping type.
	// </dd>
	// </dl>
	// <span class="tablenote">
	// <strong>Note:</strong> The international leg of the Global Shipping Program is always considered to be a calculated shipping type, and it is entirely the responsibility of the international shipping provider. If Global Shipping is available for an item, and the seller chooses to provide the Flat shipping type domestically for that item, this field will return a value of <code>FlatDomesticCalculatedInternational</code> to account for both legs of the shipment. If the seller offers the item with Calculated domestic shipping, this field will return a value of <code>Calculated</code>, which also accounts for both legs of the shipment. For a purely domestic shipment, you can ignore the information about the international leg.
	// </span>
	//
	ShippingType string `xml:"shippingType,omitempty"`

	//
	// An international location or region to which the seller is willing to
	// ship the item. Only returned when the seller has specifically identified
	// locations where she is willing to ship the given item.
	// specified.
	//
	ShipToLocations []string `xml:"shipToLocations,omitempty"`

	//
	// This is returned set to true if expedited shipping is available for the item.
	// <br/><br/>
	// This field is returned only for items listed on the eBay US site.
	//
	ExpeditedShipping bool `xml:"expeditedShipping,omitempty"`

	//
	// This is returned set to true if one-day shipping is available for the item.
	// <br/><br/>
	// This field is returned only for items listed on the eBay US site.
	//
	OneDayShippingAvailable bool `xml:"oneDayShippingAvailable,omitempty"`

	//
	// The number of days it will take the seller to ship this item.
	// <br/><br/>
	// This field is returned only for items listed on the eBay US site.
	//
	HandlingTime int32 `xml:"handlingTime,omitempty"`

	IntermediatedShipping bool `xml:"intermediatedShipping,omitempty"`
}

type Storefront struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services Storefront"`

	//
	// The name of the seller's eBay Store.
	//
	StoreName string `xml:"storeName,omitempty"`

	//
	// The URL of the seller's eBay Store page.
	//
	StoreURL *AnyURI `xml:"storeURL,omitempty"`
}

type ItemAttribute struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/search/v1/services ItemAttribute"`

	//
	// The name of an item attribute.
	//
	Name string `xml:"name,omitempty"`

	//
	// The value of the item attribute identified by the <strong>name</strong> field.
	//
	Value string `xml:"value,omitempty"`
}

type FindingServicePortType struct {
	client *gowsdl.SoapClient
}

func NewFindingServicePortType(url string, tls bool) *FindingServicePortType {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &FindingServicePortType{
		client: client,
	}
}

func (service *FindingServicePortType) GetSearchKeywordsRecommendation(request *GetSearchKeywordsRecommendationRequest) (*GetSearchKeywordsRecommendationResponse, error) {
	response := &GetSearchKeywordsRecommendationResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/getSearchKeywordsRecommendation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindItemsByKeywords(request *FindItemsByKeywordsRequest) (*FindItemsByKeywordsResponse, error) {
	response := &FindItemsByKeywordsResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsByKeywords", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindItemsByCategory(request *FindItemsByCategoryRequest) (*FindItemsByCategoryResponse, error) {
	response := &FindItemsByCategoryResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsByCategory", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindItemsAdvanced(request *FindItemsAdvancedRequest) (*FindItemsAdvancedResponse, error) {
	response := &FindItemsAdvancedResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsAdvanced", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindItemsByProduct(request *FindItemsByProductRequest) (*FindItemsByProductResponse, error) {
	response := &FindItemsByProductResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsByProduct", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindItemsIneBayStores(request *FindItemsIneBayStoresRequest) (*FindItemsIneBayStoresResponse, error) {
	response := &FindItemsIneBayStoresResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsIneBayStores", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindItemsByImage(request *FindItemsByImageRequest) (*FindItemsByImageResponse, error) {
	response := &FindItemsByImageResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsByImage", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) GetHistograms(request *GetHistogramsRequest) (*GetHistogramsResponse, error) {
	response := &GetHistogramsResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/getHistograms", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) GetVersion(request *GetVersionRequest) (*GetVersionResponse, error) {
	response := &GetVersionResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/getVersion", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindItemsForFavoriteSearch(request *FindItemsForFavoriteSearchRequest) (*FindItemsForFavoriteSearchResponse, error) {
	response := &FindItemsForFavoriteSearchResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsForFavoriteSearch", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *FindingServicePortType) FindCompletedItems(request *FindCompletedItemsRequest) (*FindCompletedItemsResponse, error) {
	response := &FindCompletedItemsResponse{}
	err := service.client.Call("http://www.ebay.com/marketplace/search/v1/services/findItemsAdvanced", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
