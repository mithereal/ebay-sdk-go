package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AckValue string

const (

	//
	// The request that triggered the error was not processed successfully. When
	// a serious application-level error occurs, the error is returned instead
	// of the business data.
	//
	AckValueSuccess AckValue = "Success"

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was processed successfully but with
	// some warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// The request that triggered the error was processed successfully but with
	// some warnings.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side. For
	// example, a database or server could be down. Inspect the error message to
	// find the cause of the problem. If the problem is on the eBay side, an
	// application can retry the request as-is a reasonable number of times
	// (eBay recommends twice). If the error persists, contact Developer
	// Technical Support. Once the problem has been resolved, the request may be
	// resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being the application sending the request. For example, the
	// request is missing a required data element or it contains an invalid
	// field. The problem must be corrected before the request can be resent.
	// Inspect the error message to find the cause of the problem. If the
	// problem is due to an application error, modify the application and resend
	// the request. If the error is due to invalid data, the source of the data
	// must be corrected before you resend the resend request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being missing or invalid data in the request. The problem must be
	// corrected before the request can be retried. Inspect the error message to
	// find the cause of the problem. If the problem is a result of end-user
	// data, alert the end-user to the problem and provide the means for them to
	// correct the problem. Once the problem is resolved, resend the request to
	// eBay.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type ErrorSeverity string

const (

	//
	// eBay encountered a fatal error during the processing of the request,
	// causing the request to fail. When eBay encounters an error, it returns
	// error data instead of the requested business data. Inspect the error
	// details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was successfully processed, but eBay encountered a non-fatal
	// error during the processing that could affect the data returned. For
	// example, eBay might have changed the value of an input field. In this
	// case, eBay returns a successful response, but it also returns a warning.
	// For best results, requests should return without warnings. Inspect the
	// warning details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type OrderType string

const (

	//
	// The results will be sorted by the specified attribute in ascending (low
	// to high) order.
	//
	OrderTypeAscending OrderType = "Ascending"

	//
	// The results will be sorted by the specified attribute in descending (high
	// to low) order.
	//
	OrderTypeDescending OrderType = "Descending"
)

type SortPriority string

const (

	//
	// Specifies that the associated property should be sorted first.
	//
	SortPrioritySort1 SortPriority = "Sort1"

	//
	// Specifies that the associated property should be sorted second.
	//
	SortPrioritySort2 SortPriority = "Sort2"

	//
	// Specifies that the associated property should be sorted third.
	//
	SortPrioritySort3 SortPriority = "Sort3"

	//
	// Specifies that the associated property should be sorted fourth.
	//
	SortPrioritySort4 SortPriority = "Sort4"

	//
	// Specifies that the associated property should be sorted fifth.
	//
	SortPrioritySort5 SortPriority = "Sort5"
)

type SortType string

const (

	//
	// Sorts the response  by the product submission ID. The sortOrder
	// value determines whether results are returned in ascending or
	// descending order.
	//
	SortTypeByProductSubmissionId SortType = "ByProductSubmissionId"
)

type MediaType string

const (

	//
	// Indicates that the specified media is an image.
	//
	MediaTypeImage MediaType = "Image"
)

type ProductSubmissionStatusCode string

const (

	//
	// The product submission is under review.
	//
	ProductSubmissionStatusCodePending ProductSubmissionStatusCode = "Pending"

	//
	// The product submission has been approved and added to the eBay
	// catalog.
	//
	ProductSubmissionStatusCodeApproved ProductSubmissionStatusCode = "Approved"

	//
	// The product submission was rejected. The product did not meet all
	// acceptance criteria.
	//
	ProductSubmissionStatusCodeRejected ProductSubmissionStatusCode = "Rejected"
)

type ProductSubmissionStatusReasonCode string

const ()

type ProductSubmissionFilterName string

const ()

type OutputSelector string

const (

	//
	// Include the product submission details in the response. These are the
	// name-value properties used to describe the product. In some cases, the
	// returned properties may vary from the submitted properties. [This was
	// mentioned in a meeting. When does this happen? Does this only happen for
	// submissions that are approved?]
	//
	OutputSelectorProductSubmission OutputSelector = "ProductSubmission"
)

type AddProducts struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services addProducts"`

	In string `xml:"in,omitempty"`
}

type GetProductSubmissions struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services getProductSubmissions"`

	In string `xml:"in,omitempty"`
}

type FindProductsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services FindProductsRequest"`

	*BaseServiceRequest

	//
	// User can findproducts for one
	// catalog at a time or batch up to
	// 10 catalogs.
	//
	ProductSearch []*ProductRequest `xml:"productSearch,omitempty"`
}

type GetProductDetailsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductDetailsRequest"`

	*BaseServiceRequest

	//
	// Contains product details.
	//
	ProductDetailsRequest []*ProductDetailsRequestType `xml:"productDetailsRequest,omitempty"`
}

type GetProductDetailsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductDetailsResponse"`

	*BaseServiceResponse

	//
	// Details for a single product.
	//
	Product []*Product `xml:"product,omitempty"`
}

type FindProductsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services FindProductsResponse"`

	*BaseServiceResponse

	//
	// Container for the products that matched the search criteria.
	// The data for each product is returned in individual containers, if
	// any matches were found.
	//
	ProductSearchResult []*ProductResponse `xml:"productSearchResult,omitempty"`
}

type FindProductsByCompatibilityRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services FindProductsByCompatibilityRequest"`

	*BaseServiceRequest

	//
	// Container for an individual product search query.
	//
	ProductByCompatibilitySearch []*ProductByCompatibilityRequest `xml:"productByCompatibilitySearch,omitempty"`
}

type GetProductCompatibilitiesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductCompatibilitiesRequest"`

	*BaseServiceRequest

	//
	// The ProductIdentifierType and a
	// value for one of the supported
	// ProductIdentifierTypes which are
	// unique across all sites (ePID,
	// MementoString)
	//
	ProductIdentifier *ProductIdentifier `xml:"productIdentifier,omitempty"`

	//
	// Controls the pagination of the result set. Child elements specify the
	// maximum number of products to return per call and the page of
	// data to return. Controls the number of products returned in the
	// response, but does not specify the amount of data to return for each
	// product.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// No more than 10,000 products can be retrieved for a given search,
	// regardless of how many matches are found. This limit is enforced
	// by the maximum page number allowed (100) and the maximum entries per
	// page allowed (20). </span>
	//
	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`

	//
	// This will contain the property name value pairs of the application,
	// such as a particular vehicle make and model. Application property
	// filters are specified as name-value pairs.
	//
	ApplicationPropertyFilter []*PropertyValue `xml:"applicationPropertyFilter,omitempty"`

	//
	// This will define what are properties that will be returned for this
	// catelog-enabled category.
	// <dl>
	// <dt>
	// <strong>Dataset values:</strong>
	// </dt>
	// <dt>
	// DisplayableProductDetails
	// </dt>
	// <dd>
	// Properies for use in a user interface to describe products.
	// </dd>
	// <dt>
	// DisplayableSearchResults
	// </dt>
	// <dd>
	// Properties for use in results for product searches.
	// </dd>
	// <dt>
	// Searchable
	// </dt>
	// <dd>
	// Properties for use in searches.
	// </dd>
	// <dt>
	// Sortable
	// </dt>
	// <dd>
	// Properties that are suitable for sorting.
	// </dd>
	// </dl>
	// User can either enter dataset name or enter individual property names
	// (datasetPropertyName) from the dataset. Only one should be preset at
	// a time.
	//
	Dataset []string `xml:"dataset,omitempty"`

	//
	// We need to allow multiple sort
	// orders. This is very specific to
	// fitment. We allow the caller
	// sorty by Make + Model + year. To
	// start with we will only allow 5
	// sorts.
	//
	SortOrder []*CompatibilitySort `xml:"sortOrder,omitempty"`

	//
	// Specifies whether or not to filter out the products which
	// are disabled for selling on eBay, disabled for product reviews, or
	// disabled for selling on half.com.
	//
	DisabledProductFilter *ProductStatus `xml:"disabledProductFilter,omitempty"`

	//
	// Individual property name from the dataset. You can either enter
	// dataset name or enter individual property names from the dataset.
	// Only one should be preset at a time.
	//
	DatasetPropertyName []string `xml:"datasetPropertyName,omitempty"`
}

type GetProductCompatiblitiesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductCompatiblitiesResponse"`

	*BaseServiceResponse

	//
	// Indicates the pagination of the result set. Child elements indicate
	// the maximum number of compatibilityDetails nodes returned per
	// response and which page of data has been returned.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`

	//
	// Compatibility details for a single product.
	//
	CompatibilityDetails []*Product `xml:"compatibilityDetails,omitempty"`
}

type StockPhotoURL struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services StockPhotoURL"`

	//
	// Fully qualified URL for the thumbnail of a stock image (if any) that is
	// associated with a catalog product. The URL is for the image eBay usually
	// displays in product search results (usually 40px tall). It may be helpful
	// to calculate the dimensions of the photo programmatically before
	// displaying it. Only returned if a URL is available for the product.
	//
	Thumbnail *URIValue `xml:"thumbnail,omitempty"`

	//
	// Fully qualified URL for a stock image (if any) that is associated with a
	// catalog product. The URL is for the image eBay usually displays in
	// product search results (usually 70px tall). It may be helpful to
	// calculate the dimensions of the photo programmatically before displaying
	// it. Only returned if a URL is available for the product.
	//
	Standard *URIValue `xml:"standard,omitempty"`
}

type CompatibilityPropertyFilter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services CompatibilityPropertyFilter"`
}

type ProductRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductRequest"`

	//
	// A unique identifer for a given product request. Use invocationId to
	// prevent the submission of duplicate data. In the event of a partial
	// failure, the invocation ID can also be used to identify a product request
	// that did not succeed.
	// <br><br>
	// If the same invocationId is passed in more than once in the same request,
	// then an error will be returned. The identifier must be a number .
	//
	InvocationId string `xml:"invocationId,omitempty"`

	//
	// Specifies the category from which you want to retrieve product details.
	// When categoryId is used with findProducts, the category must be catalog-
	// enabled, or it will contain no product data, and the request will fail.
	// When categoryId is used with findProductsByCompatibility, the category
	// must be compatibility-enabled. A category must be catalog-enabled to be compatibility-enabled.
	// <br><br>
	// Your request must contain categoryId and/or keywords.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// Use keywords to refine your product search query. Products whose catalog
	// searchable property values contain these keywords will be returned.
	// Returned products must match both the specified keywords and the name-
	// value pairs constraint.
	// <br><br>
	// Keyword searches are not case sensitive. Keywords are used for exact word
	// matching only, wildcards or search string modifiers are not supported.
	// <br><br>
	// Your request must contain categoryId and/or keywords.
	//
	Keywords string `xml:"keywords,omitempty"`

	//
	// One or more name-value pairs that describe the product.
	//
	PropertyFilter []*PropertyValue `xml:"propertyFilter,omitempty"`

	//
	// Sort Order for the result set. Any of the searchable property can be used
	// to specify the sort order. If no sort order is specified then default
	// sort order(popularity descending) will be applied.
	//
	SortOrder *SortOrder `xml:"sortOrder,omitempty"`

	//
	// This will define what are properties that will be returned for this
	// catelog-enabled category.
	// <dl>
	// <dt>
	// <strong>Dataset values:</strong>
	// </dt>
	// <dt>
	// DisplayableProductDetails
	// </dt>
	// <dd>
	// Properies for use in a user interface to describe products.
	// </dd>
	// <dt>
	// DisplayableSearchResults
	// </dt>
	// <dd>
	// Properties for use in results for product searches.
	// </dd>
	// <dt>
	// Searchable
	// </dt>
	// <dd>
	// Properties for use in searches.
	// </dd>
	// <dt>
	// Sortable
	// </dt>
	// <dd>
	// Properties that are suitable for sorting.
	// </dd>
	// </dl>
	// User can either enter dataset name or enter individual property names
	// (datasetPropertyName) from the dataset. Only one should be preset at
	// a time.
	//
	Dataset []string `xml:"dataset,omitempty"`

	//
	// Individual property name from the dataset. You can either enter
	// dataset name or enter individual property names from the dataset.
	// Only one should be preset at a time.
	//
	DatasetPropertyName []string `xml:"datasetPropertyName,omitempty"`

	//
	// Controls the pagination of the result set. Child elements specify the
	// maximum number of products to return per call and the page of
	// data to return. Controls the number of products returned in the
	// response, but does not specify the amount of data to return for each
	// product.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// No more than 10,000 products can be retrieved for a given search,
	// regardless of how many matches are found. This limit is enforced
	// by the maximum page number allowed (100) and the maximum entries per
	// page allowed (20). </span>
	//
	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`

	//
	// Specifies whether or not to filter out the products which
	// are disabled for selling, product reviews, or use on half.com.
	//
	ProductStatusFilter *ProductStatus `xml:"productStatusFilter,omitempty"`
}

type ProductResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductResponse"`

	//
	// Container for multiple products.
	//
	Products []*Product `xml:"products,omitempty"`

	//
	// Indicates the pagination of the result set. Child elements indicate the
	// maximum number of productSearchResult nodes returned per response and
	// which page of data has been returned.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`

	//
	// A unique identifer for a given product response, corresponding to a
	// specific product request.
	//
	InvocationId string `xml:"invocationId,omitempty"`
}

type ProductByCompatibilityRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductByCompatibilityRequest"`

	//
	// This will contain the property name-value pairs of the application. For
	// example, an application property filter can consist of name-value pairs
	// that describe a particular make and model of a car.
	//
	ApplicationPropertyFilter *CompatibilityPropertyFilter `xml:"applicationPropertyFilter,omitempty"`

	//
	// User can findproducts for one
	// catalog at a time or batch up to
	// 10 catalogs.
	//
	ProductSearch *ProductRequest `xml:"productSearch,omitempty"`
}

type ProductDetailsRequestType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductDetailsRequestType"`

	//
	// The product identifier type and value. Product identifiers, such as ePID
	// values or ISBN values, are unique across all sites.
	//
	ProductIdentifier *ProductIdentifier `xml:"productIdentifier,omitempty"`

	//
	// Individual property name from the dataset. You can either enter
	// dataset name or enter individual property names from the dataset.
	// Only one should be preset at a time.
	//
	DatasetPropertyName []string `xml:"datasetPropertyName,omitempty"`

	//
	// This will define what are properties that will be returned for this
	// catelog-enabled category.
	// <dl>
	// <dt>
	// <strong>Dataset values:</strong>
	// </dt>
	// <dt>
	// DisplayableProductDetails
	// </dt>
	// <dd>
	// Properies for use in a user interface to describe products.
	// </dd>
	// <dt>
	// DisplayableSearchResults
	// </dt>
	// <dd>
	// Properties for use in results for product searches.
	// </dd>
	// <dt>
	// Searchable
	// </dt>
	// <dd>
	// Properties for use in searches.
	// </dd>
	// <dt>
	// Sortable
	// </dt>
	// <dd>
	// Properties that are suitable for sorting.
	// </dd>
	// </dl>
	// User can either enter dataset name or enter individual property names
	// (datasetPropertyName) from the dataset. Only one should be preset at
	// a time.
	//
	Dataset []string `xml:"dataset,omitempty"`

	//
	// Specifies whether or not to filter out the products which are disabled
	// for selling on eBay, disabled for product reviews, or disabled for
	// selling on half.com.
	//
	ProductStatusFilter *ProductStatus `xml:"productStatusFilter,omitempty"`
}

type BaseServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services BaseServiceRequest"`
}

type BaseServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services BaseServiceResponse"`

	//
	// Indicates whether or not errors or warnings were generated during the
	// processing of the request.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Description of an error or warning that occurred when eBay processed the
	// request. Not returned if the ack value is Success.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The release version that eBay used to process the request. Developer
	// Technical Support may ask you for the version value if you work with them
	// to troubleshoot issues.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The version in use is normally the latest release version, as specified
	// in the release notes. Note that eBay releases the API to international
	// sites about a week after the API version is released to the US site.
	// </span>
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the request.
	// This value is returned in GMT, the ISO 8601 date and time format (YYYY-
	// MM- DDTHH:MM:SS.SSSZ). See the "dateTime" type for information about the
	// time format, and for details on converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that
	// occurred. Your application can use error codes as identifiers in your
	// customized error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain in which the error occurred.
	// <dl>
	// <dt>
	// <strong>domain values:</strong>
	// </dt>
	// <dt>
	// Marketplace
	// </dt>
	// <dd>
	// A business or validation error occurred in the service.
	// </dd>
	// <dt>
	// SOA
	// </dt>
	// <dd>
	// An exception occurred in the Service Oriented Architecture (SOA)
	// framework.
	// </dd>
	// </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Name of the subdomain in which the error occurred.
	// <dl>
	// <dt>
	// <strong>subdomain values:</strong>
	// </dt>
	// <dt>
	// MarketplaceCatalog
	// </dt>
	// <dd>
	// The error is specific to the Marketplace Catalog subdomain.
	// </dd>
	// <dt>
	// MarketplaceCommon
	// </dt>
	// <dd>
	// The error is common to all Marketplace services.
	// </dd>
	// </dl>
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Indicates whether the reported problem is fatal (an error) or is less-
	// severe (a warning). Review the error message details for information on
	// the cause.
	// <br><br>
	// If the request fails and the application is the source of the error (for
	// example, a required element is missing), update the application before
	// you retry the request. If the problem is due to incorrect user data,
	// alert the end-user to the problem and provide the means for them to
	// correct the data. Once the problem in the application or data is
	// resolved, re-send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request
	// a reasonable number of times (eBay recommends you try the request twice).
	// If the error persists, contact Developer Technical Support. Once the
	// problem has been resolved, you can resend the request in its original
	// form.
	// <br><br>
	// If a warning occurs, warning information is returned in addition to the
	// business data. Normally, you do not need to resend the request (as the
	// original request was successful). However, depending on the cause of the
	// warning, you might need to contact the end user, or eBay, to effect a
	// long term solution to the problem.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application
	// errors, and system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that caused in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Various warning and error messages return one or more variables that
	// contain contextual information about the error. This is often the
	// field or value that triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ErrorParameter"`

	Value string

	//
	// The name of the input parameter returned with the error.
	// Inspecting the parameter (or its input value) will often aid in
	// understanding the cause of the error. Not all error messages
	// contain this value.
	//
	Name string `xml:"name,attr,omitempty"`
}

type PaginationInput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services PaginationInput"`

	//
	// Specifies which subset of data (or "page") to return in the call
	// response. The number of data pages is determined by the total number of
	// items matching the request search criteria (returned in
	// paginationOutput.totalEntries) divided by the number of entries to
	// display in each response (entriesPerPage). You can return up to the first
	// 100 pages of the result set by issuing multiple requests and specifying,
	// in sequence, the pages to return.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// Specifies the maximum number of entries to return in a single call. If
	// the number of entries found on the specified pageNumber is less than the
	// value specified here, the number of items returned will be less than the
	// value of entriesPerPage. This indicates the end of the result set.
	// <br><br>
	// If entriesPerPage is set to a number greater than 100, the default value,
	// 100, will be used.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`
}

type PaginationOutput struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services PaginationOutput"`

	//
	// The total number of pages of data that could be returned by repeated
	// search requests. Note that if you modify the value of
	// inputPagination.entriesPerPage in a request, the value output for
	// totalPages will change. A value of "0" is returned if eBay does not find
	// any entries that match the search criteria.
	//
	TotalPages int32 `xml:"totalPages,omitempty"`

	//
	// The total number of entries found that match the search criteria in your
	// request. Depending on the input value for entriesPerPage, the response
	// might include only a portion (a page) of the entire result set. A value
	// of "0" is returned if eBay does not find any entries that match the
	// search criteria.
	//
	TotalEntries int32 `xml:"totalEntries,omitempty"`

	//
	// The subset of item data returned in the current response. Search results
	// are divided into sets, or "pages," of item data. The number of pages is
	// equal to the total number of entries matching the search criteria divided
	// by the value specified for entriesPerPage in the request. The response
	// for a request contains one "page" of data.
	// <br> <br>
	// This returned value indicates the page number of data returned (a
	// subset of the complete result set). If this field contains 1, the
	// response contains the first page of item data (the default). If the value
	// returned in totalEntries is less than the value for entriesPerPage,
	// pageNumber returns 1 and the response contains the entire result set.
	// <br> <br>
	// The value of pageNumber is normally equal to the value input for
	// paginationInput.pageNumber. However, if the number input for pageNumber
	// is greater than the total possible pages of output, eBay returns the last
	// page of item data in the result set, and the value for pageNumber is set
	// to the respective (last) page number.
	//
	PageNumber int32 `xml:"pageNumber,omitempty"`

	//
	// The maximum number of items that can be returned in the response. This
	// number is always equal to the value input for
	// paginationInput.entriesPerPage.
	// <br> <br>
	// The end of the result set has been reached if the number specified for
	// entriesPerPage is greater than the number of items found on the specified
	// pageNumber. In this case, there will be fewer items returned than the
	// number specified in entriesPerPage. This can be determined by comparing
	// the entriesPerPage value with the value returned in the count attribute
	// for the searchResult field.
	//
	EntriesPerPage int32 `xml:"entriesPerPage,omitempty"`
}

type CompatibilitySort struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services CompatibilitySort"`

	//
	// The property with its associated sort order, ascending or descending.
	//
	SortOrder *SortOrder `xml:"sortOrder,omitempty"`

	//
	// Indicates where in the sequence of ordering the property should ordered.
	// There are five sorting steps, Sort1 through Sort5. When a property is
	// assigned Sort1 as its sort priority, its values are sorted first. Values
	// for the property assigned Sort2, are sorted second, and so on.
	//
	SortPriority *SortPriority `xml:"sortPriority,omitempty"`
}

type SortOrder struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services SortOrder"`

	//
	// Output can be sorted by one or more property names. You can look these
	// values up using the <b class="con">getProductSearchNames</b>
	// call in the Product Metadata API.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// Order of the sort, either Ascending or Descending.
	//
	Order *OrderType `xml:"order,omitempty"`
}

type FindCompatibilitiesBySpecificationRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services FindCompatibilitiesBySpecificationRequest"`

	*BaseServiceRequest

	//
	// Category ID for which we want to find out the compatibility details
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// This filter is used to restrict the number of compatible vehicles
	// that can be returned. Properties that can be used here include Make,
	// Model, Year and Trim
	//
	CompatibilityPropertyFilter []*PropertyValue `xml:"compatibilityPropertyFilter,omitempty"`

	//
	// The specifications for which we need the compatibility. Examples
	// include Aspect Ratio, Section Width etc.
	//
	Specification []*PropertyValue `xml:"specification,omitempty"`

	//
	// This will define what are properties that will be returned for this
	// catelog-enabled category.
	// <dl>
	// <dt>
	// <strong>Dataset values:</strong>
	// </dt>
	// <dt>
	// DisplayableProductDetails
	// </dt>
	// <dd>
	// Properies for use in a user interface to describe products.
	// </dd>
	// <dt>
	// DisplayableSearchResults
	// </dt>
	// <dd>
	// Properties for use in results for product searches.
	// </dd>
	// <dt>
	// Searchable
	// </dt>
	// <dd>
	// Properties for use in searches.
	// </dd>
	// <dt>
	// Sortable
	// </dt>
	// <dd>
	// Properties that are suitable for sorting.
	// </dd>
	// </dl>
	// User can either enter dataset name or enter individual property names
	// (datasetPropertyName) from the dataset. Only one should be preset at
	// a time.
	//
	DataSet []string `xml:"dataSet,omitempty"`

	//
	// User can either enter dataset name or enter individual property names
	// from the dataset. Only one should be preset at a time.
	//
	DatasetPropertyName []string `xml:"datasetPropertyName,omitempty"`

	//
	// For certain specification properties the compatibility is defined not
	// by an exact match but by an expanded match on the input value by
	// greater or lesser values as well. E.g For Load Index a compatible
	// vehicle is the one which has a load index requirement which is less
	// than or equal to the input. By default we will do an expanded
	// compatibility match whenever it applies. However if you need to do
	// only exact match then you can specify that using this input.
	//
	ExactMatch bool `xml:"exactMatch,omitempty"`

	//
	// Controls the pagination of the result set. Child elements specify the
	// maximum number of products to return per call and the page of
	// data to return. Controls the number of products returned in the
	// response, but does not specify the amount of data to return for each
	// product.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// No more than 10,000 products can be retrieved for a given search,
	// regardless of how many matches are found. This limit is enforced
	// by the maximum page number allowed (100) and the maximum entries per
	// page allowed (20). </span>
	//
	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`

	//
	// Sort Order for the result set. Any of the searchable property can be
	// used to specify the sort order. If no sort order is specified then
	// default sort order(popularity descending) will be applied.
	//
	SortOrder []*CompatibilitySort `xml:"sortOrder,omitempty"`
}

type FindCompatibilitiesBySpecificationResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services FindCompatibilitiesBySpecificationResponse"`

	*BaseServiceResponse

	//
	// Sort Order for the result set. Any of the searchable property can be
	// used to specify the sort order. If no sort order is specified then
	// default sort order(popularity descending) will be applied.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`

	//
	// List of compatibilties.
	//
	CompatibilityDetails []*CompatibilityDetails `xml:"compatibilityDetails,omitempty"`
}

type CompatibilityDetails struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services CompatibilityDetails"`

	//
	// Name-Value pairs for each compatiblility property.
	//
	CompatibilityProperty []*PropertyValue `xml:"compatibilityProperty,omitempty"`
}

type Notes struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Notes"`

	//
	// Additional comments about the product in the form of name-value pairs.
	//
	NoteDetails []*PropertyValue `xml:"noteDetails,omitempty"`
}

type NumericValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services NumericValue"`

	//
	// A numeric value. For example, physical dimensions of a product, such as height or weight, are specified as nummeric values.
	//
	Value string `xml:"value,omitempty"`

	//
	// Unit of measure for a numeric value.
	//
	// <dl>
	// <dt>
	// <b>Allowed values:</b>
	// </dt>
	// <dt>
	// bps
	// </dt>
	// <dd>
	// Bits per second. A unit of data transmission.
	// </dd>
	// <dt>
	// kbps
	// </dt>
	// <dd>
	// Kilobits per second. A unit of data transmission.
	// </dd>
	// <dt>
	// bit
	// </dt>
	// <dd>
	// Binary digit. A unit of information storage.
	// </dd>
	// <dt>
	// byte
	// </dt>
	// <dd>
	// An ordered collection of bits. A unit of information
	// storage equal to 8 bits in most contexts.
	// </dd>
	// <dt>
	// kb
	// </dt>
	// <dd>
	// Kilobit. A unit of information storage equal to 1024 bits.
	// </dd>
	// <dt>
	// MB
	// </dt>
	// <dd>
	// Megabyte. A unit of information storage equal to one million bytes.
	// </dd>
	// <dt>
	// mW
	// </dt>
	// <dd>
	// Megawatt. A unit of power equal to one million watts.
	// </dd>
	// <dt>
	// W
	// </dt>
	// <dd>
	// Watt. The base SI unit of power.
	// </dd>
	// <dt>
	// Hz
	// </dt>
	// <dd>
	// Hertz. A unit of frequency equal to one cycle per second.
	// </dd>
	// <dt>
	// kHz
	// </dt>
	// <dd>
	// Kilohertz. A unit of frequency equal to 1,000 cycles per second.
	// </dd>
	// <dt>
	// m
	// </dt>
	// <dd>
	// Meter. The base unit of distance.
	// </dd>
	// <dt>
	// mm
	// </dt>
	// <dd>
	// Megameter. A unit of distance equal to one million meters.
	// </dd>
	// <dt>
	// rph
	// </dt>
	// <dd>
	// Revolutions per hour. A unit of frequency.
	// </dd>
	// <dt>
	// hr
	// </dt>
	// <dd>
	// Hour. A unit of time equal to 3,600 seconds.
	// </dd>
	// <dt>
	// min
	// </dt>
	// <dd>
	// Minute. A unit of time equal to 60 seconds.
	// </dd>
	// <dt>
	// ms
	// </dt>
	// <dd>
	// Microsecond. A unit of time equal to one millionth of a second.
	// </dd>
	// <dt>
	// ns
	// </dt>
	// <dd>
	// Nanosecond. A unit of time equal to 10<sup>-9</sup>
	// seconds.
	// </dd>
	// <dt>
	// sec
	// </dt>
	// <dd>
	// Seconds. The base unit of time.
	// </dd>
	// <dt>
	// g
	// </dt>
	// <dd>
	// Grams. A unit of mass equal to one one-thousandth of the SI base unit,
	// the kilogram.
	// </dd>
	// <dt>
	// lbs
	// </dt>
	// <dd>
	// Pounds. The base Imperial unit of mass.
	// </dd>
	// </dl>
	//
	// The allowed units of measure do not apply to all numeric values. For
	// example, when specifying the number of doors, unitOfMeasurement is not
	// needed.
	//
	UnitOfMeasurement string `xml:"unitOfMeasurement,omitempty"`
}

type Product struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Product"`

	//
	// The eBay produdt ID (ePID) or external IDs associated with the product.
	// Use the Reference value as input to search for the same product in the
	// future, or use the ISBN, EAN, or UPC value (if returned). The ISBN, EAN,
	// and UPC values can also be useful as keys if your application is
	// comparing products across different sites. Always returned when Product
	// is returned.
	//
	ProductIdentifier *ProductIdentifier `xml:"productIdentifier,omitempty"`

	//
	// Thumbnail and standard stockphoto URLs.
	//
	StockPhotoURL *StockPhotoURL `xml:"stockPhotoURL,omitempty"`

	//
	// Details about the product in the form of name-value pairs.
	//
	ProductDetails []*PropertyValue `xml:"productDetails,omitempty"`

	//
	// Indicates whether or not a product is disabled for selling, product
	// reviews, or use on Half.com.
	//
	ProductStatus *ProductStatus `xml:"productStatus,omitempty"`

	//
	// The quantity of compatibilities that have been specified for the product.
	// When returned, indicates that the product is Parts Compatibility eanbled.
	//
	CompatibilityCount int32 `xml:"compatibilityCount,omitempty"`

	//
	// Indicates if a product is the top or main product in a family (Head) or a
	// variant of the head product (Member). If a product is not part of a
	// product family, it is also the Head.
	// <br><br>
	// Sometimes several versions (or editions) of a product may be available.
	// All versions of the same product are considered to be part of the same
	// product family. Some product families may contain only one product;
	// others may contain many products.
	// <dl>
	// <dt>
	// <b>Allowed values:</b>
	// </dt>
	// <dt>
	// Head
	// </dt>
	// <dd>
	// The product is the the head of the product family.
	// </dd>
	// <dt>
	// Member
	// </dt>
	// <dd>
	// The product is a variant of the head product.
	// </dd>
	// </dl>
	//
	Type_ string `xml:"type,omitempty"`

	//
	// Optional notes that provide additional information about the product,
	// such as the placement of the part or accessory on a vehicle or the type
	// of vehicle a part fits.
	//
	Notes *Notes `xml:"notes,omitempty"`
}

type ProductIdentifier struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductIdentifier"`

	//
	// eBay Product ID. eBay's global reference ID for a catalog product. On the
	// eBay Web site, this is known as the "ePID". A reference ID is a fixed
	// reference to a product (regardless of version). One reference ID can be
	// associated with multiple ProductID values. The value should start with
	// "EPID", for example "EPID30971438" (without quotes). You can find
	// reference IDs for products by using GetProducts (or FindProducts in the
	// Shopping API). You can also find the ePID on eBay's Web site.
	// <br><br>
	// If the primary and secondary categories are both catalog-enabled, this ID
	// should correspond to the primary category (not the secondary category).
	//
	EPID string `xml:"ePID,omitempty"`

	//
	// ISBN-10 or ISBN-13 value for books. (The string length of ProductID
	// indicates whether the ID is 10 or 13 characters.) If you know a book's
	// ISBN, you can use this instead of the eBay CatalogItem or Reference ID to
	// search for that book.
	//
	ISBN string `xml:"ISBN,omitempty"`

	//
	// eBay Product ID.
	//
	UPC string `xml:"UPC,omitempty"`

	//
	// European Article Number (EAN) value for books. (This is used more
	// commonly in European countries.) If you know a book's EAN, you can use
	// this instead of the eBay CatalogItem or Reference ID to search for that
	// book.
	//
	EAN string `xml:"EAN,omitempty"`

	//
	// eBay's unique identifier for a specific version of a product. This is the
	// long alphanumeric ID that is returned from GetProductSearchResults and
	// related calls. See the Trading API Guide for information about finding
	// this type of product ID. (For the shorter ePID value that is displayed on
	// the eBay Web site, see ProductReferenceID instead.)
	//
	ProductId string `xml:"productId,omitempty"`
}

type ProductStatus struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductStatus"`

	//
	// Product cannot be used in selling flows on eBay.
	//
	ExcludeForeBaySelling bool `xml:"excludeForeBaySelling,omitempty"`

	//
	// Product cannot be used in product review flows.
	//
	ExcludeForeBayReviews bool `xml:"excludeForeBayReviews,omitempty"`

	//
	// Product cannot be used in selling flows on half.com.
	//
	ExcludeForHalfSelling bool `xml:"excludeForHalfSelling,omitempty"`
}

type PropertyValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services PropertyValue"`

	//
	// This is the canonical name of the property. Used to identify a property
	// within a catalog that this category belongs to.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// A value for the property.
	//
	Value []*Value `xml:"value,omitempty"`
}

type StringValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services StringValue"`

	//
	// A string value.
	//
	Value string `xml:"value,omitempty"`
}

type URIValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services URIValue"`

	//
	// As part of request, this will be the URL to
	// download media file. As part of response, this
	// will be the URL where the media file is stored
	// on eBay Picture Services (EPS).
	//
	Value *AnyURI `xml:"value,omitempty"`
}

type Value struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Value"`
}

type AddProductsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services AddProductsRequest"`

	*BaseServiceRequest

	//
	// Information about a single product to be added to the eBay catalog. The product information must include a category ID and a set of name-value properties that describe the product.
	//
	AddProductRequest []*ProductSubmission `xml:"addProductRequest,omitempty"`

	//
	// Identifier to help users match requests and responses in multi-
	// threaded applications. When provided in the request, the value is
	// returned in the corresponding response.
	//
	ClientBatchId string `xml:"clientBatchId,omitempty"`
}

type ProductSubmission struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductSubmission"`

	*BaseServiceRequest

	//
	// A unique identifer for a given product request. Use invocationId to
	// prevent the submission of duplicate data. In the event of a partial
	// failure, the invocation ID can also be used to identify a product
	// request that did not succeed.
	// <br><br>
	// If the same invocationId is passed in more than once in the same
	// request, then an error will be returned. The identifier must be a
	// number.
	//
	InvocationId string `xml:"invocationId,omitempty"`

	//
	// Specifies the category to which you want to add a product.
	// Only select Electronics categories support product creation.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// Name-value pairs that describe the product.
	//
	ProductPropertyValue []*PropertyValue `xml:"productPropertyValue,omitempty"`

	//
	// Details for any media, such as images, associated with the product.
	// Currently, images are the only supported media type.
	// <br>
	// <br>
	// When submitting multiple images, the image specified in the first
	// media node will be used as the stock photo for the product.
	//
	Media []*Media `xml:"media,omitempty"`
}

type Media struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Media"`

	//
	// A reference to the media for you product. Currently, only URLs are
	// supported. You must specify a media identifier when you include media
	// details for your product.
	//
	MediaIdentifier *MediaIdentifier `xml:"mediaIdentifier,omitempty"`

	//
	// The kind of media used to describe your product. Currently, images are
	// the only supported media type. You must specify a media type when you
	// include media details for your product.
	//
	MediaType *MediaType `xml:"mediaType,omitempty"`
}

type MediaIdentifier struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services MediaIdentifier"`

	//
	// A URL to the media file for your product. You must specify a URL when you
	// include media details for your product.
	//
	Url string `xml:"url,omitempty"`
}

type AddProductsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services AddProductsResponse"`

	*BaseServiceResponse

	//
	// Status for an individual product submission.
	//
	AddProductResponse []*AddProductResponse `xml:"addProductResponse,omitempty"`

	//
	// Identifier to help users match requests and responses in
	// multi-threaded applications. Simple pass-thru of identifier
	// provided in the request. Only returned if it is specified in the
	// request.
	//
	ClientBatchId string `xml:"clientBatchId,omitempty"`
}

type AddProductResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services AddProductResponse"`

	*BaseServiceResponse

	//
	// A unique identifer for a given product submission, corresponding to a
	// specific product request. Only returned if it was specified in the addProductRequest when the product was submitted with addProducts.
	//
	InvocationId string `xml:"invocationId,omitempty"`

	//
	// Processing/acceptance status for a product submission.
	//
	Status *ProductSubmissionStatus `xml:"status,omitempty"`
}

type ProductSubmissionStatus struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductSubmissionStatus"`

	//
	// A unique [how unique?] identifier for a specific product submission.
	// [When is this not returned?]
	//
	ProductSubmissionId string `xml:"productSubmissionId,omitempty"`

	//
	// The state of the product submission. When a product is submitted, its
	// status is Pending while eBay reviews the submission. Product submissions
	// may remain in a Pending state for several hours.
	//
	StatusCode *ProductSubmissionStatusCode `xml:"statusCode,omitempty"`

	//
	// Reserved for future use.
	//
	StatusReasonCode *ProductSubmissionStatusReasonCode `xml:"statusReasonCode,omitempty"`

	//
	// Reserved for future use.
	//
	StatusReasonDetail string `xml:"statusReasonDetail,omitempty"`

	//
	// The eBay Product Identifier (ePID) is the unique identifier for the
	// product in the eBay catalog.
	// <br><br>
	// Returned in the following conditions:
	// <ul>
	// <li>Product successfully added or updated&mdash;when a product
	// has been successfully added to or updated in the catalog (i.e., status is
	// Approved), the ePID for the new or updated product is returned.
	// </li>
	// <li>Matching product found&mdash;when the catalog already contains a product that matches the submitted product, the submission is rejected and the ePID of the existing product is returned. </li>
	// </ul>
	//
	EPID []string `xml:"ePID,omitempty"`
}

type GetProductSubmissionsRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSubmissionsRequest"`

	//
	// Restrict the scope of product submissions for which to retrieve status
	// information.
	//
	ProductSubmissionFilter []*ProductSubmissionFilter `xml:"productSubmissionFilter,omitempty"`

	//
	// Defines what data to return, in addition to the default set of data,
	// in a response.
	// <br><br>
	// If you don't specify this field, eBay returns a default set of
	// product submission status information. Use outputSelector to include
	// the properties for the product submissions, as well.
	// <br><br>
	// If you specify this field, the additional fields returned can affect
	// the call's response time (performance)
	//
	OutputSelector *OutputSelector `xml:"outputSelector,omitempty"`

	PaginationInput *PaginationInput `xml:"paginationInput,omitempty"`

	//
	// Specifies the logic for sorting the productSubmissionResponse nodes in
	// the response. If sortOption is not specified, no sorting is applied to
	// the response.
	//
	SortOption []*SortOption `xml:"sortOption,omitempty"`
}

type ProductSubmissionFilter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductSubmissionFilter"`

	//
	// Specify the name of the product submission filter you want to use. The
	// productSubmissionFilter filter name must have a corresponding value. You
	// can apply multiple productSubmissionFilter Name/Value pairs in a single
	// request.
	//
	FilterName *ProductSubmissionFilterName `xml:"filterName,omitempty"`

	//
	// The value associated with the respective product submission filter name.
	// Allowed values and datatypes vary for a given filter name.
	//
	FilterValue []string `xml:"filterValue,omitempty"`
}

type SortOption struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services SortOption"`

	//
	// Indicates the property value used for sorting. Currently, results can
	// only be sorted by product submission ID.
	// If you specify a sortOption, you must include sortType.
	//
	SortType *SortType `xml:"sortType,omitempty"`

	//
	// This value specifies whether you want to sort search results in ascending
	// or descending order, in conjunction with the value you specify in
	// sortType.
	// If you specify a sortOption, you must include sortOrder.
	//
	SortOrder *OrderType `xml:"sortOrder,omitempty"`
}

type GetProductSubmissionsResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSubmissionsResponse"`

	*BaseServiceResponse

	//
	// Indicates the pagination of the result set. Child elements indicate
	// the page number that is returned, the maximum number of product
	// submission responses to return per page, total number of pages that
	// can be returned, and the total number of entries that match the
	// search criteria.
	//
	PaginationOutput *PaginationOutput `xml:"paginationOutput,omitempty"`

	//
	// Status information about the submitted product. This information may include API errors for failed submissions (not the same as a status of rejected), status of successful submissions (i.e., pending, approved, or rejected), and product submission details (i.e., name-value properties that describe the product).
	//
	ProductSubmissionResponse []*ProductSubmissionResult `xml:"productSubmissionResponse,omitempty"`
}

type ProductSubmissionResult struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductSubmissionResult"`

	*BaseServiceResponse

	ProductSubmission *ProductSubmission `xml:"productSubmission,omitempty"`

	//
	//
	// Always returned when there are product submissions that match
	// the request criteria.
	//
	Status *ProductSubmissionStatus `xml:"status,omitempty"`
}

type ProductServicePortType struct {
	client *gowsdl.SoapClient
}

func NewProductServicePortType(url string, tls bool) *ProductServicePortType {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &ProductServicePortType{
		client: client,
	}
}

func (service *ProductServicePortType) FindProducts(request *FindProductsRequest) (*FindProductsResponse, error) {
	response := &FindProductsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductServicePortType) FindProductsByCompatibility(request *FindProductsByCompatibilityRequest) (*FindProductsResponse, error) {
	response := &FindProductsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductServicePortType) GetProductDetails(request *GetProductDetailsRequest) (*GetProductDetailsResponse, error) {
	response := &GetProductDetailsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductServicePortType) GetProductCompatibilities(request *GetProductCompatibilitiesRequest) (*GetProductCompatiblitiesResponse, error) {
	response := &GetProductCompatiblitiesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/* 	 */
func (service *ProductServicePortType) FindCompatibilitiesBySpecification(request *FindCompatibilitiesBySpecificationRequest) (*FindCompatibilitiesBySpecificationResponse, error) {
	response := &FindCompatibilitiesBySpecificationResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductServicePortType) AddProducts(request *AddProductsRequest) (*AddProductsResponse, error) {
	response := &AddProductsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductServicePortType) GetProductSubmissions(request *GetProductSubmissionsRequest) (*GetProductSubmissionsResponse, error) {
	response := &GetProductSubmissionsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
