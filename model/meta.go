package ebay

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type OrderType string

const (

	//
	// Sorts results in ascending (low to high) order.
	//
	OrderTypeAscending OrderType = "Ascending"

	//
	// Sorts results in descending (high to low) order.
	//
	OrderTypeDescending OrderType = "Descending"
)

type DatasetValue string

const (

	//
	// Indicates ....
	//
	DatasetValueSearchable DatasetValue = "Searchable"

	//
	// Indicates ....
	//
	DatasetValueSortable DatasetValue = "Sortable"

	//
	// Indicates ....
	//
	DatasetValueDisplayableSmall DatasetValue = "DisplayableSmall"

	//
	// Indicates ....
	//
	DatasetValueDisplayableMedium DatasetValue = "DisplayableMedium"

	//
	// Indicates ....
	//
	DatasetValueDisplayableLarge DatasetValue = "DisplayableLarge"

	//
	// Indicates ....
	//
	DatasetValueDisplayableAll DatasetValue = "DisplayableAll"
)

type ErrorCategory string

const (

	//
	// Indicates that an error has occurred on the eBay system side. For
	// example, a database or server could be down. Inspect the error message to
	// find the cause of the problem. If the problem is on the eBay side, an
	// application can retry the request as-is a reasonable number of times
	// (eBay recommends twice). If the error persists, contact Developer
	// Technical Support. Once the problem has been resolved, the request may be
	// resent in its original form.
	//
	ErrorCategorySystem ErrorCategory = "System"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being the application sending the request. For example, the
	// request is missing a required data element or it contains an invalid
	// field. The problem must be corrected before the request can be resent.
	// Inspect the error message to find the cause of the problem. If the
	// problem is due to an application error, modify the application and resend
	// the request. If the error is due to invalid data, the source of the data
	// must be corrected before you resend the resend request to eBay.
	//
	ErrorCategoryApplication ErrorCategory = "Application"

	//
	// An error occurred due to a problem with the request, with the most likely
	// source being missing or invalid data in the request. The problem must be
	// corrected before the request can be retried. Inspect the error message to
	// find the cause of the problem. If the problem is a result of end-user
	// data, alert the end-user to the problem and provide the means for them to
	// correct the problem. Once the problem is resolved, resend the request to
	// eBay.
	//
	ErrorCategoryRequest ErrorCategory = "Request"
)

type ErrorSeverity string

const (

	//
	// eBay encountered a fatal error during the processing of the request,
	// causing the request to fail. When eBay encounters an error, it returns
	// error data instead of the requested business data. Inspect the error
	// details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityError ErrorSeverity = "Error"

	//
	// The request was successfully processed, but eBay encountered a non-fatal
	// error during the processing that could affect the data returned. For
	// example, eBay might have changed the value of an input field. In this
	// case, eBay returns a successful response, but it also returns a warning.
	// For best results, requests should return without warnings. Inspect the
	// warning details and resolve the problem before resubmitting the request.
	//
	ErrorSeverityWarning ErrorSeverity = "Warning"
)

type AckValue string

const (

	//
	// The request was processed successfully, but something occurred that may
	// affect your application or the user.
	//
	AckValueSuccess AckValue = "Success"

	//
	// The request that triggered the error was not processed successfully.
	// When a serious application-level error occurs, the error is returned
	// instead of the business data.
	//
	AckValueFailure AckValue = "Failure"

	//
	// The request that triggered the error was processed successfully but with some warnings.
	//
	AckValueWarning AckValue = "Warning"

	//
	// The request that triggered the error was processed successfully but with
	// some warnings.
	//
	AckValuePartialFailure AckValue = "PartialFailure"
)

type GetProductSearchNamesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchNamesRequest"`

	*BaseServiceRequest

	//
	// Specifies the category from which you want to retrieve properties
	// that can be used to search for products. The category must be
	// catalog-enabled, or it will contain no product data, and the request
	// will fail.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// This will define what are properties that will be returned for this
	// catelog-enabled category.
	// <dl>
	// <dt>
	// <strong>Dataset values:</strong>
	// </dt>
	// <dt>
	// DisplayableProductDetails
	// </dt>
	// <dd>
	// Properies for use in a user interface to describe products.
	// </dd>
	// <dt>
	// DisplayableSearchResults
	// </dt>
	// <dd>
	// Properties for use in results for product searches.
	// </dd>
	// <dt>
	// Searchable
	// </dt>
	// <dd>
	// Properties for use in searches.
	// </dd>
	// <dt>
	// Sortable
	// </dt>
	// <dd>
	// Properties that are suitable for sorting.
	// </dd>
	// </dl>
	//
	Dataset []string `xml:"dataset,omitempty"`
}

type GetProductSearchNamesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchNamesResponse"`

	*BaseServiceResponse

	//
	// The category specified in the request.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// This contains all the properties for the specified category, as well
	// as the dataset from which the properties are returned (e.g.,
	// DisplayableSearchResults). The properties container also includes the
	// metatdata version associated with the most recent update of the
	// properties.
	//
	Properties []*Properties `xml:"properties,omitempty"`
}

type GetProductSearchValuesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchValuesRequest"`

	*GetProductSearchValuesBaseRequest

	//
	// This is the canonical name of the property. Used
	// to identify a property within a catalog that
	// this category belongs to.
	//
	PropertyName string `xml:"propertyName,omitempty"`
}

type GetProductSearchValuesBaseRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchValuesBaseRequest"`

	*BaseServiceRequest

	//
	// Specifies the category from which you want to retrieve property
	// values that can be used to search for products.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid categories, use the Trading API <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategories.html"
	// >GetCategories</a> call.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// Constrains the output of values for the given PropertyLiteral (or
	// group of properties) as per given
	// ConstrainingPropertyLiteral:ConstrainingValueLiteral pair (or pairs)
	// according to the respective dependency graph. AND-logic will be
	// applied within the constraint.
	//
	PropertyFilter []*PropertyValue `xml:"propertyFilter,omitempty"`

	//
	// Return properties for a given catalog enabled category. We will throw
	// an error if the category is not catalog enabled.
	//
	ListFormatOnly bool `xml:"listFormatOnly,omitempty"`

	//
	// Sort order for property values in the result set. You can sort by any
	// of the searchable properties, such as Year, Make, or Model. If no
	// sort order is specified then values are sorted in ascending order.
	// <br><br>
	// Sorting can be applied only when the response is in list format
	// (i.e., <b class="con">treeFormat</b> in the response is
	// false).
	// <br><br>
	// For sorting, characters are compared at each position (i.e., first
	// character, second character, etc.). When values are sorted in
	// ascending order, numbers (0-9) sort before uppercase letters (A-Z),
	// which sort before lowercase letters (a-z). For example, 268 precedes
	// 3, CTS comes before Camry, and 911 comes before A3.
	// <br><br>
	// Descending order is the opposite of ascending, with lowercase letters (z-a) before uppercase letters (Z-A) and numbers last (9-0).
	//
	SortOrder []*SortOrder `xml:"sortOrder,omitempty"`
}

type GetProductSearchValuesResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchValuesResponse"`

	*BaseServiceResponse

	//
	// Version information reflects the last update of the values within the
	// dependency graph.
	//
	MetadataVersion string `xml:"metadataVersion,omitempty"`

	//
	// This will be populated for the
	// non-fitment enabled category
	//
	PropertyValues []*PropertyValue `xml:"propertyValues,omitempty"`

	//
	// This will be populated for
	// non-fitment enabled category
	//
	PropertyValuesTree *PropertyNameValue `xml:"propertyValuesTree,omitempty"`

	//
	// Indicates whether the response is flat or in a hierarchical tree
	// format.
	//
	TreeFormat bool `xml:"treeFormat,omitempty"`
}

type SortOrder struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services SortOrder"`

	//
	// Output can be sorted by one or more (for bulk calls) property names. You
	// can look up valid values using either the <b
	// class="con">getProductSearchNames</b> call or the <b
	// class="con">getCompatibilitySearchNames</b> call.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// Order of the sort, either Ascending or Descending.
	//
	Order *OrderType `xml:"order,omitempty"`
}

type GetCompatibilitySearchNamesRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetCompatibilitySearchNamesRequest"`

	*BaseServiceRequest

	//
	// Specifies the category from which you want to retrieve compatibility
	// property names that can be used to search for products. Provide the
	// interface category ID. For example, to get the cars properties,
	// provide tires category ID. The category must be compatibility-
	// enabled.
	// <br><br>
	// If a specified category ID doesn't match an existing compatibility-
	// enabled category for the site, eBay returns an error. To determine
	// valid compatibility-enabled categories, use the Trading API <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategoryFeatures.html"
	// >GetCategoryFeatures</a> call.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// This will define what are properties that will be returned for this
	// catelog-enabled category.
	// <dl>
	// <dt>
	// <strong>Dataset values:</strong>
	// </dt>
	// <dt>
	// DisplayableProductDetails
	// </dt>
	// <dd>
	// Properies for use in a user interface to describe products.
	// </dd>
	// <dt>
	// DisplayableSearchResults
	// </dt>
	// <dd>
	// Properties for use in results for product searches.
	// </dd>
	// <dt>
	// Searchable
	// </dt>
	// <dd>
	// Properties for use in searches.
	// </dd>
	// <dt>
	// Sortable
	// </dt>
	// <dd>
	// Properties that are suitable for sorting.
	// </dd>
	// </dl>
	//
	Dataset []string `xml:"dataset,omitempty"`
}

type GetProductSearchValuesBulkResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchValuesBulkResponse"`

	*GetProductSearchValuesResponse
}

type GetCompatibilitySearchValuesBulkResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetCompatibilitySearchValuesBulkResponse"`

	*GetProductSearchValuesResponse

	//
	// TBD
	//
	MedataDetails string `xml:"medataDetails,omitempty"`
}

type GetProductSearchValuesBulkRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchValuesBulkRequest"`

	*GetProductSearchValuesBaseRequest

	//
	// This is the canonical name of the property. Used
	// to identify a property within a catalog that
	// this category belongs to.
	//
	PropertyName []string `xml:"propertyName,omitempty"`
}

type GetProductSearchDataVersionRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchDataVersionRequest"`

	*BaseServiceRequest

	//
	// Specifies the category for which you want to retrieve version
	// information about the product metadata.
	// <br><br>
	// If a specified category ID doesn't match an existing category for the
	// site, eBay returns an invalid-category error message. To determine
	// valid categories, use the Trading API <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategories.html">GetCategories</a>
	// call.
	//
	CategoryId string `xml:"categoryId,omitempty"`
}

type GetProductSearchDataVersionResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GetProductSearchDataVersionResponse"`

	*BaseServiceResponse

	//
	// Time and version for the most recent update of catalog property names
	// for the specified category.
	//
	NamesDetails *VersionDetails `xml:"namesDetails,omitempty"`

	//
	// Time and version for the most recent update of catalog property
	// values for the specified category.
	//
	ValueDetails *VersionDetails `xml:"valueDetails,omitempty"`
}

type VersionDetails struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services VersionDetails"`

	//
	// Version number for the current search metadata (product or
	// compatibility). If you are maintaining search metadata locally, compare
	// this value to the version of the search metadata you last downloaded to
	// determine whether the data may have changed.
	//
	Version string `xml:"version,omitempty"`

	//
	// Indicates the date and time the current search metadata was updated.
	//
	UpdateTime time.Time `xml:"updateTime,omitempty"`
}

type BaseServiceRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services BaseServiceRequest"`
}

type BaseServiceResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services BaseServiceResponse"`

	//
	// Indicates whether or not errors or warnings were generated during the
	// processing of the request.
	//
	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Description of an error or warning that occurred when eBay processed the
	// request. Not returned if the ack value is Success.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// The release version that eBay used to process the request. Developer
	// Technical Support may ask you for the version value if you work with them
	// to troubleshoot issues.
	// <br><br>
	// <span class="tablenote"><strong>Note:</strong>
	// The version in use is normally the latest release version, as specified
	// in the release notes. Note that eBay releases the API to international
	// sites about a week after the API version is released to the US site.
	// </span>
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the request.
	// This value is returned in GMT, the ISO 8601 date and time format (YYYY-
	// MM- DDTHH:MM:SS.SSSZ). See the "dateTime" type for information about the
	// time format, and for details on converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`
}

type ExtensionType struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ExtensionType"`

	Id *PositiveInteger `xml:"id,omitempty"`

	Version string `xml:"version,omitempty"`

	ContentType string `xml:"contentType,omitempty"`

	Value string `xml:"value,omitempty"`
}

type BaseRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services BaseRequest"`

	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type BaseResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services BaseResponse"`

	Ack *AckValue `xml:"ack,omitempty"`

	//
	// Description of an error or warning that occurred when eBay processed the
	// request. Not returned if the ack value is Success.
	//
	ErrorMessage *ErrorMessage `xml:"errorMessage,omitempty"`

	//
	// Version number for the current search metadata (product or
	// compatibility). If you are maintaining search metadata locally, compare
	// this value to the version of the search metadata you last downloaded to
	// determine whether the data may have changed.
	//
	Version string `xml:"version,omitempty"`

	//
	// This value represents the date and time when eBay processed the request.
	// This value is returned in GMT, the ISO 8601 date and time format (YYYY-
	// MM- DDTHH:MM:SS.SSSZ). See the "dateTime" type for information about the
	// time format, and for details on converting to and from the GMT time zone.
	//
	Timestamp time.Time `xml:"timestamp,omitempty"`

	Extension []*ExtensionType `xml:"extension,omitempty"`
}

type ErrorData struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ErrorData"`

	//
	// A unique code that identifies the particular error condition that
	// occurred. Your application can use error codes as identifiers in your
	// customized error-handling algorithms.
	//
	ErrorId int64 `xml:"errorId,omitempty"`

	//
	// Name of the domain in which the error occurred.
	// <dl>
	// <dt>
	// <strong>domain values:</strong>
	// </dt>
	// <dt>
	// Marketplace
	// </dt>
	// <dd>
	// A business or validation error occurred in the service.
	// </dd>
	// <dt>
	// SOA
	// </dt>
	// <dd>
	// An exception occurred in the Service Oriented Architecture (SOA)
	// framework.
	// </dd>
	// </dl>
	//
	Domain string `xml:"domain,omitempty"`

	//
	// Name of the subdomain in which the error occurred.
	// <dl>
	// <dt>
	// <strong>subdomain values:</strong>
	// </dt>
	// <dt>
	// MarketplaceCatalog
	// </dt>
	// <dd>
	// The error is specific to the Marketplace Catalog subdomain.
	// </dd>
	// <dt>
	// MarketplaceCommon
	// </dt>
	// <dd>
	// The error is common to all Marketplace services.
	// </dd>
	// </dl>
	//
	Subdomain string `xml:"subdomain,omitempty"`

	//
	// Indicates whether the reported problem is fatal (an error) or is less-
	// severe (a warning). Review the error message details for information on
	// the cause.
	// <br><br>
	// If the request fails and the application is the source of the error (for
	// example, a required element is missing), update the application before
	// you retry the request. If the problem is due to incorrect user data,
	// alert the end-user to the problem and provide the means for them to
	// correct the data. Once the problem in the application or data is
	// resolved, re-send the request to eBay.
	// <br><br>
	// If the source of the problem is on eBay's side, you can retry the request
	// a reasonable number of times (eBay recommends you try the request twice).
	// If the error persists, contact Developer Technical Support. Once the
	// problem has been resolved, you can resend the request in its original
	// form.
	// <br><br>
	// If a warning occurs, warning information is returned in addition to the
	// business data. Normally, you do not need to resend the request (as the
	// original request was successful). However, depending on the cause of the
	// warning, you might need to contact the end user, or eBay, to effect a
	// long term solution to the problem.
	//
	Severity *ErrorSeverity `xml:"severity,omitempty"`

	//
	// There are three categories of errors: request errors, application
	// errors, and system errors.
	//
	Category *ErrorCategory `xml:"category,omitempty"`

	//
	// A detailed description of the condition that caused in the error.
	//
	Message string `xml:"message,omitempty"`

	//
	// Unique identifier for an exception associated with an error.
	//
	ExceptionId string `xml:"exceptionId,omitempty"`

	//
	// Various warning and error messages return one or more variables that
	// contain contextual information about the error. This is often the
	// field or value that triggered the error.
	//
	Parameter []*ErrorParameter `xml:"parameter,omitempty"`
}

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ErrorMessage"`

	//
	// Details about a single error.
	//
	Error []*ErrorData `xml:"error,omitempty"`
}

type ErrorParameter struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ErrorParameter"`

	Value string

	//
	// The name of the input parameter returned with the error.
	// Inspecting the parameter (or its input value) will often aid in
	// understanding the cause of the error. Not all error messages
	// contain this value.
	//
	Name string `xml:"name,attr,omitempty"`
}

type NumericValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services NumericValue"`

	//
	// A number value.
	//
	Value string `xml:"value,omitempty"`

	//
	// Unit of measure for a numeric value.
	//
	// <dl>
	// <dt>
	// <b>Allowed values:</b>
	// </dt>
	// <dt>
	// bps
	// </dt>
	// <dd>
	// Bits per second. A unit of data transmission.
	// </dd>
	// <dt>
	// kbps
	// </dt>
	// <dd>
	// Kilobits per second. A unit of data transmission.
	// </dd>
	// <dt>
	// bit
	// </dt>
	// <dd>
	// Binary digit. A unit of information storage.
	// </dd>
	// <dt>
	// byte
	// </dt>
	// <dd>
	// An ordered collection of bits. A unit of information
	// storage equal to 8 bits in most contexts.
	// </dd>
	// <dt>
	// kb
	// </dt>
	// <dd>
	// Kilobit. A unit of information storage equal to 1024 bits.
	// </dd>
	// <dt>
	// MB
	// </dt>
	// <dd>
	// Megabyte. A unit of information storage equal to one million bytes.
	// </dd>
	// <dt>
	// mW
	// </dt>
	// <dd>
	// Megawatt. A unit of power equal to one million watts.
	// </dd>
	// <dt>
	// W
	// </dt>
	// <dd>
	// Watt. The base SI unit of power.
	// </dd>
	// <dt>
	// Hz
	// </dt>
	// <dd>
	// Hertz. A unit of frequency equal to one cycle per second.
	// </dd>
	// <dt>
	// kHz
	// </dt>
	// <dd>
	// Kilohertz. A unit of frequency equal to 1,000 cycles per second.
	// </dd>
	// <dt>
	// m
	// </dt>
	// <dd>
	// Meter. The base unit of distance.
	// </dd>
	// <dt>
	// mm
	// </dt>
	// <dd>
	// Megameter. A unit of distance equal to one million meters.
	// </dd>
	// <dt>
	// rph
	// </dt>
	// <dd>
	// Revolutions per hour. A unit of frequency.
	// </dd>
	// <dt>
	// hr
	// </dt>
	// <dd>
	// Hour. A unit of time equal to 3,600 seconds.
	// </dd>
	// <dt>
	// min
	// </dt>
	// <dd>
	// Minute. A unit of time equal to 60 seconds.
	// </dd>
	// <dt>
	// ms
	// </dt>
	// <dd>
	// Microsecond. A unit of time equal to one millionth of a second.
	// </dd>
	// <dt>
	// ns
	// </dt>
	// <dd>
	// Nanosecond. A unit of time equal to 10<sup>-9</sup>
	// seconds.
	// </dd>
	// <dt>
	// sec
	// </dt>
	// <dd>
	// Seconds. The base unit of time.
	// </dd>
	// <dt>
	// g
	// </dt>
	// <dd>
	// Grams. A unit of mass equal to one one-thousandth of the SI base unit,
	// the kilogram.
	// </dd>
	// <dt>
	// lbs
	// </dt>
	// <dd>
	// Pounds. The base Imperial unit of mass.
	// </dd>
	// </dl>
	//
	// The allowed units of measure do not apply to all numeric values. For
	// example, when specifying the number of doors, unitOfMeasurement is not
	// needed.
	//
	UnitOfMeasurement string `xml:"unitOfMeasurement,omitempty"`
}

type Properties struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Properties"`

	//
	// Version information reflects the latest update of the properties or
	// values.
	//
	MetadataVersion string `xml:"metadataVersion,omitempty"`

	//
	// This is the canonical name of the property. Used
	// to identify a property within a catalog that
	// this category belongs to.
	//
	PropertyName []*Property `xml:"propertyName,omitempty"`

	//
	// This will define what are properties that will be returned for this
	// catelog-enabled category.
	// <dl>
	// <dt>
	// <strong>Dataset values:</strong>
	// </dt>
	// <dt>
	// DisplayableProductDetails
	// </dt>
	// <dd>
	// Properies for use in a user interface to describe products.
	// </dd>
	// <dt>
	// DisplayableSearchResults
	// </dt>
	// <dd>
	// Properties for use in results for product searches.
	// </dd>
	// <dt>
	// Searchable
	// </dt>
	// <dd>
	// Properties for use in searches.
	// </dd>
	// <dt>
	// Sortable
	// </dt>
	// <dd>
	// Properties that are suitable for sorting.
	// </dd>
	// </dl>
	//
	Dataset string `xml:"dataset,omitempty"`
}

type Property struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Property"`

	//
	// This is the canonical name of the property. Used
	// to identify a property within a catalog that
	// this category belongs to.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// Metadata for the property.
	//
	PropertyNameMetadata *PropertyNameMetadata `xml:"propertyNameMetadata,omitempty"`

	//
	// This will be the display name of the property
	//
	PropertyDisplayName string `xml:"propertyDisplayName,omitempty"`
}

type PropertyNameMetadata struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services PropertyNameMetadata"`

	//
	// A numeric value indicating the ordering position for the property.
	//
	DisplaySequence int32 `xml:"displaySequence,omitempty"`
}

type PropertyNameValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services PropertyNameValue"`

	//
	// This is the canonical name of the property. Used
	// to identify a property within a catalog that
	// this category belongs to.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// A value for the property.
	//
	Value *Value `xml:"value,omitempty"`

	//
	// Property name value pairs that are children to other properties. Only
	// returned when the response is returned as a propertyValuesTree.
	//
	ChildPropertyNameValue []*PropertyNameValue `xml:"childPropertyNameValue,omitempty"`
}

type PropertyValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services PropertyValue"`

	//
	// This is the canonical name of the property. Used
	// to identify a property within a catalog that
	// this category belongs to.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// A value for the property.
	//
	Value []*Value `xml:"value,omitempty"`
}

type StringValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services StringValue"`

	//
	// A string value.
	//
	Value string `xml:"value,omitempty"`
}

type URIValue struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services URIValue"`

	//
	// As part of request, this will be the URL to
	// download media file. As part of response, this
	// will be the URL where the media file is stored
	// on eBay.
	//
	Value *AnyURI `xml:"value,omitempty"`
}

type Value struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Value"`
}

type PropertyMetadata struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services PropertyMetadata"`

	//
	// this is label for the property that
	// should be used for making products data.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// Value that may be used in place of the property name value
	// (propertyMetadata.propertyName) when adding a product to an eBay catalog.
	// Only returned when there are synonymous property names available.
	//
	AlternatePropertyName []string `xml:"alternatePropertyName,omitempty"`

	//
	// The data type for the property value.
	//
	// <dl>
	// <dt>
	// <strong>dataType values:</strong>
	// </dt>
	// <dt>
	// STRING
	// </dt>
	// <dd>
	// A string of characters. This data type typically applies to
	// text-based property values, such as names, titles, and descriptions.
	// All characters in the Unicode character set are supported.
	// <br><br>
	// Refer to <b
	// class="con">typeSpecificInformation.stringTypeSpecificInformation</b>
	// for additional value constraints.
	// </dd>
	// <dt>
	// NUMERIC
	// </dt>
	// <dd>
	// A number, which typically describes a product dimension, such as
	// weight or memory capacity.
	// <br><br>
	// Refer to <b
	// class="con">typeSpecificInformation.numericTypeSpecificInformation</b>
	// for additional value constraints.
	// </dd>
	// <dt>
	// URI
	// </dt>
	// <dd>
	// Specifies a Uniform Resource Identifier (URI), a compact sequence of
	// characters that identifies an abstract or physical resource.
	// <br><br>
	// Refer to <b
	// class="con">typeSpecificInformation.uriTypeSpecificInformation</b>
	// for additional value constraints.
	// </dd>
	// <dt>
	// MEDIA
	// </dt>
	// <dd>
	// Reserved for future use.
	// <br><br>
	// Refer to <b
	// class="con">typeSpecificInformation.stringTypeSpecificInformation</b>
	// for additional value constraints.
	// </dd>
	// </dl>
	//
	DataType string `xml:"dataType,omitempty"`

	//
	// Container for any type-specific constraints for property values.
	//
	TypeSpecificInformation *TypeSpecificInformation `xml:"typeSpecificInformation,omitempty"`

	//
	// Indicates whether or not more than one value can be specified for a given
	// property when adding a product to an eBay catalog. When true, multiple values can be specified for the given property.
	//
	MultiValued bool `xml:"multiValued,omitempty"`

	//
	// The official unique property name for use as a primary key for locally
	// stored metadata. This value is not used for product creation. Use
	// productMetadata.propertyName  instead for adding a product to an eBay
	// catalog.
	//
	CanonicalName string `xml:"canonicalName,omitempty"`

	//
	// Name-value pairs that provide additional descriptive details about the
	// property when needed. This information is not used for adding a product
	// to an eBay catalog, but can provide clarification about an individual
	// property. For example, propertyTags information could indicate that a
	// specific property constitutes a unique product identifier.
	//
	PropertyTags []*Tag `xml:"propertyTags,omitempty"`

	//
	// Describes the given property.
	//
	Description string `xml:"description,omitempty"`
}

type TypeSpecificInformation struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services TypeSpecificInformation"`

	//
	// Specifies the constraints for property values that are of type URI.
	// Currently, there are no constraints for URI type properties.
	//
	UriTypeSpecificInformation *URITypeSpecificInformation `xml:"uriTypeSpecificInformation,omitempty"`

	//
	// Specifies the constraints for property values that are of type numeric.
	//
	NumericTypeSpecificInformation *NumericTypeSpecificInformation `xml:"numericTypeSpecificInformation,omitempty"`

	//
	// Specifies the constraints, if any, for property values that are of type
	// media. Currently, there are no constraints for media type properties,
	// which apply to images only. Media type properties are specified as a URL
	// in the addProducts request.
	//
	MediaTypeSpecificInformation *MediaTypeSpecificInformation `xml:"mediaTypeSpecificInformation,omitempty"`

	//
	// Specifies the constraints for property values that are of type string. In
	// most cases, this is simply the maximum number of characters allowed in
	// the string. In some cases, a list of managed (known good) values may also
	// be returned.
	//
	StringTypeSpecificInformation *StringTypeSpecificInformation `xml:"stringTypeSpecificInformation,omitempty"`
}

type StringTypeSpecificInformation struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services StringTypeSpecificInformation"`

	//
	// Specifies a known good value for the given property. For example, for
	// digital cameras, eBay may maintain a list of brands, camera types, lens
	// types, focus types, etc. When possible, use a managed value to ensure
	// consistent spelling and capitalization.
	//
	ManagedValue []string `xml:"managedValue,omitempty"`

	//
	// Specifies the maximum number of characters that can be submitted for the
	// given property value. Always returned for string values.
	//
	MaximumCharactersAllowed int32 `xml:"maximumCharactersAllowed,omitempty"`
}

type NumericTypeSpecificInformation struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services NumericTypeSpecificInformation"`

	//
	// Specifies the unit of measurement (e.g., lb or kg) associated with the
	// given numeric value.
	//
	UnitOfMeasurement string `xml:"unitOfMeasurement,omitempty"`

	//
	// Specifies the highest numeric value that can be submitted for the given
	// property value. Always returned for numeric values.
	//
	MaximumValueAllowed int64 `xml:"maximumValueAllowed,omitempty"`
}

type URITypeSpecificInformation struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services URITypeSpecificInformation"`
}

type MediaTypeSpecificInformation struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services MediaTypeSpecificInformation"`
}

type ProductMetadata struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductMetadata"`

	//
	// Contains all the metadata associated with a specific property, such as
	// Title or Brand.
	//
	PropertyMetadata []*PropertyMetadata `xml:"propertyMetadata,omitempty"`

	//
	// Some product properties share a common characteristic, such as being
	// required for product creation or qualifying as a globally unique
	// identifier (GUID). The required properties group contains the minimum set
	// of properties you must submit to add a product to an eBay catalog. GUID
	// properties make products easier to find and can improve search rankings
	// for associated listings.
	//
	GroupProperties []*GroupProperties `xml:"groupProperties,omitempty"`

	//
	// Specifies the current version of the metadata for the given category.
	//
	ProductMetadataVersion string `xml:"productMetadataVersion,omitempty"`
}

type ProductMetadataResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductMetadataResponse"`

	*BaseResponse

	//
	// Product metadata for the specified category. This product metadata
	// provides all the requirements and constraints to submit a new product
	// for inclusion into the eBay catalog associated with the given
	// category. Product metadata consists of metadata for individual
	// properties, property group information, and the version of the
	// product metadata for the category.
	//
	ProductMetadata *ProductMetadata `xml:"productMetadata,omitempty"`

	//
	// The corresponding productMetadataRequest that was passed in the
	// getProductMetadataBulk request.
	//
	RequestInformation *ProductMetadataRequest `xml:"requestInformation,omitempty"`
}

type ProductMetadataBulkRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductMetadataBulkRequest"`

	*BaseRequest

	//
	// Request to retrieve product metadata for a single category. Your
	// getProductMetadtaBulk request may contain three
	// productMetadataRequest containers. Each container must specify a
	// valid category ID for the eBay site specified in the
	// X-EBAY-SOA-GLOBAL-ID header.
	//
	ProductMetadataRequest []*ProductMetadataRequest `xml:"productMetadataRequest,omitempty"`
}

type ProductMetadataRequest struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductMetadataRequest"`

	*BaseRequest

	//
	// Specifies the leaf category from which you want to retrieve product metadata information that can be used to add products into the corresponding eBay catalog.
	// <br><br>
	// If the specified category is not enabled for product creation, eBay returns an error. Use <a
	// href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetCategoryFeatures.html"
	// >GetCategoryFeatures</a> (Trading API) with <b
	// class="con">FeatureID</b> set to "ProductCreationEnabled"
	// to identify categories that are enabled for product creation.
	//
	CategoryId string `xml:"categoryId,omitempty"`

	//
	// If true, the response will include managed values (approved standard
	// values) for certain string-based properties, such as brand or device
	// type. Managed values are not maintained for all properties, but when
	// they are available, they can be used as an enumeration list to create
	// a selection list. When possible, use a managed value to ensure
	// consistent spelling and capitalization.
	//
	IncludeManagedValues bool `xml:"includeManagedValues,omitempty"`

	//
	// Reserved for future use. Currently, both group properties (<b
	// class="con"
	// >productMetadataResponse.productMetadata.groupProperties</b>)
	// and property metadata (<b
	// class="con"
	// >productMetadataResponse.productMetadata.propertyMetadata</b>)
	// are always returned.
	//
	IncludeGroupPropertiesOnly bool `xml:"includeGroupPropertiesOnly,omitempty"`

	//
	// Reserved for future use. Currently, all supported group types are
	// returned.
	//
	GroupType []string `xml:"groupType,omitempty"`
}

type ProductMetadataBulkResponse struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services ProductMetadataBulkResponse"`

	*BaseResponse

	//
	// Product metadata for the category specified in the corresponding <b
	// class="con">productMetadataRequest</b> in the request.
	// Product metadata consists of individual property metadata, group
	// properties, the metadata version, and the corresponding request.+++
	//
	ProductMetadataResponse []*ProductMetadataResponse `xml:"productMetadataResponse,omitempty"`
}

type Tag struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services Tag"`

	//
	// The name part of the name-value pair.
	//
	Name string `xml:"name,omitempty"`

	//
	// The datatype of the value part of the name-value pair (e.g., BOOLEAN,
	// STRING, or NUMERIC).
	//
	DataType string `xml:"dataType,omitempty"`

	//
	// Value part of the name-value pair. One or more values may be associated
	// with a given name.
	//
	Value []string `xml:"value,omitempty"`

	//
	// Reserved for future use.
	//
	Description string `xml:"description,omitempty"`
}

type GroupProperties struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GroupProperties"`

	//
	// Identifies the nature of a given group of properties.
	// <dl>
	// <dt>
	// <b>Allowed values:</b>
	// </dt>
	// <dt>
	// REQUIRED_PROPERTIES
	// </dt>
	// <dd>
	// Properties that must be specified to add a product to the eBay
	// catalog for the given category.
	// </dd>
	// <dt>
	// GUID_PROPERTIES
	// </dt>
	// <dd>
	// Properties (e.g., EAN or MPN) that qualify as globally unique
	// identifiers (GUIDs) for  a product. GUID properties make products
	// easier to find and can improve search rankings for associated
	// listings.
	// </dd>
	// </dl>
	//
	GroupType string `xml:"groupType,omitempty"`

	//
	// A displayable name for the given group type.
	//
	GroupName string `xml:"groupName,omitempty"`

	//
	// Basic information for an individual property, consisting of the property
	// name and any supplemental tags (name-value pair information) to describe
	// the property, when needed. Use property metadata for more details about a property, including datatype constraints.
	//
	GroupProperty []*GroupProperty `xml:"groupProperty,omitempty"`

	//
	// Reserved for future use.
	//
	Description string `xml:"description,omitempty"`
}

type GroupProperty struct {
	XMLName xml.Name `xml:"http://www.ebay.com/marketplace/marketplacecatalog/v1/services GroupProperty"`

	//
	// Name of the property for use as input in the corresponding propertyName
	// field in the addProducts request. See the corresponding propertyMetadata
	// container with the same propertyName for property details.
	//
	PropertyName string `xml:"propertyName,omitempty"`

	//
	// Name-value pairs that provide additional descriptive details about the
	// property when needed. This information is not used for adding a product
	// to an eBay catalog, but can provide clarification about an individual
	// property. For example, tag information could indicate that a specific
	// property constitutes a unique product identifier.
	//
	Tag []*Tag `xml:"tag,omitempty"`
}

type ProductMetadataServicePortType struct {
	client *gowsdl.SoapClient
}

func NewProductMetadataServicePortType(url string, tls bool) *ProductMetadataServicePortType {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &ProductMetadataServicePortType{
		client: client,
	}
}

func (service *ProductMetadataServicePortType) GetProductSearchNames(request *GetProductSearchNamesRequest) (*GetProductSearchNamesResponse, error) {
	response := &GetProductSearchNamesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductMetadataServicePortType) GetCompatibilitySearchNames(request *GetCompatibilitySearchNamesRequest) (*GetProductSearchNamesResponse, error) {
	response := &GetProductSearchNamesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*

	Retrieves all available values and their dependencies for a given product
	property or a group of properties (of the product catalog). These values,
	along with their respective properties, can be used to search for products.
*/
func (service *ProductMetadataServicePortType) GetProductSearchValues(request *GetProductSearchValuesRequest) (*GetProductSearchValuesResponse, error) {
	response := &GetProductSearchValuesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductMetadataServicePortType) GetProductSearchValuesBulk(request *GetProductSearchValuesBulkRequest) (*GetProductSearchValuesBulkResponse, error) {
	response := &GetProductSearchValuesBulkResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/*
	Retrieves all available values and their dependencies for a given compatibility
	property or a group of compatibility properties. These values, along with their
	respective properties, can be used to search for products .
*/
func (service *ProductMetadataServicePortType) GetCompatibilitySearchValues(request *GetProductSearchValuesRequest) (*GetProductSearchValuesResponse, error) {
	response := &GetProductSearchValuesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductMetadataServicePortType) GetCompatibilitySearchValuesBulk(request *GetProductSearchValuesBulkRequest) (*GetCompatibilitySearchValuesBulkResponse, error) {
	response := &GetCompatibilitySearchValuesBulkResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductMetadataServicePortType) GetProductSearchDataVersion(request *GetProductSearchDataVersionRequest) (*GetProductSearchDataVersionResponse, error) {
	response := &GetProductSearchDataVersionResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ProductMetadataServicePortType) GetCompatibilitySearchDataVersion(request *GetProductSearchDataVersionRequest) (*GetProductSearchDataVersionResponse, error) {
	response := &GetProductSearchDataVersionResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/* This operation provides product metadata( aka catalog metadata). This can be used to create addProduct call in ProductService API.
 */
func (service *ProductMetadataServicePortType) GetProductMetadataBulk(request *ProductMetadataBulkRequest) (*ProductMetadataBulkResponse, error) {
	response := &ProductMetadataBulkResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
